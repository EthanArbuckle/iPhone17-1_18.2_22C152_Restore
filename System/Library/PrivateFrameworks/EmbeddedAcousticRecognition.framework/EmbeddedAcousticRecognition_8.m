void sub_1B1F25EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  if (*(unsigned char *)(v2 + 112))
  {
    v5 = *v3;
    if (*v3)
    {
      *(void *)(v2 + 96) = v5;
      operator delete(v5);
    }
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void sub_1B1F25F58()
{
}

void sub_1B1F25F60()
{
}

__n128 std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<quasar::corrective_reranking::TargetRange,false>>(std::vector<int> *this, __n128 *a2)
{
  if (LOBYTE(this[1].__begin_) == a2[1].n128_u8[8])
  {
    if (LOBYTE(this[1].__begin_))
    {
      result.n128_u64[0] = std::vector<int>::__move_assign((uint64_t)this, a2).n128_u64[0];
    }
  }
  else if (LOBYTE(this[1].__begin_))
  {
    begin = this->__begin_;
    if (this->__begin_)
    {
      this->__end_ = begin;
      operator delete(begin);
    }
    LOBYTE(this[1].__begin_) = 0;
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    __n128 result = *a2;
    *this = *(std::vector<int> *)a2->n128_u8;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    LOBYTE(this[1].__begin_) = 1;
  }
  return result;
}

void std::vector<quasar::corrective_reranking::Parse>::__vdeallocate(void **a1)
{
  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v3 - 232));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__sample[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::back_insert_iterator<std::vector<quasar::corrective_reranking::Parse>>,unsigned long,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(const quasar::corrective_reranking::Parse *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v6 = (a2 - (uint64_t)a1) / 232;
  if (v6 >= a4) {
    unint64_t v7 = a4;
  }
  else {
    unint64_t v7 = (a2 - (uint64_t)a1) / 232;
  }
  if (v7)
  {
    v9 = a1;
    v10 = (uint64_t *)(v6 - 1);
    do
    {
      v12[0] = 0;
      v12[1] = v10;
      if (std::uniform_int_distribution<unsigned long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v12, a5, v12) < v7)
      {
        v12[0] = a3;
        std::back_insert_iterator<std::vector<quasar::corrective_reranking::Parse>>::operator=[abi:ne180100](v12, v9);
        --v7;
      }
      v9 = (const quasar::corrective_reranking::Parse *)((char *)v9 + 232);
      v10 = (uint64_t *)((char *)v10 - 1);
    }
    while (v7);
  }
  return a3;
}

uint64_t **std::back_insert_iterator<std::vector<quasar::corrective_reranking::Parse>>::operator=[abi:ne180100](uint64_t **a1, const quasar::corrective_reranking::Parse *a2)
{
  v3 = *a1;
  unint64_t v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    uint64_t v5 = std::vector<quasar::corrective_reranking::Parse>::__push_back_slow_path<quasar::corrective_reranking::Parse const&>(*a1, a2);
  }
  else
  {
    quasar::corrective_reranking::Parse::Parse((std::string *)(*a1)[1], a2);
    uint64_t v5 = v4 + 232;
    v3[1] = v4 + 232;
  }
  v3[1] = v5;
  return a1;
}

void sub_1B1F2616C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__push_back_slow_path<quasar::corrective_reranking::Parse const&>(uint64_t *a1, const quasar::corrective_reranking::Parse *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x11A7B9611A7B961) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x34F72C234F72C235 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x8D3DCB08D3DCB0) {
    unint64_t v9 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v9 = v5;
  }
  v17 = a1 + 2;
  if (v9) {
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v7, v9);
  }
  else {
    v10 = 0;
  }
  v13 = v10;
  v14 = (std::string *)&v10[232 * v4];
  v16 = &v10[232 * v9];
  quasar::corrective_reranking::Parse::Parse(v14, a2);
  v15 = &v14[9].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1F26280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  unint64_t v5 = (long long *)*a1;
  uint64_t v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  if (v4 != (long long *)*a1)
  {
    do
    {
      v6 -= 232;
      uint64_t v4 = (long long *)((char *)v4 - 232);
      std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(232 * a2);
}

__n128 std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 32) = a3[2];
  *(void *)(a2 + 48) = *((void *)a3 + 6);
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 6) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(long long *)((char *)a3 + 56);
  *(void *)(a2 + 72) = *((void *)a3 + 9);
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 7) = 0;
  LODWORD(v3) = *((_DWORD *)a3 + 20);
  *(unsigned char *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 80) = v3;
  *(unsigned char *)(a2 + 112) = 0;
  if (*((unsigned char *)a3 + 112))
  {
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(_OWORD *)(a2 + 88) = *(long long *)((char *)a3 + 88);
    *(void *)(a2 + 104) = *((void *)a3 + 13);
    *((void *)a3 + 11) = 0;
    *((void *)a3 + 12) = 0;
    *((void *)a3 + 13) = 0;
    *(unsigned char *)(a2 + 112) = 1;
  }
  long long v4 = *(long long *)((char *)a3 + 120);
  *(void *)(a2 + 136) = *((void *)a3 + 17);
  *(_OWORD *)(a2 + 120) = v4;
  *((void *)a3 + 16) = 0;
  *((void *)a3 + 17) = 0;
  *((void *)a3 + 15) = 0;
  *(_DWORD *)(a2 + 144) = *((_DWORD *)a3 + 36);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 152) = *(long long *)((char *)a3 + 152);
  *(void *)(a2 + 168) = *((void *)a3 + 21);
  *((void *)a3 + 20) = 0;
  *((void *)a3 + 21) = 0;
  *((void *)a3 + 19) = 0;
  *(unsigned char *)(a2 + 176) = *((unsigned char *)a3 + 176);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 184) = *(long long *)((char *)a3 + 184);
  *(void *)(a2 + 200) = *((void *)a3 + 25);
  *((void *)a3 + 23) = 0;
  *((void *)a3 + 24) = 0;
  *((void *)a3 + 25) = 0;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 208) = 0;
  __n128 result = (__n128)a3[13];
  *(__n128 *)(a2 + 208) = result;
  *(void *)(a2 + 224) = *((void *)a3 + 28);
  *((void *)a3 + 26) = 0;
  *((void *)a3 + 27) = 0;
  *((void *)a3 + 28) = 0;
  return result;
}

uint64_t std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 232;
    quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(i - 232));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__emplace_back_slow_path<std::string&,quasar::corrective_reranking::TargetRange&>(uint64_t *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v11 = 0x555555555555555;
  }
  else {
    unint64_t v11 = v6;
  }
  v19 = a1 + 2;
  if (v11) {
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v9, v11);
  }
  else {
    v12 = 0;
  }
  v15 = v12;
  v16 = (std::string *)&v12[48 * v5];
  v18 = &v12[48 * v11];
  std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100]<std::string&,quasar::corrective_reranking::TargetRange&,0>(v16, a2, a3);
  v17 = v16 + 2;
  std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::~__split_buffer(&v15);
  return v13;
}

void sub_1B1F266EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100]<std::string&,quasar::corrective_reranking::TargetRange&,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(this[1].__r_.__value_.__r.__words, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  return this;
}

void sub_1B1F26770(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__emplace_back_slow_path<std::string const&,quasar::corrective_reranking::TargetRange&>(uint64_t *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v11 = 0x555555555555555;
  }
  else {
    unint64_t v11 = v6;
  }
  v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v9, v11);
  }
  else {
    char v12 = 0;
  }
  v15 = v12;
  v16 = (std::string *)&v12[48 * v5];
  v18 = &v12[48 * v11];
  std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100]<std::string const&,quasar::corrective_reranking::TargetRange&,0>(v16, a2, a3);
  v17 = v16 + 2;
  std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::~__split_buffer(&v15);
  return v13;
}

void sub_1B1F26ACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100]<std::string const&,quasar::corrective_reranking::TargetRange&,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(this[1].__r_.__value_.__r.__words, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  return this;
}

void sub_1B1F26B50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0x34F72C234F72C235 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 232 * a2;
      do
      {
        *(void *)(v7 + 176) = 0;
        *(_OWORD *)(v7 + 144) = 0uLL;
        *(_OWORD *)(v7 + 160) = 0uLL;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 128) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(unsigned char *)(v7 + 176) = 1;
        *(_OWORD *)(v7 + 184) = 0uLL;
        *(_OWORD *)(v7 + 200) = 0uLL;
        *(_OWORD *)(v7 + 216) = 0uLL;
        v7 += 232;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x34F72C234F72C235 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x11A7B9611A7B961) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x34F72C234F72C235 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x8D3DCB08D3DCB0) {
      unint64_t v11 = 0x11A7B9611A7B961;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(result, v11);
    }
    else {
      char v12 = 0;
    }
    long long v14 = &v12[232 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[232 * v11];
    v15 = &v14[232 * a2];
    do
    {
      *((void *)v14 + 22) = 0;
      *((_OWORD *)v14 + 9) = 0uLL;
      *((_OWORD *)v14 + 10) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 8) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *(_OWORD *)long long v14 = 0uLL;
      v14[176] = 1;
      *(_OWORD *)(v14 + 184) = 0uLL;
      *(_OWORD *)(v14 + 200) = 0uLL;
      *(_OWORD *)(v14 + 216) = 0uLL;
      v14 += 232;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1B1F26D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(uint64_t *a1, const quasar::corrective_reranking::Parse *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x11A7B9611A7B961) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x34F72C234F72C235 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x8D3DCB08D3DCB0) {
    unint64_t v9 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v9 = v5;
  }
  v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  long long v14 = (std::string *)&v10[232 * v4];
  v16 = &v10[232 * v9];
  quasar::corrective_reranking::Parse::Parse(v14, a2);
  v15 = &v14[9].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1F26E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange>(uint64_t *a1, uint64_t a2, long long **a3, float *a4, uint64_t a5)
{
  uint64_t v6 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x11A7B9611A7B961) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3) > v7) {
    unint64_t v7 = 0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[2] - *a1) >> 3)) >= 0x8D3DCB08D3DCB0) {
    unint64_t v12 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v12 = v7;
  }
  v20 = a1 + 2;
  if (v12) {
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>((uint64_t)(a1 + 2), v12);
  }
  else {
    uint64_t v13 = 0;
  }
  v16 = v13;
  v17 = (std::string *)&v13[232 * v6];
  v19 = &v13[232 * v12];
  std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange>((uint64_t)(a1 + 2), v17, a2, a3, a4, a5);
  v18 = &v17[9].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_1B1F26F7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange>(uint64_t a1, std::string *a2, uint64_t a3, long long **a4, float *a5, uint64_t a6)
{
  float v9 = *a5;
  *(_OWORD *)v17 = *(_OWORD *)a6;
  uint64_t v18 = *(void *)(a6 + 16);
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(void *)a6 = 0;
  char v19 = 1;
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  quasar::corrective_reranking::Parse::Parse(a2, a3, a4, (uint64_t)v17, (long long *)v15, (uint64_t)&__p, 1, v11, v9, 0.0, (long long **)v10);
  v20 = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v10[0] = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v10);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v19)
  {
    if (v17[0])
    {
      v17[1] = v17[0];
      operator delete(v17[0]);
    }
  }
}

void sub_1B1F270AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,char a29)
{
  *(void *)(v30 - 72) = v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 72));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a29)
  {
    if (a26)
    {
      a27 = (uint64_t)a26;
      operator delete(a26);
    }
  }
  _Unwind_Resume(a1);
}

long long *std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>,std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>>(uint64_t *a1, long long *a2, std::string *a3, long long *a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    unint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 4)) >= a5)
      {
        v21 = (long long *)&a3[2 * a5];
      }
      else
      {
        v21 = (long long *)((char *)a3 + 16 * ((uint64_t)(v12 - (void)a2) >> 4));
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange> const*,std::pair<std::string,quasar::corrective_reranking::TargetRange> const*,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>(v9, v21, a4, *(std::string **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[3 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>,std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*,0>(v7, (const std::string *)v21, (std::string *)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 4);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x555555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v30 = v9;
      if (v18) {
        char v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v9, v18);
      }
      else {
        char v19 = 0;
      }
      v22 = (std::string *)&v19[48 * v15];
      v27[0] = v19;
      v27[1] = v22;
      v28 = v22;
      uint64_t v29 = &v19[48 * v18];
      uint64_t v23 = 3 * a5;
      v24 = &v22[2 * a5];
      uint64_t v25 = 16 * v23;
      do
      {
        std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100](v22, (long long *)v7);
        v22 += 2;
        v7 += 2;
        v25 -= 48;
      }
      while (v25);
      v28 = v24;
      unint64_t v5 = (long long *)std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__swap_out_circular_buffer((uint64_t)a1, v27, v5);
      std::__split_buffer<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::~__split_buffer(v27);
    }
  }
  return v5;
}

void sub_1B1F272D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

long long *std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__move_range(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (long long *)((char *)a2 + v6 - a4);
  uint64_t v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *v9;
      *(void *)(v8 + 16) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v8 = v10;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *(void *)uint64_t v9 = 0;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 40) = 0;
      *(_OWORD *)(v8 + 24) = *(long long *)((char *)v9 + 24);
      *(void *)(v8 + 40) = *((void *)v9 + 5);
      *((void *)v9 + 3) = 0;
      *((void *)v9 + 4) = 0;
      *((void *)v9 + 5) = 0;
      v8 += 48;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::pair<std::string,quasar::corrective_reranking::TargetRange> *,std::pair<std::string,quasar::corrective_reranking::TargetRange> *,std::pair<std::string,quasar::corrective_reranking::TargetRange> *,0>(a2, v7, v6);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__swap_out_circular_buffer(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*,std::pair<std::string,quasar::corrective_reranking::TargetRange>*,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>(v7, a3, *(long long **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange> const*,std::pair<std::string,quasar::corrective_reranking::TargetRange> const*,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1F274BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(this[1].__r_.__value_.__r.__words, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  return this;
}

void sub_1B1F2753C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::pair<std::string,quasar::corrective_reranking::TargetRange> *,std::pair<std::string,quasar::corrective_reranking::TargetRange> *,std::pair<std::string,quasar::corrective_reranking::TargetRange> *,0>(long long *a1, long long *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 3;
      a3 -= 48;
      std::pair<std::string,quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100](a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::pair<std::string,quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100](uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  std::vector<int>::__move_assign(a1 + 24, (__n128 *)((char *)a2 + 24));
  return a1;
}

const std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>,std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*,0>(const std::string *a1, const std::string *a2, std::string *a3)
{
  long long v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::pair<std::string,quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100](a3, v4);
      v4 += 2;
      a3 += 2;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

std::string *std::pair<std::string,quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100](std::string *a1, const std::string *a2)
{
  std::string::operator=(a1, a2);
  if (a1 != a2) {
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)&a1[1], a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_, (uint64_t)(a2[1].__r_.__value_.__l.__size_ - a2[1].__r_.__value_.__r.__words[0]) >> 3);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*,std::pair<std::string,quasar::corrective_reranking::TargetRange>*,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 40) = 0;
      *(_OWORD *)(v4 + 24) = *(long long *)((char *)a2 + 24);
      *(void *)(v4 + 40) = *((void *)a2 + 5);
      *((void *)a2 + 3) = 0;
      *((void *)a2 + 4) = 0;
      *((void *)a2 + 5) = 0;
      v4 += 48;
      a2 += 3;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>,std::pair<std::string,quasar::corrective_reranking::TargetRange>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange const&>(uint64_t *a1, uint64_t a2, long long **a3, float *a4, uint64_t a5)
{
  uint64_t v6 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x11A7B9611A7B961) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3) > v7) {
    unint64_t v7 = 0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[2] - *a1) >> 3)) >= 0x8D3DCB08D3DCB0) {
    unint64_t v12 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v12 = v7;
  }
  uint64_t v20 = a1 + 2;
  if (v12) {
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>((uint64_t)(a1 + 2), v12);
  }
  else {
    uint64_t v13 = 0;
  }
  unint64_t v16 = v13;
  uint64_t v17 = (std::string *)&v13[232 * v6];
  char v19 = &v13[232 * v12];
  std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange const&>((uint64_t)(a1 + 2), v17, a2, a3, a4, a5);
  unint64_t v18 = &v17[9].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_1B1F2792C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange const&>(uint64_t a1, std::string *a2, uint64_t a3, long long **a4, float *a5, uint64_t a6)
{
  float v9 = *a5;
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&v17, *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3);
  char v20 = 1;
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  quasar::corrective_reranking::Parse::Parse(a2, a3, a4, (uint64_t)&v17, (long long *)v15, (uint64_t)&__p, 1, v11, v9, 0.0, (long long **)v10);
  v21 = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  v10[0] = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v10);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v20)
  {
    if (v17)
    {
      unint64_t v18 = v17;
      operator delete(v17);
    }
  }
}

void sub_1B1F27A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,char a28)
{
  *(void *)(v29 - 72) = v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 72));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a28)
  {
    if (a25)
    {
      a26 = (uint64_t)a25;
      operator delete(a25);
    }
  }
  _Unwind_Resume(a1);
}

long long *std::vector<quasar::corrective_reranking::Parse>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::corrective_reranking::Parse*>,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(uint64_t *a1, long long *a2, const quasar::corrective_reranking::Parse *a3, uint64_t a4, uint64_t a5)
{
  long long v5 = a2;
  if (a5 >= 1)
  {
    unint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x34F72C234F72C235 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if (0x34F72C234F72C235 * ((uint64_t)(v12 - (void)a2) >> 3) >= a5)
      {
        uint64_t v21 = (uint64_t)a3 + 232 * a5;
      }
      else
      {
        uint64_t v21 = (uint64_t)a3 + 8 * ((uint64_t)(v12 - (void)a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<quasar::corrective_reranking::Parse>::__move_range((uint64_t)a1, v5, v12, (uint64_t)v5 + 232 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>((uint64_t)v7, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x34F72C234F72C235 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x11A7B9611A7B961) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x34F72C234F72C235 * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0x34F72C234F72C235 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x8D3DCB08D3DCB0) {
        unint64_t v18 = 0x11A7B9611A7B961;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      v22 = (std::string *)&v19[232 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      uint64_t v28 = &v19[232 * v18];
      uint64_t v23 = 232 * a5;
      v24 = (std::string *)((char *)v22 + 232 * a5);
      do
      {
        quasar::corrective_reranking::Parse::Parse(v22, v7);
        v22 = (std::string *)((char *)v22 + 232);
        unint64_t v7 = (const quasar::corrective_reranking::Parse *)((char *)v7 + 232);
        v23 -= 232;
      }
      while (v23);
      v27 = v24;
      long long v5 = (long long *)std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1B1F27CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

long long *std::vector<quasar::corrective_reranking::Parse>::__move_range(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (long long *)((char *)a2 + v6 - a4);
  uint64_t v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v10 = (long long *)((char *)a2 + v6 - a4);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse>(a1 + 16, v8, v10);
      uint64_t v10 = (long long *)((char *)v10 + 232);
      v8 += 232;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,0>(a2, v7, v6);
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(uint64_t *a1, void *a2, long long *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = (long long *)*a1;
  uint64_t v9 = v6;
  if ((long long *)*a1 != a3)
  {
    uint64_t v10 = a3;
    uint64_t v9 = a2[1];
    do
    {
      v9 -= 232;
      uint64_t v10 = (long long *)((char *)v10 - 232);
      std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse>(v7, v9, v10);
    }
    while (v10 != v8);
  }
  a2[1] = v9;
  uint64_t v11 = (long long *)a1[1];
  uint64_t v12 = a2[2];
  if (v11 != v3)
  {
    do
    {
      std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse>(v7, v12, v3);
      uint64_t v3 = (long long *)((char *)v3 + 232);
      v12 += 232;
    }
    while (v3 != v11);
    uint64_t v9 = a2[1];
  }
  a2[2] = v12;
  uint64_t v13 = *a1;
  *a1 = v9;
  a2[1] = v13;
  uint64_t v14 = a1[1];
  a1[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = a1[2];
  a1[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      quasar::corrective_reranking::Parse::Parse((std::string *)(a4 + v7), (const quasar::corrective_reranking::Parse *)(a2 + v7));
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1F27EC4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 232;
    do
    {
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v4 + v2));
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,0>(long long *a1, long long *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v6 = (long long *)((char *)v6 - 232);
      a3 -= 232;
      quasar::corrective_reranking::Parse::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::corrective_reranking::Parse::operator=(a3, v4);
      v4 += 232;
      a3 += 232;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t quasar::corrective_reranking::Parse::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  if (a1 != a2)
  {
    std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(a1 + 32, *(std::string **)(a2 + 32), *(long long **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 56), *(std::string **)(a2 + 56), *(long long **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::corrective_reranking::TargetRange,false> const&>(a1 + 88, a2 + 88);
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 152), *(char **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 184), *(std::string **)(a2 + 184), *(long long **)(a2 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 208), *(std::string **)(a2 + 208), *(long long **)(a2 + 216), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3));
  }
  return a1;
}

void std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(__str, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(v8, (long long *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(__str, (std::string *)a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0) {
        operator delete(*(void **)(v18 - 32));
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B1F281E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1F281F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::corrective_reranking::TargetRange,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      uint64_t v3 = *(void *)(a2 + 8);
      unint64_t v4 = (v3 - *(void *)a2) >> 3;
      long long v5 = *(char **)a2;
      std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)a1, v5, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    *(unsigned char *)(a1 + 24) = 1;
  }
}

void *std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::corrective_reranking::Parse>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1F28310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::corrective_reranking::Parse>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[232 * v4];
  return result;
}

float std::vector<quasar::EuclidNeighbor>::__construct_one_at_end[abi:ne180100]<std::string const&,double>(uint64_t a1, long long *a2, double *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  double v5 = *a3;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v6;
  }
  float result = v5;
  *(_DWORD *)(v4 + 24) = -1;
  *(float *)(v4 + 28) = result;
  *(void *)(a1 + 8) = v4 + 32;
  return result;
}

void sub_1B1F283FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::EuclidNeighbor>::__emplace_back_slow_path<std::string const&,double>(uint64_t *a1, long long *a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v23 = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  uint64_t v13 = (std::string *)&v12[32 * v5];
  v20[0] = v12;
  v20[1] = v13;
  uint64_t v21 = v13;
  v22 = &v12[32 * v11];
  double v14 = *a3;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v13 = v21;
  }
  else
  {
    long long v15 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
  }
  float v16 = v14;
  uint64_t v17 = &v12[32 * v5];
  *((_DWORD *)v17 + 6) = -1;
  *((float *)v17 + 7) = v16;
  uint64_t v21 = (std::string *)((char *)v13 + 32);
  std::vector<quasar::EuclidNeighbor>::__swap_out_circular_buffer(a1, v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_1B1F28520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse&>(uint64_t *a1, const quasar::corrective_reranking::Parse *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x11A7B9611A7B961) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x34F72C234F72C235 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x8D3DCB08D3DCB0) {
    unint64_t v9 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  double v14 = (std::string *)&v10[232 * v4];
  float v16 = &v10[232 * v9];
  quasar::corrective_reranking::Parse::Parse(v14, a2);
  long long v15 = &v14[9].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1F28640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

long long *std::vector<quasar::corrective_reranking::Parse>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::corrective_reranking::Parse const*>,std::__wrap_iter<quasar::corrective_reranking::Parse const*>>(uint64_t *a1, long long *a2, const quasar::corrective_reranking::Parse *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x34F72C234F72C235 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if (0x34F72C234F72C235 * ((uint64_t)(v12 - (void)a2) >> 3) >= a5)
      {
        uint64_t v21 = (uint64_t)a3 + 232 * a5;
      }
      else
      {
        uint64_t v21 = (uint64_t)a3 + 8 * ((uint64_t)(v12 - (void)a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<quasar::corrective_reranking::Parse>::__move_range((uint64_t)a1, v5, v12, (uint64_t)v5 + 232 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>((uint64_t)v7, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x34F72C234F72C235 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x11A7B9611A7B961) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x34F72C234F72C235 * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0x34F72C234F72C235 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x8D3DCB08D3DCB0) {
        unint64_t v18 = 0x11A7B9611A7B961;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      v22 = (std::string *)&v19[232 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      uint64_t v28 = &v19[232 * v18];
      uint64_t v23 = 232 * a5;
      v24 = (std::string *)((char *)v22 + 232 * a5);
      do
      {
        quasar::corrective_reranking::Parse::Parse(v22, v7);
        v22 = (std::string *)((char *)v22 + 232);
        uint64_t v7 = (const quasar::corrective_reranking::Parse *)((char *)v7 + 232);
        v23 -= 232;
      }
      while (v23);
      v27 = v24;
      unint64_t v5 = (long long *)std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1B1F28830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      quasar::corrective_reranking::Parse::Parse((std::string *)(a4 + v7), (const quasar::corrective_reranking::Parse *)(a2 + v7));
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1F288BC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 232;
    do
    {
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v4 + v2));
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__construct_at[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse*>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 7) = 0;
  LODWORD(v2) = *((_DWORD *)a2 + 20);
  *(unsigned char *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 80) = v2;
  *(unsigned char *)(a1 + 112) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *((void *)a2 + 11) = 0;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 13) = 0;
    *(unsigned char *)(a1 + 112) = 1;
  }
  long long v3 = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(_OWORD *)(a1 + 120) = v3;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 15) = 0;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 36);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 152) = *(long long *)((char *)a2 + 152);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  *((void *)a2 + 20) = 0;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 19) = 0;
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 184) = *(long long *)((char *)a2 + 184);
  *(void *)(a1 + 200) = *((void *)a2 + 25);
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 24) = 0;
  *((void *)a2 + 25) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 208) = 0;
  __n128 result = (__n128)a2[13];
  *(__n128 *)(a1 + 208) = result;
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  *((void *)a2 + 28) = 0;
  return result;
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1F28A70(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::get_temporary_buffer[abi:ne180100]<quasar::corrective_reranking::Parse>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x8D3DCB08D3DCB0) {
    unint64_t v1 = 0x8D3DCB08D3DCB0;
  }
  else {
    unint64_t v1 = a1;
  }
  long long v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    __n128 result = operator new(232 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  if (a3 >= 2)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      if (*((float *)a2 - 22) > *(float *)(a1 + 144))
      {
        size_t v8 = (long long *)((char *)a2 - 232);
        std::swap[abi:ne180100]<quasar::corrective_reranking::Parse>(a1, v8);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((long long *)a1 != a2)
      {
        uint64_t v15 = a1 + 232;
        if ((long long *)(a1 + 232) != a2)
        {
          uint64_t v16 = 0;
          uint64_t v17 = a1;
          do
          {
            uint64_t v18 = v15;
            if (*(float *)(v17 + 376) > *(float *)(v17 + 144))
            {
              long long v19 = *(_OWORD *)v15;
              uint64_t v32 = *(void *)(v15 + 16);
              long long v31 = v19;
              *(void *)(v15 + 8) = 0;
              *(void *)(v15 + 16) = 0;
              *(void *)uint64_t v15 = 0;
              int v33 = *(_DWORD *)(v17 + 256);
              long long v34 = *(_OWORD *)(v17 + 264);
              uint64_t v35 = *(void *)(v17 + 280);
              *(void *)(v17 + 272) = 0;
              *(void *)(v17 + 280) = 0;
              *(void *)(v17 + 264) = 0;
              long long v36 = *(_OWORD *)(v17 + 288);
              uint64_t v37 = *(void *)(v17 + 304);
              *(void *)(v17 + 288) = 0;
              *(void *)(v17 + 296) = 0;
              *(void *)(v17 + 304) = 0;
              int v38 = *(_DWORD *)(v17 + 312);
              LOBYTE(v39) = 0;
              char v41 = 0;
              if (*(unsigned char *)(v17 + 344))
              {
                long long v39 = *(_OWORD *)(v17 + 320);
                uint64_t v40 = *(void *)(v17 + 336);
                *(void *)(v17 + 328) = 0;
                *(void *)(v17 + 336) = 0;
                *(void *)(v17 + 320) = 0;
                char v41 = 1;
              }
              long long v42 = *(_OWORD *)(v17 + 352);
              uint64_t v43 = *(void *)(v17 + 368);
              *(void *)(v17 + 360) = 0;
              *(void *)(v17 + 368) = 0;
              *(void *)(v17 + 352) = 0;
              float v44 = *(float *)(v17 + 376);
              long long v45 = *(_OWORD *)(v17 + 384);
              uint64_t v46 = *(void *)(v17 + 400);
              *(void *)(v17 + 384) = 0;
              *(void *)(v17 + 392) = 0;
              *(void *)(v17 + 400) = 0;
              char v47 = *(unsigned char *)(v17 + 408);
              long long v48 = *(_OWORD *)(v17 + 416);
              uint64_t v49 = *(void *)(v17 + 432);
              *(void *)(v17 + 416) = 0;
              *(void *)(v17 + 424) = 0;
              *(void *)(v17 + 432) = 0;
              long long v50 = *(_OWORD *)(v17 + 440);
              uint64_t v51 = *(void *)(v17 + 456);
              *(void *)(v17 + 440) = 0;
              *(void *)(v17 + 448) = 0;
              uint64_t v20 = v16;
              *(void *)(v17 + 456) = 0;
              while (1)
              {
                quasar::corrective_reranking::Parse::operator=(v7 + v20 + 232, (long long *)(v7 + v20));
                if (!v20) {
                  break;
                }
                float v21 = *(float *)(v7 + v20 - 88);
                v20 -= 232;
                if (v44 <= v21)
                {
                  uint64_t v22 = v7 + v20 + 232;
                  goto LABEL_24;
                }
              }
              uint64_t v22 = v7;
LABEL_24:
              quasar::corrective_reranking::Parse::operator=(v22, &v31);
              quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v31);
            }
            uint64_t v15 = v18 + 232;
            v16 += 232;
            uint64_t v17 = v18;
          }
          while ((long long *)(v18 + 232) != a2);
        }
      }
    }
    else
    {
      uint64_t v11 = (quasar::corrective_reranking::Parse *)a4;
      unint64_t v12 = a3 >> 1;
      uint64_t v13 = (long long *)(a1 + 232 * (a3 >> 1));
      unint64_t v14 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v23 = std::__stable_sort_move<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>((long long *)a1, v13, v14, a4, a6);
        uint64_t v24 = (uint64_t)v11 + 232 * v12;
        std::__stable_sort_move<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>((long long *)(v7 + 232 * (a3 >> 1)), a2, a3 - (a3 >> 1), v24, v23);
        uint64_t v25 = (char *)v11 + 232 * a3;
        uint64_t v26 = v24;
        v27 = v11;
        while ((char *)v26 != v25)
        {
          if (*(float *)(v26 + 144) <= *((float *)v27 + 36))
          {
            quasar::corrective_reranking::Parse::operator=(v7, (long long *)v27);
            v27 = (quasar::corrective_reranking::Parse *)((char *)v27 + 232);
          }
          else
          {
            quasar::corrective_reranking::Parse::operator=(v7, (long long *)v26);
            v26 += 232;
          }
          v7 += 232;
          if (v27 == (quasar::corrective_reranking::Parse *)v24)
          {
            if ((char *)v26 != v25)
            {
              uint64_t v28 = 0;
              do
              {
                quasar::corrective_reranking::Parse::operator=(v7 + v28, (long long *)(v26 + v28));
                v28 += 232;
              }
              while ((char *)(v26 + v28) != v25);
            }
            goto LABEL_40;
          }
        }
        if (v27 != (quasar::corrective_reranking::Parse *)v24)
        {
          uint64_t v29 = 0;
          do
          {
            quasar::corrective_reranking::Parse::operator=(v7 + v29, (long long *)((char *)v27 + v29));
            v29 += 232;
          }
          while ((quasar::corrective_reranking::Parse *)((char *)v27 + v29) != (quasar::corrective_reranking::Parse *)v24);
        }
LABEL_40:
        if (v11)
        {
          unint64_t v30 = a3;
          do
          {
            quasar::corrective_reranking::Parse::~Parse(v11);
            uint64_t v11 = (quasar::corrective_reranking::Parse *)((char *)v11 + 232);
            --v30;
          }
          while (v30);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(a1, v13, v14, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(v7 + 232 * (a3 >> 1), a2, a3 - (a3 >> 1), v11, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(v7, (long long *)(v7 + 232 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v11, a5);
      }
    }
  }
}

void sub_1B1F28ED4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    do
    {
      quasar::corrective_reranking::Parse::~Parse(v1);
      unint64_t v1 = (quasar::corrective_reranking::Parse *)((char *)v1 + 232);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(long long *a1, long long *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (a3)
  {
    uint64_t v5 = a4;
    size_t v8 = a1;
    if (a3 == 2)
    {
      uint64_t v13 = (void *)(a4 + 264);
      unint64_t v14 = (long long *)((char *)a2 - 232);
      uint64_t v15 = (void *)(a4 + 32);
      uint64_t v16 = (void *)(a4 + 56);
      if (*((float *)a2 - 22) <= *((float *)a1 + 36))
      {
        long long v36 = *a1;
        *(void *)(a4 + 16) = *((void *)a1 + 2);
        *(_OWORD *)a4 = v36;
        *((void *)a1 + 1) = 0;
        *((void *)a1 + 2) = 0;
        *(void *)a1 = 0;
        *(_DWORD *)(a4 + 24) = *((_DWORD *)a1 + 6);
        *(void *)(a4 + 40) = 0;
        *(void *)(a4 + 48) = 0;
        void *v15 = 0;
        *(_OWORD *)(a4 + 32) = a1[2];
        *(void *)(a4 + 48) = *((void *)a1 + 6);
        *((void *)a1 + 4) = 0;
        *((void *)a1 + 5) = 0;
        *((void *)a1 + 6) = 0;
        void *v16 = 0;
        *(void *)(a4 + 64) = 0;
        *(void *)(a4 + 72) = 0;
        *(_OWORD *)(a4 + 56) = *(long long *)((char *)a1 + 56);
        *(void *)(a4 + 72) = *((void *)a1 + 9);
        *((void *)a1 + 8) = 0;
        *((void *)a1 + 9) = 0;
        *((void *)a1 + 7) = 0;
        LODWORD(v36) = *((_DWORD *)a1 + 20);
        *(unsigned char *)(a4 + 88) = 0;
        *(_DWORD *)(a4 + 80) = v36;
        *(unsigned char *)(a4 + 112) = 0;
        if (*((unsigned char *)a1 + 112))
        {
          *(void *)(a4 + 88) = 0;
          *(void *)(a4 + 96) = 0;
          *(void *)(a4 + 104) = 0;
          *(_OWORD *)(a4 + 88) = *(long long *)((char *)a1 + 88);
          *(void *)(a4 + 104) = *((void *)a1 + 13);
          *((void *)a1 + 11) = 0;
          *((void *)a1 + 12) = 0;
          *((void *)a1 + 13) = 0;
          *(unsigned char *)(a4 + 112) = 1;
        }
        long long v37 = *(long long *)((char *)a1 + 120);
        *(void *)(a4 + 136) = *((void *)a1 + 17);
        *(_OWORD *)(a4 + 120) = v37;
        *((void *)a1 + 16) = 0;
        *((void *)a1 + 17) = 0;
        *((void *)a1 + 15) = 0;
        *(_DWORD *)(a4 + 144) = *((_DWORD *)a1 + 36);
        *(void *)(a4 + 160) = 0;
        *(void *)(a4 + 168) = 0;
        *(void *)(a4 + 152) = 0;
        *(_OWORD *)(a4 + 152) = *(long long *)((char *)a1 + 152);
        *(void *)(a4 + 168) = *((void *)a1 + 21);
        *((void *)a1 + 20) = 0;
        *((void *)a1 + 21) = 0;
        *((void *)a1 + 19) = 0;
        *(unsigned char *)(a4 + 176) = *((unsigned char *)a1 + 176);
        *(void *)(a4 + 192) = 0;
        *(void *)(a4 + 200) = 0;
        *(void *)(a4 + 184) = 0;
        *(_OWORD *)(a4 + 184) = *(long long *)((char *)a1 + 184);
        *(void *)(a4 + 200) = *((void *)a1 + 25);
        *((void *)a1 + 23) = 0;
        *((void *)a1 + 24) = 0;
        *((void *)a1 + 25) = 0;
        *(void *)(a4 + 216) = 0;
        *(void *)(a4 + 224) = 0;
        *(void *)(a4 + 208) = 0;
        *(_OWORD *)(a4 + 208) = a1[13];
        *(void *)(a4 + 224) = *((void *)a1 + 28);
        *((void *)a1 + 26) = 0;
        *((void *)a1 + 27) = 0;
        *((void *)a1 + 28) = 0;
        long long v38 = *v14;
        *(void *)(a4 + 248) = *((void *)a2 - 27);
        *(_OWORD *)(a4 + 232) = v38;
        *((void *)a2 - 28) = 0;
        *((void *)a2 - 27) = 0;
        *(void *)unint64_t v14 = 0;
        *(_DWORD *)(a4 + 256) = *((_DWORD *)a2 - 52);
        *(void *)(a4 + 272) = 0;
        *(void *)(a4 + 280) = 0;
        void *v13 = 0;
        *(_OWORD *)uint64_t v13 = *(long long *)((char *)a2 - 200);
        *(void *)(a4 + 280) = *((void *)a2 - 23);
        *((void *)a2 - 25) = 0;
        *((void *)a2 - 24) = 0;
        *((void *)a2 - 23) = 0;
        *(void *)(a4 + 288) = 0;
        *(void *)(a4 + 296) = 0;
        *(void *)(a4 + 304) = 0;
        *(_OWORD *)(a4 + 288) = *(a2 - 11);
        *(void *)(a4 + 304) = *((void *)a2 - 20);
        *((void *)a2 - 21) = 0;
        *((void *)a2 - 20) = 0;
        *((void *)a2 - 22) = 0;
        *(_DWORD *)(a4 + 312) = *((_DWORD *)a2 - 38);
        *(unsigned char *)(a4 + 320) = 0;
        *(unsigned char *)(a4 + 344) = 0;
        if (*((unsigned char *)a2 - 120))
        {
          *(void *)(a4 + 320) = 0;
          *(void *)(a4 + 328) = 0;
          *(void *)(a4 + 336) = 0;
          *(_OWORD *)(a4 + 320) = *(a2 - 9);
          *(void *)(a4 + 336) = *((void *)a2 - 16);
          *((void *)a2 - 18) = 0;
          *((void *)a2 - 17) = 0;
          *((void *)a2 - 16) = 0;
          *(unsigned char *)(a4 + 344) = 1;
        }
        long long v39 = *(a2 - 7);
        *(void *)(a4 + 368) = *((void *)a2 - 12);
        *(_OWORD *)(a4 + 352) = v39;
        *((void *)a2 - 13) = 0;
        *((void *)a2 - 12) = 0;
        *((void *)a2 - 14) = 0;
        *(_DWORD *)(a4 + 376) = *((_DWORD *)a2 - 22);
        *(void *)(a4 + 392) = 0;
        *(void *)(a4 + 400) = 0;
        *(void *)(a4 + 384) = 0;
        *(_OWORD *)(a4 + 384) = *(a2 - 5);
        *(void *)(a4 + 400) = *((void *)a2 - 8);
        *((void *)a2 - 9) = 0;
        *((void *)a2 - 8) = 0;
        *((void *)a2 - 10) = 0;
        *(unsigned char *)(a4 + 408) = *((unsigned char *)a2 - 56);
        *(void *)(a4 + 424) = 0;
        *(void *)(a4 + 432) = 0;
        *(void *)(a4 + 416) = 0;
        *(_OWORD *)(a4 + 416) = *(a2 - 3);
        *(void *)(a4 + 432) = *((void *)a2 - 4);
        *((void *)a2 - 6) = 0;
        *((void *)a2 - 5) = 0;
        *((void *)a2 - 4) = 0;
        *(void *)(a4 + 448) = 0;
        *(void *)(a4 + 456) = 0;
        *(void *)(a4 + 440) = 0;
        __n128 result = *(__n128 *)((char *)a2 - 24);
        uint64_t v11 = (void *)(a4 + 456);
        *(__n128 *)(a4 + 440) = result;
        float v21 = (void *)a2 - 1;
        unint64_t v12 = (void *)a2 - 3;
        goto LABEL_39;
      }
      long long v17 = *v14;
      *(void *)(a4 + 16) = *((void *)a2 - 27);
      *(_OWORD *)a4 = v17;
      *((void *)a2 - 28) = 0;
      *((void *)a2 - 27) = 0;
      *(void *)unint64_t v14 = 0;
      *(_DWORD *)(a4 + 24) = *((_DWORD *)a2 - 52);
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
      void *v15 = 0;
      *(_OWORD *)(a4 + 32) = *(long long *)((char *)a2 - 200);
      *(void *)(a4 + 48) = *((void *)a2 - 23);
      *((void *)a2 - 25) = 0;
      *((void *)a2 - 24) = 0;
      *((void *)a2 - 23) = 0;
      void *v16 = 0;
      *(void *)(a4 + 64) = 0;
      *(void *)(a4 + 72) = 0;
      *(_OWORD *)(a4 + 56) = *(a2 - 11);
      *(void *)(a4 + 72) = *((void *)a2 - 20);
      *((void *)a2 - 21) = 0;
      *((void *)a2 - 20) = 0;
      *((void *)a2 - 22) = 0;
      LODWORD(v17) = *((_DWORD *)a2 - 38);
      *(unsigned char *)(a4 + 88) = 0;
      *(_DWORD *)(a4 + 80) = v17;
      *(unsigned char *)(a4 + 112) = 0;
      if (*((unsigned char *)a2 - 120))
      {
        *(void *)(a4 + 88) = 0;
        *(void *)(a4 + 96) = 0;
        *(void *)(a4 + 104) = 0;
        *(_OWORD *)(a4 + 88) = *(a2 - 9);
        *(void *)(a4 + 104) = *((void *)a2 - 16);
        *((void *)a2 - 18) = 0;
        *((void *)a2 - 17) = 0;
        *((void *)a2 - 16) = 0;
        *(unsigned char *)(a4 + 112) = 1;
      }
      long long v18 = *(a2 - 7);
      *(void *)(a4 + 136) = *((void *)a2 - 12);
      *(_OWORD *)(a4 + 120) = v18;
      *((void *)a2 - 13) = 0;
      *((void *)a2 - 12) = 0;
      *((void *)a2 - 14) = 0;
      *(_DWORD *)(a4 + 144) = *((_DWORD *)a2 - 22);
      *(void *)(a4 + 160) = 0;
      *(void *)(a4 + 168) = 0;
      *(void *)(a4 + 152) = 0;
      *(_OWORD *)(a4 + 152) = *(a2 - 5);
      *(void *)(a4 + 168) = *((void *)a2 - 8);
      *((void *)a2 - 9) = 0;
      *((void *)a2 - 8) = 0;
      *((void *)a2 - 10) = 0;
      *(unsigned char *)(a4 + 176) = *((unsigned char *)a2 - 56);
      *(void *)(a4 + 192) = 0;
      *(void *)(a4 + 200) = 0;
      *(void *)(a4 + 184) = 0;
      *(_OWORD *)(a4 + 184) = *(a2 - 3);
      *(void *)(a4 + 200) = *((void *)a2 - 4);
      *((void *)a2 - 6) = 0;
      *((void *)a2 - 5) = 0;
      *((void *)a2 - 4) = 0;
      *(void *)(a4 + 216) = 0;
      *(void *)(a4 + 224) = 0;
      *(void *)(a4 + 208) = 0;
      *(_OWORD *)(a4 + 208) = *(long long *)((char *)a2 - 24);
      *(void *)(a4 + 224) = *((void *)a2 - 1);
      *((void *)a2 - 3) = 0;
      *((void *)a2 - 2) = 0;
      *((void *)a2 - 1) = 0;
      long long v19 = *a1;
      *(void *)(a4 + 248) = *((void *)a1 + 2);
      *(_OWORD *)(a4 + 232) = v19;
      *((void *)a1 + 1) = 0;
      *((void *)a1 + 2) = 0;
      *(void *)a1 = 0;
      *(_DWORD *)(a4 + 256) = *((_DWORD *)a1 + 6);
      *(void *)(a4 + 272) = 0;
      *(void *)(a4 + 280) = 0;
      void *v13 = 0;
      *(_OWORD *)uint64_t v13 = a1[2];
      *(void *)(a4 + 280) = *((void *)a1 + 6);
      *((void *)a1 + 4) = 0;
      *((void *)a1 + 5) = 0;
      *((void *)a1 + 6) = 0;
      *(void *)(a4 + 288) = 0;
      *(void *)(a4 + 296) = 0;
      *(void *)(a4 + 304) = 0;
      *(_OWORD *)(a4 + 288) = *(long long *)((char *)a1 + 56);
      *(void *)(a4 + 304) = *((void *)a1 + 9);
      *((void *)a1 + 8) = 0;
      *((void *)a1 + 9) = 0;
      *((void *)a1 + 7) = 0;
      *(_DWORD *)(a4 + 312) = *((_DWORD *)a1 + 20);
      *(unsigned char *)(a4 + 320) = 0;
      *(unsigned char *)(a4 + 344) = 0;
      if (*((unsigned char *)a1 + 112))
      {
        *(void *)(a4 + 320) = 0;
        *(void *)(a4 + 328) = 0;
        *(void *)(a4 + 336) = 0;
        *(_OWORD *)(a4 + 320) = *(long long *)((char *)a1 + 88);
        *(void *)(a4 + 336) = *((void *)a1 + 13);
        *((void *)a1 + 11) = 0;
        *((void *)a1 + 12) = 0;
        *((void *)a1 + 13) = 0;
        *(unsigned char *)(a4 + 344) = 1;
      }
      long long v20 = *(long long *)((char *)a1 + 120);
      *(void *)(a4 + 368) = *((void *)a1 + 17);
      *(_OWORD *)(a4 + 352) = v20;
      *((void *)a1 + 16) = 0;
      *((void *)a1 + 17) = 0;
      *((void *)a1 + 15) = 0;
      *(_DWORD *)(a4 + 376) = *((_DWORD *)a1 + 36);
      *(void *)(a4 + 392) = 0;
      *(void *)(a4 + 400) = 0;
      *(void *)(a4 + 384) = 0;
      *(_OWORD *)(a4 + 384) = *(long long *)((char *)a1 + 152);
      *(void *)(a4 + 400) = *((void *)a1 + 21);
      *((void *)a1 + 20) = 0;
      *((void *)a1 + 21) = 0;
      *((void *)a1 + 19) = 0;
      *(unsigned char *)(a4 + 408) = *((unsigned char *)a1 + 176);
      *(void *)(a4 + 424) = 0;
      *(void *)(a4 + 432) = 0;
      *(void *)(a4 + 416) = 0;
      *(_OWORD *)(a4 + 416) = *(long long *)((char *)a1 + 184);
      *(void *)(a4 + 432) = *((void *)a1 + 25);
      *((void *)a1 + 23) = 0;
      *((void *)a1 + 24) = 0;
      *((void *)a1 + 25) = 0;
      *(void *)(a4 + 448) = 0;
      *(void *)(a4 + 456) = 0;
      *(void *)(a4 + 440) = 0;
      unint64_t v12 = a1 + 13;
      __n128 result = (__n128)a1[13];
      uint64_t v11 = (void *)(a4 + 456);
      *(__n128 *)(a4 + 440) = result;
LABEL_13:
      float v21 = v12 + 2;
LABEL_39:
      *uint64_t v11 = *v21;
      void *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      return result;
    }
    if (a3 == 1)
    {
      long long v9 = *a1;
      *(void *)(a4 + 16) = *((void *)a1 + 2);
      *(_OWORD *)a4 = v9;
      *((void *)a1 + 1) = 0;
      *((void *)a1 + 2) = 0;
      *(void *)a1 = 0;
      *(_DWORD *)(a4 + 24) = *((_DWORD *)a1 + 6);
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
      *(void *)(a4 + 32) = 0;
      *(_OWORD *)(a4 + 32) = a1[2];
      *(void *)(a4 + 48) = *((void *)a1 + 6);
      *((void *)a1 + 4) = 0;
      *((void *)a1 + 5) = 0;
      *((void *)a1 + 6) = 0;
      *(void *)(a4 + 56) = 0;
      *(void *)(a4 + 64) = 0;
      *(void *)(a4 + 72) = 0;
      *(_OWORD *)(a4 + 56) = *(long long *)((char *)a1 + 56);
      *(void *)(a4 + 72) = *((void *)a1 + 9);
      *((void *)a1 + 8) = 0;
      *((void *)a1 + 9) = 0;
      *((void *)a1 + 7) = 0;
      LODWORD(v9) = *((_DWORD *)a1 + 20);
      *(unsigned char *)(a4 + 88) = 0;
      *(_DWORD *)(a4 + 80) = v9;
      *(unsigned char *)(a4 + 112) = 0;
      if (*((unsigned char *)a1 + 112))
      {
        *(void *)(a4 + 88) = 0;
        *(void *)(a4 + 96) = 0;
        *(void *)(a4 + 104) = 0;
        *(_OWORD *)(a4 + 88) = *(long long *)((char *)a1 + 88);
        *(void *)(a4 + 104) = *((void *)a1 + 13);
        *((void *)a1 + 11) = 0;
        *((void *)a1 + 12) = 0;
        *((void *)a1 + 13) = 0;
        *(unsigned char *)(a4 + 112) = 1;
      }
      long long v10 = *(long long *)((char *)a1 + 120);
      *(void *)(a4 + 136) = *((void *)a1 + 17);
      *(_OWORD *)(a4 + 120) = v10;
      *((void *)a1 + 16) = 0;
      *((void *)a1 + 17) = 0;
      *((void *)a1 + 15) = 0;
      *(_DWORD *)(a4 + 144) = *((_DWORD *)a1 + 36);
      *(void *)(a4 + 160) = 0;
      *(void *)(a4 + 168) = 0;
      *(void *)(a4 + 152) = 0;
      *(_OWORD *)(a4 + 152) = *(long long *)((char *)a1 + 152);
      *(void *)(a4 + 168) = *((void *)a1 + 21);
      *((void *)a1 + 20) = 0;
      *((void *)a1 + 21) = 0;
      *((void *)a1 + 19) = 0;
      *(unsigned char *)(a4 + 176) = *((unsigned char *)a1 + 176);
      *(void *)(a4 + 192) = 0;
      *(void *)(a4 + 200) = 0;
      *(void *)(a4 + 184) = 0;
      *(_OWORD *)(a4 + 184) = *(long long *)((char *)a1 + 184);
      *(void *)(a4 + 200) = *((void *)a1 + 25);
      *((void *)a1 + 23) = 0;
      *((void *)a1 + 24) = 0;
      *((void *)a1 + 25) = 0;
      *(void *)(a4 + 224) = 0;
      uint64_t v11 = (void *)(a4 + 224);
      *(void *)(a4 + 208) = 0;
      *(void *)(a4 + 216) = 0;
      unint64_t v12 = a1 + 13;
      __n128 result = (__n128)a1[13];
      *(__n128 *)(a4 + 208) = result;
      goto LABEL_13;
    }
    if ((uint64_t)a3 > 8)
    {
      uint64_t v40 = 232 * (a3 >> 1);
      char v41 = (long long *)((char *)a1 + v40);
      std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(a1, (char *)a1 + v40, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>((char *)v8 + v40, a2, a3 - (a3 >> 1), v5 + v40, a3 - (a3 >> 1));
      long long v42 = (long long *)((char *)v8 + v40);
      while (v42 != a2)
      {
        uint64_t v43 = (void *)(v5 + 32);
        float v44 = (void *)(v5 + 56);
        if (*((float *)v42 + 36) <= *((float *)v8 + 36))
        {
          long long v47 = *v8;
          *(void *)(v5 + 16) = *((void *)v8 + 2);
          *(_OWORD *)uint64_t v5 = v47;
          *((void *)v8 + 1) = 0;
          *((void *)v8 + 2) = 0;
          *(void *)size_t v8 = 0;
          *(_DWORD *)(v5 + 24) = *((_DWORD *)v8 + 6);
          *(void *)(v5 + 40) = 0;
          *(void *)(v5 + 48) = 0;
          *uint64_t v43 = 0;
          *(_OWORD *)(v5 + 32) = v8[2];
          *(void *)(v5 + 48) = *((void *)v8 + 6);
          *((void *)v8 + 4) = 0;
          *((void *)v8 + 5) = 0;
          *((void *)v8 + 6) = 0;
          *float v44 = 0;
          *(void *)(v5 + 64) = 0;
          *(void *)(v5 + 72) = 0;
          *(_OWORD *)(v5 + 56) = *(long long *)((char *)v8 + 56);
          *(void *)(v5 + 72) = *((void *)v8 + 9);
          *((void *)v8 + 8) = 0;
          *((void *)v8 + 9) = 0;
          *((void *)v8 + 7) = 0;
          LODWORD(v47) = *((_DWORD *)v8 + 20);
          *(unsigned char *)(v5 + 88) = 0;
          *(_DWORD *)(v5 + 80) = v47;
          *(unsigned char *)(v5 + 112) = 0;
          if (*((unsigned char *)v8 + 112))
          {
            *(void *)(v5 + 88) = 0;
            *(void *)(v5 + 96) = 0;
            *(void *)(v5 + 104) = 0;
            *(_OWORD *)(v5 + 88) = *(long long *)((char *)v8 + 88);
            *(void *)(v5 + 104) = *((void *)v8 + 13);
            *((void *)v8 + 11) = 0;
            *((void *)v8 + 12) = 0;
            *((void *)v8 + 13) = 0;
            *(unsigned char *)(v5 + 112) = 1;
          }
          long long v48 = *(long long *)((char *)v8 + 120);
          *(void *)(v5 + 136) = *((void *)v8 + 17);
          *(_OWORD *)(v5 + 120) = v48;
          *((void *)v8 + 16) = 0;
          *((void *)v8 + 17) = 0;
          *((void *)v8 + 15) = 0;
          *(_DWORD *)(v5 + 144) = *((_DWORD *)v8 + 36);
          *(void *)(v5 + 160) = 0;
          *(void *)(v5 + 168) = 0;
          *(void *)(v5 + 152) = 0;
          *(_OWORD *)(v5 + 152) = *(long long *)((char *)v8 + 152);
          *(void *)(v5 + 168) = *((void *)v8 + 21);
          *((void *)v8 + 20) = 0;
          *((void *)v8 + 21) = 0;
          *((void *)v8 + 19) = 0;
          *(unsigned char *)(v5 + 176) = *((unsigned char *)v8 + 176);
          *(void *)(v5 + 192) = 0;
          *(void *)(v5 + 200) = 0;
          *(void *)(v5 + 184) = 0;
          *(_OWORD *)(v5 + 184) = *(long long *)((char *)v8 + 184);
          *(void *)(v5 + 200) = *((void *)v8 + 25);
          *((void *)v8 + 23) = 0;
          *((void *)v8 + 24) = 0;
          *((void *)v8 + 25) = 0;
          *(void *)(v5 + 216) = 0;
          *(void *)(v5 + 224) = 0;
          *(void *)(v5 + 208) = 0;
          __n128 result = (__n128)v8[13];
          *(__n128 *)(v5 + 208) = result;
          *(void *)(v5 + 224) = *((void *)v8 + 28);
          *((void *)v8 + 26) = 0;
          *((void *)v8 + 27) = 0;
          *((void *)v8 + 28) = 0;
          size_t v8 = (long long *)((char *)v8 + 232);
        }
        else
        {
          long long v45 = *v42;
          *(void *)(v5 + 16) = *((void *)v42 + 2);
          *(_OWORD *)uint64_t v5 = v45;
          *((void *)v42 + 1) = 0;
          *((void *)v42 + 2) = 0;
          *(void *)long long v42 = 0;
          *(_DWORD *)(v5 + 24) = *((_DWORD *)v42 + 6);
          *(void *)(v5 + 40) = 0;
          *(void *)(v5 + 48) = 0;
          *uint64_t v43 = 0;
          *(_OWORD *)(v5 + 32) = v42[2];
          *(void *)(v5 + 48) = *((void *)v42 + 6);
          *((void *)v42 + 4) = 0;
          *((void *)v42 + 5) = 0;
          *((void *)v42 + 6) = 0;
          *float v44 = 0;
          *(void *)(v5 + 64) = 0;
          *(void *)(v5 + 72) = 0;
          *(_OWORD *)(v5 + 56) = *(long long *)((char *)v42 + 56);
          *(void *)(v5 + 72) = *((void *)v42 + 9);
          *((void *)v42 + 8) = 0;
          *((void *)v42 + 9) = 0;
          *((void *)v42 + 7) = 0;
          LODWORD(v45) = *((_DWORD *)v42 + 20);
          *(unsigned char *)(v5 + 88) = 0;
          *(_DWORD *)(v5 + 80) = v45;
          *(unsigned char *)(v5 + 112) = 0;
          if (*((unsigned char *)v42 + 112))
          {
            *(void *)(v5 + 88) = 0;
            *(void *)(v5 + 96) = 0;
            *(void *)(v5 + 104) = 0;
            *(_OWORD *)(v5 + 88) = *(long long *)((char *)v42 + 88);
            *(void *)(v5 + 104) = *((void *)v42 + 13);
            *((void *)v42 + 11) = 0;
            *((void *)v42 + 12) = 0;
            *((void *)v42 + 13) = 0;
            *(unsigned char *)(v5 + 112) = 1;
          }
          long long v46 = *(long long *)((char *)v42 + 120);
          *(void *)(v5 + 136) = *((void *)v42 + 17);
          *(_OWORD *)(v5 + 120) = v46;
          *((void *)v42 + 16) = 0;
          *((void *)v42 + 17) = 0;
          *((void *)v42 + 15) = 0;
          *(_DWORD *)(v5 + 144) = *((_DWORD *)v42 + 36);
          *(void *)(v5 + 160) = 0;
          *(void *)(v5 + 168) = 0;
          *(void *)(v5 + 152) = 0;
          *(_OWORD *)(v5 + 152) = *(long long *)((char *)v42 + 152);
          *(void *)(v5 + 168) = *((void *)v42 + 21);
          *((void *)v42 + 20) = 0;
          *((void *)v42 + 21) = 0;
          *((void *)v42 + 19) = 0;
          *(unsigned char *)(v5 + 176) = *((unsigned char *)v42 + 176);
          *(void *)(v5 + 192) = 0;
          *(void *)(v5 + 200) = 0;
          *(void *)(v5 + 184) = 0;
          *(_OWORD *)(v5 + 184) = *(long long *)((char *)v42 + 184);
          *(void *)(v5 + 200) = *((void *)v42 + 25);
          *((void *)v42 + 23) = 0;
          *((void *)v42 + 24) = 0;
          *((void *)v42 + 25) = 0;
          *(void *)(v5 + 216) = 0;
          *(void *)(v5 + 224) = 0;
          *(void *)(v5 + 208) = 0;
          __n128 result = (__n128)v42[13];
          *(__n128 *)(v5 + 208) = result;
          *(void *)(v5 + 224) = *((void *)v42 + 28);
          *((void *)v42 + 26) = 0;
          *((void *)v42 + 27) = 0;
          *((void *)v42 + 28) = 0;
          long long v42 = (long long *)((char *)v42 + 232);
        }
        v5 += 232;
        if (v8 == v41)
        {
          if (v42 != a2)
          {
            uint64_t v49 = 0;
            do
            {
              uint64_t v50 = (uint64_t)v42 + v49;
              uint64_t v51 = v5 + v49;
              long long v52 = *(long long *)((char *)v42 + v49);
              *(void *)(v51 + 16) = *(void *)((char *)v42 + v49 + 16);
              *(_OWORD *)uint64_t v51 = v52;
              *(void *)(v50 + 8) = 0;
              *(void *)(v50 + 16) = 0;
              *(void *)uint64_t v50 = 0;
              *(_DWORD *)(v51 + 24) = *(_DWORD *)((char *)v42 + v49 + 24);
              *(void *)(v51 + 40) = 0;
              *(void *)(v51 + 48) = 0;
              *(void *)(v51 + 32) = 0;
              *(_OWORD *)(v51 + 32) = *(long long *)((char *)v42 + v49 + 32);
              *(void *)(v51 + 48) = *(void *)((char *)v42 + v49 + 48);
              *(void *)(v50 + 32) = 0;
              *(void *)(v50 + 40) = 0;
              *(void *)(v50 + 48) = 0;
              *(void *)(v51 + 56) = 0;
              *(void *)(v51 + 64) = 0;
              *(void *)(v51 + 72) = 0;
              *(_OWORD *)(v51 + 56) = *(long long *)((char *)v42 + v49 + 56);
              *(void *)(v51 + 72) = *(void *)((char *)v42 + v49 + 72);
              *(void *)(v50 + 64) = 0;
              *(void *)(v50 + 72) = 0;
              *(void *)(v50 + 56) = 0;
              *(_DWORD *)(v51 + 80) = *(_DWORD *)((char *)v42 + v49 + 80);
              *(unsigned char *)(v5 + v49 + 88) = 0;
              *(unsigned char *)(v51 + 112) = 0;
              if (*((unsigned char *)v42 + v49 + 112))
              {
                *(void *)(v5 + v49 + 88) = 0;
                *(void *)(v5 + v49 + 96) = 0;
                *(void *)(v5 + v49 + 104) = 0;
                *(_OWORD *)(v51 + 88) = *(_OWORD *)(v50 + 88);
                *(void *)(v51 + 104) = *(void *)(v50 + 104);
                *(void *)(v50 + 88) = 0;
                *(void *)(v50 + 96) = 0;
                *(void *)(v50 + 104) = 0;
                *(unsigned char *)(v51 + 112) = 1;
              }
              long long v53 = *(_OWORD *)(v50 + 120);
              *(void *)(v51 + 136) = *(void *)(v50 + 136);
              *(_OWORD *)(v51 + 120) = v53;
              *(void *)(v50 + 128) = 0;
              *(void *)(v50 + 136) = 0;
              *(void *)(v50 + 120) = 0;
              *(_DWORD *)(v51 + 144) = *(_DWORD *)(v50 + 144);
              *(void *)(v51 + 160) = 0;
              *(void *)(v51 + 168) = 0;
              *(void *)(v51 + 152) = 0;
              *(_OWORD *)(v51 + 152) = *(_OWORD *)(v50 + 152);
              *(void *)(v51 + 168) = *(void *)(v50 + 168);
              *(void *)(v50 + 160) = 0;
              *(void *)(v50 + 168) = 0;
              *(void *)(v50 + 152) = 0;
              *(unsigned char *)(v51 + 176) = *(unsigned char *)(v50 + 176);
              *(void *)(v51 + 192) = 0;
              *(void *)(v51 + 200) = 0;
              *(void *)(v51 + 184) = 0;
              *(_OWORD *)(v51 + 184) = *(_OWORD *)(v50 + 184);
              *(void *)(v51 + 200) = *(void *)(v50 + 200);
              *(void *)(v50 + 184) = 0;
              *(void *)(v50 + 192) = 0;
              *(void *)(v50 + 200) = 0;
              *(void *)(v51 + 216) = 0;
              *(void *)(v51 + 224) = 0;
              *(void *)(v51 + 208) = 0;
              __n128 result = *(__n128 *)(v50 + 208);
              *(__n128 *)(v51 + 208) = result;
              *(void *)(v51 + 224) = *(void *)(v50 + 224);
              *(void *)(v50 + 208) = 0;
              *(void *)(v50 + 216) = 0;
              *(void *)(v50 + 224) = 0;
              v49 += 232;
            }
            while ((long long *)(v50 + 232) != a2);
          }
          return result;
        }
      }
      if (v8 != v41)
      {
        uint64_t v54 = 0;
        do
        {
          uint64_t v55 = (uint64_t)v8 + v54;
          uint64_t v56 = v5 + v54;
          long long v57 = *(long long *)((char *)v8 + v54);
          *(void *)(v56 + 16) = *(void *)((char *)v8 + v54 + 16);
          *(_OWORD *)uint64_t v56 = v57;
          *(void *)(v55 + 8) = 0;
          *(void *)(v55 + 16) = 0;
          *(void *)uint64_t v55 = 0;
          *(_DWORD *)(v56 + 24) = *(_DWORD *)((char *)v8 + v54 + 24);
          *(void *)(v56 + 40) = 0;
          *(void *)(v56 + 48) = 0;
          *(void *)(v56 + 32) = 0;
          *(_OWORD *)(v56 + 32) = *(long long *)((char *)v8 + v54 + 32);
          *(void *)(v56 + 48) = *(void *)((char *)v8 + v54 + 48);
          *(void *)(v55 + 32) = 0;
          *(void *)(v55 + 40) = 0;
          *(void *)(v55 + 48) = 0;
          *(void *)(v56 + 56) = 0;
          *(void *)(v56 + 64) = 0;
          *(void *)(v56 + 72) = 0;
          *(_OWORD *)(v56 + 56) = *(long long *)((char *)v8 + v54 + 56);
          *(void *)(v56 + 72) = *(void *)((char *)v8 + v54 + 72);
          *(void *)(v55 + 64) = 0;
          *(void *)(v55 + 72) = 0;
          *(void *)(v55 + 56) = 0;
          *(_DWORD *)(v56 + 80) = *(_DWORD *)((char *)v8 + v54 + 80);
          *(unsigned char *)(v5 + v54 + 88) = 0;
          v58 = (void *)(v5 + v54 + 88);
          *(unsigned char *)(v56 + 112) = 0;
          if (*((unsigned char *)v8 + v54 + 112))
          {
            void *v58 = 0;
            *(void *)(v5 + v54 + 96) = 0;
            *(void *)(v5 + v54 + 104) = 0;
            *(_OWORD *)v58 = *(_OWORD *)(v55 + 88);
            *(void *)(v56 + 104) = *(void *)(v55 + 104);
            *(void *)(v55 + 88) = 0;
            *(void *)(v55 + 96) = 0;
            *(void *)(v55 + 104) = 0;
            *(unsigned char *)(v56 + 112) = 1;
          }
          long long v59 = *(_OWORD *)(v55 + 120);
          *(void *)(v56 + 136) = *(void *)(v55 + 136);
          *(_OWORD *)(v56 + 120) = v59;
          *(void *)(v55 + 128) = 0;
          *(void *)(v55 + 136) = 0;
          *(void *)(v55 + 120) = 0;
          *(_DWORD *)(v56 + 144) = *(_DWORD *)(v55 + 144);
          *(void *)(v56 + 160) = 0;
          *(void *)(v56 + 168) = 0;
          *(void *)(v56 + 152) = 0;
          *(_OWORD *)(v56 + 152) = *(_OWORD *)(v55 + 152);
          *(void *)(v56 + 168) = *(void *)(v55 + 168);
          *(void *)(v55 + 160) = 0;
          *(void *)(v55 + 168) = 0;
          *(void *)(v55 + 152) = 0;
          *(unsigned char *)(v56 + 176) = *(unsigned char *)(v55 + 176);
          *(void *)(v56 + 192) = 0;
          *(void *)(v56 + 200) = 0;
          *(void *)(v56 + 184) = 0;
          *(_OWORD *)(v56 + 184) = *(_OWORD *)(v55 + 184);
          *(void *)(v56 + 200) = *(void *)(v55 + 200);
          *(void *)(v55 + 184) = 0;
          *(void *)(v55 + 192) = 0;
          *(void *)(v55 + 200) = 0;
          *(void *)(v56 + 216) = 0;
          *(void *)(v56 + 224) = 0;
          *(void *)(v56 + 208) = 0;
          __n128 result = *(__n128 *)(v55 + 208);
          *(__n128 *)(v56 + 208) = result;
          *(void *)(v56 + 224) = *(void *)(v55 + 224);
          *(void *)(v55 + 208) = 0;
          *(void *)(v55 + 216) = 0;
          *(void *)(v55 + 224) = 0;
          v54 += 232;
        }
        while ((long long *)(v55 + 232) != v41);
      }
    }
    else if (a1 != a2)
    {
      long long v22 = *a1;
      *(void *)(a4 + 16) = *((void *)a1 + 2);
      *(_OWORD *)a4 = v22;
      *((void *)a1 + 1) = 0;
      *((void *)a1 + 2) = 0;
      *(void *)a1 = 0;
      *(_DWORD *)(a4 + 24) = *((_DWORD *)a1 + 6);
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
      *(void *)(a4 + 32) = 0;
      *(_OWORD *)(a4 + 32) = a1[2];
      *(void *)(a4 + 48) = *((void *)a1 + 6);
      *((void *)a1 + 4) = 0;
      *((void *)a1 + 5) = 0;
      *((void *)a1 + 6) = 0;
      *(void *)(a4 + 56) = 0;
      *(void *)(a4 + 64) = 0;
      *(void *)(a4 + 72) = 0;
      *(_OWORD *)(a4 + 56) = *(long long *)((char *)a1 + 56);
      *(void *)(a4 + 72) = *((void *)a1 + 9);
      *((void *)a1 + 8) = 0;
      *((void *)a1 + 9) = 0;
      *((void *)a1 + 7) = 0;
      LODWORD(v22) = *((_DWORD *)a1 + 20);
      *(unsigned char *)(a4 + 88) = 0;
      *(_DWORD *)(a4 + 80) = v22;
      *(unsigned char *)(a4 + 112) = 0;
      if (*((unsigned char *)a1 + 112))
      {
        *(void *)(a4 + 88) = 0;
        *(void *)(a4 + 96) = 0;
        *(void *)(a4 + 104) = 0;
        *(_OWORD *)(a4 + 88) = *(long long *)((char *)a1 + 88);
        *(void *)(a4 + 104) = *((void *)a1 + 13);
        *((void *)a1 + 11) = 0;
        *((void *)a1 + 12) = 0;
        *((void *)a1 + 13) = 0;
        *(unsigned char *)(a4 + 112) = 1;
      }
      long long v23 = *(long long *)((char *)a1 + 120);
      *(void *)(a4 + 136) = *((void *)a1 + 17);
      *(_OWORD *)(a4 + 120) = v23;
      *((void *)a1 + 16) = 0;
      *((void *)a1 + 17) = 0;
      *((void *)a1 + 15) = 0;
      *(_DWORD *)(a4 + 144) = *((_DWORD *)a1 + 36);
      *(void *)(a4 + 160) = 0;
      *(void *)(a4 + 168) = 0;
      *(void *)(a4 + 152) = 0;
      *(_OWORD *)(a4 + 152) = *(long long *)((char *)a1 + 152);
      *(void *)(a4 + 168) = *((void *)a1 + 21);
      *((void *)a1 + 20) = 0;
      *((void *)a1 + 21) = 0;
      *((void *)a1 + 19) = 0;
      *(unsigned char *)(a4 + 176) = *((unsigned char *)a1 + 176);
      *(void *)(a4 + 192) = 0;
      *(void *)(a4 + 200) = 0;
      *(void *)(a4 + 184) = 0;
      *(_OWORD *)(a4 + 184) = *(long long *)((char *)a1 + 184);
      *(void *)(a4 + 200) = *((void *)a1 + 25);
      *((void *)a1 + 23) = 0;
      *((void *)a1 + 24) = 0;
      *((void *)a1 + 25) = 0;
      *(void *)(a4 + 216) = 0;
      *(void *)(a4 + 224) = 0;
      *(void *)(a4 + 208) = 0;
      __n128 result = (__n128)a1[13];
      *(__n128 *)(a4 + 208) = result;
      *(void *)(a4 + 224) = *((void *)a1 + 28);
      *((void *)a1 + 26) = 0;
      *((void *)a1 + 27) = 0;
      *((void *)a1 + 28) = 0;
      uint64_t v24 = (long long *)((char *)a1 + 232);
      if ((long long *)((char *)a1 + 232) != a2)
      {
        uint64_t v25 = 0;
        uint64_t v26 = (long long *)a4;
        do
        {
          v27 = v24;
          uint64_t v28 = (void *)v26 + 33;
          uint64_t v29 = (long long *)((char *)v26 + 232);
          float v30 = *((float *)v26 + 36);
          if (*((float *)v8 + 94) <= v30)
          {
            long long v33 = *v27;
            *((void *)v26 + 31) = *((void *)v27 + 2);
            *uint64_t v29 = v33;
            *((void *)v27 + 1) = 0;
            *((void *)v27 + 2) = 0;
            *(void *)v27 = 0;
            *((_DWORD *)v26 + 64) = *((_DWORD *)v8 + 64);
            *((void *)v26 + 34) = 0;
            *((void *)v26 + 35) = 0;
            void *v28 = 0;
            *(_OWORD *)uint64_t v28 = *(long long *)((char *)v8 + 264);
            *((void *)v26 + 35) = *((void *)v8 + 35);
            *((void *)v8 + 33) = 0;
            *((void *)v8 + 34) = 0;
            *((void *)v8 + 35) = 0;
            *((void *)v26 + 36) = 0;
            *((void *)v26 + 37) = 0;
            *((void *)v26 + 38) = 0;
            v26[18] = v8[18];
            *((void *)v26 + 38) = *((void *)v8 + 38);
            *((void *)v8 + 37) = 0;
            *((void *)v8 + 38) = 0;
            *((void *)v8 + 36) = 0;
            *((_DWORD *)v26 + 78) = *((_DWORD *)v8 + 78);
            *((unsigned char *)v26 + 320) = 0;
            *((unsigned char *)v26 + 344) = 0;
            if (*((unsigned char *)v8 + 344))
            {
              *((void *)v26 + 40) = 0;
              *((void *)v26 + 41) = 0;
              *((void *)v26 + 42) = 0;
              v26[20] = v8[20];
              *((void *)v26 + 42) = *((void *)v8 + 42);
              *((void *)v8 + 40) = 0;
              *((void *)v8 + 41) = 0;
              *((void *)v8 + 42) = 0;
              *((unsigned char *)v26 + 344) = 1;
            }
            long long v34 = v8[22];
            *((void *)v26 + 46) = *((void *)v8 + 46);
            v26[22] = v34;
            *((void *)v8 + 45) = 0;
            *((void *)v8 + 46) = 0;
            *((void *)v8 + 44) = 0;
            *((_DWORD *)v26 + 94) = *((_DWORD *)v8 + 94);
            *((void *)v26 + 49) = 0;
            *((void *)v26 + 50) = 0;
            *((void *)v26 + 48) = 0;
            v26[24] = v8[24];
            *((void *)v26 + 50) = *((void *)v8 + 50);
            *((void *)v8 + 49) = 0;
            *((void *)v8 + 50) = 0;
            *((void *)v8 + 48) = 0;
            *((unsigned char *)v26 + 408) = *((unsigned char *)v8 + 408);
            *((void *)v26 + 53) = 0;
            *((void *)v26 + 54) = 0;
            *((void *)v26 + 52) = 0;
            __n128 result = (__n128)v8[26];
            v26[26] = (__int128)result;
            *((void *)v26 + 54) = *((void *)v8 + 54);
            *((void *)v8 + 52) = 0;
            *((void *)v8 + 53) = 0;
            *((void *)v8 + 54) = 0;
            *((void *)v26 + 56) = 0;
            *((void *)v26 + 57) = 0;
            *((void *)v26 + 55) = 0;
            uint64_t v35 = *((void *)v8 + 56);
            *((void *)v26 + 55) = *((void *)v8 + 55);
            *((void *)v26 + 56) = v35;
            *((void *)v26 + 57) = *((void *)v8 + 57);
            *((void *)v8 + 55) = 0;
            *((void *)v8 + 56) = 0;
            *((void *)v8 + 57) = 0;
          }
          else
          {
            *uint64_t v29 = *v26;
            *((void *)v26 + 31) = *((void *)v26 + 2);
            *((void *)v26 + 1) = 0;
            *((void *)v26 + 2) = 0;
            *(void *)uint64_t v26 = 0;
            *((_DWORD *)v26 + 64) = *((_DWORD *)v26 + 6);
            *(_OWORD *)uint64_t v28 = v26[2];
            *((void *)v26 + 35) = *((void *)v26 + 6);
            *((void *)v26 + 4) = 0;
            *((void *)v26 + 5) = 0;
            v26[18] = *(long long *)((char *)v26 + 56);
            *((void *)v26 + 38) = *((void *)v26 + 9);
            *((void *)v26 + 6) = 0;
            *((void *)v26 + 7) = 0;
            *((void *)v26 + 8) = 0;
            *((void *)v26 + 9) = 0;
            *((_DWORD *)v26 + 78) = *((_DWORD *)v26 + 20);
            *((unsigned char *)v26 + 320) = 0;
            *((unsigned char *)v26 + 344) = 0;
            if (*((unsigned char *)v26 + 112))
            {
              v26[20] = *(long long *)((char *)v26 + 88);
              *((void *)v26 + 42) = *((void *)v26 + 13);
              *((void *)v26 + 12) = 0;
              *((void *)v26 + 13) = 0;
              *((void *)v26 + 11) = 0;
              *((unsigned char *)v26 + 344) = 1;
            }
            v26[22] = *(long long *)((char *)v26 + 120);
            *((void *)v26 + 46) = *((void *)v26 + 17);
            *((void *)v26 + 16) = 0;
            *((void *)v26 + 17) = 0;
            *((void *)v26 + 15) = 0;
            *((float *)v26 + 94) = v30;
            v26[24] = *(long long *)((char *)v26 + 152);
            *((void *)v26 + 50) = *((void *)v26 + 21);
            *((void *)v26 + 19) = 0;
            *((void *)v26 + 20) = 0;
            *((void *)v26 + 21) = 0;
            *((unsigned char *)v26 + 408) = *((unsigned char *)v26 + 176);
            v26[26] = *(long long *)((char *)v26 + 184);
            *((void *)v26 + 54) = *((void *)v26 + 25);
            *((void *)v26 + 23) = 0;
            *((void *)v26 + 24) = 0;
            *(long long *)((char *)v26 + 440) = v26[13];
            *((void *)v26 + 57) = *((void *)v26 + 28);
            *((void *)v26 + 25) = 0;
            *((void *)v26 + 26) = 0;
            uint64_t v31 = v5;
            *((void *)v26 + 27) = 0;
            *((void *)v26 + 28) = 0;
            if (v26 != (long long *)v5)
            {
              uint64_t v32 = v25;
              while (1)
              {
                uint64_t v31 = v5 + v32;
                if (*((float *)v8 + 94) <= *(float *)(v5 + v32 - 88)) {
                  break;
                }
                v32 -= 232;
                quasar::corrective_reranking::Parse::operator=(v31, (long long *)(v32 + v5));
                if (!v32)
                {
                  uint64_t v31 = v5;
                  break;
                }
              }
            }
            quasar::corrective_reranking::Parse::operator=(v31, v27);
          }
          uint64_t v24 = (long long *)((char *)v27 + 232);
          v25 += 232;
          uint64_t v26 = v29;
          size_t v8 = v27;
        }
        while ((long long *)((char *)v27 + 232) != a2);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(uint64_t a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, quasar::corrective_reranking::Parse *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4) {
        return;
      }
      uint64_t v13 = 0;
      uint64_t v14 = -a4;
      while (1)
      {
        uint64_t v15 = (uint64_t)v13 + a1;
        if (*((float *)a2 + 36) > *(float *)((char *)v13 + a1 + 144)) {
          break;
        }
        uint64_t v13 = (long long *)((char *)v13 + 232);
        if (__CFADD__(v14++, 1)) {
          return;
        }
      }
      uint64_t v17 = -v14;
      v69 = a3;
      v70 = a6;
      if (-v14 >= v8)
      {
        if (v14 == -1)
        {
          std::swap[abi:ne180100]<quasar::corrective_reranking::Parse>((uint64_t)v13 + a1, a2);
          return;
        }
        if (v14 > 0) {
          uint64_t v17 = 1 - v14;
        }
        uint64_t v27 = v17 >> 1;
        uint64_t v26 = a2;
        if (a2 != a3)
        {
          unint64_t v28 = 0x34F72C234F72C235 * (((char *)a3 - (char *)a2) >> 3);
          uint64_t v26 = a2;
          do
          {
            unint64_t v29 = v28 >> 1;
            float v30 = (char *)v26 + 232 * (v28 >> 1);
            float v31 = *((float *)v30 + 36);
            uint64_t v32 = (long long *)(v30 + 232);
            v28 += ~(v28 >> 1);
            if (v31 > *(float *)((char *)v13 + 232 * v27 + a1 + 144)) {
              uint64_t v26 = v32;
            }
            else {
              unint64_t v28 = v29;
            }
          }
          while (v28);
        }
        uint64_t v20 = (uint64_t)v13 + 232 * v27 + a1;
        uint64_t v19 = 0x34F72C234F72C235 * (((char *)v26 - (char *)a2) >> 3);
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v18 = v8;
        }
        else {
          uint64_t v18 = v8 + 1;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = (uint64_t)a2;
        if ((long long *)((char *)a2 - a1) != v13)
        {
          unint64_t v21 = 0x34F72C234F72C235 * (((char *)a2 - a1 - (char *)v13) >> 3);
          uint64_t v20 = (uint64_t)v13 + a1;
          do
          {
            unint64_t v22 = v21 >> 1;
            unint64_t v23 = v20 + 232 * (v21 >> 1);
            float v24 = *(float *)(v23 + 144);
            uint64_t v25 = v23 + 232;
            v21 += ~(v21 >> 1);
            if (*((float *)a2 + 58 * v19 + 36) > v24) {
              unint64_t v21 = v22;
            }
            else {
              uint64_t v20 = v25;
            }
          }
          while (v21);
        }
        uint64_t v26 = (long long *)((char *)a2 + 232 * v19);
        uint64_t v27 = 0x34F72C234F72C235 * ((v20 - a1 - (uint64_t)v13) >> 3);
      }
      if ((long long *)v20 == a2)
      {
        uint64_t v37 = (uint64_t)v26;
      }
      else if (v26 == a2)
      {
        uint64_t v37 = v20;
      }
      else
      {
        uint64_t v33 = a7;
        uint64_t v34 = v27;
        uint64_t v35 = v19;
        uint64_t v36 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::Parse *>>(v20, a2, v26);
        uint64_t v19 = v35;
        uint64_t v27 = v34;
        a7 = v33;
        uint64_t v37 = v36;
      }
      a4 = -(v27 + v14);
      uint64_t v38 = v8 - v19;
      if (v27 + v19 >= v8 - (v27 + v19) - v14)
      {
        char v41 = v26;
        a6 = v70;
        uint64_t v42 = v27;
        uint64_t v43 = v19;
        uint64_t v40 = a7;
        std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(v37, v41, v69, -(v27 + v14), v38, v70);
        a2 = (long long *)v20;
        uint64_t v38 = v43;
        a4 = v42;
        a3 = (long long *)v37;
      }
      else
      {
        uint64_t v39 = (uint64_t)v13 + a1;
        uint64_t v40 = a7;
        std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(v39, v20, v37, v27, v19, v70);
        uint64_t v15 = v37;
        a2 = v26;
        a6 = v70;
        a3 = v69;
      }
      uint64_t v8 = v38;
      a1 = v15;
      a7 = v40;
      if (!v38) {
        return;
      }
    }
    if (a4 <= v8)
    {
      if ((long long *)a1 == a2) {
        return;
      }
      uint64_t v57 = 0;
      uint64_t v45 = 0;
      do
      {
        uint64_t v58 = a1 + v57;
        long long v59 = (char *)a6 + v57;
        long long v60 = *(_OWORD *)(a1 + v57);
        *((void *)v59 + 2) = *(void *)(a1 + v57 + 16);
        *(_OWORD *)long long v59 = v60;
        *(void *)(v58 + 8) = 0;
        *(void *)(v58 + 16) = 0;
        *(void *)uint64_t v58 = 0;
        *((_DWORD *)v59 + 6) = *(_DWORD *)(a1 + v57 + 24);
        *((void *)v59 + 5) = 0;
        *((void *)v59 + 6) = 0;
        *((void *)v59 + 4) = 0;
        *((_OWORD *)v59 + 2) = *(_OWORD *)(a1 + v57 + 32);
        *((void *)v59 + 6) = *(void *)(a1 + v57 + 48);
        *(void *)(v58 + 32) = 0;
        *(void *)(v58 + 40) = 0;
        *(void *)(v58 + 48) = 0;
        *((void *)v59 + 7) = 0;
        *((void *)v59 + 8) = 0;
        *((void *)v59 + 9) = 0;
        *(_OWORD *)(v59 + 56) = *(_OWORD *)(a1 + v57 + 56);
        *((void *)v59 + 9) = *(void *)(a1 + v57 + 72);
        *(void *)(v58 + 64) = 0;
        *(void *)(v58 + 72) = 0;
        *(void *)(v58 + 56) = 0;
        *((_DWORD *)v59 + 20) = *(_DWORD *)(a1 + v57 + 80);
        *((unsigned char *)a6 + v57 + 88) = 0;
        v61 = (void *)((char *)a6 + v57 + 88);
        v59[112] = 0;
        if (*(unsigned char *)(a1 + v57 + 112))
        {
          void *v61 = 0;
          *(void *)((char *)a6 + v57 + 96) = 0;
          *(void *)((char *)a6 + v57 + 104) = 0;
          *(_OWORD *)v61 = *(_OWORD *)(v58 + 88);
          *((void *)v59 + 13) = *(void *)(v58 + 104);
          *(void *)(v58 + 88) = 0;
          *(void *)(v58 + 96) = 0;
          *(void *)(v58 + 104) = 0;
          v59[112] = 1;
        }
        long long v62 = *(_OWORD *)(v58 + 120);
        *((void *)v59 + 17) = *(void *)(v58 + 136);
        *(_OWORD *)(v59 + 120) = v62;
        *(void *)(v58 + 128) = 0;
        *(void *)(v58 + 136) = 0;
        *(void *)(v58 + 120) = 0;
        *((_DWORD *)v59 + 36) = *(_DWORD *)(v58 + 144);
        *((void *)v59 + 20) = 0;
        *((void *)v59 + 21) = 0;
        *((void *)v59 + 19) = 0;
        *(_OWORD *)(v59 + 152) = *(_OWORD *)(v58 + 152);
        *((void *)v59 + 21) = *(void *)(v58 + 168);
        *(void *)(v58 + 160) = 0;
        *(void *)(v58 + 168) = 0;
        *(void *)(v58 + 152) = 0;
        v59[176] = *(unsigned char *)(v58 + 176);
        *((void *)v59 + 24) = 0;
        *((void *)v59 + 25) = 0;
        *((void *)v59 + 23) = 0;
        *(_OWORD *)(v59 + 184) = *(_OWORD *)(v58 + 184);
        *((void *)v59 + 25) = *(void *)(v58 + 200);
        *(void *)(v58 + 184) = 0;
        *(void *)(v58 + 192) = 0;
        *(void *)(v58 + 200) = 0;
        *((void *)v59 + 27) = 0;
        *((void *)v59 + 28) = 0;
        *((void *)v59 + 26) = 0;
        *((_OWORD *)v59 + 13) = *(_OWORD *)(v58 + 208);
        *((void *)v59 + 28) = *(void *)(v58 + 224);
        *(void *)(v58 + 208) = 0;
        *(void *)(v58 + 216) = 0;
        *(void *)(v58 + 224) = 0;
        ++v45;
        v57 += 232;
      }
      while ((long long *)(v58 + 232) != a2);
      if (v57)
      {
        v63 = (long long *)((char *)a6 + v57);
        uint64_t v64 = a1;
        v65 = a6;
        while (a2 != a3)
        {
          v66 = a2;
          if (*((float *)a2 + 36) <= *((float *)v65 + 36))
          {
            quasar::corrective_reranking::Parse::operator=(a1, (long long *)v65);
            a2 = v66;
            v65 = (quasar::corrective_reranking::Parse *)((char *)v65 + 232);
          }
          else
          {
            quasar::corrective_reranking::Parse::operator=(a1, a2);
            a2 = (long long *)((char *)v66 + 232);
          }
          a1 += 232;
          v64 += 232;
          if (v63 == (long long *)v65) {
            goto LABEL_81;
          }
        }
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,std::__wrap_iter<quasar::corrective_reranking::Parse *>,0>((long long *)v65, v63, v64);
      }
    }
    else
    {
      if (a3 == a2) {
        return;
      }
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      do
      {
        long long v46 = (char *)a2 + v44;
        long long v47 = (char *)a6 + v44;
        long long v48 = *(long long *)((char *)a2 + v44);
        *((void *)v47 + 2) = *(void *)((char *)a2 + v44 + 16);
        *(_OWORD *)long long v47 = v48;
        *((void *)v46 + 1) = 0;
        *((void *)v46 + 2) = 0;
        *(void *)long long v46 = 0;
        *((_DWORD *)v47 + 6) = *(_DWORD *)((char *)a2 + v44 + 24);
        *((void *)v47 + 5) = 0;
        *((void *)v47 + 6) = 0;
        *((void *)v47 + 4) = 0;
        *((_OWORD *)v47 + 2) = *(long long *)((char *)a2 + v44 + 32);
        *((void *)v47 + 6) = *(void *)((char *)a2 + v44 + 48);
        *((void *)v46 + 4) = 0;
        *((void *)v46 + 5) = 0;
        *((void *)v46 + 6) = 0;
        *((void *)v47 + 7) = 0;
        *((void *)v47 + 8) = 0;
        *((void *)v47 + 9) = 0;
        *(_OWORD *)(v47 + 56) = *(long long *)((char *)a2 + v44 + 56);
        *((void *)v47 + 9) = *(void *)((char *)a2 + v44 + 72);
        *((void *)v46 + 8) = 0;
        *((void *)v46 + 9) = 0;
        *((void *)v46 + 7) = 0;
        *((_DWORD *)v47 + 20) = *(_DWORD *)((char *)a2 + v44 + 80);
        *((unsigned char *)a6 + v44 + 88) = 0;
        uint64_t v49 = (void *)((char *)a6 + v44 + 88);
        v47[112] = 0;
        if (*((unsigned char *)a2 + v44 + 112))
        {
          *uint64_t v49 = 0;
          *(void *)((char *)a6 + v44 + 96) = 0;
          *(void *)((char *)a6 + v44 + 104) = 0;
          *(_OWORD *)uint64_t v49 = *(_OWORD *)(v46 + 88);
          *((void *)v47 + 13) = *((void *)v46 + 13);
          *((void *)v46 + 11) = 0;
          *((void *)v46 + 12) = 0;
          *((void *)v46 + 13) = 0;
          v47[112] = 1;
        }
        long long v50 = *(_OWORD *)(v46 + 120);
        *((void *)v47 + 17) = *((void *)v46 + 17);
        *(_OWORD *)(v47 + 120) = v50;
        *((void *)v46 + 16) = 0;
        *((void *)v46 + 17) = 0;
        *((void *)v46 + 15) = 0;
        *((_DWORD *)v47 + 36) = *((_DWORD *)v46 + 36);
        *((void *)v47 + 20) = 0;
        *((void *)v47 + 21) = 0;
        *((void *)v47 + 19) = 0;
        *(_OWORD *)(v47 + 152) = *(_OWORD *)(v46 + 152);
        *((void *)v47 + 21) = *((void *)v46 + 21);
        *((void *)v46 + 20) = 0;
        *((void *)v46 + 21) = 0;
        *((void *)v46 + 19) = 0;
        v47[176] = v46[176];
        *((void *)v47 + 24) = 0;
        *((void *)v47 + 25) = 0;
        *((void *)v47 + 23) = 0;
        *(_OWORD *)(v47 + 184) = *(_OWORD *)(v46 + 184);
        *((void *)v47 + 25) = *((void *)v46 + 25);
        *((void *)v46 + 23) = 0;
        *((void *)v46 + 24) = 0;
        *((void *)v46 + 25) = 0;
        *((void *)v47 + 27) = 0;
        *((void *)v47 + 28) = 0;
        *((void *)v47 + 26) = 0;
        *((_OWORD *)v47 + 13) = *((_OWORD *)v46 + 13);
        *((void *)v47 + 28) = *((void *)v46 + 28);
        *((void *)v46 + 26) = 0;
        *((void *)v46 + 27) = 0;
        *((void *)v46 + 28) = 0;
        ++v45;
        v44 += 232;
      }
      while (v46 + 232 != (char *)a3);
      if (v44)
      {
        uint64_t v51 = (quasar::corrective_reranking::Parse *)((char *)a6 + v44);
        uint64_t v52 = (uint64_t)a3 - 232;
        while (a2 != (long long *)a1)
        {
          float v53 = *((float *)v51 - 22);
          float v54 = *((float *)a2 - 22);
          if (v53 <= v54) {
            uint64_t v55 = (long long *)((char *)v51 - 232);
          }
          else {
            uint64_t v55 = (long long *)((char *)a2 - 232);
          }
          if (v53 <= v54) {
            uint64_t v56 = a2;
          }
          else {
            uint64_t v56 = (long long *)((char *)a2 - 232);
          }
          if (v53 <= v54) {
            uint64_t v51 = (quasar::corrective_reranking::Parse *)((char *)v51 - 232);
          }
          quasar::corrective_reranking::Parse::operator=(v52, v55);
          a2 = v56;
          v52 -= 232;
          if (v51 == a6) {
            goto LABEL_81;
          }
        }
        uint64_t v67 = 0;
        do
        {
          uint64_t v68 = v52 + v67;
          v67 -= 232;
          quasar::corrective_reranking::Parse::operator=(v68, (long long *)((char *)v51 + v67));
        }
        while ((quasar::corrective_reranking::Parse *)((char *)v51 + v67) != a6);
      }
    }
LABEL_81:
    if (a6)
    {
      do
      {
        quasar::corrective_reranking::Parse::~Parse(a6);
        a6 = (quasar::corrective_reranking::Parse *)((char *)a6 + 232);
        --v45;
      }
      while (v45);
    }
  }
}

void sub_1B1F2A568(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 1;
    do
    {
      quasar::corrective_reranking::Parse::~Parse(v2);
      uint64_t v2 = (quasar::corrective_reranking::Parse *)((char *)v2 + 232);
      --v4;
    }
    while (v4);
  }
  _Unwind_Resume(exception_object);
}

void std::swap[abi:ne180100]<quasar::corrective_reranking::Parse>(uint64_t a1, long long *a2)
{
  long long v3 = *(_OWORD *)a1;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  int v5 = *(_DWORD *)(a1 + 24);
  long long v6 = *(_OWORD *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  long long v8 = *(_OWORD *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  int v10 = *(_DWORD *)(a1 + 80);
  LOBYTE(v11) = 0;
  char v13 = 0;
  if (*(unsigned char *)(a1 + 112))
  {
    long long v11 = *(_OWORD *)(a1 + 88);
    uint64_t v12 = *(void *)(a1 + 104);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 88) = 0;
    char v13 = 1;
  }
  long long v14 = *(_OWORD *)(a1 + 120);
  uint64_t v15 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  int v16 = *(_DWORD *)(a1 + 144);
  long long v17 = *(_OWORD *)(a1 + 152);
  uint64_t v18 = *(void *)(a1 + 168);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  char v19 = *(unsigned char *)(a1 + 176);
  long long v20 = *(_OWORD *)(a1 + 184);
  uint64_t v21 = *(void *)(a1 + 200);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  long long v22 = *(_OWORD *)(a1 + 208);
  uint64_t v23 = *(void *)(a1 + 224);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  quasar::corrective_reranking::Parse::operator=(a1, a2);
  quasar::corrective_reranking::Parse::operator=((uint64_t)a2, &v3);
  quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v3);
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,std::__wrap_iter<quasar::corrective_reranking::Parse *>,0>(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      quasar::corrective_reranking::Parse::operator=(v6, v4);
      uint64_t v4 = (long long *)((char *)v4 + 232);
      v6 += 232;
      v3 += 232;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::Parse *>>(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v4 = a2;
  std::swap[abi:ne180100]<quasar::corrective_reranking::Parse>(a1, a2);
  uint64_t v6 = a1 + 232;
  for (uint64_t i = (long long *)((char *)v4 + 232); i != a3; uint64_t i = (long long *)((char *)i + 232))
  {
    if ((long long *)v6 == v4) {
      uint64_t v4 = i;
    }
    std::swap[abi:ne180100]<quasar::corrective_reranking::Parse>(v6, i);
    v6 += 232;
  }
  if ((long long *)v6 != v4)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v4;
    do
    {
      while (1)
      {
        std::swap[abi:ne180100]<quasar::corrective_reranking::Parse>(v8, v9);
        v8 += 232;
        uint64_t v9 = (long long *)((char *)v9 + 232);
        if (v9 == a3) {
          break;
        }
        if ((long long *)v8 == v4) {
          uint64_t v4 = v9;
        }
      }
      uint64_t v9 = v4;
    }
    while ((long long *)v8 != v4);
  }
  return v6;
}

uint64_t *std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(uint64_t *a1, uint64_t *a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *((unsigned __int8 *)v3 + 39);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 39);
      }
      else {
        uint64_t v9 = (unsigned __int8 *)v3[3];
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[2], v7, v3[3])) {
            return v3;
          }
        }
        else
        {
          if (!*((unsigned char *)v3 + 39)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*((unsigned __int8 *)v3 + v10 + 16) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::corrective_reranking::TokenClassification>::__emplace_back_slow_path<quasar::corrective_reranking::TokenClassification&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  long long v11 = v8;
  uint64_t v12 = (std::string *)&v8[64 * v3];
  long long v14 = &v8[64 * v7];
  std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification&>(a1 + 16, v12, a2);
  char v13 = &v12[2].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(&v11);
  return v9;
}

void sub_1B1F2AA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  __n128 result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this[1].__r_.__value_.__r.__words, *((const void **)a3 + 3), *((void *)a3 + 4), (uint64_t)(*((void *)a3 + 4) - *((void *)a3 + 3)) >> 2);
  std::string::size_type v7 = *((void *)a3 + 6);
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = *((_DWORD *)a3 + 14);
  this[2].__r_.__value_.__r.__words[0] = v7;
  return result;
}

void sub_1B1F2AAA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::TokenClassification>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::TokenClassification>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(_OWORD *)(v7 - 64) = v8;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 64) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 64;
      *((void *)&v15 + 1) -= 64;
      a3 -= 64;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::TokenClassification>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::TokenClassification>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::TokenClassification>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::TokenClassification>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100](v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::corrective_reranking::TokenClassification>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 64;
    std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100](v4, i - 64);
  }
}

uint64_t std::vector<quasar::corrective_reranking::TokenClassification>::__emplace_back_slow_path<quasar::corrective_reranking::TokenClassification const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  long long v15 = a1 + 2;
  if (v7) {
    long long v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)(a1 + 2), v7);
  }
  else {
    long long v8 = 0;
  }
  long long v11 = v8;
  uint64_t v12 = (std::string *)&v8[64 * v3];
  long long v14 = &v8[64 * v7];
  std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification const&>(a1 + 16, v12, a2);
  char v13 = &v12[2].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(&v11);
  return v9;
}

void sub_1B1F2ADF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this[1].__r_.__value_.__r.__words, *((const void **)a3 + 3), *((void *)a3 + 4), (uint64_t)(*((void *)a3 + 4) - *((void *)a3 + 3)) >> 2);
  std::string::size_type v7 = *((void *)a3 + 6);
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = *((_DWORD *)a3 + 14);
  this[2].__r_.__value_.__r.__words[0] = v7;
  return result;
}

void sub_1B1F2AE7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<quasar::corrective_reranking::TokenClassification>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 64 * v6;
    std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B1F2AF18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::TokenClassification>::__push_back_slow_path<quasar::corrective_reranking::TokenClassification const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  long long v15 = a1 + 2;
  if (v7) {
    long long v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)(a1 + 2), v7);
  }
  else {
    long long v8 = 0;
  }
  long long v11 = v8;
  uint64_t v12 = (std::string *)&v8[64 * v3];
  long long v14 = &v8[64 * v7];
  std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification const&>(a1 + 16, v12, a2);
  char v13 = &v12[2].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(&v11);
  return v9;
}

void sub_1B1F2B008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::TransformerTokenUtilities::TransformerTokenUtilities(uint64_t result, void *a2, int a3)
{
  uint64_t v3 = a2[1];
  *(void *)uint64_t result = *a2;
  *(void *)(result + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 16) = a3;
  return result;
}

void quasar::corrective_reranking::TransformerTokenUtilities::~TransformerTokenUtilities(quasar::corrective_reranking::TransformerTokenUtilities *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void quasar::corrective_reranking::TransformerTokenUtilities::tokenize(uint64_t *a1)
{
}

void sub_1B1F2B470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  a13 = (void *)(v39 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TransformerTokenUtilities::buildTruncatedExistingAndResultingTexts(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  quasar::corrective_reranking::TextEdit::adjustedPayload(a4, a2, 1, &__str);
  quasar::corrective_reranking::TextEdit::adjustedPayload(a4, a2, 0, &v7);
  quasar::corrective_reranking::TransformerTokenUtilities::tokenize(a1);
}

void sub_1B1F2B7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (*(char *)(v31 - 105) < 0) {
    operator delete(*(void **)(v31 - 128));
  }
  if (*(char *)(v31 - 81) < 0) {
    operator delete(*(void **)(v31 - 104));
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1F2B8B0()
{
}

void *quasar::corrective_reranking::TransformerTokenUtilities::truncateAdjacentTexts@<X0>(uint64_t *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a2 > 0) {
    quasar::corrective_reranking::TransformerTokenUtilities::tokenize(a1);
  }
  return std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[1],char const(&)[1],0>(a3, "", "");
}

void sub_1B1F2BF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char **a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char **a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char *a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  a16 = &a23;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a23 = &a27;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  a36 = &a42;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  a42 = &a45;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  if (*(char *)(v45 - 145) < 0) {
    operator delete(*(void **)(v45 - 168));
  }
  if (*(char *)(v45 - 121) < 0) {
    operator delete(*(void **)(v45 - 144));
  }
  _Unwind_Resume(a1);
}

void sub_1B1F2C090()
{
}

void sub_1B1F2C098()
{
}

void sub_1B1F2C0A0()
{
}

void sub_1B1F2C0A8()
{
}

void sub_1B1F2C0B0()
{
}

void sub_1B1F2C0B8()
{
}

void quasar::corrective_reranking::toU32Tokens(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  quasar::corrective_reranking::getTokenRanges(a1, v12);
  uint64_t v5 = (unsigned int **)quasar::corrective_reranking::TargetRange::TargetRange(v13, (uint64_t)v12);
  quasar::corrective_reranking::TargetRange::toCodePoints(v5, a2, &v9);
  uint64_t v6 = v9;
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  uint64_t v8 = a1[1];
  if ((v8 - *a1) >> 5 != (v7 - (uint64_t)v6) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"tokens.size() == tokenRangesInCodePoints.size()", 47);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v9);
  }
  if (v8 != *a1) {
    quasar::toU32String();
  }
  if (v6) {
    operator delete(v6);
  }
}

void *quasar::pySlice<std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>>@<X0>(void *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *result;
  uint64_t v6 = result[1];
  if (*result == v6)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    uint64_t v7 = v6 - v5;
    int32x2_t v8 = vdup_n_s32((unint64_t)(v6 - v5) >> 5);
    int32x2_t v9 = vmax_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)v8), (int32x2_t)__PAIR64__(a3, a2)), 0);
    int32x2_t v10 = vmin_s32(v9, v8);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    __int32 v11 = v10.i32[1] - v10.i32[0];
    if (v10.i32[1] > v10.i32[0])
    {
      uint64_t v12 = result;
      unsigned __int32 v17 = v9.i32[0];
      std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::reserve(a4, v11);
      if ((int)(v7 >> 5) >= (uint64_t)v17) {
        unint64_t v13 = v17;
      }
      else {
        unint64_t v13 = (int)(v7 >> 5);
      }
      uint64_t v14 = 32 * v13;
      do
      {
        if (v13 >= (uint64_t)(v12[1] - *v12) >> 5) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        long long v15 = (long long *)(*v12 + v14);
        unint64_t v16 = a4[1];
        if (v16 >= a4[2])
        {
          uint64_t result = (void *)std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__push_back_slow_path<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const&>(a4, v15);
        }
        else
        {
          std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const&>((uint64_t)a4, v15);
          uint64_t result = (void *)(v16 + 32);
        }
        a4[1] = (uint64_t)result;
        ++v13;
        v14 += 32;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

void sub_1B1F2C484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::TransformerTokenUtilities::removeTrailingAndLeadingSubtokens@<X0>(uint64_t *a1@<X1>, std::wstring *a2@<X8>)
{
  std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::deque<std::__wrap_iter<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const*>,0>((uint64_t)&v8, *a1, a1[1]);
  if (v12) {
    quasar::toString();
  }
  uint64_t v3 = (char *)(v9 + 8 * (v11 >> 7));
  if (v10 == v9)
  {
    unint64_t v4 = 0;
    uint64_t v6 = 0;
    uint64_t v5 = (char *)(v9 + 8 * ((v12 + v11) >> 7));
  }
  else
  {
    unint64_t v4 = (long long *)(*(void *)v3 + 32 * (v11 & 0x7F));
    uint64_t v5 = (char *)(v9 + 8 * ((v12 + v11) >> 7));
    uint64_t v6 = (long long *)(*(void *)v5 + 32 * ((v12 + v11) & 0x7F));
  }
  std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::vector<std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,0>(a2, v3, v4, v5, v6);
  return std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::~deque[abi:ne180100](&v8);
}

void quasar::pySlice<std::basic_string<char32_t>>(uint64_t *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, std::basic_string<char32_t> *a4@<X8>)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    LODWORD(v6) = *((unsigned __int8 *)a1 + 23);
    if (*((unsigned char *)a1 + 23)) {
      goto LABEL_3;
    }
LABEL_16:
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  unint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_16;
  }
LABEL_3:
  int32x2_t v7 = vdup_n_s32(v6);
  int32x2_t v8 = vmax_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)v7), (int32x2_t)__PAIR64__(a3, a2)), 0);
  int32x2_t v9 = vmin_s32(v8, v7);
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  __int32 v10 = v9.i32[1] - v9.i32[0];
  if (v9.i32[1] > v9.i32[0])
  {
    unsigned __int32 v14 = v8.i32[0];
    std::basic_string<char32_t>::reserve(a4, v10);
    if ((int)v6 >= (uint64_t)v14) {
      unint64_t v6 = v14;
    }
    else {
      unint64_t v6 = (int)v6;
    }
    do
    {
      unint64_t v11 = *((unsigned __int8 *)a1 + 23);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        unint64_t v11 = a1[1];
      }
      if (v11 <= v6) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      if (v12 >= 0) {
        unint64_t v13 = a1;
      }
      else {
        unint64_t v13 = (uint64_t *)*a1;
      }
      std::basic_string<char32_t>::push_back(a4, *((_DWORD *)v13 + v6++));
      --v10;
    }
    while (v10);
  }
}

void sub_1B1F2C7B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TransformerTokenUtilities::mapTransformerTokenizationToIcu(uint64_t *a1@<X1>, quasar::QsrText **a2@<X2>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a2;
  unint64_t v13 = a2[1];
  if (*a2 == v13) {
    return;
  }
  int v5 = 0;
  do
  {
    quasar::corrective_reranking::stripDiacritics(v3, v39);
    memset(&v38, 0, sizeof(v38));
    LOBYTE(v35) = 0;
    char v37 = 0;
    while (1)
    {
      uint64_t v6 = *a1;
      if (v5 >= (unint64_t)((a1[1] - *a1) >> 6)) {
        break;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "#");
      quasar::copyAndTrimLeft((char *)(v6 + ((uint64_t)v5 << 6)), (uint64_t *)__p, v33);
      if (SBYTE7(v16) < 0) {
        operator delete(__p[0]);
      }
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v38.__r_.__value_.__l.__data_, v33, (uint64_t)&__str);
      if (quasar::startsWith((unsigned __int8 *)v39, (unsigned __int8 *)&__str))
      {
        std::string::operator=(&v38, &__str);
        if (!v37)
        {
          if (v5 >= (unint64_t)((a1[1] - *a1) >> 6)) {
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          }
          std::optional<std::vector<float>>::operator=[abi:ne180100]<std::vector<float> const&,void>((uint64_t)&v35, *a1 + ((uint64_t)v5 << 6) + 24);
        }
        ++v5;
        uint64_t v7 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v38.__r_.__value_.__l.__size_;
        }
        unint64_t v9 = v40;
        if ((v40 & 0x80u) != 0) {
          unint64_t v9 = (unint64_t)v39[1];
        }
        if (size != v9) {
          goto LABEL_30;
        }
        if ((v40 & 0x80u) == 0) {
          __int32 v10 = v39;
        }
        else {
          __int32 v10 = (void **)v39[0];
        }
        if ((*((unsigned char *)&v38.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(v38.__r_.__value_.__l.__data_, v10, v38.__r_.__value_.__l.__size_)) {
            goto LABEL_30;
          }
        }
        else if (*((unsigned char *)&v38.__r_.__value_.__s + 23))
        {
          unint64_t v11 = &v38;
          while (v11->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
          {
            unint64_t v11 = (std::string *)((char *)v11 + 1);
            __int32 v10 = (void **)((char *)v10 + 1);
            if (!--v7) {
              goto LABEL_28;
            }
          }
LABEL_30:
          char v12 = 1;
          goto LABEL_31;
        }
      }
      else if (quasar::gLogLevel >= 5)
      {
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Couldn't match Transformer tokenization with ICU tokenization.", 62);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
LABEL_28:
      char v12 = 0;
LABEL_31:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v34 < 0)
      {
        operator delete((void *)v33[0]);
        if ((v12 & 1) == 0) {
          break;
        }
      }
      else if ((v12 & 1) == 0)
      {
        break;
      }
    }
    __p[1] = 0;
    *(void *)&long long v16 = 0;
    __p[0] = 0;
    if (v37) {
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v35, (uint64_t)v36, (v36 - (unsigned char *)v35) >> 2);
    }
    std::vector<quasar::corrective_reranking::TokenClassification>::emplace_back<std::string const&,std::vector<float>,quasar::corrective_reranking::TextRange const&>(a3, (uint64_t)v3, (uint64_t)__p, (uint64_t)v3 + 24);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v37 && v35)
    {
      uint64_t v36 = v35;
      operator delete(v35);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if ((char)v40 < 0) {
      operator delete(v39[0]);
    }
    uint64_t v3 = (quasar::QsrText *)((char *)v3 + 32);
  }
  while (v3 != v13);
}

void sub_1B1F2CAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(unsigned char *)(v16 - 144))
  {
    long long v18 = *(void **)(v16 - 168);
    if (v18)
    {
      *(void *)(v16 - 160) = v18;
      operator delete(v18);
    }
  }
  if (*(char *)(v16 - 113) < 0) {
    operator delete(*(void **)(v16 - 136));
  }
  if (*(char *)(v16 - 89) < 0) {
    operator delete(*(void **)(v16 - 112));
  }
  __p = a10;
  std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::vector<float>>::operator=[abi:ne180100]<std::vector<float> const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (a1 != a2) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t std::vector<quasar::corrective_reranking::TokenClassification>::emplace_back<std::string const&,std::vector<float>,quasar::corrective_reranking::TextRange const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  unint64_t v11 = *(void *)(v8 - 8);
  if (v11 >= v10)
  {
    uint64_t v13 = (uint64_t)(v11 - *a1) >> 6;
    if ((unint64_t)(v13 + 1) >> 58) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v9 - *a1;
    uint64_t v15 = v14 >> 5;
    if (v14 >> 5 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    uint64_t v23 = v8;
    if (v16) {
      long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>(v8, v16);
    }
    else {
      long long v17 = 0;
    }
    long long v19 = v17;
    long long v20 = &v17[64 * v13];
    long long v22 = &v17[64 * v16];
    quasar::corrective_reranking::TokenClassification::TokenClassification(v20, a2, a3, a4);
    long long v21 = v20 + 64;
    std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(a1, &v19);
    uint64_t v12 = a1[1];
    std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(&v19);
  }
  else
  {
    quasar::corrective_reranking::TokenClassification::TokenClassification(*(void *)(v8 - 8), a2, a3, a4);
    uint64_t v12 = v11 + 64;
    a1[1] = v11 + 64;
  }
  a1[1] = v12;
  return v12 - 64;
}

void sub_1B1F2CD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::pop_front(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(a1[1] + ((v2 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v2 & 0x7F);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    unint64_t v2 = a1[4];
  }
  uint64_t v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::pop_back(void *a1)
{
  uint64_t v2 = a1[5] - 1;
  uint64_t v3 = *(void *)(a1[1] + (((unint64_t)(v2 + a1[4]) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v2 + a1[4]) & 0x7F);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    uint64_t v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[1],char const(&)[1],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1F2CE60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> *,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> *,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> *>((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 9) < 0) {
          operator delete(*(void **)(v7 - 32));
        }
        v7 -= 32;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> *,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> *,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(_DWORD *)uint64_t v5 = 0;
      *(void *)(a4 + 24) = *((void *)v5 + 3);
      a4 += 32;
      v5 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::string const&,quasar::corrective_reranking::TextRange>(uint64_t a1, long long *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(void *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
}

void sub_1B1F2CFF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(v4 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 8) = v4 + 32;
}

void sub_1B1F2D064(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange>&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (std::string *)&v10[4 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  long long v17 = (char *)&v10[4 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[4 * v4 + 3] = *((void *)a2 + 3);
  unint64_t v16 = (std::string *)((char *)v11 + 32);
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1F2D168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1F2D358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char32_t>::__init_copy_ctor_external(*(std::wstring **)(a1 + 8), *(const std::wstring::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(v4 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 8) = v4 + 32;
}

void sub_1B1F2D3D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__push_back_slow_path<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (std::wstring *)&v10[4 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  long long v17 = (char *)&v10[4 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char32_t>::__init_copy_ctor_external(v11, *(const std::wstring::value_type **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[4 * v4 + 3] = *((void *)a2 + 3);
  unint64_t v16 = (std::wstring *)((char *)v11 + 32);
  std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1F2D4D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::insert(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __pos, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __n)
{
  unint64_t v5 = __s;
  std::basic_string<char32_t>::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8 >= __pos)
    {
      std::basic_string<char32_t>::size_type v9 = 4;
      std::basic_string<char32_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      goto LABEL_6;
    }
LABEL_24:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  std::basic_string<char32_t>::size_type size = this->__r_.__value_.__l.__size_;
  if (size < __pos) {
    goto LABEL_24;
  }
  std::basic_string<char32_t>::size_type v9 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
LABEL_6:
  if (v9 - size >= __n)
  {
    if (__n)
    {
      uint64_t v11 = this;
      if ((v8 & 0x80) != 0) {
        uint64_t v11 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      }
      if (size != __pos)
      {
        long long v12 = (const std::basic_string<char32_t>::value_type *)((char *)v11 + 4 * __pos);
        if ((char *)v11 + 4 * size <= (char *)__s || v12 > __s) {
          std::basic_string<char32_t>::size_type v14 = 0;
        }
        else {
          std::basic_string<char32_t>::size_type v14 = __n;
        }
        unint64_t v5 = &__s[v14];
        memmove((void *)&v12[__n], v12, 4 * (size - __pos));
      }
      memmove((char *)v11 + 4 * __pos, v5, 4 * __n);
      std::basic_string<char32_t>::size_type v15 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v15;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v15 & 0x7F;
      }
      v11->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::basic_string<char32_t>::__grow_by_and_replace(this, v9, size + __n - v9, size, __pos, 0, __n, __s);
  }
  return this;
}

uint64_t std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::deque<std::__wrap_iter<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const*>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__append_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const*>>((void *)a1, a2, (a3 - a2) >> 5);
  return a1;
}

void sub_1B1F2D648(_Unwind_Exception *a1)
{
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__append_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const*>>(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 16 * (v7 - v6) - 1;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  if (a3 > v10)
  {
    std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__add_back_capacity(a1, a3 - v10);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }
  uint64_t v11 = (void *)(v6 + 8 * (v9 >> 7));
  if (v7 == v6) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *v11 + 32 * (v9 & 0x7F);
  }
  v23[0] = v6 + 8 * (v9 >> 7);
  v23[1] = v12;
  uint64_t v13 = std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>::operator+[abi:ne180100]((uint64_t)v23, a3);
  if (v12 != v14)
  {
    std::basic_string<char32_t>::size_type v15 = v13;
    uint64_t v16 = v14;
    do
    {
      if (v11 == v15) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = *v11 + 4096;
      }
      if (v12 == v17)
      {
        uint64_t v17 = v12;
      }
      else
      {
        uint64_t v18 = 0;
        do
        {
          long long v19 = (std::wstring *)(v12 + v18);
          long long v20 = (long long *)(a2 + v18);
          if (*(char *)(a2 + v18 + 23) < 0)
          {
            std::basic_string<char32_t>::__init_copy_ctor_external(v19, *(const std::wstring::value_type **)v20, *((void *)v20 + 1));
          }
          else
          {
            long long v21 = *v20;
            v19->__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v21;
          }
          *(void *)(v12 + v18 + 24) = *(void *)(a2 + v18 + 24);
          v18 += 32;
        }
        while (v12 + v18 != v17);
        a2 += v18;
      }
      a1[5] += (v17 - v12) >> 5;
      if (v11 == v15) {
        break;
      }
      uint64_t v22 = v11[1];
      ++v11;
      uint64_t v12 = v22;
    }
    while (v22 != v16);
  }
}

void sub_1B1F2D7C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) += v2 >> 5;
  _Unwind_Resume(a1);
}

void std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__add_back_capacity(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x7F) != 0) {
    unint64_t v6 = (v5 >> 7) + 1;
  }
  else {
    unint64_t v6 = v5 >> 7;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 7) {
    unint64_t v8 = v7 >> 7;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 7)
  {
    for (a1[4] = v7 - (v8 << 7); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          long long v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v28);
          long long v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          char v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          long long v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          long long v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 127;
          }
          else {
            uint64_t v64 = 128;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 7);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          uint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13) {
        std::basic_string<char32_t>::size_type v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v13);
      }
      else {
        std::basic_string<char32_t>::size_type v15 = 0;
      }
      uint64_t v38 = v8 << 7;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        unsigned __int8 v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              unsigned __int8 v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                unsigned __int8 v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                float v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)float v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                unsigned __int8 v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                unsigned __int8 v40 = (char *)__p[1];
              }
              long long v47 = &v40[-8 * (v44 >> 1)];
              unsigned __int8 v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)unsigned __int8 v40 = *v39;
          unsigned __int8 v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)__p, v57);
      }
      long long v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1B1F2DCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 5);
    if (v4 < 1) {
      result -= (unint64_t)(127 - v4) >> 7;
    }
    else {
      result += (unint64_t)v4 >> 7;
    }
  }
  return result;
}

uint64_t std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    unint64_t v6 = &v2[v5 >> 7];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          uint64_t v10 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v10;
          uint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 64;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 128;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    unint64_t v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x80) {
    a2 = 1;
  }
  if (v2 < 0x100) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 128;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 16 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x80) {
    a2 = 1;
  }
  if (v5 < 0x100) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

std::wstring *std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::vector<std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,0>(std::wstring *a1, char *a2, long long *a3, char *a4, long long *a5)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a5 == a3) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = (((uint64_t)a5 - *(void *)a4) >> 5) + 16 * (a4 - a2) - (((uint64_t)a3 - *(void *)a2) >> 5);
  }
  std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__init_with_size[abi:ne180100]<std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>>(a1, a2, a3, (int)a4, a5, v6);
  return a1;
}

std::wstring *std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__init_with_size[abi:ne180100]<std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>>(std::wstring *result, void *a2, long long *a3, int a4, long long *a5, unint64_t a6)
{
  if (a6)
  {
    uint64_t v10 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a6);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>((uint64_t)&v10->__r_.__value_.__r.__words[2], a2, a3, a4, a5, (std::wstring *)v10->__r_.__value_.__l.__size_);
    v10->__r_.__value_.__l.__size_ = (std::wstring::size_type)result;
  }
  return result;
}

void sub_1B1F2E0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::wstring *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>(uint64_t a1, void *a2, long long *a3, int a4, long long *a5, std::wstring *this)
{
  unint64_t v6 = this;
  std::basic_string<char32_t>::size_type v15 = this;
  uint64_t v16 = this;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 != a5)
  {
    uint64_t v8 = a3;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::basic_string<char32_t>::__init_copy_ctor_external(v6, *(const std::wstring::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v10 = *v8;
        v6->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v10;
      }
      v6[1].__r_.__value_.__r.__words[0] = *((void *)v8 + 3);
      v8 += 2;
      if ((long long *)((char *)v8 - *a2) == (long long *)4096)
      {
        unint64_t v11 = (long long *)a2[1];
        ++a2;
        uint64_t v8 = v11;
      }
      unint64_t v6 = (std::wstring *)((char *)v16 + 32);
      uint64_t v16 = (std::wstring *)((char *)v16 + 32);
    }
    while (v8 != a5);
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v6;
}

void sub_1B1F2E1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void TaggedVocab::TaggedVocab(TaggedVocab *this, int a2, unsigned int a3)
{
  unsigned int v3 = a3;
  if (a3 >= 0xFFFFE) {
    a3 = 1048574;
  }
  Vocab::Vocab(this, a2, a3);
  *unint64_t v5 = &unk_1F0A33320;
  Vocab::Vocab((Vocab *)(v5 + 12), 1u, 0xFFFu);
  *((void *)this + 24) = 0;
  if (v3 >= 0xFFFFF)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"warning: maximum tagged index lowered to ", 41);
    unint64_t v6 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    int v7 = std::locale::use_facet(&v8, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale(&v8);
    std::ostream::put();
    std::ostream::flush();
  }
}

void sub_1B1F2E328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  LHash<unsigned int,char const*>::~LHash(v12);
  Vocab::~Vocab(v11);
  Vocab::~Vocab(v10);
  _Unwind_Resume(a1);
}

void *LHash<unsigned int,char const*>::~LHash(void *a1)
{
  return a1;
}

void TaggedVocab::~TaggedVocab(TaggedVocab *this)
{
  *(void *)this = &unk_1F0A33320;
  uint64_t v2 = (void *)((char *)this + 192);
  LHashIter<unsigned int,char const*>::LHashIter((uint64_t)v5, (_DWORD **)this + 24, 0);
  int v4 = 0;
  while (1)
  {
    unsigned int v3 = (void **)LHashIter<unsigned int,unsigned long>::next((uint64_t)v5, &v4);
    if (!v3) {
      break;
    }
    free(*v3);
  }
  if (v6) {
    MEMORY[0x1B3EA8630](v6, 0x1000C8052888210);
  }
  LHash<unsigned int,double>::clear(v2, 0);
  Vocab::~Vocab((TaggedVocab *)((char *)this + 96));
  Vocab::~Vocab(this);
}

{
  uint64_t vars8;

  TaggedVocab::~TaggedVocab(this);
  JUMPOUT(0x1B3EA8670);
}

_DWORD **TaggedVocab::memStats(TaggedVocab *this, int64x2_t *a2)
{
  Vocab::memStats((uint64_t)this, a2);
  a2->i64[0] -= 96;
  return Vocab::memStats((uint64_t)this + 96, a2);
}

uint64_t TaggedVocab::addWord(TaggedVocab *this, char *a2)
{
  TagSep = findTagSep(a2);
  unint64_t v5 = TagSep;
  if (TagSep)
  {
    char v6 = *TagSep;
    const char *TagSep = 0;
    if (TagSep == a2) {
      int v7 = 0xFFFFF;
    }
    else {
      int v7 = Vocab::addWord(this, (Vocab *)a2);
    }
    int v8 = Vocab::addWord((TaggedVocab *)((char *)this + 96), (Vocab *)(v5 + 1));
  }
  else
  {
    int v7 = Vocab::addWord(this, (Vocab *)a2);
    char v6 = 0;
    int v8 = 0;
  }
  if (v7 == -1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"maximum number of tagged words (", 32);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") exceeded\n", 11);
  }
  if (v8 == -1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"maximum number of tags (", 24);
    unint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") exceeded\n", 11);
    if (!v5) {
      return v7 & 0xFFFFF | ((unsigned __int16)v8 << 20);
    }
    goto LABEL_11;
  }
  if (v5) {
LABEL_11:
  }
    *unint64_t v5 = v6;
  return v7 & 0xFFFFF | ((unsigned __int16)v8 << 20);
}

const char *findTagSep(const char *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = strlen(a1) - 1;
  while (1)
  {
    if (v1[v2] == 47)
    {
      if (!v2) {
        return v1;
      }
      if (v1[v2 - 1] != 60) {
        break;
      }
    }
    if (&v1[--v2] < v1) {
      return 0;
    }
  }
  v1 += v2;
  return v1;
}

char *TaggedVocab::getWord(TaggedVocab *this, unsigned int a2)
{
  int v4 = (void *)((char *)this + 192);
  unsigned int v12 = 0;
  if (LHash<unsigned int,double>::locate((_DWORD **)this + 24, a2, &v12)) {
    return *(char **)(*v4 + 16 * v12 + 8);
  }
  unsigned int v6 = a2 & 0xFFFFF;
  if (!(a2 >> 20) && v6 != 0xFFFFF) {
    return (char *)Vocab::getWord(this, a2);
  }
  if (v6 == 0xFFFFF) {
    Word = "";
  }
  else {
    Word = (const char *)Vocab::getWord(this, v6);
  }
  if (a2 < 0x100000) {
    int v8 = "";
  }
  else {
    int v8 = (const char *)Vocab::getWord((TaggedVocab *)((char *)this + 96), a2 >> 20);
  }
  unint64_t v5 = 0;
  if (Word && v8)
  {
    int v9 = strlen(Word);
    size_t v10 = v9 + strlen(v8) + 3;
    unint64_t v5 = (char *)malloc_type_malloc(v10, 0x7C0EDEDCuLL);
    snprintf(v5, v10, "%s%c%s", Word, 47, v8);
    char v13 = 0;
    *(void *)LHash<unsigned int,double>::insert(v4, a2, &v13) = v5;
  }
  return v5;
}

uint64_t TaggedVocab::getIndex(TaggedVocab *this, char *a2, uint64_t a3)
{
  TagSep = findTagSep(a2);
  if (TagSep)
  {
    int v7 = TagSep;
    char v8 = *TagSep;
    const char *TagSep = 0;
    if (TagSep == a2) {
      int Index = 0xFFFFF;
    }
    else {
      int Index = Vocab::getIndex(this, (Vocab *)a2, 0xFFFFFFFFLL);
    }
    int v11 = Vocab::getIndex((TaggedVocab *)((char *)this + 96), (Vocab *)(v7 + 1), 0xFFFFFFFFLL);
    *int v7 = v8;
    unsigned int v12 = Index & 0xFFFFF | ((unsigned __int16)v11 << 20);
    if (v11 == -1) {
      unsigned int v12 = a3;
    }
    if (Index == -1) {
      return a3;
    }
    else {
      return v12;
    }
  }
  else
  {
    return Vocab::getIndex(this, (Vocab *)a2, a3);
  }
}

uint64_t TaggedVocab::remove(TaggedVocab *this, char *a2)
{
  TagSep = findTagSep(a2);
  if (TagSep)
  {
    unint64_t v5 = TagSep;
    char v6 = *TagSep;
    const char *TagSep = 0;
    if (TagSep != a2) {
      Vocab::remove(this, (Vocab *)a2);
    }
    uint64_t result = Vocab::remove((TaggedVocab *)((char *)this + 96), (Vocab *)(v5 + 1));
    *unint64_t v5 = v6;
  }
  else
  {
    return Vocab::remove(this, (Vocab *)a2);
  }
  return result;
}

uint64_t TaggedVocab::remove(TaggedVocab *this, unsigned int a2)
{
  uint64_t v2 = this;
  if (a2 >= 0x100000)
  {
    unsigned int v3 = a2 >> 20;
    unsigned int v4 = a2 & 0xFFFFF;
    if (v4 != 0xFFFFF) {
      Vocab::remove((uint64_t)this, v4);
    }
    this = (TaggedVocab *)((char *)v2 + 96);
    a2 = v3;
  }
  return Vocab::remove((uint64_t)this, a2);
}

uint64_t TaggedVocab::write(TaggedVocab *this, File *a2, int a3)
{
  Vocab::write(this, a2, a3);
  VocabIter::VocabIter((VocabIter *)v8, (TaggedVocab *)((char *)this + 96), a3);
  while (!File::error(a2))
  {
    unsigned int v10 = 0;
    char v6 = VocabIter::next((VocabIter *)v8, &v10);
    if (!v6) {
      break;
    }
    File::fprintf(a2, "%c%s\n", 47, (const char *)v6);
  }
  uint64_t result = v9;
  if (v9) {
    return MEMORY[0x1B3EA8630](v9, 0x50C80EE9192B6);
  }
  return result;
}

void sub_1B1F2EA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    MEMORY[0x1B3EA8630](a15, 0x50C80EE9192B6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Vocab::unkIsWord(Vocab *this)
{
  return (uint64_t)this + 80;
}

uint64_t Vocab::toLower(Vocab *this)
{
  return (uint64_t)this + 81;
}

BOOL TaggedVocab::isNonEvent(TaggedVocab *this, unsigned int a2)
{
  return (~a2 & 0xFFFFF) == 0 || Vocab::isNonEvent(this, a2);
}

uint64_t Vocab::metaTag(Vocab *this)
{
  return (uint64_t)this + 88;
}

uint64_t LHashIter<unsigned int,char const*>::LHashIter(uint64_t result, _DWORD **a2, uint64_t a3)
{
  unsigned int v3 = *a2;
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  if (v3)
  {
    *(_DWORD *)(result + 12) = *v3 >> 5;
    *(void *)(result + 16) = a3;
    *(void *)(result + 24) = 0;
    LHashIter<unsigned int,char const*>::sortKeys();
  }
  *(_DWORD *)(result + 12) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = 0;
  return result;
}

void LHashIter<unsigned int,char const*>::sortKeys()
{
}

void sub_1B1F2EC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x1B3EA8630](a12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,char const*> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v10 = (int *)result;
LABEL_2:
  int v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unsigned int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 2;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v11 + 8));
          if ((result & 0x80000000) != 0)
          {
            int v22 = *v11;
            *int v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v11 + 1, (int *)a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v11 + 1, v11 + 2, (int *)a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, (int *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (int *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,unsigned int *>((unsigned int *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, &v11[v15 >> 1], (int *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11 + 1, v17 - 1, (int *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11 + 2, &v11[v16 + 1], (int *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      int v18 = *v11;
      *int v11 = *v17;
      int *v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(&v11[v15 >> 1], v11, (int *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *(v11 - 1) + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v11 + 8)) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>((unsigned int *)v11, a2, a3);
      int v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>(v11, (int *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,char const*> &,unsigned int *>(v11, v19, a3);
    int v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,char const*> &,unsigned int *>(v19 + 1, (int *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (unsigned int *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,char const*> &,unsigned int *,false>(v10, v19, a3, -v13, a5 & 1);
      int v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,char const*> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
      {
        int v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *v10 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) != 0)
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8) {
          break;
        }
        int v15 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v13 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *(unsigned int *)((char *)a1 + v14 + 4) + 8));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          unint64_t v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      int *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == (unsigned int *)a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2) {
      return 1;
    }
  }
}

uint64_t quasar::QuasarCLogger(quasar *this)
{
  uint64_t v1 = &unk_1E9C2D000;
  {
    uint64_t v1 = (void *)&unk_1E9C2D000;
    if (v3)
    {
      quasar::QuasarCLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "QuasarC");
      uint64_t v1 = (void *)&unk_1E9C2D000;
    }
  }
  return v1[493];
}

uint64_t quasar::StandardErrorLoggerFatal(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "[QSR] FATAL %s\n", v1);
}

uint64_t quasar::StandardErrorLoggerError(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "[QSR] ERROR %s\n", v1);
}

uint64_t quasar::StandardErrorLoggerWarn(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "[QSR] WARN %s\n", v1);
}

uint64_t quasar::StandardErrorLoggerProdInfo(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "[QSR] PRODINFO %s\n", v1);
}

uint64_t quasar::StandardErrorLoggerInfo(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "[QSR] INFO %s\n", v1);
}

uint64_t quasar::StandardErrorLoggerDebug(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "[QSR] DEBUG %s\n", v1);
}

uint64_t quasar::StandardErrorLoggerTrace(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "[QSR] TRACE %s\n", v1);
}

void quasar::corrective_reranking::Models::Models(quasar::corrective_reranking::Models *this, const quasar::corrective_reranking::Config *a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  operator new();
}

void sub_1B1F2F7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, quasar::corrective_reranking::TransformerClassifier **a9)
{
  MEMORY[0x1B3EA8670](v16, 0x10A0C402A29AD3ELL);
  std::unique_ptr<quasar::corrective_reranking::OverridesDictionary>::reset[abi:ne180100](v15, 0);
  uint64_t v18 = *v14;
  uint64_t *v14 = 0;
  if (v18) {
    std::default_delete<quasar::corrective_reranking::TargetIndexFilter>::operator()[abi:ne180100]((uint64_t)v14, v18);
  }
  uint64_t v19 = *v13;
  uint64_t *v13 = 0;
  if (v19) {
    std::default_delete<quasar::corrective_reranking::FusedIntentClassifier>::operator()[abi:ne180100]((uint64_t)v13, v19);
  }
  uint64_t v20 = *v12;
  uint64_t *v12 = 0;
  if (v20) {
    std::default_delete<quasar::corrective_reranking::CorrectiveReranker>::operator()[abi:ne180100]((uint64_t)v12, v20);
  }
  std::unique_ptr<quasar::corrective_reranking::TransformerClassifier>::reset[abi:ne180100](a9, 0);
  uint64_t v21 = *v11;
  *uint64_t v11 = 0;
  if (v21) {
    std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100]((uint64_t)v11, v21);
  }
  uint64_t v22 = *v10;
  uint64_t *v10 = 0;
  if (v22) {
    std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100]((uint64_t)v10, v22);
  }
  std::unique_ptr<quasar::corrective_reranking::PhoneticMatcher>::reset[abi:ne180100](v9, 0);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Models::~Models(quasar::corrective_reranking::OverridesDictionary **this)
{
  std::unique_ptr<quasar::corrective_reranking::OverridesDictionary>::reset[abi:ne180100](this + 7, 0);
  uint64_t v2 = (uint64_t)this[6];
  this[6] = 0;
  if (v2) {
    std::default_delete<quasar::corrective_reranking::TargetIndexFilter>::operator()[abi:ne180100]((uint64_t)(this + 6), v2);
  }
  uint64_t v3 = (uint64_t)this[5];
  this[5] = 0;
  if (v3) {
    std::default_delete<quasar::corrective_reranking::FusedIntentClassifier>::operator()[abi:ne180100]((uint64_t)(this + 5), v3);
  }
  uint64_t v4 = (uint64_t)this[4];
  this[4] = 0;
  if (v4) {
    std::default_delete<quasar::corrective_reranking::CorrectiveReranker>::operator()[abi:ne180100]((uint64_t)(this + 4), v4);
  }
  std::unique_ptr<quasar::corrective_reranking::TransformerClassifier>::reset[abi:ne180100](this + 3, 0);
  uint64_t v5 = (uint64_t)this[2];
  this[2] = 0;
  if (v5) {
    std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100]((uint64_t)(this + 2), v5);
  }
  uint64_t v6 = (uint64_t)this[1];
  this[1] = 0;
  if (v6) {
    std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100]((uint64_t)(this + 1), v6);
  }
  std::unique_ptr<quasar::corrective_reranking::PhoneticMatcher>::reset[abi:ne180100](this, 0);
}

void quasar::corrective_reranking::Models::generateWFSTParses(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, unsigned __int8 *a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  v41[1] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7) {
      goto LABEL_6;
    }
LABEL_60:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "wfstToUse");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v39);
  }
  if (a2 != 1) {
    goto LABEL_60;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
LABEL_6:
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      quasar::corrective_reranking::tokenize(v8, (long long *)v37);
      quasar::corrective_reranking::getTokens((long long **)v37, (uint64_t *)&v39);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      quasar::corrective_reranking::VoiceEditingWFST::search(v7, (uint64_t *)&v39, 0, a5, v37);
      uint64_t v11 = (long long **)v37[0];
      unsigned int v10 = (long long **)v37[1];
      while (v11 != v10)
      {
        quasar::corrective_reranking::VoiceEditingWFST::Path::getOutputs(v11, &__p);
        p_p = COERCE_VOID_(quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight((quasar::corrective_reranking::VoiceEditingWFST::Path *)v11));
        unint64_t v12 = a6[1];
        if (v12 >= a6[2])
        {
          uint64_t v13 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string>,double>(a6, v8, (long long **)&__p, (double *)&p_p);
        }
        else
        {
          std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string>,double>((uint64_t)(a6 + 2), (std::string *)a6[1], v8, (long long **)&__p, (double *)&p_p);
          uint64_t v13 = v12 + 232;
          a6[1] = v12 + 232;
        }
        a6[1] = v13;
        p_p = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        v11 += 11;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
      std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v37[0] = &v39;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
      v8 += 32;
    }
    while (v8 != v9);
    uint64_t v14 = (quasar::corrective_reranking::Parse *)*a6;
    int v15 = (quasar::corrective_reranking::Parse *)a6[1];
    if ((quasar::corrective_reranking::Parse *)*a6 != v15)
    {
      do
      {
        quasar::corrective_reranking::Parse::getTarget(v14, (uint64_t *)&v39);
        quasar::corrective_reranking::detokenize(v37, &v39);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        int v16 = (char)a4[23];
        BOOL v17 = v16 < 0;
        if (v16 >= 0) {
          uint64_t v18 = a4;
        }
        else {
          uint64_t v18 = *(unsigned __int8 **)a4;
        }
        if (v17) {
          uint64_t v19 = *((void *)a4 + 1);
        }
        else {
          uint64_t v19 = a4[23];
        }
        if ((v38 & 0x80u) == 0) {
          uint64_t v20 = v37;
        }
        else {
          uint64_t v20 = (void **)v37[0];
        }
        if ((v38 & 0x80u) == 0) {
          unint64_t v21 = v38;
        }
        else {
          unint64_t v21 = (unint64_t)v37[1];
        }
        uint64_t v22 = &v18[v19];
        if (v19) {
          BOOL v23 = v21 == 0;
        }
        else {
          BOOL v23 = 1;
        }
        if (v23)
        {
          long long v27 = &v18[v19];
        }
        else
        {
          int64_t v26 = v18;
          long long v27 = &v18[v19];
          do
          {
            if (*v26 == *(unsigned __int8 *)v20)
            {
              uint64_t v28 = 1;
              while (v21 != v28)
              {
                if (&v26[v28] == v22) {
                  goto LABEL_33;
                }
                int v29 = v26[v28];
                int v30 = *((unsigned __int8 *)v20 + v28++);
                if (v29 != v30) {
                  goto LABEL_51;
                }
              }
              long long v27 = v26;
            }
LABEL_51:
            ++v26;
          }
          while (v26 != v22);
        }
LABEL_33:
        BOOL v24 = v27 != v22 || v21 == 0;
        LOBYTE(v39.__begin_) = 0;
        char v40 = 0;
        if (v24 && v27 - v18 != -1)
        {
          quasar::SystemConfig::Version::Version(v41, v27 - v18, v21);
          long long v25 = operator new(8uLL);
          p_p = v25;
          *long long v25 = v41[0];
          uint64_t v34 = v25 + 1;
          uint64_t v35 = v25 + 1;
          quasar::corrective_reranking::TargetRange::TargetRange(&__p, (uint64_t)&p_p);
          std::optional<quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100]<quasar::corrective_reranking::TargetRange,void>(&v39, (__n128 *)&__p);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (p_p)
          {
            uint64_t v34 = p_p;
            operator delete(p_p);
          }
        }
        std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::corrective_reranking::TargetRange,false> const&>((uint64_t)v14 + 88, (uint64_t)&v39);
        if (v40 && v39.__begin_)
        {
          v39.__end_ = v39.__begin_;
          operator delete(v39.__begin_);
        }
        if ((char)v38 < 0) {
          operator delete(v37[0]);
        }
        uint64_t v14 = (quasar::corrective_reranking::Parse *)((char *)v14 + 232);
      }
      while (v14 != v15);
    }
  }
}

void sub_1B1F2FD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,uint64_t a27,char a28)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::Models::clearShortTermCache(quasar::corrective_reranking::TransformerClassifier **this)
{
}

void quasar::corrective_reranking::Models::clearLongTermCache(quasar::corrective_reranking::PhoneticMatcher **this)
{
}

quasar::corrective_reranking::PhoneticMatcher *std::unique_ptr<quasar::corrective_reranking::PhoneticMatcher>::reset[abi:ne180100](quasar::corrective_reranking::PhoneticMatcher **a1, quasar::corrective_reranking::PhoneticMatcher *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::corrective_reranking::PhoneticMatcher::~PhoneticMatcher(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a2 + 72);
    std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::~__hash_table(a2 + 32);
    std::__tree<std::string>::destroy(a2 + 8, *(char **)(a2 + 16));
    JUMPOUT(0x1B3EA8670);
  }
}

quasar::corrective_reranking::TransformerClassifier *std::unique_ptr<quasar::corrective_reranking::TransformerClassifier>::reset[abi:ne180100](quasar::corrective_reranking::TransformerClassifier **a1, quasar::corrective_reranking::TransformerClassifier *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::corrective_reranking::TransformerClassifier::~TransformerClassifier(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void std::default_delete<quasar::corrective_reranking::CorrectiveReranker>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 256);
    *(void *)(a2 + 256) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = (void **)(a2 + 232);
    std::vector<std::unique_ptr<quasar::corrective_reranking::Featurizer>>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 192);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 152);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 112);
    uint64_t v4 = (void **)(a2 + 80);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(a2 + 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    MEMORY[0x1B3EA8670](a2, 0x10F2C4084E37CF3);
  }
}

void std::default_delete<quasar::corrective_reranking::FusedIntentClassifier>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = (void **)(a2 + 8);
    std::vector<std::unique_ptr<quasar::corrective_reranking::Featurizer>>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x1B3EA8670](a2, 0x60C409743DB05);
  }
}

uint64_t std::default_delete<quasar::corrective_reranking::TargetIndexFilter>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    kaldi::CuVector<float>::~CuVector((void *)(a2 + 80));
    kaldi::CuMatrix<float>::~CuMatrix(a2 + 32);
    uint64_t v4 = (void **)(a2 + 8);
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x1B3EA8670](a2, 0x10E0C4043F1346FLL);
  }
  return result;
}

quasar::corrective_reranking::OverridesDictionary *std::unique_ptr<quasar::corrective_reranking::OverridesDictionary>::reset[abi:ne180100](quasar::corrective_reranking::OverridesDictionary **a1, quasar::corrective_reranking::OverridesDictionary *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::corrective_reranking::OverridesDictionary::~OverridesDictionary(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string>,double>(uint64_t *a1, uint64_t a2, long long **a3, double *a4)
{
  uint64_t v5 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x11A7B9611A7B961) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[2] - *a1) >> 3)) >= 0x8D3DCB08D3DCB0) {
    unint64_t v10 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v14 = v11;
  int v15 = (std::string *)&v11[232 * v5];
  BOOL v17 = &v11[232 * v10];
  std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string>,double>((uint64_t)(a1 + 2), v15, a2, a3, a4);
  int v16 = &v15[9].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1B1F302BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string>,double>(uint64_t a1, std::string *a2, uint64_t a3, long long **a4, double *a5)
{
  double v8 = *a5;
  LOBYTE(v17[0]) = 0;
  char v18 = 0;
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  float v9 = v8;
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  quasar::corrective_reranking::Parse::Parse(a2, a3, a4, (uint64_t)v17, (long long *)v15, (uint64_t)&__p, 1, v11, v9, 0.0, (long long **)v10);
  uint64_t v19 = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  v10[0] = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v10);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18)
  {
    if (v17[0])
    {
      v17[1] = v17[0];
      operator delete(v17[0]);
    }
  }
}

void sub_1B1F303D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,char a28)
{
  *(void *)(v29 - 72) = v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 72));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a28)
  {
    if (a25)
    {
      a26 = (uint64_t)a25;
      operator delete(a25);
    }
  }
  _Unwind_Resume(a1);
}

void quasar::DerivedEnumerator::DerivedEnumerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "tag-sequences");
  quasar::PTree::getChild(a4, (uint64_t)__p);
}

void sub_1B1F308FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 - 73) < 0) {
    operator delete(*(void **)(v16 - 96));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1F30968);
}

void sub_1B1F3093C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    JUMPOUT(0x1B1F30974);
  }
  JUMPOUT(0x1B1F30978);
}

void sub_1B1F30950()
{
}

void sub_1B1F30958()
{
}

void sub_1B1F30964(_Unwind_Exception *a1)
{
  if (*(char *)(v4 - 49) < 0) {
    operator delete(*(void **)(v4 - 72));
  }
  uint64_t v6 = *(void *)(v1 + 272);
  *(void *)(v1 + 272) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(v3);
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  quasar::SimpleNameEnumerator::~SimpleNameEnumerator((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1B1F309D0()
{
}

void sub_1B1F309D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1F309C8);
}

void quasar::SimpleNameEnumerator::~SimpleNameEnumerator(void **this)
{
  *this = &unk_1F0A552E0;
  uint64_t v2 = this + 4;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::NameEnumerator::~NameEnumerator(this);
}

{
  void **v2;

  *this = &unk_1F0A552E0;
  uint64_t v2 = this + 4;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::NameEnumerator::~NameEnumerator(this);
}

{
  void **v2;

  *this = &unk_1F0A552E0;
  uint64_t v2 = this + 4;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::NameEnumerator::~NameEnumerator(this);
  MEMORY[0x1B3EA8670]();
}

void quasar::DerivedEnumerator::createTokens(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v29 = 0;
  long long v3 = 0uLL;
  long long v28 = 0u;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    unint64_t v22 = 0;
    goto LABEL_49;
  }
  uint64_t v23 = a3;
  do
  {
    memset(&v27, 0, sizeof(v27));
    uint64_t v7 = *(unsigned __int8 *)(v4 + 23);
    if ((v7 & 0x80u) == 0) {
      double v8 = (int *)v4;
    }
    else {
      double v8 = *(int **)v4;
    }
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(v4 + 8);
    }
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(a2, v8, (int *)((char *)v8 + v7), v26);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    std::basic_string<char32_t> v27 = v26[0];
    v26[0].__r_.__value_.__s.__data_[0] = 0;
    uint64_t v25 = 0;
    std::basic_string<char32_t>::size_type size = HIBYTE(v26[0].__r_.__value_.__r.__words[2]);
    if ((v26[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v27;
    }
    else {
      unint64_t v10 = (std::basic_string<char32_t> *)v27.__r_.__value_.__r.__words[0];
    }
    if ((v26[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::basic_string<char32_t>::size_type size = v27.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      int v24 = 2;
LABEL_34:
      if (v26[0].__r_.__value_.__s.__data_[0] > 0 || SHIDWORD(v25) >= 1)
      {
        int v15 = 0;
        int v24 = 0;
      }
      else
      {
        int v15 = 2;
      }
      goto LABEL_38;
    }
    int v11 = 0;
    uint64_t v12 = 4 * size;
    do
    {
      UChar32 v13 = v10->__r_.__value_.__s.__data_[0];
      if (u_isalpha(v10->__r_.__value_.__s.__data_[0]))
      {
        if (quasar::isCJK(v13)) {
          ++v26[0].__r_.__value_.__s.__data_[0];
        }
        else {
          ++HIDWORD(v25);
        }
      }
      else if (u_isWhitespace(v13))
      {
        ++v11;
      }
      else if (u_charType(v13) == 20 || v13 == 39 || v13 == 34)
      {
        LODWORD(v25) = v25 + 1;
      }
      unint64_t v10 = (std::basic_string<char32_t> *)((char *)v10 + 4);
      v12 -= 4;
    }
    while (v12);
    int v24 = 2;
    if (v11 <= 0) {
      goto LABEL_34;
    }
    std::basic_string<char32_t>::size_type v14 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::basic_string<char32_t>::size_type v14 = v27.__r_.__value_.__l.__size_;
    }
    if (v14 != v11) {
      goto LABEL_34;
    }
    int v15 = 1;
    int v24 = 1;
LABEL_38:
    uint64_t v16 = *((void *)&v28 + 1);
    if (*((void *)&v28 + 1) >= v29)
    {
      uint64_t v21 = std::vector<quasar::DerivedEnumerator::Token>::__emplace_back_slow_path<std::string const&,quasar::DerivedEnumerator::TokenType &,int &,int &,int &>((uint64_t *)&v28, (long long *)v4, &v24, (int *)v26, (int *)&v25 + 1, (int *)&v25);
    }
    else
    {
      int v18 = HIDWORD(v25);
      std::basic_string<char32_t>::value_type v17 = v26[0].__r_.__value_.__s.__data_[0];
      int v19 = v25;
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)&v28 + 1), *(const std::string::value_type **)v4, *(void *)(v4 + 8));
      }
      else
      {
        long long v20 = *(_OWORD *)v4;
        *(void *)(*((void *)&v28 + 1) + 16) = *(void *)(v4 + 16);
        *(_OWORD *)uint64_t v16 = v20;
      }
      *(_DWORD *)(v16 + 24) = v15;
      *(_DWORD *)(v16 + 28) = v17;
      uint64_t v21 = v16 + 40;
      *(_DWORD *)(v16 + 32) = v18;
      *(_DWORD *)(v16 + 36) = v19;
    }
    *((void *)&v28 + 1) = v21;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    v4 += 24;
  }
  while (v4 != v5);
  long long v3 = v28;
  unint64_t v22 = v29;
  a3 = v23;
LABEL_49:
  *(_OWORD *)a3 = v3;
  *(void *)(a3 + 16) = v22;
  unint64_t v29 = 0;
  long long v28 = 0uLL;
  v26[0].__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)&v28;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
}

void sub_1B1F30CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13)
{
  *(void *)(v14 + 312) = v13;
  if (*(char *)(v15 - 137) < 0) {
    operator delete(*(void **)(v14 + 272));
  }
  *(void *)&a13 = v15 - 128;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void quasar::DerivedEnumerator::combineTokens(long long **a1@<X0>, std::string *a2@<X8>)
{
  long long v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = ((char *)v4 - (char *)*a1) / 40;
  if (v4 == *a1) {
    goto LABEL_19;
  }
  uint64_t v7 = 0;
  uint64_t v8 = v5 <= 1 ? 1 : ((char *)v4 - (char *)*a1) / 40;
  float v9 = (int *)v3 + 6;
  int v10 = -1;
  int v11 = -1;
  do
  {
    int v13 = *v9;
    v9 += 10;
    int v12 = v13;
    if (v11 == -1 && v12 == 0) {
      int v11 = v7;
    }
    if (!v12) {
      int v10 = v7;
    }
    ++v7;
  }
  while (v8 != v7);
  if (v11 == -1 || v10 == -1)
  {
LABEL_19:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::vector<quasar::DerivedEnumerator::Token>::__init_with_size[abi:ne180100]<quasar::DerivedEnumerator::Token*,quasar::DerivedEnumerator::Token*>(a2, v3, v4, v5);
  }
  else
  {
    std::vector<int>::vector(&v44, v5);
    std::vector<int>::size_type v16 = ((char *)a1[1] - (char *)*a1) / 40;
    if (a1[1] != *a1)
    {
      uint64_t v17 = 0;
      std::vector<int>::pointer begin = v44.__begin_;
      uint64_t v19 = v11;
      if (v16 <= 1) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = ((char *)a1[1] - (char *)*a1) / 40;
      }
      uint64_t v21 = (_DWORD *)*a1 + 6;
      do
      {
        if (v17 > v19)
        {
          if (*v21) {
            int v22 = v11;
          }
          else {
            int v22 = v17;
          }
          if (*v21 == 1) {
            int v11 = -1;
          }
          else {
            int v11 = v22;
          }
        }
        begin[v17++] = v11;
        v21 += 10;
      }
      while (v20 != v17);
    }
    std::vector<int>::vector(&v43, v16);
    uint64_t v23 = *a1;
    int v24 = a1[1];
    unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v24 - (char *)*a1) >> 3);
    int v26 = v25 - 1;
    if ((int)v25 >= 1)
    {
      std::vector<int>::pointer v27 = v43.__begin_;
      uint64_t v28 = -858993459 * (((char *)v24 - (char *)*a1) >> 3);
      uint64_t v29 = v10;
      do
      {
        uint64_t v30 = v28--;
        if (v30 <= v29)
        {
          int v31 = *((_DWORD *)v23 + 10 * v28 + 6);
          if (v31 == 1)
          {
            int v10 = -1;
          }
          else if (!v31)
          {
            int v10 = v26;
          }
        }
        v27[v28] = v10;
        --v26;
      }
      while ((unint64_t)(v28 + 1) > 1);
    }
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    if (v24 != v23)
    {
      uint64_t v32 = 0;
      unint64_t v33 = 0;
      while (1)
      {
        std::vector<int>::pointer v34 = v44.__begin_;
        int v35 = v44.__begin_[v33];
        if (v35 != -1)
        {
          std::vector<int>::pointer v36 = v43.__begin_;
          int v37 = v43.__begin_[v33];
          if (v37 != -1 && v35 != v37)
          {
            v44.__begin_[v33] = -1;
            v36[v33] = -1;
          }
        }
        if (!v33) {
          break;
        }
        int v39 = v34[v33];
        if (v39 == -1 && v43.__begin_[v33] == -1)
        {
          std::string::size_type size = a2->__r_.__value_.__l.__size_;
          if (size < a2->__r_.__value_.__r.__words[2])
          {
LABEL_67:
            std::vector<quasar::DerivedEnumerator::Token>::__construct_one_at_end[abi:ne180100]<quasar::DerivedEnumerator::Token const&>((uint64_t)a2, (long long *)((char *)v23 + v32));
LABEL_68:
            uint64_t v42 = size + 40;
LABEL_71:
            a2->__r_.__value_.__l.__size_ = v42;
            goto LABEL_72;
          }
LABEL_69:
          uint64_t v23 = (long long *)((char *)v23 + 40 * v33);
LABEL_70:
          uint64_t v42 = std::vector<quasar::DerivedEnumerator::Token>::__push_back_slow_path<quasar::DerivedEnumerator::Token const&>((uint64_t *)a2, v23);
          goto LABEL_71;
        }
        int v40 = v34[v33 - 1];
        if (v40 == -1 && v43.__begin_[v33 - 1] == -1)
        {
          std::string::size_type size = a2->__r_.__value_.__l.__size_;
          if (size < a2->__r_.__value_.__r.__words[2]) {
            goto LABEL_67;
          }
          goto LABEL_69;
        }
        if (v40 == v39)
        {
          std::string::size_type size = a2->__r_.__value_.__l.__size_;
        }
        else
        {
          std::string::size_type size = a2->__r_.__value_.__l.__size_;
          if (v43.__begin_[v33 - 1] != v43.__begin_[v33])
          {
            uint64_t v23 = (long long *)((char *)v23 + v32);
            if (size >= a2->__r_.__value_.__r.__words[2]) {
              goto LABEL_70;
            }
            goto LABEL_59;
          }
        }
        quasar::DerivedEnumerator::Token::append((quasar::DerivedEnumerator::Token *)(size - 40), (const Token *)((char *)v23 + v32));
LABEL_72:
        ++v33;
        uint64_t v23 = *a1;
        v32 += 40;
        if (0xCCCCCCCCCCCCCCCDLL * (((char *)a1[1] - (char *)*a1) >> 3) <= v33) {
          goto LABEL_73;
        }
      }
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
      if (size >= a2->__r_.__value_.__r.__words[2]) {
        goto LABEL_70;
      }
LABEL_59:
      std::vector<quasar::DerivedEnumerator::Token>::__construct_one_at_end[abi:ne180100]<quasar::DerivedEnumerator::Token const&>((uint64_t)a2, v23);
      goto LABEL_68;
    }
LABEL_73:
    if (v43.__begin_)
    {
      v43.__end_ = v43.__begin_;
      operator delete(v43.__begin_);
    }
    if (v44.__begin_)
    {
      v44.__end_ = v44.__begin_;
      operator delete(v44.__begin_);
    }
  }
}

void sub_1B1F31178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

quasar::DerivedEnumerator::Token *quasar::DerivedEnumerator::Token::append(quasar::DerivedEnumerator::Token *this, const Token *data)
{
  uint64_t v2 = data;
  unint64_t size = data->tokenName.__r_.__value_.var0.var1.__size_;
  if (*((char *)&data->tokenName.__r_.__value_.var0.var1 + 23) >= 0)
  {
    std::string::size_type v5 = *((unsigned __int8 *)&data->tokenName.__r_.__value_.var0.var1 + 23);
  }
  else
  {
    data = (const Token *)data->tokenName.__r_.__value_.var0.var1.__data_;
    std::string::size_type v5 = size;
  }
  std::string::append((std::string *)this, data->tokenName.__r_.__value_.var0.var0.__data_, v5);
  *(int32x2_t *)((char *)this + 28) = vadd_s32(*(int32x2_t *)((char *)this + 28), *(int32x2_t *)&v2->tokenName.__r_.var1);
  *((_DWORD *)this + 9) += HIDWORD(v2->tokenName.var0);
  int v6 = *((_DWORD *)this + 6);
  if (!v6) {
    goto LABEL_9;
  }
  int var0 = v2->tokenName.__r_.var0;
  if (!var0)
  {
    int v6 = 0;
    goto LABEL_9;
  }
  if (v6 != var0)
  {
    int v6 = 2;
LABEL_9:
    *((_DWORD *)this + 6) = v6;
  }
  return this;
}

uint64_t quasar::DerivedEnumerator::processOpenPunctuation(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1] - *a1;
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = v2 / 40;
  if (v4 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v4;
  }
  for (uint64_t i = (int *)(v1 - 16); i[13] < 1; i += 10)
  {
    if (v5 == ++v3) {
      return 0;
    }
  }
  do
  {
    uint64_t v9 = v3;
    if (v3-- < 1)
    {
      LODWORD(v3) = 0;
      goto LABEL_14;
    }
    int v8 = *i;
    i -= 10;
  }
  while (v8 == 1);
  LODWORD(v3) = v3 + 1;
LABEL_14:
  unint64_t v11 = (int)v3;
  if (v4 <= (int)v3)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    int v12 = (int *)(v1 + 40 * (int)(v9 & ~(v9 >> 63)) + 24);
    uint64_t v3 = (int)v3;
    do
    {
      int v13 = *v12;
      v12 += 10;
      if (v13) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = (v7 + 1);
      }
      ++v3;
    }
    while (v4 > v3);
  }
  std::vector<quasar::DerivedEnumerator::Token>::resize(a1, v11);
  return v7;
}

void std::vector<quasar::DerivedEnumerator::Token>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<quasar::DerivedEnumerator::Token>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      if (*(char *)(v3 - 17) < 0) {
        operator delete(*(void **)(v3 - 40));
      }
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

void *quasar::DerivedEnumerator::SpokenTokens::SpokenTokens(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  uint64_t v3 = (void **)(a1 + 3);
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4 != *a1)
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    int v8 = a1 + 5;
    do
    {
      if (!*(_DWORD *)(v5 + 40 * v7 + 24))
      {
        if ((unint64_t)v6 >= *v8)
        {
          int v10 = (char *)*v3;
          uint64_t v11 = (v6 - (unsigned char *)*v3) >> 2;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = *v8 - (void)v10;
          if (v13 >> 1 > v12) {
            unint64_t v12 = v13 >> 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 5), v14);
            int v10 = (char *)a1[3];
            unint64_t v6 = (char *)a1[4];
          }
          else
          {
            uint64_t v15 = 0;
          }
          std::vector<int>::size_type v16 = &v15[4 * v11];
          *(_DWORD *)std::vector<int>::size_type v16 = v7;
          uint64_t v9 = v16 + 4;
          while (v6 != v10)
          {
            int v17 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v16 - 1) = v17;
            v16 -= 4;
          }
          a1[3] = v16;
          a1[4] = v9;
          a1[5] = &v15[4 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v6 = v7;
          uint64_t v9 = v6 + 4;
        }
        a1[4] = v9;
        unint64_t v6 = v9;
        uint64_t v5 = *a1;
        uint64_t v4 = a1[1];
      }
      ++v7;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) > v7);
  }
  return a1;
}

void sub_1B1F31540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 32) = v13;
    operator delete(v13);
  }
  a10 = (void **)v10;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void quasar::DerivedEnumerator::SpokenTokens::slice(quasar::DerivedEnumerator::SpokenTokens *this@<X0>, unsigned int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  if ((a2 & 0x80000000) == 0)
  {
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    a3 += (*((void *)this + 4) - *((void *)this + 3)) >> 2;
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_7;
  }
  a2 += (*((void *)this + 4) - *((void *)this + 3)) >> 2;
  if (a3 < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((a2 & 0x80000000) != 0) {
    goto LABEL_21;
  }
LABEL_7:
  uint64_t v6 = *((void *)this + 3);
  unint64_t v7 = (unint64_t)(*((void *)this + 4) - v6) >> 2;
  if ((int)a2 >= (int)v7 || a3 < 1 || (a3 <= (int)v7 ? (BOOL v8 = a2 >= a3) : (BOOL v8 = 1), v8))
  {
LABEL_21:
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Index error: [", 14);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
    std::vector<int>::size_type v16 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, ")");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  uint64_t v9 = *(int *)(v6 + 4 * a2);
  int v10 = *(_DWORD *)(v6 + 4 * (a3 - 1));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (SBYTE7(v18) < 0)
  {
    std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v12 = SBYTE7(v18);
    a4[1].__r_.__value_.__r.__words[0] = 0;
    a4[1].__r_.__value_.__l.__size_ = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    std::string::size_type v11 = v18;
    a4[1].__r_.__value_.__r.__words[0] = 0;
    a4[1].__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = v11;
  }
  if ((int)v9 <= v10)
  {
    uint64_t v13 = 40 * v9;
    int v14 = v10 - v9 + 1;
    do
    {
      quasar::DerivedEnumerator::Token::append((quasar::DerivedEnumerator::Token *)a4, (const Token *)(*(void *)this + v13));
      v13 += 40;
      --v14;
    }
    while (v14);
  }
}

void quasar::DerivedEnumerator::preprocessWord(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) == 0) {
    unint64_t v7 = (unsigned char *)a2;
  }
  else {
    unint64_t v7 = *(unsigned char **)a2;
  }
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    while (*v7 != 64)
    {
      ++v7;
      if (!--v6) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    quasar::getWordBoundarySeparatedString((char *)a2, &v21);
    quasar::DerivedEnumerator::createTokens((uint64_t *)&v21, a1 + 80, (uint64_t)v15);
    quasar::DerivedEnumerator::combineTokens(v15, &v20);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    int v8 = quasar::DerivedEnumerator::processOpenPunctuation((uint64_t *)&v20);
    if (*(char *)(a2 + 47) >= 0) {
      size_t v9 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      size_t v9 = *(void *)(a2 + 32);
    }
    int v10 = v18;
    std::string::basic_string[abi:ne180100]((uint64_t)v18, v9 + 8);
    if (v19 < 0) {
      int v10 = (void **)v18[0];
    }
    if (v9)
    {
      if (*(char *)(a2 + 47) >= 0) {
        std::string::size_type v11 = (const void *)(a2 + 24);
      }
      else {
        std::string::size_type v11 = *(const void **)(a2 + 24);
      }
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, "-derived");
    quasar::DerivedEnumerator::SpokenTokens::SpokenTokens(v15, (uint64_t)&v20);
    if (v8 >= 1)
    {
      unint64_t v12 = (unint64_t)(v17 - (unsigned char *)v16) >> 2;
      if ((int)v12 >= 1)
      {
        quasar::DerivedEnumerator::SpokenTokens::slice((quasar::DerivedEnumerator::SpokenTokens *)v15, 0, v12, &__p);
        quasar::addDerivedWord((uint64_t)&__p, (uint64_t)v18, a3, (float)*(int *)(a2 + 48));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    uint64_t v13 = v16;
    if ((int)((unint64_t)(v17 - (unsigned char *)v16) >> 2) > 1)
    {
      (*(void (**)(void, long long **, void **, uint64_t *, float))(**(void **)(a1 + 272) + 16))(*(void *)(a1 + 272), v15, v18, a3, (float)*(int *)(a2 + 48));
      uint64_t v13 = v16;
    }
    if (v13)
    {
      int v17 = v13;
      operator delete(v13);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    v15[0] = (long long *)&v20;
    std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)v15);
    v15[0] = (long long *)&v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v15);
  }
}

void sub_1B1F31988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  quasar::DerivedEnumerator::SpokenTokens::~SpokenTokens((quasar::DerivedEnumerator::SpokenTokens *)&a17);
  if (a28 < 0) {
    operator delete(a23);
  }
  a17 = v28 - 96;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = v28 - 72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void sub_1B1F319FC()
{
}

void sub_1B1F31A0C()
{
}

uint64_t quasar::addDerivedWord(uint64_t result, uint64_t a2, uint64_t *a3, float a4)
{
  float v6 = a4;
  if (*(int *)(result + 32) > 2 || (*(_DWORD *)(result + 28) - 2) <= 2)
  {
    unint64_t v5 = a3[1];
    if (v5 >= a3[2])
    {
      uint64_t result = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,std::string const&,float &>(a3, result, a2, &v6);
    }
    else
    {
      std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,float &>((uint64_t)(a3 + 2), a3[1], result, a2, &v6);
      uint64_t result = v5 + 80;
      a3[1] = v5 + 80;
    }
    a3[1] = result;
  }
  return result;
}

void sub_1B1F31AAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void quasar::DerivedEnumerator::SpokenTokens::~SpokenTokens(quasar::DerivedEnumerator::SpokenTokens *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)this;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void quasar::DerivedEnumerator::preprocess(uint64_t a1, uint64_t *a2)
{
  v28[0] = 0;
  v28[1] = 0;
  long long v27 = (uint64_t *)v28;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v5 = *a2 + 24;
    do
    {
      std::pair<std::string,quasar::LmeDataFactoryBase::Word>::pair[abi:ne180100]<true,0>((std::string *)&v21, (long long *)v5, (long long *)(v5 - 24));
      std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::LmeDataFactoryBase::Word>>(&v27, (const void **)&v21, &v21);
      char v7 = v6;
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v26, *((char **)&v26[0] + 1));
      if (SBYTE7(v25) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v23) < 0) {
        operator delete(*((void **)&v22 + 1));
      }
      if (SBYTE7(v22) < 0) {
        operator delete((void *)v21);
      }
      if ((v7 & 1) == 0)
      {
        memset(v26, 0, sizeof(v26));
        *(_OWORD *)std::string __p = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
        unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Tag with multiple words: \"", 26);
        int v13 = *(char *)(v5 + 23);
        if (v13 >= 0) {
          uint64_t v14 = v5;
        }
        else {
          uint64_t v14 = *(void *)v5;
        }
        if (v13 >= 0) {
          uint64_t v15 = *(unsigned __int8 *)(v5 + 23);
        }
        else {
          uint64_t v15 = *(void *)(v5 + 8);
        }
        std::vector<int>::size_type v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\" for \"", 7);
        long long v18 = quasar::operator<<(v17, v5 - 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\"", 1);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v21);
      }
      uint64_t v8 = v5 + 56;
      v5 += 80;
    }
    while (v8 != v4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "\\contact-first-phonetic");
  if (v28 == (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)&v21))
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "\\contact-last-phonetic");
    BOOL v9 = v28 == (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)v19);
    if (v20 < 0) {
      operator delete(v19[0]);
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  if (SBYTE7(v22) < 0)
  {
    operator delete((void *)v21);
    if (!v9) {
      goto LABEL_27;
    }
  }
  else if (!v9)
  {
    goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "\\contact-first");
  int v10 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)&v21);
  if (SBYTE7(v22) < 0) {
    operator delete((void *)v21);
  }
  if (v28 != v10) {
    quasar::DerivedEnumerator::preprocessWord(a1, (uint64_t)(v10 + 7), a2);
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "\\contact-last");
  std::string::size_type v11 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)&v21);
  if (SBYTE7(v22) < 0) {
    operator delete((void *)v21);
  }
  if (v28 != v11) {
    quasar::DerivedEnumerator::preprocessWord(a1, (uint64_t)(v11 + 7), a2);
  }
LABEL_27:
  std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::destroy((uint64_t)&v27, v28[0]);
}

void sub_1B1F31DF0()
{
}

void sub_1B1F31DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::pair<std::string,quasar::LmeDataFactoryBase::Word>::~pair((uint64_t)va);
  JUMPOUT(0x1B1F31E08);
}

uint64_t std::pair<std::string,quasar::LmeDataFactoryBase::Word>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void quasar::DerivedEnumerator::addDerivedEnumerations(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  uint64_t v10 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a4, a2);
  uint64_t v11 = v10;
  if (v9)
  {
    uint64_t v27 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a4, (const void **)a3);
    if (a4 + 8 != v11 && a4 + 8 != v27)
    {
      unint64_t v12 = *(long long **)(v11 + 56);
      for (uint64_t i = *(long long **)(v11 + 64); v12 != i; v12 += 5)
      {
        int v13 = *(long long **)(v27 + 56);
        uint64_t v14 = *(long long **)(v27 + 64);
        while (v13 != v14)
        {
          std::to_string(&v52, *(float *)(a1 + 280) * (float)*((int *)v12 + 12));
          if (*((char *)v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v12, *((void *)v12 + 1));
          }
          else
          {
            long long v15 = *v12;
            v53.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
            *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
          }
          if (*((char *)v13 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v13, *((void *)v13 + 1));
          }
          else
          {
            long long v16 = *v13;
            v54.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
            *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v16;
          }
          uint64_t v50 = &v52;
          uint64_t v51 = 3;
          if (quasar::gLogLevel >= 6)
          {
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            long long v39 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
            uint64_t v28 = " ";
            uint64_t v29 = 1;
            quasar::join<std::initializer_list<std::string>>((uint64_t *)&v50, (uint64_t *)&v28);
            if ((v32 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            if ((v32 & 0x80u) == 0) {
              uint64_t v18 = v32;
            }
            else {
              uint64_t v18 = v31;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)p_p, v18);
            if ((char)v32 < 0) {
              operator delete(__p);
            }
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
          }
          std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_impl<std::initializer_list<std::string>>(a5, (uint64_t)&v50);
          for (uint64_t j = 0; j != -9; j -= 3)
          {
            if (SHIBYTE(v54.__r_.__value_.__r.__words[j + 2]) < 0) {
              operator delete(*(void **)((char *)&v54.__r_.__value_.__l.__data_ + j * 8));
            }
          }
          v13 += 5;
        }
      }
    }
  }
  else if (a4 + 8 != v10)
  {
    char v20 = *(long long **)(v10 + 56);
    for (k = *(long long **)(v10 + 64); v20 != k; v20 += 5)
    {
      std::to_string(&v52, *(float *)(a1 + 280) * (float)*((int *)v20 + 12));
      if (*((char *)v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v20, *((void *)v20 + 1));
      }
      else
      {
        long long v22 = *v20;
        v53.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v22;
      }
      uint64_t v50 = &v52;
      uint64_t v51 = 2;
      if (quasar::gLogLevel >= 6)
      {
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
        uint64_t v28 = " ";
        uint64_t v29 = 1;
        quasar::join<std::initializer_list<std::string>>((uint64_t *)&v50, (uint64_t *)&v28);
        if ((v32 & 0x80u) == 0) {
          long long v23 = &__p;
        }
        else {
          long long v23 = __p;
        }
        if ((v32 & 0x80u) == 0) {
          uint64_t v24 = v32;
        }
        else {
          uint64_t v24 = v31;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)v23, v24);
        if ((char)v32 < 0) {
          operator delete(__p);
        }
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
      }
      std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_impl<std::initializer_list<std::string>>(a5, (uint64_t)&v50);
      for (uint64_t m = 0; m != -6; m -= 3)
      {
        if (SHIBYTE(v53.__r_.__value_.__r.__words[m + 2]) < 0) {
          operator delete(*(void **)((char *)&v52 + m * 8 + 24));
        }
      }
    }
  }
}

void sub_1B1F32220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (*(char *)(v20 - 153) < 0) {
    operator delete(*(void **)(v20 - 176));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::join<std::initializer_list<std::string>>(uint64_t *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::initializer_list<std::string>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B1F324A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::DerivedEnumerator::addEnumerations(uint64_t a1, long long **a2, uint64_t **a3)
{
  if (quasar::gLogLevel >= 6)
  {
    char v6 = *a2;
    char v7 = a2[1];
    if (*a2 != v7)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "-derived");
        BOOL v8 = quasar::endsWith((uint64_t *)v6 + 3, (uint64_t *)__p);
        if (SBYTE7(v20) < 0) {
          operator delete(__p[0]);
        }
        char v9 = quasar::gLogLevel < 6 || v8;
        if ((v9 & 1) == 0)
        {
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          quasar::operator<<(__p, (uint64_t)v6);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
        }
        v6 += 5;
      }
      while (v6 != v7);
    }
  }
  quasar::SimpleNameEnumerator::addEnumerations(a1, a2, a3);
  __p[1] = 0;
  *(void *)&long long v20 = 0;
  __p[0] = &__p[1];
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  if (*a2 != v11)
  {
    do
    {
      long long v36 = (long long *)((char *)v10 + 24);
      unint64_t v12 = std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)__p, (const void **)v10 + 3, (uint64_t)&std::piecewise_construct, &v36);
      int v13 = (std::string *)v12[8];
      if ((unint64_t)v13 >= v12[9])
      {
        p_unint64_t size = std::vector<quasar::LmeDataFactoryBase::Word>::__push_back_slow_path<quasar::LmeDataFactoryBase::Word const&>(v12 + 7, v10);
      }
      else
      {
        std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>(v12 + 72, v13, v10);
        p_unint64_t size = (uint64_t)&v13[3].__r_.__value_.__l.__size_;
        v12[8] = (uint64_t)&v13[3].__r_.__value_.__l.__size_;
      }
      v12[8] = p_size;
      v10 += 5;
    }
    while (v10 != v11);
  }
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 272) + 24))(*(void *)(a1 + 272));
  long long v16 = *(const void ***)v15;
  int v17 = *(const void ***)(v15 + 8);
  while (v16 != v17)
  {
    uint64_t v18 = v16 + 3;
    quasar::DerivedEnumerator::addDerivedEnumerations(a1, v16, (uint64_t)(v16 + 3), (uint64_t)__p, a3);
    long long v16 = v18 + 3;
  }
  std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy((uint64_t)__p, (void *)__p[1]);
}

void sub_1B1F326B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, int a11, __int16 a12, char a13, char a14)
{
}

void quasar::DerivedEnumerator::~DerivedEnumerator(quasar::DerivedEnumerator *this)
{
  quasar::DerivedEnumerator::~DerivedEnumerator(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t v2;
  void **v3;

  *(void *)this = &unk_1F0A539E0;
  uint64_t v2 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  *(void *)this = &unk_1F0A552E0;
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  quasar::NameEnumerator::~NameEnumerator((void **)this);
}

uint64_t quasar::SimpleNameEnumerator::isCalculatedInQuasar(quasar::SimpleNameEnumerator *this)
{
  return 1;
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,std::string const&,float &>(uint64_t *a1, uint64_t a2, uint64_t a3, float *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v10 = 0x333333333333333;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v14 = v11;
  uint64_t v15 = &v11[80 * v5];
  int v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,float &>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  long long v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1B1F32860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,float &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v9 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  quasar::LmeDataFactoryBase::Word::Word(a2, &v9, &__p, (int)*a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1B1F32934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,quasar::LmeDataFactoryBase::Word>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&this[3].__r_.__value_.__l.__size_, (uint64_t)a3 + 56);
  return this;
}

void sub_1B1F32A34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

quasar::EnLikeAlgorithm *quasar::EnLikeAlgorithm::EnLikeAlgorithm(quasar::EnLikeAlgorithm *this)
{
  *(void *)&long long v11 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F0A52EE0;
  uint64_t v2 = (void *)((char *)this + 8);
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[1],0>(v7, "\\contact-first-derived", "");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[1],0>(v8, "\\contact-last-derived", "");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v9, "\\contact-first-derived", "\\contact-last");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[22],0>(v10, "\\contact-first", "\\contact-last-derived");
  *uint64_t v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  uint64_t v3 = (std::string *)operator new(0xC0uLL);
  *((void *)this + 3) = v3 + 8;
  *((void *)this + 1) = v3;
  *((void *)this + 2) = v3;
  unint64_t v4 = 0;
  *((void *)this + 2) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)this + 24, v7, &v11, v3);
  do
  {
    long long v5 = &v7[v4 / 2];
    if (SHIBYTE(v10[v4 + 5]) < 0) {
      operator delete(*((void **)v5 + 21));
    }
    if (*((char *)v5 + 167) < 0) {
      operator delete(*((void **)v5 + 18));
    }
    v4 -= 6;
  }
  while (v4 != 0x1FFFFFFFFFFFFFE8);
  return this;
}

void sub_1B1F32CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  *(void *)(v12 + 16) = v13;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (uint64_t i = 144; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair((uint64_t)(&a12 + i));
  _Unwind_Resume(a1);
}

void quasar::EnLikeAlgorithm::~EnLikeAlgorithm(quasar::EnLikeAlgorithm *this)
{
  *(void *)this = &unk_1F0A52EE0;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_1F0A52EE0;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1B3EA8670](this, 0xA1C4030951706);
}

void quasar::EnLikeAlgorithm::addDerivedWords(int a1, quasar::DerivedEnumerator::SpokenTokens *this, float a3, uint64_t a4, uint64_t *a5)
{
  quasar::DerivedEnumerator::SpokenTokens::slice(this, 0, 1, &__p);
  quasar::addDerivedWord((uint64_t)&__p, a4, a5, a3);
  quasar::DerivedEnumerator::SpokenTokens::slice(this, 1u, (*((void *)this + 4) - *((void *)this + 3)) >> 2, &v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v9;
  long long v12 = v10;
  quasar::addDerivedWord((uint64_t)&__p, a4, a5, a3);
  if ((int)((*((void *)this + 4) - *((void *)this + 3)) >> 2) >= 3)
  {
    quasar::DerivedEnumerator::SpokenTokens::slice(this, 0, -1, &v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v9;
    long long v12 = v10;
    quasar::addDerivedWord((uint64_t)&__p, a4, a5, a3);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1F32F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::EnLikeAlgorithm::derivedEnumerationTags(quasar::EnLikeAlgorithm *this)
{
  return (uint64_t)this + 8;
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[1],0>(void *a1, char *a2, char *a3)
{
  long long v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1F32F80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[1],0>(void *a1, char *a2, char *a3)
{
  long long v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1F32FD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  long long v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1F33028(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[22],0>(void *a1, char *a2, char *a3)
{
  long long v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B1F3307C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  long long v10 = this;
  long long v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      unint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1F33128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

quasar::ZhLikeAlgorithm *quasar::ZhLikeAlgorithm::ZhLikeAlgorithm(quasar::ZhLikeAlgorithm *this)
{
  *(void *)&long long v9 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F0A53230;
  uint64_t v2 = (void *)((char *)this + 8);
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[1],0>(v7, "\\contact-first-derived", "");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[1],0>(v8, "\\contact-last-derived", "");
  *uint64_t v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  uint64_t v3 = (std::string *)operator new(0x60uLL);
  *((void *)this + 3) = v3 + 4;
  *((void *)this + 1) = v3;
  *((void *)this + 2) = v3;
  unint64_t v4 = 0;
  *((void *)this + 2) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)this + 24, v7, &v9, v3);
  do
  {
    long long v5 = &v7[v4 / 2];
    if (SHIBYTE(v8[v4 + 5]) < 0) {
      operator delete(*((void **)v5 + 9));
    }
    if (*((char *)v5 + 71) < 0) {
      operator delete(*((void **)v5 + 6));
    }
    v4 -= 6;
  }
  while (v4 != 0x1FFFFFFFFFFFFFF4);
  return this;
}

void sub_1B1F33268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 16) = v14;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (uint64_t i = 48; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair((uint64_t)(&a12 + i));
  _Unwind_Resume(a1);
}

void quasar::ZhLikeAlgorithm::~ZhLikeAlgorithm(quasar::ZhLikeAlgorithm *this)
{
  *(void *)this = &unk_1F0A53230;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_1F0A53230;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1B3EA8670](this, 0xA1C4030951706);
}

void quasar::ZhLikeAlgorithm::addDerivedWords(int a1, quasar::DerivedEnumerator::SpokenTokens *this, float a3, uint64_t a4, uint64_t *a5)
{
  int v9 = 1;
  do
  {
    if (v9 >= (int)((*((void *)this + 4) - *((void *)this + 3)) >> 2)) {
      break;
    }
    quasar::DerivedEnumerator::SpokenTokens::slice(this, 0, v9, &__p);
    quasar::addDerivedWord((uint64_t)&__p, a4, a5, a3);
    int v10 = v16;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    ++v9;
  }
  while (v10 < 4);
  int v11 = -1;
  int v12 = 1;
  do
  {
    uint64_t v13 = (*((void *)this + 4) - *((void *)this + 3)) >> 2;
    if (v12 >= (int)v13) {
      break;
    }
    quasar::DerivedEnumerator::SpokenTokens::slice(this, v11 + v13, v13, &__p);
    quasar::addDerivedWord((uint64_t)&__p, a4, a5, a3);
    int v14 = v16;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    --v11;
    ++v12;
  }
  while (v14 < 4);
}

void sub_1B1F33494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ZhLikeAlgorithm::derivedEnumerationTags(quasar::ZhLikeAlgorithm *this)
{
  return (uint64_t)this + 8;
}

uint64_t std::vector<quasar::DerivedEnumerator::Token>::__emplace_back_slow_path<std::string const&,quasar::DerivedEnumerator::TokenType &,int &,int &,int &>(uint64_t *a1, long long *a2, int *a3, int *a4, int *a5, int *a6)
{
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v8) {
    unint64_t v8 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v14 = 0x666666666666666;
  }
  else {
    unint64_t v14 = v8;
  }
  long long v22 = a1 + 2;
  if (v14) {
    uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v14);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v18 = v15;
  char v19 = (std::string *)&v15[40 * v7];
  long long v21 = &v15[40 * v14];
  std::allocator<quasar::DerivedEnumerator::Token>::construct[abi:ne180100]<quasar::DerivedEnumerator::Token,std::string const&,quasar::DerivedEnumerator::TokenType &,int &,int &,int &>(a1 + 16, v19, a2, a3, a4, a5, a6);
  long long v20 = &v19[1].__r_.__value_.__s.__data_[16];
  std::vector<quasar::DerivedEnumerator::Token>::__swap_out_circular_buffer(a1, &v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)&v18);
  return v16;
}

void sub_1B1F335E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::DerivedEnumerator::Token>::construct[abi:ne180100]<quasar::DerivedEnumerator::Token,std::string const&,quasar::DerivedEnumerator::TokenType &,int &,int &,int &>(int a1, std::string *this, long long *a3, int *a4, int *a5, int *a6, int *a7)
{
  int v8 = *a4;
  int v9 = *a5;
  int v10 = *a6;
  int v11 = *a7;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v12 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v12;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = v8;
  HIDWORD(this[1].__r_.__value_.__r.__words[0]) = v9;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = v10;
  HIDWORD(this[1].__r_.__value_.__r.__words[1]) = v11;
}

uint64_t std::vector<quasar::DerivedEnumerator::Token>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::DerivedEnumerator::Token>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::DerivedEnumerator::Token>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 40) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DerivedEnumerator::Token>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DerivedEnumerator::Token>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

std::string *std::vector<quasar::DerivedEnumerator::Token>::__init_with_size[abi:ne180100]<quasar::DerivedEnumerator::Token*,quasar::DerivedEnumerator::Token*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DerivedEnumerator::Token>,quasar::DerivedEnumerator::Token*,quasar::DerivedEnumerator::Token*,quasar::DerivedEnumerator::Token*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1F33830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DerivedEnumerator::Token>,quasar::DerivedEnumerator::Token*,quasar::DerivedEnumerator::Token*,quasar::DerivedEnumerator::Token*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  char v12 = this;
  long long v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        long long v8 = v4;
      }
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = *(long long *)((char *)v6 + 24);
      uint64_t v6 = (long long *)((char *)v6 + 40);
      unint64_t v4 = (std::string *)((char *)v8 + 40);
      long long v13 = (std::string *)((char *)v8 + 40);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DerivedEnumerator::Token>,quasar::DerivedEnumerator::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1B1F33908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DerivedEnumerator::Token>,quasar::DerivedEnumerator::Token*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

__n128 std::vector<quasar::DerivedEnumerator::Token>::__construct_one_at_end[abi:ne180100]<quasar::DerivedEnumerator::Token const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(__n128 *)(v4 + 24) = result;
  *(void *)(a1 + 8) = v4 + 40;
  return result;
}

void sub_1B1F339BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::DerivedEnumerator::Token>::__push_back_slow_path<quasar::DerivedEnumerator::Token const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v11 = (std::string *)&v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  int v17 = &v10[40 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    char v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_OWORD *)&v10[40 * v4 + 24] = *(long long *)((char *)a2 + 24);
  uint64_t v16 = (std::string *)((char *)v11 + 40);
  std::vector<quasar::DerivedEnumerator::Token>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1F33AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::DerivedEnumerator::Token *std::vector<quasar::DerivedEnumerator::Token>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  __n128 result = (quasar::DerivedEnumerator::Token *)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (quasar::DerivedEnumerator::Token *)*((void *)result - 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = (quasar::DerivedEnumerator::Token *)((char *)v7 + 40 * a2);
      uint64_t v14 = 40 * a2;
      do
      {
        __n128 result = quasar::DerivedEnumerator::Token::Token(v7);
        uint64_t v7 = (quasar::DerivedEnumerator::Token *)((char *)v7 + 40);
        v14 -= 40;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    long long v22 = result;
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)result, v11);
    }
    else {
      long long v12 = 0;
    }
    uint64_t v15 = (quasar::DerivedEnumerator::Token *)&v12[40 * v8];
    v19[0] = v12;
    v19[1] = v15;
    long long v20 = v15;
    long long v21 = &v12[40 * v11];
    uint64_t v16 = 5 * a2;
    int v17 = (quasar::DerivedEnumerator::Token *)((char *)v15 + 40 * a2);
    uint64_t v18 = 8 * v16;
    do
    {
      quasar::DerivedEnumerator::Token::Token(v15);
      uint64_t v15 = (quasar::DerivedEnumerator::Token *)((char *)v15 + 40);
      v18 -= 40;
    }
    while (v18);
    long long v20 = v17;
    std::vector<quasar::DerivedEnumerator::Token>::__swap_out_circular_buffer(a1, v19);
    return (quasar::DerivedEnumerator::Token *)std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_1B1F33C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::DerivedEnumerator::Token *quasar::DerivedEnumerator::Token::Token(quasar::DerivedEnumerator::Token *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (SHIBYTE(v5) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v2 = SHIBYTE(v5);
    *(_OWORD *)((char *)this + 24) = xmmword_1B2581C40;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)this = *(_OWORD *)__p;
    *((void *)this + 2) = v5;
    *(_OWORD *)((char *)this + 24) = xmmword_1B2581C40;
  }
  return this;
}

void sub_1B1F33CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::LmeDataFactoryBase::Word>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::LmeDataFactoryBase::Word>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1 + 80, *(char **)(a1 + 88));
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::LmeDataFactoryBase::Word>>(uint64_t **a1, const void **a2, long long *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x88uLL);
    v9[1] = a1 + 1;
    std::pair<std::string const,quasar::LmeDataFactoryBase::Word>::pair[abi:ne180100]<std::string,quasar::LmeDataFactoryBase::Word,0>((uint64_t)(v6 + 4), a3);
    char v10 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::pair<std::string const,quasar::LmeDataFactoryBase::Word>::pair[abi:ne180100]<std::string,quasar::LmeDataFactoryBase::Word,0>(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)__n128 result = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(result + 40) = *((void *)a2 + 5);
  *(_OWORD *)(result + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v4 = a2[3];
  *(void *)(result + 64) = *((void *)a2 + 8);
  *(_OWORD *)(result + 48) = v4;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  *(_DWORD *)(result + 72) = *((_DWORD *)a2 + 18);
  *(void *)(result + 80) = *((void *)a2 + 10);
  uint64_t v5 = (void *)a2 + 11;
  uint64_t v6 = *((void *)a2 + 11);
  *(void *)(result + 88) = v6;
  uint64_t v7 = result + 88;
  uint64_t v8 = *((void *)a2 + 12);
  *(void *)(result + 96) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *((void *)a2 + 10) = v5;
    *uint64_t v5 = 0;
    *((void *)a2 + 12) = 0;
  }
  else
  {
    *(void *)(result + 80) = v7;
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::LmeDataFactoryBase::Word>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *quasar::joinToStream<std::initializer_list<std::string>>(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a2[1];
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t v6 = *a2;
    uint64_t v7 = 24 * v3;
    char v8 = 1;
    do
    {
      if ((v8 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, *a3, a3[1]);
      }
      int v9 = *(char *)(v6 + 23);
      if (v9 >= 0) {
        uint64_t v10 = v6;
      }
      else {
        uint64_t v10 = *(void *)v6;
      }
      if (v9 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        uint64_t v11 = *(void *)(v6 + 8);
      }
      __n128 result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v10, v11);
      char v8 = 0;
      v6 += 24;
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

uint64_t *std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_impl<std::initializer_list<std::string>>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__construct_node<std::initializer_list<std::string>>((uint64_t)a1, a2, (uint64_t)&__p);
  uint64_t v3 = (uint64_t **)std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__find_equal<std::vector<std::string>>((uint64_t)a1, &v7, (void *)__p + 4);
  long long v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = (void **)__p;
    std::string __p = 0;
    if (v5) {
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::vector<std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&v9, v5);
    }
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v7, v3, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v4;
}

void sub_1B1F34084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::vector<std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__construct_node<std::initializer_list<std::string>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::allocator<std::__tree_node<std::vector<std::string>,void *>>::construct[abi:ne180100]<std::vector<std::string>,std::initializer_list<std::string>>(v5, (uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1F34114(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::vector<std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::allocator<std::__tree_node<std::vector<std::string>,void *>>::construct[abi:ne180100]<std::vector<std::string>,std::initializer_list<std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(long long **)a3;
  unint64_t v4 = *(void *)(a3 + 8);
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = a2 + 16;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (v4)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a2, v4);
    *(void *)(a2 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v5, v3, (long long *)((char *)v3 + 24 * v4), *(std::string **)(a2 + 8));
  }
}

void sub_1B1F341A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t TEnvManager::TEnvManager(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A336E8;
  *(void *)(a1 + 8) = a3;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "");
  *(void *)a1 = &unk_1F0A33080;
  *(_OWORD *)(a1 + 48) = *a2;
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

uint64_t TEnvManager::open(uint64_t this, uint64_t a2)
{
  if (!*(unsigned char *)(this + 40))
  {
    tknPrintf("Error: loading from file is not supported.\n", a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v6, (long long *)__p);
    v6[0].__vftable = (std::exception_vtbl *)&unk_1F0A33758;
    if (v7 >= 0) {
      long long v2 = (std::exception_vtbl *)&v6[1];
    }
    else {
      long long v2 = v6[1].__vftable;
    }
    conditionalAssert((const char *)v2, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/envmgr.cpp", 47);
    TException::~TException(v6);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "");
    TException::TException(exception, (long long *)v6);
    void *exception = &unk_1F0A33758;
  }
  return this;
}

void sub_1B1F3436C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void *TEnvManager::getVar(TEnvManager *this, const char *a2, char *a3, unint64_t a4)
{
  if (((*(uint64_t (**)(TEnvManager *))(*(void *)this + 32))(this) & 1) == 0) {
    (*(void (**)(TEnvManager *))(*(void *)this + 16))(this);
  }
  return SDEnv_GetData((uint64_t)this + 48, a2, a3, a4);
}

void TEnvManager::~TEnvManager(void **this)
{
  *this = &unk_1F0A336E8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A336E8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1B3EA8670);
}

{
  *this = &unk_1F0A33080;
  off_1F0A33098((TEnvManager *)this);
  *this = &unk_1F0A336E8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

uint64_t TEnvManager::isOpen(TEnvManager *this)
{
  return *((unsigned __int8 *)this + 40);
}

void TIOException::~TIOException(std::exception *this)
{
  TException::~TException(this);
  JUMPOUT(0x1B3EA8670);
}

void MBRDecoder::MBRDecoder(uint64_t a1, int a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)a1 = a2;
  operator new();
}

void sub_1B1F34CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  MEMORY[0x1B3EA8670](v22, 0xA1C40BD48D6D6);
  long long v28 = *v26;
  if (*v26)
  {
    v21[21] = v28;
    operator delete(v28);
  }
  long long v29 = *v25;
  if (*v25)
  {
    v21[18] = v29;
    operator delete(v29);
  }
  long long v30 = *v24;
  if (*v24)
  {
    v21[15] = v30;
    operator delete(v30);
  }
  long long v31 = *v23;
  if (*v23)
  {
    v21[12] = v31;
    operator delete(v31);
  }
  std::string __p = a10;
  std::vector<std::set<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long v32 = *a11;
  if (*a11)
  {
    v21[3] = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void fst::Relabel<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  fst::Relabel<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, v6, a2, 1, v7, a3, 1);
}

void MBRDecoder::_alpha_normalize(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(*(void *)(a2 + 8) + 72) - *(void *)(*(void *)(a2 + 8) + 64);
  if ((int)(v4 >> 3) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (v4 >> 3);
    do
    {
      uint64_t v15 = &unk_1F0A3E830;
      unint64_t v18 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a2);
      uint64_t v7 = *(void *)(a2 + 8);
      uint64_t v8 = *(void *)(*(void *)(v7 + 64) + 8 * v5);
      uint64_t v16 = v8;
      uint64_t v17 = v7 + 8;
      for (unint64_t i = v18; ; unint64_t i = ++v18)
      {
        uint64_t v11 = v8 + 24;
        uint64_t v10 = *(void *)(v8 + 24);
        if (i >= (*(void *)(v11 + 8) - v10) >> 4) {
          break;
        }
        __n128 v14 = *(__n128 *)(v10 + 16 * i);
        v14.n128_f32[2] = v14.n128_f32[2] * *(float *)(a1 + 12);
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v15, &v14);
        uint64_t v8 = v16;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::ReweightType)1>(a2, *(void *)(a1 + 48), 1);
  uint64_t v12 = (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 72)
       - *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 64)) >> 3;
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      LODWORD(v15) = (*(float (**)(void, uint64_t))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v13);
      v14.n128_u32[0] = 2139095040;
      if (*(float *)&v15 != INFINITY) {
        (*(void (**)(void, uint64_t, double))(**(void **)(a1 + 48) + 184))(*(void *)(a1 + 48), v13, 0.0);
      }
      uint64_t v13 = (v13 + 1);
    }
    while (v12 != v13);
  }
}

void std::vector<std::set<std::vector<int>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::set<std::vector<int>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        uint64_t v8 = v3 - 24;
        std::__tree<std::vector<int>>::destroy(v3 - 24, *(void **)(v3 - 16));
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void MBRDecoder::build_decoder(MBRDecoder *this)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = *((void *)this + 7);
  char v4 = 0;
  fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::WeightConvertMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v2, v3);
  MBRDecoder::count_ngrams();
}

void sub_1B1F351B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MBRDecoder::count_ngrams()
{
}

void sub_1B1F359EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void MBRDecoder::extract_ngrams(unsigned int *a1, int a2, const void **a3)
{
  uint64_t v6 = (uint64_t)a3[1];
  uint64_t v7 = (char *)*a3;
  unint64_t v8 = v6 - (void)*a3;
  if ((const void *)v6 == *a3)
  {
    uint64_t v7 = (char *)v6;
  }
  else if ((v8 & 0x200000000) == 0)
  {
    unint64_t v9 = (v8 >> 2);
    unsigned int v10 = (v8 >> 2) + 1;
    do
    {
      unint64_t v11 = (v6 - (uint64_t)v7) >> 2;
      if (v11 > v9)
      {
        unsigned int v12 = v10;
        unint64_t v13 = v9;
        do
        {
          __n128 v14 = (uint64_t **)(*((void *)a1 + 8) + 24 * (v11 + ~v13));
          std::string __p = 0;
          long long v39 = 0;
          long long v40 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&__p, &v7[4 * v13], v6, (v6 - (uint64_t)&v7[4 * v13]) >> 2);
          std::__tree<std::vector<int>>::__emplace_unique_key_args<std::vector<int>,std::vector<int>>(v14, (int **)&__p, (uint64_t)&__p);
          if (__p)
          {
            long long v39 = (char *)__p;
            operator delete(__p);
          }
          unint64_t v13 = v12;
          uint64_t v7 = (char *)*a3;
          uint64_t v6 = (uint64_t)a3[1];
          unint64_t v11 = (v6 - (uint64_t)*a3) >> 2;
          BOOL v15 = v11 > v12++;
        }
        while (v15);
      }
      --v10;
      BOOL v15 = (uint64_t)v9-- <= 0;
    }
    while (!v15);
  }
  if (*a1 <= (unint64_t)((v6 - (uint64_t)v7) >> 2))
  {
    uint64_t v16 = v6 - (void)(v7 + 4);
    if ((char *)v6 != v7 + 4) {
      memmove(v7, v7 + 4, v6 - (void)(v7 + 4));
    }
    a3[1] = &v7[v16];
  }
  uint64_t v17 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 7) + 8) + 64) + 8 * a2);
  uint64_t v19 = *(void *)(v17 + 24);
  uint64_t v18 = *(void *)(v17 + 32);
  if (v18 == v19) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(v17 + 24);
  }
  if (v18 != v19)
  {
    uint64_t v21 = 0;
    if ((unint64_t)((v18 - v19) >> 4) <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = (v18 - v19) >> 4;
    }
    do
    {
      long long v23 = (_DWORD *)(v20 + 16 * v21);
      std::string __p = 0;
      long long v39 = 0;
      long long v40 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *a3, (uint64_t)a3[1], ((unsigned char *)a3[1] - (unsigned char *)*a3) >> 2);
      long long v24 = v39;
      if (v39 >= v40)
      {
        long long v26 = (char *)__p;
        uint64_t v27 = (v39 - (unsigned char *)__p) >> 2;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v40 - (unsigned char *)__p;
        if ((v40 - (unsigned char *)__p) >> 1 > v28) {
          unint64_t v28 = v29 >> 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v40, v30);
          long long v26 = (char *)__p;
          long long v24 = v39;
        }
        else
        {
          long long v31 = 0;
        }
        long long v32 = &v31[4 * v27];
        *(_DWORD *)long long v32 = *v23;
        uint64_t v25 = (uint64_t)(v32 + 4);
        while (v24 != v26)
        {
          int v33 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v32 - 1) = v33;
          v32 -= 4;
        }
        std::string __p = v32;
        long long v39 = (char *)v25;
        long long v40 = &v31[4 * v30];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *(_DWORD *)long long v39 = *v23;
        uint64_t v25 = (uint64_t)(v24 + 4);
      }
      long long v39 = (char *)v25;
      uint64_t v34 = *(unsigned int *)(v20 + 16 * v21 + 12);
      long long v36 = 0;
      uint64_t v37 = 0;
      long long v35 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, __p, v25, (v25 - (uint64_t)__p) >> 2);
      MBRDecoder::extract_ngrams(a1, v34, &v35);
      if (v35)
      {
        long long v36 = v35;
        operator delete(v35);
      }
      if (__p)
      {
        long long v39 = (char *)__p;
        operator delete(__p);
      }
      ++v21;
    }
    while (v21 != v22);
  }
}

void sub_1B1F35D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MBRDecoder::build_ngram_cd_fsts(MBRDecoder *this)
{
  unsigned int v29 = 0;
  if (*((void *)this + 9) != *((void *)this + 8))
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*((void *)this + 11) + 8 * v2);
      (*(void (**)(uint64_t))(*(void *)v3 + 200))(v3);
      uint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v29);
      (*(void (**)(uint64_t, void))(*(void *)v4 + 176))(v4, 0);
      unsigned int v5 = 0;
      uint64_t v6 = *((void *)this + 8);
      do
      {
        unsigned int v7 = v5;
        unint64_t v8 = (void *)(v6 + 24 * v5);
        unint64_t v9 = (void *)*v8;
        if ((void *)*v8 != v8 + 1)
        {
          do
          {
            unsigned int v10 = (const void *)v9[4];
            uint64_t v11 = v9[5];
            memset(&v28, 0, sizeof(v28));
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v28, v10, v11, (v11 - (uint64_t)v10) >> 2);
            unsigned int v12 = *(void **)(*((void *)this + 11) + 8 * v29);
            uint64_t v13 = (*(uint64_t (**)(void *))(*v12 + 24))(v12);
            std::string __p = 0;
            long long v26 = 0;
            uint64_t v27 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_, (uint64_t)(v28.__r_.__value_.__l.__size_ - v28.__r_.__value_.__r.__words[0]) >> 2);
            MBRDecoder::add_ngram((uint64_t)this, v12, v13, &__p, v9 + 4, v7 == v29);
            if (__p)
            {
              long long v26 = __p;
              operator delete(__p);
            }
            if (v28.__r_.__value_.__r.__words[0])
            {
              v28.__r_.__value_.__l.__size_ = v28.__r_.__value_.__r.__words[0];
              operator delete(v28.__r_.__value_.__l.__data_);
            }
            __n128 v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                BOOL v15 = v14;
                __n128 v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                BOOL v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                unint64_t v9 = v15;
              }
              while (!v16);
            }
            uint64_t v6 = *((void *)this + 8);
            unint64_t v9 = v15;
          }
          while (v15 != (void *)(v6 + 24 * v7 + 8));
        }
        unsigned int v5 = v7 + 1;
      }
      while (v7 + 1 <= v29);
      MBRDecoder::connect_ngram_cd_fst((uint64_t)this, *(void *)(*((void *)this + 11) + 8 * v29), v29);
      to_string<unsigned int>();
      uint64_t v17 = std::string::insert(&v24, 0, "mapper-cd-");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v28, ".fst");
      uint64_t v20 = (void *)v19->__r_.__value_.__r.__words[0];
      int v21 = SHIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__r.__words[0] = 0;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      uint64_t v22 = *(void *)(*((void *)this + 11) + 8 * v29);
      (*(void (**)(uint64_t, void))(*(void *)v22 + 280))(v22, *((void *)this + 5));
      uint64_t v23 = *(void *)(*((void *)this + 11) + 8 * v29);
      (*(void (**)(uint64_t, void))(*(void *)v23 + 288))(v23, *((void *)this + 5));
      if (v21 < 0) {
        operator delete(v20);
      }
      uint64_t v2 = ++v29;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3) > v29);
  }
}

void sub_1B1F360D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void MBRDecoder::build_right_pathcounters(MBRDecoder *this)
{
  unsigned int v31 = 0;
  if (*((void *)this + 9) != *((void *)this + 8))
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*((void *)this + 14) + 8 * v2);
      (*(void (**)(uint64_t))(*(void *)v3 + 200))(v3);
      uint64_t v4 = *(void *)(*((void *)this + 14) + 8 * v31);
      (*(void (**)(uint64_t, void))(*(void *)v4 + 176))(v4, 0);
      uint64_t v5 = *(void *)(*((void *)this + 14) + 8 * v31);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_1B2581D00;
      (*(void (**)(uint64_t, void, std::string *))(*(void *)v5 + 208))(v5, 0, &__p);
      uint64_t v6 = v31;
      unsigned int v7 = (void *)(*((void *)this + 8) + 24 * v31);
      unint64_t v8 = (void *)*v7;
      if ((void *)*v7 != v7 + 1)
      {
        do
        {
          uint64_t v9 = *(void *)(*((void *)this + 14) + 8 * v6);
          uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 200))(v9);
          uint64_t v11 = *(void *)(*((void *)this + 14) + 8 * v31);
          int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 200))(v11);
          uint64_t v13 = *((void *)this + 5);
          MBRDecoder::_vec_to_string((uint64_t)this, v8 + 4, &__p);
          unsigned int v14 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v13 + 96))(v13, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v15 = *(void *)(*((void *)this + 14) + 8 * v31);
          LODWORD(__p.__r_.__value_.__l.__data_) = v14;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v14;
          HIDWORD(__p.__r_.__value_.__r.__words[1]) = v10;
          (*(void (**)(uint64_t, void, std::string *))(*(void *)v15 + 208))(v15, 0, &__p);
          uint64_t v16 = *(void *)(*((void *)this + 14) + 8 * v31);
          (*(void (**)(uint64_t, uint64_t, double))(*(void *)v16 + 184))(v16, v10, 0.0);
          uint64_t v17 = *(void *)(*((void *)this + 14) + 8 * v31);
          __p.__r_.__value_.__r.__words[0] = 2;
          LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
          HIDWORD(__p.__r_.__value_.__r.__words[1]) = v10;
          (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v17 + 208))(v17, v10, &__p);
          uint64_t v18 = *(void *)(*((void *)this + 14) + 8 * v31);
          __p.__r_.__value_.__r.__words[0] = v14;
          LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
          HIDWORD(__p.__r_.__value_.__r.__words[1]) = v12;
          (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v18 + 208))(v18, v10, &__p);
          uint64_t v19 = (void *)v8[1];
          if (v19)
          {
            do
            {
              uint64_t v20 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v20 = (void *)v8[2];
              BOOL v21 = *v20 == (void)v8;
              unint64_t v8 = v20;
            }
            while (!v21);
          }
          uint64_t v6 = v31;
          unint64_t v8 = v20;
        }
        while (v20 != (void *)(*((void *)this + 8) + 24 * v31 + 8));
      }
      to_string<unsigned int>();
      uint64_t v22 = std::string::insert(&v29, 0, "rpathcounter-");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string v24 = std::string::append(&__p, ".fst");
      uint64_t v25 = (void *)v24->__r_.__value_.__r.__words[0];
      int v26 = SHIBYTE(v24->__r_.__value_.__r.__words[2]);
      v24->__r_.__value_.__r.__words[0] = 0;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      uint64_t v27 = *(void *)(*((void *)this + 14) + 8 * v31);
      (*(void (**)(uint64_t, void))(*(void *)v27 + 280))(v27, *((void *)this + 5));
      uint64_t v28 = *(void *)(*((void *)this + 14) + 8 * v31);
      (*(void (**)(uint64_t, void))(*(void *)v28 + 288))(v28, *((void *)this + 5));
      if (v26 < 0) {
        operator delete(v25);
      }
      uint64_t v2 = ++v31;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3) > v31);
  }
}

void sub_1B1F365A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MBRDecoder::build_decoders(MBRDecoder *this)
{
  fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(*((void **)this + 6));
  (*(void (**)(void, void))(**((void **)this + 6) + 280))(*((void *)this + 6), *((void *)this + 5));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 6) + 288))();
  int v9 = 0;
  if (*(int *)this >= 1)
  {
    fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(**((void ***)this + 11));
    (*(void (**)(void))(**(void **)(*((void *)this + 11) + 8 * v9) + 280))();
    (*(void (**)(void))(**(void **)(*((void *)this + 11) + 8 * v9) + 288))();
    uint64_t v3 = *(void *)(*((void *)this + 11) + 8 * v9);
    uint64_t v4 = *((void *)this + 6);
    uint64_t v5 = *(void *)(*((void *)this + 17) + 8 * v9);
    v8.__r_.__value_.__s.__data_[0] = 1;
    HIDWORD(v8.__r_.__value_.__r.__words[0]) = 0;
    fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(v4, v3, v5, (uint64_t)&v8);
    uint64_t v6 = *(void *)(*((void *)this + 17) + 8 * v9);
    LODWORD(v8.__r_.__value_.__l.__data_) = 2;
    fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(v6, &v8);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 280))(v6, v7);
    fst::RmEpsilon<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(*(void *)(*((void *)this + 17) + 8 * v9));
  }
  return result;
}

void sub_1B1F3699C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void MBRDecoder::decode(MBRDecoder *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  unint64_t v3 = *(void *)(v2[1] + 72) - *(void *)(v2[1] + 64);
  if ((int)(v3 >> 3) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (v3 >> 3);
    do
    {
      uint64_t v6 = *((void *)this + 6);
      int v26 = &unk_1F0A3E830;
      unint64_t v29 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(v6);
      uint64_t v7 = *(void *)(v6 + 8);
      uint64_t v8 = *(void *)(*(void *)(v7 + 64) + 8 * v4);
      uint64_t v27 = v8;
      uint64_t v28 = v7 + 8;
      for (unint64_t i = v29; ; unint64_t i = ++v29)
      {
        uint64_t v11 = v8 + 24;
        uint64_t v10 = *(void *)(v8 + 24);
        if (i >= (*(void *)(v11 + 8) - v10) >> 4) {
          break;
        }
        __n128 v25 = *(__n128 *)(v10 + 16 * i);
        v25.n128_u32[2] = **((_DWORD **)this + 2);
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v26, &v25);
        uint64_t v8 = v27;
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(v2);
  uint64_t v12 = *((void *)this + 6);
  uint64_t v13 = **((void **)this + 11);
  uint64_t v14 = **((void **)this + 20);
  LOBYTE(v26) = 1;
  HIDWORD(v26) = 0;
  fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(v12, v13, v14, (uint64_t)&v26);
  uint64_t v15 = **((void **)this + 20);
  LODWORD(v26) = 1;
  fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(v15, &v26);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 112))(v15);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 288))(v15, v16);
  fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(**((void ***)this + 20));
  if (*(int *)this > 1)
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = (uint64_t *)(*((void *)this + 20) + 8 * v17);
      uint64_t v19 = *(void *)(*((void *)this + 11) + 8 * v17 + 8);
      uint64_t v20 = *v18;
      uint64_t v21 = v18[1];
      LOBYTE(v26) = 1;
      HIDWORD(v26) = 0;
      fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(v20, v19, v21, (uint64_t)&v26);
      uint64_t v22 = *(void *)(*((void *)this + 20) + 8 * v17 + 8);
      LODWORD(v26) = 1;
      fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(v22, &v26);
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 112))(v22);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 288))(v22, v23);
      fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(*(void **)(*((void *)this + 20) + 8 * v17 + 8));
      uint64_t v24 = v17 + 2;
      ++v17;
    }
    while (v24 < *(int *)this);
  }
}

void fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(void *a1)
{
  v1[0] = a1;
  v1[1] = &v4;
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>((uint64_t)a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1F36CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(*(_DWORD *)(a4 + 4))
  {
    case 0:
      fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase(result, a2);
    case 1:
      fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    case 2:
      fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    case 3:
      fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    case 4:
      fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    default:
      if (*(unsigned char *)a4) {
        fst::Connect<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a3);
      }
      return result;
  }
}

void sub_1B1F36FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::ReweightType)1>(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 3) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, a1);
    fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a2, 1);
  }
  if ((a3 & 2) != 0)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorFst();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
  uint64_t v5 = fst::LogMessage::LogMessage((fst *)v9, (uint64_t)__p);
  uint64_t v6 = (void *)fst::cerr(v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Push: pushing type is set to 0: ", 32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"pushing neither labels nor weights.", 35);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, a1);
}

void sub_1B1F373A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ImplToFst(&a19);
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ImplToFst(&__p);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ImplToFst((void *)(v29 - 128));
  std::string __p = (void *)(v29 - 112);
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1B1F3745C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  fst::LogMessage::~LogMessage((fst::LogMessage *)va);
  JUMPOUT(0x1B1F37468);
}

void fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(void *a1)
{
  v1[0] = a1;
  v1[1] = &v4;
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>((uint64_t)a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1F374CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::RmEpsilon<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>((uint64_t)v1, a1);
}

void sub_1B1F37594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  uint64_t v7 = *(void **)(v5 - 72);
  if (v7)
  {
    *(void *)(v5 - 64) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t to_string<int>()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E4FBA408];
  uint64_t v0 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E4FBA470] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v4);
}

void sub_1B1F37730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void MBRDecoder::countPaths(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = a4;
  operator new();
}

void sub_1B1F37E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  if (v39 < 0) {
    operator delete(v38);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a38) {
    free(a38);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ImplToFst((void *)(v40 - 144));
  _Unwind_Resume(a1);
}

void fst::TopSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>>()
{
}

void sub_1B1F37FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MBRDecoder::_vec_to_string(uint64_t a1@<X0>, void *a2@<X1>, std::string *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a3, "");
  if (a2[1] != *a2)
  {
    unsigned int v6 = 1;
    do
    {
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 88))(__p);
      if ((v11 & 0x80u) == 0) {
        uint64_t v7 = __p;
      }
      else {
        uint64_t v7 = (void **)__p[0];
      }
      if ((v11 & 0x80u) == 0) {
        std::string::size_type v8 = v11;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)__p[1];
      }
      std::string::append(a3, (const std::string::value_type *)v7, v8);
      if ((char)v11 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v9 = v6++;
    }
    while (v9 < (uint64_t)(a2[1] - *a2) >> 2);
  }
}

void sub_1B1F380CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t to_string<unsigned int>()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E4FBA408];
  uint64_t v0 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E4FBA470] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v4);
}

void sub_1B1F38270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void MBRDecoder::add_ngram(uint64_t a1, void *a2, uint64_t a3, void **a4, void *a5, uint64_t a6)
{
  if (a4[1] != *a4)
  {
    uint64_t v9 = a3;
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a2[1] + 64) + 8 * (int)a3) + 32)
        - *(void *)(*(void *)(*(void *)(a2[1] + 64) + 8 * (int)a3) + 24);
    uint64_t v13 = v12 ? *(_DWORD **)(*(void *)(*(void *)(a2[1] + 64) + 8 * (int)a3) + 24) : 0;
    if (!v12) {
      goto LABEL_17;
    }
    unsigned int v34 = a3;
    char v14 = 0;
    unint64_t v15 = v12 >> 4;
    uint64_t v16 = v15 <= 1 ? 1 : v15;
    do
    {
      uint64_t v17 = (char *)*a4;
      if (*v13 == *(_DWORD *)*a4)
      {
        uint64_t v18 = v13[3];
        uint64_t v19 = (char *)a4[1];
        int64_t v20 = v19 - (v17 + 4);
        if (v19 != v17 + 4) {
          memmove(*a4, v17 + 4, v19 - (v17 + 4));
        }
        uint64_t v21 = *a4;
        a4[1] = &v17[v20];
        long long v41 = 0;
        uint64_t v42 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v21, (uint64_t)&v17[v20], (&v17[v20] - (unsigned char *)v21) >> 2);
        MBRDecoder::add_ngram(a1, a2, v18, &__p, a5, a6);
        if (__p)
        {
          long long v41 = __p;
          operator delete(__p);
        }
        char v14 = 1;
      }
      v13 += 4;
      --v16;
    }
    while (v16);
    uint64_t v9 = v34;
    if ((v14 & 1) == 0)
    {
LABEL_17:
      uint64_t v22 = (*(uint64_t (**)(void *))(*a2 + 200))(a2);
      uint64_t v23 = v22;
      uint64_t v24 = (unsigned int *)*a4;
      unint64_t v25 = (unsigned char *)a4[1] - (unsigned char *)*a4;
      if (v25 == 4)
      {
        if (a6)
        {
          int v26 = *v24;
          uint64_t v27 = *(void *)(a1 + 40);
          MBRDecoder::_vec_to_string(a1, a5, &v38);
          int v28 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v27 + 32))(v27, &v38);
          v39[0] = v26;
          v39[1] = v28;
          v39[2] = 0;
          v39[3] = v23;
          (*(void (**)(void *, uint64_t, _DWORD *))(*a2 + 208))(a2, v9, v39);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          v38.__r_.__value_.__r.__words[0] = *v24;
          LODWORD(v38.__r_.__value_.__r.__words[1]) = 0;
          HIDWORD(v38.__r_.__value_.__r.__words[1]) = v22;
          (*(void (**)(void *, uint64_t, std::string *))(*a2 + 208))(a2, v9, &v38);
        }
        (*(void (**)(void *, uint64_t, double))(*a2 + 184))(a2, v23, 0.0);
      }
      else if (v25 >= 5)
      {
        v38.__r_.__value_.__r.__words[0] = *v24;
        LODWORD(v38.__r_.__value_.__r.__words[1]) = 0;
        HIDWORD(v38.__r_.__value_.__r.__words[1]) = v22;
        (*(void (**)(void *, uint64_t, std::string *))(*a2 + 208))(a2, v9, &v38);
        (*(void (**)(void *, uint64_t, double))(*a2 + 184))(a2, v23, 0.0);
        unint64_t v30 = *a4;
        uint64_t v29 = (unsigned int *)a4[1];
        unsigned int v31 = (unsigned int *)((char *)*a4 + 4);
        int64_t v32 = (char *)v29 - (char *)v31;
        if (v29 != v31) {
          memmove(*a4, v31, (char *)v29 - (char *)v31);
        }
        int v33 = *a4;
        a4[1] = &v30[v32];
        long long v36 = 0;
        uint64_t v37 = 0;
        long long v35 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, v33, (uint64_t)&v30[v32], (&v30[v32] - (unsigned char *)v33) >> 2);
        MBRDecoder::add_ngram(a1, a2, v23, &v35, a5, a6);
        if (v35)
        {
          long long v36 = v35;
          operator delete(v35);
        }
      }
    }
  }
}

void sub_1B1F385E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MBRDecoder::connect_ngram_cd_fst(uint64_t a1, unint64_t a2, int a3)
{
  char v3 = (void *)(*(void *)(a1 + 64) + 24 * a3);
  uint64_t v4 = (void *)*v3;
  if ((void *)*v3 != v3 + 1)
  {
    do
    {
      uint64_t v51 = 0;
      std::string v52 = 0;
      unint64_t v53 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, (const void *)v4[4], v4[5], (uint64_t)(v4[5] - v4[4]) >> 2);
      int v7 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 24))(a2);
      std::string __p = 0;
      long long v49 = 0;
      uint64_t v50 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v51, (uint64_t)v52, (v52 - v51) >> 2);
      MBRDecoder::_get_arc(a1, a2, v7, (uint64_t)&__p);
      unint64_t v9 = v8;
      if (__p)
      {
        long long v49 = __p;
        operator delete(__p);
      }
      uint64_t v10 = v51;
      int64_t v11 = v52 - (v51 + 4);
      if (v52 != v51 + 4) {
        memmove(v51, v51 + 4, v52 - (v51 + 4));
      }
      std::string v52 = &v10[v11];
      uint64_t v12 = *(void **)(a1 + 64);
      uint64_t v13 = (void *)*v12;
      if ((void *)*v12 != v12 + 1)
      {
        unint64_t v14 = HIDWORD(v9);
        do
        {
          MBRDecoder::_vec_to_string(a1, &v51, &v45);
          if (v13[5] == v13[4]) {
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          }
          (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 88))(v43);
          if ((v44 & 0x80u) == 0) {
            unint64_t v15 = v43;
          }
          else {
            unint64_t v15 = (void **)v43[0];
          }
          if ((v44 & 0x80u) == 0) {
            std::string::size_type v16 = v44;
          }
          else {
            std::string::size_type v16 = (std::string::size_type)v43[1];
          }
          uint64_t v17 = std::string::append(&v45, (const std::string::value_type *)v15, v16);
          long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          std::string::size_type v47 = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long v46 = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          if ((char)v44 < 0) {
            operator delete(v43[0]);
          }
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v45.__r_.__value_.__l.__data_);
          }
          if ((*(uint64_t (**)(void, void **))(**(void **)(a1 + 40) + 96))(*(void *)(a1 + 40), v46) != -1)
          {
            uint64_t v19 = (_DWORD *)v13[4];
            if ((_DWORD *)v13[5] == v19) {
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            }
            int64_t v20 = v52;
            if ((unint64_t)v52 >= v53)
            {
              uint64_t v22 = v51;
              uint64_t v23 = (v52 - v51) >> 2;
              unint64_t v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v25 = v53 - (void)v51;
              if ((uint64_t)(v53 - (void)v51) >> 1 > v24) {
                unint64_t v24 = v25 >> 1;
              }
              if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v26 = v24;
              }
              if (v26)
              {
                uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v53, v26);
                uint64_t v22 = v51;
                int64_t v20 = v52;
              }
              else
              {
                uint64_t v27 = 0;
              }
              int v28 = &v27[4 * v23];
              *(_DWORD *)int v28 = *v19;
              uint64_t v21 = v28 + 4;
              while (v20 != v22)
              {
                int v29 = *((_DWORD *)v20 - 1);
                v20 -= 4;
                *((_DWORD *)v28 - 1) = v29;
                v28 -= 4;
              }
              uint64_t v51 = v28;
              std::string v52 = v21;
              unint64_t v53 = (unint64_t)&v27[4 * v26];
              if (v22) {
                operator delete(v22);
              }
            }
            else
            {
              *(_DWORD *)std::string v52 = *v19;
              uint64_t v21 = v20 + 4;
            }
            std::string v52 = v21;
            int v30 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 24))(a2);
            uint64_t v40 = 0;
            long long v41 = 0;
            uint64_t v42 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v40, v51, (uint64_t)v52, (v52 - v51) >> 2);
            unint64_t arc = MBRDecoder::_get_arc(a1, a2, v30, (uint64_t)&v40);
            uint64_t v33 = v32;
            if (v40)
            {
              long long v41 = v40;
              operator delete(v40);
            }
            LODWORD(v45.__r_.__value_.__l.__data_) = v33;
            LODWORD(v43[0]) = 2139095040;
            if (*(float *)&v33 != INFINITY)
            {
              v45.__r_.__value_.__r.__words[0] = arc;
              LODWORD(v45.__r_.__value_.__r.__words[1]) = 0;
              HIDWORD(v45.__r_.__value_.__r.__words[1]) = HIDWORD(v33);
              (*(void (**)(unint64_t, unint64_t, std::string *, float))(*(void *)a2 + 208))(a2, v14, &v45, *(float *)&v33);
            }
            v52 -= 4;
          }
          if (SHIBYTE(v47) < 0) {
            operator delete(v46[0]);
          }
          unsigned int v34 = (void *)v13[1];
          if (v34)
          {
            do
            {
              long long v35 = v34;
              unsigned int v34 = (void *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              long long v35 = (void *)v13[2];
              BOOL v36 = *v35 == (void)v13;
              uint64_t v13 = v35;
            }
            while (!v36);
          }
          uint64_t v13 = v35;
        }
        while (v35 != (void *)(*(void *)(a1 + 64) + 8));
      }
      if (v51)
      {
        std::string v52 = v51;
        operator delete(v51);
      }
      uint64_t v37 = (void *)v4[1];
      if (v37)
      {
        do
        {
          std::string v38 = v37;
          uint64_t v37 = (void *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          std::string v38 = (void *)v4[2];
          BOOL v36 = *v38 == (void)v4;
          uint64_t v4 = v38;
        }
        while (!v36);
      }
      uint64_t v4 = v38;
    }
    while (v38 != (void *)(*(void *)(a1 + 64) + 24 * a3 + 8));
  }
}

void sub_1B1F38AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  unsigned int v34 = *(void **)(v32 - 112);
  if (v34)
  {
    *(void *)(v32 - 104) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

unint64_t MBRDecoder::_get_arc(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4 = a2;
  unsigned int v6 = *(_DWORD **)a4;
  uint64_t v5 = *(char **)(a4 + 8);
  unint64_t v7 = (unint64_t)&v5[-*(void *)a4];
  if (v7 == 4)
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a2 + 8) + 64) + 8 * a3);
    uint64_t v10 = *(void *)(v8 + 24);
    uint64_t v9 = *(void *)(v8 + 32);
    uint64_t v12 = v9 - v10;
    BOOL v11 = v9 == v10;
    if (v9 == v10) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v10;
    }
    if (!v11)
    {
      uint64_t v14 = v12 >> 4;
      if ((unint64_t)(v12 >> 4) <= 1) {
        uint64_t v14 = 1;
      }
      uint64_t v15 = v13 + 8;
      while (1)
      {
        unint64_t v4 = *(void *)(v15 - 8);
        if (*v6 == v4) {
          break;
        }
        v15 += 16;
        if (!--v14) {
          goto LABEL_18;
        }
      }
      unint64_t v21 = HIDWORD(v4);
      return v4 | ((unint64_t)v21 << 32);
    }
LABEL_18:
    LODWORD(v4) = 0;
    LODWORD(v21) = 0;
    return v4 | ((unint64_t)v21 << 32);
  }
  if (v7 < 5) {
    goto LABEL_18;
  }
  std::string::size_type v16 = *(_DWORD **)(*(void *)(*(void *)(*(void *)(a2 + 8) + 64) + 8 * a3) + 24);
  uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 64) + 8 * a3) + 32) - (void)v16;
  if (!v17) {
    goto LABEL_18;
  }
  uint64_t v20 = v17 >> 4;
  if ((unint64_t)(v17 >> 4) <= 1) {
    uint64_t v20 = 1;
  }
  while (*v16 != *v6)
  {
    v16 += 4;
    if (!--v20) {
      goto LABEL_18;
    }
  }
  uint64_t v23 = v16[3];
  int64_t v24 = v5 - (char *)(v6 + 1);
  if (v5 == (char *)(v6 + 1))
  {
    uint64_t v25 = *(_DWORD **)a4;
  }
  else
  {
    memmove(*(void **)a4, v6 + 1, v5 - (char *)(v6 + 1));
    uint64_t v25 = *(_DWORD **)a4;
  }
  *(void *)(a4 + 8) = (char *)v6 + v24;
  int v28 = 0;
  uint64_t v29 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v25, (uint64_t)v6 + v24, ((char *)v6 + v24 - (char *)v25) >> 2);
  unint64_t arc = MBRDecoder::_get_arc(a1, v4, v23, &__p);
  LODWORD(v4) = arc;
  unint64_t v21 = HIDWORD(arc);
  if (__p)
  {
    int v28 = __p;
    operator delete(__p);
  }
  return v4 | ((unint64_t)v21 << 32);
}

void sub_1B1F38CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, v6, a2, 1, v7, a3, 1);
}

void fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)v1, a1);
}

void sub_1B1F38E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  uint64_t v7 = *(void **)(v5 - 72);
  if (v7)
  {
    *(void *)(v5 - 64) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::Minimize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x300010000, 1);
  if ((v2 & 0x10000) == 0) {
    fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFst();
  }
  if ((v2 & 0x100000000) != 0) {
    fst::Push<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, 0);
  }
  return fst::AcceptorMinimize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1);
}

void sub_1B1F39464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~EncodeMapper((uint64_t)va);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst((void *)(v11 - 72));
  _Unwind_Resume(a1);
}

void fst::SymbolTable::SymbolTable(void *a1)
{
  *a1 = &unk_1F0A382C8;
  operator new();
}

void sub_1B1F3955C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

void *fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43CB8;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(uint64_t *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    float v4 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 72))(a1, a2);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(a1[15], a2);
    *(float *)MutableState = v4;
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  uint64_t v6 = a1[15];
  if (*(_DWORD *)(v6 + 76) == a2) {
    uint64_t v7 = v6 + 80;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 8) + 8 * ((int)a2 + 1);
  }
  return **(float **)v7;
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A44B38;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    float v4 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 64))(a1, a2);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(a1[15], a2);
    *(float *)MutableState = v4;
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  uint64_t v6 = a1[15];
  if (*(_DWORD *)(v6 + 76) == a2) {
    uint64_t v7 = v6 + 80;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 8) + 8 * ((int)a2 + 1);
  }
  return **(float **)v7;
}

uint64_t fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

uint64_t fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void std::vector<std::set<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        std::__tree<std::vector<int>>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::vector<int>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::vector<int>>::destroy(a1, *a2);
    std::__tree<std::vector<int>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[4];
    if (v4)
    {
      a2[5] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void fst::Relabel<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v80 = 0;
  v81 = 0;
  v82 = 0;
  if (a2 && a3)
  {
    unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 128))(a2, 0);
    if (v14)
    {
      uint64_t v16 = v15;
      int v68 = a4;
      int v69 = a7;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v70 = a1;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 88))(&v77, a2, v16);
        uint64_t v19 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a3 + 96))(a3, &v77);
        unsigned int v20 = v19;
        if (v19 == -1)
        {
          if (FLAGS_v >= 1)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            unint64_t v21 = fst::LogMessage::LogMessage((fst *)v72, (uint64_t)__p);
            uint64_t v22 = (void *)fst::cerr(v21);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Input symbol id ", 16);
            uint64_t v23 = (void *)std::ostream::operator<<();
            int64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" symbol '", 9);
            uint64_t v25 = SHIBYTE(v79) >= 0 ? &v77 : (void **)v77;
            uint64_t v26 = SHIBYTE(v79) >= 0 ? HIBYTE(v79) : (uint64_t)v78;
            uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' missing from target symbol table.", 35);
            fst::LogMessage::~LogMessage((fst::LogMessage *)v72);
            if ((char)v76 < 0) {
              operator delete(__p[0]);
            }
          }
          ++v17;
        }
        int v28 = v81;
        if (v81 >= v82)
        {
          uint64_t v30 = ((char *)v81 - (unsigned char *)v80) >> 3;
          if ((unint64_t)(v30 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v31 = ((char *)v82 - (unsigned char *)v80) >> 2;
          if (v31 <= v30 + 1) {
            unint64_t v31 = v30 + 1;
          }
          if ((unint64_t)((char *)v82 - (unsigned char *)v80) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v31;
          }
          if (v32) {
            uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v82, v32);
          }
          else {
            uint64_t v33 = 0;
          }
          unsigned int v34 = (unint64_t *)&v33[8 * v30];
          *unsigned int v34 = v16 | ((unint64_t)v20 << 32);
          uint64_t v29 = v34 + 1;
          BOOL v36 = (char *)v80;
          long long v35 = (char *)v81;
          if (v81 != v80)
          {
            do
            {
              unint64_t v37 = *((void *)v35 - 1);
              v35 -= 8;
              *--unsigned int v34 = v37;
            }
            while (v35 != v36);
            long long v35 = (char *)v80;
          }
          uint64_t v80 = v34;
          v81 = v29;
          v82 = (unint64_t *)&v33[8 * v32];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          unint64_t *v81 = v16 | ((unint64_t)v20 << 32);
          uint64_t v29 = v28 + 1;
        }
        v81 = v29;
        if (SHIBYTE(v79) < 0) {
          operator delete(v77);
        }
        if (++v18 < v14) {
          uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, v18);
        }
      }
      while (v18 != v14);
      a1 = v70;
      a4 = v68;
      a7 = v69;
      if (v17)
      {
        std::string::basic_string[abi:ne180100]<0>(&v77, "WARNING");
        std::string v38 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&v77);
        int v39 = (void *)fst::cerr(v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Target symbol table missing: ", 29);
        uint64_t v40 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" input symbols.", 15);
        fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
        if (SHIBYTE(v79) < 0)
        {
          operator delete(v77);
          if (!v68) {
            goto LABEL_41;
          }
          goto LABEL_40;
        }
      }
    }
    if (a4) {
LABEL_40:
    }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, a3);
  }
LABEL_41:
  v77 = 0;
  unint64_t v78 = 0;
  v79 = 0;
  if (a5 && a6)
  {
    unint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 120))(a5);
    uint64_t v42 = (*(uint64_t (**)(uint64_t, void))(*(void *)a5 + 128))(a5, 0);
    if (!v41) {
      goto LABEL_79;
    }
    uint64_t v43 = v42;
    uint64_t v71 = a1;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a5 + 88))(__p, a5, v43);
      uint64_t v46 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a6 + 96))(a6, __p);
      unsigned int v47 = v46;
      if (v46 == -1)
      {
        if (FLAGS_v >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v72, "INFO");
          long long v48 = fst::LogMessage::LogMessage((fst *)&v74, (uint64_t)v72);
          long long v49 = (void *)fst::cerr(v48);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Output symbol id ", 17);
          uint64_t v50 = (void *)std::ostream::operator<<();
          uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" symbol '", 9);
          std::string v52 = (v76 & 0x80u) == 0 ? __p : (void **)__p[0];
          unint64_t v53 = (v76 & 0x80u) == 0 ? (void *)v76 : __p[1];
          std::string v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, (uint64_t)v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"' missing from target symbol table.", 35);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v74);
          if (v73 < 0) {
            operator delete(v72[0]);
          }
        }
        ++v44;
      }
      uint64_t v55 = v78;
      if (v78 >= v79)
      {
        uint64_t v57 = ((char *)v78 - (unsigned char *)v77) >> 3;
        if ((unint64_t)(v57 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v58 = ((char *)v79 - (unsigned char *)v77) >> 2;
        if (v58 <= v57 + 1) {
          unint64_t v58 = v57 + 1;
        }
        if ((unint64_t)((char *)v79 - (unsigned char *)v77) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v58;
        }
        if (v59) {
          long long v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v79, v59);
        }
        else {
          long long v60 = 0;
        }
        long long v61 = (unint64_t *)&v60[8 * v57];
        unint64_t *v61 = v43 | ((unint64_t)v47 << 32);
        uint64_t v56 = v61 + 1;
        v63 = (char *)v77;
        long long v62 = (char *)v78;
        if (v78 != v77)
        {
          do
          {
            unint64_t v64 = *((void *)v62 - 1);
            v62 -= 8;
            *--long long v61 = v64;
          }
          while (v62 != v63);
          long long v62 = (char *)v77;
        }
        v77 = v61;
        unint64_t v78 = v56;
        v79 = (unint64_t *)&v60[8 * v59];
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        *unint64_t v78 = v43 | ((unint64_t)v47 << 32);
        uint64_t v56 = v55 + 1;
      }
      unint64_t v78 = v56;
      if ((char)v76 < 0) {
        operator delete(__p[0]);
      }
      if (++v45 < v41) {
        uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a5 + 128))(a5, v45);
      }
    }
    while (v45 != v41);
    a1 = v71;
    if (!v44
      || (std::string::basic_string[abi:ne180100]<0>(__p, "WARNING"),
          uint64_t v65 = fst::LogMessage::LogMessage((fst *)v72, (uint64_t)__p),
          v66 = (void *)fst::cerr(v65),
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Target symbol table missing: ", 29), uint64_t v67 = (void *)std::ostream::operator<<(), std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" output symbols.", 16), fst::LogMessage::~LogMessage((fst::LogMessage *)v72), ((char)v76 & 0x80000000) == 0))
    {
LABEL_79:
      if (!a7) {
        goto LABEL_81;
      }
      goto LABEL_80;
    }
    operator delete(__p[0]);
    if (a7) {
LABEL_80:
    }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 288))(a1, a6);
  }
LABEL_81:
  fst::Relabel<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, (uint64_t *)&v80, (uint64_t *)&v77);
  if (v77)
  {
    unint64_t v78 = (unint64_t *)v77;
    operator delete(v77);
  }
  if (v80)
  {
    v81 = (unint64_t *)v80;
    operator delete(v80);
  }
}

void sub_1B1F3A710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Relabel<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  memset(v36, 0, sizeof(v36));
  int v37 = 1065353216;
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      int v10 = *(_DWORD *)(v7 + v8 + 4);
      *(void *)&v34[0] = v7 + v8;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v36, (int *)(v7 + v8), (uint64_t)&std::piecewise_construct, (_DWORD **)v34)+ 5) = v10;
      ++v9;
      uint64_t v7 = *a2;
      v8 += 8;
    }
    while (v9 < (a2[1] - *a2) >> 3);
  }
  memset(v34, 0, sizeof(v34));
  int v35 = 1065353216;
  uint64_t v11 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      int v14 = *(_DWORD *)(v11 + v12 + 4);
      unint64_t v31 = (_DWORD *)(v11 + v12);
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v34, (int *)(v11 + v12), (uint64_t)&std::piecewise_construct, &v31)+ 5) = v14;
      ++v13;
      uint64_t v11 = *a3;
      v12 += 8;
    }
    while (v13 < (a3[1] - *a3) >> 3);
  }
  unsigned int v33 = 0;
  (*(void (**)(uint64_t, _DWORD **))(*(void *)a1 + 128))(a1, &v31);
  while (1)
  {
    if (!v31)
    {
      if ((int)v33 >= v32) {
        goto LABEL_45;
      }
LABEL_13:
      uint64_t v15 = v33;
      goto LABEL_14;
    }
    if ((*(uint64_t (**)(_DWORD *))(*(void *)v31 + 16))(v31)) {
      break;
    }
    if (!v31) {
      goto LABEL_13;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v31 + 24))();
LABEL_14:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v15, &v30);
    while (((*(uint64_t (**)(uint64_t))(*(void *)v30 + 24))(v30) & 1) == 0)
    {
      long long v29 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 32))(v30);
      uint64_t v16 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v36, (int *)&v29);
      if (v16)
      {
        if (*((_DWORD *)v16 + 5) == -1)
        {
          if (FLAGS_fst_error_fatal) {
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          }
          uint64_t v18 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)__p);
          uint64_t v19 = (void *)fst::cerr(v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input symbol id ", 16);
          uint64_t v22 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" missing from target vocabulary", 31);
          goto LABEL_36;
        }
        LODWORD(v29) = *((_DWORD *)v16 + 5);
      }
      uint64_t v17 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v34, (int *)&v29 + 1);
      if (v17)
      {
        if (*((_DWORD *)v17 + 5) == -1)
        {
          if (FLAGS_fst_error_fatal) {
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          }
          unsigned int v20 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)__p);
          unint64_t v21 = (void *)fst::cerr(v20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Output symbol id ", 17);
          uint64_t v23 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" missing from target vocabulary", 31);
LABEL_36:
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          if (v31) {
            (*(void (**)(_DWORD *))(*(void *)v31 + 8))(v31);
          }
          goto LABEL_42;
        }
        DWORD1(v29) = *((_DWORD *)v17 + 5);
      }
      (*(void (**)(uint64_t, long long *))(*(void *)v30 + 88))(v30, &v29);
      (*(void (**)(uint64_t))(*(void *)v30 + 40))(v30);
    }
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
    if (v31) {
      (*(void (**)(_DWORD *))(*(void *)v31 + 32))(v31);
    }
    else {
      ++v33;
    }
  }
  if (v31) {
    (*(void (**)(void))(*(void *)v31 + 8))();
  }
LABEL_45:
  unint64_t v25 = fst::RelabelProperties(v6);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v25, 0x3FFFFFFF0007);
LABEL_42:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v34);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v36);
}

void sub_1B1F3ADD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void **std::vector<std::set<std::vector<int>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 24 * a2;
      uint64_t v14 = 24 * a2;
      uint64_t v15 = (void *)(v7 + 8);
      do
      {
        void *v15 = 0;
        v15[1] = 0;
        *(v15 - 1) = v15;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v23 = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v19 = v12;
    unsigned int v20 = &v12[24 * v8];
    uint64_t v22 = &v12[24 * v11];
    uint64_t v16 = &v20[24 * a2];
    uint64_t v17 = 24 * a2;
    uint64_t v18 = v20 + 8;
    do
    {
      void *v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    unint64_t v21 = v16;
    std::vector<std::set<std::vector<int>>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<std::set<std::vector<int>>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_1B1F3B020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::set<std::vector<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<std::vector<int>>>,std::reverse_iterator<std::set<std::vector<int>>*>,std::reverse_iterator<std::set<std::vector<int>>*>,std::reverse_iterator<std::set<std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<std::vector<int>>>,std::reverse_iterator<std::set<std::vector<int>>*>,std::reverse_iterator<std::set<std::vector<int>>*>,std::reverse_iterator<std::set<std::vector<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - 24) = v9;
      unint64_t v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 24) = v10;
        void *v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::vector<int>>>,std::reverse_iterator<std::set<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::vector<int>>>,std::reverse_iterator<std::set<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::vector<int>>>,std::reverse_iterator<std::set<std::vector<int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::vector<int>>>,std::reverse_iterator<std::set<std::vector<int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::vector<int>>::destroy(v1, *(void **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::set<std::vector<int>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::set<std::vector<int>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__tree<std::vector<int>>::destroy(i - 24, *(void **)(i - 16));
  }
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::WeightConvertMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v4);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1)
  {
    if ((v6 & 4) != 0)
    {
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
      return v13(a2, 4, 4);
    }
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    BOOL v8 = fst::CountStates<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1) != 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)a2 + 248))(a2, v8);
  }
  LODWORD(v17) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v15);
  while (!v15)
  {
    if ((int)v17 >= (int)v16) {
      goto LABEL_14;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 32))(v15);
    }
    else {
      LODWORD(v17) = v17 + 1;
    }
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v15 + 16))(v15)) {
    goto LABEL_9;
  }
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
LABEL_14:
  unsigned int v22 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v20);
  while (2)
  {
    if (!v20)
    {
      if ((int)v22 >= v21) {
        goto LABEL_42;
      }
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v20 + 16))(v20))
    {
      if (v20)
      {
        uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v20 + 24))();
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v9 = v22;
LABEL_21:
      if (v9 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v9);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v9, v10);
      unint64_t v19 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v9, &v15);
LABEL_24:
      if (v15)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
        {
          if (v15)
          {
            (*(void (**)(void))(*(void *)v15 + 8))();
            goto LABEL_37;
          }
LABEL_35:
          if (v18) {
            --*v18;
          }
LABEL_37:
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v9);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 184))(a2, v9);
          if (v20) {
            (*(void (**)(uint64_t))(*(void *)v20 + 32))(v20);
          }
          else {
            ++v22;
          }
          continue;
        }
        if (v15)
        {
          uint64_t v11 = (long long *)(*(uint64_t (**)(void))(*(void *)v15 + 32))();
          goto LABEL_30;
        }
      }
      else if (v19 >= v17)
      {
        goto LABEL_35;
      }
      uint64_t v11 = (long long *)(v16 + 16 * v19);
LABEL_30:
      long long v14 = *v11;
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a2 + 208))(a2, v9, &v14);
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
      }
      else {
        ++v19;
      }
      goto LABEL_24;
    }
    break;
  }
  if (v20) {
    (*(void (**)(void))(*(void *)v20 + 8))();
  }
LABEL_42:
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, v12 | v6, 0x3FFFFFFF0007);
}

void sub_1B1F3B9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, void **a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = (unint64_t)a2[5]; ; a2[5] = (void *)i)
        {
          uint64_t v9 = a2[2];
          if (i >= ((unsigned char *)a2[3] - v9) >> 4) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 208))(a1, v7, &v9[16 * i]);
          unint64_t i = (unint64_t)a2[5] + 1;
        }
        (*(void (**)(void *, uint64_t))(*(void *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 184))(a1, v7);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192);
    return v10(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState(void **a1, uint64_t a2)
{
  a1[5] = 0;
  uint64_t v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(void *))(*(void *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v26 = 0;
  (*(void (**)(void *, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v24);
  while (1)
  {
    if (!v24[0])
    {
      if (v26 >= v24[2]) {
        goto LABEL_29;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v24[0] + 24))(v24[0])) {
      break;
    }
    if (v24[0])
    {
      uint64_t v7 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)v24[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = (_OWORD *)(v24[1] + 16 * v26);
LABEL_8:
    uint64_t v9 = (char *)a1[3];
    unint64_t v8 = (unint64_t)a1[4];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = (v9 - (unsigned char *)*v4) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v8 - (void)*v4;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v14);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = &v15[16 * v11];
      *(_OWORD *)uint64_t v16 = *v7;
      long long v18 = (char *)a1[2];
      unint64_t v17 = (char *)a1[3];
      unint64_t v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        unint64_t v17 = (char *)*v4;
      }
      uint64_t v10 = v16 + 16;
      a1[2] = v19;
      a1[3] = v16 + 16;
      a1[4] = &v15[16 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *v7;
      uint64_t v10 = v9 + 16;
    }
    a1[3] = v10;
    if (v24[0]) {
      (*(void (**)(void))(*(void *)v24[0] + 40))(v24[0]);
    }
    else {
      ++v26;
    }
  }
  if (v24[0])
  {
    (*(void (**)(void))(*(void *)v24[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v25) {
    --*v25;
  }
LABEL_31:
  unint64_t v20 = (unint64_t)a1[2];
  int v21 = (int *)a1[3];
  unint64_t v22 = 126 - 2 * __clz((uint64_t)((uint64_t)v21 - v20) >> 4);
  if (v21 == (int *)v20) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(v20, v21, (uint64_t)v24, v23, 1);
}

void sub_1B1F3BFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(unint64_t a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 4))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (long long *)(a1 + 16), (long long *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__n128 *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      uint64_t v7 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (long long *)(a1 + 16), (long long *)(a1 + 32));
      uint64_t v8 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    int v11 = *(_DWORD *)(v8 + 4);
    if (v11 < *(_DWORD *)(v7 + 4))
    {
      int v12 = *(_DWORD *)v8;
      uint64_t v13 = *(void *)(v8 + 8);
      uint64_t v14 = v9;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = *(_DWORD *)(a1 + v14 + 20);
        v14 -= 16;
        if (v11 >= v15)
        {
          uint64_t v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v16 = v12;
      *(_DWORD *)(v16 + 4) = v11;
      *(void *)(v16 + 8) = v13;
      if (++v10 == 8) {
        return v8 + 16 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 16;
    v8 += 16;
    if (v8 == a2) {
      return 1;
    }
  }
}

void fst::Connect<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = 0;
  v1[0] = 0;
  v1[1] = v4;
  v1[2] = v3;
  v1[3] = &v2;
  fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, (uint64_t)v1);
}

void sub_1B1F3C774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(void **)(v11 - 112);
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(v11 - 88);
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase(uint64_t a1, uint64_t a2)
{
  int v2 = fst::LookAheadMatchType<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, a2);
  if (v2)
  {
    if (v2 == 1) {
      fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>();
    }
    fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
  }
  fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>();
}

void fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ComposeFst(void *a1)
{
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1F3C91C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitStateIterator()
{
}

void sub_1B1F3C9F8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a1, a2);
}

uint64_t fst::LookAheadMatchType<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v6, a1, 1);
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v5, a2, 0);
  uint64_t v3 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v6, v5);
  if (v5[0]) {
    (*(void (**)(void))(*(void *)v5[0] + 8))(v5[0]);
  }
  if (v6[0]) {
    (*(void (**)(void))(*(void *)v6[0] + 8))(v6[0]);
  }
  return v3;
}

void sub_1B1F3CB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a9) {
    fst::LookAheadMatchType<fst::ArcTpl<fst::LogWeightTpl<float>,int>>();
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(void *a1, void *a2)
{
  int v4 = (*(uint64_t (**)(void, void))(*(void *)*a1 + 24))(*a1, 0);
  int v5 = (*(uint64_t (**)(void, void))(*(void *)*a2 + 24))(*a2, 0);
  if (v4 == 1 && ((*(uint64_t (**)(void))(*(void *)*a1 + 48))() & 0x20) != 0) {
    return 1;
  }
  if (!v5 && ((*(uint64_t (**)(void))(*(void *)*a2 + 48))() & 0x10) != 0) {
    return 0;
  }
  if (((*(uint64_t (**)(void))(*(void *)*a1 + 48))() & 0x20) == 0
    || (uint64_t v6 = *a1,
        uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t))(*(void *)*a1 + 24),
        uint64_t v8 = 1,
        v7(v6, 1) != 1))
  {
    if (((*(uint64_t (**)(void))(*(void *)*a2 + 48))() & 0x10) == 0
      || (*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 24))(*a2, 1))
    {
      return 3;
    }
    return 0;
  }
  return v8;
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 144))(a2, a3);
  *(void *)a1 = v4;
  if (!v4) {
    operator new();
  }
  *(unsigned char *)(a1 + 8) = 0;
  return a1;
}

void sub_1B1F3CDB8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_1F0A39108;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 74) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MemoryPool((void *)(a1 + 80), 1);
}

void sub_1B1F3CF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MemoryPool(v18);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36B58;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36B58;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~SortedMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1F3D084(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 74)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Flags()
{
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Final_(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) + 32);
  return v1();
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36B58;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1F3D2A0(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Size()
{
  return 40;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37B10;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1F3D3B8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37B10;
  int v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::Size()
{
  return 48;
}

void *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~SortedMatcher(void *a1)
{
  *a1 = &unk_1F0A39108;
  int v2 = (void *)a1[3];
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    else
    {
      uint64_t v3 = (_DWORD *)v2[3];
      if (v3) {
        --*v3;
      }
    }
    v2[5] = a1[17];
    a1[17] = v2;
  }
  uint64_t v4 = a1[1];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  a1[10] = &unk_1F0A36B58;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A39108;
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 88))(*(void *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MemoryPool((void *)(a1 + 80), 1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 16) != a2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      int v5 = (void *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(v3 + 74) = 1;
    }
    uint64_t v6 = *(void **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Reinit(v6, *(void *)(v3 + 8), a2);
      uint64_t v7 = *(void **)(v3 + 24);
    }
    else
    {
      uint64_t v7 = *(void **)(v3 + 136);
      if (v7)
      {
        *(void *)(v3 + 136) = v7[5];
      }
      else
      {
        uint64_t v7 = (void *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Allocate((void *)(v3 + 88), 1);
        void v7[5] = 0;
      }
      uint64_t v8 = *(void *)(v3 + 8);
      v7[4] = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v8 + 136))(v8, a2, v7);
      *(void *)(v3 + 24) = v7;
    }
    if (*v7) {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 80))(*v7, 16, 16);
    }
    BOOL result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 8) + 40))(*(void *)(v3 + 8), a2);
    *(void *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 68) = a2;
  }
  return result;
}

void sub_1B1F3D804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Reinit(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (!v6) {
    goto LABEL_5;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a3);
  if (result) {
    return result;
  }
  if (*a1)
  {
    (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
  }
  else
  {
LABEL_5:
    uint64_t v8 = (_DWORD *)a1[3];
    if (v8) {
      --*v8;
    }
  }
  a1[4] = 0;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 136);
  return v9(a2, a3, a1);
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 73) = 1;
  if (*(unsigned char *)(a1 + 74))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = a2 == 0;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Search(a1) & 1) != 0
        || *(unsigned char *)(a1 + 72) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Search(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 24);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 32)) {
      uint64_t v3 = 2;
    }
    else {
      uint64_t v3 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 80))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    int v4 = *(void **)(a1 + 24);
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 56))(*v4);
    }
    else {
      v4[4] = 0;
    }
    while (1)
    {
      char v19 = *(void **)(a1 + 24);
      if (*v19)
      {
        if ((*(uint64_t (**)(void))(*(void *)*v19 + 24))(*v19)) {
          return 0;
        }
      }
      else if (v19[4] >= v19[2])
      {
        return 0;
      }
      BOOL v20 = *(uint64_t **)(a1 + 24);
      uint64_t v21 = *v20;
      if (*(_DWORD *)(a1 + 32))
      {
        uint64_t v22 = v21 ? (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21) : v20[1] + 16 * v20[4];
        uint64_t v23 = (_DWORD *)(v22 + 4);
      }
      else
      {
        uint64_t v23 = (_DWORD *)(v21 ? (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21) : v20[1] + 16 * v20[4]);
      }
      int v24 = *(_DWORD *)(a1 + 40);
      int v25 = *v23 <= v24 ? 0 : 7;
      if (*v23 == v24) {
        int v25 = 1;
      }
      if (v25) {
        break;
      }
      unint64_t v26 = *(void **)(a1 + 24);
      if (*v26) {
        (*(void (**)(void))(*(void *)*v26 + 40))(*v26);
      }
      else {
        ++v26[4];
      }
    }
    uint64_t result = 0;
    if (v25 == 1) {
      return 1;
    }
    return result;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  if (!v5)
  {
    unint64_t v6 = 0;
LABEL_68:
    char v28 = *(uint64_t **)(a1 + 24);
    uint64_t result = *v28;
    if (*v28)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)result + 64))(result, v6);
      return 0;
    }
    else
    {
      v28[4] = v6;
    }
    return result;
  }
  unint64_t v6 = 0;
  while (1)
  {
    unint64_t v7 = (v5 + v6) >> 1;
    uint64_t v8 = *(void **)(a1 + 24);
    if (*v8) {
      (*(void (**)(void, unint64_t))(*(void *)*v8 + 64))(*v8, (v5 + v6) >> 1);
    }
    else {
      v8[4] = v7;
    }
    uint64_t v9 = *(uint64_t **)(a1 + 24);
    uint64_t v10 = *v9;
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v11 = v10 ? (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) : v9[1] + 16 * v9[4];
      int v12 = (_DWORD *)(v11 + 4);
    }
    else
    {
      int v12 = (_DWORD *)(v10 ? (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) : v9[1] + 16 * v9[4]);
    }
    int v13 = *(_DWORD *)(a1 + 40);
    if (*v12 <= v13) {
      break;
    }
    unint64_t v5 = (v5 + v6) >> 1;
LABEL_25:
    if (v6 >= v5) {
      goto LABEL_68;
    }
  }
  if (*v12 < v13)
  {
    unint64_t v6 = v7 + 1;
    goto LABEL_25;
  }
  while (v7 > v6)
  {
    uint64_t v14 = *(void **)(a1 + 24);
    --v7;
    if (*v14) {
      (*(void (**)(void, unint64_t))(*(void *)*v14 + 64))(*v14, v7);
    }
    else {
      v14[4] = v7;
    }
    int v15 = *(uint64_t **)(a1 + 24);
    uint64_t v16 = *v15;
    if (*(_DWORD *)(a1 + 32))
    {
      if (v16) {
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
      }
      else {
        uint64_t v17 = v15[1] + 16 * v15[4];
      }
      unint64_t v18 = (_DWORD *)(v17 + 4);
    }
    else if (v16)
    {
      unint64_t v18 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
    }
    else
    {
      unint64_t v18 = (_DWORD *)(v15[1] + 16 * v15[4]);
    }
    if (*v18 != *(_DWORD *)(a1 + 40))
    {
      long long v29 = *(void **)(a1 + 24);
      unint64_t v30 = v7 + 1;
      if (*v29) {
        (*(void (**)(void, unint64_t))(*(void *)*v29 + 64))(*v29, v30);
      }
      else {
        v29[4] = v30;
      }
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (*v3)
  {
    if ((*(uint64_t (**)(void))(*(void *)*v3 + 24))(*v3)) {
      return 1;
    }
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 73)) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = **(void **)(a1 + 24);
  if (v5)
  {
    if (v4) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80))(v5, v6, 15);
    int v4 = *(_DWORD *)(a1 + 32);
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *v7;
  if (v4)
  {
    if (v8) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
    }
    else {
      uint64_t v9 = v7[1] + 16 * v7[4];
    }
    uint64_t v10 = (_DWORD *)(v9 + 4);
  }
  else if (v8)
  {
    uint64_t v10 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  }
  else
  {
    uint64_t v10 = (_DWORD *)(v7[1] + 16 * v7[4]);
  }
  return *v10 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return a1 + 56;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 16 * v3[4];
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 80))(*v3, 15, 15);
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 16 * v3[4];
  }
  int v4 = *(uint64_t (**)(void))(*(void *)*v3 + 32);
  return v4();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Next(uint64_t result)
{
  if (*(unsigned char *)(result + 72))
  {
    *(unsigned char *)(result + 72) = 0;
  }
  else
  {
    uint64_t v1 = *(uint64_t **)(result + 24);
    uint64_t result = *v1;
    if (*v1) {
      return (*(uint64_t (**)(void))(*(void *)result + 40))();
    }
    else {
      ++v1[4];
    }
  }
  return result;
}

void fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1F3E0E0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3A780;
  uint64_t v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1F3E364(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (void *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4);
  *unint64_t v7 = &unk_1F0A3DB48;
  fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitBase((uint64_t)v7, a2, a3);
  return a1;
}

void sub_1B1F3E42C(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 48))(**(void **)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v13 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v14 = (void *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else if (((*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 48))(**(void **)(a1 + 152)) & 1) != 0 {
         && (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 1))
  }
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v3 = (void *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
  }
  else
  {
    int v4 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0);
    int v5 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0);
    if (v5) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v4 == 1;
    }
    if (v6) {
      int v7 = 2;
    }
    else {
      int v7 = 1;
    }
    BOOL v8 = v4 == 1;
    if (v4 == 1) {
      int v9 = v7;
    }
    else {
      int v9 = 0;
    }
    if (v8 || v5 == 0) {
      goto LABEL_36;
    }
    int v9 = 1;
    if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 1) == 1)goto LABEL_36; {
    if (!(*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 1))
    }
    {
      int v9 = 0;
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v9 = 3;
LABEL_36:
  *(_DWORD *)(a1 + 184) = v9;
}

void sub_1B1F3E794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1F3E9B0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  int v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = (void *)a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = (void *)a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1F3EB64(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  char v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  float v10 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 144) + 96))(**(void **)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    uint64_t v7 = v5[1];
    float v8 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 152) + 96))(**(void **)(a1 + 152), v7);
    float v10 = v8;
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      LOBYTE(v10) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FCE0;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38C10;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    operator new();
  }
  *(void *)(a1 + 120) = v4;
  *(unsigned char *)(a1 + 128) = v4 == 0;
  return a1;
}

void sub_1B1F3EEB0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  uint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
  uint64_t v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  if (!fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    }
    float v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)&__str);
    uint64_t v9 = (void *)fst::cerr(v8);
    float v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ComposeFst: output symbol table of 1st argument ", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"does not match input symbol table of 2nd argument", 49);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v11);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v12);
}

void sub_1B1F3F0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38C10;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    unsigned int v3 = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  uint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitMatcher()
{
  return 0;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1F3F294(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t *fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Matcher(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 144))(a2, a3);
  *a1 = v4;
  if (!v4) {
    operator new();
  }
  return a1;
}

void sub_1B1F3F35C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3A780;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40AD892F49);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~SequenceComposeFilter(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F3F5F8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F3F6F4(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FCE0;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38C10;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FCE0;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38C10;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

void sub_1B1F3F860(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      MutableState = 0;
    }
    else {
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        float v8 = operator new(0x38uLL);
        fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          uint64_t v9 = operator new(0x18uLL);
          _DWORD v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)uint64_t v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        float v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          char v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          char v18 = 0;
        }
        char v19 = &v18[8 * v14];
        *(void *)char v19 = v8;
        uint64_t v13 = v19 + 8;
        uint64_t v21 = (char *)a1[1];
        BOOL v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          BOOL v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        void *v12 = v8;
        uint64_t v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(const void **)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::LogWeightTpl<float>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::LogWeightTpl<float>,int> const*>>((void *)(a1 + 24), v4, v5, (v5 - (uint64_t)v4) >> 4);
  *(void *)(a1 + 48) = *(unsigned int *)(a2 + 48);
  return a1;
}

void *std::vector<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::LogWeightTpl<float>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::LogWeightTpl<float>,int> const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1F3FB68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter()
{
}

void fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1F3FC8C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned char *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(unsigned char *)(a1 + 32) = *a4;
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), a2);
    BOOL v9 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2) == INFINITY
      && v6 == v7;
    *(unsigned char *)(a1 + 33) = v9;
    *(unsigned char *)(a1 + 34) = v7 == 0;
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1F3FF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1F40168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        long long v24 = *(_OWORD *)a4;
        long long v25 = v12;
        if (a5)
        {
          uint64_t v13 = *(unsigned __int8 **)(a1 + 136);
          if (DWORD1(v24) != -1)
          {
            if (v25 == -1)
            {
              int v17 = v13[32];
              if (v17) {
                char v18 = -1;
              }
              else {
                char v18 = 0;
              }
              char v23 = v18;
              if (v17) {
                goto LABEL_35;
              }
            }
            else
            {
              if (DWORD1(v24)) {
                char v14 = 0;
              }
              else {
                char v14 = -1;
              }
              char v23 = v14;
              if (!DWORD1(v24)) {
                goto LABEL_35;
              }
            }
LABEL_28:
            char v19 = (unsigned int *)&v24;
            BOOL v20 = &v25;
LABEL_34:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
            goto LABEL_35;
          }
          if (!v13[33])
          {
            char v23 = v13[34] ^ 1;
            goto LABEL_28;
          }
        }
        else
        {
          char v15 = *(unsigned __int8 **)(a1 + 136);
          if (DWORD1(v25) != -1)
          {
            if (v24 == -1)
            {
              int v21 = v15[32];
              if (v21) {
                char v22 = -1;
              }
              else {
                char v22 = 0;
              }
              char v23 = v22;
              if (v21) {
                goto LABEL_35;
              }
            }
            else
            {
              if (DWORD1(v25)) {
                char v16 = 0;
              }
              else {
                char v16 = -1;
              }
              char v23 = v16;
              if (!DWORD1(v25)) {
                goto LABEL_35;
              }
            }
LABEL_33:
            char v19 = (unsigned int *)&v25;
            BOOL v20 = &v24;
            goto LABEL_34;
          }
          if (!v15[33])
          {
            char v23 = v15[34] ^ 1;
            goto LABEL_33;
          }
        }
LABEL_35:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3C660;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1F404D8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      int v3 = (void **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    int v3 = (void **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C660;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3C660;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy();
}

void sub_1B1F40BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    uint64_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      uint64_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          int v6 = *(_DWORD *)(a1 + 28);
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          int v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            int v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        uint64_t v13 = (uint64_t *)v10;
      }
      else {
        uint64_t v13 = (uint64_t *)v9;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        char v16 = (uint64_t *)v10;
      }
      else {
        char v16 = (uint64_t *)v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1; {
    }
      }
  }
  return 0;
}

void fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>()
{
}

void sub_1B1F40FD8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3A840;
  uint64_t v8 = *(void *)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  uint64_t v9 = *(void *)(v8 + 120);
  *(void *)(a1 + 144) = v8 + 120;
  *(void *)(a1 + 152) = v8 + 200;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(****(void ****)(a1 + 152) + 32))(***(void ***)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 144) + 40))(***(void ***)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 152) + 40))(***(void ***)(a1 + 152), v12);
  unint64_t v15 = fst::ComposeProperties(v13, v14);
  int v16 = *(_DWORD *)(*(void *)(a1 + 136) + 40);
  uint64_t v17 = v15 | 4;
  if (v16 != 3) {
    uint64_t v17 = v15;
  }
  BOOL v18 = v16 == 1;
  uint64_t v19 = 0x3FFCCC300004;
  if (v18) {
    uint64_t v19 = 0x3FFC330C0004;
  }
  *(void *)(a1 + 8) = v17 & v19 | *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL;
  return a1;
}

void sub_1B1F41298(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::SetMatchType(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(****(void ****)(a1 + 144) + 48))(***(void ***)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(void, uint64_t))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v13 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v14 = (void *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else if (((*(uint64_t (**)(void))(****(void ****)(a1 + 152) + 48))(***(void ***)(a1 + 152)) & 1) != 0 {
         && (*(unsigned int (**)(void, uint64_t))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 1))
  }
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    int v3 = (void *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
  }
  else
  {
    int v4 = (*(uint64_t (**)(void, void))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 0);
    int v5 = (*(uint64_t (**)(void, void))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 0);
    if (v5) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v4 == 1;
    }
    if (v6) {
      int v7 = 2;
    }
    else {
      int v7 = 1;
    }
    BOOL v8 = v4 == 1;
    if (v4 == 1) {
      int v9 = v7;
    }
    else {
      int v9 = 0;
    }
    if (v8 || v5 == 0) {
      goto LABEL_36;
    }
    int v9 = 1;
    if ((*(unsigned int (**)(void, uint64_t))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 1) == 1)goto LABEL_36; {
    if (!(*(unsigned int (**)(void, uint64_t))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 1))
    }
    {
      int v9 = 0;
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v9 = 3;
LABEL_36:
  *(_DWORD *)(a1 + 184) = v9;
}

void sub_1B1F41670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(****(void ****)(a1 + 144) + 40))(***(void ***)(a1 + 144), 0) & 4) != 0|| (char v4 = (*(uint64_t (**)(void, void))(****(void ****)(a1 + 152) + 40))(***(void ***)(a1 + 152), 0), *(_DWORD *)(*(void *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(void *)(a1 + 8) |= 4uLL;
    }
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Copy()
{
}

void sub_1B1F418A4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Expand(void *a1, int a2)
{
  char v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 20 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  uint64_t v8 = *((void *)v4 + 1);
  LODWORD(v4) = v4[4];
  uint64_t v17 = v8;
  int v18 = (int)v4;
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v7, v5, v6, &v17);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v10 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v11 = (_DWORD *)a1[19];
    uint64_t v12 = (uint64_t)a1;
    int v13 = a2;
    uint64_t v14 = v6;
    uint64_t v15 = v5;
    int v16 = 1;
  }
  else
  {
    uint64_t v9 = a1[20];
    uint64_t v10 = a1[21];
    uint64_t v11 = (_DWORD *)a1[18];
    uint64_t v12 = (uint64_t)a1;
    int v13 = a2;
    uint64_t v14 = v5;
    uint64_t v15 = v6;
    int v16 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(v12, v13, v9, v14, v10, v15, v11, v16);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 0) == a3)(*(void (**)(void, void))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 0); {
  return 0;
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    unsigned int v4 = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    uint64_t result = 0xFFFFFFFFLL;
    if (v4 != -1)
    {
      long long v5 = __PAIR64__(v4, v3);
      int v6 = -1;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(a1[22], &v5, 1);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  long long v5 = (int *)(v4 + 20 * a2);
  int v6 = *v5;
  float result = (*(float (**)(void, void))(****(void ****)(a1 + 144) + 96))(***(void ***)(a1 + 144), *v5);
  float v16 = result;
  *(float *)&uint64_t v13 = result;
  int v17 = 2139095040;
  if (result != INFINITY)
  {
    uint64_t v8 = v5[1];
    float result = (*(float (**)(void, uint64_t, float, float))(****(void ****)(a1 + 152) + 96))(***(void ***)(a1 + 152), v8, result, result);
    float v15 = result;
    *(float *)&uint64_t v13 = result;
    int v17 = 2139095040;
    if (result != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      uint64_t v10 = v4 + 20 * a2;
      uint64_t v11 = *(void *)(v10 + 8);
      LODWORD(v10) = *(_DWORD *)(v10 + 16);
      uint64_t v13 = v11;
      int v14 = v10;
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v9, v6, v8, &v13);
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(*(void *)(a1 + 136), &v16);
      float result = NAN;
      if (v16 != -INFINITY)
      {
        float result = NAN;
        if (v15 != -INFINITY)
        {
          float result = INFINITY;
          if (v15 != INFINITY && v16 != INFINITY) {
            return v16 + v15;
          }
        }
      }
    }
  }
  return result;
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B1F41D74(_Unwind_Exception *a1)
{
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = (void **)fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter(a1, a2, a3, a4, a5);
  *(_DWORD *)(a1 + 40) = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(*v6, *(void **)(a1 + 8));
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy();
}

void sub_1B1F41F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a5 + 32))();
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1F420B8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

void fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1F42164(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(unsigned char *a1)
{
  if (!a1[8])
  {
    int v2 = (*(uint64_t (**)(void))(**(void **)a1 + 48))() & 0x30;
    a1[8] = v2 != 0;
    if (!v2)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      unsigned int v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
      uint64_t v4 = (void *)fst::cerr(v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"LookAheadMatcher: No look-ahead matcher defined", 47);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return a1[8];
}

void sub_1B1F42270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x1020C405F07FB98);
  }
  unsigned int v3 = *(void **)(a1 + 8);
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x1020C405F07FB98);
  }
  return a1;
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MultiEpsMatcher(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, char a6)
{
  if (!a5) {
    operator new();
  }
  *(void *)float result = a5;
  *(_DWORD *)(result + 8) = a4;
  *(unsigned char *)(result + 12) = a6;
  *(void *)(result + 32) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 16) = result + 24;
  *(void *)(result + 40) = -1;
  *(void *)(result + 48) = 0;
  if (a3) {
    int v6 = 0;
  }
  else {
    int v6 = -1;
  }
  if (a3) {
    int v7 = -1;
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(result + 60) = v6;
  *(_DWORD *)(result + 64) = v7;
  *(void *)(result + 68) = 0xFFFFFFFF00000000;
  return result;
}

void sub_1B1F4242C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MultiEpsMatcher(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 12))
  {
    int v2 = *(void **)a1;
    if (*(void *)a1)
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      MEMORY[0x1B3EA8670](v2, 0x1020C405F07FB98);
    }
  }
  std::__tree<int>::destroy(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1F4251C(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3A840;
  uint64_t v2 = a1[17];
  if (v2)
  {
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 200);
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 120);
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    uint64_t v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40F6F5CAE4);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    long long v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F42710(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter()
{
}

void sub_1B1F42864(_Unwind_Exception *a1)
{
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter()
{
}

void sub_1B1F4298C(_Unwind_Exception *a1)
{
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter()
{
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::CompactHashBiTable(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a1;
  uint64_t v4 = a1 + 24;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, *(void *)(a2 + 48), (void *)(a1 + 8), (void *)(a1 + 16));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>*,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>*>((char *)(a1 + 80), *(long long **)(a2 + 80), *(long long **)(a2 + 88), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2));
  for (unint64_t i = *(int **)(a2 + 40); i; unint64_t i = *(int **)i)
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v4, i + 4, i + 4);
  return a1;
}

void sub_1B1F42AD0(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>*,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    float result = std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 20;
      a2 = (long long *)((char *)a2 + 20);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1F42B60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(void *)(a1 + 88) = v5;
  LODWORD(v5) = *(_DWORD *)a4;
  *(unsigned char *)(a1 + 84) = *((unsigned char *)a4 + 4);
  *(_DWORD *)(a1 + 80) = v5;
  fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(a1, a2, a3, a4);
  if ((*(unsigned char *)(a1 + 72) & 0x80) != 0)
  {
    int v6 = *(_DWORD *)(a1 + 40) == 1
       ? *(uint64_t (**)(void))(**(void **)(a1 + 104) + 40)
       : *(uint64_t (**)(void))(**(void **)(a1 + 112) + 40);
    *(void *)(a1 + 280) = v6();
    int v7 = *(_DWORD *)(a1 + 96);
    std::__tree<int>::destroy(a1 + 136, *(void **)(a1 + 144));
    *(void *)(a1 + 136) = a1 + 144;
    *(void *)(a1 + 144) = 0;
    long long v8 = *(void **)(a1 + 224);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = -1;
    std::__tree<int>::destroy(a1 + 216, v8);
    *(void *)(a1 + 216) = a1 + 224;
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = -1;
    if (v7 != -1)
    {
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 120, v7);
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 200, v7);
    }
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(****(void ****)(a1 + 144) + 104))(***(void ***)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 152) + 104))(***(void ***)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1F42E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, int a8)
{
  int v12 = a4;
  (*(void (**)(void, uint64_t))(***(void ***)a7 + 56))(**(void **)a7, a4);
  a7[18] = v12;
  v19[0] = a8 - 1;
  v19[1] = a8 << 31 >> 31;
  void v19[2] = 0;
  v19[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(a1, a2, a7, v19, a8);
  unint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v16);
  while (1)
  {
    if (!v16[0])
    {
      if (v18 >= v16[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v15 = (int *)(v16[1] + 16 * v18);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v16[0] + 24))(v16[0])) {
      break;
    }
    if (!v16[0]) {
      goto LABEL_7;
    }
    char v15 = (int *)(*(uint64_t (**)(void))(*(void *)v16[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(a1, a2, a7, v15, a8);
    if (v16[0]) {
      (*(void (**)(void))(*(void *)v16[0] + 40))(v16[0]);
    }
    else {
      ++v18;
    }
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(void *)v16[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v17) {
    --*v17;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1F43068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddMultiEpsLabel(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = a1 + 16;
    fst::CompactSet<int,-1>::Insert(v2, a2);
  }
  else
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v3 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
    uint64_t v4 = (void *)fst::cerr(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1F43154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(uint64_t a1, int a2, uint64_t a3, unsigned char *a4)
{
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned char *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(unsigned char *)(a1 + 32) = *a4;
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a3);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16), a3);
    BOOL v9 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a3) == INFINITY
      && v6 == v7;
    *(unsigned char *)(a1 + 33) = v9;
    *(unsigned char *)(a1 + 34) = v7 == 0;
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(uint64_t a1, int a2, unsigned char *a3, int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Find(a3, *v10);
  if (result && !a3[76])
  {
    do
    {
      int v12 = (long long *)(a3 + 60);
      if (!a3[56]) {
        int v12 = (long long *)(*(uint64_t (**)(void))(***(void ***)a3 + 80))(**(void **)a3);
      }
      long long v13 = *v12;
      long long v24 = *(_OWORD *)a4;
      long long v25 = v13;
      if (a5)
      {
        unint64_t v14 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)&v24, (uint64_t)&v25);
        unint64_t v22 = v14;
        int v23 = v15;
        if ((_BYTE)v14 == 0xFF)
        {
          LODWORD(v27) = v14 >> 8;
          int v26 = 2139095040;
          if (v27 == INFINITY && v15 == -1) {
            goto LABEL_21;
          }
        }
        int v17 = (unsigned int *)&v24;
        unint64_t v18 = &v25;
      }
      else
      {
        unint64_t v19 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)&v25, (uint64_t)&v24);
        unint64_t v22 = v19;
        int v23 = v20;
        if ((_BYTE)v19 == 0xFF)
        {
          LODWORD(v27) = v19 >> 8;
          int v26 = 2139095040;
          if (v27 == INFINITY && v20 == -1) {
            goto LABEL_21;
          }
        }
        int v17 = (unsigned int *)&v25;
        unint64_t v18 = &v24;
      }
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, (uint64_t)&v22);
LABEL_21:
      uint64_t result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next((uint64_t)a3);
    }
    while (!a3[76]);
  }
  return result;
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Find(unsigned char *a1, int a2)
{
  int v3 = a1 + 24;
  *((void *)a1 + 6) = a1 + 24;
  a1[56] = 0;
  if (a2 == -1)
  {
    if (a1[8])
    {
      uint64_t v6 = (void *)*((void *)a1 + 2);
      while (1)
      {
        *((void *)a1 + 6) = v6;
        if (v6 == (void *)v3) {
          break;
        }
        char v7 = (*(uint64_t (**)(void, void))(***(void ***)a1 + 64))(**(void **)a1, *((unsigned int *)v6 + 7));
        uint64_t v8 = (void *)*((void *)a1 + 6);
        if (v7)
        {
          if (v8 == (void *)v3) {
            break;
          }
          uint64_t result = 1;
          goto LABEL_11;
        }
        BOOL v9 = (void *)v8[1];
        if (v9)
        {
          do
          {
            uint64_t v6 = v9;
            BOOL v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v6 = (void *)v8[2];
            BOOL v10 = *v6 == (void)v8;
            uint64_t v8 = v6;
          }
          while (!v10);
        }
      }
    }
    uint64_t v4 = *(uint64_t (**)(void))(***(void ***)a1 + 64);
    goto LABEL_10;
  }
  if (!a2)
  {
    uint64_t v4 = *(uint64_t (**)(void))(***(void ***)a1 + 64);
LABEL_10:
    uint64_t result = v4();
    goto LABEL_11;
  }
  if ((a1[8] & 2) == 0 || v3 == (unsigned char *)fst::CompactSet<int,-1>::Find((uint64_t)(a1 + 16), a2))
  {
    uint64_t v4 = *(uint64_t (**)(void))(***(void ***)a1 + 64);
    goto LABEL_10;
  }
  uint64_t result = 1;
  a1[56] = 1;
LABEL_11:
  a1[76] = result ^ 1;
  return result;
}

unint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if ((*(unsigned char *)(a1 + 72) & 0x80) == 0)
  {
    unint64_t v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
    goto LABEL_3;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 96);
  if (v8 != -1)
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      a2 = a3;
      a3 = v4;
    }
    unint64_t v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushedLabelFilterArc(a1, a2, a3, v8);
    goto LABEL_17;
  }
  unint64_t v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
  unsigned int v12 = v6;
  char v13 = BYTE4(v6);
  if ((_BYTE)v6 == 0xFF)
  {
    LODWORD(v15) = v6 >> 8;
    int v14 = 2139095040;
    if (v15 == INFINITY)
    {
      unint64_t v7 = 0;
      unint64_t v6 = 0x7F800000FFLL;
      return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
    }
  }
  if (*(unsigned char *)(a1 + 76))
  {
    if (*(_DWORD *)(a1 + 40) == 1)
    {
      uint64_t v9 = v4;
      uint64_t v10 = v3;
    }
    else
    {
      uint64_t v9 = v3;
      uint64_t v10 = v4;
    }
    unint64_t v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelFilterArc(a1, v9, v10, &v12);
LABEL_17:
    unint64_t v7 = v6 & 0xFFFFFF0000000000;
    return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
  }
LABEL_3:
  unint64_t v7 = 0;
  return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  int v7 = *(_DWORD *)(a4 + 12);
  LODWORD(v17) = a3[3];
  DWORD1(v17) = v7;
  *((void *)&v17 + 1) = *(void *)a5;
  int v18 = *(_DWORD *)(a5 + 8);
  unsigned int v8 = *a3;
  unsigned int v9 = *(_DWORD *)(a4 + 4);
  float v10 = *((float *)a3 + 2);
  float v11 = NAN;
  if (v10 != -INFINITY)
  {
    float v12 = *(float *)(a4 + 8);
    if (v12 != -INFINITY)
    {
      if (v12 == INFINITY || v10 == INFINITY) {
        float v11 = INFINITY;
      }
      else {
        float v11 = v10 + v12;
      }
    }
  }
  unsigned int Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(*(void **)(a1 + 176), &v17, 1);
  *(void *)&long long v16 = __PAIR64__(v9, v8);
  *((void *)&v16 + 1) = __PAIR64__(Id, LODWORD(v11));
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v16);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(uint64_t result)
{
  uint64_t v1 = (void **)result;
  if (*(unsigned char *)(result + 56))
  {
    char v2 = 1;
LABEL_3:
    *((unsigned char *)v1 + 76) = v2;
  }
  else
  {
    (*(void (**)(void))(***(void ***)result + 88))(**(void **)result);
    uint64_t result = (*(uint64_t (**)(void))(*(void *)**v1 + 72))(**v1);
    *((unsigned char *)v1 + 76) = result;
    if (result)
    {
      uint64_t v3 = v1 + 3;
      uint64_t v4 = v1[6];
      if (v4 != v1 + 3)
      {
        uint64_t v5 = (void *)v4[1];
        if (v5)
        {
          do
          {
            unint64_t v6 = v5;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            unint64_t v6 = (void *)v4[2];
            BOOL v7 = *v6 == (void)v4;
            uint64_t v4 = v6;
          }
          while (!v7);
        }
        while (1)
        {
          v1[6] = v6;
          if (v6 == v3) {
            goto LABEL_19;
          }
          uint64_t result = (*(uint64_t (**)(void, void))(*(void *)**v1 + 64))(**v1, *((unsigned int *)v6 + 7));
          unsigned int v8 = v1[6];
          if (result) {
            break;
          }
          unsigned int v9 = (void *)v8[1];
          if (v9)
          {
            do
            {
              unint64_t v6 = v9;
              unsigned int v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              unint64_t v6 = (void *)v8[2];
              BOOL v7 = *v6 == (void)v8;
              unsigned int v8 = v6;
            }
            while (!v7);
          }
        }
        if (v8 == v3)
        {
LABEL_19:
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)**v1 + 64))(**v1, 0xFFFFFFFFLL);
          char v2 = result ^ 1;
          goto LABEL_3;
        }
        *((unsigned char *)v1 + 76) = 0;
      }
    }
  }
  return result;
}

unint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, (_DWORD *)a3);
  if (v5 == 0xFF)
  {
    uint64_t v7 = 2139095040;
    goto LABEL_11;
  }
  unsigned __int8 v6 = v5;
  if ((*(unsigned char *)(a1 + 72) & 0x40) == 0)
  {
    uint64_t v7 = 0;
    return v6 | (unint64_t)(v7 << 8);
  }
  float v8 = 0.0;
  if (*(unsigned char *)(a1 + 76))
  {
    uint64_t v9 = 56;
    if (*(_DWORD *)(a1 + 64) == 1) {
      uint64_t v9 = 48;
    }
    float v10 = *(unsigned char **)(a1 + v9);
    if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v10)) {
      float v8 = *(float *)(*(void *)v10 + 8);
    }
  }
  float v11 = *(float *)(a1 + 81);
  uint64_t v7 = 2139095040;
  if (v8 == INFINITY)
  {
LABEL_11:
    unsigned __int8 v6 = -1;
    return v6 | (unint64_t)(v7 << 8);
  }
  float v13 = *(float *)(a3 + 8);
  float v14 = NAN;
  if (v13 != -INFINITY && v8 != -INFINITY)
  {
    if (v8 == INFINITY || v13 == INFINITY)
    {
      float v14 = INFINITY;
      if ((LODWORD(v11) & 0x7FFFFFFFu) >= 0x7F800000) {
        float v14 = NAN;
      }
    }
    else
    {
      float v15 = v8 + v13;
      float v14 = NAN;
      if (v15 != -INFINITY)
      {
        int v16 = LODWORD(v11) & 0x7FFFFFFF;
        float v14 = NAN;
        float v17 = v15 - v11;
        if (v15 == INFINITY) {
          float v17 = INFINITY;
        }
        if (v16 <= 2139095039) {
          float v14 = v17;
        }
      }
    }
  }
  *(float *)(a3 + 8) = v14;
  float v18 = floorf((float)(v8 * 1024.0) + 0.5) * 0.00097656;
  if ((LODWORD(v8) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v18 = v8;
  }
  uint64_t v7 = LODWORD(v18);
  return v6 | (unint64_t)(v7 << 8);
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushedLabelFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0x7F800000FFLL;
  int v5 = *(_DWORD *)(a1 + 40);
  BOOL v6 = v5 != 1;
  BOOL v7 = v5 == 1;
  if (*(_DWORD *)(a3 + 4 * v6) == -1)
  {
    uint64_t v9 = 4 * v7;
    int v10 = *(_DWORD *)(a2 + v9);
    if (v10 == a4)
    {
      uint64_t v4 = 0;
      *(_DWORD *)(a2 + v9) = 0;
    }
    else if (!v10)
    {
      if (*(void *)(a1 + 280) == 1) {
        return *(void *)(a1 + 88);
      }
      uint64_t v13 = *(_DWORD *)(a1 + 64) == 1 ? 48 : 56;
      (*(void (**)(void, void))(***(void ***)(a1 + v13) + 56))(**(void **)(a1 + v13), *(unsigned int *)(a2 + 12));
      uint64_t v14 = *(_DWORD *)(a1 + 64) == 1 ? 48 : 56;
      float v15 = *(unsigned char **)(a1 + v14);
      if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v15)
        || (*(unsigned int (**)(void, uint64_t))(**(void **)v15 + 120))(*(void *)v15, a4))
      {
        return *(void *)(a1 + 88);
      }
    }
  }
  return v4;
}

unint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (*(_DWORD *)(a3 + 4 * (*(_DWORD *)(a1 + 40) == 1))) {
    return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  }
  uint64_t v9 = 4 * (*(_DWORD *)(a1 + 40) == 1);
  if (*(_DWORD *)(a2 + v9))
  {
    if ((*(unsigned char *)(a1 + 73) & 4) != 0) {
      return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
    }
  }
  uint64_t v10 = 56;
  if (*(_DWORD *)(a1 + 64) == 1) {
    uint64_t v10 = 48;
  }
  float v11 = *(unsigned char **)(a1 + v10);
  if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v11)) {
    return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  }
  uint64_t v12 = *(void *)v11;
  int v13 = *(_DWORD *)(*(void *)v11 + 24);
  if (v13 == -1) {
    return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  }
  int v14 = *(_DWORD *)(v12 + 12);
  int v15 = *(_DWORD *)(v12 + 16);
  float v16 = *(float *)(v12 + 20);
  if (*(_DWORD *)(a1 + 40) == 1) {
    int v17 = *(_DWORD *)(v12 + 12);
  }
  else {
    int v17 = *(_DWORD *)(v12 + 16);
  }
  *(_DWORD *)(a2 + v9) = v17;
  *(_DWORD *)a3 = v14;
  *(_DWORD *)(a3 + 4) = v15;
  float v18 = *(float *)(a3 + 8);
  float v19 = NAN;
  if (v18 != -INFINITY && v16 != -INFINITY)
  {
    float v19 = INFINITY;
    BOOL v20 = v18 == INFINITY || v16 == INFINITY;
    float v21 = v16 + v18;
    if (!v20) {
      float v19 = v21;
    }
  }
  *(float *)(a3 + 8) = v19;
  *(_DWORD *)(a3 + 12) = v13;
  return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = (_DWORD *)a2;
  *(unsigned char *)(a1 + 76) = 0;
  if (*a3 == -1)
  {
    if (!*(unsigned char *)(a1 + 33))
    {
      unsigned __int8 v5 = *(unsigned char *)(a1 + 34) ^ 1;
      goto LABEL_7;
    }
    return 255;
  }
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4 == -1)
  {
    int v6 = *(unsigned __int8 *)(a1 + 32);
    BOOL v7 = v6 == 1;
    if (v6 == 1) {
      unsigned __int8 v8 = -1;
    }
    else {
      unsigned __int8 v8 = 0;
    }
    unsigned __int8 v10 = v8;
    if (!v7) {
      goto LABEL_14;
    }
    return 255;
  }
  if (!v4) {
    return 255;
  }
  unsigned __int8 v5 = 0;
LABEL_7:
  unsigned __int8 v10 = v5;
LABEL_14:
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    a2 = (uint64_t)a3;
    a3 = v3;
  }
  return fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, (uint64_t)a3, &v10);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v7 = *(_DWORD *)(a1 + 72);
  if (*(_DWORD *)(a2 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
  {
    if ((v7 & 0x100) == 0) {
      return *a4;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    return *a4;
  }
  *(unsigned char *)(a1 + 76) = 1;
  if (*(_DWORD *)(a1 + 64) == 1) {
    uint64_t v8 = 48;
  }
  else {
    uint64_t v8 = 56;
  }
  (*(void (**)(void, void))(***(void ***)(a1 + v8) + 56))(**(void **)(a1 + v8), *(unsigned int *)(a2 + 12));
  int v9 = *(_DWORD *)(a1 + 64);
  BOOL v10 = v9 == 1;
  if (v9 == 1) {
    uint64_t v11 = 48;
  }
  else {
    uint64_t v11 = 56;
  }
  uint64_t v12 = *(unsigned char **)(a1 + v11);
  if (v10) {
    uint64_t v13 = 56;
  }
  else {
    uint64_t v13 = 48;
  }
  uint64_t v14 = (*(uint64_t (**)(void))(***(void ***)(a1 + v13) + 32))(**(void **)(a1 + v13));
  uint64_t v15 = *(unsigned int *)(a3 + 12);
  if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v12)
    || (*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)v12 + 128))(*(void *)v12, v14, v15))
  {
    return *a4;
  }
  return 255;
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(void *a1, long long *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  int v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  unint64_t v10 = a1[11];
  uint64_t v11 = (uint64_t)(v10 - v9) / 20;
  unsigned int v25 = v11;
  unint64_t v12 = a1[12];
  if (v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v9) >> 2);
    uint64_t v16 = 2 * v15;
    if (2 * v15 <= v11 + 1) {
      uint64_t v16 = v11 + 1;
    }
    if (v15 >= 0x666666666666666) {
      unint64_t v17 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)(a1 + 12), v17);
    }
    else {
      float v18 = 0;
    }
    float v19 = &v18[20 * v11];
    BOOL v20 = &v18[20 * v17];
    long long v21 = *a2;
    *((_DWORD *)v19 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)float v19 = v21;
    uint64_t v14 = v19 + 20;
    int v23 = (char *)a1[10];
    unint64_t v22 = (char *)a1[11];
    if (v22 != v23)
    {
      do
      {
        long long v24 = *(_OWORD *)(v22 - 20);
        *((_DWORD *)v19 - 1) = *((_DWORD *)v22 - 1);
        *(_OWORD *)(v19 - 20) = v24;
        v19 -= 20;
        v22 -= 20;
      }
      while (v22 != v23);
      unint64_t v22 = (char *)a1[10];
    }
    a1[10] = v19;
    a1[11] = v14;
    a1[12] = v20;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v13 = *a2;
    *(_DWORD *)(v10 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v10 = v13;
    uint64_t v14 = (char *)(v10 + 20);
  }
  a1[11] = v14;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v25, &v25);
  return v25;
}

void fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>()
{
}

void sub_1B1F44164(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3A7E0;
  uint64_t v8 = *(void *)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  uint64_t v9 = *(void *)(v8 + 120);
  *(void *)(a1 + 144) = v8 + 120;
  *(void *)(a1 + 152) = v8 + 200;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(****(void ****)(a1 + 152) + 32))(***(void ***)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 144) + 40))(***(void ***)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 152) + 40))(***(void ***)(a1 + 152), v12);
  unint64_t v15 = fst::ComposeProperties(v13, v14);
  int v16 = *(_DWORD *)(*(void *)(a1 + 136) + 40);
  uint64_t v17 = v15 | 4;
  if (v16 != 3) {
    uint64_t v17 = v15;
  }
  BOOL v18 = v16 == 1;
  uint64_t v19 = 0x3FFCCC300004;
  if (v18) {
    uint64_t v19 = 0x3FFC330C0004;
  }
  *(void *)(a1 + 8) = v17 & v19 | *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL;
  return a1;
}

void sub_1B1F44424(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(****(void ****)(a1 + 144) + 40))(***(void ***)(a1 + 144), 0) & 4) != 0|| (char v4 = (*(uint64_t (**)(void, void))(****(void ****)(a1 + 152) + 40))(***(void ***)(a1 + 152), 0), *(_DWORD *)(*(void *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(void *)(a1 + 8) |= 4uLL;
    }
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Copy()
{
}

void sub_1B1F4465C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Expand(void *a1, int a2)
{
  char v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 20 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  uint64_t v8 = *((void *)v4 + 1);
  LODWORD(v4) = v4[4];
  uint64_t v17 = v8;
  int v18 = (int)v4;
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v7, v5, v6, &v17);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v10 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v11 = (_DWORD *)a1[19];
    uint64_t v12 = (uint64_t)a1;
    int v13 = a2;
    uint64_t v14 = v6;
    uint64_t v15 = v5;
    int v16 = 1;
  }
  else
  {
    uint64_t v9 = a1[20];
    uint64_t v10 = a1[21];
    uint64_t v11 = (_DWORD *)a1[18];
    uint64_t v12 = (uint64_t)a1;
    int v13 = a2;
    uint64_t v14 = v5;
    uint64_t v15 = v6;
    int v16 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(v12, v13, v9, v14, v10, v15, v11, v16);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 0) == a3)(*(void (**)(void, void))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 0); {
  return 0;
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    unsigned int v4 = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    uint64_t result = 0xFFFFFFFFLL;
    if (v4 != -1)
    {
      long long v5 = __PAIR64__(v4, v3);
      int v6 = -1;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(a1[22], &v5, 1);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  long long v5 = (unsigned int *)(v4 + 20 * a2);
  uint64_t v6 = *v5;
  float result = (*(float (**)(void, uint64_t))(****(void ****)(a1 + 144) + 96))(***(void ***)(a1 + 144), v6);
  float v16 = result;
  *(float *)&uint64_t v13 = result;
  int v17 = 2139095040;
  if (result != INFINITY)
  {
    uint64_t v8 = v5[1];
    float result = (*(float (**)(void, uint64_t, float, float))(****(void ****)(a1 + 152) + 96))(***(void ***)(a1 + 152), v8, result, result);
    float v15 = result;
    *(float *)&uint64_t v13 = result;
    int v17 = 2139095040;
    if (result != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      uint64_t v10 = v4 + 20 * a2;
      uint64_t v11 = *(void *)(v10 + 8);
      LODWORD(v10) = *(_DWORD *)(v10 + 16);
      uint64_t v13 = v11;
      int v14 = v10;
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v9, v6, v8, &v13);
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(*(void *)(a1 + 136), &v16);
      float result = NAN;
      if (v16 != -INFINITY)
      {
        float result = NAN;
        if (v15 != -INFINITY)
        {
          float result = INFINITY;
          if (v15 != INFINITY && v16 != INFINITY) {
            return v16 + v15;
          }
        }
      }
    }
  }
  return result;
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B1F44B2C(_Unwind_Exception *a1)
{
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void **)fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter(a1, a2, a3, a4, a5);
  *(_DWORD *)(a1 + 40) = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(*v6, *(void **)(a1 + 8));
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy();
}

void sub_1B1F44D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1F44E70(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3A7E0;
  uint64_t v2 = a1[17];
  if (v2)
  {
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 200);
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 120);
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    uint64_t v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40F6F5CAE4);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    long long v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F45080(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter()
{
}

void sub_1B1F451D4(_Unwind_Exception *a1)
{
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter()
{
}

void sub_1B1F452FC(_Unwind_Exception *a1)
{
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

void fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter()
{
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(void *)(a1 + 88) = v5;
  LODWORD(v5) = *(_DWORD *)a4;
  *(unsigned char *)(a1 + 84) = *((unsigned char *)a4 + 4);
  *(_DWORD *)(a1 + 80) = v5;
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(a1, a2, a3, a4);
  if ((*(unsigned char *)(a1 + 72) & 0x80) != 0)
  {
    uint64_t v6 = *(_DWORD *)(a1 + 40) == 1
       ? *(uint64_t (**)(void))(**(void **)(a1 + 104) + 40)
       : *(uint64_t (**)(void))(**(void **)(a1 + 112) + 40);
    *(void *)(a1 + 280) = v6();
    int v7 = *(_DWORD *)(a1 + 96);
    std::__tree<int>::destroy(a1 + 136, *(void **)(a1 + 144));
    *(void *)(a1 + 136) = a1 + 144;
    *(void *)(a1 + 144) = 0;
    uint64_t v8 = *(void **)(a1 + 224);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = -1;
    std::__tree<int>::destroy(a1 + 216, v8);
    *(void *)(a1 + 216) = a1 + 224;
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = -1;
    if (v7 != -1)
    {
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 120, v7);
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 200, v7);
    }
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(****(void ****)(a1 + 144) + 104))(***(void ***)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 152) + 104))(***(void ***)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1F45654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, int a8)
{
  int v12 = a4;
  (*(void (**)(void, uint64_t))(***(void ***)a7 + 56))(**(void **)a7, a4);
  a7[18] = v12;
  v19[0] = a8 - 1;
  v19[1] = a8 << 31 >> 31;
  void v19[2] = 0;
  v19[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(a1, a2, a7, v19, a8);
  unint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v16);
  while (1)
  {
    if (!v16[0])
    {
      if (v18 >= v16[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v15 = (int *)(v16[1] + 16 * v18);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v16[0] + 24))(v16[0])) {
      break;
    }
    if (!v16[0]) {
      goto LABEL_7;
    }
    char v15 = (int *)(*(uint64_t (**)(void))(*(void *)v16[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(a1, a2, a7, v15, a8);
    if (v16[0]) {
      (*(void (**)(void))(*(void *)v16[0] + 40))(v16[0]);
    }
    else {
      ++v18;
    }
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(void *)v16[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v17) {
    --*v17;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1F45898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(uint64_t a1, int a2, unsigned char *a3, int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Find(a3, *v10);
  if (result && !a3[76])
  {
    do
    {
      int v12 = (long long *)(a3 + 60);
      if (!a3[56]) {
        int v12 = (long long *)(*(uint64_t (**)(void))(***(void ***)a3 + 80))(**(void **)a3);
      }
      long long v13 = *v12;
      long long v24 = *(_OWORD *)a4;
      long long v25 = v13;
      if (a5)
      {
        unint64_t v14 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)&v24, (uint64_t)&v25);
        unint64_t v22 = v14;
        int v23 = v15;
        if ((_BYTE)v14 == 0xFF)
        {
          LODWORD(v27) = v14 >> 8;
          int v26 = 2139095040;
          if (v27 == INFINITY && v15 == -1) {
            goto LABEL_21;
          }
        }
        int v17 = (unsigned int *)&v24;
        unint64_t v18 = &v25;
      }
      else
      {
        unint64_t v19 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)&v25, (uint64_t)&v24);
        unint64_t v22 = v19;
        int v23 = v20;
        if ((_BYTE)v19 == 0xFF)
        {
          LODWORD(v27) = v19 >> 8;
          int v26 = 2139095040;
          if (v27 == INFINITY && v20 == -1) {
            goto LABEL_21;
          }
        }
        int v17 = (unsigned int *)&v25;
        unint64_t v18 = &v24;
      }
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, (uint64_t)&v22);
LABEL_21:
      uint64_t result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next((uint64_t)a3);
    }
    while (!a3[76]);
  }
  return result;
}

unint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if ((*(unsigned char *)(a1 + 72) & 0x80) == 0)
  {
    unint64_t v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
    goto LABEL_3;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 96);
  if (v8 != -1)
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      a2 = a3;
      a3 = v4;
    }
    unint64_t v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushedLabelFilterArc(a1, a2, a3, v8);
    goto LABEL_17;
  }
  unint64_t v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
  unsigned int v12 = v6;
  char v13 = BYTE4(v6);
  if ((_BYTE)v6 == 0xFF)
  {
    LODWORD(v15) = v6 >> 8;
    int v14 = 2139095040;
    if (v15 == INFINITY)
    {
      unint64_t v7 = 0;
      unint64_t v6 = 0x7F800000FFLL;
      return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
    }
  }
  if (*(unsigned char *)(a1 + 76))
  {
    if (*(_DWORD *)(a1 + 40) == 1)
    {
      uint64_t v9 = v4;
      uint64_t v10 = v3;
    }
    else
    {
      uint64_t v9 = v3;
      uint64_t v10 = v4;
    }
    unint64_t v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelFilterArc(a1, v9, v10, &v12);
LABEL_17:
    unint64_t v7 = v6 & 0xFFFFFF0000000000;
    return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
  }
LABEL_3:
  unint64_t v7 = 0;
  return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
}

unint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, (_DWORD *)a3);
  if (v5 == 0xFF)
  {
    uint64_t v7 = 2139095040;
    goto LABEL_11;
  }
  unsigned __int8 v6 = v5;
  if ((*(unsigned char *)(a1 + 72) & 0x40) == 0)
  {
    uint64_t v7 = 0;
    return v6 | (unint64_t)(v7 << 8);
  }
  float v8 = 0.0;
  if (*(unsigned char *)(a1 + 76))
  {
    uint64_t v9 = 56;
    if (*(_DWORD *)(a1 + 64) == 1) {
      uint64_t v9 = 48;
    }
    uint64_t v10 = *(unsigned char **)(a1 + v9);
    if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v10)) {
      float v8 = *(float *)(*(void *)v10 + 8);
    }
  }
  float v11 = *(float *)(a1 + 81);
  uint64_t v7 = 2139095040;
  if (v8 == INFINITY)
  {
LABEL_11:
    unsigned __int8 v6 = -1;
    return v6 | (unint64_t)(v7 << 8);
  }
  float v13 = *(float *)(a3 + 8);
  float v14 = NAN;
  if (v13 != -INFINITY && v8 != -INFINITY)
  {
    if (v8 == INFINITY || v13 == INFINITY)
    {
      float v14 = INFINITY;
      if ((LODWORD(v11) & 0x7FFFFFFFu) >= 0x7F800000) {
        float v14 = NAN;
      }
    }
    else
    {
      float v15 = v8 + v13;
      float v14 = NAN;
      if (v15 != -INFINITY)
      {
        int v16 = LODWORD(v11) & 0x7FFFFFFF;
        float v14 = NAN;
        float v17 = v15 - v11;
        if (v15 == INFINITY) {
          float v17 = INFINITY;
        }
        if (v16 <= 2139095039) {
          float v14 = v17;
        }
      }
    }
  }
  *(float *)(a3 + 8) = v14;
  float v18 = floorf((float)(v8 * 1024.0) + 0.5) * 0.00097656;
  if ((LODWORD(v8) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v18 = v8;
  }
  uint64_t v7 = LODWORD(v18);
  return v6 | (unint64_t)(v7 << 8);
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = (_DWORD *)a2;
  *(unsigned char *)(a1 + 76) = 0;
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4 == -1)
  {
    if (*(unsigned char *)(a1 + 33)) {
      return 255;
    }
    unsigned __int8 v9 = *(unsigned char *)(a1 + 34) ^ 1;
  }
  else if (*a3 == -1)
  {
    int v6 = *(unsigned __int8 *)(a1 + 32);
    if (*(unsigned char *)(a1 + 32)) {
      unsigned __int8 v7 = -1;
    }
    else {
      unsigned __int8 v7 = 0;
    }
    unsigned __int8 v9 = v7;
    if (v6) {
      return 255;
    }
  }
  else
  {
    if (v4) {
      unsigned __int8 v5 = 0;
    }
    else {
      unsigned __int8 v5 = -1;
    }
    unsigned __int8 v9 = v5;
    if (!v4) {
      return 255;
    }
  }
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    a2 = (uint64_t)a3;
    a3 = v3;
  }
  return fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, (uint64_t)a3, &v9);
}

void *fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A36670;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    int v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B1F45EC4(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + 8) = a2;
  return result;
}

void fst::StateIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::ArcIterator(&v20, *(void *)(a1 + 8), v6);
    unint64_t v7 = v21;
    uint64_t v8 = *((void *)v20 + 3);
    uint64_t v9 = *((void *)v20 + 4) - v8;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      uint64_t v11 = v9 >> 4;
      int v12 = *(_DWORD *)(v10 + 68);
      float v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        int v15 = *v13;
        v13 += 4;
        int v14 = v15;
        if (v12 <= v15)
        {
          int v12 = v14 + 1;
          *(_DWORD *)(v10 + 68) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      unint64_t v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v16 = *(_DWORD *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(v17 + 68);
    --*((_DWORD *)v20 + 13);
    BOOL v4 = v16 >= v18;
    if (v16 < v18) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1F460B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1F4615C(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

void fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1F46250(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3A660;
  uint64_t v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1F464D4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1F466F4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  BOOL v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v8 = a1[20];
    uint64_t v7 = a1[21];
    long long v9 = (void *)a1[19];
    uint64_t v10 = (uint64_t)a1;
    int v11 = a2;
    uint64_t v12 = v6;
    uint64_t v13 = v5;
    int v14 = 1;
  }
  else
  {
    uint64_t v7 = a1[20];
    uint64_t v8 = a1[21];
    long long v9 = (void *)a1[18];
    uint64_t v10 = (uint64_t)a1;
    int v11 = a2;
    uint64_t v12 = v5;
    uint64_t v13 = v6;
    int v14 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v10, v11, v7, v12, v8, v13, v9, v14);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1F4688C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  unsigned int v3 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 80) + 12 * a2);
  float v4 = (*(float (**)(void, void))(***(void ***)(a1 + 144) + 96))(**(void **)(a1 + 144), *v3);
  float v5 = v4;
  float v6 = v4;
  if (v4 != INFINITY)
  {
    float v7 = (*(float (**)(void, void, float, float))(***(void ***)(a1 + 152) + 96))(**(void **)(a1 + 152), v3[1], v4, v4);
    float v6 = v7;
    if (v7 != INFINITY)
    {
      float v6 = NAN;
      if (v5 != -INFINITY && v7 != -INFINITY)
      {
        float v6 = INFINITY;
        BOOL v8 = v7 == INFINITY || v5 == INFINITY;
        float v9 = v5 + v7;
        if (!v8) {
          return v9;
        }
      }
    }
  }
  return v6;
}

void *fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NullComposeFilter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *a1 = a4;
  if (!a5) {
    operator new();
  }
  a1[1] = a5;
  a1[2] = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  a1[3] = (*(uint64_t (**)(void))(**(void **)a1[1] + 32))(*(void *)a1[1]);
  return a1;
}

void sub_1B1F46B98(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3A660;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x60C40FFD3A10ELL);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    float v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F46D84(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NullComposeFilter()
{
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1F46FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1F47214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        long long v18 = *(_OWORD *)a4;
        long long v19 = v12;
        if (a5)
        {
          if (DWORD1(v18) == -1) {
            goto LABEL_19;
          }
          char v13 = v19 == -1 ? -1 : 0;
          char v17 = v13;
          if (v19 == -1) {
            goto LABEL_19;
          }
          char v14 = (unsigned int *)&v18;
          char v15 = &v19;
        }
        else
        {
          if (DWORD1(v19) == -1) {
            goto LABEL_19;
          }
          char v16 = v18 == -1 ? -1 : 0;
          char v17 = v16;
          if (v18 == -1) {
            goto LABEL_19;
          }
          char v14 = (unsigned int *)&v19;
          char v15 = &v18;
        }
        fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v14, (uint64_t)v15, &v17);
LABEL_19:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3C4E0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1F4750C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      int v3 = (void **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    int v3 = (void **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C4E0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3C4E0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy();
}

void sub_1B1F47BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    uint64_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      uint64_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          int v6 = *(_DWORD *)(a1 + 28);
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          int v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            int v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        char v13 = (unint64_t *)v10;
      }
      else {
        char v13 = (unint64_t *)v9;
      }
      unint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        char v16 = (uint64_t *)v10;
      }
      else {
        char v16 = (uint64_t *)v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1; {
    }
      }
  }
  return 0;
}

void fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1F4800C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3A8A0;
  int v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1F48290(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1F484B0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = (void *)a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = (void *)a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1F48664(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  char v5 = (int *)(v4 + 12 * a2);
  int v6 = *v5;
  float v7 = (*(float (**)(void, void))(***(void ***)(a1 + 144) + 96))(**(void **)(a1 + 144), *v5);
  float v11 = v7;
  if (v7 != INFINITY)
  {
    uint64_t v8 = v5[1];
    float v9 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 152) + 96))(**(void **)(a1 + 152), v8);
    float v11 = v9;
    if (v9 != INFINITY)
    {
      uint64_t v10 = *(void *)(a1 + 136);
      LOBYTE(v11) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(v10, v6, v8, &v11);
    }
  }
}

uint64_t fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a5 + 32))();
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1F48984(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3A8A0;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40AD892F49);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F48B68(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter()
{
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    float v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    int v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1F48D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1F48FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        long long v26 = *(_OWORD *)a4;
        long long v27 = v12;
        if (a5)
        {
          uint64_t v13 = *(unsigned __int8 **)(a1 + 136);
          if (v27 == -1)
          {
            if (!v13[33])
            {
              char v14 = v13[34] ^ 1;
LABEL_16:
              char v25 = v14;
LABEL_24:
              int v20 = (unsigned int *)&v26;
              unint64_t v21 = &v27;
              goto LABEL_30;
            }
          }
          else
          {
            if (DWORD1(v26) == -1)
            {
              int v17 = v13[32];
              BOOL v18 = v17 == 1;
              if (v17 == 1) {
                char v19 = -1;
              }
              else {
                char v19 = 0;
              }
              char v25 = v19;
              if (v18) {
                goto LABEL_31;
              }
              goto LABEL_24;
            }
            if (DWORD1(v26))
            {
              char v14 = 0;
              goto LABEL_16;
            }
          }
        }
        else
        {
          char v15 = *(unsigned __int8 **)(a1 + 136);
          if (v26 == -1)
          {
            if (!v15[33])
            {
              char v16 = v15[34] ^ 1;
LABEL_19:
              char v25 = v16;
LABEL_29:
              int v20 = (unsigned int *)&v27;
              unint64_t v21 = &v26;
LABEL_30:
              fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v20, (uint64_t)v21, &v25);
            }
          }
          else
          {
            if (DWORD1(v27) == -1)
            {
              int v22 = v15[32];
              BOOL v23 = v22 == 1;
              if (v22 == 1) {
                char v24 = -1;
              }
              else {
                char v24 = 0;
              }
              char v25 = v24;
              if (v23) {
                goto LABEL_31;
              }
              goto LABEL_29;
            }
            if (DWORD1(v27))
            {
              char v16 = 0;
              goto LABEL_19;
            }
          }
        }
LABEL_31:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3C6E0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1F4932C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      int v3 = (void **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    int v3 = (void **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C6E0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3C6E0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy();
}

void sub_1B1F499F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    uint64_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      uint64_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          int v6 = *(_DWORD *)(a1 + 28);
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          int v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            int v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        uint64_t v13 = (uint64_t *)v10;
      }
      else {
        uint64_t v13 = (uint64_t *)v9;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        char v16 = (uint64_t *)v10;
      }
      else {
        char v16 = (uint64_t *)v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1; {
    }
      }
  }
  return 0;
}

void fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1F49E2C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3A6C0;
  int v8 = *(long long **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  long long v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(***(void ***)(a1 + 152) + 32))(**(void **)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1F4A0B0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1F4A2D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = (void *)a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = (void *)a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1F4A484(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  char v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  float v10 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 144) + 96))(**(void **)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    uint64_t v7 = v5[1];
    float v8 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 152) + 96))(**(void **)(a1 + 152), v7);
    float v10 = v8;
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      LOBYTE(v10) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MatchComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 32))(**(void **)(a1 + 8));
  *(void *)(a1 + 32) = -1;
  *(unsigned char *)(a1 + 40) = -1;
  return a1;
}

void sub_1B1F4A7D4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3A6C0;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C4035244DBALL);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F4A9C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MatchComposeFilter()
{
}

void fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (*(_DWORD *)(a1 + 32) != a2 || *(_DWORD *)(a1 + 36) != a3 || *a4 != *(unsigned char *)(a1 + 40))
  {
    *(_DWORD *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 36) = a3;
    *(unsigned char *)(a1 + 40) = *a4;
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), a2);
    BOOL v10 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2) == INFINITY
       && v7 == v8;
    *(unsigned char *)(a1 + 41) = v10;
    *(unsigned char *)(a1 + 43) = v8 == 0;
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 48))(*(void *)(a1 + 24), a3);
    BOOL v14 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a3) == INFINITY
       && v11 == v12;
    *(unsigned char *)(a1 + 42) = v14;
    *(unsigned char *)(a1 + 44) = v12 == 0;
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1F4AE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  (*(void (**)(void, uint64_t))(*(void *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1F4B050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  BOOL v10 = a4 + 1;
  if (!a5) {
    BOOL v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        long long v16 = *(_OWORD *)a4;
        long long v17 = v12;
        if (a5)
        {
          char v15 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(a1 + 136), (uint64_t)&v16, &v17);
          if (v15 != -1)
          {
            uint64_t v13 = (unsigned int *)&v16;
            char v14 = &v17;
LABEL_10:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v13, (uint64_t)v14, &v15);
          }
        }
        else
        {
          char v15 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(a1 + 136), (uint64_t)&v17, &v16);
          if (v15 != -1)
          {
            uint64_t v13 = (unsigned int *)&v17;
            char v14 = &v16;
            goto LABEL_10;
          }
        }
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3C560;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1F4B344(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      int v3 = (void **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    int v3 = (void **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C560;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3C560;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy();
}

void sub_1B1F4BA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    BOOL v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      BOOL v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          int v6 = *(_DWORD *)(a1 + 28);
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          int v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            int v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        uint64_t v13 = (uint64_t *)v10;
      }
      else {
        uint64_t v13 = (uint64_t *)v9;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        long long v16 = (uint64_t *)v10;
      }
      else {
        long long v16 = (uint64_t *)v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1 || ((*(void (**)(uint64_t, void))(*(void *)a1 + 280))(a1, 0), *a2 != 2)) {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 288))(a1, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v6, &v12);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 24))(v12))
        {
          uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
          uint64_t v8 = *(void *)(v7 + 8);
          if (*a2 == 1) {
            uint64_t v9 = (unsigned int *)v7;
          }
          else {
            uint64_t v9 = (unsigned int *)(v7 + 4);
          }
          v11[0] = *v9 | ((unint64_t)*v9 << 32);
          v11[1] = v8;
          (*(void (**)(uint64_t, void *))(*(void *)v12 + 88))(v12, v11);
          (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
        }
        if (v12) {
          (*(void (**)(void))(*(void *)v12 + 8))();
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v6);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 184))(a1, v6);
        uint64_t v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    unint64_t v10 = fst::ProjectProperties(v5, *a2 == 1);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v10, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1F4C108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, int a2)
{
  memset(__p, 0, sizeof(__p));
  fst::ShortestDistance<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, (uint64_t)__p, a2 == 0);
}

void sub_1B1F4C1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::VectorFst();
  }
  fst::AutoQueue<int>::AutoQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>((uint64_t)v3, a1);
}

void sub_1B1F4C468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One(void)::one;
}

void sub_1B1F4C578(_Unwind_Exception *a1)
{
}

void *fst::ComputeTotalWeight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) <= (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
      uint64_t v7 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    }
    else {
      uint64_t v7 = (_DWORD *)(*a2 + 40 * (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1));
    }
    *(_DWORD *)a4 = *v7;
    uint64_t result = std::list<int>::list((void *)(a4 + 8), (uint64_t)(v7 + 2));
    *(_DWORD *)(a4 + 32) = v7[8];
  }
  else
  {
    uint64_t v8 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    *(_DWORD *)a4 = *v8;
    uint64_t result = std::list<int>::list((void *)(a4 + 8), (uint64_t)(v8 + 2));
    *(_DWORD *)(a4 + 32) = v8[8];
    uint64_t v10 = *a2;
    if (a2[1] != *a2)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)a1 + 32))(&v21, a1, v12);
        fst::Times<int,(fst::StringType)1>((int *)(v10 + v11), (uint64_t)&v21, (uint64_t)&v30);
        float v13 = *(float *)(v10 + v11 + 32);
        float v14 = NAN;
        if (v13 != -INFINITY)
        {
          float v14 = NAN;
          if (v23 != -INFINITY)
          {
            float v14 = INFINITY;
            BOOL v15 = v23 == INFINITY || v13 == INFINITY;
            float v16 = v13 + v23;
            if (!v15) {
              float v14 = v16;
            }
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)v24, &v30, v14);
        std::__list_imp<char *>::clear(v31);
        fst::Plus<int>(a4, (uint64_t)v24, (uint64_t)&v30);
        float v17 = *(float *)(a4 + 32);
        float v18 = v26;
        if (v17 != INFINITY)
        {
          if (v26 == INFINITY)
          {
            float v18 = *(float *)(a4 + 32);
          }
          else if (v17 <= v26)
          {
            float v20 = expf(-(float)(v26 - v17));
            float v18 = v17 - logf(v20 + 1.0);
          }
          else
          {
            float v19 = expf(-(float)(v17 - v26));
            float v18 = v18 - logf(v19 + 1.0);
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v27, &v30, v18);
        std::__list_imp<char *>::clear(v31);
        *(_DWORD *)a4 = v27;
        if (&v27 != (int *)a4) {
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a4 + 8), v28[1], (uint64_t)v28);
        }
        *(_DWORD *)(a4 + 32) = v29;
        std::__list_imp<char *>::clear(v28);
        std::__list_imp<char *>::clear(v25);
        uint64_t result = std::__list_imp<char *>::clear(v22);
        ++v12;
        uint64_t v10 = *a2;
        v11 += 40;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v12);
    }
  }
  return result;
}

void sub_1B1F4C8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  std::__list_imp<char *>::clear(v11);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(a10);
  std::__list_imp<char *>::clear(a9);
  _Unwind_Resume(a1);
}

void sub_1B1F4C91C()
{
}

uint64_t fst::StringWeight<int,(fst::StringType)1>::One()
{
  {
    operator new();
  }
  return fst::StringWeight<int,(fst::StringType)1>::One(void)::one;
}

void sub_1B1F4C9A4(_Unwind_Exception *a1)
{
}

uint64_t fst::Reweight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t *a1, void *a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 160))(a1);
  if (!result) {
    return result;
  }
  if (!a3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&v118, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&v118, "ERROR");
    }
    uint64_t v44 = fst::LogMessage::LogMessage((fst *)&v125, (uint64_t)&v118);
    uint64_t v45 = (void *)fst::cerr(v44);
    uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Reweight: Reweighting to the initial state requires ", 52);
    unint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Weight to be left distributive: ", 32);
    uint64_t v59 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Type();
    int v60 = *(char *)(v59 + 23);
    if (v60 >= 0) {
      uint64_t v61 = v59;
    }
    else {
      uint64_t v61 = *(void *)v59;
    }
    if (v60 >= 0) {
      uint64_t v62 = *(unsigned __int8 *)(v59 + 23);
    }
    else {
      uint64_t v62 = *(void *)(v59 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v61, v62);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v125);
    if (SHIBYTE(v120[0]) < 0) {
      operator delete(v118);
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, 4, 4);
  }
  signed int v132 = 0;
  v95 = a1;
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 128))(a1, &v130);
  while (1)
  {
    if (v130)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v130 + 16))(v130)) {
        break;
      }
      if (v130)
      {
        int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v130 + 24))(v130);
        goto LABEL_10;
      }
    }
    else if (v132 >= v131)
    {
      break;
    }
    int v7 = v132;
LABEL_10:
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) == v7) {
      break;
    }
    uint64_t v96 = v7;
    uint64_t v8 = *a2 + 40 * v7;
    int v125 = *(_DWORD *)v8;
    std::list<int>::list(&v126, v8 + 8);
    float v129 = *(float *)(v8 + 32);
    uint64_t v9 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    if (v125) {
      uint64_t v11 = v128 + 1;
    }
    else {
      uint64_t v11 = 0;
    }
    if (*(_DWORD *)v9) {
      uint64_t v12 = *(void *)(v9 + 24) + 1;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v11 != v12) {
      goto LABEL_31;
    }
    char v13 = 0;
    uint64_t v14 = v127;
    BOOL v15 = (uint64_t *)(v9 + 16);
    BOOL v16 = v125 && v125 == *(_DWORD *)v9;
    BOOL v17 = !v16;
    while (1)
    {
      uint64_t v18 = *v15;
      if ((v13 & 1) == 0 && v17) {
        break;
      }
      if ((uint64_t *)v14 == &v126) {
        goto LABEL_30;
      }
      if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v18 + 16)) {
        goto LABEL_31;
      }
      uint64_t v14 = *(void *)(v14 + 8);
      BOOL v15 = (uint64_t *)(v18 + 8);
      char v13 = 1;
    }
    if (v125) {
      goto LABEL_31;
    }
LABEL_30:
    *(float *)&v118 = v129;
    LODWORD(v113) = 0;
    LODWORD(v113) = *(_DWORD *)(v9 + 32);
    v10.n128_f32[0] = v129;
    if (v129 != *(float *)&v113)
    {
LABEL_31:
      (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*v95 + 296))(v95, v96, &v124);
      while (!(*(unsigned int (**)(uint64_t))(*(void *)v124 + 24))(v124))
      {
        uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v124 + 32))(v124);
        v118 = *(void **)v19;
        LODWORD(v119) = *(_DWORD *)(v19 + 8);
        std::list<int>::list(v120, v19 + 16);
        unint64_t v20 = *(int *)(v19 + 48);
        float v122 = *(float *)(v19 + 40);
        int v123 = v20;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) > v20)
        {
          uint64_t v21 = *a2 + 40 * (int)v20;
          LODWORD(v113) = *(_DWORD *)v21;
          std::list<int>::list(&v114, v21 + 8);
          float v117 = *(float *)(v21 + 32);
          uint64_t v22 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          if (v113) {
            uint64_t v23 = v116 + 1;
          }
          else {
            uint64_t v23 = 0;
          }
          if (*(_DWORD *)v22) {
            uint64_t v24 = *(void *)(v22 + 24) + 1;
          }
          else {
            uint64_t v24 = 0;
          }
          if (v23 != v24) {
            goto LABEL_54;
          }
          char v25 = 0;
          uint64_t v26 = v115;
          int v27 = (uint64_t *)(v22 + 16);
          BOOL v28 = v113 && v113 == *(_DWORD *)v22;
          BOOL v29 = !v28;
          while (1)
          {
            uint64_t v30 = *v27;
            if ((v25 & 1) == 0 && v29) {
              break;
            }
            if ((uint64_t *)v26 == &v114) {
              goto LABEL_53;
            }
            if (*(_DWORD *)(v26 + 16) != *(_DWORD *)(v30 + 16)) {
              goto LABEL_54;
            }
            uint64_t v26 = *(void *)(v26 + 8);
            int v27 = (uint64_t *)(v30 + 8);
            char v25 = 1;
          }
          if (v113) {
            goto LABEL_54;
          }
LABEL_53:
          float v110 = v117;
          float v107 = 0.0;
          float v107 = *(float *)(v22 + 32);
          if (v117 != v107)
          {
LABEL_54:
            if (a3 == 1)
            {
              fst::Times<int,(fst::StringType)1>(&v125, (uint64_t)&v119, (uint64_t)&v133);
              float v31 = NAN;
              if (v129 != -INFINITY)
              {
                float v31 = NAN;
                if (v122 != -INFINITY)
                {
                  float v31 = INFINITY;
                  if (v122 != INFINITY && v129 != INFINITY) {
                    float v31 = v129 + v122;
                  }
                }
              }
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v107, (int *)&v133, v31);
              std::__list_imp<char *>::clear(v134);
              fst::DivideRight<int,(fst::StringType)1>((int *)&v107, (int *)&v113, (uint64_t)&v133);
              float v33 = NAN;
              if (v109 != -INFINITY)
              {
                if ((LODWORD(v117) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                {
                  float v33 = INFINITY;
                  if (v109 != INFINITY) {
                    float v33 = v109 - v117;
                  }
                }
                else
                {
                  float v33 = NAN;
                }
              }
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v110, (int *)&v133, v33);
              std::__list_imp<char *>::clear(v134);
              *(float *)&uint64_t v119 = v110;
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v120, v111[1], (uint64_t)v111);
              float v122 = v112;
              std::__list_imp<char *>::clear(v111);
              std::__list_imp<char *>::clear(v108);
            }
            (*(void (**)(uint64_t, void **))(*(void *)v124 + 88))(v124, &v118);
          }
          std::__list_imp<char *>::clear(&v114);
        }
        std::__list_imp<char *>::clear(v120);
        (*(void (**)(uint64_t))(*(void *)v124 + 40))(v124);
      }
      if (v124) {
        (*(void (**)(uint64_t))(*(void *)v124 + 8))(v124);
      }
    }
    if (a3 == 1)
    {
      (*(void (**)(void **__return_ptr, __n128))(*v95 + 32))(&v118, v10);
      fst::Times<int,(fst::StringType)1>(&v125, (uint64_t)&v118, (uint64_t)&v113);
      float v34 = NAN;
      if (v129 != -INFINITY)
      {
        float v34 = NAN;
        if (v121 != -INFINITY)
        {
          float v34 = INFINITY;
          if (v121 != INFINITY && v129 != INFINITY) {
            float v34 = v129 + v121;
          }
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)v105, (int *)&v113, v34);
      std::__list_imp<char *>::clear(&v114);
      (*(void (**)(uint64_t *, uint64_t, unsigned char *))(*v95 + 184))(v95, v96, v105);
      std::__list_imp<char *>::clear(v106);
      std::__list_imp<char *>::clear(&v119);
    }
    std::__list_imp<char *>::clear(&v126);
    if (v130) {
      (*(void (**)(uint64_t))(*(void *)v130 + 32))(v130);
    }
    else {
      ++v132;
    }
  }
  BOOL v36 = v95;
  while (v130)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v130 + 16))(v130)) {
      goto LABEL_104;
    }
    if (v130)
    {
      uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v130 + 24))(v130);
      goto LABEL_92;
    }
LABEL_91:
    uint64_t v37 = v132;
LABEL_92:
    if (a3 == 1)
    {
      uint64_t v38 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      (*(void (**)(void **__return_ptr, uint64_t *, uint64_t))(*v95 + 32))(&v118, v95, v37);
      fst::Times<int,(fst::StringType)1>((int *)v38, (uint64_t)&v118, (uint64_t)&v125);
      float v39 = *(float *)(v38 + 32);
      float v40 = NAN;
      if (v39 != -INFINITY)
      {
        float v40 = NAN;
        if (v121 != -INFINITY)
        {
          float v40 = INFINITY;
          BOOL v41 = v121 == INFINITY || v39 == INFINITY;
          float v42 = v39 + v121;
          if (!v41) {
            float v40 = v42;
          }
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)v103, &v125, v40);
      std::__list_imp<char *>::clear(&v126);
      (*(void (**)(uint64_t *, uint64_t, unsigned char *))(*v95 + 184))(v95, v37, v103);
      std::__list_imp<char *>::clear(v104);
      std::__list_imp<char *>::clear(&v119);
    }
    if (v130) {
      (*(void (**)(uint64_t))(*(void *)v130 + 32))(v130);
    }
    else {
      ++v132;
    }
  }
  if (v132 < v131) {
    goto LABEL_91;
  }
LABEL_104:
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) <= (*(int (**)(uint64_t *))(*v95 + 24))(v95)) {
    uint64_t v43 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  }
  else {
    uint64_t v43 = *a2 + 40 * (*(int (**)(uint64_t *))(*v95 + 24))(v95);
  }
  int v125 = *(_DWORD *)v43;
  std::list<int>::list(&v126, v43 + 8);
  float v129 = *(float *)(v43 + 32);
  uint64_t v46 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  if (v125) {
    uint64_t v48 = v128 + 1;
  }
  else {
    uint64_t v48 = 0;
  }
  if (*(_DWORD *)v46) {
    uint64_t v49 = *(void *)(v46 + 24) + 1;
  }
  else {
    uint64_t v49 = 0;
  }
  if (v48 != v49) {
    goto LABEL_140;
  }
  char v50 = 0;
  uint64_t v51 = v127;
  std::string v52 = (uint64_t *)(v46 + 16);
  BOOL v53 = v125 && v125 == *(_DWORD *)v46;
  BOOL v54 = !v53;
  int v55 = !v54;
  while (1)
  {
    uint64_t v56 = *v52;
    if ((v50 & 1) == 0 && !v55) {
      break;
    }
    if ((uint64_t *)v51 == &v126) {
      goto LABEL_139;
    }
    if (*(_DWORD *)(v51 + 16) != *(_DWORD *)(v56 + 16)) {
      goto LABEL_140;
    }
    uint64_t v51 = *(void *)(v51 + 8);
    std::string v52 = (uint64_t *)(v56 + 8);
    char v50 = 1;
  }
  if (v125) {
    goto LABEL_140;
  }
LABEL_139:
  *(float *)&v118 = v129;
  LODWORD(v113) = 0;
  LODWORD(v113) = *(_DWORD *)(v46 + 32);
  v47.n128_f32[0] = v129;
  if (v129 != *(float *)&v113)
  {
LABEL_140:
    uint64_t v63 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    if (v125) {
      uint64_t v64 = v128 + 1;
    }
    else {
      uint64_t v64 = 0;
    }
    if (*(_DWORD *)v63) {
      uint64_t v65 = *(void *)(v63 + 24) + 1;
    }
    else {
      uint64_t v65 = 0;
    }
    if (v64 != v65) {
      goto LABEL_161;
    }
    char v66 = 0;
    uint64_t v67 = v127;
    int v68 = (uint64_t *)(v63 + 16);
    BOOL v69 = v125 && v125 == *(_DWORD *)v63;
    BOOL v70 = !v69;
    int v71 = !v70;
    while (1)
    {
      uint64_t v72 = *v68;
      if ((v66 & 1) == 0 && !v71) {
        break;
      }
      if ((uint64_t *)v67 == &v126) {
        goto LABEL_160;
      }
      if (*(_DWORD *)(v67 + 16) != *(_DWORD *)(v72 + 16)) {
        goto LABEL_161;
      }
      uint64_t v67 = *(void *)(v67 + 8);
      int v68 = (uint64_t *)(v72 + 8);
      char v66 = 1;
    }
    if (v125) {
      goto LABEL_161;
    }
LABEL_160:
    *(float *)&v118 = v129;
    LODWORD(v113) = 0;
    LODWORD(v113) = *(_DWORD *)(v63 + 32);
    v47.n128_f32[0] = v129;
    if (v129 != *(float *)&v113)
    {
LABEL_161:
      uint64_t v73 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v95 + 64))(v95, 0x2000000000, 1);
      uint64_t v74 = *v95;
      if ((v73 & 0x2000000000) != 0)
      {
        unsigned int v97 = (*(uint64_t (**)(uint64_t *))(v74 + 24))(v95);
        (*(void (**)(uint64_t *))(*v95 + 296))(v95);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v133 + 24))(v133))
        {
          uint64_t v79 = (*(uint64_t (**)(uint64_t))(*(void *)v133 + 32))(v133);
          v118 = *(void **)v79;
          LODWORD(v119) = *(_DWORD *)(v79 + 8);
          std::list<int>::list(v120, v79 + 16);
          int v80 = *(_DWORD *)(v79 + 48);
          float v122 = *(float *)(v79 + 40);
          int v123 = v80;
          uint64_t v81 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
          fst::DivideRight<int,(fst::StringType)1>((int *)v81, &v125, (uint64_t)&v107);
          float v82 = *(float *)(v81 + 32);
          float v83 = NAN;
          if (v82 != -INFINITY)
          {
            if ((LODWORD(v129) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              float v83 = INFINITY;
              if (v82 != INFINITY) {
                float v83 = v82 - v129;
              }
            }
            else
            {
              float v83 = NAN;
            }
          }
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v110, (int *)&v107, v83);
          std::__list_imp<char *>::clear(v108);
          fst::Times<int,(fst::StringType)1>((int *)&v110, (uint64_t)&v119, (uint64_t)&v107);
          float v84 = NAN;
          if (v112 != -INFINITY)
          {
            float v84 = NAN;
            if (v122 != -INFINITY)
            {
              float v84 = INFINITY;
              if (v122 != INFINITY && v112 != INFINITY) {
                float v84 = v112 + v122;
              }
            }
          }
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v113, (int *)&v107, v84);
          std::__list_imp<char *>::clear(v108);
          LODWORD(v119) = v113;
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v120, v115, (uint64_t)&v114);
          float v122 = v117;
          std::__list_imp<char *>::clear(&v114);
          std::__list_imp<char *>::clear(v111);
          (*(void (**)(uint64_t, void **))(*(void *)v133 + 88))(v133, &v118);
          std::__list_imp<char *>::clear(v120);
          (*(void (**)(uint64_t))(*(void *)v133 + 40))(v133);
        }
        if (v133) {
          (*(void (**)(uint64_t))(*(void *)v133 + 8))(v133);
        }
        BOOL v36 = v95;
        uint64_t v86 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
        fst::DivideRight<int,(fst::StringType)1>((int *)v86, &v125, (uint64_t)&v113);
        float v87 = *(float *)(v86 + 32);
        float v88 = NAN;
        if (v87 != -INFINITY)
        {
          if ((LODWORD(v129) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            float v88 = INFINITY;
            if (v87 != INFINITY) {
              float v88 = v87 - v129;
            }
          }
          else
          {
            float v88 = NAN;
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v118, (int *)&v113, v88);
        std::__list_imp<char *>::clear(&v114);
        (*(void (**)(uint64_t *__return_ptr, uint64_t *, void))(*v95 + 32))(&v113, v95, v97);
        fst::Times<int,(fst::StringType)1>((int *)&v118, (uint64_t)&v113, (uint64_t)&v110);
        float v91 = NAN;
        if (v121 != -INFINITY)
        {
          float v91 = NAN;
          if (v117 != -INFINITY)
          {
            float v91 = INFINITY;
            if (v117 != INFINITY && v121 != INFINITY) {
              float v91 = v121 + v117;
            }
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)v101, (int *)&v110, v91);
        std::__list_imp<char *>::clear(v111);
        (*(void (**)(uint64_t *, void, unsigned char *))(*v95 + 184))(v95, v97, v101);
        std::__list_imp<char *>::clear(v102);
        std::__list_imp<char *>::clear(&v114);
        long long v90 = &v119;
      }
      else
      {
        uint64_t v75 = (*(uint64_t (**)(uint64_t *))(v74 + 200))(v95);
        uint64_t v76 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
        fst::DivideRight<int,(fst::StringType)1>((int *)v76, &v125, (uint64_t)&v118);
        float v77 = *(float *)(v76 + 32);
        float v78 = NAN;
        if (v77 != -INFINITY)
        {
          if ((LODWORD(v129) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            float v78 = INFINITY;
            if (v77 != INFINITY) {
              float v78 = v77 - v129;
            }
          }
          else
          {
            float v78 = NAN;
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v113, (int *)&v118, v78);
        std::__list_imp<char *>::clear(&v119);
        int v98 = v113;
        std::list<int>::list(v99, (uint64_t)&v114);
        float v100 = v117;
        int v89 = (*(uint64_t (**)(uint64_t *))(*v95 + 24))(v95);
        v118 = 0;
        LODWORD(v119) = v98;
        std::list<int>::list(v120, (uint64_t)v99);
        float v122 = v100;
        int v123 = v89;
        std::__list_imp<char *>::clear(v99);
        (*(void (**)(uint64_t *, uint64_t, void **))(*v95 + 208))(v95, v75, &v118);
        (*(void (**)(uint64_t *, uint64_t))(*v95 + 176))(v95, v75);
        std::__list_imp<char *>::clear(v120);
        long long v90 = &v114;
      }
      std::__list_imp<char *>::clear(v90);
    }
  }
  unint64_t v93 = (*(uint64_t (**)(uint64_t *, uint64_t, void, __n128))(*v36 + 64))(v36, 0x3FFFFFFF0007, 0, v47);
  unint64_t v94 = fst::ReweightProperties(v93);
  (*(void (**)(uint64_t *, unint64_t, uint64_t))(*v36 + 192))(v36, v94, 0x3FFFFFFF0007);
  std::__list_imp<char *>::clear(&v126);
  uint64_t result = v130;
  if (v130) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v130 + 8))(v130);
  }
  return result;
}

void sub_1B1F4DC08(_Unwind_Exception *a1)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v1 - 184));
  if (*(char *)(v1 - 225) < 0) {
    operator delete(*(void **)(v1 - 248));
  }
  _Unwind_Resume(a1);
}

void *fst::RemoveWeight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = (void *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  int v7 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    uint64_t v8 = *(void *)(a2 + 24) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (*(_DWORD *)result) {
    uint64_t v9 = result[3] + 1;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8 == v9)
  {
    char v10 = 0;
    uint64_t v11 = (uint64_t *)(a2 + 16);
    uint64_t v12 = result + 2;
    if (v7) {
      BOOL v13 = v7 == *(_DWORD *)result;
    }
    else {
      BOOL v13 = 0;
    }
    int v14 = !v13;
    int v15 = v14 ^ 1;
    while (1)
    {
      uint64_t v16 = *v11;
      uint64_t v17 = *v12;
      if ((v10 & 1) == 0 && !v15) {
        break;
      }
      if (v16 == a2 + 8) {
        goto LABEL_21;
      }
      if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16)) {
        goto LABEL_22;
      }
      uint64_t v11 = (uint64_t *)(v16 + 8);
      uint64_t v12 = (uint64_t *)(v17 + 8);
      char v10 = 1;
    }
    if (v7) {
      goto LABEL_22;
    }
LABEL_21:
    LODWORD(v43) = 0;
    LODWORD(v43) = *(_DWORD *)(a2 + 32);
    float v40 = 0.0;
    float v40 = *((float *)result + 8);
    if (*(float *)&v43 == v40) {
      return result;
    }
  }
LABEL_22:
  uint64_t result = (void *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  int v18 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    uint64_t v19 = *(void *)(a2 + 24) + 1;
  }
  else {
    uint64_t v19 = 0;
  }
  if (*(_DWORD *)result) {
    uint64_t v20 = result[3] + 1;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v19 == v20)
  {
    char v21 = 0;
    uint64_t v22 = (uint64_t *)(a2 + 16);
    uint64_t v23 = result + 2;
    if (v18) {
      BOOL v24 = v18 == *(_DWORD *)result;
    }
    else {
      BOOL v24 = 0;
    }
    int v25 = !v24;
    int v26 = v25 ^ 1;
    while (1)
    {
      uint64_t v27 = *v22;
      uint64_t v28 = *v23;
      if ((v21 & 1) == 0 && !v26) {
        break;
      }
      if (v27 == a2 + 8) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v27 + 16) != *(_DWORD *)(v28 + 16)) {
        goto LABEL_43;
      }
      uint64_t v22 = (uint64_t *)(v27 + 8);
      uint64_t v23 = (uint64_t *)(v28 + 8);
      char v21 = 1;
    }
    if (v18) {
      goto LABEL_43;
    }
LABEL_42:
    LODWORD(v43) = 0;
    LODWORD(v43) = *(_DWORD *)(a2 + 32);
    float v40 = 0.0;
    float v40 = *((float *)result + 8);
    if (*(float *)&v43 == v40) {
      return result;
    }
  }
LABEL_43:
  if (a3)
  {
    unsigned int v54 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)a1 + 128))(a1, &v52);
    while (1)
    {
      uint64_t result = v52;
      if (!v52) {
        break;
      }
      int v29 = (*(uint64_t (**)(void *))(*v52 + 16))(v52);
      uint64_t result = v52;
      if (v29)
      {
        if (v52) {
          return (void *)(*(uint64_t (**)(void))(*v52 + 8))();
        }
        return result;
      }
      if (!v52) {
        goto LABEL_51;
      }
      uint64_t v30 = (*(uint64_t (**)(void))(*v52 + 24))();
      if (v52) {
        uint64_t v31 = (*(uint64_t (**)(void *))(*v52 + 24))(v52);
      }
      else {
        uint64_t v31 = v54;
      }
LABEL_52:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v43, a1, v31);
      fst::DivideRight<int,(fst::StringType)1>((int *)&v43, (int *)a2, (uint64_t)&v40);
      float v32 = NAN;
      if (v46 != -INFINITY)
      {
        if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          float v32 = INFINITY;
          if (v46 != INFINITY) {
            float v32 = v46 - *(float *)(a2 + 32);
          }
        }
        else
        {
          float v32 = NAN;
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)v50, (int *)&v40, v32);
      std::__list_imp<char *>::clear(v41);
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 184))(a1, v30, v50);
      std::__list_imp<char *>::clear(v51);
      std::__list_imp<char *>::clear(&v44);
      if (v52) {
        (*(void (**)(void *))(*v52 + 32))(v52);
      }
      else {
        ++v54;
      }
    }
    if ((int)v54 >= (int)v53) {
      return result;
    }
LABEL_51:
    uint64_t v30 = v54;
    uint64_t v31 = v54;
    goto LABEL_52;
  }
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v33, &v49);
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v49 + 24))(v49))
  {
    uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 32))(v49);
    uint64_t v43 = *(void *)v34;
    LODWORD(v44) = *(_DWORD *)(v34 + 8);
    std::list<int>::list(v45, v34 + 16);
    int v35 = *(_DWORD *)(v34 + 48);
    float v47 = *(float *)(v34 + 40);
    int v48 = v35;
    fst::Divide<int>((int *)&v44, (int *)a2, 0, (uint64_t)&v52);
    float v36 = NAN;
    if (v47 != -INFINITY)
    {
      if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        float v36 = INFINITY;
        if (v47 != INFINITY) {
          float v36 = v47 - *(float *)(a2 + 32);
        }
      }
      else
      {
        float v36 = NAN;
      }
    }
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v40, (int *)&v52, v36);
    std::__list_imp<char *>::clear(&v53);
    *(float *)&uint64_t v44 = v40;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v45, v41[1], (uint64_t)v41);
    float v47 = v42;
    std::__list_imp<char *>::clear(v41);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v49 + 88))(v49, &v43);
    std::__list_imp<char *>::clear(v45);
    (*(void (**)(uint64_t))(*(void *)v49 + 40))(v49);
  }
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v43, a1, v33);
  fst::Divide<int>((int *)&v43, (int *)a2, 0, (uint64_t)&v40);
  float v37 = NAN;
  if (v46 != -INFINITY)
  {
    if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      float v37 = INFINITY;
      if (v46 != INFINITY) {
        float v37 = v46 - *(float *)(a2 + 32);
      }
    }
    else
    {
      float v37 = NAN;
    }
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v38, (int *)&v40, v37);
  std::__list_imp<char *>::clear(v41);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v33, &v38);
  std::__list_imp<char *>::clear(v39);
  return std::__list_imp<char *>::clear(&v44);
}

void sub_1B1F4E5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__list_imp<char *>::clear((void *)(v12 + 8));
  std::__list_imp<char *>::clear(va);
  _Unwind_Resume(a1);
}

void fst::ShortestDistance<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::VectorFst();
  }
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>((uint64_t)v3, a1);
}

void sub_1B1F4E918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~ImplToFst(&a13);
  _Unwind_Resume(a1);
}

float fst::ComputeTotalWeight<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v6 = *a2;
    if (a2[1] == *a2) {
      return INFINITY;
    }
    unint64_t v7 = 0;
    float v8 = INFINITY;
    while (1)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 32))(a1, v7);
      float v10 = *(float *)(v6 + 4 * v7);
      if (v10 == -INFINITY || v9 == -INFINITY)
      {
        float v5 = NAN;
        if (v8 != INFINITY) {
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v11 = v9 == INFINITY || v10 == INFINITY;
        float v12 = v10 + v9;
        if (v11) {
          float v5 = INFINITY;
        }
        else {
          float v5 = v12;
        }
        if (v8 == INFINITY) {
          goto LABEL_21;
        }
        if (v5 != INFINITY)
        {
LABEL_18:
          if (v8 <= v5)
          {
            float v14 = expf(-(float)(v5 - v8));
            float v5 = v8 - logf(v14 + 1.0);
          }
          else
          {
            float v13 = expf(-(float)(v8 - v5));
            float v5 = v5 - logf(v13 + 1.0);
          }
          goto LABEL_21;
        }
        float v5 = v8;
      }
LABEL_21:
      ++v7;
      uint64_t v6 = *a2;
      float v8 = v5;
      if (v7 >= (a2[1] - *a2) >> 2) {
        return v5;
      }
    }
  }
  if ((*(int (**)(uint64_t))(*(void *)a1 + 24))(a1) >= (unint64_t)((a2[1] - *a2) >> 2)) {
    return INFINITY;
  }
  return *(float *)(*a2 + 4 * (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1));
}

uint64_t fst::Reweight<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t *a1, void *a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 160))(a1);
  if (!result) {
    return result;
  }
  signed int v52 = 0;
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 128))(a1, &v50);
LABEL_3:
  if (v50)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v50 + 16))(v50)) {
      goto LABEL_72;
    }
    if (v50)
    {
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 24))(v50);
      goto LABEL_9;
    }
  }
  else if (v52 >= v51)
  {
    goto LABEL_72;
  }
  int v8 = v52;
LABEL_9:
  uint64_t v9 = v8;
  if (v8 != (uint64_t)(a2[1] - *a2) >> 2)
  {
    float v10 = *(float *)(*a2 + 4 * v8);
    v48.n128_f32[0] = v10;
    LODWORD(v49) = 2139095040;
    v7.n128_f32[0] = v10;
    if (v10 == INFINITY) {
      goto LABEL_44;
    }
    (*(void (**)(uint64_t *, void, uint64_t *, float))(*a1 + 296))(a1, v8, &v49, v48.n128_f32[0]);
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v49 + 24))(v49))
      {
        if (v49) {
          (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
        }
        if (a3)
        {
LABEL_44:
          if (a3 == 1)
          {
            v17.n128_u32[0] = (*(float (**)(uint64_t *, uint64_t, __n128))(*a1 + 32))(a1, v9, v7);
            v18.n128_u32[0] = 2143289344;
            if (v10 != -INFINITY && v17.n128_f32[0] != -INFINITY)
            {
              v18.n128_u32[0] = 2139095040;
              BOOL v19 = v17.n128_f32[0] == INFINITY || v10 == INFINITY;
              v17.n128_f32[0] = v10 + v17.n128_f32[0];
              if (!v19) {
                v18.n128_f32[0] = v17.n128_f32[0];
              }
            }
            (*(void (**)(uint64_t *, uint64_t, __n128, __n128))(*a1 + 184))(a1, v9, v18, v17);
          }
        }
        else
        {
          float v21 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 32))(a1, v9);
          if (v21 == -INFINITY || (LODWORD(v10) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          {
            v20.n128_u32[0] = 2143289344;
          }
          else
          {
            v20.n128_u32[0] = 2139095040;
            if (v21 != INFINITY) {
              v20.n128_f32[0] = v21 - v10;
            }
          }
          (*(void (**)(uint64_t *, uint64_t, __n128))(*a1 + 184))(a1, v9, v20);
        }
        if (v50) {
          (*(void (**)(uint64_t))(*(void *)v50 + 32))(v50);
        }
        else {
          ++v52;
        }
        goto LABEL_3;
      }
      __n128 v11 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(void *)v49 + 32))(v49);
      __n128 v48 = v11;
      if (v11.n128_i32[3] < (unint64_t)((uint64_t)(a2[1] - *a2) >> 2))
      {
        v11.n128_u32[0] = *(_DWORD *)(*a2 + 4 * v48.n128_i32[3]);
        unsigned __int32 v54 = v11.n128_u32[0];
        int v53 = 2139095040;
        v12.n128_u32[0] = v11.n128_u32[0];
        if (v11.n128_f32[0] != INFINITY) {
          break;
        }
      }
LABEL_40:
      (*(void (**)(uint64_t, __n128, __n128))(*(void *)v49 + 40))(v49, v11, v12);
    }
    if (a3)
    {
      if (a3 != 1)
      {
LABEL_39:
        v11.n128_f64[0] = (*(double (**)(uint64_t, __n128 *))(*(void *)v49 + 88))(v49, &v48);
        goto LABEL_40;
      }
      float v13 = NAN;
      if (v10 == -INFINITY) {
        goto LABEL_38;
      }
      float v13 = NAN;
      if (v48.n128_f32[2] == -INFINITY) {
        goto LABEL_38;
      }
      if (v10 == INFINITY || v48.n128_f32[2] == INFINITY)
      {
        float v13 = INFINITY;
        if ((v11.n128_u32[0] & 0x7FFFFFFF) >= 0x7F800000) {
          float v13 = NAN;
        }
        goto LABEL_38;
      }
      float v14 = v10 + v48.n128_f32[2];
      float v13 = NAN;
      if ((float)(v10 + v48.n128_f32[2]) == -INFINITY)
      {
LABEL_38:
        v48.n128_f32[2] = v13;
        goto LABEL_39;
      }
      if ((v11.n128_u32[0] & 0x7FFFFFFF) <= 0x7F7FFFFF)
      {
        float v13 = INFINITY;
        if (v14 != INFINITY) {
          float v13 = v14 - v11.n128_f32[0];
        }
        goto LABEL_38;
      }
    }
    else
    {
      float v13 = NAN;
      if (v48.n128_f32[2] == -INFINITY || v11.n128_f32[0] == -INFINITY) {
        goto LABEL_38;
      }
      BOOL v15 = v48.n128_f32[2] == INFINITY || v11.n128_f32[0] == INFINITY;
      float v16 = v11.n128_f32[0] + v48.n128_f32[2];
      if (v15) {
        float v16 = INFINITY;
      }
      if (v16 != -INFINITY && (LODWORD(v10) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        float v13 = INFINITY;
        if (v16 != INFINITY) {
          float v13 = v16 - v10;
        }
        goto LABEL_38;
      }
    }
    float v13 = NAN;
    goto LABEL_38;
  }
  while (1)
  {
LABEL_72:
    if (!v50)
    {
      if (v52 >= v51) {
        break;
      }
      goto LABEL_64;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v50 + 16))(v50)) {
      break;
    }
    if (v50)
    {
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 24))(v50);
      goto LABEL_65;
    }
LABEL_64:
    uint64_t v22 = v52;
LABEL_65:
    if (a3 == 1)
    {
      BOOL v15 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 32))(a1, v22) == -INFINITY;
      v23.n128_u32[0] = 2139095040;
      if (v15) {
        v23.n128_f32[0] = NAN;
      }
      (*(void (**)(uint64_t *, uint64_t, __n128))(*a1 + 184))(a1, v22, v23);
    }
    if (v50) {
      (*(void (**)(uint64_t))(*(void *)v50 + 32))(v50);
    }
    else {
      ++v52;
    }
  }
  if ((*(int (**)(uint64_t *))(*a1 + 24))(a1) >= (unint64_t)((uint64_t)(a2[1] - *a2) >> 2)) {
    float v25 = INFINITY;
  }
  else {
    float v25 = *(float *)(*a2 + 4 * (*(int (**)(uint64_t *))(*a1 + 24))(a1));
  }
  v48.n128_f32[0] = v25;
  LODWORD(v49) = 0;
  v24.n128_f32[0] = v25;
  if (v25 == 0.0) {
    goto LABEL_137;
  }
  v48.n128_f32[0] = v25;
  LODWORD(v49) = 2139095040;
  v24.n128_f32[0] = v25;
  if (v25 == INFINITY) {
    goto LABEL_137;
  }
  uint64_t v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, float))(*a1 + 64))(a1, 0x2000000000, 1, v25);
  uint64_t v27 = *a1;
  if ((v26 & 0x2000000000) == 0)
  {
    uint64_t v28 = (*(uint64_t (**)(uint64_t *))(v27 + 200))(a1);
    unsigned int v29 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
    if ((LODWORD(v25) & 0x7FFFFFFFu) >= 0x7F800000) {
      float v30 = NAN;
    }
    else {
      float v30 = 0.0 - v25;
    }
    if (!a3) {
      float v30 = v25;
    }
    v48.n128_u64[0] = 0;
    v48.n128_u64[1] = __PAIR64__(v29, LODWORD(v30));
    (*(void (**)(uint64_t *, uint64_t, __n128 *))(*a1 + 208))(a1, v28, &v48);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 176))(a1, v28);
    goto LABEL_137;
  }
  uint64_t v31 = (*(uint64_t (**)(uint64_t *))(v27 + 24))(a1);
  (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 296))(a1, v31, &v49);
  if ((LODWORD(v25) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v32 = NAN;
  }
  else {
    float v32 = 0.0 - v25;
  }
  while (2)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v49 + 24))(v49))
    {
      __n128 v48 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(void *)v49 + 32))(v49);
      float v33 = NAN;
      if (a3)
      {
        if (v32 != -INFINITY)
        {
          float v33 = NAN;
          if (v48.n128_f32[2] != -INFINITY)
          {
            float v33 = INFINITY;
            BOOL v34 = v48.n128_f32[2] == INFINITY || v32 == INFINITY;
            float v35 = v32 + v48.n128_f32[2];
LABEL_103:
            if (!v34) {
              float v33 = v35;
            }
          }
        }
      }
      else if (v25 != -INFINITY)
      {
        float v33 = NAN;
        if (v48.n128_f32[2] != -INFINITY)
        {
          float v33 = INFINITY;
          BOOL v34 = v48.n128_f32[2] == INFINITY || v25 == INFINITY;
          float v35 = v48.n128_f32[2] + v25;
          goto LABEL_103;
        }
      }
      v48.n128_f32[2] = v33;
      (*(void (**)(uint64_t, __n128 *))(*(void *)v49 + 88))(v49, &v48);
      (*(void (**)(uint64_t))(*(void *)v49 + 40))(v49);
      continue;
    }
    break;
  }
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  float v36 = *(float (**)(uint64_t *, uint64_t))(*a1 + 32);
  if (a3)
  {
    v37.n128_f32[0] = v36(a1, v31);
    float v38 = INFINITY;
    if (v37.n128_f32[0] != INFINITY && v32 != INFINITY) {
      float v38 = v32 + v37.n128_f32[0];
    }
    BOOL v41 = v37.n128_f32[0] == -INFINITY || v32 == -INFINITY;
    v37.n128_u32[0] = 2143289344;
    if (!v41) {
      v37.n128_f32[0] = v38;
    }
  }
  else
  {
    v37.n128_f32[0] = v36(a1, v31);
    float v42 = INFINITY;
    if (v37.n128_f32[0] != INFINITY && v25 != INFINITY) {
      float v42 = v37.n128_f32[0] + v25;
    }
    BOOL v45 = v37.n128_f32[0] == -INFINITY || v25 == -INFINITY;
    v37.n128_u32[0] = 2143289344;
    if (!v45) {
      v37.n128_f32[0] = v42;
    }
  }
  (*(void (**)(uint64_t *, uint64_t, __n128))(*a1 + 184))(a1, v31, v37);
LABEL_137:
  unint64_t v46 = (*(uint64_t (**)(uint64_t *, uint64_t, void, __n128))(*a1 + 64))(a1, 0x3FFFFFFF0007, 0, v24);
  unint64_t v47 = fst::ReweightProperties(v46);
  (*(void (**)(uint64_t *, unint64_t, uint64_t))(*a1 + 192))(a1, v47, 0x3FFFFFFF0007);
  uint64_t result = v50;
  if (v50) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  return result;
}

void sub_1B1F4F75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveWeight<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t result, int a2, float a3)
{
  *(float *)&long long v15 = a3;
  LODWORD(v14) = 0;
  if (a3 == 0.0) {
    return result;
  }
  *(float *)&long long v15 = a3;
  LODWORD(v14) = 2139095040;
  if (a3 == INFINITY) {
    return result;
  }
  uint64_t v4 = result;
  if (a2)
  {
    unsigned int v16 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)result + 128))(result, &v15);
    while (1)
    {
      uint64_t result = v15;
      if (!(void)v15) {
        break;
      }
      int v5 = (*(uint64_t (**)(void))(*(void *)v15 + 16))(v15);
      uint64_t result = v15;
      if (v5)
      {
        if ((void)v15) {
          return (*(uint64_t (**)(void))(*(void *)v15 + 8))();
        }
        return result;
      }
      if (!(void)v15) {
        goto LABEL_11;
      }
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v15 + 24))();
      if ((void)v15) {
        uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v15 + 24))(v15);
      }
      else {
        uint64_t v7 = v16;
      }
LABEL_12:
      float v9 = (*(float (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, v7);
      if (v9 == -INFINITY || (LODWORD(a3) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        v8.n128_u32[0] = 2143289344;
      }
      else
      {
        v8.n128_u32[0] = 2139095040;
        if (v9 != INFINITY) {
          v8.n128_f32[0] = v9 - a3;
        }
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v4 + 184))(v4, v6, v8);
      if ((void)v15) {
        (*(void (**)(void))(*(void *)v15 + 32))(v15);
      }
      else {
        ++v16;
      }
    }
    if ((int)v16 >= SDWORD2(v15)) {
      return result;
    }
LABEL_11:
    uint64_t v6 = v16;
    uint64_t v7 = v16;
    goto LABEL_12;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 296))(v4, v10, &v14);
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v14 + 24))(v14))
  {
    long long v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
    float v11 = *((float *)&v15 + 2) - a3;
    if (*((float *)&v15 + 2) == INFINITY) {
      float v11 = INFINITY;
    }
    if (*((float *)&v15 + 2) == -INFINITY || (LODWORD(a3) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
      float v11 = NAN;
    }
    *((float *)&v15 + 2) = v11;
    (*(void (**)(uint64_t, long long *))(*(void *)v14 + 88))(v14, &v15);
    (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
  }
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  float v13 = (*(float (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, v10);
  if (v13 == -INFINITY || (LODWORD(a3) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    v12.n128_u32[0] = 2143289344;
  }
  else
  {
    v12.n128_u32[0] = 2139095040;
    if (v13 != INFINITY) {
      v12.n128_f32[0] = v13 - a3;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)v4 + 184))(v4, v10, v12);
}

void sub_1B1F4FCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void *fst::ShortestDistance<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, void *a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = a2;
  void v6[2] = *(void *)a3;
  int v7 = *(_DWORD *)(a3 + 16);
  char v8 = *(unsigned char *)(a3 + 20);
  char v9 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  memset(v13, 0, 29);
  a2[1] = *a2;
  fst::ShortestDistanceState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ShortestDistance(v6, *(_DWORD *)(a3 + 12));
  if (BYTE12(v13[1]))
  {
    a2[1] = *a2;
    int v5 = 2143289344;
    std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, &v5);
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(v6);
}

void sub_1B1F4FDDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 248))(a2, (v8 + 1));
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v50 = 0;
  if (a3)
  {
LABEL_29:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
    int v17 = 1;
    goto LABEL_30;
  }
  LODWORD(v44) = 0;
  (*(void (**)(uint64_t, void ***))(*(void *)a1 + 128))(a1, &p_p);
  uint64_t v10 = 0xFFFFFFFFLL;
  while (1)
  {
    if (p_p)
    {
      char v11 = (*((uint64_t (**)(void **))*p_p + 2))(p_p);
      long long v12 = p_p;
      if (v11) {
        goto LABEL_22;
      }
      if (p_p)
      {
        uint64_t v13 = (*((uint64_t (**)(void))*p_p + 3))();
        goto LABEL_11;
      }
    }
    else if ((int)v44 >= (int)v43)
    {
      goto LABEL_24;
    }
    uint64_t v13 = v44;
LABEL_11:
    float v14 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v13);
    *(float *)&uint64_t v39 = v14;
    LODWORD(__p) = 2139095040;
    int v15 = 2 * (v10 != -1);
    unsigned int v16 = v10 == -1 ? v13 : -1;
    if (v14 == INFINITY)
    {
      int v15 = 4;
      uint64_t v10 = v10;
    }
    else
    {
      uint64_t v10 = v16;
    }
    if ((v15 | 4) != 4) {
      break;
    }
    if (p_p) {
      (*((void (**)(void **))*p_p + 4))(p_p);
    }
    else {
      LODWORD(v44) = v44 + 1;
    }
  }
  long long v12 = p_p;
LABEL_22:
  if (v12) {
    (*((void (**)(void **))*v12 + 1))(v12);
  }
LABEL_24:
  if (v10 == -1) {
    goto LABEL_29;
  }
  LODWORD(p_p) = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v10);
  LODWORD(v39) = 0;
  if (*(float *)&p_p != 0.0)
  {
    std::string __p = 0;
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    p_p = &__p;
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    BOOL v45 = &v50;
    fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, (uint64_t)&p_p);
  }
  int v17 = 0;
LABEL_30:
  LODWORD(v41) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v39);
  while (2)
  {
    if (!v39)
    {
      if ((int)v41 >= (int)v40) {
        goto LABEL_80;
      }
      goto LABEL_36;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v39 + 16))(v39))
    {
      if (v39)
      {
        uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v39 + 24))();
LABEL_37:
        int v19 = v18 + v17;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v19)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if (v18 == v9) {
          (*(void (**)(uint64_t *, void, double))(*a2 + 184))(a2, (v18 + v17), 0.0);
        }
        v20.n128_f32[0] = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v18);
        LODWORD(p_p) = v20.n128_u32[0];
        LODWORD(__p) = 2139095040;
        v21.n128_u32[0] = v20.n128_u32[0];
        char v22 = v17 ^ 1;
        if (v20.n128_f32[0] == INFINITY) {
          char v22 = 1;
        }
        if ((v22 & 1) == 0)
        {
          p_p = 0;
          LODWORD(v43) = v20.n128_u32[0];
          HIDWORD(v43) = v18 + v17;
          v20.n128_f64[0] = (*(double (**)(uint64_t *, void, void ***))(*a2 + 208))(a2, 0, &p_p);
        }
        unint64_t v46 = 0;
        (*(void (**)(uint64_t, uint64_t, void ***, __n128, __n128))(*(void *)a1 + 136))(a1, v18, &p_p, v20, v21);
LABEL_47:
        if (p_p)
        {
          if ((*((unsigned int (**)(void **))*p_p + 3))(p_p))
          {
            if (p_p)
            {
              (*((void (**)(void))*p_p + 1))();
              goto LABEL_75;
            }
LABEL_73:
            if (v45) {
              --*(_DWORD *)v45;
            }
LABEL_75:
            if (v39) {
              (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
            }
            else {
              LODWORD(v41) = v41 + 1;
            }
            continue;
          }
          if (p_p)
          {
            uint64_t v23 = (*((uint64_t (**)(void))*p_p + 4))();
LABEL_53:
            uint64_t v24 = (*(_DWORD *)(v23 + 12) + v17);
            float v25 = *(float *)(v23 + 8);
            if (v24 == v10) {
              char v26 = v17;
            }
            else {
              char v26 = 1;
            }
            if (v26)
            {
              int v27 = *(_DWORD *)(v23 + 8);
            }
            else
            {
              float v28 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v10);
              int v27 = 2143289344;
              if (v28 != -INFINITY && v25 != -INFINITY)
              {
                int v27 = 2139095040;
                BOOL v29 = v28 == INFINITY || v25 == INFINITY;
                float v30 = v25 + v28;
                if (!v29) {
                  *(float *)&int v27 = v30;
                }
              }
            }
            std::string __p = *(void **)v23;
            unint64_t v48 = __PAIR64__(v19, v27);
            while (1)
            {
              int v31 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              uint64_t v32 = *a2;
              if (v31 > (int)v24) {
                break;
              }
              (*(void (**)(uint64_t *))(v32 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void **))(v32 + 208))(a2, v24, &__p);
            if (p_p) {
              (*((void (**)(void **))*p_p + 5))(p_p);
            }
            else {
              ++v46;
            }
            goto LABEL_47;
          }
        }
        else if (v46 >= v44)
        {
          goto LABEL_73;
        }
        uint64_t v23 = v43 + 16 * v46;
        goto LABEL_53;
      }
LABEL_36:
      uint64_t v18 = v41;
      goto LABEL_37;
    }
    break;
  }
  if (v39) {
    (*(void (**)(void))(*(void *)v39 + 8))();
  }
LABEL_80:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v10);
  if (v10 == v9) {
    char v33 = v17;
  }
  else {
    char v33 = 1;
  }
  if ((v33 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v9);
    (*(void (**)(uint64_t *, uint64_t))(*a2 + 184))(a2, v9);
  }
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  unint64_t v35 = v50 | v34;
  uint64_t v36 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v37 = fst::ReverseProperties(v35, v17);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v36 | v37, 0x3FFFFFFF0007);
}

void sub_1B1F509E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fst::ShortestDistance<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, void *a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = a2;
  void v6[2] = *(void *)a3;
  int v7 = *(_DWORD *)(a3 + 16);
  char v8 = *(unsigned char *)(a3 + 20);
  char v9 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  memset(v13, 0, 29);
  a2[1] = *a2;
  fst::ShortestDistanceState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::ShortestDistance(v6, *(_DWORD *)(a3 + 12));
  if (BYTE12(v13[1]))
  {
    a2[1] = *a2;
    int v5 = 2143289344;
    std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, &v5);
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(v6);
}

void sub_1B1F50B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      uint64_t v6 = 0;
      v5[0] = v3;
      v5[1] = 0;
      void v5[2] = 0;
      v5[3] = &v6;
      fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a2, (uint64_t)v5);
    }
    operator new();
  }
  operator new();
}

void sub_1B1F51270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  float v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  int v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NaturalLess<fst::LogWeightTpl<float>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v12 = *(void *)(a3 + 8) - *(void *)a3;
  if (v12)
  {
    unint64_t v13 = v12 >> 2;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    bzero(*(void **)a3, 4 * v13);
  }
  unsigned int v27 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v25);
  while (1)
  {
    uint64_t result = v25;
    if (!v25)
    {
      if ((int)v27 >= v26) {
        return result;
      }
LABEL_11:
      uint64_t v16 = v27;
      goto LABEL_12;
    }
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 16))(v25);
    uint64_t result = v25;
    if (v15) {
      break;
    }
    if (!v25) {
      goto LABEL_11;
    }
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v25 + 24))();
LABEL_12:
    unint64_t v24 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v16, v22);
    while (1)
    {
      if (!v22[0])
      {
        if (v24 >= v22[2]) {
          goto LABEL_32;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v22[0] + 24))(v22[0])) {
        break;
      }
      if (v22[0])
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v22[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = v22[1] + 16 * v24;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * (int)v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 12)))
      {
        int v19 = *(_DWORD **)a3;
        if (!a4
          || (int v21 = 0, fst::NaturalLess<fst::LogWeightTpl<float>>::operator()(a4, (float *)(v17 + 8), (float *)&v21)))
        {
          int v20 = 1;
          goto LABEL_25;
        }
        if ((v19[v18] | 2) == 2)
        {
          int v20 = 3;
LABEL_25:
          v19[v18] = v20;
        }
        *a5 = 0;
      }
      *a6 = 0;
      if (v22[0]) {
        (*(void (**)(void))(*(void *)v22[0] + 40))(v22[0]);
      }
      else {
        ++v24;
      }
    }
    if (v22[0])
    {
      (*(void (**)(void))(*(void *)v22[0] + 8))();
      goto LABEL_34;
    }
LABEL_32:
    if (v23) {
      --*v23;
    }
LABEL_34:
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 32))(v25);
    }
    else {
      ++v27;
    }
  }
  if (v25) {
    return (*(uint64_t (**)(void))(*(void *)v25 + 8))();
  }
  return result;
}

void sub_1B1F516D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  uint64_t v2 = &v3;
  fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>();
}

void sub_1B1F518AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  char v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>()
{
}

void sub_1B1F52194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  long long v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::LogWeightTpl<float>>::operator()(uint64_t a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a3;
  float v5 = *a3;
  if (*a2 != INFINITY)
  {
    float v5 = *a2;
    if (v4 != INFINITY)
    {
      if (v3 <= v4)
      {
        float v7 = expf(-(float)(v4 - v3));
        float v5 = v3 - logf(v7 + 1.0);
      }
      else
      {
        float v6 = expf(-(float)(v3 - v4));
        float v5 = v4 - logf(v6 + 1.0);
      }
    }
  }
  return v5 == v3 && v3 != v4;
}

void fst::ShortestDistanceState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
      return;
    }
    goto LABEL_232;
  }
  if (*((unsigned char *)a1 + 32))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    float v4 = fst::LogMessage::LogMessage((fst *)&v153, (uint64_t)__p);
    float v5 = (void *)fst::cerr(v4);
    v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ShortestDistance: first_path option disallowed when ", 52);
    v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)"Weight does not have the path property: ", 40);
    uint64_t v143 = fst::LogWeightTpl<float>::Type();
    int v144 = *(char *)(v143 + 23);
    if (v144 >= 0) {
      uint64_t v145 = v143;
    }
    else {
      uint64_t v145 = *(void *)v143;
    }
    if (v144 >= 0) {
      uint64_t v146 = *(unsigned __int8 *)(v143 + 23);
    }
    else {
      uint64_t v146 = *(void *)(v143 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, v145, v146);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v153);
    if (SHIBYTE(v150) < 0) {
      operator delete(__p[0]);
    }
LABEL_232:
    v147 = (char *)a1 + 116;
    goto LABEL_233;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v6 = a2;
  float v7 = (void **)a1[1];
  uint64_t v9 = v7 + 1;
  char v8 = v7[1];
  long long v10 = (char *)*v7;
  unint64_t v11 = ((char *)v8 - (unsigned char *)*v7) >> 2;
  if (v11 <= a2)
  {
    uint64_t v12 = (char **)(a1 + 5);
    do
    {
      unint64_t v13 = (unint64_t)v7[2];
      if ((unint64_t)v8 >= v13)
      {
        if ((v11 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v13 - (void)v10;
        uint64_t v16 = v15 >> 1;
        if (v15 >> 1 <= v11 + 1) {
          uint64_t v16 = v11 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v7 + 2), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[4 * v11];
        *(_DWORD *)uint64_t v19 = 2139095040;
        uint64_t v14 = v19 + 4;
        uint64_t v20 = (char *)*v9;
        int v21 = (char *)*v7;
        if (*v9 != *v7)
        {
          do
          {
            int v22 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v19 - 1) = v22;
            v19 -= 4;
          }
          while (v20 != v21);
          uint64_t v20 = (char *)*v7;
        }
        *float v7 = v19;
        unsigned int *v9 = v14;
        v7[2] = &v18[4 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *char v8 = 2139095040;
        uint64_t v14 = v8 + 1;
      }
      unsigned int *v9 = v14;
      unint64_t v24 = (_DWORD *)a1[6];
      unint64_t v23 = a1[7];
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = ((char *)v24 - *v12) >> 2;
        if ((unint64_t)(v26 + 1) >> 62) {
LABEL_239:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v27 = v23 - (void)*v12;
        uint64_t v28 = v27 >> 1;
        if (v27 >> 1 <= (unint64_t)(v26 + 1)) {
          uint64_t v28 = v26 + 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          float v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v29);
        }
        else {
          float v30 = 0;
        }
        int v31 = &v30[4 * v26];
        *(_DWORD *)int v31 = 2139095040;
        uint64_t v25 = v31 + 4;
        char v33 = (char *)a1[5];
        uint64_t v32 = (char *)a1[6];
        if (v32 != v33)
        {
          do
          {
            int v34 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v31 - 1) = v34;
            v31 -= 4;
          }
          while (v32 != v33);
          uint64_t v32 = *v12;
        }
        a1[5] = v31;
        a1[6] = v25;
        a1[7] = &v30[4 * v29];
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        _DWORD *v24 = 2139095040;
        uint64_t v25 = v24 + 1;
      }
      a1[6] = v25;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), __p);
      float v7 = (void **)a1[1];
      uint64_t v9 = v7 + 1;
      char v8 = v7[1];
      long long v10 = (char *)*v7;
      unint64_t v11 = ((char *)v8 - (unsigned char *)*v7) >> 2;
    }
    while (v11 <= v6);
  }
  if (*((unsigned char *)a1 + 33))
  {
    unint64_t v35 = (char *)a1[11];
    uint64_t v36 = (char *)a1[12];
    unint64_t v37 = (v36 - v35) >> 2;
    if (v37 <= v6)
    {
      float v38 = a1 + 13;
      do
      {
        if ((unint64_t)v36 >= *v38)
        {
          unint64_t v40 = v37 + 1;
          if ((v37 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = *v38 - (void)v35;
          if (v41 >> 1 > v40) {
            unint64_t v40 = v41 >> 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v42);
            unint64_t v35 = (char *)a1[11];
            uint64_t v36 = (char *)a1[12];
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v44 = &v43[4 * v37];
          *(_DWORD *)unint64_t v44 = -1;
          uint64_t v39 = v44 + 4;
          while (v36 != v35)
          {
            int v45 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          a1[11] = v44;
          a1[12] = v39;
          a1[13] = &v43[4 * v42];
          if (v35)
          {
            operator delete(v35);
            unint64_t v35 = (char *)a1[11];
          }
          else
          {
            unint64_t v35 = v44;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v36 = -1;
          uint64_t v39 = v36 + 4;
        }
        a1[12] = v39;
        unint64_t v37 = (v39 - v35) >> 2;
        uint64_t v36 = v39;
      }
      while (v37 <= v6);
      long long v10 = *(char **)a1[1];
    }
    *(_DWORD *)&v35[4 * v6] = *((_DWORD *)a1 + 28);
  }
  *(_DWORD *)&v10[4 * v6] = 0;
  unint64_t v46 = (char **)(a1 + 5);
  *(_DWORD *)(a1[5] + 4 * v6) = 0;
  *(void *)(a1[8] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v6);
  unint64_t v47 = a1 + 13;
  v147 = (char *)a1 + 116;
  uint64_t v148 = (uint64_t)(a1 + 7);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_234;
    }
    int v48 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    uint64_t v49 = (void **)a1[1];
    uint64_t v50 = v49 + 1;
    int v51 = v49[1];
    signed int v52 = (char *)*v49;
    for (unint64_t i = ((char *)v51 - (unsigned char *)*v49) >> 2; i <= v48; unint64_t i = ((char *)v51 - (unsigned char *)*v49) >> 2)
    {
      unint64_t v54 = (unint64_t)v49[2];
      if ((unint64_t)v51 >= v54)
      {
        if ((i + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v56 = v54 - (void)v52;
        uint64_t v57 = v56 >> 1;
        if (v56 >> 1 <= i + 1) {
          uint64_t v57 = i + 1;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v57;
        }
        if (v58) {
          uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v49 + 2), v58);
        }
        else {
          uint64_t v59 = 0;
        }
        int v60 = &v59[4 * i];
        *(_DWORD *)int v60 = 2139095040;
        int v55 = v60 + 4;
        uint64_t v61 = (char *)*v50;
        uint64_t v62 = (char *)*v49;
        if (*v50 != *v49)
        {
          do
          {
            int v63 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *((_DWORD *)v60 - 1) = v63;
            v60 -= 4;
          }
          while (v61 != v62);
          uint64_t v61 = (char *)*v49;
        }
        *uint64_t v49 = v60;
        *uint64_t v50 = v55;
        v49[2] = &v59[4 * v58];
        if (v61) {
          operator delete(v61);
        }
      }
      else
      {
        *int v51 = 2139095040;
        int v55 = v51 + 1;
      }
      *uint64_t v50 = v55;
      uint64_t v65 = (_DWORD *)a1[6];
      unint64_t v64 = a1[7];
      if ((unint64_t)v65 >= v64)
      {
        uint64_t v67 = ((char *)v65 - *v46) >> 2;
        if ((unint64_t)(v67 + 1) >> 62) {
          goto LABEL_239;
        }
        uint64_t v68 = v64 - (void)*v46;
        uint64_t v69 = v68 >> 1;
        if (v68 >> 1 <= (unint64_t)(v67 + 1)) {
          uint64_t v69 = v67 + 1;
        }
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v69;
        }
        if (v70) {
          int v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v148, v70);
        }
        else {
          int v71 = 0;
        }
        uint64_t v72 = &v71[4 * v67];
        *(_DWORD *)uint64_t v72 = 2139095040;
        char v66 = v72 + 4;
        uint64_t v74 = (char *)a1[5];
        uint64_t v73 = (char *)a1[6];
        if (v73 != v74)
        {
          do
          {
            int v75 = *((_DWORD *)v73 - 1);
            v73 -= 4;
            *((_DWORD *)v72 - 1) = v75;
            v72 -= 4;
          }
          while (v73 != v74);
          uint64_t v73 = *v46;
        }
        a1[5] = v72;
        a1[6] = v66;
        a1[7] = &v71[4 * v70];
        if (v73) {
          operator delete(v73);
        }
      }
      else
      {
        _DWORD *v65 = 2139095040;
        char v66 = v65 + 1;
      }
      a1[6] = v66;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), __p);
      uint64_t v49 = (void **)a1[1];
      uint64_t v50 = v49 + 1;
      int v51 = v49[1];
      signed int v52 = (char *)*v49;
    }
    if (*((unsigned char *)a1 + 32))
    {
      LODWORD(__p[0]) = (*(float (**)(void, void))(*(void *)*a1 + 32))(*a1, v48);
      int v153 = 2139095040;
      if (*(float *)__p != INFINITY)
      {
LABEL_234:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
          return;
        }
LABEL_233:
        unsigned char *v147 = 1;
        return;
      }
    }
    *(void *)(a1[8] + (((unint64_t)v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v48);
    uint64_t v76 = a1[5];
    float v77 = *(float *)(v76 + 4 * v48);
    *(_DWORD *)(v76 + 4 * v48) = 2139095040;
    uint64_t v78 = *a1;
    unint64_t v152 = 0;
    (*(void (**)(uint64_t, void, void **))(*(void *)v78 + 136))(v78, v48, __p);
    while (1)
    {
      if (__p[0])
      {
        if ((*(uint64_t (**)(void *))(*(void *)__p[0] + 24))(__p[0])) {
          goto LABEL_215;
        }
        if (__p[0])
        {
          uint64_t v79 = (char *)(*(uint64_t (**)(void *))(*(void *)__p[0] + 32))(__p[0]);
          goto LABEL_114;
        }
      }
      else if (v152 >= v150)
      {
LABEL_215:
        char v140 = 1;
        goto LABEL_217;
      }
      uint64_t v79 = (char *)__p[1] + 16 * v152;
LABEL_114:
      int v80 = (void **)a1[1];
      uint64_t v81 = v80 + 1;
      float v82 = v80[1];
      float v83 = (char *)*v80;
      unint64_t v84 = ((char *)v82 - (unsigned char *)*v80) >> 2;
      if (v84 <= *((int *)v79 + 3))
      {
        do
        {
          unint64_t v86 = (unint64_t)v80[2];
          if ((unint64_t)v82 >= v86)
          {
            if ((v84 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v88 = v86 - (void)v83;
            uint64_t v89 = v88 >> 1;
            if (v88 >> 1 <= v84 + 1) {
              uint64_t v89 = v84 + 1;
            }
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v90 = v89;
            }
            if (v90) {
              float v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v80 + 2), v90);
            }
            else {
              float v91 = 0;
            }
            v92 = &v91[4 * v84];
            *(_DWORD *)v92 = 2139095040;
            float v87 = v92 + 4;
            unint64_t v93 = (char *)*v81;
            unint64_t v94 = (char *)*v80;
            if (*v81 != *v80)
            {
              do
              {
                int v95 = *((_DWORD *)v93 - 1);
                v93 -= 4;
                *((_DWORD *)v92 - 1) = v95;
                v92 -= 4;
              }
              while (v93 != v94);
              unint64_t v93 = (char *)*v80;
            }
            *int v80 = v92;
            unint64_t *v81 = v87;
            v80[2] = &v91[4 * v90];
            if (v93) {
              operator delete(v93);
            }
          }
          else
          {
            _DWORD *v82 = 2139095040;
            float v87 = v82 + 1;
          }
          unint64_t *v81 = v87;
          unsigned int v97 = (_DWORD *)a1[6];
          unint64_t v96 = a1[7];
          if ((unint64_t)v97 >= v96)
          {
            uint64_t v99 = ((char *)v97 - *v46) >> 2;
            if ((unint64_t)(v99 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v100 = v96 - (void)*v46;
            uint64_t v101 = v100 >> 1;
            if (v100 >> 1 <= (unint64_t)(v99 + 1)) {
              uint64_t v101 = v99 + 1;
            }
            if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v102 = v101;
            }
            if (v102) {
              v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v148, v102);
            }
            else {
              v103 = 0;
            }
            v104 = &v103[4 * v99];
            *(_DWORD *)v104 = 2139095040;
            int v98 = v104 + 4;
            v106 = (char *)a1[5];
            v105 = (char *)a1[6];
            if (v105 != v106)
            {
              do
              {
                int v107 = *((_DWORD *)v105 - 1);
                v105 -= 4;
                *((_DWORD *)v104 - 1) = v107;
                v104 -= 4;
              }
              while (v105 != v106);
              v105 = *v46;
            }
            a1[5] = v104;
            a1[6] = v98;
            a1[7] = &v103[4 * v102];
            if (v105) {
              operator delete(v105);
            }
          }
          else
          {
            *unsigned int v97 = 2139095040;
            int v98 = v97 + 1;
          }
          a1[6] = v98;
          LOBYTE(v153) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v153);
          int v80 = (void **)a1[1];
          uint64_t v81 = v80 + 1;
          float v82 = v80[1];
          float v83 = (char *)*v80;
          unint64_t v84 = ((char *)v82 - (unsigned char *)*v80) >> 2;
          unint64_t v85 = *((int *)v79 + 3);
        }
        while (v84 <= v85);
      }
      else
      {
        LODWORD(v85) = *((_DWORD *)v79 + 3);
      }
      if (*((unsigned char *)a1 + 33))
      {
        v108 = (char *)a1[11];
        float v109 = (char *)a1[12];
        unint64_t v110 = (v109 - v108) >> 2;
        if (v110 <= (int)v85)
        {
          do
          {
            if ((unint64_t)v109 >= *v47)
            {
              unint64_t v113 = v110 + 1;
              if ((v110 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v114 = *v47 - (void)v108;
              if (v114 >> 1 > v113) {
                unint64_t v113 = v114 >> 1;
              }
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v113;
              }
              if (v115)
              {
                uint64_t v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v115);
                v108 = (char *)a1[11];
                float v109 = (char *)a1[12];
              }
              else
              {
                uint64_t v116 = 0;
              }
              float v117 = &v116[4 * v110];
              *(_DWORD *)float v117 = -1;
              float v112 = v117 + 4;
              while (v109 != v108)
              {
                int v118 = *((_DWORD *)v109 - 1);
                v109 -= 4;
                *((_DWORD *)v117 - 1) = v118;
                v117 -= 4;
              }
              a1[11] = v117;
              a1[12] = v112;
              a1[13] = &v116[4 * v115];
              if (v108)
              {
                operator delete(v108);
                v108 = (char *)a1[11];
              }
              else
              {
                v108 = v117;
              }
            }
            else
            {
              *(_DWORD *)float v109 = -1;
              float v112 = v109 + 4;
            }
            a1[12] = v112;
            unint64_t v110 = (v112 - v108) >> 2;
            LODWORD(v85) = *((_DWORD *)v79 + 3);
            float v109 = v112;
          }
          while (v110 <= (int)v85);
          uint64_t v111 = (int)v85;
          int v80 = (void **)a1[1];
        }
        else
        {
          uint64_t v111 = (int)v85;
        }
        if (*(_DWORD *)&v108[4 * v111] != *((_DWORD *)a1 + 28))
        {
          *((_DWORD *)*v80 + v111) = 2139095040;
          *(_DWORD *)(a1[5] + 4 * *((int *)v79 + 3)) = 2139095040;
          unint64_t v85 = *((int *)v79 + 3);
          *(void *)(a1[8] + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v85);
          *(_DWORD *)(a1[11] + 4 * v85) = *((_DWORD *)a1 + 28);
          int v80 = (void **)a1[1];
          LODWORD(v85) = *((_DWORD *)v79 + 3);
        }
      }
      uint64_t v119 = (char *)*v80;
      v120 = *v46;
      float v121 = NAN;
      if (v77 != -INFINITY)
      {
        float v122 = *((float *)v79 + 2);
        float v121 = NAN;
        if (v122 != -INFINITY)
        {
          BOOL v123 = v122 == INFINITY || v77 == INFINITY;
          float v124 = v77 + v122;
          if (v123) {
            float v121 = INFINITY;
          }
          else {
            float v121 = v124;
          }
        }
      }
      uint64_t v125 = (int)v85;
      float v126 = *(float *)&v119[4 * (int)v85];
      if (v126 != INFINITY) {
        break;
      }
      float v127 = *((float *)a1 + 7);
      BOOL v128 = v121 > (float)(v127 + INFINITY) || (float)(v121 + v127) < INFINITY;
      float v126 = v121;
      if (v128) {
        goto LABEL_200;
      }
LABEL_212:
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 40))(__p[0]);
      }
      else {
        ++v152;
      }
    }
    float v129 = *(float *)&v119[4 * (int)v85];
    if (v121 != INFINITY)
    {
      if (v126 <= v121)
      {
        float v131 = expf(-(float)(v121 - v126));
        float v129 = v126 - logf(v131 + 1.0);
      }
      else
      {
        float v130 = expf(-(float)(v126 - v121));
        float v129 = v121 - logf(v130 + 1.0);
      }
    }
    float v132 = *((float *)a1 + 7);
    if (v129 <= (float)(v126 + v132) && v126 <= (float)(v129 + v132)) {
      goto LABEL_212;
    }
    if (v121 != INFINITY)
    {
      if (v126 <= v121)
      {
        float v135 = expf(-(float)(v121 - v126));
        float v126 = v126 - logf(v135 + 1.0);
      }
      else
      {
        float v134 = expf(-(float)(v126 - v121));
        float v126 = v121 - logf(v134 + 1.0);
      }
    }
LABEL_200:
    *(float *)&v119[4 * v125] = v126;
    float v136 = *(float *)&v120[4 * v125];
    if (v136 != INFINITY)
    {
      if (v121 == INFINITY)
      {
        float v121 = *(float *)&v120[4 * v125];
      }
      else if (v136 <= v121)
      {
        float v138 = expf(-(float)(v121 - v136));
        float v121 = v136 - logf(v138 + 1.0);
      }
      else
      {
        float v137 = expf(-(float)(v136 - v121));
        float v121 = v121 - logf(v137 + 1.0);
      }
    }
    *(float *)&v120[4 * v125] = v121;
    if (*(float *)&v119[4 * v125] != -INFINITY && (v121 < -INFINITY || v121 > -INFINITY))
    {
      uint64_t v139 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[8] + (((unint64_t)*((int *)v79 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *((_DWORD *)v79 + 3)))
      {
        (*(void (**)(void))(v139 + 40))();
      }
      else
      {
        (*(void (**)(void))(v139 + 24))();
        *(void *)(a1[8] + (((unint64_t)*((int *)v79 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *((_DWORD *)v79 + 3);
      }
      goto LABEL_212;
    }
    char v140 = 0;
    unsigned char *v147 = 1;
LABEL_217:
    if (__p[0])
    {
      (*(void (**)(void *))(*(void *)__p[0] + 8))(__p[0]);
    }
    else if (v151)
    {
      --*v151;
    }
  }
  while ((v140 & 1) != 0);
}

void sub_1B1F53230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,char a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::VectorFst()
{
}

void sub_1B1F53338(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

float fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Final(uint64_t a1, int a2)
{
  return **(float **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    float v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  uint64_t v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1F53680(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::SetFinal(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = *(void **)(v4[8] + 8 * a2);
  v5[1] = 0;
  void v5[2] = 0;
  v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v6 = (void **)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::InitMutableArcIterator()
{
}

void sub_1B1F53CE8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FAE8;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A218;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1F53DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D018;
  uint64_t v2 = (void **)a1[9];
  if (v2 != (void **)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FAE8;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1F540FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1F541F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1F542FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1F543C8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FAE8;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A218;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v18 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v16);
  while (1)
  {
    if (!v16)
    {
      if ((int)v18 >= v17) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v18;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 16))(v16)) {
      break;
    }
    if (!v16) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v16 + 24))();
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState((void *)a1);
    **(float **)(*v5 + 8 * (int)v9) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(void *)(*v5 + 8 * (int)v9) + 24), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __p.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        unint64_t v11 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v15);
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      unint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 32))(v16);
    }
    else {
      ++v18;
    }
  }
  if (v16) {
    (*(void (**)(void))(*(void *)v16 + 8))();
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1F548C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(v17);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1F54B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>();
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      int v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      uint64_t v9 = (void *)fst::cerr(v8);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, a2, a3, 1);
  }
}

void sub_1B1F54C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v73 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      unint64_t v70 = 0;
      int v71 = &v73;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, (uint64_t)&v68);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      uint64_t v61 = a3;
      uint64_t v11 = a2 & 0xC0000;
      uint64_t v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v12 = 0x10425A850000;
      }
      unint64_t v13 = v8 | v12;
      uint64_t v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v13 |= 0x100000uLL;
      }
      unint64_t v73 = v13;
      memset(&v67, 0, sizeof(v67));
      memset(&v66, 0, sizeof(v66));
      unsigned int v65 = 0;
      uint64_t v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v63);
      int v16 = 0;
LABEL_12:
      if (v63)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v63 + 16))(v63))
        {
          if (v63)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v63 + 24))();
LABEL_18:
            std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
            v67.__end_ = v67.__begin_;
            v66.__end_ = v66.__begin_;
            if (v11) {
              std::vector<int>::reserve(&v67, v18);
            }
            if (v14) {
              std::vector<int>::reserve(&v66, v18);
            }
            unint64_t v72 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v68);
            char v19 = 1;
            while (1)
            {
              if (v68)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v68 + 24))(v68))
                {
                  if (v68)
                  {
                    (*(void (**)(void))(*(void *)v68 + 8))();
                  }
                  else
                  {
LABEL_92:
                    if (v71) {
                      --*(_DWORD *)v71;
                    }
                  }
                  uint64_t v15 = a1;
                  if (v11
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    unint64_t v46 = v67.__end_ - v67.__begin_;
                    if (v46 <= 2) {
                      unint64_t v46 = 2;
                    }
                    std::vector<unsigned int>::pointer v47 = v67.__begin_ + 1;
                    unsigned int v48 = *v67.__begin_;
                    unint64_t v49 = v46 - 1;
                    while (1)
                    {
                      unsigned int v51 = *v47++;
                      unsigned int v50 = v51;
                      if (v51 == v48) {
                        break;
                      }
                      unsigned int v48 = v50;
                      if (!--v49) {
                        goto LABEL_101;
                      }
                    }
                    unint64_t v73 = v73 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v14)
                    {
LABEL_112:
                      if (v16 >= 1) {
                        unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      float v58 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v17);
                      *(float *)&uint64_t v68 = v58;
                      int v75 = 2139095040;
                      if (v58 == INFINITY)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)a1 + 40))(a1, v17, INFINITY, v58) != 1)unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
                      }
                        }
                      else
                      {
                        *(float *)&uint64_t v68 = v58;
                        int v75 = 0;
                        if (v58 != 0.0) {
                          unint64_t v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        }
                        ++v16;
                      }
                      if (v63) {
                        (*(void (**)(uint64_t))(*(void *)v63 + 32))(v63);
                      }
                      else {
                        ++v65;
                      }
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_101:
                    if (!v14) {
                      goto LABEL_112;
                    }
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    unint64_t v52 = v66.__end_ - v66.__begin_;
                    if (v52 <= 2) {
                      unint64_t v52 = 2;
                    }
                    std::vector<unsigned int>::pointer v53 = v66.__begin_ + 1;
                    unsigned int v54 = *v66.__begin_;
                    unint64_t v55 = v52 - 1;
                    while (1)
                    {
                      unsigned int v57 = *v53++;
                      unsigned int v56 = v57;
                      if (v57 == v54) {
                        break;
                      }
                      unsigned int v54 = v56;
                      if (!--v55) {
                        goto LABEL_112;
                      }
                    }
                    unint64_t v73 = v73 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_112;
                }
                if (v68)
                {
                  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v68 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v72 >= v70)
              {
                goto LABEL_92;
              }
              uint64_t v20 = v69 + 16 * v72;
LABEL_29:
              int v21 = *(_DWORD *)v20;
              int v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
              {
                unint64_t v73 = v73 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                int v22 = *(_DWORD *)(v20 + 4);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (!v22) {
                    goto LABEL_39;
                  }
                  goto LABEL_35;
                }
                unint64_t v23 = v73;
              }
              else
              {
                unint64_t v23 = v73 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              unint64_t v73 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (!v22)
              {
LABEL_39:
                unint64_t v73 = v73 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
                if (v19) {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
LABEL_35:
              if (v19) {
                goto LABEL_44;
              }
LABEL_40:
              if (v21 < (int)v8) {
                unint64_t v73 = v73 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              }
              if (v22 < (int)a2) {
                unint64_t v73 = v73 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
              }
LABEL_44:
              int v75 = 0;
              float v24 = *(float *)(v20 + 8);
              int v75 = LODWORD(v24);
              int v74 = 0;
              if (v24 != 0.0)
              {
                int v75 = LODWORD(v24);
                int v74 = 2139095040;
                if (v24 != INFINITY) {
                  unint64_t v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
              }
              int v25 = *(_DWORD *)(v20 + 12);
              if (v25 <= (int)v17) {
                unint64_t v73 = v73 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              }
              if (v25 != v17 + 1) {
                unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              LODWORD(v8) = *(_DWORD *)v20;
              LODWORD(a2) = *(_DWORD *)(v20 + 4);
              if (v11)
              {
                std::vector<unsigned int>::pointer end = v67.__end_;
                if (v67.__end_ >= v67.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer begin = v67.__begin_;
                  int64_t v29 = v67.__end_ - v67.__begin_;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    goto LABEL_135;
                  }
                  int64_t v31 = (char *)v67.__end_cap_.__value_ - (char *)v67.__begin_;
                  if (((char *)v67.__end_cap_.__value_ - (char *)v67.__begin_) >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    char v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67.__end_cap_, v32);
                    std::vector<unsigned int>::pointer begin = v67.__begin_;
                    std::vector<unsigned int>::pointer end = v67.__end_;
                  }
                  else
                  {
                    char v33 = 0;
                  }
                  int v34 = (unsigned int *)&v33[4 * v29];
                  *int v34 = *(_DWORD *)v20;
                  uint64_t v27 = v34 + 1;
                  while (end != begin)
                  {
                    unsigned int v35 = *--end;
                    *--int v34 = v35;
                  }
                  v67.__begin_ = v34;
                  v67.__end_ = v27;
                  v67.__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *v67.__end_ = v8;
                  uint64_t v27 = end + 1;
                }
                v67.__end_ = v27;
              }
              if (v14)
              {
                std::vector<unsigned int>::pointer v36 = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer v38 = v66.__begin_;
                  int64_t v39 = v66.__end_ - v66.__begin_;
                  unint64_t v40 = v39 + 1;
                  if ((unint64_t)(v39 + 1) >> 62) {
LABEL_135:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  int64_t v41 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v40) {
                    unint64_t v40 = v41 >> 1;
                  }
                  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v42 = v40;
                  }
                  if (v42)
                  {
                    uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v42);
                    std::vector<unsigned int>::pointer v38 = v66.__begin_;
                    std::vector<unsigned int>::pointer v36 = v66.__end_;
                  }
                  else
                  {
                    uint64_t v43 = 0;
                  }
                  unint64_t v44 = (unsigned int *)&v43[4 * v39];
                  *unint64_t v44 = *(_DWORD *)(v20 + 4);
                  unint64_t v37 = v44 + 1;
                  while (v36 != v38)
                  {
                    unsigned int v45 = *--v36;
                    *--unint64_t v44 = v45;
                  }
                  v66.__begin_ = v44;
                  v66.__end_ = v37;
                  v66.__end_cap_.__value_ = (unsigned int *)&v43[4 * v42];
                  if (v38) {
                    operator delete(v38);
                  }
                }
                else
                {
                  *v66.__end_ = *(_DWORD *)(v20 + 4);
                  unint64_t v37 = v36 + 1;
                }
                v66.__end_ = v37;
              }
              if (v68)
              {
                (*(void (**)(uint64_t))(*(void *)v68 + 40))(v68);
                char v19 = 0;
              }
              else
              {
                char v19 = 0;
                ++v72;
              }
            }
          }
LABEL_17:
          uint64_t v17 = v65;
          goto LABEL_18;
        }
        if (v63) {
          (*(void (**)(void))(*(void *)v63 + 8))();
        }
      }
      else if ((int)v65 < v64)
      {
        goto LABEL_17;
      }
      int v59 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
      a3 = v61;
      if (v59 != -1 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      if (v67.__begin_)
      {
        v67.__end_ = v67.__begin_;
        operator delete(v67.__begin_);
      }
      unint64_t v8 = v73;
    }
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1B1F555E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F55F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
    **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::FinishState(uint64_t a1, int a2, int a3)
{
  if ((*(float (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32)) == INFINITY)
  {
    unint64_t v6 = a2;
  }
  else
  {
    unint64_t v6 = a2;
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v6) != *(_DWORD *)(v7 + 4 * v6)) {
    goto LABEL_17;
  }
  char v8 = 0;
  uint64_t v9 = *(void **)(a1 + 80);
  uint64_t v10 = v9[1];
  uint64_t v11 = **(void **)(a1 + 16);
  uint64_t v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    unint64_t v13 = *v12--;
    v8 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while (v13 != a2);
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = **(void **)(a1 + 72);
  for (unint64_t i = (int *)(v10 - 4); ; --i)
  {
    unint64_t v17 = *i;
    if (v14) {
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    }
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = 1 << v17;
    if ((v8 & 1) == 0) {
      break;
    }
    *(void *)(v11 + 8 * v18) |= v19;
    *(void *)(v15 + 8 * v18) &= ~v19;
    if (v17 == a2)
    {
      v9[1] = i;
      goto LABEL_16;
    }
LABEL_14:
    ;
  }
  *(void *)(v15 + 8 * v18) &= ~v19;
  if (v17 != a2) {
    goto LABEL_14;
  }
  v9[1] = i;
  **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_16:
  ++*(_DWORD *)(a1 + 48);
LABEL_17:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v7 + 4 * v6);
    if (v21 < *(_DWORD *)(v7 + 4 * a3)) {
      *(_DWORD *)(v7 + 4 * a3) = v21;
    }
  }
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36C70;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36C70;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36C70;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1F563CC(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37C28;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1F564E4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37C28;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      unsigned int v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      std::vector<unsigned int>::pointer v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      unsigned int v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unsigned int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unsigned int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  std::vector<unsigned int>::pointer v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  int64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1F5692C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v24);
  if (v24 || (a4 & 1) != 0)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
    uint64_t v12 = a5;
    if (!a4) {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 + v12;
    if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
    {
      if (*(void *)a1) {
        free(*(void **)a1);
      }
      uint64_t v23 = 0x4000;
      if (v13 > 0x4000) {
        uint64_t v23 = v13;
      }
      *(void *)(a1 + 8) = v23;
      uint64_t v15 = malloc_type_malloc(16 * v23, 0x1000040451B5BE8uLL);
      *(void *)a1 = v15;
      *(void *)(a1 + 16) = v15;
      BOOL v14 = v15;
    }
    else
    {
      BOOL v14 = *(_OWORD **)(a1 + 16);
      uint64_t v15 = *(_OWORD **)a1;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = &v14[v13];
    uint64_t v16 = v24;
    uint64_t v17 = v25;
    unint64_t v19 = v26;
    uint64_t v18 = v27;
    if (v27) {
      ++*v27;
    }
    unint64_t v20 = 0;
    if (!v16) {
      goto LABEL_15;
    }
    while (1)
    {
      int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
      uint64_t v22 = *v16;
      if (v21) {
        break;
      }
      _OWORD *v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
      (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      while (1)
      {
        ++v15;
        if (v16) {
          break;
        }
LABEL_15:
        if (v20 >= v19)
        {
          if (v18) {
            --*v18;
          }
          return;
        }
        _OWORD *v15 = *(_OWORD *)(v17 + 16 * v20++);
      }
    }
    (*(void (**)(uint64_t *))(v22 + 8))(v16);
  }
  else
  {
    uint64_t v10 = v25 + 16 * v26;
    *(void *)(a1 + 16) = v25;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1B1F56BC4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v35 = 0u;
  long long v36 = 0u;
  *(_OWORD *)unint64_t v33 = 0u;
  *(_OWORD *)int v34 = 0u;
  uint64_t v6 = -1;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = -1;
  uint64_t v37 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v38 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v38 = (int)fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v41;
    if (v41 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t v10 = v9 | 3;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v10, (uint64_t)v32);
  uint64_t v30 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v11 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = (v11 >> 3);
    do
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 24);
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        unint64_t v17 = v16 >> 4;
        if (v17 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v17;
        }
        unint64_t v19 = (_DWORD *)(v15 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v19;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    unint64_t v20 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    int v21 = (void *)fst::cerr(v20);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(void *)a3;
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v25 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v38 == v12)
    {
      uint64_t updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v28 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    int64_t v29 = (void *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  uint64_t v38 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v32, v30);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_30:
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[1]);
  }
  if (SHIBYTE(v34[0]) < 0) {
    operator delete(v33[0]);
  }
  return updated;
}

void sub_1B1F570A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      uint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      int64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B1F576D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Type()
{
  {
    operator new();
  }
  return fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Type(void)::type;
}

void sub_1B1F577C8(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1F57B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::SetFinal(void *a1, int a2, float a3)
{
  uint64_t v5 = *(float **)(a1[8] + 8 * a2);
  float v6 = *v5;
  *uint64_t v5 = a3;
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t result = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v7, v6, a3);
  a1[1] = a1[1] & 4 | result;
  return result;
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 32);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 24)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 16);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(v9, a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v32, v5, &__x);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v32.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v32.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(void **)(v11 + 8 * v12));
      }
      else
      {
        v32.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      uint64_t v18 = *(void *)(v16 + 24);
      uint64_t v17 = *(void *)(v16 + 32);
      int64x2_t v19 = *(int64x2_t *)(v16 + 8);
      uint64_t v20 = v17 - v18;
      if (v17 == v18)
      {
        int64x2_t v30 = *(int64x2_t *)(v16 + 8);
        uint64_t v26 = 0;
        uint64_t v27 = v20 >> 4;
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v26 = 0;
        uint64_t v22 = *(void *)(v16 + 24);
        do
        {
          int v23 = v32.__begin_[*(int *)(v22 + 12)];
          if (v23 == -1)
          {
            v24.i64[0] = *(void *)v22;
            v24.i64[1] = HIDWORD(*(void *)v22);
            int64x2_t v19 = vaddq_s64(v19, vceqzq_s64(v24));
          }
          else
          {
            *(_DWORD *)(v22 + 12) = v23;
            if (v21 != v26)
            {
              *(_OWORD *)(v18 + 16 * v26) = *(_OWORD *)v22;
              uint64_t v14 = *v4;
            }
            ++v26;
          }
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          ++v21;
          uint64_t v25 = *(void *)(v16 + 32) - *(void *)(v16 + 24);
          v22 += 16;
        }
        while (v21 < v25 >> 4);
        int64x2_t v30 = v19;
        uint64_t v27 = v25 >> 4;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs((void *)v16, v27 - v26);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 8) = v30;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v28 = *(int *)(a1 + 88);
  if (v28 == -1)
  {
    int64_t v29 = v32.__begin_;
    if (!v32.__begin_) {
      return;
    }
  }
  else
  {
    int64_t v29 = v32.__begin_;
    *(_DWORD *)(a1 + 88) = v32.__begin_[v28];
  }
  v32.__end_ = v29;
  operator delete(v29);
}

void sub_1B1F57EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                                            - *(void *)(*(void *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 16 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Flags_()
{
  return 15;
}

void fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      uint64_t v6 = 0;
      v5[0] = v3;
      v5[1] = 0;
      void v5[2] = 0;
      v5[3] = &v6;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a2, (uint64_t)v5);
    }
    operator new();
  }
  operator new();
}

void sub_1B1F5862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  int64x2_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  char v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::NaturalLess<fst::LogWeightTpl<float>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v12 = *(void *)(a3 + 8) - *(void *)a3;
  if (v12)
  {
    unint64_t v13 = v12 >> 2;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    bzero(*(void **)a3, 4 * v13);
  }
  unsigned int v27 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v25);
  while (1)
  {
    uint64_t result = v25;
    if (!v25)
    {
      if ((int)v27 >= v26) {
        return result;
      }
LABEL_11:
      uint64_t v16 = v27;
      goto LABEL_12;
    }
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 16))(v25);
    uint64_t result = v25;
    if (v15) {
      break;
    }
    if (!v25) {
      goto LABEL_11;
    }
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v25 + 24))();
LABEL_12:
    unint64_t v24 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v16, v22);
    while (1)
    {
      if (!v22[0])
      {
        if (v24 >= v22[2]) {
          goto LABEL_32;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v22[0] + 24))(v22[0])) {
        break;
      }
      if (v22[0])
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v22[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = v22[1] + 16 * v24;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * (int)v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 12)))
      {
        int64x2_t v19 = *(_DWORD **)a3;
        if (!a4
          || (int v21 = 0, fst::NaturalLess<fst::LogWeightTpl<float>>::operator()(a4, (float *)(v17 + 8), (float *)&v21)))
        {
          int v20 = 1;
          goto LABEL_25;
        }
        if ((v19[v18] | 2) == 2)
        {
          int v20 = 3;
LABEL_25:
          v19[v18] = v20;
        }
        *a5 = 0;
      }
      *a6 = 0;
      if (v22[0]) {
        (*(void (**)(void))(*(void *)v22[0] + 40))(v22[0]);
      }
      else {
        ++v24;
      }
    }
    if (v22[0])
    {
      (*(void (**)(void))(*(void *)v22[0] + 8))();
      goto LABEL_34;
    }
LABEL_32:
    if (v23) {
      --*v23;
    }
LABEL_34:
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 32))(v25);
    }
    else {
      ++v27;
    }
  }
  if (v25) {
    return (*(uint64_t (**)(void))(*(void *)v25 + 8))();
  }
  return result;
}

void sub_1B1F58A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  unint64_t v2 = &v3;
  fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>();
}

void sub_1B1F58C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  int v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>()
{
}

void sub_1B1F59550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::ShortestDistanceState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
      return;
    }
    goto LABEL_232;
  }
  if (*((unsigned char *)a1 + 32))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v153, (uint64_t)__p);
    std::vector<int>::size_type v5 = (void *)fst::cerr(v4);
    v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ShortestDistance: first_path option disallowed when ", 52);
    v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)"Weight does not have the path property: ", 40);
    uint64_t v143 = fst::LogWeightTpl<float>::Type();
    int v144 = *(char *)(v143 + 23);
    if (v144 >= 0) {
      uint64_t v145 = v143;
    }
    else {
      uint64_t v145 = *(void *)v143;
    }
    if (v144 >= 0) {
      uint64_t v146 = *(unsigned __int8 *)(v143 + 23);
    }
    else {
      uint64_t v146 = *(void *)(v143 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, v145, v146);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v153);
    if (SHIBYTE(v150) < 0) {
      operator delete(__p[0]);
    }
LABEL_232:
    v147 = (char *)a1 + 116;
    goto LABEL_233;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v6 = a2;
  uint64_t v7 = (void **)a1[1];
  uint64_t v9 = v7 + 1;
  unint64_t v8 = v7[1];
  uint64_t v10 = (char *)*v7;
  unint64_t v11 = ((char *)v8 - (unsigned char *)*v7) >> 2;
  if (v11 <= a2)
  {
    uint64_t v12 = (char **)(a1 + 5);
    do
    {
      unint64_t v13 = (unint64_t)v7[2];
      if ((unint64_t)v8 >= v13)
      {
        if ((v11 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v13 - (void)v10;
        uint64_t v16 = v15 >> 1;
        if (v15 >> 1 <= v11 + 1) {
          uint64_t v16 = v11 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v7 + 2), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[4 * v11];
        *(_DWORD *)uint64_t v19 = 2139095040;
        uint64_t v14 = v19 + 4;
        uint64_t v20 = (char *)*v9;
        int v21 = (char *)*v7;
        if (*v9 != *v7)
        {
          do
          {
            int v22 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v19 - 1) = v22;
            v19 -= 4;
          }
          while (v20 != v21);
          uint64_t v20 = (char *)*v7;
        }
        *uint64_t v7 = v19;
        void *v9 = v14;
        v7[2] = &v18[4 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *unint64_t v8 = 2139095040;
        uint64_t v14 = v8 + 1;
      }
      void *v9 = v14;
      unint64_t v24 = (_DWORD *)a1[6];
      unint64_t v23 = a1[7];
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = ((char *)v24 - *v12) >> 2;
        if ((unint64_t)(v26 + 1) >> 62) {
LABEL_239:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v27 = v23 - (void)*v12;
        uint64_t v28 = v27 >> 1;
        if (v27 >> 1 <= (unint64_t)(v26 + 1)) {
          uint64_t v28 = v26 + 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          int64x2_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v29);
        }
        else {
          int64x2_t v30 = 0;
        }
        char v31 = &v30[4 * v26];
        *(_DWORD *)char v31 = 2139095040;
        uint64_t v25 = v31 + 4;
        unint64_t v33 = (char *)a1[5];
        std::vector<int> v32 = (char *)a1[6];
        if (v32 != v33)
        {
          do
          {
            int v34 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v31 - 1) = v34;
            v31 -= 4;
          }
          while (v32 != v33);
          std::vector<int> v32 = *v12;
        }
        a1[5] = v31;
        a1[6] = v25;
        a1[7] = &v30[4 * v29];
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        _DWORD *v24 = 2139095040;
        uint64_t v25 = v24 + 1;
      }
      a1[6] = v25;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), __p);
      uint64_t v7 = (void **)a1[1];
      uint64_t v9 = v7 + 1;
      unint64_t v8 = v7[1];
      uint64_t v10 = (char *)*v7;
      unint64_t v11 = ((char *)v8 - (unsigned char *)*v7) >> 2;
    }
    while (v11 <= v6);
  }
  if (*((unsigned char *)a1 + 33))
  {
    long long v35 = (char *)a1[11];
    long long v36 = (char *)a1[12];
    unint64_t v37 = (v36 - v35) >> 2;
    if (v37 <= v6)
    {
      long long v38 = a1 + 13;
      do
      {
        if ((unint64_t)v36 >= *v38)
        {
          unint64_t v40 = v37 + 1;
          if ((v37 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = *v38 - (void)v35;
          if (v41 >> 1 > v40) {
            unint64_t v40 = v41 >> 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v42);
            long long v35 = (char *)a1[11];
            long long v36 = (char *)a1[12];
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v44 = &v43[4 * v37];
          *(_DWORD *)unint64_t v44 = -1;
          long long v39 = v44 + 4;
          while (v36 != v35)
          {
            int v45 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          a1[11] = v44;
          a1[12] = v39;
          a1[13] = &v43[4 * v42];
          if (v35)
          {
            operator delete(v35);
            long long v35 = (char *)a1[11];
          }
          else
          {
            long long v35 = v44;
          }
        }
        else
        {
          *(_DWORD *)long long v36 = -1;
          long long v39 = v36 + 4;
        }
        a1[12] = v39;
        unint64_t v37 = (v39 - v35) >> 2;
        long long v36 = v39;
      }
      while (v37 <= v6);
      uint64_t v10 = *(char **)a1[1];
    }
    *(_DWORD *)&v35[4 * v6] = *((_DWORD *)a1 + 28);
  }
  *(_DWORD *)&v10[4 * v6] = 0;
  unint64_t v46 = (char **)(a1 + 5);
  *(_DWORD *)(a1[5] + 4 * v6) = 0;
  *(void *)(a1[8] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v6);
  uint64_t v47 = a1 + 13;
  v147 = (char *)a1 + 116;
  uint64_t v148 = (uint64_t)(a1 + 7);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_234;
    }
    int v48 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    uint64_t v49 = (void **)a1[1];
    uint64_t v50 = v49 + 1;
    unsigned int v51 = v49[1];
    uint64_t v52 = (char *)*v49;
    for (unint64_t i = ((char *)v51 - (unsigned char *)*v49) >> 2; i <= v48; unint64_t i = ((char *)v51 - (unsigned char *)*v49) >> 2)
    {
      unint64_t v54 = (unint64_t)v49[2];
      if ((unint64_t)v51 >= v54)
      {
        if ((i + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v56 = v54 - (void)v52;
        uint64_t v57 = v56 >> 1;
        if (v56 >> 1 <= i + 1) {
          uint64_t v57 = i + 1;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v57;
        }
        if (v58) {
          int v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v49 + 2), v58);
        }
        else {
          int v59 = 0;
        }
        int v60 = &v59[4 * i];
        *(_DWORD *)int v60 = 2139095040;
        long long v55 = v60 + 4;
        uint64_t v61 = (char *)*v50;
        uint64_t v62 = (char *)*v49;
        if (*v50 != *v49)
        {
          do
          {
            int v63 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *((_DWORD *)v60 - 1) = v63;
            v60 -= 4;
          }
          while (v61 != v62);
          uint64_t v61 = (char *)*v49;
        }
        *uint64_t v49 = v60;
        *uint64_t v50 = v55;
        v49[2] = &v59[4 * v58];
        if (v61) {
          operator delete(v61);
        }
      }
      else
      {
        *unsigned int v51 = 2139095040;
        long long v55 = v51 + 1;
      }
      *uint64_t v50 = v55;
      unsigned int v65 = (_DWORD *)a1[6];
      unint64_t v64 = a1[7];
      if ((unint64_t)v65 >= v64)
      {
        uint64_t v67 = ((char *)v65 - *v46) >> 2;
        if ((unint64_t)(v67 + 1) >> 62) {
          goto LABEL_239;
        }
        uint64_t v68 = v64 - (void)*v46;
        uint64_t v69 = v68 >> 1;
        if (v68 >> 1 <= (unint64_t)(v67 + 1)) {
          uint64_t v69 = v67 + 1;
        }
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v69;
        }
        if (v70) {
          int v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v148, v70);
        }
        else {
          int v71 = 0;
        }
        unint64_t v72 = &v71[4 * v67];
        *(_DWORD *)unint64_t v72 = 2139095040;
        std::vector<unsigned int> v66 = v72 + 4;
        int v74 = (char *)a1[5];
        unint64_t v73 = (char *)a1[6];
        if (v73 != v74)
        {
          do
          {
            int v75 = *((_DWORD *)v73 - 1);
            v73 -= 4;
            *((_DWORD *)v72 - 1) = v75;
            v72 -= 4;
          }
          while (v73 != v74);
          unint64_t v73 = *v46;
        }
        a1[5] = v72;
        a1[6] = v66;
        a1[7] = &v71[4 * v70];
        if (v73) {
          operator delete(v73);
        }
      }
      else
      {
        _DWORD *v65 = 2139095040;
        std::vector<unsigned int> v66 = v65 + 1;
      }
      a1[6] = v66;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), __p);
      uint64_t v49 = (void **)a1[1];
      uint64_t v50 = v49 + 1;
      unsigned int v51 = v49[1];
      uint64_t v52 = (char *)*v49;
    }
    if (*((unsigned char *)a1 + 32))
    {
      LODWORD(__p[0]) = (*(float (**)(void, void))(*(void *)*a1 + 32))(*a1, v48);
      int v153 = 2139095040;
      if (*(float *)__p != INFINITY)
      {
LABEL_234:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
          return;
        }
LABEL_233:
        unsigned char *v147 = 1;
        return;
      }
    }
    *(void *)(a1[8] + (((unint64_t)v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v48);
    uint64_t v76 = a1[5];
    float v77 = *(float *)(v76 + 4 * v48);
    *(_DWORD *)(v76 + 4 * v48) = 2139095040;
    uint64_t v78 = *a1;
    unint64_t v152 = 0;
    (*(void (**)(uint64_t, void, void **))(*(void *)v78 + 136))(v78, v48, __p);
    while (1)
    {
      if (__p[0])
      {
        if ((*(uint64_t (**)(void *))(*(void *)__p[0] + 24))(__p[0])) {
          goto LABEL_215;
        }
        if (__p[0])
        {
          uint64_t v79 = (char *)(*(uint64_t (**)(void *))(*(void *)__p[0] + 32))(__p[0]);
          goto LABEL_114;
        }
      }
      else if (v152 >= v150)
      {
LABEL_215:
        char v140 = 1;
        goto LABEL_217;
      }
      uint64_t v79 = (char *)__p[1] + 16 * v152;
LABEL_114:
      int v80 = (void **)a1[1];
      uint64_t v81 = v80 + 1;
      float v82 = v80[1];
      float v83 = (char *)*v80;
      unint64_t v84 = ((char *)v82 - (unsigned char *)*v80) >> 2;
      if (v84 <= *((int *)v79 + 3))
      {
        do
        {
          unint64_t v86 = (unint64_t)v80[2];
          if ((unint64_t)v82 >= v86)
          {
            if ((v84 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v88 = v86 - (void)v83;
            uint64_t v89 = v88 >> 1;
            if (v88 >> 1 <= v84 + 1) {
              uint64_t v89 = v84 + 1;
            }
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v90 = v89;
            }
            if (v90) {
              float v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v80 + 2), v90);
            }
            else {
              float v91 = 0;
            }
            v92 = &v91[4 * v84];
            *(_DWORD *)v92 = 2139095040;
            float v87 = v92 + 4;
            unint64_t v93 = (char *)*v81;
            unint64_t v94 = (char *)*v80;
            if (*v81 != *v80)
            {
              do
              {
                int v95 = *((_DWORD *)v93 - 1);
                v93 -= 4;
                *((_DWORD *)v92 - 1) = v95;
                v92 -= 4;
              }
              while (v93 != v94);
              unint64_t v93 = (char *)*v80;
            }
            *int v80 = v92;
            unint64_t *v81 = v87;
            v80[2] = &v91[4 * v90];
            if (v93) {
              operator delete(v93);
            }
          }
          else
          {
            _DWORD *v82 = 2139095040;
            float v87 = v82 + 1;
          }
          unint64_t *v81 = v87;
          unsigned int v97 = (_DWORD *)a1[6];
          unint64_t v96 = a1[7];
          if ((unint64_t)v97 >= v96)
          {
            uint64_t v99 = ((char *)v97 - *v46) >> 2;
            if ((unint64_t)(v99 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v100 = v96 - (void)*v46;
            uint64_t v101 = v100 >> 1;
            if (v100 >> 1 <= (unint64_t)(v99 + 1)) {
              uint64_t v101 = v99 + 1;
            }
            if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v102 = v101;
            }
            if (v102) {
              v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v148, v102);
            }
            else {
              v103 = 0;
            }
            v104 = &v103[4 * v99];
            *(_DWORD *)v104 = 2139095040;
            int v98 = v104 + 4;
            v106 = (char *)a1[5];
            v105 = (char *)a1[6];
            if (v105 != v106)
            {
              do
              {
                int v107 = *((_DWORD *)v105 - 1);
                v105 -= 4;
                *((_DWORD *)v104 - 1) = v107;
                v104 -= 4;
              }
              while (v105 != v106);
              v105 = *v46;
            }
            a1[5] = v104;
            a1[6] = v98;
            a1[7] = &v103[4 * v102];
            if (v105) {
              operator delete(v105);
            }
          }
          else
          {
            *unsigned int v97 = 2139095040;
            int v98 = v97 + 1;
          }
          a1[6] = v98;
          LOBYTE(v153) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v153);
          int v80 = (void **)a1[1];
          uint64_t v81 = v80 + 1;
          float v82 = v80[1];
          float v83 = (char *)*v80;
          unint64_t v84 = ((char *)v82 - (unsigned char *)*v80) >> 2;
          unint64_t v85 = *((int *)v79 + 3);
        }
        while (v84 <= v85);
      }
      else
      {
        LODWORD(v85) = *((_DWORD *)v79 + 3);
      }
      if (*((unsigned char *)a1 + 33))
      {
        v108 = (char *)a1[11];
        float v109 = (char *)a1[12];
        unint64_t v110 = (v109 - v108) >> 2;
        if (v110 <= (int)v85)
        {
          do
          {
            if ((unint64_t)v109 >= *v47)
            {
              unint64_t v113 = v110 + 1;
              if ((v110 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v114 = *v47 - (void)v108;
              if (v114 >> 1 > v113) {
                unint64_t v113 = v114 >> 1;
              }
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v113;
              }
              if (v115)
              {
                uint64_t v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v115);
                v108 = (char *)a1[11];
                float v109 = (char *)a1[12];
              }
              else
              {
                uint64_t v116 = 0;
              }
              float v117 = &v116[4 * v110];
              *(_DWORD *)float v117 = -1;
              float v112 = v117 + 4;
              while (v109 != v108)
              {
                int v118 = *((_DWORD *)v109 - 1);
                v109 -= 4;
                *((_DWORD *)v117 - 1) = v118;
                v117 -= 4;
              }
              a1[11] = v117;
              a1[12] = v112;
              a1[13] = &v116[4 * v115];
              if (v108)
              {
                operator delete(v108);
                v108 = (char *)a1[11];
              }
              else
              {
                v108 = v117;
              }
            }
            else
            {
              *(_DWORD *)float v109 = -1;
              float v112 = v109 + 4;
            }
            a1[12] = v112;
            unint64_t v110 = (v112 - v108) >> 2;
            LODWORD(v85) = *((_DWORD *)v79 + 3);
            float v109 = v112;
          }
          while (v110 <= (int)v85);
          uint64_t v111 = (int)v85;
          int v80 = (void **)a1[1];
        }
        else
        {
          uint64_t v111 = (int)v85;
        }
        if (*(_DWORD *)&v108[4 * v111] != *((_DWORD *)a1 + 28))
        {
          *((_DWORD *)*v80 + v111) = 2139095040;
          *(_DWORD *)(a1[5] + 4 * *((int *)v79 + 3)) = 2139095040;
          unint64_t v85 = *((int *)v79 + 3);
          *(void *)(a1[8] + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v85);
          *(_DWORD *)(a1[11] + 4 * v85) = *((_DWORD *)a1 + 28);
          int v80 = (void **)a1[1];
          LODWORD(v85) = *((_DWORD *)v79 + 3);
        }
      }
      uint64_t v119 = (char *)*v80;
      v120 = *v46;
      float v121 = NAN;
      if (v77 != -INFINITY)
      {
        float v122 = *((float *)v79 + 2);
        float v121 = NAN;
        if (v122 != -INFINITY)
        {
          BOOL v123 = v122 == INFINITY || v77 == INFINITY;
          float v124 = v77 + v122;
          if (v123) {
            float v121 = INFINITY;
          }
          else {
            float v121 = v124;
          }
        }
      }
      uint64_t v125 = (int)v85;
      float v126 = *(float *)&v119[4 * (int)v85];
      if (v126 != INFINITY) {
        break;
      }
      float v127 = *((float *)a1 + 7);
      BOOL v128 = v121 > (float)(v127 + INFINITY) || (float)(v121 + v127) < INFINITY;
      float v126 = v121;
      if (v128) {
        goto LABEL_200;
      }
LABEL_212:
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 40))(__p[0]);
      }
      else {
        ++v152;
      }
    }
    float v129 = *(float *)&v119[4 * (int)v85];
    if (v121 != INFINITY)
    {
      if (v126 <= v121)
      {
        float v131 = expf(-(float)(v121 - v126));
        float v129 = v126 - logf(v131 + 1.0);
      }
      else
      {
        float v130 = expf(-(float)(v126 - v121));
        float v129 = v121 - logf(v130 + 1.0);
      }
    }
    float v132 = *((float *)a1 + 7);
    if (v129 <= (float)(v126 + v132) && v126 <= (float)(v129 + v132)) {
      goto LABEL_212;
    }
    if (v121 != INFINITY)
    {
      if (v126 <= v121)
      {
        float v135 = expf(-(float)(v121 - v126));
        float v126 = v126 - logf(v135 + 1.0);
      }
      else
      {
        float v134 = expf(-(float)(v126 - v121));
        float v126 = v121 - logf(v134 + 1.0);
      }
    }
LABEL_200:
    *(float *)&v119[4 * v125] = v126;
    float v136 = *(float *)&v120[4 * v125];
    if (v136 != INFINITY)
    {
      if (v121 == INFINITY)
      {
        float v121 = *(float *)&v120[4 * v125];
      }
      else if (v136 <= v121)
      {
        float v138 = expf(-(float)(v121 - v136));
        float v121 = v136 - logf(v138 + 1.0);
      }
      else
      {
        float v137 = expf(-(float)(v136 - v121));
        float v121 = v121 - logf(v137 + 1.0);
      }
    }
    *(float *)&v120[4 * v125] = v121;
    if (*(float *)&v119[4 * v125] != -INFINITY && (v121 < -INFINITY || v121 > -INFINITY))
    {
      uint64_t v139 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[8] + (((unint64_t)*((int *)v79 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *((_DWORD *)v79 + 3)))
      {
        (*(void (**)(void))(v139 + 40))();
      }
      else
      {
        (*(void (**)(void))(v139 + 24))();
        *(void *)(a1[8] + (((unint64_t)*((int *)v79 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *((_DWORD *)v79 + 3);
      }
      goto LABEL_212;
    }
    char v140 = 0;
    unsigned char *v147 = 1;
LABEL_217:
    if (__p[0])
    {
      (*(void (**)(void *))(*(void *)__p[0] + 8))(__p[0]);
    }
    else if (v151)
    {
      --*v151;
    }
  }
  while ((v140 & 1) != 0);
}

void sub_1B1F5A510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,char a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41E60;
  unint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorFst()
{
}

void sub_1B1F5A694(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(_DWORD **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *v4;
  uint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(v4 + 2));
  *(_DWORD *)(a3 + 32) = v4[8];
  return result;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 56);
  uint64_t v4 = *v5;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1F5AA38(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

void *fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  int v8 = *a3;
  std::list<int>::list(v9, (uint64_t)(a3 + 2));
  int v10 = a3[8];
  fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetFinal(v6, a2, &v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1B1F5AB58(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::AddArc(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(v4, a2);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56);
  return std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::InitMutableArcIterator()
{
}

void sub_1B1F5B098(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FE68;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A598;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1F5B198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D398;
  uint64_t v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void *)a1[8];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FE68;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (void **)(a1 + 56);
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__list_imp<char *>::clear((void *)(a1 + 8));
    operator delete((void *)a1);
  }
}

void std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 56;
        std::__list_imp<char *>::clear((void *)v4 - 5);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1F5B584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1F5B680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1F5B784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1F5B850(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FE68;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A598;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v20 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v18);
  while (1)
  {
    if (!v18)
    {
      if ((int)v20 >= v19) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v20;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18)) {
      break;
    }
    if (!v18) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 24))(v18);
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddState((void *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v16, a2, v9);
    fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetFinal(a1, v9, (int *)&v16);
    std::__list_imp<char *>::clear(v17);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 56), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __str.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        unint64_t v11 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v15);
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__str.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      unint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__str.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 32))(v18);
    }
    else {
      ++v20;
    }
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1F5BD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstBaseImpl(v16);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1F5BFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>();
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddState(void *a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  uint64_t v3 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  *(_DWORD *)uint64_t v2 = *v3;
  std::list<int>::list((void *)v2 + 1, (uint64_t)(v3 + 2));
  unint64_t v4 = a1[10];
  *((_DWORD *)v2 + 8) = v3[8];
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((void *)v2 + 9) = 0;
  uint64_t v5 = (void *)a1[9];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[8];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v11);
    }
    else {
      char v12 = 0;
    }
    char v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)char v13 = v2;
    int v6 = v13 + 8;
    uint64_t v16 = (char *)a1[8];
    std::string::size_type v15 = (char *)a1[9];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      std::string::size_type v15 = (char *)a1[8];
    }
    a1[8] = v13;
    a1[9] = v6;
    a1[10] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = v2;
    int v6 = v5 + 1;
  }
  a1[9] = v6;
  return (((unint64_t)v6 - a1[8]) >> 3) - 1;
}

void *fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  int v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  int v5 = a3[8];
  int v9 = v5;
  *(_DWORD *)uint64_t v4 = v7;
  if ((int *)v4 != &v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v4 + 8), v8[1], (uint64_t)v8);
    int v5 = v9;
  }
  *(_DWORD *)(v4 + 32) = v5;
  return std::__list_imp<char *>::clear(v8);
}

void sub_1B1F5C190(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero(void)::zero;
}

void sub_1B1F5C240(_Unwind_Exception *a1)
{
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Zero()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Zero(void)::zero;
}

void sub_1B1F5C314(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Zero()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Zero(void)::zero;
}

void sub_1B1F5C414(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)1>::Zero()
{
  {
    operator new();
  }
  return fst::StringWeight<int,(fst::StringType)1>::Zero(void)::zero;
}

void sub_1B1F5C4D8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C40CA22B68ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)1>::StringWeight(uint64_t a1, int a2)
{
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(_DWORD *)a1 = 0;
  fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a1, a2);
  return a1;
}

void sub_1B1F5C548(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_DWORD *fst::StringWeight<int,(fst::StringType)1>::PushBack(_DWORD *result, int a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    uint64_t result = operator new(0x18uLL);
    result[4] = a2;
    uint64_t v5 = *((void *)v3 + 1);
    uint64_t v4 = v3 + 2;
    *(void *)uint64_t result = v5;
    *((void *)result + 1) = v4;
    *(void *)(v5 + 8) = result;
    void *v4 = result;
    ++v4[2];
  }
  else
  {
    *uint64_t result = a2;
  }
  return result;
}

uint64_t *std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (unint64_t i = (uint64_t *)a1[1]; a2 != a3 && i != a1; unint64_t i = (uint64_t *)i[1])
  {
    *((_DWORD *)i + 4) = *(_DWORD *)(a2 + 16);
    a2 = *(void *)(a2 + 8);
  }
  if (i == a1) {
    return std::list<int>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t)a1, a1, a2, a3);
  }
  else {
    return std::list<int>::erase((uint64_t)a1, i, a1);
  }
}

uint64_t *std::list<int>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x18uLL);
    int v9 = v8;
    *uint64_t v8 = 0;
    v8[1] = 0;
    *((_DWORD *)v8 + 4) = *(_DWORD *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      char v12 = v8;
      do
      {
        uint64_t v8 = operator new(0x18uLL);
        *uint64_t v8 = v12;
        v8[1] = 0;
        *((_DWORD *)v8 + 4) = *(_DWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        char v12 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    void *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1B1F5C6DC(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B1F5C6FC(_Unwind_Exception *a1)
{
}

uint64_t *std::list<int>::erase(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  if (__p != a3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = *__p;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    do
    {
      int v7 = (uint64_t *)__p[1];
      --*(void *)(a1 + 16);
      operator delete(__p);
      std::string __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    long long v7[3] = v7[0] + 56 * v6;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1F5C830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(void *)(v12 - 56) = *(void *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((void *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1F5C95C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::__list_imp<char *>::clear((void *)(i - 40));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[5];
  }
  if (!a2[1]) {
    ++a1[6];
  }
  uint64_t v3 = a1 + 7;
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const&>((uint64_t)v3, (uint64_t)a2);
    uint64_t result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void *std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t result = std::list<int>::list((void *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1B1F5CAA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[56 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((void *)v11 + 2, a2 + 16);
  uint64_t v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1F5CBE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1, a2, a3, 1);
  }
}

void sub_1B1F5CD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v116 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      float v112 = (uint64_t *)&v116;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a1, (uint64_t)&v109);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
      goto LABEL_211;
    }
    uint64_t v11 = a2 & 0xC0000;
    uint64_t v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0) {
      uint64_t v12 = 0x10425A850000;
    }
    unint64_t v13 = v8 | v12;
    uint64_t v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0) {
      v13 |= 0x100000uLL;
    }
    unint64_t v116 = v13;
    memset(&v108, 0, sizeof(v108));
    memset(&v107, 0, sizeof(v107));
    unsigned int v106 = 0;
    uint64_t v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v104);
    int v16 = 0;
LABEL_12:
    if (!v104)
    {
      if ((int)v106 >= v105) {
        goto LABEL_203;
      }
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v104 + 16))(v104))
    {
      if (v104)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v104 + 24))();
LABEL_18:
        std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
        uint64_t v111 = (uint64_t)&v111;
        float v112 = &v111;
        uint64_t v113 = 0;
        LODWORD(v110) = 0;
        v108.__end_ = v108.__begin_;
        v107.__end_ = v107.__begin_;
        if (v11) {
          std::vector<int>::reserve(&v108, v18);
        }
        if (v14) {
          std::vector<int>::reserve(&v107, v18);
        }
        int v98 = v16;
        unint64_t v103 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v99);
        char v19 = 1;
        while (1)
        {
          if (v99)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v99 + 24))(v99))
            {
              if (v99)
              {
                (*(void (**)(void))(*(void *)v99 + 8))();
              }
              else
              {
LABEL_132:
                if (v102) {
                  --*v102;
                }
              }
              uint64_t v15 = a1;
              int v16 = v98;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v108.__end_ - (char *)v108.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14) {
                  goto LABEL_152;
                }
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  unint64_t v72 = v107.__end_ - v107.__begin_;
                  if (v72 <= 2) {
                    unint64_t v72 = 2;
                  }
                  std::vector<unsigned int>::pointer v73 = v107.__begin_ + 1;
                  unsigned int v74 = *v107.__begin_;
                  unint64_t v75 = v72 - 1;
                  while (1)
                  {
                    unsigned int v77 = *v73++;
                    unsigned int v76 = v77;
                    if (v77 == v74) {
                      break;
                    }
                    unsigned int v74 = v76;
                    if (!--v75) {
                      goto LABEL_152;
                    }
                  }
                  unint64_t v116 = v116 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              unint64_t v66 = v108.__end_ - v108.__begin_;
              if (v66 <= 2) {
                unint64_t v66 = 2;
              }
              std::vector<unsigned int>::pointer v67 = v108.__begin_ + 1;
              unsigned int v68 = *v108.__begin_;
              unint64_t v69 = v66 - 1;
              while (1)
              {
                unsigned int v71 = *v67++;
                unsigned int v70 = v71;
                if (v71 == v68) {
                  break;
                }
                unsigned int v68 = v70;
                if (!--v69) {
                  goto LABEL_141;
                }
              }
              unint64_t v116 = v116 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14) {
                goto LABEL_142;
              }
LABEL_152:
              if (v98 >= 1) {
                unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v99, a1, v17);
              uint64_t v78 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
              if (v99) {
                uint64_t v79 = (char *)v102 + 1;
              }
              else {
                uint64_t v79 = 0;
              }
              if (*(_DWORD *)v78) {
                uint64_t v80 = *(void *)(v78 + 24) + 1;
              }
              else {
                uint64_t v80 = 0;
              }
              if (v79 != (char *)v80) {
                goto LABEL_174;
              }
              char v81 = 0;
              unint64_t v82 = v101;
              float v83 = (uint64_t *)(v78 + 16);
              BOOL v84 = v99 && v99 == *(_DWORD *)v78;
              BOOL v85 = !v84;
              while (1)
              {
                uint64_t v86 = *v83;
                if ((v81 & 1) == 0 && v85) {
                  break;
                }
                if ((uint64_t *)v82 == &v100) {
                  goto LABEL_173;
                }
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16)) {
                  goto LABEL_174;
                }
                unint64_t v82 = *(void *)(v82 + 8);
                float v83 = (uint64_t *)(v86 + 8);
                char v81 = 1;
              }
              if (v99) {
                goto LABEL_174;
              }
LABEL_173:
              float v118 = *(float *)&v103;
              float v117 = 0.0;
              float v117 = *(float *)(v78 + 32);
              if (*(float *)&v103 == v117)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v17, *(float *)&v103) != 1)unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
              }
                }
              else
              {
LABEL_174:
                uint64_t v87 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
                if (v99) {
                  uint64_t v88 = (char *)v102 + 1;
                }
                else {
                  uint64_t v88 = 0;
                }
                if (*(_DWORD *)v87) {
                  uint64_t v89 = *(void *)(v87 + 24) + 1;
                }
                else {
                  uint64_t v89 = 0;
                }
                if (v88 != (char *)v89) {
                  goto LABEL_194;
                }
                char v90 = 0;
                unint64_t v91 = v101;
                v92 = (uint64_t *)(v87 + 16);
                BOOL v93 = v99 && v99 == *(_DWORD *)v87;
                BOOL v94 = !v93;
                while (1)
                {
                  uint64_t v95 = *v92;
                  if ((v90 & 1) == 0 && v94) {
                    break;
                  }
                  if ((uint64_t *)v91 == &v100) {
                    goto LABEL_193;
                  }
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16)) {
                    goto LABEL_194;
                  }
                  unint64_t v91 = *(void *)(v91 + 8);
                  v92 = (uint64_t *)(v95 + 8);
                  char v90 = 1;
                }
                if (v99) {
                  goto LABEL_194;
                }
LABEL_193:
                float v118 = *(float *)&v103;
                float v117 = 0.0;
                float v117 = *(float *)(v87 + 32);
                if (*(float *)&v103 != v117) {
LABEL_194:
                }
                  unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                int v16 = v98 + 1;
              }
              std::__list_imp<char *>::clear(&v100);
              std::__list_imp<char *>::clear(&v111);
              if (v104) {
                (*(void (**)(uint64_t))(*(void *)v104 + 32))(v104);
              }
              else {
                ++v106;
              }
              goto LABEL_12;
            }
            if (v99)
            {
              uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v99 + 32))();
              goto LABEL_29;
            }
          }
          else if (v103 >= v101)
          {
            goto LABEL_132;
          }
          uint64_t v20 = v100 + 56 * v103;
LABEL_29:
          int v21 = *(_DWORD *)v20;
          int v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            unint64_t v116 = v116 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            int v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22) {
                goto LABEL_35;
              }
              goto LABEL_39;
            }
            unint64_t v23 = v116;
          }
          else
          {
            unint64_t v23 = v116 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          unint64_t v116 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_44;
          }
LABEL_39:
          unint64_t v116 = v116 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v109) {
              unint64_t v116 = v116 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            }
            if (v22 < SHIDWORD(v109)) {
              unint64_t v116 = v116 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
            }
          }
LABEL_44:
          uint64_t v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
          int v25 = *(_DWORD *)(v20 + 8);
          if (v25) {
            uint64_t v26 = *(void *)(v20 + 32) + 1;
          }
          else {
            uint64_t v26 = 0;
          }
          if (*(_DWORD *)v24) {
            uint64_t v27 = *(void *)(v24 + 24) + 1;
          }
          else {
            uint64_t v27 = 0;
          }
          if (v26 != v27) {
            goto LABEL_64;
          }
          char v28 = 0;
          unint64_t v29 = (uint64_t *)(v20 + 24);
          int64x2_t v30 = (uint64_t *)(v24 + 16);
          BOOL v31 = v25 && v25 == *(_DWORD *)v24;
          BOOL v32 = !v31;
          while (1)
          {
            uint64_t v33 = *v29;
            uint64_t v34 = *v30;
            if ((v28 & 1) == 0 && v32) {
              break;
            }
            if (v33 == v20 + 16) {
              goto LABEL_63;
            }
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16)) {
              goto LABEL_64;
            }
            unint64_t v29 = (uint64_t *)(v33 + 8);
            int64x2_t v30 = (uint64_t *)(v34 + 8);
            char v28 = 1;
          }
          if (v25) {
            goto LABEL_64;
          }
LABEL_63:
          float v118 = 0.0;
          float v118 = *(float *)(v20 + 40);
          float v117 = 0.0;
          float v117 = *(float *)(v24 + 32);
          if (v118 != v117)
          {
LABEL_64:
            uint64_t v35 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
            int v25 = *(_DWORD *)(v20 + 8);
            if (v25) {
              uint64_t v36 = *(void *)(v20 + 32) + 1;
            }
            else {
              uint64_t v36 = 0;
            }
            if (*(_DWORD *)v35) {
              uint64_t v37 = *(void *)(v35 + 24) + 1;
            }
            else {
              uint64_t v37 = 0;
            }
            if (v36 != v37) {
              goto LABEL_84;
            }
            char v38 = 0;
            long long v39 = (uint64_t *)(v20 + 24);
            unint64_t v40 = (uint64_t *)(v35 + 16);
            BOOL v41 = v25 && v25 == *(_DWORD *)v35;
            BOOL v42 = !v41;
            while (1)
            {
              uint64_t v43 = *v39;
              uint64_t v44 = *v40;
              if ((v38 & 1) == 0 && v42) {
                break;
              }
              if (v43 == v20 + 16) {
                goto LABEL_83;
              }
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16)) {
                goto LABEL_84;
              }
              long long v39 = (uint64_t *)(v43 + 8);
              unint64_t v40 = (uint64_t *)(v44 + 8);
              char v38 = 1;
            }
            if (v25) {
              goto LABEL_84;
            }
LABEL_83:
            float v118 = 0.0;
            float v118 = *(float *)(v20 + 40);
            float v117 = 0.0;
            float v117 = *(float *)(v35 + 32);
            if (v118 != v117) {
LABEL_84:
            }
              unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          int v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17) {
            unint64_t v116 = v116 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          }
          if (v45 != v17 + 1) {
            unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          uint64_t v109 = *(void *)v20;
          LODWORD(v110) = v25;
          if (&v109 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v111, *(void *)(v20 + 24), v20 + 16);
            int v45 = *(_DWORD *)(v20 + 48);
          }
          int v114 = *(_DWORD *)(v20 + 40);
          int v115 = v45;
          if (v11)
          {
            std::vector<unsigned int>::pointer end = v108.__end_;
            if (v108.__end_ >= v108.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v108.__begin_;
              int64_t v49 = v108.__end_ - v108.__begin_;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                goto LABEL_213;
              }
              int64_t v51 = (char *)v108.__end_cap_.__value_ - (char *)v108.__begin_;
              if (((char *)v108.__end_cap_.__value_ - (char *)v108.__begin_) >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                std::vector<unsigned int>::pointer v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v108.__end_cap_, v52);
                std::vector<unsigned int>::pointer begin = v108.__begin_;
                std::vector<unsigned int>::pointer end = v108.__end_;
              }
              else
              {
                std::vector<unsigned int>::pointer v53 = 0;
              }
              unint64_t v54 = (unsigned int *)&v53[4 * v49];
              *unint64_t v54 = *(_DWORD *)v20;
              uint64_t v47 = v54 + 1;
              while (end != begin)
              {
                unsigned int v55 = *--end;
                *--unint64_t v54 = v55;
              }
              v108.__begin_ = v54;
              v108.__end_ = v47;
              v108.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v108.__end_ = *(_DWORD *)v20;
              uint64_t v47 = end + 1;
            }
            v108.__end_ = v47;
          }
          if (v14)
          {
            std::vector<unsigned int>::pointer v56 = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer v58 = v107.__begin_;
              int64_t v59 = v107.__end_ - v107.__begin_;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62) {
LABEL_213:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              int64_t v61 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                int v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v62);
                std::vector<unsigned int>::pointer v58 = v107.__begin_;
                std::vector<unsigned int>::pointer v56 = v107.__end_;
              }
              else
              {
                int v63 = 0;
              }
              unint64_t v64 = (unsigned int *)&v63[4 * v59];
              *unint64_t v64 = *(_DWORD *)(v20 + 4);
              uint64_t v57 = v64 + 1;
              while (v56 != v58)
              {
                unsigned int v65 = *--v56;
                *--unint64_t v64 = v65;
              }
              v107.__begin_ = v64;
              v107.__end_ = v57;
              v107.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *v107.__end_ = *(_DWORD *)(v20 + 4);
              uint64_t v57 = v56 + 1;
            }
            v107.__end_ = v57;
          }
          if (v99)
          {
            (*(void (**)(uint64_t))(*(void *)v99 + 40))(v99);
            char v19 = 0;
          }
          else
          {
            char v19 = 0;
            ++v103;
          }
        }
      }
LABEL_17:
      uint64_t v17 = v106;
      goto LABEL_18;
    }
    if (v104) {
      (*(void (**)(void))(*(void *)v104 + 8))();
    }
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
    {
      unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    if (v108.__begin_)
    {
      v108.__end_ = v108.__begin_;
      operator delete(v108.__begin_);
    }
    unint64_t v8 = v116;
LABEL_211:
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1B1F5D954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F5E2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
    **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

unint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v34);
  uint64_t v6 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  if (v34) {
    uint64_t v7 = v35[2] + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (*(_DWORD *)v6) {
    uint64_t v8 = *(void *)(v6 + 24) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 == v8)
  {
    char v9 = 0;
    uint64_t v10 = v35[1];
    uint64_t v11 = (uint64_t *)(v6 + 16);
    if (v34) {
      BOOL v12 = v34 == *(_DWORD *)v6;
    }
    else {
      BOOL v12 = 0;
    }
    int v13 = !v12;
    int v14 = v13 ^ 1;
    while (1)
    {
      uint64_t v15 = *v11;
      if ((v9 & 1) == 0 && !v14) {
        break;
      }
      if ((void *)v10 == v35) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16)) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void *)(v10 + 8);
      uint64_t v11 = (uint64_t *)(v15 + 8);
      char v9 = 1;
    }
    if (v34) {
      goto LABEL_21;
    }
LABEL_42:
    float v38 = v36;
    float v37 = 0.0;
    float v37 = *(float *)(v6 + 32);
    float v32 = v36;
    float v33 = v37;
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      unint64_t v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  unint64_t v17 = a2;
  *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  uint64_t v18 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17)) {
    goto LABEL_36;
  }
  char v19 = 0;
  uint64_t v20 = *(void **)(a1 + 80);
  uint64_t v21 = v20[1];
  uint64_t v22 = **(void **)(a1 + 16);
  unint64_t v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    unint64_t v24 = *v23--;
    v19 |= *(void *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while (v24 != a2);
  int v25 = *(void **)a1;
  uint64_t v26 = **(void **)(a1 + 72);
  for (uint64_t i = (int *)(v21 - 4); ; --i)
  {
    unint64_t v28 = *i;
    if (v25) {
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    }
    unint64_t result = v28 >> 6;
    uint64_t v29 = 1 << v28;
    if ((v19 & 1) == 0) {
      break;
    }
    *(void *)(v22 + 8 * result) |= v29;
    *(void *)(v26 + 8 * result) &= ~v29;
    if (v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(void *)(v26 + 8 * result) &= ~v29;
  if (v28 != a2) {
    goto LABEL_33;
  }
  v20[1] = i;
  **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    uint64_t v30 = **(void **)(a1 + 16);
    if ((*(void *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17)) {
      *(void *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3)) {
      *(_DWORD *)(v18 + 4 * a3) = v31;
    }
  }
  return result;
}

void sub_1B1F5E770(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 48);
  int v4 = *(_DWORD *)(**(void **)(a1 + 56) + 4 * v3);
  uint64_t v5 = **(void **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2)) {
    *(_DWORD *)(v5 + 4 * a2) = v4;
  }
  uint64_t v6 = **(void **)(a1 + 16);
  if ((*(void *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
    *(void *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = *(unint64_t **)(a1 + 24);
  unint64_t v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  *uint64_t v7 = v8;
  if (*(_DWORD *)(a3 + 48) == *(_DWORD *)(a1 + 40)) {
    *uint64_t v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  }
  return 1;
}

uint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ForwardOrCrossArc(void **a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 48);
  uint64_t v4 = *a1[7];
  int v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
  }
  else
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
    if ((*(void *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      uint64_t v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2)) {
        *(_DWORD *)(v8 + 4 * a2) = v5;
      }
    }
  }
  uint64_t v9 = *a1[2];
  if ((*(void *)(v9 + 8 * v6) & v7) != 0) {
    *(void *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  return 1;
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36EF0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36EF0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36EF0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1F5E958(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37EA8;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1F5EA70(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37EA8;
  uint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::vector<unsigned int>::pointer v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  std::vector<unsigned int>::pointer v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1F5EEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    uint64_t v10 = v27 + 56 * v28;
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(void *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v25 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v25 = v13;
    }
    *(void *)(a1 + 8) = v25;
    uint64_t v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(uint64_t **)(a1 + 16);
    uint64_t v15 = *(uint64_t **)a1;
  }
  *(void *)(a1 + ++*(void *)(result + 24) = &v14[7 * v13];
  uint64_t v16 = v26;
  uint64_t v17 = v27;
  unint64_t v19 = v28;
  uint64_t v18 = v29;
  if (v29) {
    ++*v29;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    uint64_t v24 = v15 - 7;
    uint64_t *v24 = *(void *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(void *)(v23 + 24), v23 + 16);
    }
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 56 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B1F5F1B0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::WriteFst<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)uint64_t v35 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  uint64_t v6 = -1;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = -1;
  uint64_t v39 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v40 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v40 = (int)fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v43;
    if (v43 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v9, (uint64_t)v34);
  uint64_t v31 = v9;
  uint64_t v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v10 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(__p);
      std::__list_imp<char *>::clear(&__p[0].__r_.__value_.__l.__size_);
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      uint64_t v14 = *(void *)(*(void *)(a1[1] + 64) + 8 * v12);
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v15 = *(void *)(v14 + 64);
      if (v15 == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(_DWORD **)(v14 + 56);
      }
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (v15 - v16) / 56;
        }
        unint64_t v19 = v17;
        do
        {
          int v20 = *v19;
          v19 += 14;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(v17 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          uint64_t v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    int v21 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    uint64_t v22 = (void *)fst::cerr(v21);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_30:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_33;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      uint64_t updated = 1;
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v29 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    long long v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_30;
  }
  uint64_t v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_33:
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[1]);
  }
  if (SHIBYTE(v36[0]) < 0) {
    operator delete(v35[0]);
  }
  return updated;
}

void sub_1B1F5F6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(_DWORD *a1)
{
  std::ostream::write();
  char v2 = 0;
  BOOL v3 = (uint64_t *)(a1 + 4);
  while (1)
  {
    uint64_t v4 = *v3;
    if ((v2 & 1) == 0)
    {
      if (!*a1) {
        return std::ostream::write();
      }
      std::ostream::write();
    }
    if ((_DWORD *)v4 == a1 + 2) {
      break;
    }
    std::ostream::write();
    BOOL v3 = (uint64_t *)(v4 + 8);
    char v2 = 1;
  }
  return std::ostream::write();
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      uint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      unint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B1F5FDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Type()
{
  {
    operator new();
  }
  return fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Type(void)::type;
}

void sub_1B1F5FED0(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1F60220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void *fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetFinal(void *a1, int a2, int *a3)
{
  uint64_t v6 = *(int **)(a1[8] + 8 * a2);
  int v18 = *v6;
  std::list<int>::list(v19, (uint64_t)(v6 + 2));
  int v20 = v6[8];
  int v15 = *a3;
  std::list<int>::list(v16, (uint64_t)(a3 + 2));
  int v17 = a3[8];
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetFinal((uint64_t)a1, a2, &v15);
  std::__list_imp<char *>::clear(v16);
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  int v12 = v18;
  std::list<int>::list(v13, (uint64_t)v19);
  int v14 = v20;
  int v9 = *a3;
  std::list<int>::list(v10, (uint64_t)(a3 + 2));
  int v11 = a3[8];
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>(v7, &v12, &v9);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(v13);
  return std::__list_imp<char *>::clear(v19);
}

void sub_1B1F603FC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SetFinalProperties<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>(unint64_t a1, int *a2, int *a3)
{
  uint64_t v6 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  int v7 = *a2;
  if (*a2) {
    uint64_t v8 = *((void *)a2 + 3) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (*(_DWORD *)v6) {
    uint64_t v9 = *(void *)(v6 + 24) + 1;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8 != v9) {
    goto LABEL_22;
  }
  char v10 = 0;
  int v11 = (uint64_t *)(a2 + 4);
  int v12 = (uint64_t *)(v6 + 16);
  BOOL v13 = v7 && v7 == *(_DWORD *)v6;
  BOOL v14 = !v13;
  int v15 = !v14;
  while (1)
  {
    uint64_t v16 = *v11;
    uint64_t v17 = *v12;
    if ((v10 & 1) == 0 && !v15) {
      break;
    }
    if ((int *)v16 == a2 + 2) {
      goto LABEL_21;
    }
    if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16)) {
      goto LABEL_22;
    }
    int v11 = (uint64_t *)(v16 + 8);
    int v12 = (uint64_t *)(v17 + 8);
    char v10 = 1;
  }
  if (v7) {
    goto LABEL_22;
  }
LABEL_21:
  if (*((float *)a2 + 8) != *(float *)(v6 + 32))
  {
LABEL_22:
    uint64_t v18 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    int v19 = *a2;
    if (*a2) {
      uint64_t v20 = *((void *)a2 + 3) + 1;
    }
    else {
      uint64_t v20 = 0;
    }
    if (*(_DWORD *)v18) {
      uint64_t v21 = *(void *)(v18 + 24) + 1;
    }
    else {
      uint64_t v21 = 0;
    }
    if (v20 != v21) {
      goto LABEL_43;
    }
    char v22 = 0;
    char v23 = (uint64_t *)(a2 + 4);
    int v24 = (uint64_t *)(v18 + 16);
    BOOL v25 = v19 && v19 == *(_DWORD *)v18;
    BOOL v26 = !v25;
    int v27 = !v26;
    while (1)
    {
      uint64_t v28 = *v23;
      uint64_t v29 = *v24;
      if ((v22 & 1) == 0 && !v27) {
        break;
      }
      if ((int *)v28 == a2 + 2) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v29 + 16)) {
        goto LABEL_43;
      }
      char v23 = (uint64_t *)(v28 + 8);
      int v24 = (uint64_t *)(v29 + 8);
      char v22 = 1;
    }
    if (v19) {
      goto LABEL_43;
    }
LABEL_42:
    if (*((float *)a2 + 8) != *(float *)(v18 + 32)) {
LABEL_43:
    }
      a1 &= ~0x100000000uLL;
  }
  uint64_t v30 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  int v31 = *a3;
  if (*a3) {
    uint64_t v32 = *((void *)a3 + 3) + 1;
  }
  else {
    uint64_t v32 = 0;
  }
  if (*(_DWORD *)v30) {
    uint64_t v33 = *(void *)(v30 + 24) + 1;
  }
  else {
    uint64_t v33 = 0;
  }
  if (v32 != v33) {
    goto LABEL_65;
  }
  char v34 = 0;
  long long v35 = (uint64_t *)(a3 + 4);
  long long v36 = (uint64_t *)(v30 + 16);
  BOOL v37 = v31 && v31 == *(_DWORD *)v30;
  BOOL v38 = !v37;
  int v39 = !v38;
  while (1)
  {
    uint64_t v40 = *v35;
    uint64_t v41 = *v36;
    if ((v34 & 1) == 0 && !v39) {
      break;
    }
    if ((int *)v40 == a3 + 2) {
      goto LABEL_64;
    }
    if (*(_DWORD *)(v40 + 16) != *(_DWORD *)(v41 + 16)) {
      goto LABEL_65;
    }
    long long v35 = (uint64_t *)(v40 + 8);
    long long v36 = (uint64_t *)(v41 + 8);
    char v34 = 1;
  }
  if (v31) {
    goto LABEL_65;
  }
LABEL_64:
  if (*((float *)a3 + 8) != *(float *)(v30 + 32))
  {
LABEL_65:
    uint64_t v42 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    int v43 = *a3;
    if (*a3) {
      uint64_t v44 = *((void *)a3 + 3) + 1;
    }
    else {
      uint64_t v44 = 0;
    }
    if (*(_DWORD *)v42) {
      uint64_t v45 = *(void *)(v42 + 24) + 1;
    }
    else {
      uint64_t v45 = 0;
    }
    if (v44 != v45) {
      goto LABEL_86;
    }
    char v46 = 0;
    uint64_t v47 = (uint64_t *)(a3 + 4);
    int v48 = (uint64_t *)(v42 + 16);
    BOOL v49 = v43 && v43 == *(_DWORD *)v42;
    BOOL v50 = !v49;
    int v51 = !v50;
    while (1)
    {
      uint64_t v52 = *v47;
      uint64_t v53 = *v48;
      if ((v46 & 1) == 0 && !v51) {
        break;
      }
      if ((int *)v52 == a3 + 2) {
        goto LABEL_85;
      }
      if (*(_DWORD *)(v52 + 16) != *(_DWORD *)(v53 + 16)) {
        goto LABEL_86;
      }
      uint64_t v47 = (uint64_t *)(v52 + 8);
      int v48 = (uint64_t *)(v53 + 8);
      char v46 = 1;
    }
    if (v43) {
      goto LABEL_86;
    }
LABEL_85:
    if (*((float *)a3 + 8) != *(float *)(v42 + 32)) {
LABEL_86:
    }
      a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddArc(void *a1, int a2, int *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 56)) {
    int v7 = 0;
  }
  else {
    int v7 = (_DWORD *)(v6 - 56);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::AddArc(v9, a3);
}

uint64_t fst::AddArcProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(unint64_t a1, int a2, int *a3, _DWORD *a4)
{
  int v6 = *a3;
  int v7 = a3[1];
  unint64_t v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*a3 == v7) {
    unint64_t v8 = a1;
  }
  unint64_t v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7) {
    unint64_t v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (!v6) {
    unint64_t v8 = v9;
  }
  if (v7) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (a4)
  {
    if (*a4 <= v6) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (a4[1] > v7) {
      unint64_t v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
    else {
      unint64_t v10 = v11;
    }
  }
  uint64_t v12 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  int v13 = a3[2];
  if (v13) {
    uint64_t v14 = *((void *)a3 + 4) + 1;
  }
  else {
    uint64_t v14 = 0;
  }
  if (*(_DWORD *)v12) {
    uint64_t v15 = *(void *)(v12 + 24) + 1;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v14 != v15) {
    goto LABEL_38;
  }
  char v16 = 0;
  uint64_t v17 = (uint64_t *)(a3 + 6);
  uint64_t v18 = (uint64_t *)(v12 + 16);
  BOOL v19 = v13 && v13 == *(_DWORD *)v12;
  BOOL v20 = !v19;
  int v21 = !v20;
  while (1)
  {
    uint64_t v22 = *v17;
    uint64_t v23 = *v18;
    if ((v16 & 1) == 0 && !v21) {
      break;
    }
    if ((int *)v22 == a3 + 4) {
      goto LABEL_37;
    }
    if (*(_DWORD *)(v22 + 16) != *(_DWORD *)(v23 + 16)) {
      goto LABEL_38;
    }
    uint64_t v17 = (uint64_t *)(v22 + 8);
    uint64_t v18 = (uint64_t *)(v23 + 8);
    char v16 = 1;
  }
  if (v13) {
    goto LABEL_38;
  }
LABEL_37:
  if (*((float *)a3 + 10) != *(float *)(v12 + 32))
  {
LABEL_38:
    uint64_t v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    int v25 = a3[2];
    if (v25) {
      uint64_t v26 = *((void *)a3 + 4) + 1;
    }
    else {
      uint64_t v26 = 0;
    }
    if (*(_DWORD *)v24) {
      uint64_t v27 = *(void *)(v24 + 24) + 1;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v26 != v27) {
      goto LABEL_59;
    }
    char v28 = 0;
    uint64_t v29 = (uint64_t *)(a3 + 6);
    uint64_t v30 = (uint64_t *)(v24 + 16);
    BOOL v31 = v25 && v25 == *(_DWORD *)v24;
    BOOL v32 = !v31;
    int v33 = !v32;
    while (1)
    {
      uint64_t v34 = *v29;
      uint64_t v35 = *v30;
      if ((v28 & 1) == 0 && !v33) {
        break;
      }
      if ((int *)v34 == a3 + 4) {
        goto LABEL_58;
      }
      if (*(_DWORD *)(v34 + 16) != *(_DWORD *)(v35 + 16)) {
        goto LABEL_59;
      }
      uint64_t v29 = (uint64_t *)(v34 + 8);
      uint64_t v30 = (uint64_t *)(v35 + 8);
      char v28 = 1;
    }
    if (v25) {
      goto LABEL_59;
    }
LABEL_58:
    if (*((float *)a3 + 10) != *(float *)(v24 + 32)) {
LABEL_59:
    }
      unint64_t v10 = v10 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (a3[12] <= a2) {
    unint64_t v36 = v10 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  else {
    unint64_t v36 = v10;
  }
  if ((v36 & 0x4000000000) != 0) {
    return v36 & 0x5D7FFEB0007 | 0x2800000000;
  }
  else {
    return v36 & 0x5D7FFEB0007;
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v35, v5, &__x);
  int v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v35.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v35.__begin_[v12] == -1)
      {
        fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(void *)(v11 + 8 * v12));
      }
      else
      {
        v35.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      int64x2_t v17 = *(int64x2_t *)(v16 + 40);
      uint64_t v18 = *(void *)(v16 + 64) - *(void *)(v16 + 56);
      if (v18) {
        uint64_t v19 = *(void *)(v16 + 56);
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = (int *)(v19 + 48);
        uint64_t v23 = v19 + 16;
        do
        {
          int v24 = v35.__begin_[*v22];
          if (v24 == -1)
          {
            uint64_t v27 = *((void *)v22 - 6);
            v28.i64[0] = v27;
            v28.i64[1] = HIDWORD(v27);
            int64x2_t v17 = vaddq_s64(v17, vceqzq_s64(v28));
          }
          else
          {
            int *v22 = v24;
            if (v20 != v21)
            {
              int64x2_t v32 = v17;
              uint64_t v25 = v19 + 56 * v21;
              *(void *)uint64_t v25 = *((void *)v22 - 6);
              *(_DWORD *)(v25 + 8) = *(v22 - 10);
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v25 + 16), *((void *)v22 - 3), v23);
              uint64_t v26 = v19 + 56 * v21;
              *(_DWORD *)(v26 + 40) = *(v22 - 2);
              *(_DWORD *)(v26 + 48) = *v22;
              uint64_t v14 = *v4;
              int64x2_t v17 = v32;
            }
            ++v21;
          }
          ++v20;
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          unint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v16 + 64) - *(void *)(v16 + 56)) >> 3);
          v22 += 14;
          v23 += 56;
        }
        while (v20 < v29);
        int64x2_t v33 = v17;
      }
      else
      {
        int64x2_t v33 = *(int64x2_t *)(v16 + 40);
        uint64_t v21 = 0;
        unint64_t v29 = 0;
      }
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs((void *)v16, v29 - v21);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 40) = v33;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v30 = *(int *)(a1 + 88);
  if (v30 == -1)
  {
    BOOL v31 = v35.__begin_;
    if (!v35.__begin_) {
      return;
    }
  }
  else
  {
    BOOL v31 = v35.__begin_;
    *(_DWORD *)(a1 + 88) = v35.__begin_[v30];
  }
  v35.__end_ = v31;
  operator delete(v31);
}

void sub_1B1F60CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    BOOL v3 = result;
    uint64_t v4 = result[8] - 56;
    do
    {
      if (!*(_DWORD *)v4) {
        --v3[5];
      }
      if (!*(_DWORD *)(v4 + 4)) {
        --v3[6];
      }
      uint64_t result = std::__list_imp<char *>::clear((void *)(v4 + 16));
      v3[8] = v4;
      v4 -= 56;
      --v2;
    }
    while (v2);
  }
  return result;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 != *(void *)(a1 + 64))
  {
    unint64_t v3 = 0;
    uint64_t v2 = *(void *)(a1 + 64);
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(void *)(v2 + 8 * v3++));
      uint64_t v2 = *(void *)(a1 + 64);
    }
    while (v3 < (*(void *)(a1 + 72) - v2) >> 3);
  }
  *(void *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 88) = -1;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(void *a1, int a2)
{
  unint64_t v3 = *(void **)(a1[8] + 8 * a2);
  v3[5] = 0;
  v3[6] = 0;
  uint64_t v5 = v3[7];
  uint64_t v4 = v3[8];
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v4 - 56;
      std::__list_imp<char *>::clear((void *)(v4 - 40));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  v3[8] = v5;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 64)
                                                             - *(void *)(*(void *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 56) + 56 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 56);
  uint64_t v6 = (int *)(v5 + 56 * v4);
  int v7 = *v6;
  int v8 = v6[1];
  if (*v6 != v8) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v7)
  {
    if (!v8)
    {
      unint64_t v9 = *(unint64_t **)(a1 + 16);
      unint64_t v10 = *v9;
LABEL_8:
      unint64_t *v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    unint64_t v9 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      unint64_t v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      unint64_t *v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  uint64_t v12 = v5 + 56 * v4;
  uint64_t v13 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  int v16 = *(_DWORD *)(v12 + 8);
  unint64_t v15 = (int *)(v12 + 8);
  int v14 = v16;
  if (v16) {
    uint64_t v17 = *((void *)v15 + 3) + 1;
  }
  else {
    uint64_t v17 = 0;
  }
  if (*(_DWORD *)v13) {
    uint64_t v18 = *(void *)(v13 + 24) + 1;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v18) {
    goto LABEL_30;
  }
  char v19 = 0;
  unint64_t v20 = (uint64_t *)(v15 + 4);
  uint64_t v21 = (uint64_t *)(v13 + 16);
  BOOL v22 = v14 && v14 == *(_DWORD *)v13;
  BOOL v23 = !v22;
  int v24 = !v23;
  while (1)
  {
    uint64_t v25 = *v20;
    uint64_t v26 = *v21;
    if ((v19 & 1) == 0 && !v24) {
      break;
    }
    if ((int *)v25 == v15 + 2) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v26 + 16)) {
      goto LABEL_30;
    }
    unint64_t v20 = (uint64_t *)(v25 + 8);
    uint64_t v21 = (uint64_t *)(v26 + 8);
    char v19 = 1;
  }
  if (v14) {
    goto LABEL_30;
  }
LABEL_29:
  if (*((float *)v15 + 8) != *(float *)(v13 + 32))
  {
LABEL_30:
    uint64_t v27 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    int v28 = *v15;
    if (*v15) {
      uint64_t v29 = *((void *)v15 + 3) + 1;
    }
    else {
      uint64_t v29 = 0;
    }
    if (*(_DWORD *)v27) {
      uint64_t v30 = *(void *)(v27 + 24) + 1;
    }
    else {
      uint64_t v30 = 0;
    }
    if (v29 != v30) {
      goto LABEL_51;
    }
    char v31 = 0;
    int64x2_t v32 = (uint64_t *)(v15 + 4);
    int64x2_t v33 = (uint64_t *)(v27 + 16);
    BOOL v34 = v28 && v28 == *(_DWORD *)v27;
    BOOL v35 = !v34;
    int v36 = !v35;
    while (1)
    {
      uint64_t v37 = *v32;
      uint64_t v38 = *v33;
      if ((v31 & 1) == 0 && !v36) {
        break;
      }
      if ((int *)v37 == v15 + 2) {
        goto LABEL_50;
      }
      if (*(_DWORD *)(v37 + 16) != *(_DWORD *)(v38 + 16)) {
        goto LABEL_51;
      }
      int64x2_t v32 = (uint64_t *)(v37 + 8);
      int64x2_t v33 = (uint64_t *)(v38 + 8);
      char v31 = 1;
    }
    if (v28) {
      goto LABEL_51;
    }
LABEL_50:
    if (*((float *)v15 + 8) != *(float *)(v27 + 32)) {
LABEL_51:
    }
      **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  uint64_t v39 = 0x30FC30007;
  if (*(_DWORD *)a2 == *v6 && *(_DWORD *)(a2 + 4) == v6[1] && *(_DWORD *)(a2 + 48) == *(_DWORD *)(v5 + 56 * v4 + 48)) {
    uint64_t v39 = 0x3FFFFFFF0007;
  }
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArc(*(uint64_t **)(a1 + 8), a2, *(void *)(a1 + 24));
  int v40 = *(_DWORD *)a2;
  int v41 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v41) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v40)
  {
    if (!v41)
    {
      uint64_t v42 = *(unint64_t **)(a1 + 16);
      unint64_t v43 = *v42;
LABEL_63:
      *uint64_t v42 = v43 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    uint64_t v42 = *(unint64_t **)(a1 + 16);
    unint64_t v44 = *v42 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *uint64_t v42 = v44;
    if (!v41)
    {
      unint64_t v43 = v44 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *uint64_t v42 = v43;
      goto LABEL_63;
    }
  }
  uint64_t result = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  int v46 = *(_DWORD *)(a2 + 8);
  if (v46) {
    uint64_t v47 = *(void *)(a2 + 32) + 1;
  }
  else {
    uint64_t v47 = 0;
  }
  if (*(_DWORD *)result) {
    uint64_t v48 = *(void *)(result + 24) + 1;
  }
  else {
    uint64_t v48 = 0;
  }
  if (v47 != v48) {
    goto LABEL_85;
  }
  char v49 = 0;
  BOOL v50 = (uint64_t *)(a2 + 24);
  int v51 = (uint64_t *)(result + 16);
  BOOL v52 = v46 && v46 == *(_DWORD *)result;
  BOOL v53 = !v52;
  int v54 = !v53;
  while (1)
  {
    uint64_t v55 = *v50;
    uint64_t v56 = *v51;
    if ((v49 & 1) == 0 && !v54) {
      break;
    }
    if (v55 == a2 + 16) {
      goto LABEL_84;
    }
    if (*(_DWORD *)(v55 + 16) != *(_DWORD *)(v56 + 16)) {
      goto LABEL_85;
    }
    BOOL v50 = (uint64_t *)(v55 + 8);
    int v51 = (uint64_t *)(v56 + 8);
    char v49 = 1;
  }
  if (v46) {
    goto LABEL_85;
  }
LABEL_84:
  if (*(float *)(a2 + 40) != *(float *)(result + 32))
  {
LABEL_85:
    uint64_t result = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    int v57 = *(_DWORD *)(a2 + 8);
    if (v57) {
      uint64_t v58 = *(void *)(a2 + 32) + 1;
    }
    else {
      uint64_t v58 = 0;
    }
    if (*(_DWORD *)result) {
      uint64_t v59 = *(void *)(result + 24) + 1;
    }
    else {
      uint64_t v59 = 0;
    }
    if (v58 != v59) {
      goto LABEL_106;
    }
    char v60 = 0;
    int64_t v61 = (uint64_t *)(a2 + 24);
    unint64_t v62 = (uint64_t *)(result + 16);
    BOOL v63 = v57 && v57 == *(_DWORD *)result;
    BOOL v64 = !v63;
    int v65 = !v64;
    while (1)
    {
      uint64_t v66 = *v61;
      uint64_t v67 = *v62;
      if ((v60 & 1) == 0 && !v65) {
        break;
      }
      if (v66 == a2 + 16) {
        goto LABEL_105;
      }
      if (*(_DWORD *)(v66 + 16) != *(_DWORD *)(v67 + 16)) {
        goto LABEL_106;
      }
      int64_t v61 = (uint64_t *)(v66 + 8);
      unint64_t v62 = (uint64_t *)(v67 + 8);
      char v60 = 1;
    }
    if (v57) {
      goto LABEL_106;
    }
LABEL_105:
    if (*(float *)(a2 + 40) != *(float *)(result + 32)) {
LABEL_106:
    }
      **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(void **)(a1 + 16) &= v39;
  return result;
}

uint64_t *fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArc(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result[7];
  uint64_t v6 = (_DWORD *)(v5 + 56 * a3);
  if (!*v6) {
    --result[5];
  }
  if (!*(_DWORD *)(v5 + 56 * a3 + 4)) {
    --result[6];
  }
  if (!*(_DWORD *)a2) {
    ++result[5];
  }
  if (!*(_DWORD *)(a2 + 4)) {
    ++result[6];
  }
  *(void *)uint64_t v6 = *(void *)a2;
  *(_DWORD *)(v5 + 56 * a3 + 8) = *(_DWORD *)(a2 + 8);
  if (v6 != (_DWORD *)a2) {
    uint64_t result = std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v5 + 56 * a3 + 16), *(void *)(a2 + 24), a2 + 16);
  }
  uint64_t v7 = v5 + 56 * a3;
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v7 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 288))(a2, 0);
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1)
  {
    if ((v5 & 4) != 0)
    {
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
      return v18(a2, 4, 4);
    }
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    BOOL v7 = fst::CountStates<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1) != 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)a2 + 248))(a2, v7);
  }
  LODWORD(v30[0]) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v28);
  while (!v28)
  {
    if (SLODWORD(v30[0]) >= v29) {
      goto LABEL_14;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
    }
    else {
      ++LODWORD(v30[0]);
    }
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v28 + 16))(v28)) {
    goto LABEL_9;
  }
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
LABEL_14:
  unsigned int v39 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v37);
  while (2)
  {
    if (!v37)
    {
      if ((int)v39 >= v38) {
        goto LABEL_53;
      }
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v37 + 16))(v37))
    {
      if (v37)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 24))(v37);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v8 = v39;
LABEL_21:
      if (v8 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v8, v9);
      unint64_t v36 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v8, &v32);
LABEL_24:
      if (v32)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v32 + 24))(v32))
        {
          if (v32)
          {
            (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
            goto LABEL_37;
          }
LABEL_35:
          if (v35) {
            --*v35;
          }
LABEL_37:
          *(float *)&unsigned int v11 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v8);
          uint64_t v32 = 0;
          unint64_t v33 = v11 | 0xFFFFFFFF00000000;
          fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v32, (uint64_t)&v28);
          if (v28)
          {
            int v12 = FLAGS_fst_error_fatal;
            if (FLAGS_fst_error_fatal)
            {
              std::string::basic_string[abi:ne180100]<0>(v25, "FATAL");
              uint64_t v13 = fst::LogMessage::LogMessage((fst *)&v27, (uint64_t)v25);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
              uint64_t v13 = fst::LogMessage::LogMessage((fst *)&v24, (uint64_t)__p);
            }
            int v14 = (void *)fst::cerr(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
            if (v12)
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v27);
              if (v26 < 0)
              {
                unint64_t v15 = (void *)v25[0];
                goto LABEL_46;
              }
            }
            else
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v24);
              if (v23 < 0)
              {
                unint64_t v15 = __p[0];
LABEL_46:
                operator delete(v15);
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
          }
          int v19 = v29;
          std::list<int>::list(v20, (uint64_t)v30);
          int v21 = v31;
          (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 184))(a2, v8, &v19);
          std::__list_imp<char *>::clear(v20);
          std::__list_imp<char *>::clear(v30);
          if (v37) {
            (*(void (**)(uint64_t))(*(void *)v37 + 32))(v37);
          }
          else {
            ++v39;
          }
          continue;
        }
        if (v32)
        {
          unint64_t v10 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 32))(v32);
          goto LABEL_30;
        }
      }
      else if (v36 >= v34)
      {
        goto LABEL_35;
      }
      unint64_t v10 = (float *)(v33 + 16 * v36);
LABEL_30:
      fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()(v10, (uint64_t)&v28);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 208))(a2, v8, &v28);
      std::__list_imp<char *>::clear(v30);
      if (v32) {
        (*(void (**)(uint64_t))(*(void *)v32 + 40))(v32);
      }
      else {
        ++v36;
      }
      goto LABEL_24;
    }
    break;
  }
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
LABEL_53:
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v17 = fst::ProjectProperties(v5, 1);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 192))(a2, v17 & 0x3FFCFFFF0007 | v16, 0x3FFFFFFF0007);
}

void sub_1B1F61D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a24);
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__list_imp<char *>::clear(v35);
  uint64_t v38 = *(void *)(v36 - 112);
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  _Unwind_Resume(a1);
}

void *fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()@<X0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)a1 + 3) == -1)
  {
    float v30 = 0.0;
    float v30 = a1[2];
    v29[8] = 2139095040;
    if (v30 == INFINITY)
    {
      int v12 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      int v23 = *v12;
      BOOL v7 = v24;
      std::list<int>::list(v24, (uint64_t)(v12 + 2));
      int v25 = v12[8];
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = v23;
      std::list<int>::list((void *)(a2 + 16), (uint64_t)v24);
      *(_DWORD *)(a2 + 40) = v25;
      *(_DWORD *)(a2 + 48) = -1;
      return std::__list_imp<char *>::clear(v7);
    }
    uint64_t v8 = (int *)fst::StringWeight<int,(fst::StringType)1>::One();
    int v26 = *v8;
    BOOL v7 = v27;
    std::list<int>::list(v27, (uint64_t)(v8 + 2));
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v28, &v26, a1[2]);
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v28;
    uint64_t v9 = v29;
    std::list<int>::list((void *)(a2 + 16), (uint64_t)v29);
    *(_DWORD *)(a2 + 40) = v29[6];
    *(_DWORD *)(a2 + 48) = -1;
    goto LABEL_7;
  }
  float v5 = *a1;
  int v4 = *((_DWORD *)a1 + 1);
  if (!v4)
  {
    unint64_t v10 = (int *)fst::StringWeight<int,(fst::StringType)1>::One();
    int v19 = *v10;
    BOOL v7 = v20;
    std::list<int>::list(v20, (uint64_t)(v10 + 2));
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v21, &v19, a1[2]);
    int v11 = *((_DWORD *)a1 + 3);
    *(float *)a2 = v5;
    *(float *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v21;
    uint64_t v9 = v22;
    std::list<int>::list((void *)(a2 + 16), (uint64_t)v22);
    *(_DWORD *)(a2 + 40) = v22[6];
    *(_DWORD *)(a2 + 48) = v11;
LABEL_7:
    std::__list_imp<char *>::clear(v9);
    return std::__list_imp<char *>::clear(v7);
  }
  fst::StringWeight<int,(fst::StringType)1>::StringWeight((uint64_t)&v14, v4);
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v16, &v14, a1[2]);
  int v6 = *((_DWORD *)a1 + 3);
  *(float *)a2 = v5;
  *(float *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v16;
  std::list<int>::list((void *)(a2 + 16), (uint64_t)v17);
  *(_DWORD *)(a2 + 40) = v18;
  *(_DWORD *)(a2 + 48) = v6;
  std::__list_imp<char *>::clear(v17);
  BOOL v7 = &v15;
  return std::__list_imp<char *>::clear(v7);
}

void sub_1B1F62064(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v13[0] = a1;
  v13[1] = a2;
  _OWORD v13[2] = *(void *)a3;
  int v14 = *(_DWORD *)(a3 + 16);
  char v15 = *(unsigned char *)(a3 + 20);
  char v16 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  memset(v20, 0, 29);
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5 != *a2)
  {
    do
    {
      uint64_t v7 = v5 - 40;
      std::__list_imp<char *>::clear((void *)(v5 - 32));
      uint64_t v5 = v7;
    }
    while (v7 != v6);
  }
  a2[1] = v6;
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::ShortestDistance(v13, *(_DWORD *)(a3 + 12));
  if (BYTE12(v20[1]))
  {
    uint64_t v9 = *a2;
    uint64_t v8 = a2[1];
    if (v8 != *a2)
    {
      do
      {
        uint64_t v10 = v8 - 40;
        std::__list_imp<char *>::clear((void *)(v8 - 32));
        uint64_t v8 = v10;
      }
      while (v10 != v9);
    }
    a2[1] = v9;
    int v11 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::NoWeight();
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::resize(a2, 1uLL, v11);
  }
  return fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)v13);
}

void sub_1B1F62198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t *a2, char a3)
{
  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    int v8 = fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 248))(a2, (v8 + 1));
  }
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v104 = 0;
  unsigned int v64 = v9;
  if (a3) {
    goto LABEL_67;
  }
  LODWORD(v94) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v92);
  for (uint64_t i = 0xFFFFFFFFLL; ; uint64_t i = v13)
  {
    if (v92)
    {
      char v11 = (*(uint64_t (**)(uint64_t))(*(void *)v92 + 16))(v92);
      uint64_t v12 = v92;
      if (v11) {
        goto LABEL_39;
      }
      if (v92)
      {
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v92 + 24))();
        goto LABEL_11;
      }
    }
    else if ((int)v94 >= (int)v93)
    {
      goto LABEL_41;
    }
    uint64_t v13 = v94;
LABEL_11:
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&p_p, a1, v13);
    uint64_t v14 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    uint64_t v15 = p_p ? (uint64_t)v100 + 1 : 0;
    uint64_t v16 = *(_DWORD *)v14 ? *(void *)(v14 + 24) + 1 : 0;
    if (v15 != v16) {
      break;
    }
    char v17 = 0;
    uint64_t v18 = v99;
    long long v19 = (uint64_t *)(v14 + 16);
    if (p_p) {
      BOOL v20 = p_p == *(_DWORD *)v14;
    }
    else {
      BOOL v20 = 0;
    }
    int v21 = !v20;
    while (1)
    {
      uint64_t v22 = *v19;
      if ((v17 & 1) == 0 && v21 == 1) {
        break;
      }
      if ((uint64_t *)v18 == &v98) {
        goto LABEL_36;
      }
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v22 + 16)) {
        goto LABEL_30;
      }
      uint64_t v18 = *(void *)(v18 + 8);
      long long v19 = (uint64_t *)(v22 + 8);
      char v17 = 1;
    }
    if (p_p) {
      break;
    }
LABEL_36:
    *(float *)&std::string __p = v101;
    float v75 = 0.0;
    float v75 = *(float *)(v14 + 32);
    float v23 = v101;
    std::__list_imp<char *>::clear(&v98);
    if (v23 != v75) {
      goto LABEL_31;
    }
    uint64_t v13 = i;
LABEL_32:
    if (v92) {
      (*(void (**)(uint64_t))(*(void *)v92 + 32))(v92);
    }
    else {
      LODWORD(v94) = v94 + 1;
    }
  }
LABEL_30:
  std::__list_imp<char *>::clear(&v98);
LABEL_31:
  if (i == -1) {
    goto LABEL_32;
  }
  uint64_t i = 0xFFFFFFFFLL;
  uint64_t v12 = v92;
LABEL_39:
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
LABEL_41:
  if (i == -1)
  {
LABEL_67:
    uint64_t i = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
    int v35 = 1;
    goto LABEL_68;
  }
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&p_p, a1, i);
  uint64_t v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  if (p_p) {
    int v25 = (char *)v100 + 1;
  }
  else {
    int v25 = 0;
  }
  if (*(_DWORD *)v24) {
    uint64_t v26 = *(void *)(v24 + 24) + 1;
  }
  else {
    uint64_t v26 = 0;
  }
  if (v25 != (char *)v26) {
    goto LABEL_63;
  }
  char v27 = 0;
  uint64_t v28 = v99;
  int v29 = (uint64_t *)(v24 + 16);
  BOOL v30 = p_p && p_p == *(_DWORD *)v24;
  BOOL v31 = !v30;
  int v32 = !v31;
  while (1)
  {
    uint64_t v33 = *v29;
    if ((v27 & 1) == 0 && !v32) {
      break;
    }
    if ((uint64_t *)v28 == &v98) {
      goto LABEL_65;
    }
    if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v33 + 16)) {
      goto LABEL_63;
    }
    uint64_t v28 = *(void *)(v28 + 8);
    int v29 = (uint64_t *)(v33 + 8);
    char v27 = 1;
  }
  if (p_p)
  {
LABEL_63:
    std::__list_imp<char *>::clear(&v98);
    goto LABEL_64;
  }
LABEL_65:
  *(float *)&uint64_t v92 = v101;
  LODWORD(__p) = 0;
  LODWORD(__p) = *(_DWORD *)(v24 + 32);
  float v34 = v101;
  std::__list_imp<char *>::clear(&v98);
  if (v34 != *(float *)&__p)
  {
LABEL_64:
    std::string __p = 0;
    uint64_t v79 = 0;
    unint64_t v80 = 0;
    p_p = &__p;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = &v104;
    fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a1, (uint64_t)&p_p);
  }
  int v35 = 0;
LABEL_68:
  unsigned int v91 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v89);
  while (2)
  {
    if (!v89)
    {
      if ((int)v91 >= v90) {
        goto LABEL_137;
      }
      goto LABEL_74;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v89 + 16))(v89))
    {
      if (v89)
      {
        uint64_t v36 = (*(uint64_t (**)(void))(*(void *)v89 + 24))();
LABEL_75:
        int v37 = v36 + v35;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v37)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if (v36 == v64)
        {
          uint64_t v38 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
          int v86 = *v38;
          std::list<int>::list(v87, (uint64_t)(v38 + 2));
          int v88 = v38[8];
          (*(void (**)(uint64_t *, void, int *))(*a2 + 184))(a2, (v36 + v35), &v86);
          std::__list_imp<char *>::clear(v87);
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v92);
        uint64_t v39 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
        if (v92) {
          uint64_t v40 = v95 + 1;
        }
        else {
          uint64_t v40 = 0;
        }
        if (*(_DWORD *)v39) {
          uint64_t v41 = *(void *)(v39 + 24) + 1;
        }
        else {
          uint64_t v41 = 0;
        }
        if (v40 == v41)
        {
          char v42 = 0;
          uint64_t v43 = v94;
          unint64_t v44 = (uint64_t *)(v39 + 16);
          if (v92) {
            BOOL v45 = v92 == *(_DWORD *)v39;
          }
          else {
            BOOL v45 = 0;
          }
          int v46 = !v45;
          while (1)
          {
            uint64_t v47 = *v44;
            if ((v42 & 1) == 0 && v46 == 1) {
              break;
            }
            if ((uint64_t *)v43 == &v93) {
              goto LABEL_100;
            }
            if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v47 + 16)) {
              goto LABEL_99;
            }
            uint64_t v43 = *(void *)(v43 + 8);
            unint64_t v44 = (uint64_t *)(v47 + 8);
            char v42 = 1;
          }
          if (v92) {
            goto LABEL_99;
          }
LABEL_100:
          LODWORD(p_p) = v96;
          LODWORD(__p) = 0;
          LODWORD(__p) = *(_DWORD *)(v39 + 32);
          BOOL v48 = *(float *)&v96 != *(float *)&__p;
        }
        else
        {
LABEL_99:
          BOOL v48 = 1;
        }
        if ((v35 & v48) == 1)
        {
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Reverse(&v92, (uint64_t)&v83);
          p_p = 0;
          LODWORD(v98) = v83;
          std::list<int>::list(&v99, (uint64_t)v84);
          float v102 = v85;
          int v103 = v36 + v35;
          std::__list_imp<char *>::clear(v84);
          (*(void (**)(uint64_t *, void, void ***))(*a2 + 208))(a2, 0, &p_p);
          std::__list_imp<char *>::clear(&v99);
        }
        unint64_t v82 = 0;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v36, &__p);
LABEL_104:
        if (__p)
        {
          if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p))
          {
            if (__p)
            {
              (*(void (**)(void))(*(void *)__p + 8))();
              goto LABEL_132;
            }
LABEL_130:
            if (v81) {
              --*v81;
            }
LABEL_132:
            std::__list_imp<char *>::clear(&v93);
            if (v89) {
              (*(void (**)(uint64_t))(*(void *)v89 + 32))(v89);
            }
            else {
              ++v91;
            }
            continue;
          }
          if (__p)
          {
            uint64_t v49 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
LABEL_110:
            int v50 = *(_DWORD *)(v49 + 48);
            fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Reverse((_DWORD *)(v49 + 8), (uint64_t)&v75);
            uint64_t v51 = (v50 + v35);
            if (v51 == i) {
              char v52 = v35;
            }
            else {
              char v52 = 1;
            }
            if ((v52 & 1) == 0)
            {
              (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v70);
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Reverse(&v70, (uint64_t)&v72);
              fst::Times<int,(fst::StringType)0>(&v72, (uint64_t)&v75, (uint64_t)&v105);
              float v53 = NAN;
              if (v74 != -INFINITY)
              {
                float v53 = NAN;
                if (v77 != -INFINITY)
                {
                  float v53 = INFINITY;
                  if (v77 != INFINITY && v74 != INFINITY) {
                    float v53 = v74 + v77;
                  }
                }
              }
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&p_p, &v105, v53);
              std::__list_imp<char *>::clear(v106);
              float v75 = *(float *)&p_p;
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v76, v99, (uint64_t)&v98);
              float v77 = v101;
              std::__list_imp<char *>::clear(&v98);
              std::__list_imp<char *>::clear(v73);
              std::__list_imp<char *>::clear(v71);
            }
            uint64_t v55 = *(void ***)v49;
            float v67 = v75;
            std::list<int>::list(v68, (uint64_t)v76);
            float v69 = v77;
            p_p = v55;
            *(float *)&uint64_t v98 = v67;
            std::list<int>::list(&v99, (uint64_t)v68);
            float v102 = v69;
            int v103 = v37;
            std::__list_imp<char *>::clear(v68);
            while (1)
            {
              int v56 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              uint64_t v57 = *a2;
              if (v56 > (int)v51) {
                break;
              }
              (*(void (**)(uint64_t *))(v57 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void ***))(v57 + 208))(a2, v51, &p_p);
            std::__list_imp<char *>::clear(&v99);
            std::__list_imp<char *>::clear(v76);
            if (__p) {
              (*(void (**)(void *))(*(void *)__p + 40))(__p);
            }
            else {
              ++v82;
            }
            goto LABEL_104;
          }
        }
        else if (v82 >= v80)
        {
          goto LABEL_130;
        }
        uint64_t v49 = v79 + 56 * v82;
        goto LABEL_110;
      }
LABEL_74:
      uint64_t v36 = v91;
      goto LABEL_75;
    }
    break;
  }
  if (v89) {
    (*(void (**)(void))(*(void *)v89 + 8))();
  }
LABEL_137:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, i);
  if (i == v64) {
    char v58 = v35;
  }
  else {
    char v58 = 1;
  }
  if ((v58 & 1) == 0)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, void))(*(void *)a1 + 32))(&p_p, a1, v64);
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Reverse(&p_p, (uint64_t)v65);
    (*(void (**)(uint64_t *, void, char *))(*a2 + 184))(a2, v64, v65);
    std::__list_imp<char *>::clear(v66);
    std::__list_imp<char *>::clear(&v98);
  }
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  unint64_t v60 = v104 | v59;
  uint64_t v61 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v62 = fst::ReverseProperties(v60, v35);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v61 | v62, 0x3FFFFFFF0007);
}

void sub_1B1F6314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v12[0] = a1;
  v12[1] = a2;
  v12[2] = *(void *)a3;
  int v13 = *(_DWORD *)(a3 + 16);
  char v14 = *(unsigned char *)(a3 + 20);
  char v15 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  memset(v19, 0, 29);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      uint64_t v6 = v4 - 40;
      std::__list_imp<char *>::clear((void *)(v4 - 32));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  a2[1] = v5;
  fst::ShortestDistanceState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::ShortestDistance(v12);
  if (BYTE12(v19[1]))
  {
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    if (v7 != *a2)
    {
      do
      {
        uint64_t v9 = v7 - 40;
        std::__list_imp<char *>::clear((void *)(v7 - 32));
        uint64_t v7 = v9;
      }
      while (v9 != v8);
    }
    a2[1] = v8;
    uint64_t v10 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::NoWeight();
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::resize(a2, 1uLL, v10);
  }
  return fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)v12);
}

void sub_1B1F63418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = result;
  uint64_t v4 = result[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *result) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    return std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__append(result, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *result + 40 * a2;
    if (v4 != v8)
    {
      do
      {
        uint64_t v9 = v4 - 40;
        uint64_t result = std::__list_imp<char *>::clear((void *)(v4 - 32));
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    v3[1] = v8;
  }
  return result;
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::NoWeight()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::NoWeight(void)::no_weight;
}

void sub_1B1F63568(_Unwind_Exception *a1)
{
}

void *fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1B1F635FC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      uint64_t v6 = 0;
      v5[0] = v3;
      v5[1] = 0;
      void v5[2] = 0;
      void v5[3] = &v6;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a2, (uint64_t)v5);
    }
    operator new();
  }
  operator new();
}

void sub_1B1F63CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  BOOL v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  BOOL v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a3, 4 * v12);
  }
  unsigned int v28 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v26);
  while (1)
  {
    uint64_t result = v26;
    if (!v26)
    {
      if ((int)v28 >= v27) {
        return result;
      }
LABEL_11:
      uint64_t v15 = v28;
      goto LABEL_12;
    }
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
    uint64_t result = v26;
    if (v14) {
      break;
    }
    if (!v26) {
      goto LABEL_11;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v26 + 24))();
LABEL_12:
    unint64_t v25 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v15, v23);
    uint64_t v16 = (int)v15;
    while (1)
    {
      if (!v23[0])
      {
        if (v25 >= v23[2]) {
          goto LABEL_32;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v23[0] + 24))(v23[0])) {
        break;
      }
      if (v23[0])
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v23[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = v23[1] + 56 * v25;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 48)))
      {
        long long v19 = *(_DWORD **)a3;
        if (!a4
          || (uint64_t v20 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One(),
              fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::operator()(a4, v17 + 8, v20)))
        {
          int v21 = 1;
          goto LABEL_25;
        }
        if ((v19[v18] | 2) == 2)
        {
          int v21 = 3;
LABEL_25:
          v19[v18] = v21;
        }
        *a5 = 0;
      }
      *a6 = 0;
      if (v23[0]) {
        (*(void (**)(void))(*(void *)v23[0] + 40))(v23[0]);
      }
      else {
        ++v25;
      }
    }
    if (v23[0])
    {
      (*(void (**)(void))(*(void *)v23[0] + 8))();
      goto LABEL_34;
    }
LABEL_32:
    if (v24) {
      --*v24;
    }
LABEL_34:
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 32))(v26);
    }
    else {
      ++v28;
    }
  }
  if (v26) {
    return (*(uint64_t (**)(void))(*(void *)v26 + 8))();
  }
  return result;
}

void sub_1B1F64144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  uint64_t v2 = &v3;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::TopOrderVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>();
}

void sub_1B1F6431C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  float v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::TopOrderVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>()
{
}

void sub_1B1F64C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Type()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Type(void)::type;
}

void sub_1B1F64D28(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst::Plus<int>(a2, a3, (uint64_t)&v30);
  float v5 = *(float *)(a2 + 32);
  float v6 = *(float *)(a3 + 32);
  if (v5 != INFINITY)
  {
    if (v6 == INFINITY)
    {
      float v6 = *(float *)(a2 + 32);
    }
    else if (v5 <= v6)
    {
      float v8 = expf(-(float)(v6 - v5));
      float v6 = v5 - logf(v8 + 1.0);
    }
    else
    {
      float v7 = expf(-(float)(v5 - v6));
      float v6 = v6 - logf(v7 + 1.0);
    }
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v27, (int *)&v30, v6);
  std::__list_imp<char *>::clear(v31);
  if (v27) {
    uint64_t v9 = v28[2] + 1;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    uint64_t v11 = *(void *)(a2 + 24) + 1;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v9 != v11) {
    goto LABEL_42;
  }
  uint64_t v12 = v28[1];
  uint64_t v13 = *(void *)(a2 + 16);
  if (v27) {
    BOOL v14 = v27 == v10;
  }
  else {
    BOOL v14 = 0;
  }
  int v15 = !v14;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v15 != 1)
  {
    while ((void *)v12 != v28)
    {
      if (*(_DWORD *)(v12 + 16) != *(_DWORD *)(v16 + 16)) {
        goto LABEL_42;
      }
      uint64_t v12 = *(void *)(v12 + 8);
      uint64_t v16 = *(void *)(v16 + 8);
    }
  }
  else if (v27)
  {
LABEL_42:
    BOOL v25 = 0;
    goto LABEL_43;
  }
  float v30 = v29;
  float v32 = 0.0;
  float v17 = *(float *)(a2 + 32);
  float v32 = v17;
  if (v29 != v17) {
    goto LABEL_42;
  }
  if (*(_DWORD *)a3) {
    uint64_t v18 = *(void *)(a3 + 24) + 1;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v9 == v18)
  {
    char v19 = 0;
    uint64_t v20 = (uint64_t *)(a3 + 16);
    if (v10) {
      BOOL v21 = v10 == *(_DWORD *)a3;
    }
    else {
      BOOL v21 = 0;
    }
    int v22 = !v21;
    int v23 = v22 ^ 1;
    while (1)
    {
      uint64_t v24 = *v20;
      if ((v19 & 1) == 0 && !v23) {
        break;
      }
      if (v13 == a2 + 8) {
        goto LABEL_46;
      }
      if (*(_DWORD *)(v13 + 16) != *(_DWORD *)(v24 + 16)) {
        goto LABEL_45;
      }
      uint64_t v13 = *(void *)(v13 + 8);
      uint64_t v20 = (uint64_t *)(v24 + 8);
      char v19 = 1;
    }
    if (v10) {
      goto LABEL_45;
    }
LABEL_46:
    float v30 = v17;
    float v32 = 0.0;
    float v32 = *(float *)(a3 + 32);
    BOOL v25 = v17 != v32;
  }
  else
  {
LABEL_45:
    BOOL v25 = 1;
  }
LABEL_43:
  std::__list_imp<char *>::clear(v28);
  return v25;
}

void sub_1B1F64F98(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void *fst::Plus<int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  if (*(_DWORD *)a1 && (*(_DWORD *)a1 == -2 ? (BOOL v6 = *(void *)(a1 + 24) == 0) : (BOOL v6 = 0), v6)
    || *(_DWORD *)a2 && (*(_DWORD *)a2 == -2 ? (BOOL v7 = *(void *)(a2 + 24) == 0) : (BOOL v7 = 0), v7))
  {
    uint64_t v3 = fst::StringWeight<int,(fst::StringType)1>::NoWeight();
  }
  else
  {
    uint64_t v8 = fst::StringWeight<int,(fst::StringType)1>::Zero();
    int v9 = *(_DWORD *)a1;
    if (*(_DWORD *)a1) {
      uint64_t v10 = *(void *)(a1 + 24) + 1;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(_DWORD *)v8) {
      uint64_t v11 = *(void *)(v8 + 24) + 1;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v10 != v11) {
      goto LABEL_35;
    }
    char v12 = 0;
    uint64_t v13 = (uint64_t *)(a1 + 16);
    BOOL v14 = (uint64_t *)(v8 + 16);
    BOOL v15 = v9 && v9 == *(_DWORD *)v8;
    BOOL v16 = !v15;
    int v17 = !v16;
    while (1)
    {
      uint64_t v18 = *v13;
      uint64_t v19 = *v14;
      if ((v12 & 1) == 0 && !v17) {
        break;
      }
      if (v18 == a1 + 8) {
        goto LABEL_31;
      }
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16)) {
        goto LABEL_35;
      }
      uint64_t v13 = (uint64_t *)(v18 + 8);
      BOOL v14 = (uint64_t *)(v19 + 8);
      char v12 = 1;
    }
    if (v9)
    {
LABEL_35:
      uint64_t result = (void *)fst::StringWeight<int,(fst::StringType)1>::Zero();
      int v21 = *(_DWORD *)v3;
      if (*(_DWORD *)v3) {
        uint64_t v22 = *(void *)(v3 + 24) + 1;
      }
      else {
        uint64_t v22 = 0;
      }
      if (*(_DWORD *)result) {
        uint64_t v23 = result[3] + 1;
      }
      else {
        uint64_t v23 = 0;
      }
      if (v22 != v23)
      {
LABEL_55:
        *(void *)(a3 + 8) = a3 + 8;
        *(void *)(a3 + 16) = a3 + 8;
        *(void *)(a3 + ++*(void *)(result + 24) = 0;
        *(_DWORD *)a3 = 0;
        if (*(_DWORD *)a1 && v21)
        {
          float v32 = (void *)(v3 + 8);
          uint64_t v33 = (void *)(a1 + 8);
          float v34 = *(void **)(a1 + 16);
          do
          {
            int v35 = (_DWORD *)a1;
            if (v33 != v34) {
              int v35 = (_DWORD *)(*v33 + 16);
            }
            uint64_t v36 = (_DWORD *)v3;
            if (v32 != *(void **)(v3 + 16)) {
              uint64_t v36 = (_DWORD *)(*v32 + 16);
            }
            if (*v35 != *v36) {
              break;
            }
            int v37 = (int *)a1;
            if (v33 != v34) {
              int v37 = (int *)(*v33 + 16);
            }
            uint64_t result = fst::StringWeight<int,(fst::StringType)1>::PushFront((_DWORD *)a3, *v37);
            float v34 = *(void **)(a1 + 16);
            if (v33 == v34)
            {
              int v38 = 1;
            }
            else
            {
              int v38 = 0;
              uint64_t v33 = (void *)*v33;
            }
            if (v32 == *(void **)(v3 + 16))
            {
              int v39 = 1;
            }
            else
            {
              int v39 = 0;
              float v32 = (void *)*v32;
            }
          }
          while (!(v38 | v39));
        }
        return result;
      }
      char v24 = 0;
      BOOL v25 = (uint64_t *)(v3 + 16);
      uint64_t v26 = result + 2;
      if (v21) {
        BOOL v27 = v21 == *(_DWORD *)result;
      }
      else {
        BOOL v27 = 0;
      }
      int v28 = !v27;
      int v29 = v28 ^ 1;
      while (1)
      {
        uint64_t v30 = *v25;
        uint64_t v31 = *v26;
        if ((v24 & 1) == 0 && !v29) {
          break;
        }
        if (v30 == v3 + 8) {
          goto LABEL_73;
        }
        if (*(_DWORD *)(v30 + 16) != *(_DWORD *)(v31 + 16)) {
          goto LABEL_55;
        }
        BOOL v25 = (uint64_t *)(v30 + 8);
        uint64_t v26 = (uint64_t *)(v31 + 8);
        char v24 = 1;
      }
      if (v21) {
        goto LABEL_55;
      }
LABEL_73:
      uint64_t v3 = a1;
    }
  }
LABEL_31:
  *(_DWORD *)a3 = *(_DWORD *)v3;
  return std::list<int>::list((void *)(a3 + 8), v3 + 8);
}

{
  uint64_t v3;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *result;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v38;
  char v39;
  BOOL v40;
  int *v41;
  int v42;
  _DWORD *v43;
  uint64_t vars8;

  uint64_t v3 = a2;
  if (*(_DWORD *)a1 && (*(_DWORD *)a1 == -2 ? (BOOL v6 = *(void *)(a1 + 24) == 0) : (BOOL v6 = 0), v6)
    || *(_DWORD *)a2 && (*(_DWORD *)a2 == -2 ? (BOOL v7 = *(void *)(a2 + 24) == 0) : (BOOL v7 = 0), v7))
  {
    uint64_t v3 = fst::StringWeight<int,(fst::StringType)0>::NoWeight();
  }
  else
  {
    uint64_t v8 = fst::StringWeight<int,(fst::StringType)0>::Zero();
    int v9 = *(_DWORD *)a1;
    if (*(_DWORD *)a1) {
      uint64_t v10 = *(void *)(a1 + 24) + 1;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(_DWORD *)v8) {
      uint64_t v11 = *(void *)(v8 + 24) + 1;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v10 != v11) {
      goto LABEL_35;
    }
    char v12 = 0;
    uint64_t v13 = (uint64_t *)(a1 + 16);
    BOOL v14 = (uint64_t *)(v8 + 16);
    BOOL v15 = v9 && v9 == *(_DWORD *)v8;
    BOOL v16 = !v15;
    int v17 = !v16;
    while (1)
    {
      uint64_t v18 = *v13;
      uint64_t v19 = *v14;
      if ((v12 & 1) == 0 && !v17) {
        break;
      }
      if (v18 == a1 + 8) {
        goto LABEL_31;
      }
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16)) {
        goto LABEL_35;
      }
      uint64_t v13 = (uint64_t *)(v18 + 8);
      BOOL v14 = (uint64_t *)(v19 + 8);
      char v12 = 1;
    }
    if (v9)
    {
LABEL_35:
      uint64_t result = (void *)fst::StringWeight<int,(fst::StringType)0>::Zero();
      int v21 = *(_DWORD *)v3;
      if (*(_DWORD *)v3) {
        uint64_t v22 = *(void *)(v3 + 24) + 1;
      }
      else {
        uint64_t v22 = 0;
      }
      if (*(_DWORD *)result) {
        uint64_t v23 = result[3] + 1;
      }
      else {
        uint64_t v23 = 0;
      }
      if (v22 == v23)
      {
        char v24 = 0;
        BOOL v25 = *(void *)(v3 + 16);
        uint64_t v26 = result + 2;
        if (v21) {
          BOOL v27 = v21 == *(_DWORD *)result;
        }
        else {
          BOOL v27 = 0;
        }
        int v28 = !v27;
        int v29 = v28 ^ 1;
        uint64_t v30 = *(void *)(v3 + 16);
        while (1)
        {
          uint64_t v31 = *v26;
          if ((v24 & 1) == 0 && !v29) {
            break;
          }
          if (v30 == v3 + 8) {
            goto LABEL_80;
          }
          if (*(_DWORD *)(v30 + 16) != *(_DWORD *)(v31 + 16)) {
            goto LABEL_55;
          }
          uint64_t v30 = *(void *)(v30 + 8);
          uint64_t v26 = (uint64_t *)(v31 + 8);
          char v24 = 1;
        }
        if (!v21)
        {
LABEL_80:
          uint64_t v3 = a1;
          goto LABEL_31;
        }
      }
      else
      {
        BOOL v25 = *(void *)(v3 + 16);
      }
LABEL_55:
      float v32 = 0;
      *(void *)(a3 + 8) = a3 + 8;
      *(void *)(a3 + 16) = a3 + 8;
      *(void *)(a3 + ++*(void *)(result + 24) = 0;
      *(_DWORD *)a3 = 0;
      uint64_t v33 = a1 + 8;
      float v34 = (uint64_t *)(a1 + 16);
      int v35 = v3 + 8;
      while (1)
      {
        uint64_t v36 = *v34;
        int v38 = *v34 == v33 || v25 == v35;
        do
        {
          int v39 = v32;
          if (v32)
          {
            if (v38) {
              return result;
            }
          }
          else
          {
            if (*(_DWORD *)a1) {
              uint64_t v40 = *(_DWORD *)v3 == 0;
            }
            else {
              uint64_t v40 = 1;
            }
            if (v40) {
              return result;
            }
          }
          if (v32) {
            uint64_t v41 = (int *)(v36 + 16);
          }
          else {
            uint64_t v41 = (int *)a1;
          }
          char v42 = *v41;
          if (v39) {
            uint64_t v43 = (_DWORD *)(v25 + 16);
          }
          else {
            uint64_t v43 = (_DWORD *)v3;
          }
          if (v42 != *v43) {
            return result;
          }
          uint64_t result = fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a3, v42);
          float v32 = 1;
        }
        while ((v39 & 1) == 0);
        float v34 = (uint64_t *)(v36 + 8);
        BOOL v25 = *(void *)(v25 + 8);
        int v35 = v3 + 8;
        uint64_t v33 = a1 + 8;
      }
    }
  }
LABEL_31:
  *(_DWORD *)a3 = *(_DWORD *)v3;
  return std::list<int>::list((void *)(a3 + 8), v3 + 8);
}

void sub_1B1F6522C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)1>::NoWeight()
{
  {
    operator new();
  }
  return fst::StringWeight<int,(fst::StringType)1>::NoWeight(void)::no_weight;
}

void sub_1B1F652BC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C40CA22B68ALL);
  _Unwind_Resume(a1);
}

_DWORD *fst::StringWeight<int,(fst::StringType)1>::PushFront(_DWORD *result, int a2)
{
  uint64_t v3 = result;
  int v4 = *result;
  if (*result)
  {
    uint64_t result = operator new(0x18uLL);
    result[4] = v4;
    float v5 = (void *)*((void *)v3 + 2);
    uint64_t v6 = *((void *)v3 + 3);
    *(void *)uint64_t result = v3 + 2;
    *((void *)result + 1) = v5;
    *float v5 = result;
    *((void *)v3 + 2) = result;
    *((void *)v3 + 3) = v6 + 1;
  }
  _DWORD *v3 = a2;
  return result;
}

void fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
      return;
    }
    goto LABEL_212;
  }
  if (*((unsigned char *)a1 + 32))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    }
    int v4 = fst::LogMessage::LogMessage((fst *)v154, (uint64_t)&__p);
    float v5 = (void *)fst::cerr(v4);
    float v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ShortestDistance: first_path option disallowed when ", 52);
    uint64_t v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Weight does not have the path property: ", 40);
    uint64_t v140 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Type();
    int v141 = *(char *)(v140 + 23);
    if (v141 >= 0) {
      uint64_t v142 = v140;
    }
    else {
      uint64_t v142 = *(void *)v140;
    }
    if (v141 >= 0) {
      uint64_t v143 = *(unsigned __int8 *)(v140 + 23);
    }
    else {
      uint64_t v143 = *(void *)(v140 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, v142, v143);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v154);
    if (SHIBYTE(v159) < 0) {
      operator delete(__p);
    }
LABEL_212:
    int v144 = (char *)a1 + 116;
    goto LABEL_213;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    uint64_t v6 = (uint64_t *)a1[1];
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    if (v7 != *v6)
    {
      do
      {
        uint64_t v9 = v7 - 40;
        std::__list_imp<char *>::clear((void *)(v7 - 32));
        uint64_t v7 = v9;
      }
      while (v9 != v8);
    }
    v6[1] = v8;
    uint64_t v11 = a1[5];
    uint64_t v10 = a1[6];
    if (v10 != v11)
    {
      do
      {
        uint64_t v12 = v10 - 40;
        std::__list_imp<char *>::clear((void *)(v10 - 32));
        uint64_t v10 = v12;
      }
      while (v12 != v11);
    }
    a1[6] = v11;
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v13 = a2;
  BOOL v14 = (uint64_t *)a1[1];
  for (uint64_t i = v14 + 1; 0xCCCCCCCCCCCCCCCDLL * ((v14[1] - *v14) >> 3) <= a2; uint64_t i = v14 + 1)
  {
    BOOL v16 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    int v17 = v16;
    unint64_t v18 = v14[1];
    if (v18 >= v14[2])
    {
      uint64_t v19 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v14, v16);
    }
    else
    {
      *(_DWORD *)unint64_t v18 = *v16;
      std::list<int>::list((void *)(v18 + 8), (uint64_t)(v16 + 2));
      *(_DWORD *)(v18 + 32) = v17[8];
      uint64_t v19 = v18 + 40;
      *uint64_t i = v18 + 40;
    }
    *uint64_t i = v19;
    uint64_t v20 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    int v21 = v20;
    unint64_t v22 = a1[6];
    if (v22 >= a1[7])
    {
      uint64_t v23 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(a1 + 5, v20);
    }
    else
    {
      *(_DWORD *)unint64_t v22 = *v20;
      std::list<int>::list((void *)(v22 + 8), (uint64_t)(v20 + 2));
      *(_DWORD *)(v22 + 32) = v21[8];
      uint64_t v23 = v22 + 40;
      a1[6] = v22 + 40;
    }
    a1[6] = v23;
    LOBYTE(__p) = 0;
    std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &__p);
    BOOL v14 = (uint64_t *)a1[1];
  }
  if (*((unsigned char *)a1 + 33))
  {
    char v24 = (char *)a1[11];
    BOOL v25 = (char *)a1[12];
    unint64_t v26 = (v25 - v24) >> 2;
    if (v26 <= a2)
    {
      BOOL v27 = a1 + 13;
      do
      {
        if ((unint64_t)v25 >= *v27)
        {
          unint64_t v29 = v26 + 1;
          if ((v26 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = *v27 - (void)v24;
          if (v30 >> 1 > v29) {
            unint64_t v29 = v30 >> 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            float v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v31);
            char v24 = (char *)a1[11];
            BOOL v25 = (char *)a1[12];
          }
          else
          {
            float v32 = 0;
          }
          uint64_t v33 = &v32[4 * v26];
          *(_DWORD *)uint64_t v33 = -1;
          int v28 = v33 + 4;
          while (v25 != v24)
          {
            int v34 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *((_DWORD *)v33 - 1) = v34;
            v33 -= 4;
          }
          a1[11] = v33;
          a1[12] = v28;
          a1[13] = &v32[4 * v31];
          if (v24)
          {
            operator delete(v24);
            char v24 = (char *)a1[11];
          }
          else
          {
            char v24 = v33;
          }
        }
        else
        {
          *(_DWORD *)BOOL v25 = -1;
          int v28 = v25 + 4;
        }
        a1[12] = v28;
        unint64_t v26 = (v28 - v24) >> 2;
        BOOL v25 = v28;
      }
      while (v26 <= a2);
    }
    *(_DWORD *)&v24[4 * a2] = *((_DWORD *)a1 + 28);
  }
  uint64_t v35 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  uint64_t v36 = v35;
  uint64_t v37 = *(void *)a1[1] + 40 * (int)v13;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v35;
  if (v37 != v35) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v37 + 8), *(void *)(v35 + 16), v35 + 8);
  }
  *(_DWORD *)(v37 + 32) = *(_DWORD *)(v36 + 32);
  uint64_t v38 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  uint64_t v39 = v38;
  uint64_t v145 = a1 + 5;
  uint64_t v40 = a1[5] + 40 * (int)v13;
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v38;
  if (v40 != v38) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v40 + 8), *(void *)(v38 + 16), v38 + 8);
  }
  *(_DWORD *)(v40 + 32) = *(_DWORD *)(v39 + 32);
  uint64_t v41 = a1 + 8;
  *(void *)(a1[8] + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v13);
  char v42 = a1 + 13;
  int v144 = (char *)a1 + 116;
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_201;
    }
    int v43 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    unint64_t v44 = (uint64_t *)a1[1];
    BOOL v45 = v44 + 1;
    for (j = v43; 0xCCCCCCCCCCCCCCCDLL * ((v44[1] - *v44) >> 3) <= j; BOOL v45 = v44 + 1)
    {
      uint64_t v47 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      BOOL v48 = v47;
      unint64_t v49 = v44[1];
      if (v49 >= v44[2])
      {
        uint64_t v50 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v44, v47);
      }
      else
      {
        *(_DWORD *)unint64_t v49 = *v47;
        std::list<int>::list((void *)(v49 + 8), (uint64_t)(v47 + 2));
        *(_DWORD *)(v49 + 32) = v48[8];
        uint64_t v50 = v49 + 40;
        *BOOL v45 = v49 + 40;
      }
      *BOOL v45 = v50;
      uint64_t v51 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      char v52 = v51;
      unint64_t v53 = a1[6];
      if (v53 >= a1[7])
      {
        uint64_t v54 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v145, v51);
      }
      else
      {
        *(_DWORD *)unint64_t v53 = *v51;
        std::list<int>::list((void *)(v53 + 8), (uint64_t)(v51 + 2));
        *(_DWORD *)(v53 + 32) = v52[8];
        uint64_t v54 = v53 + 40;
        a1[6] = v53 + 40;
      }
      a1[6] = v54;
      LOBYTE(__p) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &__p);
      unint64_t v44 = (uint64_t *)a1[1];
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 32))(&__p);
      uint64_t v55 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      if (__p) {
        uint64_t v56 = v160 + 1;
      }
      else {
        uint64_t v56 = 0;
      }
      if (*(_DWORD *)v55) {
        uint64_t v57 = *(void *)(v55 + 24) + 1;
      }
      else {
        uint64_t v57 = 0;
      }
      if (v56 != v57) {
        goto LABEL_200;
      }
      char v58 = 0;
      uint64_t v59 = v159;
      unint64_t v60 = (uint64_t *)(v55 + 16);
      BOOL v61 = __p && __p == *(_DWORD *)v55;
      BOOL v62 = !v61;
      while (1)
      {
        uint64_t v63 = *v60;
        if ((v58 & 1) == 0 && v62) {
          break;
        }
        if ((uint64_t *)v59 == &v158) {
          goto LABEL_79;
        }
        if (*(_DWORD *)(v59 + 16) != *(_DWORD *)(v63 + 16)) {
          goto LABEL_200;
        }
        uint64_t v59 = *(void *)(v59 + 8);
        unint64_t v60 = (uint64_t *)(v63 + 8);
        char v58 = 1;
      }
      if (__p)
      {
LABEL_200:
        std::__list_imp<char *>::clear(&v158);
LABEL_201:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
          return;
        }
LABEL_213:
        *int v144 = 1;
        return;
      }
LABEL_79:
      *(float *)v154 = v161;
      float v151 = 0.0;
      float v151 = *(float *)(v55 + 32);
      float v64 = v161;
      float v65 = v151;
      std::__list_imp<char *>::clear(&v158);
      if (v64 != v65) {
        goto LABEL_201;
      }
    }
    *(void *)(*v41 + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << j);
    uint64_t v66 = *v145 + 40 * (int)j;
    LODWORD(__p) = *(_DWORD *)v66;
    std::list<int>::list(&v158, v66 + 8);
    float v161 = *(float *)(v66 + 32);
    uint64_t v67 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    uint64_t v68 = v67;
    uint64_t v69 = *v145 + 40 * (int)j;
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v67;
    if (v69 != v67) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v69 + 8), *(void *)(v67 + 16), v67 + 8);
    }
    *(_DWORD *)(v69 + 32) = *(_DWORD *)(v68 + 32);
    uint64_t v70 = *a1;
    unint64_t v156 = 0;
    (*(void (**)(uint64_t, unint64_t, void *))(*(void *)v70 + 136))(v70, j, v154);
    while (v154[0])
    {
      if ((*(uint64_t (**)(void))(*(void *)v154[0] + 24))(v154[0])) {
        goto LABEL_193;
      }
      if (v154[0])
      {
        uint64_t v71 = (*(uint64_t (**)(void))(*(void *)v154[0] + 32))(v154[0]);
        goto LABEL_89;
      }
LABEL_88:
      uint64_t v71 = v154[1] + 56 * v156;
LABEL_89:
      int v72 = (uint64_t *)a1[1];
      std::vector<unsigned int>::pointer v73 = v72 + 1;
      unint64_t v74 = *(int *)(v71 + 48);
      if (0xCCCCCCCCCCCCCCCDLL * ((v72[1] - *v72) >> 3) <= v74)
      {
        do
        {
          float v75 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          unsigned int v76 = v75;
          uint64_t v77 = *v73;
          if (*v73 >= (unint64_t)v72[2])
          {
            uint64_t v78 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v72, v75);
          }
          else
          {
            *(_DWORD *)uint64_t v77 = *v75;
            std::list<int>::list((void *)(v77 + 8), (uint64_t)(v75 + 2));
            *(_DWORD *)(v77 + 32) = v76[8];
            uint64_t v78 = v77 + 40;
            *std::vector<unsigned int>::pointer v73 = v77 + 40;
          }
          *std::vector<unsigned int>::pointer v73 = v78;
          uint64_t v79 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          unint64_t v80 = v79;
          unint64_t v81 = a1[6];
          if (v81 >= a1[7])
          {
            uint64_t v82 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v145, v79);
          }
          else
          {
            *(_DWORD *)unint64_t v81 = *v79;
            std::list<int>::list((void *)(v81 + 8), (uint64_t)(v79 + 2));
            *(_DWORD *)(v81 + 32) = v80[8];
            uint64_t v82 = v81 + 40;
            a1[6] = v81 + 40;
          }
          a1[6] = v82;
          LOBYTE(v151) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v151);
          int v72 = (uint64_t *)a1[1];
          std::vector<unsigned int>::pointer v73 = v72 + 1;
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((v72[1] - *v72) >> 3) <= *(int *)(v71 + 48));
        LODWORD(v74) = *(_DWORD *)(v71 + 48);
      }
      if (*((unsigned char *)a1 + 33))
      {
        int v83 = (char *)a1[11];
        BOOL v84 = (char *)a1[12];
        unint64_t v85 = (v84 - v83) >> 2;
        if (v85 <= (int)v74)
        {
          do
          {
            if ((unint64_t)v84 >= *v42)
            {
              unint64_t v88 = v85 + 1;
              if ((v85 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v89 = *v42 - (void)v83;
              if (v89 >> 1 > v88) {
                unint64_t v88 = v89 >> 1;
              }
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v90 = v88;
              }
              if (v90)
              {
                unsigned int v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v90);
                int v83 = (char *)a1[11];
                BOOL v84 = (char *)a1[12];
              }
              else
              {
                unsigned int v91 = 0;
              }
              uint64_t v92 = &v91[4 * v85];
              *(_DWORD *)uint64_t v92 = -1;
              uint64_t v87 = v92 + 4;
              while (v84 != v83)
              {
                int v93 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v92 - 1) = v93;
                v92 -= 4;
              }
              a1[11] = v92;
              a1[12] = v87;
              a1[13] = &v91[4 * v90];
              if (v83)
              {
                operator delete(v83);
                int v83 = (char *)a1[11];
              }
              else
              {
                int v83 = v92;
              }
            }
            else
            {
              *(_DWORD *)BOOL v84 = -1;
              uint64_t v87 = v84 + 4;
            }
            a1[12] = v87;
            unint64_t v85 = (v87 - v83) >> 2;
            int v94 = *(_DWORD *)(v71 + 48);
            BOOL v84 = v87;
          }
          while (v85 <= v94);
          uint64_t v86 = v94;
          LODWORD(v74) = *(_DWORD *)(v71 + 48);
        }
        else
        {
          uint64_t v86 = (int)v74;
        }
        if (*(_DWORD *)&v83[4 * v86] != *((_DWORD *)a1 + 28))
        {
          uint64_t v95 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          uint64_t v96 = v95;
          uint64_t v97 = *(void *)a1[1] + 40 * *(int *)(v71 + 48);
          *(_DWORD *)uint64_t v97 = *(_DWORD *)v95;
          if (v97 != v95) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v97 + 8), *(void *)(v95 + 16), v95 + 8);
          }
          *(_DWORD *)(v97 + 32) = *(_DWORD *)(v96 + 32);
          uint64_t v98 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          uint64_t v99 = v98;
          uint64_t v100 = *v145 + 40 * *(int *)(v71 + 48);
          *(_DWORD *)uint64_t v100 = *(_DWORD *)v98;
          if (v100 != v98) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v100 + 8), *(void *)(v98 + 16), v98 + 8);
          }
          *(_DWORD *)(v100 + 32) = *(_DWORD *)(v99 + 32);
          unint64_t v101 = *(int *)(v71 + 48);
          *(void *)(a1[8] + ((v101 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v101);
          *(_DWORD *)(a1[11] + 4 * v101) = *((_DWORD *)a1 + 28);
          LODWORD(v74) = *(_DWORD *)(v71 + 48);
        }
      }
      uint64_t v102 = *(void *)a1[1];
      uint64_t v103 = a1[5];
      fst::Times<int,(fst::StringType)1>((int *)&__p, v71 + 8, (uint64_t)&v146);
      float v104 = NAN;
      if (v161 != -INFINITY)
      {
        float v105 = *(float *)(v71 + 40);
        float v104 = NAN;
        if (v105 != -INFINITY)
        {
          float v104 = INFINITY;
          if (v105 != INFINITY && v161 != INFINITY) {
            float v104 = v161 + v105;
          }
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v151, &v146, v104);
      uint64_t v107 = v102 + 40 * (int)v74;
      std::__list_imp<char *>::clear(&v147);
      fst::Plus<int>(v107, (uint64_t)&v151, (uint64_t)&v162);
      float v108 = *(float *)(v107 + 32);
      float v109 = v153;
      if (v108 != INFINITY)
      {
        if (v153 == INFINITY)
        {
          float v109 = *(float *)(v107 + 32);
        }
        else if (v108 <= v153)
        {
          float v111 = expf(-(float)(v153 - v108));
          float v109 = v108 - logf(v111 + 1.0);
        }
        else
        {
          float v110 = expf(-(float)(v108 - v153));
          float v109 = v109 - logf(v110 + 1.0);
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v146, &v162, v109);
      std::__list_imp<char *>::clear(v163);
      int v112 = *(_DWORD *)v107;
      if (*(_DWORD *)v107) {
        uint64_t v113 = *(void *)(v107 + 24) + 1;
      }
      else {
        uint64_t v113 = 0;
      }
      if (v146) {
        uint64_t v114 = v149 + 1;
      }
      else {
        uint64_t v114 = 0;
      }
      if (v113 == v114)
      {
        char v115 = 0;
        float v116 = *((float *)a1 + 7);
        float v117 = (uint64_t *)(v107 + 16);
        uint64_t v118 = v148;
        if (v112) {
          BOOL v119 = v112 == v146;
        }
        else {
          BOOL v119 = 0;
        }
        int v120 = !v119;
        while (1)
        {
          uint64_t v121 = *v117;
          if ((v115 & 1) == 0 && v120 == 1) {
            break;
          }
          if (v121 == v107 + 8) {
            goto LABEL_162;
          }
          if (*(_DWORD *)(v121 + 16) != *(_DWORD *)(v118 + 16)) {
            goto LABEL_158;
          }
          float v117 = (uint64_t *)(v121 + 8);
          uint64_t v118 = *(void *)(v118 + 8);
          char v115 = 1;
        }
        if (v112) {
          goto LABEL_158;
        }
LABEL_162:
        float v124 = *(float *)(v107 + 32);
        float v125 = v150;
        float v126 = v116 + v150;
        float v127 = v116 + v124;
        std::__list_imp<char *>::clear(&v147);
        if (v125 <= v127 && v124 <= v126) {
          goto LABEL_189;
        }
      }
      else
      {
LABEL_158:
        std::__list_imp<char *>::clear(&v147);
      }
      fst::Plus<int>(v107, (uint64_t)&v151, (uint64_t)&v162);
      float v122 = *(float *)(v107 + 32);
      float v123 = v153;
      if (v122 != INFINITY)
      {
        if (v153 == INFINITY)
        {
          float v123 = *(float *)(v107 + 32);
        }
        else if (v122 <= v153)
        {
          float v130 = expf(-(float)(v153 - v122));
          float v123 = v122 - logf(v130 + 1.0);
        }
        else
        {
          float v129 = expf(-(float)(v122 - v153));
          float v123 = v123 - logf(v129 + 1.0);
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v146, &v162, v123);
      std::__list_imp<char *>::clear(v163);
      *(_DWORD *)uint64_t v107 = v146;
      if ((int *)v107 != &v146) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v107 + 8), v148, (uint64_t)&v147);
      }
      uint64_t v131 = v103 + 40 * (int)v74;
      *(float *)(v107 + 32) = v150;
      std::__list_imp<char *>::clear(&v147);
      fst::Plus<int>(v131, (uint64_t)&v151, (uint64_t)&v162);
      float v132 = *(float *)(v131 + 32);
      float v133 = v153;
      if (v132 != INFINITY)
      {
        if (v153 == INFINITY)
        {
          float v133 = *(float *)(v131 + 32);
        }
        else if (v132 <= v153)
        {
          float v135 = expf(-(float)(v153 - v132));
          float v133 = v132 - logf(v135 + 1.0);
        }
        else
        {
          float v134 = expf(-(float)(v132 - v153));
          float v133 = v133 - logf(v134 + 1.0);
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v146, &v162, v133);
      std::__list_imp<char *>::clear(v163);
      *(_DWORD *)uint64_t v131 = v146;
      if ((int *)v131 != &v146) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v131 + 8), v148, (uint64_t)&v147);
      }
      *(float *)(v131 + 32) = v150;
      std::__list_imp<char *>::clear(&v147);
      if (*(_DWORD *)v107 == -2 && !*(void *)(v107 + 24)
        || *(float *)(v107 + 32) == -INFINITY
        || *(_DWORD *)v131 == -2 && !*(void *)(v131 + 24)
        || *(float *)(v131 + 32) == -INFINITY)
      {
        *int v144 = 1;
        std::__list_imp<char *>::clear(v152);
        char v137 = 0;
        goto LABEL_194;
      }
      uint64_t v136 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[8] + (((unint64_t)*(int *)(v71 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v71 + 48)))
      {
        (*(void (**)(void))(v136 + 40))();
      }
      else
      {
        (*(void (**)(void))(v136 + 24))();
        *(void *)(*v41 + (((unint64_t)*(int *)(v71 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v71 + 48);
      }
LABEL_189:
      std::__list_imp<char *>::clear(v152);
      if (v154[0]) {
        (*(void (**)(void))(*(void *)v154[0] + 40))(v154[0]);
      }
      else {
        ++v156;
      }
    }
    if (v156 < v154[2]) {
      goto LABEL_88;
    }
LABEL_193:
    char v137 = 1;
LABEL_194:
    if (v154[0])
    {
      (*(void (**)(void))(*(void *)v154[0] + 8))(v154[0]);
    }
    else if (v155)
    {
      --*v155;
    }
    std::__list_imp<char *>::clear(&v158);
  }
  while ((v137 & 1) != 0);
}

void sub_1B1F664A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  BOOL v15 = v11;
  BOOL v16 = &v10[40 * v9];
  *(_DWORD *)uint64_t v11 = *a2;
  std::list<int>::list((void *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1F666E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      *(_DWORD *)(a7 + v11 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((void *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1F66804(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 8;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::__list_imp<char *>::clear((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *fst::Times<int,(fst::StringType)1>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 && (*a1 == -2 ? (BOOL v6 = *((void *)a1 + 3) == 0) : (BOOL v6 = 0), v6)
    || *(_DWORD *)a2 && (*(_DWORD *)a2 == -2 ? (BOOL v7 = *(void *)(a2 + 24) == 0) : (BOOL v7 = 0), v7))
  {
    uint64_t v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)1>::NoWeight();
  }
  else
  {
    uint64_t v8 = fst::StringWeight<int,(fst::StringType)1>::Zero();
    int v9 = *a1;
    if (*a1) {
      uint64_t v10 = *((void *)a1 + 3) + 1;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(_DWORD *)v8) {
      uint64_t v11 = *(void *)(v8 + 24) + 1;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v10 != v11) {
      goto LABEL_32;
    }
    char v12 = 0;
    unint64_t v13 = (uint64_t *)(a1 + 4);
    BOOL v14 = (uint64_t *)(v8 + 16);
    BOOL v15 = v9 && v9 == *(_DWORD *)v8;
    BOOL v16 = !v15;
    int v17 = !v16;
    while (1)
    {
      uint64_t v18 = *v13;
      uint64_t v19 = *v14;
      if ((v12 & 1) == 0 && !v17) {
        break;
      }
      if ((int *)v18 == a1 + 2) {
        goto LABEL_61;
      }
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16)) {
        goto LABEL_32;
      }
      unint64_t v13 = (uint64_t *)(v18 + 8);
      BOOL v14 = (uint64_t *)(v19 + 8);
      char v12 = 1;
    }
    if (v9)
    {
LABEL_32:
      uint64_t v21 = fst::StringWeight<int,(fst::StringType)1>::Zero();
      int v22 = *(_DWORD *)a2;
      if (*(_DWORD *)a2) {
        uint64_t v23 = *(void *)(a2 + 24) + 1;
      }
      else {
        uint64_t v23 = 0;
      }
      if (*(_DWORD *)v21) {
        uint64_t v24 = *(void *)(v21 + 24) + 1;
      }
      else {
        uint64_t v24 = 0;
      }
      if (v23 != v24) {
        goto LABEL_52;
      }
      char v25 = 0;
      unint64_t v26 = (uint64_t *)(a2 + 16);
      BOOL v27 = (uint64_t *)(v21 + 16);
      BOOL v28 = v22 && v22 == *(_DWORD *)v21;
      BOOL v29 = !v28;
      int v30 = !v29;
      while (1)
      {
        uint64_t v31 = *v26;
        uint64_t v32 = *v27;
        if ((v25 & 1) == 0 && !v30) {
          break;
        }
        if (v31 == a2 + 8) {
          goto LABEL_61;
        }
        if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16)) {
          goto LABEL_52;
        }
        unint64_t v26 = (uint64_t *)(v31 + 8);
        BOOL v27 = (uint64_t *)(v32 + 8);
        char v25 = 1;
      }
      if (v22)
      {
LABEL_52:
        *(_DWORD *)a3 = *a1;
        uint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(a1 + 2));
        char v34 = 0;
        for (uint64_t i = (uint64_t *)(a2 + 16); ; uint64_t i = (uint64_t *)(v36 + 8))
        {
          uint64_t v36 = *i;
          do
          {
            char v37 = v34;
            if (v34)
            {
              if (v36 == a2 + 8) {
                return result;
              }
              int v38 = *(_DWORD *)(v36 + 16);
            }
            else
            {
              int v38 = *(_DWORD *)a2;
              if (!*(_DWORD *)a2) {
                return result;
              }
            }
            uint64_t result = fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a3, v38);
            char v34 = 1;
          }
          while ((v37 & 1) == 0);
        }
      }
    }
LABEL_61:
    uint64_t v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)1>::Zero();
  }
  *(_DWORD *)a3 = *v20;
  return std::list<int>::list((void *)(a3 + 8), (uint64_t)(v20 + 2));
}

void sub_1B1F66A94(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v5 = (void **)(a1 + 40);
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::VectorFst()
{
}

void sub_1B1F66B60(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(_DWORD **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *v4;
  uint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(v4 + 2));
  *(_DWORD *)(a3 + 32) = v4[8];
  return result;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    BOOL v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 56);
  uint64_t v4 = *v5;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1F66F04(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

void *fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  int v8 = *a3;
  std::list<int>::list(v9, (uint64_t)(a3 + 2));
  int v10 = a3[8];
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::SetFinal(v6, a2, &v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1B1F67024(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddArc(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::DeleteArcs(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56);
  return std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::InitMutableArcIterator()
{
}

void sub_1B1F67564(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FC70;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A3A0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1F67664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D1A0;
  uint64_t v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void *)a1[8];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FC70;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1F67978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1F67A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1F67B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1F67C44(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FC70;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A3A0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v20 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v18);
  while (1)
  {
    if (!v18)
    {
      if ((int)v20 >= v19) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v20;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18)) {
      break;
    }
    if (!v18) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 24))(v18);
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddState((void *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v16, a2, v9);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::SetFinal(a1, v9, (int *)&v16);
    std::__list_imp<char *>::clear(v17);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 56), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __str.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v11 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v15);
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__str.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__str.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 32))(v18);
    }
    else {
      ++v20;
    }
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1F6815C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstBaseImpl(v16);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1F683B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>();
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddState(void *a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  uint64_t v3 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  *(_DWORD *)uint64_t v2 = *v3;
  std::list<int>::list((void *)v2 + 1, (uint64_t)(v3 + 2));
  unint64_t v4 = a1[10];
  *((_DWORD *)v2 + 8) = v3[8];
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((void *)v2 + 9) = 0;
  uint64_t v5 = (void *)a1[9];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[8];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v11);
    }
    else {
      char v12 = 0;
    }
    char v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)char v13 = v2;
    int v6 = v13 + 8;
    uint64_t v16 = (char *)a1[8];
    std::string::size_type v15 = (char *)a1[9];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      std::string::size_type v15 = (char *)a1[8];
    }
    a1[8] = v13;
    a1[9] = v6;
    a1[10] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = v2;
    int v6 = v5 + 1;
  }
  a1[9] = v6;
  return (((unint64_t)v6 - a1[8]) >> 3) - 1;
}

void *fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  int v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  int v5 = a3[8];
  int v9 = v5;
  *(_DWORD *)uint64_t v4 = v7;
  if ((int *)v4 != &v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v4 + 8), v8[1], (uint64_t)v8);
    int v5 = v9;
  }
  *(_DWORD *)(v4 + 32) = v5;
  return std::__list_imp<char *>::clear(v8);
}

void sub_1B1F68584(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero(void)::zero;
}

void sub_1B1F68634(_Unwind_Exception *a1)
{
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Zero()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Zero(void)::zero;
}

void sub_1B1F68708(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Zero()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Zero(void)::zero;
}

void sub_1B1F68808(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)0>::Zero()
{
  {
    operator new();
  }
  return fst::StringWeight<int,(fst::StringType)0>::Zero(void)::zero;
}

void sub_1B1F688CC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C40CA22B68ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)0>::StringWeight(uint64_t a1, int a2)
{
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(_DWORD *)a1 = 0;
  fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a1, a2);
  return a1;
}

void sub_1B1F6893C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::list<int>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    int v6 = a1;
    do
    {
      int v7 = operator new(0x18uLL);
      v7[4] = *(_DWORD *)(v3 + 16);
      *(void *)int v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      int v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B1F689D8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    long long v7[3] = v7[0] + 56 * v6;
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1F68A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(void *)(v12 - 56) = *(void *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((void *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1F68BC4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[5];
  }
  if (!a2[1]) {
    ++a1[6];
  }
  uint64_t v3 = a1 + 7;
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> const&>((uint64_t)v3, (uint64_t)a2);
    uint64_t result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void *std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t result = std::list<int>::list((void *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1B1F68CB8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[56 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((void *)v11 + 2, a2 + 16);
  uint64_t v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1F68DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a1, a2, a3, 1);
  }
}

void sub_1B1F68F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v116 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      int v112 = (uint64_t *)&v116;
      fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(a1, (uint64_t)&v109);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
      goto LABEL_211;
    }
    uint64_t v11 = a2 & 0xC0000;
    uint64_t v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0) {
      uint64_t v12 = 0x10425A850000;
    }
    unint64_t v13 = v8 | v12;
    uint64_t v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0) {
      v13 |= 0x100000uLL;
    }
    unint64_t v116 = v13;
    memset(&v108, 0, sizeof(v108));
    memset(&v107, 0, sizeof(v107));
    unsigned int v106 = 0;
    uint64_t v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v104);
    int v16 = 0;
LABEL_12:
    if (!v104)
    {
      if ((int)v106 >= v105) {
        goto LABEL_203;
      }
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v104 + 16))(v104))
    {
      if (v104)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v104 + 24))();
LABEL_18:
        std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
        uint64_t v111 = (uint64_t)&v111;
        int v112 = &v111;
        uint64_t v113 = 0;
        LODWORD(v110) = 0;
        v108.__end_ = v108.__begin_;
        v107.__end_ = v107.__begin_;
        if (v11) {
          std::vector<int>::reserve(&v108, v18);
        }
        if (v14) {
          std::vector<int>::reserve(&v107, v18);
        }
        int v98 = v16;
        unint64_t v103 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v99);
        char v19 = 1;
        while (1)
        {
          if (v99)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v99 + 24))(v99))
            {
              if (v99)
              {
                (*(void (**)(void))(*(void *)v99 + 8))();
              }
              else
              {
LABEL_132:
                if (v102) {
                  --*v102;
                }
              }
              uint64_t v15 = a1;
              int v16 = v98;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v108.__end_ - (char *)v108.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14) {
                  goto LABEL_152;
                }
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  unint64_t v72 = v107.__end_ - v107.__begin_;
                  if (v72 <= 2) {
                    unint64_t v72 = 2;
                  }
                  std::vector<unsigned int>::pointer v73 = v107.__begin_ + 1;
                  unsigned int v74 = *v107.__begin_;
                  unint64_t v75 = v72 - 1;
                  while (1)
                  {
                    unsigned int v77 = *v73++;
                    unsigned int v76 = v77;
                    if (v77 == v74) {
                      break;
                    }
                    unsigned int v74 = v76;
                    if (!--v75) {
                      goto LABEL_152;
                    }
                  }
                  unint64_t v116 = v116 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              unint64_t v66 = v108.__end_ - v108.__begin_;
              if (v66 <= 2) {
                unint64_t v66 = 2;
              }
              std::vector<unsigned int>::pointer v67 = v108.__begin_ + 1;
              unsigned int v68 = *v108.__begin_;
              unint64_t v69 = v66 - 1;
              while (1)
              {
                unsigned int v71 = *v67++;
                unsigned int v70 = v71;
                if (v71 == v68) {
                  break;
                }
                unsigned int v68 = v70;
                if (!--v69) {
                  goto LABEL_141;
                }
              }
              unint64_t v116 = v116 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14) {
                goto LABEL_142;
              }
LABEL_152:
              if (v98 >= 1) {
                unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v99, a1, v17);
              uint64_t v78 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
              if (v99) {
                uint64_t v79 = (char *)v102 + 1;
              }
              else {
                uint64_t v79 = 0;
              }
              if (*(_DWORD *)v78) {
                uint64_t v80 = *(void *)(v78 + 24) + 1;
              }
              else {
                uint64_t v80 = 0;
              }
              if (v79 != (char *)v80) {
                goto LABEL_174;
              }
              char v81 = 0;
              unint64_t v82 = v101;
              int v83 = (uint64_t *)(v78 + 16);
              BOOL v84 = v99 && v99 == *(_DWORD *)v78;
              BOOL v85 = !v84;
              while (1)
              {
                uint64_t v86 = *v83;
                if ((v81 & 1) == 0 && v85) {
                  break;
                }
                if ((uint64_t *)v82 == &v100) {
                  goto LABEL_173;
                }
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16)) {
                  goto LABEL_174;
                }
                unint64_t v82 = *(void *)(v82 + 8);
                int v83 = (uint64_t *)(v86 + 8);
                char v81 = 1;
              }
              if (v99) {
                goto LABEL_174;
              }
LABEL_173:
              float v118 = *(float *)&v103;
              float v117 = 0.0;
              float v117 = *(float *)(v78 + 32);
              if (*(float *)&v103 == v117)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v17, *(float *)&v103) != 1)unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
              }
                }
              else
              {
LABEL_174:
                uint64_t v87 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
                if (v99) {
                  unint64_t v88 = (char *)v102 + 1;
                }
                else {
                  unint64_t v88 = 0;
                }
                if (*(_DWORD *)v87) {
                  uint64_t v89 = *(void *)(v87 + 24) + 1;
                }
                else {
                  uint64_t v89 = 0;
                }
                if (v88 != (char *)v89) {
                  goto LABEL_194;
                }
                char v90 = 0;
                unint64_t v91 = v101;
                uint64_t v92 = (uint64_t *)(v87 + 16);
                BOOL v93 = v99 && v99 == *(_DWORD *)v87;
                BOOL v94 = !v93;
                while (1)
                {
                  uint64_t v95 = *v92;
                  if ((v90 & 1) == 0 && v94) {
                    break;
                  }
                  if ((uint64_t *)v91 == &v100) {
                    goto LABEL_193;
                  }
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16)) {
                    goto LABEL_194;
                  }
                  unint64_t v91 = *(void *)(v91 + 8);
                  uint64_t v92 = (uint64_t *)(v95 + 8);
                  char v90 = 1;
                }
                if (v99) {
                  goto LABEL_194;
                }
LABEL_193:
                float v118 = *(float *)&v103;
                float v117 = 0.0;
                float v117 = *(float *)(v87 + 32);
                if (*(float *)&v103 != v117) {
LABEL_194:
                }
                  unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                int v16 = v98 + 1;
              }
              std::__list_imp<char *>::clear(&v100);
              std::__list_imp<char *>::clear(&v111);
              if (v104) {
                (*(void (**)(uint64_t))(*(void *)v104 + 32))(v104);
              }
              else {
                ++v106;
              }
              goto LABEL_12;
            }
            if (v99)
            {
              uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v99 + 32))();
              goto LABEL_29;
            }
          }
          else if (v103 >= v101)
          {
            goto LABEL_132;
          }
          uint64_t v20 = v100 + 56 * v103;
LABEL_29:
          int v21 = *(_DWORD *)v20;
          int v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            unint64_t v116 = v116 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            int v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22) {
                goto LABEL_35;
              }
              goto LABEL_39;
            }
            unint64_t v23 = v116;
          }
          else
          {
            unint64_t v23 = v116 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          unint64_t v116 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_44;
          }
LABEL_39:
          unint64_t v116 = v116 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v109) {
              unint64_t v116 = v116 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            }
            if (v22 < SHIDWORD(v109)) {
              unint64_t v116 = v116 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
            }
          }
LABEL_44:
          uint64_t v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
          int v25 = *(_DWORD *)(v20 + 8);
          if (v25) {
            uint64_t v26 = *(void *)(v20 + 32) + 1;
          }
          else {
            uint64_t v26 = 0;
          }
          if (*(_DWORD *)v24) {
            uint64_t v27 = *(void *)(v24 + 24) + 1;
          }
          else {
            uint64_t v27 = 0;
          }
          if (v26 != v27) {
            goto LABEL_64;
          }
          char v28 = 0;
          BOOL v29 = (uint64_t *)(v20 + 24);
          int v30 = (uint64_t *)(v24 + 16);
          BOOL v31 = v25 && v25 == *(_DWORD *)v24;
          BOOL v32 = !v31;
          while (1)
          {
            uint64_t v33 = *v29;
            uint64_t v34 = *v30;
            if ((v28 & 1) == 0 && v32) {
              break;
            }
            if (v33 == v20 + 16) {
              goto LABEL_63;
            }
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16)) {
              goto LABEL_64;
            }
            BOOL v29 = (uint64_t *)(v33 + 8);
            int v30 = (uint64_t *)(v34 + 8);
            char v28 = 1;
          }
          if (v25) {
            goto LABEL_64;
          }
LABEL_63:
          float v118 = 0.0;
          float v118 = *(float *)(v20 + 40);
          float v117 = 0.0;
          float v117 = *(float *)(v24 + 32);
          if (v118 != v117)
          {
LABEL_64:
            uint64_t v35 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
            int v25 = *(_DWORD *)(v20 + 8);
            if (v25) {
              uint64_t v36 = *(void *)(v20 + 32) + 1;
            }
            else {
              uint64_t v36 = 0;
            }
            if (*(_DWORD *)v35) {
              uint64_t v37 = *(void *)(v35 + 24) + 1;
            }
            else {
              uint64_t v37 = 0;
            }
            if (v36 != v37) {
              goto LABEL_84;
            }
            char v38 = 0;
            uint64_t v39 = (uint64_t *)(v20 + 24);
            uint64_t v40 = (uint64_t *)(v35 + 16);
            BOOL v41 = v25 && v25 == *(_DWORD *)v35;
            BOOL v42 = !v41;
            while (1)
            {
              uint64_t v43 = *v39;
              uint64_t v44 = *v40;
              if ((v38 & 1) == 0 && v42) {
                break;
              }
              if (v43 == v20 + 16) {
                goto LABEL_83;
              }
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16)) {
                goto LABEL_84;
              }
              uint64_t v39 = (uint64_t *)(v43 + 8);
              uint64_t v40 = (uint64_t *)(v44 + 8);
              char v38 = 1;
            }
            if (v25) {
              goto LABEL_84;
            }
LABEL_83:
            float v118 = 0.0;
            float v118 = *(float *)(v20 + 40);
            float v117 = 0.0;
            float v117 = *(float *)(v35 + 32);
            if (v118 != v117) {
LABEL_84:
            }
              unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          int v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17) {
            unint64_t v116 = v116 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          }
          if (v45 != v17 + 1) {
            unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          uint64_t v109 = *(void *)v20;
          LODWORD(v110) = v25;
          if (&v109 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v111, *(void *)(v20 + 24), v20 + 16);
            int v45 = *(_DWORD *)(v20 + 48);
          }
          int v114 = *(_DWORD *)(v20 + 40);
          int v115 = v45;
          if (v11)
          {
            std::vector<unsigned int>::pointer end = v108.__end_;
            if (v108.__end_ >= v108.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v108.__begin_;
              int64_t v49 = v108.__end_ - v108.__begin_;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                goto LABEL_213;
              }
              int64_t v51 = (char *)v108.__end_cap_.__value_ - (char *)v108.__begin_;
              if (((char *)v108.__end_cap_.__value_ - (char *)v108.__begin_) >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                unint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v108.__end_cap_, v52);
                std::vector<unsigned int>::pointer begin = v108.__begin_;
                std::vector<unsigned int>::pointer end = v108.__end_;
              }
              else
              {
                unint64_t v53 = 0;
              }
              uint64_t v54 = (unsigned int *)&v53[4 * v49];
              *uint64_t v54 = *(_DWORD *)v20;
              uint64_t v47 = v54 + 1;
              while (end != begin)
              {
                unsigned int v55 = *--end;
                *--uint64_t v54 = v55;
              }
              v108.__begin_ = v54;
              v108.__end_ = v47;
              v108.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v108.__end_ = *(_DWORD *)v20;
              uint64_t v47 = end + 1;
            }
            v108.__end_ = v47;
          }
          if (v14)
          {
            std::vector<unsigned int>::pointer v56 = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer v58 = v107.__begin_;
              int64_t v59 = v107.__end_ - v107.__begin_;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62) {
LABEL_213:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              int64_t v61 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                uint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v62);
                std::vector<unsigned int>::pointer v58 = v107.__begin_;
                std::vector<unsigned int>::pointer v56 = v107.__end_;
              }
              else
              {
                uint64_t v63 = 0;
              }
              float v64 = (unsigned int *)&v63[4 * v59];
              *float v64 = *(_DWORD *)(v20 + 4);
              uint64_t v57 = v64 + 1;
              while (v56 != v58)
              {
                unsigned int v65 = *--v56;
                *--float v64 = v65;
              }
              v107.__begin_ = v64;
              v107.__end_ = v57;
              v107.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *v107.__end_ = *(_DWORD *)(v20 + 4);
              uint64_t v57 = v56 + 1;
            }
            v107.__end_ = v57;
          }
          if (v99)
          {
            (*(void (**)(uint64_t))(*(void *)v99 + 40))(v99);
            char v19 = 0;
          }
          else
          {
            char v19 = 0;
            ++v103;
          }
        }
      }
LABEL_17:
      uint64_t v17 = v106;
      goto LABEL_18;
    }
    if (v104) {
      (*(void (**)(void))(*(void *)v104 + 8))();
    }
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
    {
      unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    if (v108.__begin_)
    {
      v108.__end_ = v108.__begin_;
      operator delete(v108.__begin_);
    }
    unint64_t v8 = v116;
LABEL_211:
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1B1F69B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One(void)::one;
}

void sub_1B1F69CF0(_Unwind_Exception *a1)
{
}

void fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F6A59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
    **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

unint64_t fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v34);
  uint64_t v6 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  if (v34) {
    uint64_t v7 = v35[2] + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (*(_DWORD *)v6) {
    uint64_t v8 = *(void *)(v6 + 24) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 == v8)
  {
    char v9 = 0;
    uint64_t v10 = v35[1];
    uint64_t v11 = (uint64_t *)(v6 + 16);
    if (v34) {
      BOOL v12 = v34 == *(_DWORD *)v6;
    }
    else {
      BOOL v12 = 0;
    }
    int v13 = !v12;
    int v14 = v13 ^ 1;
    while (1)
    {
      uint64_t v15 = *v11;
      if ((v9 & 1) == 0 && !v14) {
        break;
      }
      if ((void *)v10 == v35) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16)) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void *)(v10 + 8);
      uint64_t v11 = (uint64_t *)(v15 + 8);
      char v9 = 1;
    }
    if (v34) {
      goto LABEL_21;
    }
LABEL_42:
    float v38 = v36;
    float v37 = 0.0;
    float v37 = *(float *)(v6 + 32);
    float v32 = v36;
    float v33 = v37;
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      unint64_t v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  unint64_t v17 = a2;
  *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  uint64_t v18 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17)) {
    goto LABEL_36;
  }
  char v19 = 0;
  uint64_t v20 = *(void **)(a1 + 80);
  uint64_t v21 = v20[1];
  uint64_t v22 = **(void **)(a1 + 16);
  unint64_t v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    unint64_t v24 = *v23--;
    v19 |= *(void *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while (v24 != a2);
  int v25 = *(void **)a1;
  uint64_t v26 = **(void **)(a1 + 72);
  for (uint64_t i = (int *)(v21 - 4); ; --i)
  {
    unint64_t v28 = *i;
    if (v25) {
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    }
    unint64_t result = v28 >> 6;
    uint64_t v29 = 1 << v28;
    if ((v19 & 1) == 0) {
      break;
    }
    *(void *)(v22 + 8 * result) |= v29;
    *(void *)(v26 + 8 * result) &= ~v29;
    if (v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(void *)(v26 + 8 * result) &= ~v29;
  if (v28 != a2) {
    goto LABEL_33;
  }
  v20[1] = i;
  **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    uint64_t v30 = **(void **)(a1 + 16);
    if ((*(void *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17)) {
      *(void *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3)) {
      *(_DWORD *)(v18 + 4 * a3) = v31;
    }
  }
  return result;
}

void sub_1B1F6AA58(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36D88;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36D88;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36D88;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1F6AB08(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37D40;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1F6AC20(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37D40;
  uint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      BOOL v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::vector<unsigned int>::pointer v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1F6B068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::One()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::One(void)::one;
}

void sub_1B1F6B150(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::One()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::One(void)::one;
}

void sub_1B1F6B24C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)0>::One()
{
  {
    operator new();
  }
  return fst::StringWeight<int,(fst::StringType)0>::One(void)::one;
}

void sub_1B1F6B314(_Unwind_Exception *a1)
{
}

void fst::ArcBuffer<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    uint64_t v10 = v27 + 56 * v28;
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(void *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v25 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v25 = v13;
    }
    *(void *)(a1 + 8) = v25;
    uint64_t v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(uint64_t **)(a1 + 16);
    uint64_t v15 = *(uint64_t **)a1;
  }
  *(void *)(a1 + ++*(void *)(result + 24) = &v14[7 * v13];
  uint64_t v16 = v26;
  uint64_t v17 = v27;
  unint64_t v19 = v28;
  uint64_t v18 = v29;
  if (v29) {
    ++*v29;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    uint64_t v24 = v15 - 7;
    uint64_t *v24 = *(void *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(void *)(v23 + 24), v23 + 16);
    }
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 56 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B1F6B5D8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)uint64_t v35 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  uint64_t v6 = -1;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = -1;
  uint64_t v39 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v40 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v40 = (int)fst::CountStates<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v43;
    if (v43 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v9, (uint64_t)v34);
  uint64_t v31 = v9;
  uint64_t v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v10 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(__p);
      std::__list_imp<char *>::clear(&__p[0].__r_.__value_.__l.__size_);
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      uint64_t v14 = *(void *)(*(void *)(a1[1] + 64) + 8 * v12);
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v15 = *(void *)(v14 + 64);
      if (v15 == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(_DWORD **)(v14 + 56);
      }
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (v15 - v16) / 56;
        }
        unint64_t v19 = v17;
        do
        {
          int v20 = *v19;
          v19 += 14;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(v17 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          uint64_t v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    int v21 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    uint64_t v22 = (void *)fst::cerr(v21);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_30:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_33;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      uint64_t updated = 1;
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v29 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    long long v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_30;
  }
  uint64_t v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_33:
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[1]);
  }
  if (SHIBYTE(v36[0]) < 0) {
    operator delete(v35[0]);
  }
  return updated;
}

void sub_1B1F6BAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      uint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      unint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B1F6C138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Type()
{
  {
    operator new();
  }
  return fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Type(void)::type;
}

void sub_1B1F6C22C(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1F6C57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void *fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::SetFinal(void *a1, int a2, int *a3)
{
  uint64_t v6 = *(int **)(a1[8] + 8 * a2);
  int v18 = *v6;
  std::list<int>::list(v19, (uint64_t)(v6 + 2));
  int v20 = v6[8];
  int v15 = *a3;
  std::list<int>::list(v16, (uint64_t)(a3 + 2));
  int v17 = a3[8];
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::SetFinal((uint64_t)a1, a2, &v15);
  std::__list_imp<char *>::clear(v16);
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  int v12 = v18;
  std::list<int>::list(v13, (uint64_t)v19);
  int v14 = v20;
  int v9 = *a3;
  std::list<int>::list(v10, (uint64_t)(a3 + 2));
  int v11 = a3[8];
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>(v7, &v12, &v9);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(v13);
  return std::__list_imp<char *>::clear(v19);
}

void sub_1B1F6C758(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SetFinalProperties<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>(unint64_t a1, int *a2, int *a3)
{
  uint64_t v6 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v7 = *a2;
  if (*a2) {
    uint64_t v8 = *((void *)a2 + 3) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (*(_DWORD *)v6) {
    uint64_t v9 = *(void *)(v6 + 24) + 1;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8 != v9) {
    goto LABEL_22;
  }
  char v10 = 0;
  int v11 = (uint64_t *)(a2 + 4);
  int v12 = (uint64_t *)(v6 + 16);
  BOOL v13 = v7 && v7 == *(_DWORD *)v6;
  BOOL v14 = !v13;
  int v15 = !v14;
  while (1)
  {
    uint64_t v16 = *v11;
    uint64_t v17 = *v12;
    if ((v10 & 1) == 0 && !v15) {
      break;
    }
    if ((int *)v16 == a2 + 2) {
      goto LABEL_21;
    }
    if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16)) {
      goto LABEL_22;
    }
    int v11 = (uint64_t *)(v16 + 8);
    int v12 = (uint64_t *)(v17 + 8);
    char v10 = 1;
  }
  if (v7) {
    goto LABEL_22;
  }
LABEL_21:
  if (*((float *)a2 + 8) != *(float *)(v6 + 32))
  {
LABEL_22:
    uint64_t v18 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    int v19 = *a2;
    if (*a2) {
      uint64_t v20 = *((void *)a2 + 3) + 1;
    }
    else {
      uint64_t v20 = 0;
    }
    if (*(_DWORD *)v18) {
      uint64_t v21 = *(void *)(v18 + 24) + 1;
    }
    else {
      uint64_t v21 = 0;
    }
    if (v20 != v21) {
      goto LABEL_43;
    }
    char v22 = 0;
    char v23 = (uint64_t *)(a2 + 4);
    int v24 = (uint64_t *)(v18 + 16);
    BOOL v25 = v19 && v19 == *(_DWORD *)v18;
    BOOL v26 = !v25;
    int v27 = !v26;
    while (1)
    {
      uint64_t v28 = *v23;
      uint64_t v29 = *v24;
      if ((v22 & 1) == 0 && !v27) {
        break;
      }
      if ((int *)v28 == a2 + 2) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v29 + 16)) {
        goto LABEL_43;
      }
      char v23 = (uint64_t *)(v28 + 8);
      int v24 = (uint64_t *)(v29 + 8);
      char v22 = 1;
    }
    if (v19) {
      goto LABEL_43;
    }
LABEL_42:
    if (*((float *)a2 + 8) != *(float *)(v18 + 32)) {
LABEL_43:
    }
      a1 &= ~0x100000000uLL;
  }
  uint64_t v30 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v31 = *a3;
  if (*a3) {
    uint64_t v32 = *((void *)a3 + 3) + 1;
  }
  else {
    uint64_t v32 = 0;
  }
  if (*(_DWORD *)v30) {
    uint64_t v33 = *(void *)(v30 + 24) + 1;
  }
  else {
    uint64_t v33 = 0;
  }
  if (v32 != v33) {
    goto LABEL_65;
  }
  char v34 = 0;
  long long v35 = (uint64_t *)(a3 + 4);
  long long v36 = (uint64_t *)(v30 + 16);
  BOOL v37 = v31 && v31 == *(_DWORD *)v30;
  BOOL v38 = !v37;
  int v39 = !v38;
  while (1)
  {
    uint64_t v40 = *v35;
    uint64_t v41 = *v36;
    if ((v34 & 1) == 0 && !v39) {
      break;
    }
    if ((int *)v40 == a3 + 2) {
      goto LABEL_64;
    }
    if (*(_DWORD *)(v40 + 16) != *(_DWORD *)(v41 + 16)) {
      goto LABEL_65;
    }
    long long v35 = (uint64_t *)(v40 + 8);
    long long v36 = (uint64_t *)(v41 + 8);
    char v34 = 1;
  }
  if (v31) {
    goto LABEL_65;
  }
LABEL_64:
  if (*((float *)a3 + 8) != *(float *)(v30 + 32))
  {
LABEL_65:
    uint64_t v42 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    int v43 = *a3;
    if (*a3) {
      uint64_t v44 = *((void *)a3 + 3) + 1;
    }
    else {
      uint64_t v44 = 0;
    }
    if (*(_DWORD *)v42) {
      uint64_t v45 = *(void *)(v42 + 24) + 1;
    }
    else {
      uint64_t v45 = 0;
    }
    if (v44 != v45) {
      goto LABEL_86;
    }
    char v46 = 0;
    uint64_t v47 = (uint64_t *)(a3 + 4);
    BOOL v48 = (uint64_t *)(v42 + 16);
    BOOL v49 = v43 && v43 == *(_DWORD *)v42;
    BOOL v50 = !v49;
    int v51 = !v50;
    while (1)
    {
      uint64_t v52 = *v47;
      uint64_t v53 = *v48;
      if ((v46 & 1) == 0 && !v51) {
        break;
      }
      if ((int *)v52 == a3 + 2) {
        goto LABEL_85;
      }
      if (*(_DWORD *)(v52 + 16) != *(_DWORD *)(v53 + 16)) {
        goto LABEL_86;
      }
      uint64_t v47 = (uint64_t *)(v52 + 8);
      BOOL v48 = (uint64_t *)(v53 + 8);
      char v46 = 1;
    }
    if (v43) {
      goto LABEL_86;
    }
LABEL_85:
    if (*((float *)a3 + 8) != *(float *)(v42 + 32)) {
LABEL_86:
    }
      a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddArc(void *a1, int a2, int *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 56)) {
    int v7 = 0;
  }
  else {
    int v7 = (_DWORD *)(v6 - 56);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddArc(v9, a3);
}

uint64_t fst::AddArcProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(unint64_t a1, int a2, int *a3, _DWORD *a4)
{
  int v6 = *a3;
  int v7 = a3[1];
  unint64_t v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*a3 == v7) {
    unint64_t v8 = a1;
  }
  unint64_t v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7) {
    unint64_t v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (!v6) {
    unint64_t v8 = v9;
  }
  if (v7) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (a4)
  {
    if (*a4 <= v6) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (a4[1] > v7) {
      unint64_t v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
    else {
      unint64_t v10 = v11;
    }
  }
  uint64_t v12 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v13 = a3[2];
  if (v13) {
    uint64_t v14 = *((void *)a3 + 4) + 1;
  }
  else {
    uint64_t v14 = 0;
  }
  if (*(_DWORD *)v12) {
    uint64_t v15 = *(void *)(v12 + 24) + 1;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v14 != v15) {
    goto LABEL_38;
  }
  char v16 = 0;
  uint64_t v17 = (uint64_t *)(a3 + 6);
  uint64_t v18 = (uint64_t *)(v12 + 16);
  BOOL v19 = v13 && v13 == *(_DWORD *)v12;
  BOOL v20 = !v19;
  int v21 = !v20;
  while (1)
  {
    uint64_t v22 = *v17;
    uint64_t v23 = *v18;
    if ((v16 & 1) == 0 && !v21) {
      break;
    }
    if ((int *)v22 == a3 + 4) {
      goto LABEL_37;
    }
    if (*(_DWORD *)(v22 + 16) != *(_DWORD *)(v23 + 16)) {
      goto LABEL_38;
    }
    uint64_t v17 = (uint64_t *)(v22 + 8);
    uint64_t v18 = (uint64_t *)(v23 + 8);
    char v16 = 1;
  }
  if (v13) {
    goto LABEL_38;
  }
LABEL_37:
  if (*((float *)a3 + 10) != *(float *)(v12 + 32))
  {
LABEL_38:
    uint64_t v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    int v25 = a3[2];
    if (v25) {
      uint64_t v26 = *((void *)a3 + 4) + 1;
    }
    else {
      uint64_t v26 = 0;
    }
    if (*(_DWORD *)v24) {
      uint64_t v27 = *(void *)(v24 + 24) + 1;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v26 != v27) {
      goto LABEL_59;
    }
    char v28 = 0;
    uint64_t v29 = (uint64_t *)(a3 + 6);
    uint64_t v30 = (uint64_t *)(v24 + 16);
    BOOL v31 = v25 && v25 == *(_DWORD *)v24;
    BOOL v32 = !v31;
    int v33 = !v32;
    while (1)
    {
      uint64_t v34 = *v29;
      uint64_t v35 = *v30;
      if ((v28 & 1) == 0 && !v33) {
        break;
      }
      if ((int *)v34 == a3 + 4) {
        goto LABEL_58;
      }
      if (*(_DWORD *)(v34 + 16) != *(_DWORD *)(v35 + 16)) {
        goto LABEL_59;
      }
      uint64_t v29 = (uint64_t *)(v34 + 8);
      uint64_t v30 = (uint64_t *)(v35 + 8);
      char v28 = 1;
    }
    if (v25) {
      goto LABEL_59;
    }
LABEL_58:
    if (*((float *)a3 + 10) != *(float *)(v24 + 32)) {
LABEL_59:
    }
      unint64_t v10 = v10 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (a3[12] <= a2) {
    unint64_t v36 = v10 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  else {
    unint64_t v36 = v10;
  }
  if ((v36 & 0x4000000000) != 0) {
    return v36 & 0x5D7FFEB0007 | 0x2800000000;
  }
  else {
    return v36 & 0x5D7FFEB0007;
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v35, v5, &__x);
  int v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v35.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v35.__begin_[v12] == -1)
      {
        fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(void *)(v11 + 8 * v12));
      }
      else
      {
        v35.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      int64x2_t v17 = *(int64x2_t *)(v16 + 40);
      uint64_t v18 = *(void *)(v16 + 64) - *(void *)(v16 + 56);
      if (v18) {
        uint64_t v19 = *(void *)(v16 + 56);
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = (int *)(v19 + 48);
        uint64_t v23 = v19 + 16;
        do
        {
          int v24 = v35.__begin_[*v22];
          if (v24 == -1)
          {
            uint64_t v27 = *((void *)v22 - 6);
            v28.i64[0] = v27;
            v28.i64[1] = HIDWORD(v27);
            int64x2_t v17 = vaddq_s64(v17, vceqzq_s64(v28));
          }
          else
          {
            int *v22 = v24;
            if (v20 != v21)
            {
              int64x2_t v32 = v17;
              uint64_t v25 = v19 + 56 * v21;
              *(void *)uint64_t v25 = *((void *)v22 - 6);
              *(_DWORD *)(v25 + 8) = *(v22 - 10);
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v25 + 16), *((void *)v22 - 3), v23);
              uint64_t v26 = v19 + 56 * v21;
              *(_DWORD *)(v26 + 40) = *(v22 - 2);
              *(_DWORD *)(v26 + 48) = *v22;
              uint64_t v14 = *v4;
              int64x2_t v17 = v32;
            }
            ++v21;
          }
          ++v20;
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          unint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v16 + 64) - *(void *)(v16 + 56)) >> 3);
          v22 += 14;
          v23 += 56;
        }
        while (v20 < v29);
        int64x2_t v33 = v17;
      }
      else
      {
        int64x2_t v33 = *(int64x2_t *)(v16 + 40);
        uint64_t v21 = 0;
        unint64_t v29 = 0;
      }
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs((void *)v16, v29 - v21);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 40) = v33;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v30 = *(int *)(a1 + 88);
  if (v30 == -1)
  {
    BOOL v31 = v35.__begin_;
    if (!v35.__begin_) {
      return;
    }
  }
  else
  {
    BOOL v31 = v35.__begin_;
    *(_DWORD *)(a1 + 88) = v35.__begin_[v30];
  }
  v35.__end_ = v31;
  operator delete(v31);
}

void sub_1B1F6D000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::DeleteArcs(void *a1, int a2)
{
  BOOL v3 = *(void **)(a1[8] + 8 * a2);
  v3[5] = 0;
  v3[6] = 0;
  uint64_t v5 = v3[7];
  uint64_t v4 = v3[8];
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v4 - 56;
      std::__list_imp<char *>::clear((void *)(v4 - 40));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  v3[8] = v5;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 64)
                                                             - *(void *)(*(void *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 56) + 56 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 56);
  uint64_t v6 = (int *)(v5 + 56 * v4);
  int v7 = *v6;
  int v8 = v6[1];
  if (*v6 != v8) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v7)
  {
    if (!v8)
    {
      unint64_t v9 = *(unint64_t **)(a1 + 16);
      unint64_t v10 = *v9;
LABEL_8:
      unint64_t *v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    unint64_t v9 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      unint64_t v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      unint64_t *v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  uint64_t v12 = v5 + 56 * v4;
  uint64_t v13 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v16 = *(_DWORD *)(v12 + 8);
  unint64_t v15 = (int *)(v12 + 8);
  int v14 = v16;
  if (v16) {
    uint64_t v17 = *((void *)v15 + 3) + 1;
  }
  else {
    uint64_t v17 = 0;
  }
  if (*(_DWORD *)v13) {
    uint64_t v18 = *(void *)(v13 + 24) + 1;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v18) {
    goto LABEL_30;
  }
  char v19 = 0;
  unint64_t v20 = (uint64_t *)(v15 + 4);
  uint64_t v21 = (uint64_t *)(v13 + 16);
  BOOL v22 = v14 && v14 == *(_DWORD *)v13;
  BOOL v23 = !v22;
  int v24 = !v23;
  while (1)
  {
    uint64_t v25 = *v20;
    uint64_t v26 = *v21;
    if ((v19 & 1) == 0 && !v24) {
      break;
    }
    if ((int *)v25 == v15 + 2) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v26 + 16)) {
      goto LABEL_30;
    }
    unint64_t v20 = (uint64_t *)(v25 + 8);
    uint64_t v21 = (uint64_t *)(v26 + 8);
    char v19 = 1;
  }
  if (v14) {
    goto LABEL_30;
  }
LABEL_29:
  if (*((float *)v15 + 8) != *(float *)(v13 + 32))
  {
LABEL_30:
    uint64_t v27 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    int v28 = *v15;
    if (*v15) {
      uint64_t v29 = *((void *)v15 + 3) + 1;
    }
    else {
      uint64_t v29 = 0;
    }
    if (*(_DWORD *)v27) {
      uint64_t v30 = *(void *)(v27 + 24) + 1;
    }
    else {
      uint64_t v30 = 0;
    }
    if (v29 != v30) {
      goto LABEL_51;
    }
    char v31 = 0;
    int64x2_t v32 = (uint64_t *)(v15 + 4);
    int64x2_t v33 = (uint64_t *)(v27 + 16);
    BOOL v34 = v28 && v28 == *(_DWORD *)v27;
    BOOL v35 = !v34;
    int v36 = !v35;
    while (1)
    {
      uint64_t v37 = *v32;
      uint64_t v38 = *v33;
      if ((v31 & 1) == 0 && !v36) {
        break;
      }
      if ((int *)v37 == v15 + 2) {
        goto LABEL_50;
      }
      if (*(_DWORD *)(v37 + 16) != *(_DWORD *)(v38 + 16)) {
        goto LABEL_51;
      }
      int64x2_t v32 = (uint64_t *)(v37 + 8);
      int64x2_t v33 = (uint64_t *)(v38 + 8);
      char v31 = 1;
    }
    if (v28) {
      goto LABEL_51;
    }
LABEL_50:
    if (*((float *)v15 + 8) != *(float *)(v27 + 32)) {
LABEL_51:
    }
      **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  uint64_t v39 = 0x30FC30007;
  if (*(_DWORD *)a2 == *v6 && *(_DWORD *)(a2 + 4) == v6[1] && *(_DWORD *)(a2 + 48) == *(_DWORD *)(v5 + 56 * v4 + 48)) {
    uint64_t v39 = 0x3FFFFFFF0007;
  }
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArc(*(uint64_t **)(a1 + 8), a2, *(void *)(a1 + 24));
  int v40 = *(_DWORD *)a2;
  int v41 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v41) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v40)
  {
    if (!v41)
    {
      uint64_t v42 = *(unint64_t **)(a1 + 16);
      unint64_t v43 = *v42;
LABEL_63:
      *uint64_t v42 = v43 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    uint64_t v42 = *(unint64_t **)(a1 + 16);
    unint64_t v44 = *v42 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *uint64_t v42 = v44;
    if (!v41)
    {
      unint64_t v43 = v44 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *uint64_t v42 = v43;
      goto LABEL_63;
    }
  }
  uint64_t result = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v46 = *(_DWORD *)(a2 + 8);
  if (v46) {
    uint64_t v47 = *(void *)(a2 + 32) + 1;
  }
  else {
    uint64_t v47 = 0;
  }
  if (*(_DWORD *)result) {
    uint64_t v48 = *(void *)(result + 24) + 1;
  }
  else {
    uint64_t v48 = 0;
  }
  if (v47 != v48) {
    goto LABEL_85;
  }
  char v49 = 0;
  BOOL v50 = (uint64_t *)(a2 + 24);
  int v51 = (uint64_t *)(result + 16);
  BOOL v52 = v46 && v46 == *(_DWORD *)result;
  BOOL v53 = !v52;
  int v54 = !v53;
  while (1)
  {
    uint64_t v55 = *v50;
    uint64_t v56 = *v51;
    if ((v49 & 1) == 0 && !v54) {
      break;
    }
    if (v55 == a2 + 16) {
      goto LABEL_84;
    }
    if (*(_DWORD *)(v55 + 16) != *(_DWORD *)(v56 + 16)) {
      goto LABEL_85;
    }
    BOOL v50 = (uint64_t *)(v55 + 8);
    int v51 = (uint64_t *)(v56 + 8);
    char v49 = 1;
  }
  if (v46) {
    goto LABEL_85;
  }
LABEL_84:
  if (*(float *)(a2 + 40) != *(float *)(result + 32))
  {
LABEL_85:
    uint64_t result = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    int v57 = *(_DWORD *)(a2 + 8);
    if (v57) {
      uint64_t v58 = *(void *)(a2 + 32) + 1;
    }
    else {
      uint64_t v58 = 0;
    }
    if (*(_DWORD *)result) {
      uint64_t v59 = *(void *)(result + 24) + 1;
    }
    else {
      uint64_t v59 = 0;
    }
    if (v58 != v59) {
      goto LABEL_106;
    }
    char v60 = 0;
    int64_t v61 = (uint64_t *)(a2 + 24);
    unint64_t v62 = (uint64_t *)(result + 16);
    BOOL v63 = v57 && v57 == *(_DWORD *)result;
    BOOL v64 = !v63;
    int v65 = !v64;
    while (1)
    {
      uint64_t v66 = *v61;
      uint64_t v67 = *v62;
      if ((v60 & 1) == 0 && !v65) {
        break;
      }
      if (v66 == a2 + 16) {
        goto LABEL_105;
      }
      if (*(_DWORD *)(v66 + 16) != *(_DWORD *)(v67 + 16)) {
        goto LABEL_106;
      }
      int64_t v61 = (uint64_t *)(v66 + 8);
      unint64_t v62 = (uint64_t *)(v67 + 8);
      char v60 = 1;
    }
    if (v57) {
      goto LABEL_106;
    }
LABEL_105:
    if (*(float *)(a2 + 40) != *(float *)(result + 32)) {
LABEL_106:
    }
      **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(void **)(a1 + 16) &= v39;
  return result;
}

void *fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1B1F6D640(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1B1F6D6B0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = 0;
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v16 = (uint64_t)&v16;
  uint64_t v17 = &v16;
  uint64_t v18 = 0;
  int v7 = a1 + 2;
  int v8 = (uint64_t *)(a1 + 4);
  unint64_t v9 = &v16;
LABEL_2:
  uint64_t v10 = *v8;
  int v11 = v4;
  while (1)
  {
    char v12 = v6;
    if (v6)
    {
      if ((_DWORD *)v10 == v7) {
        break;
      }
      int v4 = *(_DWORD *)(v10 + 16);
      goto LABEL_7;
    }
    int v4 = *a1;
    if (!*a1) {
      break;
    }
LABEL_7:
    if (v11)
    {
      uint64_t v13 = operator new(0x18uLL);
      v13[4] = v11;
      *(void *)uint64_t v13 = &v16;
      *((void *)v13 + 1) = v9;
      uint64_t *v9 = (uint64_t)v13;
      ++v5;
      unint64_t v9 = (uint64_t *)v13;
      uint64_t v17 = (uint64_t *)v13;
      uint64_t v18 = v5;
    }
    char v6 = 1;
    int v11 = v4;
    if (v12)
    {
      int v8 = (uint64_t *)(v10 + 8);
      goto LABEL_2;
    }
  }
  int v14 = a1[8];
  *(_DWORD *)a2 = v11;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)&v16);
  *(_DWORD *)(a2 + 32) = v14;
  return std::__list_imp<char *>::clear(&v16);
}

void sub_1B1F6D7C8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::Times<int,(fst::StringType)0>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 && (*a1 == -2 ? (BOOL v6 = *((void *)a1 + 3) == 0) : (BOOL v6 = 0), v6)
    || *(_DWORD *)a2 && (*(_DWORD *)a2 == -2 ? (BOOL v7 = *(void *)(a2 + 24) == 0) : (BOOL v7 = 0), v7))
  {
    unint64_t v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)0>::NoWeight();
  }
  else
  {
    uint64_t v8 = fst::StringWeight<int,(fst::StringType)0>::Zero();
    int v9 = *a1;
    if (*a1) {
      uint64_t v10 = *((void *)a1 + 3) + 1;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(_DWORD *)v8) {
      uint64_t v11 = *(void *)(v8 + 24) + 1;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v10 != v11) {
      goto LABEL_32;
    }
    char v12 = 0;
    uint64_t v13 = (uint64_t *)(a1 + 4);
    int v14 = (uint64_t *)(v8 + 16);
    BOOL v15 = v9 && v9 == *(_DWORD *)v8;
    BOOL v16 = !v15;
    int v17 = !v16;
    while (1)
    {
      uint64_t v18 = *v13;
      uint64_t v19 = *v14;
      if ((v12 & 1) == 0 && !v17) {
        break;
      }
      if ((int *)v18 == a1 + 2) {
        goto LABEL_61;
      }
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16)) {
        goto LABEL_32;
      }
      uint64_t v13 = (uint64_t *)(v18 + 8);
      int v14 = (uint64_t *)(v19 + 8);
      char v12 = 1;
    }
    if (v9)
    {
LABEL_32:
      uint64_t v21 = fst::StringWeight<int,(fst::StringType)0>::Zero();
      int v22 = *(_DWORD *)a2;
      if (*(_DWORD *)a2) {
        uint64_t v23 = *(void *)(a2 + 24) + 1;
      }
      else {
        uint64_t v23 = 0;
      }
      if (*(_DWORD *)v21) {
        uint64_t v24 = *(void *)(v21 + 24) + 1;
      }
      else {
        uint64_t v24 = 0;
      }
      if (v23 != v24) {
        goto LABEL_52;
      }
      char v25 = 0;
      uint64_t v26 = (uint64_t *)(a2 + 16);
      uint64_t v27 = (uint64_t *)(v21 + 16);
      BOOL v28 = v22 && v22 == *(_DWORD *)v21;
      BOOL v29 = !v28;
      int v30 = !v29;
      while (1)
      {
        uint64_t v31 = *v26;
        uint64_t v32 = *v27;
        if ((v25 & 1) == 0 && !v30) {
          break;
        }
        if (v31 == a2 + 8) {
          goto LABEL_61;
        }
        if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16)) {
          goto LABEL_52;
        }
        uint64_t v26 = (uint64_t *)(v31 + 8);
        uint64_t v27 = (uint64_t *)(v32 + 8);
        char v25 = 1;
      }
      if (v22)
      {
LABEL_52:
        *(_DWORD *)a3 = *a1;
        uint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(a1 + 2));
        char v34 = 0;
        for (uint64_t i = (uint64_t *)(a2 + 16); ; uint64_t i = (uint64_t *)(v36 + 8))
        {
          uint64_t v36 = *i;
          do
          {
            char v37 = v34;
            if (v34)
            {
              if (v36 == a2 + 8) {
                return result;
              }
              int v38 = *(_DWORD *)(v36 + 16);
            }
            else
            {
              int v38 = *(_DWORD *)a2;
              if (!*(_DWORD *)a2) {
                return result;
              }
            }
            uint64_t result = fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a3, v38);
            char v34 = 1;
          }
          while ((v37 & 1) == 0);
        }
      }
    }
LABEL_61:
    unint64_t v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)0>::Zero();
  }
  *(_DWORD *)a3 = *v20;
  return std::list<int>::list((void *)(a3 + 8), (uint64_t)(v20 + 2));
}

void sub_1B1F6D9F8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)0>::NoWeight()
{
  {
    operator new();
  }
  return fst::StringWeight<int,(fst::StringType)0>::NoWeight(void)::no_weight;
}

void sub_1B1F6DA88(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C40CA22B68ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::ProductWeight(a1, &v6, a3);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1B1F6DB28(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::ProductWeight(uint64_t a1, int *a2, float a3)
{
  int v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  *(_DWORD *)a1 = v6;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)v7);
  *(float *)(a1 + 32) = a3;
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1B1F6DBAC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      uint64_t v6 = 0;
      v5[0] = v3;
      v5[1] = 0;
      void v5[2] = 0;
      void v5[3] = &v6;
      fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(a2, (uint64_t)v5);
    }
    operator new();
  }
  operator new();
}

void sub_1B1F6E284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  int v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  uint64_t v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a3, 4 * v12);
  }
  unsigned int v28 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v26);
  while (1)
  {
    uint64_t result = v26;
    if (!v26)
    {
      if ((int)v28 >= v27) {
        return result;
      }
LABEL_11:
      uint64_t v15 = v28;
      goto LABEL_12;
    }
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
    uint64_t result = v26;
    if (v14) {
      break;
    }
    if (!v26) {
      goto LABEL_11;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v26 + 24))();
LABEL_12:
    unint64_t v25 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v15, v23);
    uint64_t v16 = (int)v15;
    while (1)
    {
      if (!v23[0])
      {
        if (v25 >= v23[2]) {
          goto LABEL_32;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v23[0] + 24))(v23[0])) {
        break;
      }
      if (v23[0])
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v23[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = v23[1] + 56 * v25;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 48)))
      {
        uint64_t v19 = *(_DWORD **)a3;
        if (!a4
          || (uint64_t v20 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One(),
              fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::operator()(a4, v17 + 8, v20)))
        {
          int v21 = 1;
          goto LABEL_25;
        }
        if ((v19[v18] | 2) == 2)
        {
          int v21 = 3;
LABEL_25:
          v19[v18] = v21;
        }
        *a5 = 0;
      }
      *a6 = 0;
      if (v23[0]) {
        (*(void (**)(void))(*(void *)v23[0] + 40))(v23[0]);
      }
      else {
        ++v25;
      }
    }
    if (v23[0])
    {
      (*(void (**)(void))(*(void *)v23[0] + 8))();
      goto LABEL_34;
    }
LABEL_32:
    if (v24) {
      --*v24;
    }
LABEL_34:
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 32))(v26);
    }
    else {
      ++v28;
    }
  }
  if (v26) {
    return (*(uint64_t (**)(void))(*(void *)v26 + 8))();
  }
  return result;
}

void sub_1B1F6E6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  unint64_t v2 = &v3;
  fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::TopOrderVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>();
}

void sub_1B1F6E8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::TopOrderVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>()
{
}

void sub_1B1F6F1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Type()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Type(void)::type;
}

void sub_1B1F6F2D4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst::Plus<int>(a2, a3, (uint64_t)&v30);
  float v5 = *(float *)(a2 + 32);
  float v6 = *(float *)(a3 + 32);
  if (v5 != INFINITY)
  {
    if (v6 == INFINITY)
    {
      float v6 = *(float *)(a2 + 32);
    }
    else if (v5 <= v6)
    {
      float v8 = expf(-(float)(v6 - v5));
      float v6 = v5 - logf(v8 + 1.0);
    }
    else
    {
      float v7 = expf(-(float)(v5 - v6));
      float v6 = v6 - logf(v7 + 1.0);
    }
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v27, (int *)&v30, v6);
  std::__list_imp<char *>::clear(v31);
  if (v27) {
    uint64_t v9 = v28[2] + 1;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    uint64_t v11 = *(void *)(a2 + 24) + 1;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v9 != v11) {
    goto LABEL_42;
  }
  uint64_t v12 = v28[1];
  uint64_t v13 = *(void *)(a2 + 16);
  if (v27) {
    BOOL v14 = v27 == v10;
  }
  else {
    BOOL v14 = 0;
  }
  int v15 = !v14;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v15 != 1)
  {
    while ((void *)v12 != v28)
    {
      if (*(_DWORD *)(v12 + 16) != *(_DWORD *)(v16 + 16)) {
        goto LABEL_42;
      }
      uint64_t v12 = *(void *)(v12 + 8);
      uint64_t v16 = *(void *)(v16 + 8);
    }
  }
  else if (v27)
  {
LABEL_42:
    BOOL v25 = 0;
    goto LABEL_43;
  }
  float v30 = v29;
  float v32 = 0.0;
  float v17 = *(float *)(a2 + 32);
  float v32 = v17;
  if (v29 != v17) {
    goto LABEL_42;
  }
  if (*(_DWORD *)a3) {
    uint64_t v18 = *(void *)(a3 + 24) + 1;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v9 == v18)
  {
    char v19 = 0;
    uint64_t v20 = (uint64_t *)(a3 + 16);
    if (v10) {
      BOOL v21 = v10 == *(_DWORD *)a3;
    }
    else {
      BOOL v21 = 0;
    }
    int v22 = !v21;
    int v23 = v22 ^ 1;
    while (1)
    {
      uint64_t v24 = *v20;
      if ((v19 & 1) == 0 && !v23) {
        break;
      }
      if (v13 == a2 + 8) {
        goto LABEL_46;
      }
      if (*(_DWORD *)(v13 + 16) != *(_DWORD *)(v24 + 16)) {
        goto LABEL_45;
      }
      uint64_t v13 = *(void *)(v13 + 8);
      uint64_t v20 = (uint64_t *)(v24 + 8);
      char v19 = 1;
    }
    if (v10) {
      goto LABEL_45;
    }
LABEL_46:
    float v30 = v17;
    float v32 = 0.0;
    float v32 = *(float *)(a3 + 32);
    BOOL v25 = v17 != v32;
  }
  else
  {
LABEL_45:
    BOOL v25 = 1;
  }
LABEL_43:
  std::__list_imp<char *>::clear(v28);
  return v25;
}

void sub_1B1F6F544(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B1F6F7D8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::ShortestDistanceState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::ShortestDistance(void *a1)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) != -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v2 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    char v3 = (void *)fst::cerr(v2);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ShortestDistance: Weight needs to be right distributive: ", 57);
    uint64_t v5 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Type();
    int v6 = *(char *)(v5 + 23);
    if (v6 >= 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = *(void *)v5;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      uint64_t v8 = *(void *)(v5 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_15;
  }
  if ((*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
LABEL_15:
  }
    *((unsigned char *)a1 + 116) = 1;
}

void sub_1B1F6F930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  char v3 = result;
  uint64_t v4 = result[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *result) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    return std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__append(result, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *result + 40 * a2;
    if (v4 != v8)
    {
      do
      {
        uint64_t v9 = v4 - 40;
        uint64_t result = std::__list_imp<char *>::clear((void *)(v4 - 32));
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    v3[1] = v8;
  }
  return result;
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::NoWeight()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::NoWeight(void)::no_weight;
}

void sub_1B1F6FAA4(_Unwind_Exception *a1)
{
}

uint64_t std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      *(_DWORD *)(a7 + v11 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((void *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1F6FBE4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 8;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__append(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = *(result - 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = v9 + 40 * a2;
      uint64_t v16 = 40 * a2;
      do
      {
        *(_DWORD *)uint64_t v9 = *a3;
        uint64_t result = std::list<int>::list((void *)(v9 + 8), (uint64_t)(a3 + 2));
        *(_DWORD *)(v9 + 32) = a3[8];
        v9 += 40;
        v16 -= 40;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    BOOL v21 = result;
    if (v13) {
      BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)result, v13);
    }
    else {
      BOOL v14 = 0;
    }
    float v17 = v14;
    uint64_t v18 = &v14[40 * v10];
    char v19 = v18;
    uint64_t v20 = &v14[40 * v13];
    std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__construct_at_end(&v17, a2, a3);
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, &v17);
    return (void *)std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_1B1F6FD60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__construct_at_end(void *result, uint64_t a2, _DWORD *a3)
{
  char v3 = result;
  uint64_t v4 = result[2];
  if (a2)
  {
    uint64_t v6 = v4 + 40 * a2;
    uint64_t v7 = (uint64_t)(a3 + 2);
    uint64_t v8 = 40 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = *a3;
      uint64_t result = std::list<int>::list((void *)(v4 + 8), v7);
      *(_DWORD *)(v4 + 32) = a3[8];
      v4 += 40;
      v8 -= 40;
    }
    while (v8);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1B1F6FE00(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::NoWeight()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1B1F6FEA4(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::NoWeight()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1B1F6FFA4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

void *std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__append(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = *(result - 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = v9 + 40 * a2;
      uint64_t v16 = 40 * a2;
      do
      {
        *(_DWORD *)uint64_t v9 = *a3;
        uint64_t result = std::list<int>::list((void *)(v9 + 8), (uint64_t)(a3 + 2));
        *(_DWORD *)(v9 + 32) = a3[8];
        v9 += 40;
        v16 -= 40;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    BOOL v21 = result;
    if (v13) {
      BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)result, v13);
    }
    else {
      BOOL v14 = 0;
    }
    float v17 = v14;
    uint64_t v18 = &v14[40 * v10];
    char v19 = v18;
    uint64_t v20 = &v14[40 * v13];
    std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__construct_at_end(&v17, a2, a3);
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, &v17);
    return (void *)std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_1B1F70144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__construct_at_end(void *result, uint64_t a2, _DWORD *a3)
{
  char v3 = result;
  uint64_t v4 = result[2];
  if (a2)
  {
    uint64_t v6 = v4 + 40 * a2;
    uint64_t v7 = (uint64_t)(a3 + 2);
    uint64_t v8 = 40 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = *a3;
      uint64_t result = std::list<int>::list((void *)(v4 + 8), v7);
      *(_DWORD *)(v4 + 32) = a3[8];
      v4 += 40;
      v8 -= 40;
    }
    while (v8);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1B1F701E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::NoWeight()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1B1F70288(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::NoWeight()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1B1F70388(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[40 * v9];
  *(_DWORD *)unint64_t v11 = *a2;
  std::list<int>::list((void *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1F704D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1B1F70544(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = 0;
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v16 = (uint64_t)&v16;
  float v17 = &v16;
  uint64_t v18 = 0;
  uint64_t v7 = a1 + 2;
  unint64_t v8 = (uint64_t *)(a1 + 4);
  unint64_t v9 = &v16;
LABEL_2:
  uint64_t v10 = *v8;
  int v11 = v4;
  while (1)
  {
    char v12 = v6;
    if (v6)
    {
      if ((_DWORD *)v10 == v7) {
        break;
      }
      int v4 = *(_DWORD *)(v10 + 16);
      goto LABEL_7;
    }
    int v4 = *a1;
    if (!*a1) {
      break;
    }
LABEL_7:
    if (v11)
    {
      unint64_t v13 = operator new(0x18uLL);
      v13[4] = v11;
      *(void *)unint64_t v13 = &v16;
      *((void *)v13 + 1) = v9;
      uint64_t *v9 = (uint64_t)v13;
      ++v5;
      unint64_t v9 = (uint64_t *)v13;
      float v17 = (uint64_t *)v13;
      uint64_t v18 = v5;
    }
    char v6 = 1;
    int v11 = v4;
    if (v12)
    {
      unint64_t v8 = (uint64_t *)(v10 + 8);
      goto LABEL_2;
    }
  }
  int v14 = a1[8];
  *(_DWORD *)a2 = v11;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)&v16);
  *(_DWORD *)(a2 + 32) = v14;
  return std::__list_imp<char *>::clear(&v16);
}

void sub_1B1F7065C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 40;
        std::__list_imp<char *>::clear((void *)v4 - 4);
        int v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A42720;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ArcMapFst()
{
}

void sub_1B1F70808(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcMapFst(void *a1)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy()
{
}

void sub_1B1F709E8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitStateIterator()
{
}

void sub_1B1F70A78(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B1F70B50(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Init(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 120))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v3);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if (result == -1)
  {
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 0x3FFFFFFF0004, 0);
    *(void *)(a1 + 8) = result & 0x3FFCFFFF0007 | *(void *)(a1 + 8) & 4 | 0x200000000;
    if (*(_DWORD *)(a1 + 156) == 2) {
      *(_DWORD *)(a1 + 160) = 0;
    }
  }
  return result;
}

void sub_1B1F70CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void sub_1B1F70EA8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  int v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcMapFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38820;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3) {
      MEMORY[0x1B3EA8670](v3, 0xC400A2AC0F1);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
      int v3 = *(_DWORD *)(a1 + 160);
      if (v3 != -1 && v3 <= v2) {
        int v5 = v2 + 1;
      }
      else {
        int v5 = v2;
      }
      if (v5 >= *(_DWORD *)(a1 + 164)) {
        *(_DWORD *)(a1 + 164) = v5 + 1;
      }
      *(_DWORD *)(a1 + 64) = v5;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v5) {
        *(_DWORD *)(a1 + 68) = v5 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2))goto LABEL_22; {
  int v4 = *(_DWORD *)(a1 + 156);
  }
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2) {
        float v5 = 0.0;
      }
      else {
        float v5 = INFINITY;
      }
LABEL_20:
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      *(float *)MutableState = v5;
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)(a1 + 136);
    int v6 = *(_DWORD *)(a1 + 160);
LABEL_11:
    BOOL v10 = v6 != -1 && v6 <= a2;
    if ((*(float (**)(uint64_t, void))(*(void *)v8 + 32))(v8, (a2 - v10)) == INFINITY) {
      float v5 = INFINITY;
    }
    else {
      float v5 = 0.0;
    }
    goto LABEL_20;
  }
  int v6 = *(_DWORD *)(a1 + 160);
  if (v6 != a2)
  {
    uint64_t v8 = *(void *)(a1 + 136);
    goto LABEL_11;
  }
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  *(_DWORD *)MutableState = 0;
LABEL_21:
  *((_DWORD *)MutableState + 12) |= 9u;
LABEL_22:
  uint64_t v11 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v11 + 76) == a2) {
    uint64_t v12 = v11 + 80;
  }
  else {
    uint64_t v12 = *(void *)(v11 + 8) + 8 * (a2 + 1);
  }
  return **(float **)v12;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  BOOL v7 = v4 != -1 && v4 <= a2;
  unint64_t v31 = 0;
  (*(void (**)(uint64_t, void, long long *))(*(void *)v5 + 136))(v5, (a2 - v7), &v28);
  while (1)
  {
    if (!(void)v28)
    {
      if (v31 >= v29) {
        goto LABEL_33;
      }
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(void))(*(void *)v28 + 24))(v28)) {
      break;
    }
    if ((void)v28)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v28 + 32))();
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v8 = *((void *)&v28 + 1) + 16 * v31;
LABEL_18:
    uint64_t v9 = *(void *)v8;
    float v10 = *(float *)(v8 + 8);
    LODWORD(v11) = *(_DWORD *)(v8 + 12);
    int v12 = *(_DWORD *)(a1 + 160);
    if (v12 != -1 && v12 <= (int)v11) {
      uint64_t v11 = (v11 + 1);
    }
    else {
      uint64_t v11 = v11;
    }
    if ((int)v11 >= *(_DWORD *)(a1 + 164)) {
      *(_DWORD *)(a1 + 164) = v11 + 1;
    }
    float v33 = v10;
    int v32 = 2139095040;
    BOOL v14 = v10 == INFINITY;
    float v15 = INFINITY;
    if (!v14) {
      float v15 = 0.0;
    }
    *(void *)&long long v27 = v9;
    *((void *)&v27 + 1) = LODWORD(v15) | (unint64_t)(v11 << 32);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v27);
    if ((void)v28) {
      (*(void (**)(void))(*(void *)v28 + 40))(v28);
    }
    else {
      ++v31;
    }
  }
  if ((void)v28)
  {
    (*(void (**)(void))(*(void *)v28 + 8))();
    goto LABEL_35;
  }
LABEL_33:
  if (v30) {
    --*v30;
  }
LABEL_35:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (LODWORD(v28) = fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(a1, a2), LODWORD(v27) = 2139095040, *(float *)&v28 == INFINITY))
  {
    int v17 = *(_DWORD *)(a1 + 156);
    if (v17 == 2)
    {
      int v21 = *(_DWORD *)(a1 + 160);
      BOOL v23 = v21 != -1 && v21 <= a2;
      LODWORD(v28) = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v23));
      LODWORD(v27) = 2139095040;
      float v24 = INFINITY;
      if (*(float *)&v28 != INFINITY) {
        float v24 = 0.0;
      }
      *(float *)&long long v28 = v24;
      LODWORD(v27) = 2139095040;
      if (v24 != INFINITY)
      {
        unsigned int v25 = *(_DWORD *)(a1 + 160);
        *(void *)&long long v28 = 0;
        *((void *)&v28 + 1) = __PAIR64__(v25, LODWORD(v24));
        uint64_t v26 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v26, &v28);
      }
    }
    else if (v17 == 1)
    {
      int v18 = *(_DWORD *)(a1 + 160);
      BOOL v20 = v18 != -1 && v18 <= a2;
      LODWORD(v28) = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v20));
      LODWORD(v27) = 2139095040;
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1F715A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  else if (a14)
  {
    --*a14;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A41570;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1F71758(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F71828(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A39E88;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1B1F718D4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::StateIterator(*v1);
  }
  _Unwind_Resume(exception_object);
}

float fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::CheckSuperfinal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v1 + 156) == 1 && !*(unsigned char *)(a1 + 44))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3)) {
        return result;
      }
      uint64_t v1 = *(void *)(a1 + 8);
    }
    else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
    {
      return result;
    }
    (*(void (**)(void, void))(**(void **)(v1 + 136) + 32))(*(void *)(v1 + 136), *(unsigned int *)(a1 + 40));
    return INFINITY;
  }
  return result;
}

void *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39E88;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39E88;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
      return *(unsigned char *)(a1 + 44) == 0;
    }
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(unsigned char *)(a1 + 44) == 0;
  }
  return 0;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2) & 1) == 0)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
LABEL_7:
        fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::CheckSuperfinal(a1);
        return;
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 44)) {
    *(unsigned char *)(a1 + 44) = 0;
  }
}

float fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  else {
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ArcMapFst()
{
}

void sub_1B1F71D80(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~ArcMapFst(void *a1)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    BOOL v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Copy()
{
}

void sub_1B1F71F60(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::InitStateIterator()
{
}

void sub_1B1F71FF0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B1F720C8(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Init(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v2);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 48) = 0;
  }
  unint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if (result == -1)
  {
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    unint64_t v5 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 0x3FFFFFFF0004, 0);
    unint64_t result = fst::ProjectProperties(v5, 1);
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | result & 0x3FFCFFFF0007;
    if (*(_DWORD *)(a1 + 156) == 2) {
      *(_DWORD *)(a1 + 160) = 0;
    }
  }
  return result;
}

void sub_1B1F72250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0)|| (fst::ProjectProperties(0, 1) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FE68;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38D28;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FE68;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38D28;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B1F72468(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  uint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B1F7253C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  std::__list_imp<char *>::clear(v2);
  int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2 != a1[1])
  {
    unint64_t v3 = 0;
    uint64_t v2 = a1[1];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(void *)(v2 + 8 * v3++));
      uint64_t v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<char *>::clear(a1 + 4);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38D28;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    unint64_t v3 = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  uint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl((uint64_t)a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~ArcMapFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38740;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3) {
      MEMORY[0x1B3EA8670](v3, 0xC400A2AC0F1);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
      int v3 = *(_DWORD *)(a1 + 160);
      if (v3 != -1 && v3 <= v2) {
        int v5 = v2 + 1;
      }
      else {
        int v5 = v2;
      }
      if (v5 >= *(_DWORD *)(a1 + 164)) {
        *(_DWORD *)(a1 + 164) = v5 + 1;
      }
      *(_DWORD *)(a1 + 64) = v5;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v5) {
        *(_DWORD *)(a1 + 68) = v5 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void *fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    int v6 = *(_DWORD *)(a1 + 156);
    if (v6 == 1)
    {
      int v8 = *(_DWORD *)(a1 + 160);
      if (v8 != a2)
      {
        BOOL v20 = v8 != -1 && v8 <= a2;
        float v21 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v20));
        int v40 = 0;
        float v41 = v21;
        int v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          BOOL v23 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          int v28 = *v23;
          int v22 = v29;
          std::list<int>::list(v29, (uint64_t)(v23 + 2));
          int v30 = v23[8];
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v28);
        }
        else
        {
          int v31 = v46;
          int v22 = v32;
          std::list<int>::list(v32, (uint64_t)v47);
          int v33 = v48;
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v31);
        }
        std::__list_imp<char *>::clear(v22);
        int v18 = v47;
        goto LABEL_35;
      }
      uint64_t v9 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
      int v34 = *v9;
      float v10 = v35;
      std::list<int>::list(v35, (uint64_t)(v9 + 2));
      int v36 = v9[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v34);
    }
    else
    {
      if (v6 != 2)
      {
        int v11 = *(_DWORD *)(a1 + 160);
        BOOL v13 = v11 != -1 && v11 <= a2;
        float v14 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v13));
        int v40 = 0;
        float v41 = v14;
        int v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          if (FLAGS_fst_error_fatal) {
            std::string::basic_string[abi:ne180100]<0>(&v40, "FATAL");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(&v40, "ERROR");
          }
          float v15 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v40);
          uint64_t v16 = (void *)fst::cerr(v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
          if (v43 < 0) {
            operator delete(v40);
          }
          *(void *)(a1 + 8) |= 4uLL;
        }
        int v37 = v46;
        std::list<int>::list(v38, (uint64_t)v47);
        int v39 = v48;
        fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v37);
        std::__list_imp<char *>::clear(v38);
        int v18 = v47;
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 160) == a2) {
        BOOL v7 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
      }
      else {
        BOOL v7 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      }
      int v17 = v7;
      int v25 = *v7;
      float v10 = v26;
      std::list<int>::list(v26, (uint64_t)(v7 + 2));
      int v27 = v17[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v25);
    }
    int v18 = v10;
LABEL_35:
    std::__list_imp<char *>::clear(v18);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1B1F72B4C(_Unwind_Exception *a1)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v1 - 105));
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  std::__list_imp<char *>::clear((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    int v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    unint64_t v4 = a2 + 1;
    uint64_t v6 = v2 + 8;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v4 >= (*(void *)(v6 + 8) - v5) >> 3) {
      return 0;
    }
    int v3 = (uint64_t *)(v5 + 8 * v4);
  }
  uint64_t v7 = *v3;
  if (!v7) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 80);
  if ((v8 & 1) == 0) {
    return 0;
  }
  *(_DWORD *)(v7 + 80) = v8 | 8;
  return 1;
}

void *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  int v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  int v5 = a3[8];
  int v9 = v5;
  *(_DWORD *)MutableState = v7;
  if (MutableState != (char *)&v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)MutableState + 1, v8[1], (uint64_t)v8);
    int v5 = v9;
  }
  *((_DWORD *)MutableState + 8) = v5;
  unint64_t result = std::__list_imp<char *>::clear(v8);
  *((_DWORD *)MutableState + 20) |= 9u;
  return result;
}

void sub_1B1F72CC8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
  {
    int v5 = (_DWORD **)(v4 + 80);
  }
  else
  {
    unint64_t v6 = a2 + 1;
    uint64_t v8 = v4 + 8;
    uint64_t v7 = *(void *)(v4 + 8);
    if (v6 >= (*(void *)(v8 + 8) - v7) >> 3)
    {
      int v9 = 0;
      goto LABEL_7;
    }
    int v5 = (_DWORD **)(v7 + 8 * v6);
  }
  int v9 = *v5;
LABEL_7:
  *(_DWORD *)a3 = *v9;
  unint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(v9 + 2));
  *(_DWORD *)(a3 + 32) = v9[8];
  return result;
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::GetMutableState(a1, a2);
  uint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + *(void *)(a1 + 112) + 88;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(char **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 76) = a2;
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 20) |= 4u;
      std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
      return *(char **)(a1 + 80);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    if (!*(_DWORD *)(v5 + 84))
    {
      *(_DWORD *)(a1 + 76) = a2;
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Reset(v5);
      unint64_t result = *(char **)(a1 + 80);
      *((_DWORD *)result + 20) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      int v9 = (void *)fst::cerr(v8);
      float v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      int v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      int v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache unint64_t size = ", 15);
      BOOL v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      float v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      float v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        int v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        int v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      unint64_t v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      int v30 = (void *)fst::cerr(v29);
      int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      int v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      int v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache unint64_t size = ", 15);
      int v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      BOOL v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      int v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B1F73294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    uint64_t v14 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v14);
  }
  else
  {
    uint64_t v8 = *(char **)(v6 + 8 * a2);
    if (v8) {
      return v8;
    }
  }
  uint64_t v8 = (char *)operator new(0x58uLL);
  int v9 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  *(_DWORD *)uint64_t v8 = *v9;
  std::list<int>::list((void *)v8 + 1, (uint64_t)(v9 + 2));
  *((_DWORD *)v8 + 8) = v9[8];
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(void *)(*(void *)(a1 + 8) + 8 * v4) = v8;
  if (*(unsigned char *)a1)
  {
    float v10 = operator new(0x18uLL);
    v10[4] = a2;
    uint64_t v12 = *(void *)(a1 + 32);
    int v11 = (void *)(a1 + 32);
    *(void *)float v10 = v12;
    *((void *)v10 + 1) = v11;
    *(void *)(v12 + 8) = v10;
    *int v11 = v10;
    ++v11[2];
  }
  return v8;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Reset(uint64_t a1)
{
  uint64_t result = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  uint64_t v3 = result;
  *(_DWORD *)a1 = *(_DWORD *)result;
  if (result != a1) {
    uint64_t result = (uint64_t)std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(void *)(result + 16), result + 8);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 + 32);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v4 - 56;
      uint64_t result = (uint64_t)std::__list_imp<char *>::clear((void *)(v4 - 40));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  *(void *)(a1 + 64) = v5;
  return result;
}

void fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Delete(void *a1)
{
  int v1 = *(_DWORD *)(a1[7] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 19))
  {
    *((_DWORD *)a1 + 19) = -1;
    a1[10] = 0;
  }
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Delete(a1);
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Delete(void *a1)
{
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(void *)(a1[1] + 8 * *(int *)(a1[7] + 16)));
  uint64_t v2 = a1[6];
  *(void *)(a1[1] + 8 * *(int *)(a1[7] + 16)) = 0;
  uint64_t v3 = (uint64_t *)a1[7];
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  *(void *)(v5 + 8) = v4;
  *(void *)v3[1] = v5;
  a1[6] = v2 - 1;
  a1[7] = v4;
  operator delete(v3);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    uint64_t v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    unint64_t v4 = a2 + 1;
    uint64_t v6 = v2 + 8;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v4 >= (*(void *)(v6 + 8) - v5) >> 3) {
      return 0;
    }
    uint64_t v3 = (uint64_t *)(v5 + 8 * v4);
  }
  uint64_t v7 = *v3;
  if (!v7) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 80);
  if ((v8 & 2) == 0) {
    return 0;
  }
  *(_DWORD *)(v7 + 80) = v8 | 8;
  return 1;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs(a1, a2);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  BOOL v7 = v4 != -1 && v4 <= a2;
  unint64_t v58 = 0;
  (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v5 + 136))(v5, (a2 - v7), &v54);
  while (1)
  {
    if (!v54)
    {
      if (v58 >= v56) {
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v54 + 24))(v54)) {
      break;
    }
    if (v54)
    {
      int v8 = (long long *)(*(uint64_t (**)(void))(*(void *)v54 + 32))();
      goto LABEL_18;
    }
LABEL_17:
    int v8 = (long long *)(v55 + 16 * v58);
LABEL_18:
    long long v68 = *v8;
    int v9 = HIDWORD(v68);
    int v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= SHIDWORD(v68)) {
      int v9 = HIDWORD(v68) + 1;
    }
    if (v9 >= *(_DWORD *)(a1 + 164)) {
      *(_DWORD *)(a1 + 164) = v9 + 1;
    }
    HIDWORD(v68) = v9;
    fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v68, (uint64_t)&v61);
    MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(MutableState, (uint64_t)&v61);
    std::__list_imp<char *>::clear(&v63);
    if (v54) {
      (*(void (**)(uint64_t))(*(void *)v54 + 40))(v54);
    }
    else {
      ++v58;
    }
  }
  if (v54)
  {
    (*(void (**)(void))(*(void *)v54 + 8))();
    goto LABEL_32;
  }
LABEL_30:
  if (v57) {
    --*v57;
  }
LABEL_32:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
LABEL_54:
    int v26 = *(_DWORD *)(a1 + 156);
    if (v26 == 1)
    {
      int v32 = *(_DWORD *)(a1 + 160);
      BOOL v34 = v32 != -1 && v32 <= a2;
      *(float *)&unsigned int v35 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v34));
      uint64_t v54 = 0;
      unint64_t v55 = v35 | 0xFFFFFFFF00000000;
      fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v54, (uint64_t)&v61);
      if (v61)
      {
        int v36 = *(_DWORD *)(a1 + 160);
        if (v36 == -1)
        {
          int v36 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v36;
          *(_DWORD *)(a1 + 164) = v36 + 1;
        }
        int v67 = v36;
        int v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(v37, (uint64_t)&v61);
      }
      uint64_t v14 = &v63;
      goto LABEL_98;
    }
    if (v26 != 2) {
      goto LABEL_99;
    }
    int v27 = *(_DWORD *)(a1 + 160);
    BOOL v29 = v27 != -1 && v27 <= a2;
    *(float *)&unsigned int v30 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v29));
    uint64_t v54 = 0;
    unint64_t v55 = v30 | 0xFFFFFFFF00000000;
    fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v54, (uint64_t)&v61);
    if (v61)
    {
      int v31 = v62;
    }
    else
    {
      uint64_t v38 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      int v31 = v62;
      if (v62) {
        uint64_t v39 = v65 + 1;
      }
      else {
        uint64_t v39 = 0;
      }
      if (*(_DWORD *)v38) {
        uint64_t v40 = *(void *)(v38 + 24) + 1;
      }
      else {
        uint64_t v40 = 0;
      }
      if (v39 == v40)
      {
        char v41 = 0;
        uint64_t v42 = v64;
        char v43 = (uint64_t *)(v38 + 16);
        BOOL v44 = v62 && v62 == *(_DWORD *)v38;
        BOOL v45 = !v44;
        int v46 = !v45;
        while (1)
        {
          uint64_t v47 = *v43;
          if ((v41 & 1) == 0 && !v46) {
            break;
          }
          if ((uint64_t *)v42 == &v63) {
            goto LABEL_95;
          }
          if (*(_DWORD *)(v42 + 16) != *(_DWORD *)(v47 + 16)) {
            goto LABEL_96;
          }
          uint64_t v42 = *(void *)(v42 + 8);
          char v43 = (uint64_t *)(v47 + 8);
          char v41 = 1;
        }
        if (v62) {
          goto LABEL_96;
        }
LABEL_95:
        *(float *)&uint64_t v54 = v66;
        LODWORD(v68) = 0;
        LODWORD(v68) = *(_DWORD *)(v38 + 32);
        if (v66 == *(float *)&v68) {
          goto LABEL_97;
        }
      }
    }
LABEL_96:
    uint64_t v48 = v61;
    int v51 = v31;
    std::list<int>::list(v52, (uint64_t)&v63);
    float v53 = v66;
    int v49 = *(_DWORD *)(a1 + 160);
    uint64_t v54 = v48;
    LODWORD(v55) = v51;
    std::list<int>::list(&v56, (uint64_t)v52);
    float v59 = v53;
    int v60 = v49;
    BOOL v50 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(v50, (uint64_t)&v54);
    std::__list_imp<char *>::clear(&v56);
    std::__list_imp<char *>::clear(v52);
LABEL_97:
    uint64_t v14 = &v63;
LABEL_98:
    std::__list_imp<char *>::clear(v14);
    goto LABEL_99;
  }
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Final(a1, a2, (uint64_t)&v61);
  uint64_t v13 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  uint64_t v14 = &v62;
  if (v61) {
    uint64_t v15 = v64 + 1;
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(_DWORD *)v13) {
    uint64_t v16 = *(void *)(v13 + 24) + 1;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15 != v16) {
    goto LABEL_98;
  }
  char v17 = 0;
  uint64_t v18 = v63;
  int v19 = (uint64_t *)(v13 + 16);
  if (v61) {
    BOOL v20 = v61 == *(_DWORD *)v13;
  }
  else {
    BOOL v20 = 0;
  }
  int v21 = !v20;
  int v22 = v21 ^ 1;
  while (1)
  {
    uint64_t v23 = *v19;
    if ((v17 & 1) == 0 && !v22) {
      break;
    }
    if ((uint64_t *)v18 == &v62) {
      goto LABEL_53;
    }
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v23 + 16)) {
      goto LABEL_98;
    }
    uint64_t v18 = *(void *)(v18 + 8);
    int v19 = (uint64_t *)(v23 + 8);
    char v17 = 1;
  }
  if (v61) {
    goto LABEL_98;
  }
LABEL_53:
  LODWORD(v54) = v65;
  LODWORD(v68) = 0;
  LODWORD(v68) = *(_DWORD *)(v13 + 32);
  float v24 = *(float *)&v65;
  float v25 = *(float *)&v68;
  std::__list_imp<char *>::clear(&v62);
  if (v24 == v25) {
    goto LABEL_54;
  }
LABEL_99:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs(a1, a2);
}

void sub_1B1F73B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs(uint64_t a1, int a2)
{
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 7);
  uint64_t v6 = *((void *)MutableState + 8) - v5;
  if (v6)
  {
    unint64_t v7 = v6 / 56;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    int v9 = (int *)(v5 + 48);
    do
    {
      int v11 = *v9;
      v9 += 14;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 80) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 64) - *(void *)(a2 + 56) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GC(a1, (char *)a2, 0, 0.666);
      }
    }
  }
}

void *fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs(void *result)
{
  uint64_t v1 = result[7];
  uint64_t v2 = result[8] - v1;
  if (v2)
  {
    unint64_t v3 = v2 / 56;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    unint64_t v4 = (_DWORD *)(v1 + 4);
    do
    {
      if (!*(v4 - 1)) {
        ++result[5];
      }
      if (!*v4) {
        ++result[6];
      }
      v4 += 14;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1 + 7;
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A412B0;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1F73F18(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F73FE8(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1B1F74190(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      MutableState = 0;
    }
    else {
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        int v8 = operator new(0x58uLL);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          int v9 = operator new(0x18uLL);
          _DWORD v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)int v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        int v19 = &v18[8 * v14];
        *(void *)int v19 = v8;
        uint64_t v13 = v19 + 8;
        int v21 = (char *)a1[1];
        BOOL v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          BOOL v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        void *v12 = v8;
        uint64_t v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::list<int>::list((void *)(a1 + 8), a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*>>((void *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(void *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1B1F74468(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1F744E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2 + v7;
      uint64_t v9 = a4 + v7;
      *(void *)uint64_t v9 = *(void *)(a2 + v7);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + v7 + 8);
      std::list<int>::list((void *)(a4 + v7 + 16), a2 + v7 + 16);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(a2 + v7 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v8 + 56 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1F74594(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 40;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A39D88;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1B1F74650(_Unwind_Exception *exception_object)
{
  if (*v1) {
    fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::StateIterator(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    uint64_t v2 = result;
    if (!*(unsigned char *)(result + 44))
    {
      uint64_t result = *(void *)(result + 16);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        if (result) {
          return result;
        }
        uint64_t v1 = *(void *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      float v3 = (*(float (**)(void, void))(**(void **)(v1 + 136) + 32))(*(void *)(v1 + 136), *(unsigned int *)(v2 + 40));
      uint64_t v4 = 0;
      float v5 = v3;
      int v6 = -1;
      fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v4, (uint64_t)&v7);
      if (v7) {
        *(unsigned char *)(v2 + 44) = 1;
      }
      return (uint64_t)std::__list_imp<char *>::clear(v8);
    }
  }
  return result;
}

void *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39D88;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39D88;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Next(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 40);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if ((result & 1) == 0)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
LABEL_7:
        return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 44)) {
    *(unsigned char *)(a1 + 44) = 0;
  }
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  else {
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 120);
  if (*(_DWORD *)(v3 + 76) == a2) {
    uint64_t v4 = (uint64_t *)(v3 + 80);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 8) + 8 * (a2 + 1));
  }
  uint64_t v5 = *v4;
  int v8 = *(_DWORD *)(v5 + 84);
  int v6 = (_DWORD *)(v5 + 84);
  int v7 = v8;
  uint64_t v9 = *(void *)(v6 - 7);
  uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((*(void *)(v6 - 5) - v9) >> 3);
  if (*(void *)(v6 - 5) == v9) {
    uint64_t v9 = 0;
  }
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  *int v6 = v7 + 1;
  return result;
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A412B0;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41570;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::One()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::One(void)::one;
}

void sub_1B1F74C20(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::One()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::One(void)::one;
}

void sub_1B1F74D1C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::ProductWeight(a1, &v6, a3);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1B1F74DCC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::ProductWeight(uint64_t a1, int *a2, float a3)
{
  int v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  *(_DWORD *)a1 = v6;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)v7);
  *(float *)(a1 + 32) = a3;
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1B1F74E50(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::Divide<int>@<X0>(int *a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 == 1)
  {
    return fst::DivideRight<int,(fst::StringType)1>(a1, a2, a4);
  }
  else
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v6 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    int v7 = (void *)fst::cerr(v6);
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"StringWeight::Divide: only right division is defined ", 53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"for the right string semiring", 29);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = (_DWORD *)fst::StringWeight<int,(fst::StringType)1>::NoWeight();
    *(_DWORD *)a4 = *v9;
    return std::list<int>::list((void *)(a4 + 8), (uint64_t)(v9 + 2));
  }
}

{
  fst *v5;
  void *v6;
  void *v8;
  _DWORD *v9;
  void *__p[2];
  char v11;
  char v12;
  uint64_t vars8;

  if (a3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v5 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    int v6 = (void *)fst::cerr(v5);
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"StringWeight::Divide: only left division is defined ", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"for the left string semiring", 28);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = (_DWORD *)fst::StringWeight<int,(fst::StringType)0>::NoWeight();
    *(_DWORD *)a4 = *v9;
    return std::list<int>::list((void *)(a4 + 8), (uint64_t)(v9 + 2));
  }
  else
  {
    return fst::DivideLeft<int,(fst::StringType)0>(a1, a2, a4);
  }
}

void sub_1B1F74F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::DivideRight<int,(fst::StringType)1>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 && (*a1 == -2 ? (BOOL v6 = *((void *)a1 + 3) == 0) : (BOOL v6 = 0), v6)
    || *a2 && (*a2 == -2 ? (BOOL v7 = *((void *)a2 + 3) == 0) : (BOOL v7 = 0), v7))
  {
    BOOL v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)1>::NoWeight();
    goto LABEL_31;
  }
  uint64_t v8 = fst::StringWeight<int,(fst::StringType)1>::Zero();
  int v9 = *a2;
  if (*a2) {
    uint64_t v10 = *((void *)a2 + 3) + 1;
  }
  else {
    uint64_t v10 = 0;
  }
  if (*(_DWORD *)v8) {
    uint64_t v11 = *(void *)(v8 + 24) + 1;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10 != v11)
  {
LABEL_35:
    uint64_t result = (void *)fst::StringWeight<int,(fst::StringType)1>::Zero();
    int v22 = *a1;
    if (*a1) {
      uint64_t v23 = *((void *)a1 + 3) + 1;
    }
    else {
      uint64_t v23 = 0;
    }
    if (*(_DWORD *)result) {
      uint64_t v24 = result[3] + 1;
    }
    else {
      uint64_t v24 = 0;
    }
    if (v23 != v24)
    {
LABEL_54:
      *(void *)(a3 + 8) = a3 + 8;
      *(void *)(a3 + 16) = a3 + 8;
      *(void *)(a3 + ++*(void *)(result + 24) = 0;
      *(_DWORD *)a3 = 0;
      if (v22)
      {
LABEL_61:
        unint64_t v33 = 0;
        BOOL v34 = a1 + 2;
        while (1)
        {
          if (!*a2 || *((void *)a2 + 3) + 1 <= v33)
          {
            unsigned int v35 = a1;
            if (v34 != *((void **)a1 + 2)) {
              unsigned int v35 = (int *)(*v34 + 16);
            }
            uint64_t result = fst::StringWeight<int,(fst::StringType)1>::PushFront((_DWORD *)a3, *v35);
          }
          if (v34 == *((void **)a1 + 2)) {
            break;
          }
          BOOL v34 = (void *)*v34;
          ++v33;
        }
      }
      return result;
    }
    char v25 = 0;
    int v26 = (uint64_t *)(a1 + 4);
    int v27 = result + 2;
    if (v22) {
      BOOL v28 = v22 == *(_DWORD *)result;
    }
    else {
      BOOL v28 = 0;
    }
    int v29 = !v28;
    int v30 = v29 ^ 1;
    while (1)
    {
      uint64_t v31 = *v26;
      uint64_t v32 = *v27;
      if ((v25 & 1) == 0 && !v30) {
        break;
      }
      if ((int *)v31 == a1 + 2) {
        goto LABEL_69;
      }
      if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16)) {
        goto LABEL_54;
      }
      int v26 = (uint64_t *)(v31 + 8);
      int v27 = (uint64_t *)(v32 + 8);
      char v25 = 1;
    }
    if (v22)
    {
      *(void *)(a3 + 8) = a3 + 8;
      *(void *)(a3 + 16) = a3 + 8;
      *(void *)(a3 + ++*(void *)(result + 24) = 0;
      *(_DWORD *)a3 = 0;
      goto LABEL_61;
    }
LABEL_69:
    BOOL v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)1>::Zero();
LABEL_31:
    *(_DWORD *)a3 = *v20;
    return std::list<int>::list((void *)(a3 + 8), (uint64_t)(v20 + 2));
  }
  char v12 = 0;
  uint64_t v13 = (uint64_t *)(a2 + 4);
  uint64_t v14 = (uint64_t *)(v8 + 16);
  if (v9) {
    BOOL v15 = v9 == *(_DWORD *)v8;
  }
  else {
    BOOL v15 = 0;
  }
  int v16 = !v15;
  int v17 = v16 ^ 1;
  while (1)
  {
    uint64_t v18 = *v13;
    uint64_t v19 = *v14;
    if ((v12 & 1) == 0 && !v17) {
      break;
    }
    if ((int *)v18 == a2 + 2) {
      goto LABEL_56;
    }
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16)) {
      goto LABEL_35;
    }
    uint64_t v13 = (uint64_t *)(v18 + 8);
    uint64_t v14 = (uint64_t *)(v19 + 8);
    char v12 = 1;
  }
  if (v9) {
    goto LABEL_35;
  }
LABEL_56:
  return (void *)fst::StringWeight<int,(fst::StringType)1>::StringWeight(a3, -2);
}

void sub_1B1F751F8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FactorWeightFst()
{
}

void sub_1B1F752B8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~FactorWeightFst(void *a1)
{
  fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Start(uint64_t a1)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    BOOL v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Copy()
{
}

void sub_1B1F75498(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::InitStateIterator()
{
}

void sub_1B1F7558C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1F757D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  int v21 = v19;
  uint64_t v22 = (uint64_t)(v19 - 5);
  uint64_t v23 = *v21;
  if (*v21)
  {
    v18[30] = v23;
    operator delete(v23);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(v22);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~FactorWeightFstImpl(uint64_t a1)
{
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~FactorWeightFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__list_imp<char *>::clear(v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = v4 - 48;
        std::__list_imp<char *>::clear((void *)v4 - 4);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~FactorWeightFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3EDE8;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(void *)(a1 + 240) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(a1 + 192);
  unint64_t v5 = (void **)(a1 + 168);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Start(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
  {
    *(unsigned char *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result != -1)
  {
    int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
    uint64_t v4 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    int v6 = *v4;
    std::list<int>::list(v7, (uint64_t)(v4 + 2));
    int v8 = v4[8];
    v9[0] = v3;
    void v9[2] = v6;
    std::list<int>::list(v10, (uint64_t)v7);
    int v11 = v8;
    int State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FindState(a1, v9);
    std::__list_imp<char *>::clear(v10);
    std::__list_imp<char *>::clear(v7);
    *(_DWORD *)(a1 + 64) = State;
    *(unsigned char *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= State) {
      *(_DWORD *)(a1 + 68) = State + 1;
    }
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

void sub_1B1F75C44(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FindState(uint64_t a1, int *a2)
{
  if ((*(unsigned char *)(a1 + 148) & 2) != 0) {
    goto LABEL_27;
  }
  uint64_t v4 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  int v5 = a2[2];
  uint64_t v6 = v5 ? *((void *)a2 + 4) + 1 : 0;
  uint64_t v7 = *(_DWORD *)v4 ? *(void *)(v4 + 24) + 1 : 0;
  if (v6 != v7) {
    goto LABEL_27;
  }
  char v8 = 0;
  int v9 = (uint64_t *)(a2 + 6);
  uint64_t v10 = (uint64_t *)(v4 + 16);
  BOOL v11 = v5 && v5 == *(_DWORD *)v4;
  BOOL v12 = !v11;
  int v13 = !v12;
  while (1)
  {
    uint64_t v14 = *v9;
    uint64_t v15 = *v10;
    if ((v8 & 1) == 0 && !v13) {
      break;
    }
    if ((int *)v14 == a2 + 4) {
      goto LABEL_22;
    }
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16)) {
      goto LABEL_27;
    }
    int v9 = (uint64_t *)(v14 + 8);
    uint64_t v10 = (uint64_t *)(v15 + 8);
    char v8 = 1;
  }
  if (v5) {
    goto LABEL_27;
  }
LABEL_22:
  v40[0] = 0;
  v40[0] = a2[10];
  float v44 = 0.0;
  float v44 = *(float *)(v4 + 32);
  int v16 = *a2;
  if (*(float *)v40 != v44 || v16 == -1)
  {
LABEL_27:
    uint64_t v18 = std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>((void *)(a1 + 192), a2);
    if (v18)
    {
      return *((unsigned int *)v18 + 16);
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 176);
      BOOL v20 = (uint64_t *)(a1 + 168);
      uint64_t v19 = -1431655765 * ((v21 - *(void *)(a1 + 168)) >> 4);
      if (v21 >= *(void *)(a1 + 184))
      {
        uint64_t v22 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const&>(v20, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const&>((uint64_t)v20, a2);
        uint64_t v22 = v21 + 48;
      }
      *(void *)(a1 + 176) = v22;
      int v23 = a2[2];
      v40[0] = *a2;
      v40[2] = v23;
      std::list<int>::list(v41, (uint64_t)(a2 + 4));
      int v42 = a2[10];
      int v43 = v19;
      std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(a1 + 192, v40, v40);
      std::__list_imp<char *>::clear(v41);
    }
  }
  else
  {
    uint64_t v25 = v16;
    int v26 = *(char **)(a1 + 232);
    int v27 = *(char **)(a1 + 240);
    unint64_t v28 = (v27 - v26) >> 2;
    if (v28 <= v16)
    {
      int v29 = (void *)(a1 + 248);
      do
      {
        if ((unint64_t)v27 >= *v29)
        {
          unint64_t v31 = v28 + 1;
          if ((v28 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v32 = *v29 - (void)v26;
          if (v32 >> 1 > v31) {
            unint64_t v31 = v32 >> 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            BOOL v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v33);
            int v26 = *(char **)(a1 + 232);
            int v27 = *(char **)(a1 + 240);
          }
          else
          {
            BOOL v34 = 0;
          }
          unsigned int v35 = &v34[4 * v28];
          *(_DWORD *)unsigned int v35 = -1;
          int v30 = v35 + 4;
          while (v27 != v26)
          {
            int v36 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(void *)(a1 + 232) = v35;
          *(void *)(a1 + 240) = v30;
          *(void *)(a1 + 248) = &v34[4 * v33];
          if (v26)
          {
            operator delete(v26);
            int v26 = *(char **)(a1 + 232);
          }
          else
          {
            int v26 = v35;
          }
        }
        else
        {
          *(_DWORD *)int v27 = -1;
          int v30 = v27 + 4;
        }
        *(void *)(a1 + 240) = v30;
        unint64_t v28 = (v30 - v26) >> 2;
        int v16 = *a2;
        int v27 = v30;
      }
      while (v28 <= *a2);
      uint64_t v25 = v16;
    }
    if (*(_DWORD *)&v26[4 * v25] == -1)
    {
      unint64_t v37 = *(void *)(a1 + 176);
      *(_DWORD *)&v26[4 * v25] = -1431655765 * ((v37 - *(void *)(a1 + 168)) >> 4);
      uint64_t v38 = (uint64_t *)(a1 + 168);
      if (v37 >= *(void *)(a1 + 184))
      {
        uint64_t v39 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const&>(v38, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const&>((uint64_t)v38, a2);
        uint64_t v39 = v37 + 48;
      }
      *(void *)(a1 + 176) = v39;
      int v16 = *a2;
      int v26 = *(char **)(a1 + 232);
    }
    return *(unsigned int *)&v26[4 * v16];
  }
  return v19;
}

void sub_1B1F75F6C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v4 = *a2;
  *(_DWORD *)(v4 + 8) = a2[2];
  uint64_t result = std::list<int>::list((void *)(v4 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(v4 + 40) = a2[10];
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1B1F75FDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = (char *)&v10[12 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  int v16 = (char *)&v10[12 * v9];
  *(_DWORD *)BOOL v11 = *a2;
  *((_DWORD *)v11 + 2) = a2[2];
  std::list<int>::list((void *)v11 + 2, (uint64_t)(a2 + 4));
  v10[12 * v4 + 10] = a2[10];
  v15 += 48;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1F760FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      *(_DWORD *)(v12 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((void *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 48;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1F76220(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::__list_imp<char *>::clear((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>(void *a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(a2 + 2);
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = v5 + 7853 * v4;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v10 = v5 + 7853 * v4;
    if (v7 >= *(void *)&v6) {
      uint64_t v10 = v7 % *(void *)&v6;
    }
  }
  else
  {
    uint64_t v10 = (*(void *)&v6 - 1) & v7;
  }
  uint64_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (void *)*v11;
  if (*v11)
  {
    uint64_t v13 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v7)
      {
        if (fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual::operator()(v13, (uint64_t)(v12 + 2), (uint64_t)a2))
        {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v6) {
            v14 %= *(void *)&v6;
          }
        }
        else
        {
          v14 &= *(void *)&v6 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(int *a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *((void *)a1 + 2);
  unint64_t v3 = *a1;
  if (v3)
  {
    while (1)
    {
      v1 ^= v3;
      if ((int *)v2 == a1 + 2) {
        break;
      }
      unint64_t v3 = *(int *)(v2 + 16) ^ (unint64_t)(2 * v1);
      uint64_t v2 = *(void *)(v2 + 8);
    }
  }
  return a1[8] ^ __ROR8__(v1, 59);
}

BOOL fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3) {
    return 0;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = v3 ? *(void *)(a2 + 32) + 1 : 0;
  int v5 = *(_DWORD *)(a3 + 8);
  uint64_t v6 = v5 ? *(void *)(a3 + 32) + 1 : 0;
  if (v4 != v6) {
    return 0;
  }
  char v7 = 0;
  uint8x8_t v8 = (uint64_t *)(a2 + 24);
  unint64_t v9 = (uint64_t *)(a3 + 24);
  if (v3) {
    BOOL v10 = v3 == v5;
  }
  else {
    BOOL v10 = 0;
  }
  int v11 = !v10;
  int v12 = v11 ^ 1;
  while (1)
  {
    uint64_t v13 = *v8;
    uint64_t v14 = *v9;
    if ((v7 & 1) == 0 && !v12) {
      break;
    }
    if (v13 == a2 + 16) {
      return *(float *)(a2 + 40) == *(float *)(a3 + 40);
    }
    if (*(_DWORD *)(v13 + 16) != *(_DWORD *)(v14 + 16)) {
      return 0;
    }
    uint8x8_t v8 = (uint64_t *)(v13 + 8);
    unint64_t v9 = (uint64_t *)(v14 + 8);
    char v7 = 1;
  }
  if (v3) {
    return 0;
  }
  return *(float *)(a2 + 40) == *(float *)(a3 + 40);
}

void *std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(uint64_t a1, int *a2, _DWORD *a3)
{
  int v7 = *a2;
  unint64_t v8 = fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(a2 + 2) + 7853 * v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    int v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual::operator()(a1 + 32, (uint64_t)(v13 + 2), (uint64_t)a2))
            {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__construct_node_hash<std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(a1, v8, a3, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t v13 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v13;
}

void sub_1B1F76730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__construct_node_hash<std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *a3;
  *((_DWORD *)v8 + 6) = a3[2];
  uint64_t result = std::list<int>::list(v8 + 4, (uint64_t)(a3 + 4));
  *((_DWORD *)v8 + 14) = a3[10];
  *((_DWORD *)v8 + 16) = a3[12];
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1F767D0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__list_imp<char *>::clear(v2 + 4);
    }
    operator delete(v2);
  }
}

void *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    uint64_t v6 = (int *)(*(void *)(a1 + 168) + 48 * a2);
    int v8 = *v6;
    uint64_t v7 = v6 + 2;
    if (v8 == -1)
    {
      int v28 = *v7;
      std::list<int>::list(v29, (uint64_t)(v7 + 2));
      float v30 = *((float *)v7 + 8);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v24);
      fst::Times<int,(fst::StringType)1>(v7, (uint64_t)&v24, (uint64_t)&v31);
      float v9 = *((float *)v7 + 8);
      float v10 = NAN;
      if (v9 != -INFINITY)
      {
        float v10 = NAN;
        if (v26 != -INFINITY)
        {
          float v10 = INFINITY;
          BOOL v11 = v26 == INFINITY || v9 == INFINITY;
          float v12 = v9 + v26;
          if (!v11) {
            float v10 = v12;
          }
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v28, &v31, v10);
      std::__list_imp<char *>::clear(v32);
      std::__list_imp<char *>::clear(v25);
    }
    LODWORD(v++*(void *)(result + 24) = v28;
    std::list<int>::list(v25, (uint64_t)v29);
    float v26 = v30;
    if (v28) {
      BOOL v13 = (unint64_t)(v29[2] + 1) >= 2;
    }
    else {
      BOOL v13 = 0;
    }
    int v14 = !v13;
    char v27 = v14;
    if ((*(unsigned char *)(a1 + 148) & 1) == 0 || v14)
    {
      int v21 = v28;
      float v16 = v22;
      std::list<int>::list(v22, (uint64_t)v29);
      float v23 = v30;
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v21);
    }
    else
    {
      float v15 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      int v18 = *v15;
      float v16 = v19;
      std::list<int>::list(v19, (uint64_t)(v15 + 2));
      int v20 = v15[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v18);
    }
    std::__list_imp<char *>::clear(v16);
    std::__list_imp<char *>::clear(v25);
    std::__list_imp<char *>::clear(v29);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1B1F76A70(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

void *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Expand(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 168) + 48 * a2;
  int v82 = *(_DWORD *)v3;
  int v83 = *(_DWORD *)(v3 + 8);
  std::list<int>::list(v84, v3 + 16);
  float v85 = *(float *)(v3 + 40);
  if (v82 == -1) {
    goto LABEL_33;
  }
  uint64_t v4 = *(void *)(a1 + 136);
  unint64_t v81 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
  uint64_t v5 = &v66;
  while (1)
  {
    if (!v78)
    {
      if (v81 >= v79[1]) {
        goto LABEL_31;
      }
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v78 + 24))(v78)) {
      break;
    }
    if (v78)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 32))(v78);
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v6 = v79[0] + 56 * v81;
LABEL_9:
    fst::Times<int,(fst::StringType)1>(&v83, v6 + 8, (uint64_t)&v59);
    float v7 = NAN;
    if (v85 != -INFINITY)
    {
      float v8 = *(float *)(v6 + 40);
      float v7 = NAN;
      if (v8 != -INFINITY)
      {
        float v7 = INFINITY;
        if (v8 != INFINITY && v85 != INFINITY) {
          float v7 = v85 + v8;
        }
      }
    }
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v75, (int *)&v59, v7);
    std::__list_imp<char *>::clear(&v60);
    float v71 = *(float *)&v75;
    std::list<int>::list(v72, (uint64_t)v76);
    int v73 = v77;
    int v11 = *(float *)&v75 == 0.0 || (unint64_t)(v76[2] + 1) < 2;
    char v74 = v11;
    if ((*(unsigned char *)(a1 + 148) & 2) == 0 || v11)
    {
      float v16 = v5;
      int v17 = *(_DWORD *)(v6 + 48);
      int v18 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
      int v68 = *v18;
      std::list<int>::list(v69, (uint64_t)(v18 + 2));
      int v70 = v18[8];
      LODWORD(v59) = v17;
      LODWORD(v60) = v68;
      std::list<int>::list(v61, (uint64_t)v69);
      int v63 = v70;
      LODWORD(v18) = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FindState(a1, (int *)&v59);
      uint64_t v5 = v16;
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v69);
      uint64_t v19 = *(void *)v6;
      int v65 = v75;
      std::list<int>::list(v16, (uint64_t)v76);
      int v67 = v77;
      uint64_t v59 = v19;
      LODWORD(v60) = v65;
      std::list<int>::list(v61, (uint64_t)v16);
      int v63 = v67;
      LODWORD(v64[0]) = v18;
      Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(MutableState, (uint64_t)&v59);
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v16);
    }
    else
    {
      fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Value((int *)&v71, (uint64_t)&v59);
      int v12 = *(_DWORD *)(v6 + 48);
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Quantize((float *)&v63, (uint64_t)&v56, *(float *)(a1 + 144));
      LODWORD(v51) = v12;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v56;
      std::list<int>::list(v53, (uint64_t)v57);
      float v54 = v58;
      int State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v57);
      uint64_t v14 = *(void *)v6;
      int v48 = v59;
      std::list<int>::list(v49, (uint64_t)&v60);
      float v50 = v62;
      uint64_t v51 = v14;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v48;
      std::list<int>::list(v53, (uint64_t)v49);
      float v54 = v50;
      int v55 = State;
      float v15 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(v15, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v49);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      char v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v76);
    if (v78) {
      (*(void (**)(uint64_t))(*(void *)v78 + 40))(v78);
    }
    else {
      ++v81;
    }
  }
  if (v78)
  {
    (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
    goto LABEL_33;
  }
LABEL_31:
  if (v80) {
    --*v80;
  }
LABEL_33:
  if (*(unsigned char *)(a1 + 148))
  {
    if (v82 == -1) {
      goto LABEL_65;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v59);
    uint64_t v21 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    uint64_t v22 = v59 ? v61[1] + 1 : 0;
    uint64_t v23 = *(_DWORD *)v21 ? *(void *)(v21 + 24) + 1 : 0;
    if (v22 == v23)
    {
      char v24 = 0;
      uint64_t v25 = v61[0];
      float v26 = (uint64_t *)(v21 + 16);
      if (v59) {
        BOOL v27 = v59 == *(_DWORD *)v21;
      }
      else {
        BOOL v27 = 0;
      }
      int v28 = !v27;
      int v29 = v28 ^ 1;
      while (1)
      {
        uint64_t v30 = *v26;
        if ((v24 & 1) == 0 && !v29) {
          break;
        }
        if ((uint64_t *)v25 == &v60) {
          goto LABEL_77;
        }
        if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v30 + 16)) {
          goto LABEL_55;
        }
        uint64_t v25 = *(void *)(v25 + 8);
        float v26 = (uint64_t *)(v30 + 8);
        char v24 = 1;
      }
      if (v59) {
        goto LABEL_55;
      }
LABEL_77:
      *(float *)&uint64_t v51 = v62;
      float v71 = 0.0;
      float v71 = *(float *)(v21 + 32);
      float v39 = v62;
      float v40 = v71;
      std::__list_imp<char *>::clear(&v60);
      if (v39 == v40) {
        goto LABEL_76;
      }
    }
    else
    {
LABEL_55:
      std::__list_imp<char *>::clear(&v60);
    }
    if (v82 == -1)
    {
LABEL_65:
      LODWORD(v78) = v83;
      std::list<int>::list(v79, (uint64_t)v84);
      *(float *)&unint64_t v81 = v85;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v59);
      fst::Times<int,(fst::StringType)1>(&v83, (uint64_t)&v59, (uint64_t)&v51);
      float v31 = NAN;
      if (v85 != -INFINITY)
      {
        float v31 = NAN;
        if (v62 != -INFINITY)
        {
          float v31 = INFINITY;
          if (v62 != INFINITY && v85 != INFINITY) {
            float v31 = v85 + v62;
          }
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v78, (int *)&v51, v31);
      std::__list_imp<char *>::clear(&v52);
      std::__list_imp<char *>::clear(&v60);
    }
    uint64_t v33 = *(void *)(a1 + 152);
    float v71 = *(float *)&v78;
    std::list<int>::list(v72, (uint64_t)v79);
    int v73 = v81;
    if (v78) {
      BOOL v34 = (unint64_t)v80 + 1 >= 2;
    }
    else {
      BOOL v34 = 0;
    }
    char v35 = !v34;
    char v74 = v35;
    if (v34)
    {
      fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Value((int *)&v71, (uint64_t)&v59);
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Quantize((float *)&v63, (uint64_t)&v45, *(float *)(a1 + 144));
      LODWORD(v51) = -1;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v45;
      std::list<int>::list(v53, (uint64_t)v46);
      float v54 = v47;
      int v36 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v46);
      int v42 = v59;
      std::list<int>::list(v43, (uint64_t)&v60);
      float v44 = v62;
      uint64_t v51 = v33;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v42;
      std::list<int>::list(v53, (uint64_t)v43);
      float v54 = v44;
      int v55 = v36;
      unint64_t v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(v37, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v43);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      char v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v79);
  }
LABEL_76:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs(a1, a2);
  return std::__list_imp<char *>::clear(v84);
}

void sub_1B1F77388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::__list_imp<char *>::clear((void *)(v47 + 8));
  std::__list_imp<char *>::clear(&a47);
  std::__list_imp<char *>::clear(v48);
  _Unwind_Resume(a1);
}

void *fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Value@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v35 = *a1;
  std::list<int>::list(v36, (uint64_t)(a1 + 2));
  if (*a1) {
    BOOL v4 = (unint64_t)(*((void *)a1 + 3) + 1) >= 2;
  }
  else {
    BOOL v4 = 0;
  }
  char v5 = !v4;
  char v37 = v5;
  fst::StringFactor<int,(fst::StringType)1>::Value((uint64_t)&v35, (uint64_t)&v22);
  int v30 = v22;
  v31[0] = v31;
  v31[1] = v31;
  uint64_t v32 = 0;
  uint64_t v6 = v25;
  if (v25)
  {
    uint64_t v8 = v23;
    float v7 = v24;
    uint64_t v9 = *v24;
    *(void *)(v9 + 8) = *(void *)(v23 + 8);
    **(void **)(v8 + 8) = v9;
    uint64_t v10 = v31[0];
    *(void *)(v31[0] + 8) = v7;
    *float v7 = v10;
    v31[0] = v8;
    *(void *)(v8 + 8) = v31;
    uint64_t v32 = v6;
    uint64_t v25 = 0;
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v33, &v30, *((float *)a1 + 8));
  std::__list_imp<char *>::clear(v31);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  fst::StringFactor<int,(fst::StringType)1>::Value((uint64_t)&v35, (uint64_t)&v22);
  int v17 = v26;
  v18[0] = v18;
  v18[1] = v18;
  uint64_t v19 = 0;
  uint64_t v11 = v29;
  if (v29)
  {
    uint64_t v13 = v27;
    int v12 = v28;
    uint64_t v14 = *v28;
    *(void *)(v14 + 8) = *(void *)(v27 + 8);
    **(void **)(v13 + 8) = v14;
    uint64_t v15 = v18[0];
    *(void *)(v18[0] + 8) = v12;
    void *v12 = v15;
    v18[0] = v13;
    *(void *)(v13 + 8) = v18;
    uint64_t v19 = v11;
    uint64_t v29 = 0;
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v20, &v17, 0.0);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  std::pair<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>&,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>&,0>(a2, &v33, &v20);
  std::__list_imp<char *>::clear(v21);
  std::__list_imp<char *>::clear(v34);
  return std::__list_imp<char *>::clear(v36);
}

void sub_1B1F7774C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v2 + 8));
  std::__list_imp<char *>::clear((void *)(v3 - 120));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1B1F77820(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::StringFactor<int,(fst::StringType)1>::Value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 16);
  fst::StringWeight<int,(fst::StringType)1>::StringWeight((uint64_t)&v14, *(_DWORD *)a1);
  v12[0] = v12;
  v12[1] = v12;
  uint64_t v13 = 0;
  int v11 = 0;
  if (v4 != v3)
  {
    int v5 = 0;
    uint64_t v6 = 0;
    int v7 = v12;
    do
    {
      int v8 = *(_DWORD *)(v4 + 16);
      if (v5)
      {
        uint64_t v9 = operator new(0x18uLL);
        int v9[4] = v8;
        *(void *)uint64_t v9 = v7;
        *((void *)v9 + 1) = v12;
        v7[1] = v9;
        ++v6;
        int v7 = v9;
        v12[0] = v9;
        uint64_t v13 = v6;
      }
      else
      {
        int v11 = *(_DWORD *)(v4 + 16);
        int v5 = v8;
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
  }
  std::pair<fst::StringWeight<int,(fst::StringType)1>,fst::StringWeight<int,(fst::StringType)1>>::pair[abi:ne180100]<fst::StringWeight<int,(fst::StringType)1>&,fst::StringWeight<int,(fst::StringType)1>&,0>(a2, &v14, &v11);
  std::__list_imp<char *>::clear(v12);
  return std::__list_imp<char *>::clear(v15);
}

void sub_1B1F77918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__list_imp<char *>::clear(v6);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::StringWeight<int,(fst::StringType)1>,fst::StringWeight<int,(fst::StringType)1>>::pair[abi:ne180100]<fst::StringWeight<int,(fst::StringType)1>&,fst::StringWeight<int,(fst::StringType)1>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = *a3;
  std::list<int>::list((void *)(a1 + 40), (uint64_t)(a3 + 2));
  return a1;
}

void sub_1B1F77994(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>&,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_DWORD *)(a1 + 40) = *a3;
  std::list<int>::list((void *)(a1 + 48), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 72) = a3[8];
  return a1;
}

void sub_1B1F77A14(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1B1F77A84(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v8 = *a1;
  std::list<int>::list(v9, (uint64_t)(a1 + 2));
  float v6 = a1[8];
  if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
    float v6 = floorf((float)(v6 / a3) + 0.5) * a3;
  }
  *(float *)a2 = v8;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v9);
  *(float *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v9);
}

void sub_1B1F77B40(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A44198;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1F77CAC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F77E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *v17;
  if (*v17)
  {
    v15[30] = v19;
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)v16 + 24);
  std::string __p = v16;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  int v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  int v6 = v5;
  do
  {
    fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 7);
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((*((void *)v19 + 8) - v8) >> 3);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      int v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        int v14 = *v12;
        v12 += 14;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    int v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while (v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1F78020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Expand(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1F780A8(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

uint64_t fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v6);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 288))(a2, 0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1)
  {
    if ((v7 & 4) != 0)
    {
      int v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
      return v18(a2, 4, 4);
    }
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    BOOL v9 = fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1) != -1;
    (*(void (**)(uint64_t, BOOL))(*(void *)a2 + 248))(a2, v9);
  }
  LODWORD(v++*(_DWORD *)(result + 24) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v22);
  while (!v22)
  {
    if ((int)v24 >= (int)v23) {
      goto LABEL_14;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 32))(v22);
    }
    else {
      LODWORD(v++*(_DWORD *)(result + 24) = v24 + 1;
    }
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v22 + 16))(v22)) {
    goto LABEL_9;
  }
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
LABEL_14:
  unsigned int v33 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v31);
  LODWORD(v10) = -1;
  while (2)
  {
    if (!v31)
    {
      if ((int)v33 >= v32) {
        goto LABEL_47;
      }
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v31 + 16))(v31))
    {
      if (v31)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v11 = v33;
LABEL_21:
      if (v11 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v11);
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v11, v12);
      unint64_t v26 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v11, &v22);
LABEL_24:
      if (v22)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 24))(v22))
        {
          if (v22)
          {
            (*(void (**)(void))(*(void *)v22 + 8))();
            goto LABEL_37;
          }
LABEL_35:
          if (v25) {
            --*v25;
          }
LABEL_37:
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v19, a1, v11);
          uint64_t v22 = 0;
          LODWORD(v23) = v19;
          std::list<int>::list(&v24, (uint64_t)v20);
          int v27 = v21;
          int v28 = -1;
          unint64_t v29 = fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((int *)a3, (int *)&v22);
          uint64_t v30 = v15;
          std::__list_imp<char *>::clear(&v24);
          std::__list_imp<char *>::clear(v20);
          if (v29)
          {
            if (v10 == -1)
            {
              uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
              (*(void (**)(uint64_t, uint64_t, double))(*(void *)a2 + 184))(a2, v10, 0.0);
            }
            HIDWORD(v30) = v10;
            (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(void *)a2 + 208))(a2, v11, &v29);
            (*(void (**)(uint64_t, uint64_t, float))(*(void *)a2 + 184))(a2, v11, INFINITY);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, float))(*(void *)a2 + 184))(a2, v11, *(float *)&v30);
          }
          if (v31) {
            (*(void (**)(uint64_t))(*(void *)v31 + 32))(v31);
          }
          else {
            ++v33;
          }
          continue;
        }
        if (v22)
        {
          int v13 = (int *)(*(uint64_t (**)(void))(*(void *)v22 + 32))();
          goto LABEL_30;
        }
      }
      else if (v26 >= v24)
      {
        goto LABEL_35;
      }
      int v13 = (int *)(v23 + 56 * v26);
LABEL_30:
      unint64_t v29 = fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((int *)a3, v13);
      uint64_t v30 = v14;
      (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(void *)a2 + 208))(a2, v11, &v29);
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
      }
      else {
        ++v26;
      }
      goto LABEL_24;
    }
    break;
  }
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
LABEL_47:
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v17 = v7 & 0x2EBC21080007;
  if (*(unsigned char *)(a3 + 4)) {
    uint64_t v17 = v7 & 0x2EBC21080003 | 4;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, v17 | v16, 0x3FFFFFFF0007);
}

void sub_1B1F789F4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  uint64_t v5 = *(void *)(v3 - 104);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()(int *a1, int *a2)
{
  if (a2[12] != -1) {
    goto LABEL_24;
  }
  uint64_t v4 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  int v5 = a2[2];
  uint64_t v6 = v5 ? *((void *)a2 + 4) + 1 : 0;
  uint64_t v7 = *(_DWORD *)v4 ? *(void *)(v4 + 24) + 1 : 0;
  if (v6 != v7) {
    goto LABEL_24;
  }
  char v8 = 0;
  BOOL v9 = (uint64_t *)(a2 + 6);
  uint64_t v10 = (uint64_t *)(v4 + 16);
  BOOL v11 = v5 && v5 == *(_DWORD *)v4;
  BOOL v12 = !v11;
  int v13 = !v12;
  while (1)
  {
    uint64_t v14 = *v9;
    uint64_t v15 = *v10;
    if ((v8 & 1) == 0 && !v13) {
      break;
    }
    if ((int *)v14 == a2 + 4) {
      goto LABEL_22;
    }
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16)) {
      goto LABEL_24;
    }
    BOOL v9 = (uint64_t *)(v14 + 8);
    uint64_t v10 = (uint64_t *)(v15 + 8);
    char v8 = 1;
  }
  if (v5) {
    goto LABEL_24;
  }
LABEL_22:
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = a2[10];
  v29[0] = 0.0;
  v29[0] = *(float *)(v4 + 32);
  if (*(float *)__p == v29[0])
  {
    unint64_t v16 = 0;
    unsigned int v17 = *a2;
  }
  else
  {
LABEL_24:
    unsigned int v28 = -1;
    if (!fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>((unsigned int *)a2 + 2, &v27, &v28)|| (unsigned int v17 = *a2, *a2 != a2[1]))
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      int v18 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
      uint64_t v19 = (void *)fst::cerr(v18);
      unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"FromGallicMapper: unrepresentable weight: ", 42);
      fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v29, v20);
      if (*FLAGS_fst_weight_parentheses)
      {
        char v30 = *FLAGS_fst_weight_parentheses;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)v29, (uint64_t)&v30, 1);
      }
      fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>((uint64_t)v29, a2 + 2);
      fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>((uint64_t)v29, (float *)a2 + 10);
      if (*FLAGS_fst_weight_parentheses)
      {
        char v30 = *(unsigned char *)(FLAGS_fst_weight_parentheses + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)v29, (uint64_t)&v30, 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for arc with ilabel = ", 23);
      int v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", olabel = ", 11);
      uint64_t v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", nextstate = ", 14);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      *((unsigned char *)a1 + 4) = 1;
      unsigned int v17 = *a2;
    }
    if (!v17 && v28 && a2[12] == -1) {
      unsigned int v17 = *a1;
    }
    unint64_t v16 = (unint64_t)v28 << 32;
  }
  return v16 | v17;
}

void sub_1B1F78D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v11 = *a1;
  uint64_t v6 = std::list<int>::list(&v12, (uint64_t)(a1 + 2));
  unsigned int v7 = a1[8];
  unsigned int v8 = v11;
  if (!v11) {
    goto LABEL_7;
  }
  if (v13 == -1)
  {
    unsigned int v8 = 0;
    goto LABEL_7;
  }
  uint64_t v9 = 0;
  if (!v13)
  {
    if (v11 > 0xFFFFFFFD)
    {
      uint64_t v9 = 0;
      goto LABEL_8;
    }
LABEL_7:
    *a3 = v8;
    *a2 = v7;
    uint64_t v9 = 1;
  }
LABEL_8:
  std::__list_imp<char *>::clear(v6);
  return v9;
}

void *fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>(uint64_t a1, int *a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 >= 1)
  {
    int v5 = *(void **)a1;
    char v7 = *FLAGS_fst_weight_separator;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v7, 1);
  }
  return fst::operator<<<int,(fst::StringType)1>(*(void **)a1, a2);
}

void *fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>(uint64_t a1, float *a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 >= 1)
  {
    int v5 = *(void **)a1;
    char v9 = *FLAGS_fst_weight_separator;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v9, 1);
  }
  if (*a2 == INFINITY)
  {
    uint64_t v6 = "Infinity";
    uint64_t v7 = 8;
  }
  else
  {
    if (*a2 != -INFINITY) {
      return (void *)std::ostream::operator<<();
    }
    uint64_t v6 = "-Infinity";
    uint64_t v7 = 9;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)v6, v7);
}

uint64_t fst::CompositeWeightWriter::CompositeWeightWriter(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (strlen(FLAGS_fst_weight_separator) == 1)
  {
    if ((strlen(FLAGS_fst_weight_parentheses) | 2) == 2) {
      return a1;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v4 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    int v5 = (void *)fst::cerr(v4);
    char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"CompositeWeightWriter: ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"FLAGS_fst_weight_parentheses.size() is not equal to 2", 53);
  }
  else
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v6 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    uint64_t v7 = (void *)fst::cerr(v6);
    unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"CompositeWeightWriter: ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"FLAGS_fst_weight_separator.size() is not equal to 1", 51);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), 1u);
  return a1;
}

void sub_1B1F79114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::operator<<<int,(fst::StringType)1>(void *a1, int *a2)
{
  int v4 = a2 + 2;
  int v3 = *a2;
  if (*a2 == -2)
  {
    int v5 = "BadString";
    uint64_t v6 = 9;
    goto LABEL_7;
  }
  if (v3 == -1)
  {
    int v5 = "Infinity";
    uint64_t v6 = 8;
    goto LABEL_7;
  }
  if (!v3)
  {
    int v5 = "Epsilon";
    uint64_t v6 = 7;
LABEL_7:
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, v6);
  }
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = *((void *)a2 + 2);
  if (*a2)
  {
    do
    {
      if (v8)
      {
        char v11 = 95;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v11, 1);
      }
      std::ostream::operator<<();
      if (v9) {
        uint64_t v10 = *(void *)(v10 + 8);
      }
      --v8;
      char v9 = 1;
    }
    while ((int *)v10 != v4);
  }
  return a1;
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A44198;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43260;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::StateMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, void **a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = (unint64_t)a2[5]; ; a2[5] = (void *)i)
        {
          char v9 = a2[2];
          if (i >= ((unsigned char *)a2[3] - v9) >> 4) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 208))(a1, v7, &v9[16 * i]);
          unint64_t i = (unint64_t)a2[5] + 1;
        }
        (*(void (**)(void *, uint64_t))(*(void *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 184))(a1, v7);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192);
    return v10(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState(void **a1, uint64_t a2)
{
  a1[5] = 0;
  int v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(void *))(*(void *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v26 = 0;
  (*(void (**)(void *, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v24);
  while (1)
  {
    if (!v24[0])
    {
      if (v26 >= v24[2]) {
        goto LABEL_29;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v24[0] + 24))(v24[0])) {
      break;
    }
    if (v24[0])
    {
      uint64_t v7 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)v24[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = (_OWORD *)(v24[1] + 16 * v26);
LABEL_8:
    char v9 = (char *)a1[3];
    unint64_t v8 = (unint64_t)a1[4];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = (v9 - (unsigned char *)*v4) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v8 - (void)*v4;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v14);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v16 = &v15[16 * v11];
      *(_OWORD *)unint64_t v16 = *v7;
      int v18 = (char *)a1[2];
      unsigned int v17 = (char *)a1[3];
      uint64_t v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        unsigned int v17 = (char *)*v4;
      }
      uint64_t v10 = v16 + 16;
      a1[2] = v19;
      a1[3] = v16 + 16;
      a1[4] = &v15[16 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_OWORD *)char v9 = *v7;
      uint64_t v10 = v9 + 16;
    }
    a1[3] = v10;
    if (v24[0]) {
      (*(void (**)(void))(*(void *)v24[0] + 40))(v24[0]);
    }
    else {
      ++v26;
    }
  }
  if (v24[0])
  {
    (*(void (**)(void))(*(void *)v24[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v25) {
    --*v25;
  }
LABEL_31:
  unint64_t v20 = (__n128 *)a1[2];
  int v21 = (long long *)a1[3];
  unint64_t v22 = 126 - 2 * __clz(((char *)v21 - (char *)v20) >> 4);
  if (v21 == (long long *)v20) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(v20, v21, (uint64_t)v24, v23, 1);
}

void sub_1B1F798EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(__n128 *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v6 = (long long *)&a2[-1];
      if ((signed __int32)a2[-1].n128_u32[0] < *(_DWORD *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *char v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (int *)&a2[-1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (__n128 *)a2[-1].n128_u64);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (__n128 *)(a1 + 48), a2 - 1);
      return 1;
    default:
      unint64_t v8 = (_DWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      char v9 = (_OWORD *)(a1 + 48);
      if ((__n128 *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    long long v12 = *v9;
    int v13 = *v9;
    if (v13 < *v8)
    {
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = *(_DWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v13 >= v15)
        {
          unint64_t v16 = (_OWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (_OWORD *)a1;
LABEL_12:
      _OWORD *v16 = v12;
      if (++v11 == 8) {
        return v9 + 1 == (_OWORD *)a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    if (++v9 == (_OWORD *)a2) {
      return 1;
    }
  }
}

void fst::RmEpsilon<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>>(void *a1, void *a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void *))(*(void *)a1 + 24))(a1) == -1) {
    return;
  }
  int v6 = (*(uint64_t (**)(void *))(*(void *)a1 + 160))(a1);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v62, v6, (unsigned __int8 *)&__p);
  int v7 = (*(uint64_t (**)(void *))(*(void *)a1 + 24))(a1);
  uint64_t v8 = 0;
  *(void *)&v62[((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v7;
LABEL_3:
  if ((int)v8 < (*(int (**)(void *))(*(void *)a1 + 160))(a1))
  {
    unint64_t v42 = 0;
    (*(void (**)(void *, uint64_t, void **))(*(void *)a1 + 136))(a1, v8, &__p);
    while (__p)
    {
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p))
      {
        if (__p)
        {
          (*(void (**)(void))(*(void *)__p + 8))();
          goto LABEL_26;
        }
LABEL_24:
        if (v41) {
          --*(_DWORD *)v41;
        }
LABEL_26:
        uint64_t v8 = (v8 + 1);
        goto LABEL_3;
      }
      if (!__p) {
        goto LABEL_12;
      }
      char v9 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
      uint64_t v10 = __p;
      if (*v9) {
        goto LABEL_15;
      }
      if (__p)
      {
        uint64_t v11 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
        uint64_t v10 = __p;
        goto LABEL_14;
      }
LABEL_13:
      uint64_t v10 = 0;
      uint64_t v11 = (uint64_t)&v39[2 * v42];
LABEL_14:
      if (*(_DWORD *)(v11 + 4))
      {
LABEL_15:
        if (v10)
        {
          uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v10 + 32))(v10);
          uint64_t v10 = __p;
        }
        else
        {
LABEL_17:
          uint64_t v10 = 0;
          uint64_t v12 = (uint64_t)&v39[2 * v42];
        }
        *(void *)&v62[((unint64_t)*(int *)(v12 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *(_DWORD *)(v12 + 12);
      }
      if (v10) {
        (*(void (**)(void *))(*(void *)v10 + 40))(v10);
      }
      else {
        ++v42;
      }
    }
    if (v42 >= v40) {
      goto LABEL_24;
    }
LABEL_12:
    if (LODWORD(v39[2 * v42])) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  memset(&v61, 0, sizeof(v61));
  int v13 = (*(uint64_t (**)(void *))(*(void *)a1 + 160))(a1);
  std::vector<int>::reserve(&v61, v13);
  if (((*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 64))(a1, 0x4000000000, 0) & 0x4000000000) == 0)
  {
    if (((*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 64))(a1, 0x800000000, 0) & 0x800000000) == 0)
    {
      uint64_t v60 = 0;
      p_p = 0;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      std::string __p = &p_p;
      float v39 = 0;
      unint64_t v40 = 0;
      char v41 = &v60;
      fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t)&__p);
    }
    std::string __p = 0;
    float v39 = 0;
    unint64_t v40 = 0;
    LOBYTE(v59.__begin_) = 0;
    p_p = &__p;
    uint64_t v64 = &v59;
    fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>();
  }
  for (signed int i = 0; i < (*(int (**)(void *))(*(void *)a1 + 160))(a1); ++i)
  {
    std::vector<unsigned int>::pointer end = v61.__end_;
    if (v61.__end_ >= v61.__end_cap_.__value_)
    {
      std::vector<unsigned int>::pointer begin = v61.__begin_;
      int64_t v18 = v61.__end_ - v61.__begin_;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v20 = (char *)v61.__end_cap_.__value_ - (char *)v61.__begin_;
      if (((char *)v61.__end_cap_.__value_ - (char *)v61.__begin_) >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        signed __int32 v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v61.__end_cap_, v21);
        std::vector<unsigned int>::pointer begin = v61.__begin_;
        std::vector<unsigned int>::pointer end = v61.__end_;
      }
      else
      {
        signed __int32 v22 = 0;
      }
      uint64_t v23 = (unsigned int *)&v22[4 * v18];
      *uint64_t v23 = i;
      unint64_t v16 = v23 + 1;
      while (end != begin)
      {
        unsigned int v24 = *--end;
        *--uint64_t v23 = v24;
      }
      v61.__begin_ = v23;
      v61.__end_ = v16;
      v61.__end_cap_.__value_ = (unsigned int *)&v22[4 * v21];
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *v61.__end_ = i;
      unint64_t v16 = end + 1;
    }
    v61.__end_ = v16;
  }
  std::string __p = a1;
  float v39 = a2;
  unint64_t v40 = (unint64_t)a1;
  char v41 = a2;
  unint64_t v42 = *(void *)a3;
  int v43 = *(_DWORD *)(a3 + 16);
  char v44 = *(unsigned char *)(a3 + 20);
  char v45 = 1;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  memset(v49, 0, 29);
  a2[1] = *a2;
  memset(v50, 0, sizeof(v50));
  int v51 = 1065353216;
  int v58 = 0;
  long long v55 = 0u;
  memset(v52, 0, sizeof(v52));
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v56 = 0;
  for (std::vector<unsigned int>::pointer j = v61.__end_; v61.__begin_ != v61.__end_; std::vector<unsigned int>::pointer j = v61.__end_)
  {
    unint64_t v26 = (int)*(j - 1);
    v61.__end_ = j - 1;
    if (((*(void *)&v62[(v26 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v26) & 1) == 0)
    {
      if (*(unsigned char *)(a3 + 21)) {
        continue;
      }
      LODWORD(p_p) = 0;
      LODWORD(p_p) = *(_DWORD *)(a3 + 22);
      LODWORD(v59.__begin_) = 2139095040;
      if (*(float *)&p_p != INFINITY || *(_DWORD *)(a3 + 28) != -1) {
        continue;
      }
    }
    fst::RmEpsilonState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>>::Expand(&__p, v26);
    (*(void (**)(void *, unint64_t, float))(*(void *)a1 + 184))(a1, v26, v57);
    (*(void (**)(void *, unint64_t))(*(void *)a1 + 240))(a1, v26);
    (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 256))(a1, v26, (uint64_t)(*((void *)&v55 + 1) - v55) >> 4);
    uint64_t v27 = *((void *)&v55 + 1);
    uint64_t v28 = v55;
    while (v28 != v27)
    {
      (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 208))(a1, v26, v27 - 16);
      uint64_t v28 = v55;
      uint64_t v27 = *((void *)&v55 + 1) - 16;
      *((void *)&v55 + 1) -= 16;
    }
  }
  if (*(unsigned char *)(a3 + 21)
    || (LODWORD(p_p) = 0,
        LODWORD(p_p) = *(_DWORD *)(a3 + 22),
        LODWORD(v59.__begin_) = 2139095040,
        *(float *)&p_p != INFINITY)
    || *(_DWORD *)(a3 + 28) != -1)
  {
    for (unint64_t k = 0; (uint64_t)k < (*(int (**)(void *))(*(void *)a1 + 160))(a1); ++k)
    {
      if (((*(void *)&v62[(k >> 3) & 0x1FFFFFFFFFFFFFF8] >> k) & 1) == 0) {
        (*(void (**)(void *, unint64_t))(*(void *)a1 + 240))(a1, k);
      }
    }
  }
  if (BYTE12(v49[1])) {
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
  }
  unint64_t v31 = (*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v32 = fst::RmEpsilonProperties(v31, 0);
  (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v32, 0x3FFFFFFF0007);
  LODWORD(p_p) = 0;
  float v33 = *(float *)(a3 + 22);
  *(float *)&p_p = v33;
  LODWORD(v59.__begin_) = 2139095040;
  unsigned int v34 = *(_DWORD *)(a3 + 28);
  if (v33 != INFINITY || v34 != -1)
  {
    p_p = (void **)__PAIR64__(v34, LODWORD(v33));
    uint64_t v65 = 0;
    int v66 = 981467136;
    fst::Prune<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>((uint64_t)a1);
  }
  if (*(unsigned char *)(a3 + 21))
  {
    LODWORD(p_p) = 0;
    LODWORD(p_p) = *(_DWORD *)(a3 + 22);
    LODWORD(v59.__begin_) = 2139095040;
    if (*(float *)&p_p == INFINITY && *(_DWORD *)(a3 + 28) == -1) {
      fst::Connect<fst::ArcTpl<fst::LogWeightTpl<float>,int>>((uint64_t)a1);
    }
  }
  if ((void)v55)
  {
    *((void *)&v55 + 1) = v55;
    operator delete((void *)v55);
  }
  int v36 = (void *)*((void *)&v54 + 1);
  if (*((void *)&v54 + 1))
  {
    do
    {
      char v37 = (void *)*v36;
      operator delete(v36);
      int v36 = v37;
    }
    while (v37);
  }
  *((void *)&v54 + 1) = 0;
  if ((void)v53) {
    operator delete((void *)v53);
  }
  std::deque<int>::~deque[abi:ne180100](v52);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v50);
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(&v40);
  if (v61.__begin_)
  {
    v61.__end_ = v61.__begin_;
    operator delete(v61.__begin_);
  }
  if (v62) {
    operator delete(v62);
  }
}

void sub_1B1F7AAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v13 - 200));
  if (*(char *)(v13 - 169) < 0) {
    operator delete(*(void **)(v13 - 192));
  }
  if (__p) {
    operator delete(__p);
  }
  int v15 = *(void **)(v13 - 168);
  if (v15)
  {
    *(void *)(v13 - 160) = v15;
    operator delete(v15);
  }
  unint64_t v16 = *(void **)(v13 - 144);
  if (v16) {
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      uint64_t v6 = 0;
      v5[0] = v3;
      v5[1] = 0;
      void v5[2] = 0;
      void v5[3] = &v6;
      fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a2, (uint64_t)v5);
    }
    operator new();
  }
  operator new();
}

void sub_1B1F7B300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  long long v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  unint64_t v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F7BCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NaturalLess<fst::LogWeightTpl<float>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v12 = *(void *)(a3 + 8) - *(void *)a3;
  if (v12)
  {
    unint64_t v13 = v12 >> 2;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    bzero(*(void **)a3, 4 * v13);
  }
  unsigned int v27 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v25);
  while (1)
  {
    uint64_t result = v25;
    if (!v25)
    {
      if ((int)v27 >= v26) {
        return result;
      }
LABEL_11:
      uint64_t v16 = v27;
      goto LABEL_12;
    }
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 16))(v25);
    uint64_t result = v25;
    if (v15) {
      break;
    }
    if (!v25) {
      goto LABEL_11;
    }
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v25 + 24))();
LABEL_12:
    unint64_t v24 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v16, v22);
    while (1)
    {
      if (!v22[0])
      {
        if (v24 >= v22[2]) {
          goto LABEL_34;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v22[0] + 24))(v22[0])) {
        break;
      }
      if (v22[0])
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v22[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = v22[1] + 16 * v24;
LABEL_19:
      if (!*(void *)v17)
      {
        uint64_t v18 = *(int *)(*a2 + 4 * (int)v16);
        if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 12)))
        {
          uint64_t v19 = *(_DWORD **)a3;
          if (!a4
            || (int v21 = 0, fst::NaturalLess<fst::LogWeightTpl<float>>::operator()(a4, (float *)(v17 + 8), (float *)&v21)))
          {
            int v20 = 1;
            goto LABEL_26;
          }
          if ((v19[v18] | 2) == 2)
          {
            int v20 = 3;
LABEL_26:
            v19[v18] = v20;
          }
          *a5 = 0;
        }
        *a6 = 0;
      }
      if (v22[0]) {
        (*(void (**)(void))(*(void *)v22[0] + 40))(v22[0]);
      }
      else {
        ++v24;
      }
    }
    if (v22[0])
    {
      (*(void (**)(void))(*(void *)v22[0] + 8))();
      goto LABEL_36;
    }
LABEL_34:
    if (v23) {
      --*v23;
    }
LABEL_36:
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 32))(v25);
    }
    else {
      ++v27;
    }
  }
  if (v25) {
    return (*(uint64_t (**)(void))(*(void *)v25 + 8))();
  }
  return result;
}

void sub_1B1F7C0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  int v2 = &v3;
  fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>();
}

void sub_1B1F7C284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  signed __int32 v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>()
{
}

void sub_1B1F7CBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::RmEpsilonState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>>::Expand(void *a1, int a2)
{
  v67[0] = a2;
  *((_DWORD *)a1 + 72) = 2139095040;
  a1[34] = a1[33];
  fst::ShortestDistanceState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ShortestDistance(a1 + 2, a2);
  if (*((unsigned char *)a1 + 132)) {
    return;
  }
  std::deque<int>::push_back(a1 + 23, v67);
  uint64_t v3 = a1[28];
  if (!v3) {
    goto LABEL_90;
  }
  uint64_t v4 = (char **)(a1 + 33);
  char v5 = a1 + 29;
  uint64_t v56 = (uint64_t)(a1 + 35);
  do
  {
    uint64_t v6 = v3 - 1;
    uint64_t v7 = *(unsigned int *)(*(void *)(a1[24] + (((unint64_t)(a1[27] + v6) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((a1[27] + v6) & 0x3FF));
    a1[28] = v6;
    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](a1 + 23, 1);
    while (a1[30] <= (unint64_t)(int)v7)
    {
      LOBYTE(v64[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 29), v64);
    }
    uint64_t v8 = *(void *)(*v5 + 8 * ((unint64_t)(int)v7 >> 6));
    if ((v8 & (1 << v7)) != 0) {
      goto LABEL_86;
    }
    *(void *)(*v5 + 8 * ((unint64_t)(int)v7 >> 6)) = v8 | (1 << v7);
    uint64_t v9 = a1[32];
    uint64_t v10 = operator new(0x10uLL);
    *(void *)uint64_t v10 = v9;
    v10[2] = v7;
    a1[32] = v10;
    uint64_t v11 = *a1;
    unint64_t v66 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v11 + 136))(v11, v7, v64);
    while (1)
    {
      if (!v64[0])
      {
        if (v66 >= v64[2]) {
          goto LABEL_70;
        }
        goto LABEL_13;
      }
      if ((*(unsigned int (**)(void))(*(void *)v64[0] + 24))(v64[0])) {
        break;
      }
      if (v64[0])
      {
        uint64_t v12 = (long long *)(*(uint64_t (**)(void))(*(void *)v64[0] + 32))();
        goto LABEL_14;
      }
LABEL_13:
      uint64_t v12 = (long long *)(v64[1] + 16 * v66);
LABEL_14:
      long long v63 = *v12;
      float v13 = *(float *)(*(void *)a1[1] + 4 * (int)v7);
      float v14 = NAN;
      if (v13 != -INFINITY)
      {
        float v14 = NAN;
        if (*((float *)&v63 + 2) != -INFINITY)
        {
          float v14 = INFINITY;
          BOOL v15 = *((float *)&v63 + 2) == INFINITY || v13 == INFINITY;
          float v16 = v13 + *((float *)&v63 + 2);
          if (!v15) {
            float v14 = v16;
          }
        }
      }
      *((float *)&v63 + 2) = v14;
      if ((void)v63)
      {
        uint64_t v61 = v63;
        int v62 = HIDWORD(v63);
        uint64_t v17 = std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::find<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element>(a1 + 17, (int *)&v61);
        if (!v17)
        {
          uint64_t v24 = (uint64_t)(a1[34] - a1[33]) >> 4;
          int v25 = *((_DWORD *)a1 + 73);
          uint64_t v57 = v61;
          int v58 = v62;
          int v59 = v25;
          uint64_t v60 = v24;
          std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::__emplace_unique_key_args<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>((uint64_t)(a1 + 17), (int *)&v57, (uint64_t)&v57);
          unsigned int v27 = (_OWORD *)a1[34];
          unint64_t v26 = a1[35];
          if ((unint64_t)v27 < v26) {
            goto LABEL_41;
          }
          uint64_t v28 = ((char *)v27 - *v4) >> 4;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60) {
            goto LABEL_94;
          }
          uint64_t v30 = v26 - (void)*v4;
          if (v30 >> 3 > v29) {
            unint64_t v29 = v30 >> 3;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31) {
            unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v56, v31);
          }
          else {
            unint64_t v32 = 0;
          }
          float v39 = &v32[16 * v28];
          *(_OWORD *)float v39 = v63;
          char v41 = (char *)a1[33];
          unint64_t v40 = (char *)a1[34];
          unint64_t v42 = v39;
          if (v40 != v41)
          {
            do
            {
              *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
              v42 -= 16;
              v40 -= 16;
            }
            while (v40 != v41);
LABEL_57:
            unint64_t v40 = *v4;
          }
LABEL_58:
          int v36 = v39 + 16;
          a1[33] = v42;
          a1[34] = v39 + 16;
          a1[35] = &v32[16 * v31];
          if (v40) {
            operator delete(v40);
          }
          goto LABEL_60;
        }
        int v18 = *((_DWORD *)a1 + 73);
        if (*((_DWORD *)v17 + 8) != v18)
        {
          *((_DWORD *)v17 + 8) = v18;
          uint64_t v33 = a1[33];
          unsigned int v27 = (_OWORD *)a1[34];
          uint64_t v34 = ((uint64_t)v27 - v33) >> 4;
          v17[5] = v34;
          unint64_t v35 = a1[35];
          if ((unint64_t)v27 < v35)
          {
LABEL_41:
            _OWORD *v27 = v63;
            int v36 = v27 + 1;
LABEL_60:
            a1[34] = v36;
            goto LABEL_65;
          }
          unint64_t v37 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 60) {
LABEL_94:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v38 = v35 - v33;
          if (v38 >> 3 > v37) {
            unint64_t v37 = v38 >> 3;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v37;
          }
          if (v31) {
            unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v56, v31);
          }
          else {
            unint64_t v32 = 0;
          }
          float v39 = &v32[16 * v34];
          *(_OWORD *)float v39 = v63;
          int v43 = (char *)a1[33];
          unint64_t v40 = (char *)a1[34];
          unint64_t v42 = v39;
          if (v40 != v43)
          {
            do
            {
              *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
              v42 -= 16;
              v40 -= 16;
            }
            while (v40 != v43);
            goto LABEL_57;
          }
          goto LABEL_58;
        }
        uint64_t v19 = (uint64_t)&(*v4)[16 * v17[5]];
        float v21 = *(float *)(v19 + 8);
        uint64_t v20 = (float *)(v19 + 8);
        float v22 = v21;
        float v23 = *((float *)&v63 + 2);
        if (v21 != INFINITY)
        {
          if (*((float *)&v63 + 2) == INFINITY)
          {
            float v23 = v22;
          }
          else if (v22 <= *((float *)&v63 + 2))
          {
            float v45 = expf(-(float)(*((float *)&v63 + 2) - v22));
            float v23 = v22 - logf(v45 + 1.0);
          }
          else
          {
            float v44 = expf(-(float)(v22 - *((float *)&v63 + 2)));
            float v23 = v23 - logf(v44 + 1.0);
          }
        }
        float *v20 = v23;
      }
      else
      {
        while (a1[30] <= (unint64_t)SHIDWORD(v63))
        {
          LOBYTE(v57) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 29), &v57);
        }
        if (((*(void *)(*v5 + (((unint64_t)SHIDWORD(v63) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE12(v63)) & 1) == 0) {
          std::deque<int>::push_back(a1 + 23, (_DWORD *)&v63 + 3);
        }
      }
LABEL_65:
      if (v64[0]) {
        (*(void (**)(void))(*(void *)v64[0] + 40))(v64[0]);
      }
      else {
        ++v66;
      }
    }
    if (v64[0])
    {
      (*(void (**)(void))(*(void *)v64[0] + 8))();
    }
    else
    {
LABEL_70:
      if (v65) {
        --*v65;
      }
    }
    uint64_t v46 = *(void *)a1[1];
    (*(void (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, v7);
    float v48 = *(float *)(v46 + 4 * (int)v7);
    if (v48 == -INFINITY || v47 == -INFINITY)
    {
      float v52 = *((float *)a1 + 72);
      float v51 = NAN;
      if (v52 == INFINITY) {
        goto LABEL_85;
      }
      goto LABEL_84;
    }
    BOOL v49 = v47 == INFINITY || v48 == INFINITY;
    float v50 = v48 + v47;
    if (v49) {
      float v51 = INFINITY;
    }
    else {
      float v51 = v50;
    }
    float v52 = *((float *)a1 + 72);
    if (v52 != INFINITY)
    {
      if (v51 == INFINITY)
      {
        float v51 = *((float *)a1 + 72);
        goto LABEL_85;
      }
      if (v52 > v51)
      {
        float v54 = expf(-(float)(v52 - v51));
        float v51 = v51 - logf(v54 + 1.0);
        goto LABEL_85;
      }
LABEL_84:
      float v53 = expf(-(float)(v51 - v52));
      float v51 = v52 - logf(v53 + 1.0);
    }
LABEL_85:
    *((float *)a1 + 72) = v51;
LABEL_86:
    uint64_t v3 = a1[28];
  }
  while (v3);
LABEL_90:
  for (signed int i = (int *)a1[32]; i; signed int i = (int *)a1[32])
  {
    *(void *)(a1[29] + (((unint64_t)i[2] >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i[2]);
    a1[32] = *(void *)i;
    operator delete(i);
  }
  ++*((_DWORD *)a1 + 73);
}

void sub_1B1F7D308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_DWORD *a23)
{
  if (a20)
  {
    (*(void (**)(uint64_t))(*(void *)a20 + 8))(a20);
  }
  else if (a23)
  {
    --*a23;
  }
  _Unwind_Resume(exception_object);
}

void *fst::RmEpsilonState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>>::~RmEpsilonState(void *a1)
{
  int v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[32];
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  a1[32] = 0;
  char v5 = (void *)a1[29];
  if (v5) {
    operator delete(v5);
  }
  std::deque<int>::~deque[abi:ne180100](a1 + 23);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 17));
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(a1 + 2);
  return a1;
}

void fst::ShortestDistanceState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
      return;
    }
    goto LABEL_234;
  }
  if (*((unsigned char *)a1 + 32))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v153, (uint64_t)__p);
    char v5 = (void *)fst::cerr(v4);
    int v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ShortestDistance: first_path option disallowed when ", 52);
    uint64_t v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)"Weight does not have the path property: ", 40);
    uint64_t v143 = fst::LogWeightTpl<float>::Type();
    int v144 = *(char *)(v143 + 23);
    if (v144 >= 0) {
      uint64_t v145 = v143;
    }
    else {
      uint64_t v145 = *(void *)v143;
    }
    if (v144 >= 0) {
      uint64_t v146 = *(unsigned __int8 *)(v143 + 23);
    }
    else {
      uint64_t v146 = *(void *)(v143 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, v145, v146);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v153);
    if (SHIBYTE(v150) < 0) {
      operator delete(__p[0]);
    }
LABEL_234:
    uint64_t v147 = (char *)a1 + 116;
    goto LABEL_235;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v6 = a2;
  uint64_t v7 = (void **)a1[1];
  uint64_t v9 = v7 + 1;
  uint64_t v8 = v7[1];
  uint64_t v10 = (char *)*v7;
  unint64_t v11 = ((char *)v8 - (unsigned char *)*v7) >> 2;
  if (v11 <= a2)
  {
    uint64_t v12 = (char **)(a1 + 5);
    do
    {
      unint64_t v13 = (unint64_t)v7[2];
      if ((unint64_t)v8 >= v13)
      {
        if ((v11 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v13 - (void)v10;
        uint64_t v16 = v15 >> 1;
        if (v15 >> 1 <= v11 + 1) {
          uint64_t v16 = v11 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v7 + 2), v17);
        }
        else {
          int v18 = 0;
        }
        uint64_t v19 = &v18[4 * v11];
        *(_DWORD *)uint64_t v19 = 2139095040;
        float v14 = v19 + 4;
        uint64_t v20 = (char *)*v9;
        float v21 = (char *)*v7;
        if (*v9 != *v7)
        {
          do
          {
            int v22 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v19 - 1) = v22;
            v19 -= 4;
          }
          while (v20 != v21);
          uint64_t v20 = (char *)*v7;
        }
        *uint64_t v7 = v19;
        _DWORD *v9 = v14;
        v7[2] = &v18[4 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v8 = 2139095040;
        float v14 = v8 + 1;
      }
      _DWORD *v9 = v14;
      uint64_t v24 = (_DWORD *)a1[6];
      unint64_t v23 = a1[7];
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = ((char *)v24 - *v12) >> 2;
        if ((unint64_t)(v26 + 1) >> 62) {
LABEL_241:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v27 = v23 - (void)*v12;
        uint64_t v28 = v27 >> 1;
        if (v27 >> 1 <= (unint64_t)(v26 + 1)) {
          uint64_t v28 = v26 + 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v29);
        }
        else {
          uint64_t v30 = 0;
        }
        unint64_t v31 = &v30[4 * v26];
        *(_DWORD *)unint64_t v31 = 2139095040;
        int v25 = v31 + 4;
        uint64_t v33 = (char *)a1[5];
        unint64_t v32 = (char *)a1[6];
        if (v32 != v33)
        {
          do
          {
            int v34 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v31 - 1) = v34;
            v31 -= 4;
          }
          while (v32 != v33);
          unint64_t v32 = *v12;
        }
        a1[5] = v31;
        a1[6] = v25;
        a1[7] = &v30[4 * v29];
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        _DWORD *v24 = 2139095040;
        int v25 = v24 + 1;
      }
      a1[6] = v25;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), __p);
      uint64_t v7 = (void **)a1[1];
      uint64_t v9 = v7 + 1;
      uint64_t v8 = v7[1];
      uint64_t v10 = (char *)*v7;
      unint64_t v11 = ((char *)v8 - (unsigned char *)*v7) >> 2;
    }
    while (v11 <= v6);
  }
  if (*((unsigned char *)a1 + 33))
  {
    unint64_t v35 = (char *)a1[11];
    int v36 = (char *)a1[12];
    unint64_t v37 = (v36 - v35) >> 2;
    if (v37 <= v6)
    {
      uint64_t v38 = a1 + 13;
      do
      {
        if ((unint64_t)v36 >= *v38)
        {
          unint64_t v40 = v37 + 1;
          if ((v37 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = *v38 - (void)v35;
          if (v41 >> 1 > v40) {
            unint64_t v40 = v41 >> 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            int v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v42);
            unint64_t v35 = (char *)a1[11];
            int v36 = (char *)a1[12];
          }
          else
          {
            int v43 = 0;
          }
          float v44 = &v43[4 * v37];
          *(_DWORD *)float v44 = -1;
          float v39 = v44 + 4;
          while (v36 != v35)
          {
            int v45 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          a1[11] = v44;
          a1[12] = v39;
          a1[13] = &v43[4 * v42];
          if (v35)
          {
            operator delete(v35);
            unint64_t v35 = (char *)a1[11];
          }
          else
          {
            unint64_t v35 = v44;
          }
        }
        else
        {
          *(_DWORD *)int v36 = -1;
          float v39 = v36 + 4;
        }
        a1[12] = v39;
        unint64_t v37 = (v39 - v35) >> 2;
        int v36 = v39;
      }
      while (v37 <= v6);
      uint64_t v10 = *(char **)a1[1];
    }
    *(_DWORD *)&v35[4 * v6] = *((_DWORD *)a1 + 28);
  }
  *(_DWORD *)&v10[4 * v6] = 0;
  uint64_t v46 = (char **)(a1 + 5);
  *(_DWORD *)(a1[5] + 4 * v6) = 0;
  *(void *)(a1[8] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v6);
  uint64_t v148 = (uint64_t)(a1 + 7);
  float v47 = a1 + 13;
  uint64_t v147 = (char *)a1 + 116;
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_236;
    }
    int v48 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    BOOL v49 = (void **)a1[1];
    float v50 = v49 + 1;
    float v51 = v49[1];
    float v52 = (char *)*v49;
    for (unint64_t i = ((char *)v51 - (unsigned char *)*v49) >> 2; i <= v48; unint64_t i = ((char *)v51 - (unsigned char *)*v49) >> 2)
    {
      unint64_t v54 = (unint64_t)v49[2];
      if ((unint64_t)v51 >= v54)
      {
        if ((i + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v56 = v54 - (void)v52;
        uint64_t v57 = v56 >> 1;
        if (v56 >> 1 <= i + 1) {
          uint64_t v57 = i + 1;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v57;
        }
        if (v58) {
          int v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v49 + 2), v58);
        }
        else {
          int v59 = 0;
        }
        uint64_t v60 = &v59[4 * i];
        *(_DWORD *)uint64_t v60 = 2139095040;
        long long v55 = v60 + 4;
        uint64_t v61 = (char *)*v50;
        int v62 = (char *)*v49;
        if (*v50 != *v49)
        {
          do
          {
            int v63 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *((_DWORD *)v60 - 1) = v63;
            v60 -= 4;
          }
          while (v61 != v62);
          uint64_t v61 = (char *)*v49;
        }
        *BOOL v49 = v60;
        *float v50 = v55;
        _OWORD v49[2] = &v59[4 * v58];
        if (v61) {
          operator delete(v61);
        }
      }
      else
      {
        *float v51 = 2139095040;
        long long v55 = v51 + 1;
      }
      *float v50 = v55;
      uint64_t v65 = (_DWORD *)a1[6];
      unint64_t v64 = a1[7];
      if ((unint64_t)v65 >= v64)
      {
        uint64_t v67 = ((char *)v65 - *v46) >> 2;
        if ((unint64_t)(v67 + 1) >> 62) {
          goto LABEL_241;
        }
        uint64_t v68 = v64 - (void)*v46;
        uint64_t v69 = v68 >> 1;
        if (v68 >> 1 <= (unint64_t)(v67 + 1)) {
          uint64_t v69 = v67 + 1;
        }
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v69;
        }
        if (v70) {
          float v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v148, v70);
        }
        else {
          float v71 = 0;
        }
        unint64_t v72 = &v71[4 * v67];
        *(_DWORD *)unint64_t v72 = 2139095040;
        unint64_t v66 = v72 + 4;
        char v74 = (char *)a1[5];
        int v73 = (char *)a1[6];
        if (v73 != v74)
        {
          do
          {
            int v75 = *((_DWORD *)v73 - 1);
            v73 -= 4;
            *((_DWORD *)v72 - 1) = v75;
            v72 -= 4;
          }
          while (v73 != v74);
          int v73 = *v46;
        }
        a1[5] = v72;
        a1[6] = v66;
        a1[7] = &v71[4 * v70];
        if (v73) {
          operator delete(v73);
        }
      }
      else
      {
        _DWORD *v65 = 2139095040;
        unint64_t v66 = v65 + 1;
      }
      a1[6] = v66;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), __p);
      BOOL v49 = (void **)a1[1];
      float v50 = v49 + 1;
      float v51 = v49[1];
      float v52 = (char *)*v49;
    }
    if (*((unsigned char *)a1 + 32))
    {
      LODWORD(__p[0]) = (*(float (**)(void, void))(*(void *)*a1 + 32))(*a1, v48);
      int v153 = 2139095040;
      if (*(float *)__p != INFINITY)
      {
LABEL_236:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
          return;
        }
LABEL_235:
        unsigned char *v147 = 1;
        return;
      }
    }
    *(void *)(a1[8] + (((unint64_t)v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v48);
    uint64_t v76 = a1[5];
    float v77 = *(float *)(v76 + 4 * v48);
    *(_DWORD *)(v76 + 4 * v48) = 2139095040;
    uint64_t v78 = *a1;
    unint64_t v152 = 0;
    (*(void (**)(uint64_t, void, void **))(*(void *)v78 + 136))(v78, v48, __p);
    while (1)
    {
      if (__p[0])
      {
        if ((*(uint64_t (**)(void *))(*(void *)__p[0] + 24))(__p[0])) {
          goto LABEL_217;
        }
        if (__p[0])
        {
          uint64_t v79 = (char *)(*(uint64_t (**)(void *))(*(void *)__p[0] + 32))(__p[0]);
          goto LABEL_114;
        }
      }
      else if (v152 >= v150)
      {
LABEL_217:
        char v140 = 1;
        goto LABEL_218;
      }
      uint64_t v79 = (char *)__p[1] + 16 * v152;
LABEL_114:
      if (*(void *)v79) {
        goto LABEL_214;
      }
      uint64_t v80 = (void **)a1[1];
      unint64_t v81 = v80 + 1;
      int v82 = v80[1];
      int v83 = (char *)*v80;
      unint64_t v84 = ((char *)v82 - (unsigned char *)*v80) >> 2;
      if (v84 <= *((int *)v79 + 3))
      {
        do
        {
          unint64_t v86 = (unint64_t)v80[2];
          if ((unint64_t)v82 >= v86)
          {
            if ((v84 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v88 = v86 - (void)v83;
            uint64_t v89 = v88 >> 1;
            if (v88 >> 1 <= v84 + 1) {
              uint64_t v89 = v84 + 1;
            }
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v90 = v89;
            }
            if (v90) {
              unint64_t v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v80 + 2), v90);
            }
            else {
              unint64_t v91 = 0;
            }
            uint64_t v92 = &v91[4 * v84];
            *(_DWORD *)uint64_t v92 = 2139095040;
            uint64_t v87 = v92 + 4;
            BOOL v93 = (char *)*v81;
            BOOL v94 = (char *)*v80;
            if (*v81 != *v80)
            {
              do
              {
                int v95 = *((_DWORD *)v93 - 1);
                v93 -= 4;
                *((_DWORD *)v92 - 1) = v95;
                v92 -= 4;
              }
              while (v93 != v94);
              BOOL v93 = (char *)*v80;
            }
            *uint64_t v80 = v92;
            _DWORD *v81 = v87;
            v80[2] = &v91[4 * v90];
            if (v93) {
              operator delete(v93);
            }
          }
          else
          {
            _DWORD *v82 = 2139095040;
            uint64_t v87 = v82 + 1;
          }
          _DWORD *v81 = v87;
          uint64_t v97 = (_DWORD *)a1[6];
          unint64_t v96 = a1[7];
          if ((unint64_t)v97 >= v96)
          {
            uint64_t v99 = ((char *)v97 - *v46) >> 2;
            if ((unint64_t)(v99 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v100 = v96 - (void)*v46;
            uint64_t v101 = v100 >> 1;
            if (v100 >> 1 <= (unint64_t)(v99 + 1)) {
              uint64_t v101 = v99 + 1;
            }
            if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v102 = v101;
            }
            if (v102) {
              unint64_t v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v148, v102);
            }
            else {
              unint64_t v103 = 0;
            }
            uint64_t v104 = &v103[4 * v99];
            *(_DWORD *)uint64_t v104 = 2139095040;
            int v98 = v104 + 4;
            unsigned int v106 = (char *)a1[5];
            int v105 = (char *)a1[6];
            if (v105 != v106)
            {
              do
              {
                int v107 = *((_DWORD *)v105 - 1);
                v105 -= 4;
                *((_DWORD *)v104 - 1) = v107;
                v104 -= 4;
              }
              while (v105 != v106);
              int v105 = *v46;
            }
            a1[5] = v104;
            a1[6] = v98;
            a1[7] = &v103[4 * v102];
            if (v105) {
              operator delete(v105);
            }
          }
          else
          {
            *uint64_t v97 = 2139095040;
            int v98 = v97 + 1;
          }
          a1[6] = v98;
          LOBYTE(v153) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v153);
          uint64_t v80 = (void **)a1[1];
          unint64_t v81 = v80 + 1;
          int v82 = v80[1];
          int v83 = (char *)*v80;
          unint64_t v84 = ((char *)v82 - (unsigned char *)*v80) >> 2;
          unint64_t v85 = *((int *)v79 + 3);
        }
        while (v84 <= v85);
      }
      else
      {
        LODWORD(v85) = *((_DWORD *)v79 + 3);
      }
      if (*((unsigned char *)a1 + 33))
      {
        std::vector<unsigned int> v108 = (char *)a1[11];
        uint64_t v109 = (char *)a1[12];
        unint64_t v110 = (v109 - v108) >> 2;
        if (v110 <= (int)v85)
        {
          do
          {
            if ((unint64_t)v109 >= *v47)
            {
              unint64_t v113 = v110 + 1;
              if ((v110 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v114 = *v47 - (void)v108;
              if (v114 >> 1 > v113) {
                unint64_t v113 = v114 >> 1;
              }
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v113;
              }
              if (v115)
              {
                unint64_t v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v115);
                std::vector<unsigned int> v108 = (char *)a1[11];
                uint64_t v109 = (char *)a1[12];
              }
              else
              {
                unint64_t v116 = 0;
              }
              float v117 = &v116[4 * v110];
              *(_DWORD *)float v117 = -1;
              int v112 = v117 + 4;
              while (v109 != v108)
              {
                int v118 = *((_DWORD *)v109 - 1);
                v109 -= 4;
                *((_DWORD *)v117 - 1) = v118;
                v117 -= 4;
              }
              a1[11] = v117;
              a1[12] = v112;
              a1[13] = &v116[4 * v115];
              if (v108)
              {
                operator delete(v108);
                std::vector<unsigned int> v108 = (char *)a1[11];
              }
              else
              {
                std::vector<unsigned int> v108 = v117;
              }
            }
            else
            {
              *(_DWORD *)uint64_t v109 = -1;
              int v112 = v109 + 4;
            }
            a1[12] = v112;
            unint64_t v110 = (v112 - v108) >> 2;
            LODWORD(v85) = *((_DWORD *)v79 + 3);
            uint64_t v109 = v112;
          }
          while (v110 <= (int)v85);
          uint64_t v111 = (int)v85;
          uint64_t v80 = (void **)a1[1];
        }
        else
        {
          uint64_t v111 = (int)v85;
        }
        if (*(_DWORD *)&v108[4 * v111] != *((_DWORD *)a1 + 28))
        {
          *((_DWORD *)*v80 + v111) = 2139095040;
          *(_DWORD *)(a1[5] + 4 * *((int *)v79 + 3)) = 2139095040;
          unint64_t v85 = *((int *)v79 + 3);
          *(void *)(a1[8] + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v85);
          *(_DWORD *)(a1[11] + 4 * v85) = *((_DWORD *)a1 + 28);
          uint64_t v80 = (void **)a1[1];
          LODWORD(v85) = *((_DWORD *)v79 + 3);
        }
      }
      BOOL v119 = (char *)*v80;
      int v120 = *v46;
      float v121 = NAN;
      if (v77 != -INFINITY)
      {
        float v122 = *((float *)v79 + 2);
        float v121 = NAN;
        if (v122 != -INFINITY)
        {
          BOOL v123 = v122 == INFINITY || v77 == INFINITY;
          float v124 = v77 + v122;
          if (v123) {
            float v121 = INFINITY;
          }
          else {
            float v121 = v124;
          }
        }
      }
      uint64_t v125 = (int)v85;
      float v126 = *(float *)&v119[4 * (int)v85];
      if (v126 != INFINITY) {
        break;
      }
      float v127 = *((float *)a1 + 7);
      BOOL v128 = v121 > (float)(v127 + INFINITY) || (float)(v121 + v127) < INFINITY;
      float v126 = v121;
      if (v128) {
        goto LABEL_202;
      }
LABEL_214:
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 40))(__p[0]);
      }
      else {
        ++v152;
      }
    }
    float v129 = *(float *)&v119[4 * (int)v85];
    if (v121 != INFINITY)
    {
      if (v126 <= v121)
      {
        float v131 = expf(-(float)(v121 - v126));
        float v129 = v126 - logf(v131 + 1.0);
      }
      else
      {
        float v130 = expf(-(float)(v126 - v121));
        float v129 = v121 - logf(v130 + 1.0);
      }
    }
    float v132 = *((float *)a1 + 7);
    if (v129 <= (float)(v126 + v132) && v126 <= (float)(v129 + v132)) {
      goto LABEL_214;
    }
    if (v121 != INFINITY)
    {
      if (v126 <= v121)
      {
        float v135 = expf(-(float)(v121 - v126));
        float v126 = v126 - logf(v135 + 1.0);
      }
      else
      {
        float v134 = expf(-(float)(v126 - v121));
        float v126 = v121 - logf(v134 + 1.0);
      }
    }
LABEL_202:
    *(float *)&v119[4 * v125] = v126;
    float v136 = *(float *)&v120[4 * v125];
    if (v136 != INFINITY)
    {
      if (v121 == INFINITY)
      {
        float v121 = *(float *)&v120[4 * v125];
      }
      else if (v136 <= v121)
      {
        float v138 = expf(-(float)(v121 - v136));
        float v121 = v136 - logf(v138 + 1.0);
      }
      else
      {
        float v137 = expf(-(float)(v136 - v121));
        float v121 = v121 - logf(v137 + 1.0);
      }
    }
    *(float *)&v120[4 * v125] = v121;
    if (*(float *)&v119[4 * v125] != -INFINITY && (v121 < -INFINITY || v121 > -INFINITY))
    {
      uint64_t v139 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[8] + (((unint64_t)*((int *)v79 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *((_DWORD *)v79 + 3)))
      {
        (*(void (**)(void))(v139 + 40))();
      }
      else
      {
        (*(void (**)(void))(v139 + 24))();
        *(void *)(a1[8] + (((unint64_t)*((int *)v79 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *((_DWORD *)v79 + 3);
      }
      goto LABEL_214;
    }
    char v140 = 0;
    unsigned char *v147 = 1;
LABEL_218:
    if (__p[0])
    {
      (*(void (**)(void *))(*(void *)__p[0] + 8))(__p[0]);
    }
    else if (v151)
    {
      --*v151;
    }
  }
  while ((v140 & 1) != 0);
}

void sub_1B1F7E310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,char a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::Prune<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  int v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Prune: Weight needs to have the path property and", 49);
  char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" be commutative: ", 17);
  uint64_t v6 = fst::LogWeightTpl<float>::Type();
  int v7 = *(char *)(v6 + 23);
  if (v7 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = *(void *)v6;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v9 = *(void *)(v6 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v8, v9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
}

void sub_1B1F7E4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SigmaMatcher(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  *(void *)a1 = &unk_1F0A38588;
  if (!a6) {
    operator new();
  }
  *(void *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  if (a3 == 2)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v10 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    unint64_t v11 = (void *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"SigmaMatcher: bad match type", 28);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 16) = 3;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 1;
  }
  if (!a4)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(v16, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v16, "ERROR");
    }
    char v12 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)v16);
    char v13 = (void *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SigmaMatcher: 0 cannot be used as sigma_label", 45);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    *(_DWORD *)(a1 + 20) = -1;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 1;
  }
  if (a5 == 1)
  {
    BOOL v14 = 1;
  }
  else
  {
    if (a5)
    {
      *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
      return a1;
    }
    BOOL v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1) != 0;
  }
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = v14;
  return a1;
}

void sub_1B1F7E730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~SigmaMatcher(void *a1)
{
  *a1 = &unk_1F0A38588;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~SigmaMatcher(void *a1)
{
  *a1 = &unk_1F0A38588;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Copy()
{
}

void sub_1B1F7E914(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40865AB4C8);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Properties(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  if (*(unsigned char *)(a1 + 52)) {
    result |= 4uLL;
  }
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 3)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = -4030464001;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (v3 == 1)
    {
      uint64_t v4 = -3225223169;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (!v3)
    {
      uint64_t v4 = -809304065;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    char v5 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    uint64_t v6 = (void *)fst::cerr(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"SigmaMatcher:: bad match type: ", 31);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_1B1F7EAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Flags(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) != -1 && *(_DWORD *)(a1 + 16) != 3) {
    return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8)) | 1;
  }
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 48);
  return v1();
}

BOOL fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Done_(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(*(void *)(a1 + 8));
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 8) + 32))();
}

void fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SigmaMatcher(void *a1)
{
  *a1 = &unk_1F0A38588;
  operator new();
}

void sub_1B1F7EC60(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 56) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 56) = a2;
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState(*(void *)(result + 8), a2);
    int v3 = *(_DWORD *)(v2 + 20);
    uint64_t result = v3 != -1
          && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Find(*(void *)(v2 + 8), v3);
    *(unsigned char *)(v2 + 25) = result;
  }
  return result;
}

BOOL fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Find(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 48) = a2;
  int v3 = *(_DWORD *)(a1 + 20);
  if (v3 != a2 || v3 == -1)
  {
    BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Find(*(void *)(a1 + 8), a2);
    if (result)
    {
      *(_DWORD *)(a1 + 28) = -1;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD) {
        return result;
      }
      if (!*(unsigned char *)(a1 + 25)) {
        return result;
      }
      BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Find(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 28) = a2;
    }
    return 1;
  }
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  int v7 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
  char v8 = (void *)fst::cerr(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"SigmaMatcher::Find: bad label (sigma)", 37);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  BOOL result = 0;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 1;
  return result;
}

void sub_1B1F7EDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 28);
  BOOL result = (_DWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Value(*(void *)(a1 + 8));
  uint64_t v4 = result;
  if (v2 != -1)
  {
    BOOL result = (_DWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = *v4;
    if (*(unsigned char *)(a1 + 24))
    {
      int v5 = *(_DWORD *)(a1 + 20);
      if (*(_DWORD *)(a1 + 32) == v5) {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 28);
      }
      if (*(_DWORD *)(a1 + 36) == v5)
      {
        int v6 = *(_DWORD *)(a1 + 28);
LABEL_9:
        *(_DWORD *)(a1 + 36) = v6;
      }
    }
    else
    {
      int v6 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 16)) {
        goto LABEL_9;
      }
      *BOOL result = v6;
    }
  }
  return result;
}

BOOL fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(uint64_t a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Next(*(void *)(a1 + 8));
  BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(*(void *)(a1 + 8));
  if (result && *(unsigned char *)(a1 + 25) && *(_DWORD *)(a1 + 28) == -1 && *(int *)(a1 + 48) >= 1)
  {
    BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Find(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Priority(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) != -1)
  {
    fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(a1, a2);
    if (*(unsigned char *)(a1 + 25)) {
      return -1;
    }
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 8) + 40);
  return v4();
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::RhoMatcher(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  *(void *)a1 = &unk_1F0A37470;
  if (!a6) {
    operator new();
  }
  *(void *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + --*(_DWORD *)(a9 + 52) = -1;
  if (a3 == 2)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    char v10 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    char v11 = (void *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"RhoMatcher: bad match type", 26);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 16) = 3;
    *(unsigned char *)(a1 + 48) = 1;
  }
  if (!a4)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(v16, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v16, "ERROR");
    }
    char v12 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)v16);
    char v13 = (void *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"RhoMatcher: 0 cannot be used as rho_label", 41);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    *(_DWORD *)(a1 + 20) = -1;
    *(unsigned char *)(a1 + 48) = 1;
  }
  if (a5 == 1)
  {
    BOOL v14 = 1;
  }
  else
  {
    if (a5)
    {
      *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
      return a1;
    }
    BOOL v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1) != 0;
  }
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = v14;
  return a1;
}

void sub_1B1F7F1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~RhoMatcher(void *a1)
{
  *a1 = &unk_1F0A37470;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~RhoMatcher(void *a1)
{
  *a1 = &unk_1F0A37470;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Copy()
{
}

void sub_1B1F7F3CC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C4050E02165);
  _Unwind_Resume(a1);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Properties(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  if (*(unsigned char *)(a1 + 48)) {
    result |= 4uLL;
  }
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 3)
  {
    if (v3 == 1)
    {
      int v4 = *(unsigned __int8 *)(a1 + 24);
      unint64_t v5 = result & 0xFFFFEFFF3FFAFFFFLL;
      unint64_t v6 = 0xFFFFEFFF0FF3FFFFLL;
LABEL_8:
      unint64_t v7 = result & v6;
      if (v4) {
        return v7;
      }
      else {
        return v5;
      }
    }
    if (!v3)
    {
      int v4 = *(unsigned __int8 *)(a1 + 24);
      unint64_t v5 = result & 0xFFFFEFFFCFEEFFFFLL;
      unint64_t v6 = 0xFFFFEFFF0FCFFFFFLL;
      goto LABEL_8;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    char v8 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    char v9 = (void *)fst::cerr(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RhoMatcher:: bad match type: ", 29);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_1B1F7F588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Flags(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) != -1 && *(_DWORD *)(a1 + 16) != 3) {
    return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8)) | 1;
  }
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 48);
  return v1();
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::SetState_(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 52) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + --*(_DWORD *)(a9 + 52) = a2;
    uint64_t result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(*(void *)(result + 8), a2);
    *(unsigned char *)(v2 + 25) = *(_DWORD *)(v2 + 20) != -1;
  }
  return result;
}

BOOL fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Done_(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(*(void *)(*(void *)(a1 + 8)
                                                                                                 + 8));
}

BOOL fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Next_(uint64_t a1)
{
  return fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(*(void *)(a1 + 8));
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(a1 + 8) + 8) + 8) + 32))();
}

void fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::RhoMatcher(void *a1)
{
  *a1 = &unk_1F0A37470;
  operator new();
}

void sub_1B1F7F788(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40865AB4C8);
  _Unwind_Resume(a1);
}

BOOL fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Find(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 20);
  if (v3 != a2 || v3 == -1)
  {
    BOOL result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Find(*(void *)(a1 + 8), a2);
    if (result)
    {
      *(_DWORD *)(a1 + 28) = -1;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD) {
        return result;
      }
      if (!*(unsigned char *)(a1 + 25)) {
        return result;
      }
      BOOL result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Find(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
      *(unsigned char *)(a1 + 25) = result;
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 28) = a2;
    }
    return 1;
  }
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  unint64_t v7 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
  char v8 = (void *)fst::cerr(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"RhoMatcher::Find: bad label (rho)", 33);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  BOOL result = 0;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

void sub_1B1F7F8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 28);
  BOOL result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value(*(void *)(a1 + 8));
  int v4 = result;
  if (v2 != -1)
  {
    BOOL result = (_DWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = *v4;
    if (*(unsigned char *)(a1 + 24))
    {
      int v5 = *(_DWORD *)(a1 + 20);
      if (*(_DWORD *)(a1 + 32) == v5) {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 28);
      }
      if (*(_DWORD *)(a1 + 36) == v5)
      {
        int v6 = *(_DWORD *)(a1 + 28);
LABEL_9:
        *(_DWORD *)(a1 + 36) = v6;
      }
    }
    else
    {
      int v6 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 16)) {
        goto LABEL_9;
      }
      *BOOL result = v6;
    }
  }
  return result;
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Priority(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + --*(_DWORD *)(a9 + 52) = a2;
  fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(*(void *)(a1 + 8), a2);
  BOOL v4 = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Find(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
  *(unsigned char *)(a1 + 25) = v4;
  if (v4) {
    return -1;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  return fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Priority(v6, a2);
}

void fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1F7FA58(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3A720;
  char v8 = *(__n128 **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  __n128 v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1F7FCCC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 144) + 48))(*(void *)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v13 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v14 = (void *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else if (((*(uint64_t (**)(void))(**(void **)(a1 + 152) + 48))(*(void *)(a1 + 152)) & 1) != 0 {
         && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 1))
  }
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    int v3 = (void *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
  }
  else
  {
    int v4 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0);
    int v5 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0);
    if (v5) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v4 == 1;
    }
    if (v6) {
      int v7 = 2;
    }
    else {
      int v7 = 1;
    }
    BOOL v8 = v4 == 1;
    if (v4 == 1) {
      int v9 = v7;
    }
    else {
      int v9 = 0;
    }
    if (v8 || v5 == 0) {
      goto LABEL_36;
    }
    int v9 = 1;
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 1) == 1) {
      goto LABEL_36;
    }
    if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 1))
    {
      int v9 = 0;
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v9 = 3;
LABEL_36:
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 84) = v9;
}

void sub_1B1F80064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1F80278(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  int v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1F80424(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(void *a1, int a2)
{
  uint64_t v4 = *(void *)(a1[22] + 80);
  char v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1[18] + 8) + 8) + 8);
  float v12 = (*(float (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, v6);
  if (v12 != INFINITY)
  {
    uint64_t v8 = v5[1];
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1[19] + 8) + 8) + 8);
    float v10 = (*(float (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, v8);
    float v12 = v10;
    if (v10 != INFINITY)
    {
      uint64_t v11 = a1[17];
      LOBYTE(v12) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(v11, v6, v8, &v12);
    }
  }
}

uint64_t fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1F8076C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C4050E02165);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3A720;
  uint64_t v2 = (uint64_t *)a1[17];
  if (v2)
  {
    unsigned int v3 = fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40AD892F49);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t *fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::~SequenceComposeFilter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F809CC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::SequenceComposeFilter(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, a3);
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(*(void *)a2[1] + 16))(a2[1], a3);
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a1 + 32))();
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Priority(*(void *)(a1 + 144), a2);
  uint64_t v8 = fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Priority(*(void *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    float v12 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)__p);
    uint64_t v13 = (void *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  BOOL v11 = v8 == -1 || v7 <= v8;
  return v7 != -1 && v11;
}

void sub_1B1F80BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  if (*(_DWORD *)(a7 + 52) != a4)
  {
    *(_DWORD *)(a7 + --*(_DWORD *)(a9 + 52) = a4;
    fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(*(void *)(a7 + 8), a4);
    *(unsigned char *)(a7 + 25) = *(_DWORD *)(a7 + 20) != -1;
  }
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  void v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_15;
      }
LABEL_9:
      uint64_t v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_9;
    }
    uint64_t v14 = (int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16) {
    --*v16;
  }
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1F80E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  float v10 = a4 + 1;
  if (!a5) {
    float v10 = a4;
  }
  BOOL result = fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Find(a3, *v10);
  if (result)
  {
    for (BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(*(void *)(*(void *)(a3 + 8) + 8));
          !result;
          BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(*(void *)(*(void *)(a3 + 8) + 8)))
    {
      long long v12 = *(_OWORD *)fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value(a3);
      long long v24 = *(_OWORD *)a4;
      long long v25 = v12;
      if (a5)
      {
        uint64_t v13 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v24) != -1)
        {
          if (v25 == -1)
          {
            int v17 = v13[32];
            if (v17) {
              char v18 = -1;
            }
            else {
              char v18 = 0;
            }
            char v23 = v18;
            if (v17) {
              goto LABEL_35;
            }
          }
          else
          {
            if (DWORD1(v24)) {
              char v14 = 0;
            }
            else {
              char v14 = -1;
            }
            char v23 = v14;
            if (!DWORD1(v24)) {
              goto LABEL_35;
            }
          }
LABEL_28:
          uint64_t v19 = (unsigned int *)&v24;
          char v20 = &v25;
LABEL_34:
          fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
          goto LABEL_35;
        }
        if (!v13[33])
        {
          char v23 = v13[34] ^ 1;
          goto LABEL_28;
        }
      }
      else
      {
        char v15 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v25) != -1)
        {
          if (v24 == -1)
          {
            int v21 = v15[32];
            if (v21) {
              char v22 = -1;
            }
            else {
              char v22 = 0;
            }
            char v23 = v22;
            if (v21) {
              goto LABEL_35;
            }
          }
          else
          {
            if (DWORD1(v25)) {
              char v16 = 0;
            }
            else {
              char v16 = -1;
            }
            char v23 = v16;
            if (!DWORD1(v25)) {
              goto LABEL_35;
            }
          }
LABEL_33:
          uint64_t v19 = (unsigned int *)&v25;
          char v20 = &v24;
          goto LABEL_34;
        }
        if (!v15[33])
        {
          char v23 = v15[34] ^ 1;
          goto LABEL_33;
        }
      }
LABEL_35:
      fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(*(void *)(a3 + 8));
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3C5E0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 144) + 16))(*(void *)(a3 + 144), 0);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 152) + 16))(*(void *)(a3 + 152), 0);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 52) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 84) = 0;
  if (a4 == 1) {
    *(void *)(a1 + --*(_DWORD *)(a9 + 52) = 0xFFFFFFFF00000000;
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1F81140(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != 4
        || (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    uint64_t v6 = *(void *)(result + 32);
    if (*(_DWORD *)(v6 + 52) != v4)
    {
      *(_DWORD *)(v6 + --*(_DWORD *)(a9 + 52) = v4;
      uint64_t result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(*(void *)(v6 + 8), v4);
      *(unsigned char *)(v6 + 25) = *(_DWORD *)(v6 + 20) != -1;
    }
    uint64_t v7 = *(void *)(v2 + 40);
    if (*(_DWORD *)(v7 + 52) != v5)
    {
      *(_DWORD *)(v7 + --*(_DWORD *)(a9 + 52) = v5;
      uint64_t result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(*(void *)(v7 + 8), v5);
      *(unsigned char *)(v7 + 25) = *(_DWORD *)(v7 + 20) != -1;
    }
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      int v3 = (uint64_t *)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    int v3 = (uint64_t *)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(*(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                                + 8)))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 8);
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(v2);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void *)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void *)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C5E0;
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A3C5E0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32), a3);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40), a3);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 52) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 84) = *(unsigned char *)(a2 + 84);
  if (a3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    uint64_t v7 = (void *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1) {
    *(int32x2_t *)(a1 + --*(_DWORD *)(a9 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  }
  return a1;
}

void sub_1B1F817B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Find(a3, a2);
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value(a3);
    char v10 = v9 + 1;
    if (v8) {
      char v10 = v9;
    }
    fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Find(a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(*(void *)(*(void *)(a2 + 8) + 8))
       || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(*(void *)(*(void *)(a3 + 8) + 8)))
  {
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(*(void *)(*(void *)(a3 + 8)
                                                                                                 + 8)))
    {
      fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(*(void *)(a2 + 8));
      while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(*(void *)(*(void *)(a2 + 8) + 8)))
      {
        int v6 = *(_DWORD *)(a1 + 28);
        uint64_t v7 = fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value(a2);
        int v8 = v7 + 1;
        if (v6) {
          int v8 = v7;
        }
        if (fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Find(a3, *v8))
        {
          break;
        }
        fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(*(void *)(a2 + 8));
      }
    }
    while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done(*(void *)(*(void *)(a3 + 8) + 8)))
    {
      uint64_t v9 = (uint64_t *)fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value(a2);
      char v10 = (uint64_t *)fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value(a3);
      fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(*(void *)(a3 + 8));
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = v9;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        char v16 = v10;
      }
      else {
        char v16 = v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1; {
    }
      }
  }
  return 0;
}

unint64_t sh_hashtable_settings<int,std::hash<int>,unsigned long,4>::min_buckets(uint64_t a1, unint64_t a2, unint64_t a3)
{
  float v3 = *(float *)(a1 + 16);
  for (unint64_t result = 4; result < a3 || (unint64_t)(float)(v3 * (float)result) <= a2; result *= 2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::length_error::length_error[abi:ne180100](exception, "resize overflow");
      __cxa_throw(exception, (struct type_info *)off_1E5FFDF18, MEMORY[0x1E4FBA1C8]);
    }
  }
  return result;
}

void sub_1B1F81A24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void fst::StateSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1] - *a2;
  if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) == v4 >> 2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) == -1) {
      return;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0xF3FFFFF0007, 0);
    unint64_t v6 = (uint64_t)(a2[1] - *a2) >> 2;
    LOBYTE(v56[0]) = 0;
    std::vector<BOOL>::vector(v69, v6, (unsigned __int8 *)v56);
    unint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    std::string __p = 0;
    unint64_t v64 = 0;
    uint64_t v65 = 0;
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    (*(void (**)(uint64_t, void))(*(void *)a1 + 176))(a1, *(unsigned int *)(*a2 + 4 * v7));
    uint64_t v52 = v5;
    int v62 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v60);
    int v8 = &v66;
    p_p = &__p;
LABEL_4:
    if (!v60)
    {
      if (v62 >= v61) {
        goto LABEL_85;
      }
      goto LABEL_9;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v60 + 16))(v60))
    {
      if (v60)
      {
        int v10 = (*(uint64_t (**)(void))(*(void *)v60 + 24))();
LABEL_10:
        uint64_t v11 = v10;
        unint64_t v12 = (unint64_t)v10 >> 6;
        uint64_t v13 = 1 << v10;
        if (((1 << v10) & *((void *)v69[0] + v12)) != 0) {
          goto LABEL_78;
        }
        float v14 = (*(float (**)(uint64_t, void))(*(void *)a1 + 32))(a1, v10);
        uint64_t v54 = v13;
        v8[1] = *v8;
        unint64_t v59 = 0;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v11, v56);
        while (1)
        {
          if (v56[0])
          {
            if ((*(unsigned int (**)(void *))(*(void *)v56[0] + 24))(v56[0]))
            {
              if (v56[0])
              {
                (*(void (**)(void))(*(void *)v56[0] + 8))();
                goto LABEL_41;
              }
LABEL_39:
              if (v58) {
                --*v58;
              }
LABEL_41:
              uint64_t v28 = v69[0];
              uint64_t v29 = v54;
              if ((*((void *)v69[0] + v12) & v54) != 0) {
                goto LABEL_78;
              }
              unint64_t v53 = v12;
              float v30 = INFINITY;
              unint64_t v31 = v8;
              while (2)
              {
                uint64_t v55 = v29;
                int v8 = p_p;
                p_p = v31;
                uint64_t v32 = *(unsigned int *)(*a2 + 4 * v11);
                unint64_t v33 = (unint64_t)(int)v32 >> 6;
                if (((1 << v32) & v28[v33]) != 0) {
                  goto LABEL_74;
                }
                float v30 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v32);
                v8[1] = *v8;
                unint64_t v59 = 0;
                (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v32, v56);
                while (2)
                {
                  if (!v56[0])
                  {
                    if (v59 >= v57) {
                      goto LABEL_72;
                    }
                    goto LABEL_50;
                  }
                  if (!(*(unsigned int (**)(void *))(*(void *)v56[0] + 24))(v56[0]))
                  {
                    if (v56[0])
                    {
                      int v34 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)v56[0] + 32))();
LABEL_51:
                      int v36 = (char *)v8[1];
                      unint64_t v35 = (char *)v8[2];
                      if (v36 >= v35)
                      {
                        uint64_t v38 = (v36 - (unsigned char *)*v8) >> 4;
                        unint64_t v39 = v38 + 1;
                        if ((unint64_t)(v38 + 1) >> 60) {
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v40 = v35 - (unsigned char *)*v8;
                        if (v40 >> 3 > v39) {
                          unint64_t v39 = v40 >> 3;
                        }
                        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v41 = v39;
                        }
                        if (v41) {
                          unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v8 + 2), v41);
                        }
                        else {
                          unint64_t v42 = 0;
                        }
                        int v43 = &v42[16 * v38];
                        *(_OWORD *)int v43 = *v34;
                        int v45 = (char *)*v8;
                        float v44 = (char *)v8[1];
                        uint64_t v46 = v43;
                        if (v44 != *v8)
                        {
                          do
                          {
                            *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
                            v46 -= 16;
                            v44 -= 16;
                          }
                          while (v44 != v45);
                          float v44 = (char *)*v8;
                        }
                        unint64_t v37 = v43 + 16;
                        *int v8 = v46;
                        v8[1] = v43 + 16;
                        v8[2] = &v42[16 * v41];
                        if (v44) {
                          operator delete(v44);
                        }
                      }
                      else
                      {
                        *(_OWORD *)int v36 = *v34;
                        unint64_t v37 = v36 + 16;
                      }
                      v8[1] = v37;
                      if (v56[0]) {
                        (*(void (**)(void *))(*(void *)v56[0] + 40))(v56[0]);
                      }
                      else {
                        ++v59;
                      }
                      continue;
                    }
LABEL_50:
                    int v34 = (char *)v56[1] + 16 * v59;
                    goto LABEL_51;
                  }
                  break;
                }
                if (v56[0])
                {
                  (*(void (**)(void))(*(void *)v56[0] + 8))();
                  goto LABEL_74;
                }
LABEL_72:
                if (v58) {
                  --*v58;
                }
LABEL_74:
                (*(void (**)(uint64_t, uint64_t, float))(*(void *)a1 + 184))(a1, v32, v14);
                (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v32);
                float v47 = (char *)*p_p;
                if (p_p[1] != *p_p)
                {
                  uint64_t v48 = 0;
                  unint64_t v49 = 0;
                  do
                  {
                    *(_OWORD *)uint64_t v56 = *(_OWORD *)&v47[v48];
                    HIDWORD(v56[1]) = *(_DWORD *)(*a2 + 4 * SHIDWORD(v56[1]));
                    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v32, v56);
                    ++v49;
                    float v47 = (char *)*p_p;
                    v48 += 16;
                  }
                  while (v49 < ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 4);
                }
                uint64_t v28 = v69[0];
                *((void *)v69[0] + v53) |= v55;
                uint64_t v29 = 1 << v32;
                unint64_t v53 = (unint64_t)(int)v32 >> 6;
                float v14 = v30;
                unint64_t v31 = v8;
                uint64_t v11 = (int)v32;
                if ((v28[v33] & (1 << v32)) == 0) {
                  continue;
                }
                break;
              }
LABEL_78:
              if (v60) {
                (*(void (**)(uint64_t))(*(void *)v60 + 32))(v60);
              }
              else {
                ++v62;
              }
              goto LABEL_4;
            }
            if (v56[0])
            {
              uint64_t v15 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)v56[0] + 32))();
              goto LABEL_18;
            }
          }
          else if (v59 >= v57)
          {
            goto LABEL_39;
          }
          uint64_t v15 = (char *)v56[1] + 16 * v59;
LABEL_18:
          int v17 = (char *)v8[1];
          char v16 = (char *)v8[2];
          if (v17 >= v16)
          {
            uint64_t v19 = (v17 - (unsigned char *)*v8) >> 4;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v21 = v16 - (unsigned char *)*v8;
            if (v21 >> 3 > v20) {
              unint64_t v20 = v21 >> 3;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22) {
              char v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v8 + 2), v22);
            }
            else {
              char v23 = 0;
            }
            long long v24 = &v23[16 * v19];
            *(_OWORD *)long long v24 = *v15;
            uint64_t v26 = (char *)*v8;
            long long v25 = (char *)v8[1];
            uint64_t v27 = v24;
            if (v25 != *v8)
            {
              do
              {
                *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
                v27 -= 16;
                v25 -= 16;
              }
              while (v25 != v26);
              long long v25 = (char *)*v8;
            }
            char v18 = v24 + 16;
            *int v8 = v27;
            v8[1] = v24 + 16;
            v8[2] = &v23[16 * v22];
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *(_OWORD *)int v17 = *v15;
            char v18 = v17 + 16;
          }
          v8[1] = v18;
          if (v56[0]) {
            (*(void (**)(void *))(*(void *)v56[0] + 40))(v56[0]);
          }
          else {
            ++v59;
          }
        }
      }
LABEL_9:
      int v10 = v62;
      goto LABEL_10;
    }
    if (v60) {
      (*(void (**)(void))(*(void *)v60 + 8))();
    }
LABEL_85:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v52, 0x3FFFFFFF0007);
    if (__p)
    {
      unint64_t v64 = __p;
      operator delete(__p);
    }
    if (v66)
    {
      uint64_t v67 = v66;
      operator delete(v66);
    }
    if (v69[0]) {
      operator delete(v69[0]);
    }
  }
  else
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(v56, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v56, "ERROR");
    }
    float v50 = fst::LogMessage::LogMessage((fst *)v69, (uint64_t)v56);
    float v51 = (void *)fst::cerr(v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"StateSort: bad order vector size: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)v69);
    if (SHIBYTE(v57) < 0) {
      operator delete(v56[0]);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
  }
}

void sub_1B1F823F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v28 - 128));
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::vector<fst::LogWeightTpl<float>>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (_DWORD *)a1[1];
    int v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1F82574(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::resize_delta(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v4 = google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::maybe_shrink(a1);
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  if (v5 >= ~a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "resize overflow");
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF18, MEMORY[0x1E4FBA1C8]);
  }
  unint64_t v6 = v5 + a2;
  if (*(void *)(a1 + 56) < 4uLL || v6 > *(void *)a1)
  {
    unint64_t v7 = sh_hashtable_settings<int,std::hash<int>,unsigned long,4>::min_buckets(a1, v6, 0);
    unint64_t v8 = *(void *)(a1 + 56);
    if (v7 > v8)
    {
      unint64_t v9 = v7;
      unint64_t v10 = sh_hashtable_settings<int,std::hash<int>,unsigned long,4>::min_buckets(a1, *(void *)(a1 + 48) + a2 - *(void *)(a1 + 40), v8);
      unint64_t v11 = v10;
      BOOL v12 = v10 >= v9 || v10 > 0x7FFFFFFFFFFFFFFELL;
      if (!v12
        && *(void *)(a1 + 48) + a2 - *(void *)(a1 + 40) >= (unint64_t)(float)(*(float *)(a1 + 20)
                                                                                       * (float)(2 * v10)))
      {
        unint64_t v11 = 2 * v10;
      }
      google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::dense_hashtable((uint64_t)v15, a1, v11);
      google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::swap(a1, (uint64_t)v15);
      if (v16) {
        free(v16);
      }
      return 1;
    }
  }
  return v4;
}

void sub_1B1F826DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18) {
    free(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::insert_noresize@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::find_position(a1, a2);
  if (result == -1)
  {
    uint64_t result = google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::insert_at(a1, a2, v7, &v12);
    *(_OWORD *)a3 = v12;
    *(void *)(a3 + 16) = v13;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v10 = v9 + 8 * result;
    uint64_t v11 = v9 + 8 * *(void *)(a1 + 56);
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = v11;
  }
  *(unsigned char *)(a3 + ++*(_DWORD *)(result + 24) = v8;
  return result;
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::maybe_shrink(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 56), v5 < 0x21))
  {
    uint64_t result = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::dense_hashtable((uint64_t)v9, a1, v5);
    google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::swap(a1, (uint64_t)v9);
    if (v10) {
      free(v10);
    }
    uint64_t result = 1;
  }
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1B1F8283C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18) {
    free(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64x2_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::swap(uint64_t a1, uint64_t a2)
{
  uint64x2_t v3 = *(uint64x2_t *)a1;
  long long v2 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(uint64x2_t *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v2;
  int v5 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v6;
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v7;
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v8;
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v9;
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v10;
  unint64_t v11 = *(void *)(a1 + 56);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v11)));
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 16), (float)v11)));
  *(uint64x2_t *)a2 = result;
  *(unsigned char *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::dense_hashtable(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
    google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::copy_from(a1, a2, a3);
  }
  else
  {
    unint64_t v5 = sh_hashtable_settings<int,std::hash<int>,unsigned long,4>::min_buckets(a1, *(void *)(a2 + 48) - *(void *)(a2 + 40), a3);
    *(void *)(a1 + 56) = v5;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v5)));
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

void google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::copy_from(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = sh_hashtable_settings<int,std::hash<int>,unsigned long,4>::min_buckets(a1, *(void *)(a2 + 48) - *(void *)(a2 + 40), a3);
  google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::clear_to_size(a1, v5);
  uint64_t v6 = *(void *)(a2 + 56);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    uint64_t v8 = *(int **)(a2 + 72);
    while (1)
    {
      int v9 = *v8;
      BOOL v10 = *(void *)(a2 + 40) && *(_DWORD *)(a2 + 32) == v9;
      BOOL v11 = v10;
      if (*(_DWORD *)(a2 + 64) != v9 && !v11) {
        break;
      }
      v8 += 2;
      v7 -= 8;
      if (!v7) {
        goto LABEL_35;
      }
    }
  }
  else
  {
    uint64_t v8 = *(int **)(a2 + 72);
  }
  uint64_t v13 = *(void *)(a2 + 72) + 8 * v6;
  if (v8 != (int *)v13)
  {
    do
    {
      uint64_t v14 = *(void *)(a1 + 56) - 1;
      uint64_t v15 = *(void *)(a1 + 72);
      int v16 = *(_DWORD *)(a1 + 64);
      uint64_t v17 = v14 & *v8;
      if (v16 != *(_DWORD *)(v15 + 8 * v17))
      {
        uint64_t v18 = 1;
        do
          uint64_t v17 = (v17 + v18++) & v14;
        while (v16 != *(_DWORD *)(v15 + 8 * v17));
      }
      uint64_t v20 = *(void *)v8;
      uint64_t v19 = v8 + 2;
      *(void *)(v15 + 8 * v17) = v20;
      ++*(void *)(a1 + 48);
      uint64_t v21 = (int *)v13;
      if (v19 != (int *)v13)
      {
        uint64_t v21 = v19;
        while (1)
        {
          int v22 = *v21;
          BOOL v23 = *(void *)(a2 + 40) && *(_DWORD *)(a2 + 32) == v22;
          BOOL v24 = v23;
          if (*(_DWORD *)(a2 + 64) != v22 && !v24) {
            break;
          }
          v21 += 2;
          if (v21 == (int *)v13)
          {
            uint64_t v21 = (int *)v13;
            break;
          }
        }
      }
      uint64_t v8 = v21;
    }
    while (v21 != (int *)(*(void *)(a2 + 72) + 8 * *(void *)(a2 + 56)));
  }
LABEL_35:
  ++*(_DWORD *)(a1 + 28);
}

uint64x2_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::clear_to_size(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a1 + 72);
  uint64_t v5 = 8 * a2;
  if (v4)
  {
    if (*(void *)(a1 + 56) == a2) {
      goto LABEL_6;
    }
    uint64_t v6 = google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::alloc_impl<google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::realloc_or_die((int)a1 + 64, v4, a2);
  }
  else
  {
    uint64_t v6 = malloc_type_malloc(8 * a2, 0x100004000313F17uLL);
  }
  long long v4 = v6;
  *(void *)(a1 + 72) = v6;
LABEL_6:
  if (a2)
  {
    do
    {
      *v4++ = *(void *)(a1 + 64);
      v5 -= 8;
    }
    while (v5);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void *google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::alloc_impl<google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::realloc_or_die(int a1, void *ptr, uint64_t a3)
{
  uint64x2_t result = malloc_type_realloc(ptr, 8 * a3, 0x100004000313F17uLL);
  if (!result)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a3, ptr);
    exit(1);
  }
  return result;
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::find_position(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)(a1 + 56) - 1;
  uint64_t v4 = *a2;
  uint64_t result = v3 & v4;
  uint64_t v6 = *(void *)(a1 + 72);
  int v7 = *(_DWORD *)(a1 + 64);
  int v8 = *(_DWORD *)(v6 + 8 * (v3 & v4));
  if (v7 != v8)
  {
    uint64_t v9 = -1;
    uint64_t v10 = 1;
    do
    {
      if (*(void *)(a1 + 40) && *(_DWORD *)(a1 + 32) == v8)
      {
        if (v9 == -1) {
          uint64_t v9 = result;
        }
      }
      else if (v4 == v8)
      {
        return result;
      }
      uint64_t result = (result + v10) & v3;
      int v8 = *(_DWORD *)(v6 + 8 * result);
      ++v10;
    }
    while (v7 != v8);
  }
  return -1;
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::insert_at@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v4 = *(void *)(result + 48);
  if ((unint64_t)(v4 - v5) >= 0x1FFFFFFFFFFFFFFFLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "insert overflow");
    __cxa_throw(exception, (struct type_info *)off_1E5FFDF18, MEMORY[0x1E4FBA1C8]);
  }
  uint64_t v6 = *(void *)(result + 72);
  if (v5 && *(_DWORD *)(result + 32) == *(_DWORD *)(v6 + 8 * a3)) {
    *(void *)(result + 40) = v5 - 1;
  }
  else {
    *(void *)(result + 48) = v4 + 1;
  }
  *(void *)(v6 + 8 * a3) = *a2;
  uint64_t v7 = *(void *)(result + 72);
  uint64_t v8 = v7 + 8 * a3;
  uint64_t v9 = v7 + 8 * *(void *)(result + 56);
  *a4 = result;
  a4[1] = v8;
  a4[2] = v9;
  return result;
}

void sub_1B1F82D74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::find_or_insert<google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::DefaultValue>(uint64_t a1, int *a2)
{
  uint64_t position = google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::find_position(a1, a2);
  if (position != -1) {
    return *(void *)(a1 + 72) + 8 * position;
  }
  uint64_t v7 = v5;
  if (google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::resize_delta(a1, 1))
  {
    uint64_t v8 = *a2;
    google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::insert_noresize(a1, (int *)&v8, (uint64_t)v9);
  }
  else
  {
    uint64_t v8 = *a2;
    google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::insert_at(a1, &v8, v7, v9);
  }
  return v9[1];
}

_OWORD *std::__tree<std::vector<int>>::__emplace_unique_key_args<std::vector<int>,std::vector<int>>(uint64_t **a1, int **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::vector<int>>::__find_equal<std::vector<int>>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *std::__tree<std::vector<int>>::__find_equal<std::vector<int>>(uint64_t a1, void *a2, int **a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = a3[1];
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (int *)v4[4];
        uint64_t v9 = (int *)v7[5];
        if (v8 != v9) {
          break;
        }
LABEL_12:
        if (*a3 != v6)
        {
          uint64_t v15 = (uint64_t)(*a3 + 1);
          while (v8 != v9)
          {
            int v16 = *v8;
            int v17 = *(_DWORD *)(v15 - 4);
            if (*v8 < v17) {
              break;
            }
            ++v8;
            BOOL v18 = v17 < v16 || v15 == (void)v6;
            v15 += 4;
            if (v18) {
              goto LABEL_27;
            }
          }
          uint64_t result = v7 + 1;
          uint64_t v4 = (void *)v7[1];
          if (v4) {
            continue;
          }
        }
        goto LABEL_27;
      }
      uint64_t v10 = v8 + 1;
      BOOL v11 = *a3;
      while (v11 != v6)
      {
        int v12 = *v11;
        int v13 = *(v10 - 1);
        if (*v11 < v13) {
          break;
        }
        ++v11;
        if (v13 < v12 || v10++ == v9) {
          goto LABEL_12;
        }
      }
      uint64_t v4 = (void *)*v7;
      uint64_t result = v7;
    }
    while (*v7);
  }
  else
  {
    uint64_t v7 = result;
  }
LABEL_27:
  *a2 = v7;
  return result;
}

void fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v80 = 0;
  unint64_t v81 = 0;
  int v82 = 0;
  if (a2 && a3)
  {
    unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 128))(a2, 0);
    if (v14)
    {
      uint64_t v16 = v15;
      int v68 = a4;
      int v69 = a7;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v70 = a1;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 88))(&v77, a2, v16);
        uint64_t v19 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a3 + 96))(a3, &v77);
        unsigned int v20 = v19;
        if (v19 == -1)
        {
          if (FLAGS_v >= 1)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            uint64_t v21 = fst::LogMessage::LogMessage((fst *)v72, (uint64_t)__p);
            int v22 = (void *)fst::cerr(v21);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Input symbol id ", 16);
            BOOL v23 = (void *)std::ostream::operator<<();
            BOOL v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" symbol '", 9);
            long long v25 = SHIBYTE(v79) >= 0 ? &v77 : (void **)v77;
            uint64_t v26 = SHIBYTE(v79) >= 0 ? HIBYTE(v79) : (uint64_t)v78;
            uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' missing from target symbol table.", 35);
            fst::LogMessage::~LogMessage((fst::LogMessage *)v72);
            if ((char)v76 < 0) {
              operator delete(__p[0]);
            }
          }
          ++v17;
        }
        uint64_t v28 = v81;
        if (v81 >= v82)
        {
          uint64_t v30 = ((char *)v81 - (unsigned char *)v80) >> 3;
          if ((unint64_t)(v30 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v31 = ((char *)v82 - (unsigned char *)v80) >> 2;
          if (v31 <= v30 + 1) {
            unint64_t v31 = v30 + 1;
          }
          if ((unint64_t)((char *)v82 - (unsigned char *)v80) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v31;
          }
          if (v32) {
            unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v82, v32);
          }
          else {
            unint64_t v33 = 0;
          }
          int v34 = (unint64_t *)&v33[8 * v30];
          *int v34 = v16 | ((unint64_t)v20 << 32);
          uint64_t v29 = v34 + 1;
          int v36 = (char *)v80;
          unint64_t v35 = (char *)v81;
          if (v81 != v80)
          {
            do
            {
              unint64_t v37 = *((void *)v35 - 1);
              v35 -= 8;
              *--int v34 = v37;
            }
            while (v35 != v36);
            unint64_t v35 = (char *)v80;
          }
          uint64_t v80 = v34;
          unint64_t v81 = v29;
          int v82 = (unint64_t *)&v33[8 * v32];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          unint64_t *v81 = v16 | ((unint64_t)v20 << 32);
          uint64_t v29 = v28 + 1;
        }
        unint64_t v81 = v29;
        if (SHIBYTE(v79) < 0) {
          operator delete(v77);
        }
        if (++v18 < v14) {
          uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, v18);
        }
      }
      while (v18 != v14);
      a1 = v70;
      a4 = v68;
      a7 = v69;
      if (v17)
      {
        std::string::basic_string[abi:ne180100]<0>(&v77, "WARNING");
        uint64_t v38 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&v77);
        unint64_t v39 = (void *)fst::cerr(v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Target symbol table missing: ", 29);
        uint64_t v40 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" input symbols.", 15);
        fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
        if (SHIBYTE(v79) < 0)
        {
          operator delete(v77);
          if (!v68) {
            goto LABEL_41;
          }
          goto LABEL_40;
        }
      }
    }
    if (a4) {
LABEL_40:
    }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, a3);
  }
LABEL_41:
  float v77 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  if (a5 && a6)
  {
    unint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 120))(a5);
    uint64_t v42 = (*(uint64_t (**)(uint64_t, void))(*(void *)a5 + 128))(a5, 0);
    if (!v41) {
      goto LABEL_79;
    }
    uint64_t v43 = v42;
    uint64_t v71 = a1;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a5 + 88))(__p, a5, v43);
      uint64_t v46 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a6 + 96))(a6, __p);
      unsigned int v47 = v46;
      if (v46 == -1)
      {
        if (FLAGS_v >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v72, "INFO");
          uint64_t v48 = fst::LogMessage::LogMessage((fst *)&v74, (uint64_t)v72);
          unint64_t v49 = (void *)fst::cerr(v48);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Output symbol id ", 17);
          float v50 = (void *)std::ostream::operator<<();
          float v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" symbol '", 9);
          uint64_t v52 = (v76 & 0x80u) == 0 ? __p : (void **)__p[0];
          unint64_t v53 = (v76 & 0x80u) == 0 ? (void *)v76 : __p[1];
          uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, (uint64_t)v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"' missing from target symbol table.", 35);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v74);
          if (v73 < 0) {
            operator delete(v72[0]);
          }
        }
        ++v44;
      }
      uint64_t v55 = v78;
      if (v78 >= v79)
      {
        uint64_t v57 = ((char *)v78 - (unsigned char *)v77) >> 3;
        if ((unint64_t)(v57 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v58 = ((char *)v79 - (unsigned char *)v77) >> 2;
        if (v58 <= v57 + 1) {
          unint64_t v58 = v57 + 1;
        }
        if ((unint64_t)((char *)v79 - (unsigned char *)v77) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v58;
        }
        if (v59) {
          uint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v79, v59);
        }
        else {
          uint64_t v60 = 0;
        }
        int v61 = (unint64_t *)&v60[8 * v57];
        unint64_t *v61 = v43 | ((unint64_t)v47 << 32);
        uint64_t v56 = v61 + 1;
        int v63 = (char *)v77;
        int v62 = (char *)v78;
        if (v78 != v77)
        {
          do
          {
            unint64_t v64 = *((void *)v62 - 1);
            v62 -= 8;
            *--int v61 = v64;
          }
          while (v62 != v63);
          int v62 = (char *)v77;
        }
        float v77 = v61;
        uint64_t v78 = v56;
        uint64_t v79 = (unint64_t *)&v60[8 * v59];
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        *uint64_t v78 = v43 | ((unint64_t)v47 << 32);
        uint64_t v56 = v55 + 1;
      }
      uint64_t v78 = v56;
      if ((char)v76 < 0) {
        operator delete(__p[0]);
      }
      if (++v45 < v41) {
        uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a5 + 128))(a5, v45);
      }
    }
    while (v45 != v41);
    a1 = v71;
    if (!v44
      || (std::string::basic_string[abi:ne180100]<0>(__p, "WARNING"),
          uint64_t v65 = fst::LogMessage::LogMessage((fst *)v72, (uint64_t)__p),
          unint64_t v66 = (void *)fst::cerr(v65),
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Target symbol table missing: ", 29), uint64_t v67 = (void *)std::ostream::operator<<(), std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" output symbols.", 16), fst::LogMessage::~LogMessage((fst::LogMessage *)v72), ((char)v76 & 0x80000000) == 0))
    {
LABEL_79:
      if (!a7) {
        goto LABEL_81;
      }
      goto LABEL_80;
    }
    operator delete(__p[0]);
    if (a7) {
LABEL_80:
    }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 288))(a1, a6);
  }
LABEL_81:
  fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, (uint64_t *)&v80, (uint64_t *)&v77);
  if (v77)
  {
    uint64_t v78 = (unint64_t *)v77;
    operator delete(v77);
  }
  if (v80)
  {
    unint64_t v81 = (unint64_t *)v80;
    operator delete(v80);
  }
}

void sub_1B1F836C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SigmaMatcher(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  *(void *)a1 = &unk_1F0A38608;
  if (!a6) {
    operator new();
  }
  *(void *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  if (a3 == 2)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v10 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    BOOL v11 = (void *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"SigmaMatcher: bad match type", 28);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 16) = 3;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 1;
  }
  if (!a4)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(v16, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v16, "ERROR");
    }
    int v12 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)v16);
    int v13 = (void *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SigmaMatcher: 0 cannot be used as sigma_label", 45);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    *(_DWORD *)(a1 + 20) = -1;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 1;
  }
  if (a5 == 1)
  {
    BOOL v14 = 1;
  }
  else
  {
    if (a5)
    {
      *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
      return a1;
    }
    BOOL v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1) != 0;
  }
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = v14;
  return a1;
}

void sub_1B1F83A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SigmaMatcher(void *a1)
{
  *a1 = &unk_1F0A38608;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SigmaMatcher(void *a1)
{
  *a1 = &unk_1F0A38608;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Copy()
{
}

void sub_1B1F83BE4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40865AB4C8);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  if (*(unsigned char *)(a1 + 52)) {
    result |= 4uLL;
  }
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 3)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = -4030464001;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (v3 == 1)
    {
      uint64_t v4 = -3225223169;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (!v3)
    {
      uint64_t v4 = -809304065;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v5 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    uint64_t v6 = (void *)fst::cerr(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"SigmaMatcher:: bad match type: ", 31);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_1B1F83D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Flags(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) != -1 && *(_DWORD *)(a1 + 16) != 3) {
    return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8)) | 1;
  }
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 48);
  return v1();
}

BOOL fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done_(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(void *)(a1 + 8));
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 8) + 32))();
}

void fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SigmaMatcher(void *a1)
{
  *a1 = &unk_1F0A38608;
  operator new();
}

void sub_1B1F83F30(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 56) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 56) = a2;
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(*(void *)(result + 8), a2);
    int v3 = *(_DWORD *)(v2 + 20);
    uint64_t result = v3 != -1
          && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(void *)(v2 + 8), v3);
    *(unsigned char *)(v2 + 25) = result;
  }
  return result;
}

BOOL fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 48) = a2;
  int v3 = *(_DWORD *)(a1 + 20);
  if (v3 != a2 || v3 == -1)
  {
    BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(void *)(a1 + 8), a2);
    if (result)
    {
      *(_DWORD *)(a1 + 28) = -1;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD) {
        return result;
      }
      if (!*(unsigned char *)(a1 + 25)) {
        return result;
      }
      BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 28) = a2;
    }
    return 1;
  }
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v7 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
  char v8 = (void *)fst::cerr(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"SigmaMatcher::Find: bad label (sigma)", 37);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  BOOL result = 0;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 1;
  return result;
}

void sub_1B1F840BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 28);
  BOOL result = (_DWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(*(void *)(a1 + 8));
  uint64_t v4 = result;
  if (v2 != -1)
  {
    BOOL result = (_DWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = *v4;
    if (*(unsigned char *)(a1 + 24))
    {
      int v5 = *(_DWORD *)(a1 + 20);
      if (*(_DWORD *)(a1 + 32) == v5) {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 28);
      }
      if (*(_DWORD *)(a1 + 36) == v5)
      {
        int v6 = *(_DWORD *)(a1 + 28);
LABEL_9:
        *(_DWORD *)(a1 + 36) = v6;
      }
    }
    else
    {
      int v6 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 16)) {
        goto LABEL_9;
      }
      *BOOL result = v6;
    }
  }
  return result;
}

BOOL fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(uint64_t a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next(*(void *)(a1 + 8));
  BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(void *)(a1 + 8));
  if (result && *(unsigned char *)(a1 + 25) && *(_DWORD *)(a1 + 28) == -1 && *(int *)(a1 + 48) >= 1)
  {
    BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(void *)(a1 + 8), *(_DWORD *)(a1 + 20));
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Priority(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) != -1)
  {
    fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(a1, a2);
    if (*(unsigned char *)(a1 + 25)) {
      return -1;
    }
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 8) + 40);
  return v4();
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1F842E4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3AC00;
  char v8 = *(__n128 **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  __n128 v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1F84558(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1F84770(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1F8491C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(void *a1, int a2)
{
  uint64_t v4 = *(void *)(a1[22] + 80);
  char v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(*(void *)(a1[18] + 8) + 8);
  float v12 = (*(float (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, v6);
  if (v12 != INFINITY)
  {
    uint64_t v8 = v5[1];
    uint64_t v9 = *(void *)(*(void *)(a1[19] + 8) + 8);
    float v10 = (*(float (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, v8);
    float v12 = v10;
    if (v10 != INFINITY)
    {
      uint64_t v11 = a1[17];
      LOBYTE(v12) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v11, v6, v8, &v12);
    }
  }
}

uint64_t fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1F84C5C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40865AB4C8);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3AC00;
  uint64_t v2 = (uint64_t *)a1[17];
  if (v2)
  {
    unsigned int v3 = fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40AD892F49);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F84E40(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Priority(*(void *)(a1 + 144), a2);
  uint64_t v8 = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Priority(*(void *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    float v12 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)__p);
    uint64_t v13 = (void *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  BOOL v11 = v8 == -1 || v7 <= v8;
  return v7 != -1 && v11;
}

void sub_1B1F84FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  void v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      uint64_t v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    uint64_t v14 = (int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1F851B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  float v10 = a4 + 1;
  if (!a5) {
    float v10 = a4;
  }
  BOOL result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a3, *v10);
  if (result)
  {
    for (BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(void *)(a3 + 8));
          !result;
          BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(void *)(a3 + 8)))
    {
      long long v12 = *(_OWORD *)fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(a3);
      long long v24 = *(_OWORD *)a4;
      long long v25 = v12;
      if (a5)
      {
        uint64_t v13 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v24) != -1)
        {
          if (v25 == -1)
          {
            int v17 = v13[32];
            if (v17) {
              char v18 = -1;
            }
            else {
              char v18 = 0;
            }
            char v23 = v18;
            if (v17) {
              goto LABEL_35;
            }
          }
          else
          {
            if (DWORD1(v24)) {
              char v14 = 0;
            }
            else {
              char v14 = -1;
            }
            char v23 = v14;
            if (!DWORD1(v24)) {
              goto LABEL_35;
            }
          }
LABEL_28:
          uint64_t v19 = (unsigned int *)&v24;
          char v20 = &v25;
LABEL_34:
          fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
          goto LABEL_35;
        }
        if (!v13[33])
        {
          char v23 = v13[34] ^ 1;
          goto LABEL_28;
        }
      }
      else
      {
        char v15 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v25) != -1)
        {
          if (v24 == -1)
          {
            int v21 = v15[32];
            if (v21) {
              char v22 = -1;
            }
            else {
              char v22 = 0;
            }
            char v23 = v22;
            if (v21) {
              goto LABEL_35;
            }
          }
          else
          {
            if (DWORD1(v25)) {
              char v16 = 0;
            }
            else {
              char v16 = -1;
            }
            char v23 = v16;
            if (!DWORD1(v25)) {
              goto LABEL_35;
            }
          }
LABEL_33:
          uint64_t v19 = (unsigned int *)&v25;
          char v20 = &v24;
          goto LABEL_34;
        }
        if (!v15[33])
        {
          char v23 = v15[34] ^ 1;
          goto LABEL_33;
        }
      }
LABEL_35:
      fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(a3);
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3CB60;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 144) + 16))(*(void *)(a3 + 144), 0);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 152) + 16))(*(void *)(a3 + 152), 0);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 52) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 84) = 0;
  if (a4 == 1) {
    *(void *)(a1 + --*(_DWORD *)(a9 + 52) = 0xFFFFFFFF00000000;
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1F854C4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != 4
        || (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(void *)(result + 32), *v3);
    uint64_t result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(void *)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      int v3 = (uint64_t *)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    int v3 = (uint64_t *)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(void *)(*(void *)(a1 + 32) + 8)))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(v2);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void *)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void *)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3CB60;
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A3CB60;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32), a3);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40), a3);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 52) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 84) = *(unsigned char *)(a2 + 84);
  if (a3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    uint64_t v7 = (void *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1) {
    *(int32x2_t *)(a1 + --*(_DWORD *)(a9 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  }
  return a1;
}

void sub_1B1F85AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a3, a2);
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(a3);
    char v10 = v9 + 1;
    if (v8) {
      char v10 = v9;
    }
    fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(void *)(a2 + 8))
       || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(void *)(a3 + 8)))
  {
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(void *)(a3 + 8)))
    {
      fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(a2);
      while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(void *)(a2 + 8)))
      {
        int v6 = *(_DWORD *)(a1 + 28);
        uint64_t v7 = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(a2);
        int v8 = v7 + 1;
        if (v6) {
          int v8 = v7;
        }
        if (fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a3, *v8))
        {
          break;
        }
        fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(a2);
      }
    }
    while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(void *)(a3 + 8)))
    {
      uint64_t v9 = (uint64_t *)fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(a2);
      char v10 = (uint64_t *)fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(a3);
      fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(a3);
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = v9;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        char v16 = v10;
      }
      else {
        char v16 = v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1; {
    }
      }
  }
  return 0;
}

void fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>>(void *a1, void *a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void *))(*(void *)a1 + 24))(a1) == -1) {
    return;
  }
  int v6 = (*(uint64_t (**)(void *))(*(void *)a1 + 160))(a1);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v62, v6, (unsigned __int8 *)&__p);
  int v7 = (*(uint64_t (**)(void *))(*(void *)a1 + 24))(a1);
  uint64_t v8 = 0;
  *(void *)&v62[((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v7;
LABEL_3:
  if ((int)v8 < (*(int (**)(void *))(*(void *)a1 + 160))(a1))
  {
    unint64_t v42 = 0;
    (*(void (**)(void *, uint64_t, void **))(*(void *)a1 + 136))(a1, v8, &__p);
    while (__p)
    {
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p))
      {
        if (__p)
        {
          (*(void (**)(void))(*(void *)__p + 8))();
          goto LABEL_26;
        }
LABEL_24:
        if (v41) {
          --*(_DWORD *)v41;
        }
LABEL_26:
        uint64_t v8 = (v8 + 1);
        goto LABEL_3;
      }
      if (!__p) {
        goto LABEL_12;
      }
      uint64_t v9 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
      char v10 = __p;
      if (*v9) {
        goto LABEL_15;
      }
      if (__p)
      {
        uint64_t v11 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
        char v10 = __p;
        goto LABEL_14;
      }
LABEL_13:
      char v10 = 0;
      uint64_t v11 = (uint64_t)&v39[2 * v42];
LABEL_14:
      if (*(_DWORD *)(v11 + 4))
      {
LABEL_15:
        if (v10)
        {
          uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v10 + 32))(v10);
          char v10 = __p;
        }
        else
        {
LABEL_17:
          char v10 = 0;
          uint64_t v12 = (uint64_t)&v39[2 * v42];
        }
        *(void *)&v62[((unint64_t)*(int *)(v12 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *(_DWORD *)(v12 + 12);
      }
      if (v10) {
        (*(void (**)(void *))(*(void *)v10 + 40))(v10);
      }
      else {
        ++v42;
      }
    }
    if (v42 >= v40) {
      goto LABEL_24;
    }
LABEL_12:
    if (LODWORD(v39[2 * v42])) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  memset(&v61, 0, sizeof(v61));
  int v13 = (*(uint64_t (**)(void *))(*(void *)a1 + 160))(a1);
  std::vector<int>::reserve(&v61, v13);
  if (((*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 64))(a1, 0x4000000000, 0) & 0x4000000000) == 0)
  {
    if (((*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 64))(a1, 0x800000000, 0) & 0x800000000) == 0)
    {
      uint64_t v60 = 0;
      p_p = 0;
      unint64_t v64 = 0;
      uint64_t v65 = 0;
      std::string __p = &p_p;
      unint64_t v39 = 0;
      unint64_t v40 = 0;
      unint64_t v41 = &v60;
      fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t)&__p);
    }
    std::string __p = 0;
    unint64_t v39 = 0;
    unint64_t v40 = 0;
    LOBYTE(v59.__begin_) = 0;
    p_p = &__p;
    unint64_t v64 = &v59;
    fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>();
  }
  for (signed int i = 0; i < (*(int (**)(void *))(*(void *)a1 + 160))(a1); ++i)
  {
    std::vector<unsigned int>::pointer end = v61.__end_;
    if (v61.__end_ >= v61.__end_cap_.__value_)
    {
      std::vector<unsigned int>::pointer begin = v61.__begin_;
      int64_t v18 = v61.__end_ - v61.__begin_;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v20 = (char *)v61.__end_cap_.__value_ - (char *)v61.__begin_;
      if (((char *)v61.__end_cap_.__value_ - (char *)v61.__begin_) >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        char v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v61.__end_cap_, v21);
        std::vector<unsigned int>::pointer begin = v61.__begin_;
        std::vector<unsigned int>::pointer end = v61.__end_;
      }
      else
      {
        char v22 = 0;
      }
      char v23 = (unsigned int *)&v22[4 * v18];
      *char v23 = i;
      char v16 = v23 + 1;
      while (end != begin)
      {
        unsigned int v24 = *--end;
        *--char v23 = v24;
      }
      v61.__begin_ = v23;
      v61.__end_ = v16;
      v61.__end_cap_.__value_ = (unsigned int *)&v22[4 * v21];
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *v61.__end_ = i;
      char v16 = end + 1;
    }
    v61.__end_ = v16;
  }
  std::string __p = a1;
  unint64_t v39 = a2;
  unint64_t v40 = (unint64_t)a1;
  unint64_t v41 = a2;
  unint64_t v42 = *(void *)a3;
  int v43 = *(_DWORD *)(a3 + 16);
  char v44 = *(unsigned char *)(a3 + 20);
  char v45 = 1;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  memset(v49, 0, 29);
  a2[1] = *a2;
  memset(v50, 0, sizeof(v50));
  int v51 = 1065353216;
  int v58 = 0;
  long long v55 = 0u;
  memset(v52, 0, sizeof(v52));
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v56 = 0;
  for (std::vector<unsigned int>::pointer j = v61.__end_; v61.__begin_ != v61.__end_; std::vector<unsigned int>::pointer j = v61.__end_)
  {
    unint64_t v26 = (int)*(j - 1);
    v61.__end_ = j - 1;
    if (((*(void *)&v62[(v26 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v26) & 1) == 0)
    {
      if (*(unsigned char *)(a3 + 21)) {
        continue;
      }
      LODWORD(p_p) = 0;
      LODWORD(p_p) = *(_DWORD *)(a3 + 22);
      LODWORD(v59.__begin_) = 2139095040;
      if (*(float *)&p_p != INFINITY || *(_DWORD *)(a3 + 28) != -1) {
        continue;
      }
    }
    fst::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>>::Expand(&__p, v26);
    (*(void (**)(void *, unint64_t, float))(*(void *)a1 + 184))(a1, v26, v57);
    (*(void (**)(void *, unint64_t))(*(void *)a1 + 240))(a1, v26);
    (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 256))(a1, v26, (uint64_t)(*((void *)&v55 + 1) - v55) >> 4);
    uint64_t v27 = *((void *)&v55 + 1);
    uint64_t v28 = v55;
    while (v28 != v27)
    {
      (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 208))(a1, v26, v27 - 16);
      uint64_t v28 = v55;
      uint64_t v27 = *((void *)&v55 + 1) - 16;
      *((void *)&v55 + 1) -= 16;
    }
  }
  if (*(unsigned char *)(a3 + 21)
    || (LODWORD(p_p) = 0,
        LODWORD(p_p) = *(_DWORD *)(a3 + 22),
        LODWORD(v59.__begin_) = 2139095040,
        *(float *)&p_p != INFINITY)
    || *(_DWORD *)(a3 + 28) != -1)
  {
    for (unint64_t k = 0; (uint64_t)k < (*(int (**)(void *))(*(void *)a1 + 160))(a1); ++k)
    {
      if (((*(void *)&v62[(k >> 3) & 0x1FFFFFFFFFFFFFF8] >> k) & 1) == 0) {
        (*(void (**)(void *, unint64_t))(*(void *)a1 + 240))(a1, k);
      }
    }
  }
  if (BYTE12(v49[1])) {
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
  }
  unint64_t v31 = (*(uint64_t (**)(void *, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v32 = fst::RmEpsilonProperties(v31, 0);
  (*(void (**)(void *, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v32, 0x3FFFFFFF0007);
  LODWORD(p_p) = 0;
  float v33 = *(float *)(a3 + 22);
  *(float *)&p_p = v33;
  LODWORD(v59.__begin_) = 2139095040;
  unsigned int v34 = *(_DWORD *)(a3 + 28);
  if (v33 != INFINITY || v34 != -1)
  {
    p_p = (void **)__PAIR64__(v34, LODWORD(v33));
    uint64_t v65 = 0;
    int v66 = 981467136;
    fst::Prune<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t)&p_p);
  }
  if (*(unsigned char *)(a3 + 21))
  {
    LODWORD(p_p) = 0;
    LODWORD(p_p) = *(_DWORD *)(a3 + 22);
    LODWORD(v59.__begin_) = 2139095040;
    if (*(float *)&p_p == INFINITY && *(_DWORD *)(a3 + 28) == -1) {
      fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a1);
    }
  }
  if ((void)v55)
  {
    *((void *)&v55 + 1) = v55;
    operator delete((void *)v55);
  }
  int v36 = (void *)*((void *)&v54 + 1);
  if (*((void *)&v54 + 1))
  {
    do
    {
      unint64_t v37 = (void *)*v36;
      operator delete(v36);
      int v36 = v37;
    }
    while (v37);
  }
  *((void *)&v54 + 1) = 0;
  if ((void)v53) {
    operator delete((void *)v53);
  }
  std::deque<int>::~deque[abi:ne180100](v52);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v50);
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(&v40);
  if (v61.__begin_)
  {
    v61.__end_ = v61.__begin_;
    operator delete(v61.__begin_);
  }
  if (v62) {
    operator delete(v62);
  }
}

void sub_1B1F868F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v13 - 200));
  if (*(char *)(v13 - 169) < 0) {
    operator delete(*(void **)(v13 - 192));
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v15 = *(void **)(v13 - 168);
  if (v15)
  {
    *(void *)(v13 - 160) = v15;
    operator delete(v15);
  }
  char v16 = *(void **)(v13 - 144);
  if (v16) {
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v6 = 0;
        v5[0] = v3;
        v5[1] = 0;
        void v5[2] = 0;
        void v5[3] = &v6;
        fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (uint64_t)v5);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B1F872C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  uint64_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  unint64_t v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F87CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NaturalLess<fst::TropicalWeightTpl<float>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v10 = *(void *)(a3 + 8) - *(void *)a3;
  if (v10)
  {
    unint64_t v11 = v10 >> 2;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    bzero(*(void **)a3, 4 * v11);
  }
  unsigned int v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v28);
  while (1)
  {
    uint64_t result = v28;
    if (!v28)
    {
      if ((int)v30 >= v29) {
        return result;
      }
LABEL_11:
      uint64_t v14 = v30;
      goto LABEL_12;
    }
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
    uint64_t result = v28;
    if (v13) {
      break;
    }
    if (!v28) {
      goto LABEL_11;
    }
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v28 + 24))();
LABEL_12:
    unint64_t v27 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v14, v25);
    uint64_t v15 = (int)v14;
    while (1)
    {
      if (!v25[0])
      {
        if (v27 >= v25[2]) {
          goto LABEL_39;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v25[0] + 24))(v25[0])) {
        break;
      }
      if (v25[0])
      {
        uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v25[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v16 = v25[1] + 16 * v27;
LABEL_19:
      if (*(void *)v16) {
        goto LABEL_29;
      }
      uint64_t v17 = *(int *)(*a2 + 4 * v15);
      if (v17 == *(_DWORD *)(*a2 + 4 * *(int *)(v16 + 12)))
      {
        uint64_t v18 = *(_DWORD **)a3;
        if (!a4
          || (uint64_t v19 = (float *)(v16 + 8),
              float v32 = 0.0,
              fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(a4, (float *)(v16 + 8), &v32)))
        {
          int v20 = 1;
          goto LABEL_24;
        }
        if ((v18[v17] | 2) == 2)
        {
          float v32 = 0.0;
          float v22 = *v19;
          float v32 = *v19;
          int v31 = 2139095040;
          if (v32 == INFINITY || (v32 = v22, int v31 = 0, v22 == 0.0)) {
            int v20 = 2;
          }
          else {
            int v20 = 3;
          }
LABEL_24:
          v18[v17] = v20;
        }
        *a5 = 0;
      }
      float v32 = 0.0;
      float v21 = *(float *)(v16 + 8);
      float v32 = v21;
      int v31 = 2139095040;
      if (v21 != INFINITY)
      {
        float v32 = v21;
        int v31 = 0;
        if (v21 != 0.0) {
          *a6 = 0;
        }
      }
LABEL_29:
      if (v25[0]) {
        (*(void (**)(void))(*(void *)v25[0] + 40))(v25[0]);
      }
      else {
        ++v27;
      }
    }
    if (v25[0])
    {
      (*(void (**)(void))(*(void *)v25[0] + 8))();
      goto LABEL_41;
    }
LABEL_39:
    if (v26) {
      --*v26;
    }
LABEL_41:
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
    }
    else {
      ++v30;
    }
  }
  if (v28) {
    return (*(uint64_t (**)(void))(*(void *)v28 + 8))();
  }
  return result;
}

void sub_1B1F88124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  uint64_t v2 = &v3;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>();
}

void sub_1B1F882FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  float v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  char v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>()
{
}

void sub_1B1F88C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  unint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

int *fst::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>>::Expand(void *a1, int a2)
{
  int v65 = a2;
  *((_DWORD *)a1 + 72) = 2139095040;
  a1[34] = a1[33];
  uint64_t result = (int *)fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ShortestDistance(a1 + 2, a2);
  if (*((unsigned char *)a1 + 132)) {
    return result;
  }
  std::deque<int>::push_back(a1 + 23, &v65);
  uint64_t v4 = a1[28];
  if (!v4) {
    goto LABEL_91;
  }
  char v5 = (__n128 **)(a1 + 33);
  uint64_t v6 = a1 + 29;
  uint64_t v54 = (uint64_t)(a1 + 35);
  do
  {
    uint64_t v7 = v4 - 1;
    uint64_t v8 = *(unsigned int *)(*(void *)(a1[24] + (((unint64_t)(a1[27] + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((a1[27] + v7) & 0x3FF));
    a1[28] = v7;
    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](a1 + 23, 1);
    while (a1[30] <= (unint64_t)(int)v8)
    {
      LOBYTE(v62[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 29), v62);
    }
    uint64_t v9 = *(void *)(*v6 + 8 * ((unint64_t)(int)v8 >> 6));
    if ((v9 & (1 << v8)) != 0) {
      goto LABEL_90;
    }
    *(void *)(*v6 + 8 * ((unint64_t)(int)v8 >> 6)) = v9 | (1 << v8);
    uint64_t v10 = a1[32];
    unint64_t v11 = operator new(0x10uLL);
    *(void *)unint64_t v11 = v10;
    void v11[2] = v8;
    a1[32] = v11;
    uint64_t v12 = *a1;
    unint64_t v64 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v12 + 136))(v12, v8, v62);
    while (1)
    {
      if (!v62[0])
      {
        if (v64 >= v62[2]) {
          goto LABEL_69;
        }
        goto LABEL_13;
      }
      if ((*(unsigned int (**)(void))(*(void *)v62[0] + 24))(v62[0])) {
        break;
      }
      if (v62[0])
      {
        int v13 = (__n128 *)(*(uint64_t (**)(void))(*(void *)v62[0] + 32))();
        goto LABEL_14;
      }
LABEL_13:
      int v13 = (__n128 *)(v62[1] + 16 * v64);
LABEL_14:
      __n128 v14 = *v13;
      __n128 v61 = *v13;
      v14.n128_u32[0] = *(_DWORD *)(*(void *)a1[1] + 4 * (int)v8);
      float v15 = NAN;
      if (v14.n128_f32[0] != -INFINITY)
      {
        float v15 = NAN;
        if (v61.n128_f32[2] != -INFINITY)
        {
          float v15 = INFINITY;
          BOOL v16 = v61.n128_f32[2] == INFINITY || v14.n128_f32[0] == INFINITY;
          v14.n128_f32[0] = v14.n128_f32[0] + v61.n128_f32[2];
          if (!v16) {
            float v15 = v14.n128_f32[0];
          }
        }
      }
      v61.n128_f32[2] = v15;
      if (v61.n128_u64[0])
      {
        unint64_t v59 = v61.n128_u64[0];
        unsigned __int32 v60 = v61.n128_u32[3];
        uint64_t v17 = std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::find<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element>(a1 + 17, (int *)&v59);
        if (!v17)
        {
          uint64_t v23 = (uint64_t)(a1[34] - a1[33]) >> 4;
          int v24 = *((_DWORD *)a1 + 73);
          unint64_t v55 = v59;
          unsigned __int32 v56 = v60;
          int v57 = v24;
          uint64_t v58 = v23;
          std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::__emplace_unique_key_args<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>((uint64_t)(a1 + 17), (int *)&v55, (uint64_t)&v55);
          uint64_t v26 = (__n128 *)a1[34];
          unint64_t v25 = a1[35];
          if ((unint64_t)v26 < v25) {
            goto LABEL_44;
          }
          uint64_t v27 = v26 - *v5;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60) {
            goto LABEL_95;
          }
          uint64_t v29 = v25 - (void)*v5;
          if (v29 >> 3 > v28) {
            unint64_t v28 = v29 >> 3;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30) {
            int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v54, v30);
          }
          else {
            int v31 = 0;
          }
          uint64_t v38 = (__n128 *)&v31[16 * v27];
          __n128 v14 = v61;
          *uint64_t v38 = v61;
          unint64_t v40 = (__n128 *)a1[33];
          unint64_t v39 = (__n128 *)a1[34];
          unint64_t v41 = v38;
          if (v39 != v40)
          {
            do
            {
              __n128 v14 = v39[-1];
              v41[-1] = v14;
              --v41;
              --v39;
            }
            while (v39 != v40);
LABEL_60:
            unint64_t v39 = *v5;
          }
LABEL_61:
          unint64_t v35 = v38 + 1;
          a1[33] = v41;
          a1[34] = v38 + 1;
          a1[35] = &v31[16 * v30];
          if (v39) {
            operator delete(v39);
          }
          goto LABEL_63;
        }
        int v18 = *((_DWORD *)a1 + 73);
        if (*((_DWORD *)v17 + 8) != v18)
        {
          *((_DWORD *)v17 + 8) = v18;
          uint64_t v32 = a1[33];
          uint64_t v26 = (__n128 *)a1[34];
          uint64_t v33 = ((uint64_t)v26 - v32) >> 4;
          v17[5] = v33;
          unint64_t v34 = a1[35];
          if ((unint64_t)v26 < v34)
          {
LABEL_44:
            __n128 v14 = v61;
            *uint64_t v26 = v61;
            unint64_t v35 = v26 + 1;
LABEL_63:
            a1[34] = v35;
            goto LABEL_64;
          }
          unint64_t v36 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 60) {
LABEL_95:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v37 = v34 - v32;
          if (v37 >> 3 > v36) {
            unint64_t v36 = v37 >> 3;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v36;
          }
          if (v30) {
            int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v54, v30);
          }
          else {
            int v31 = 0;
          }
          uint64_t v38 = (__n128 *)&v31[16 * v33];
          __n128 v14 = v61;
          *uint64_t v38 = v61;
          unint64_t v42 = (__n128 *)a1[33];
          unint64_t v39 = (__n128 *)a1[34];
          unint64_t v41 = v38;
          if (v39 != v42)
          {
            do
            {
              __n128 v14 = v39[-1];
              v41[-1] = v14;
              --v41;
              --v39;
            }
            while (v39 != v42);
            goto LABEL_60;
          }
          goto LABEL_61;
        }
        uint64_t v19 = (uint64_t)&(*v5)[v17[5]];
        float v21 = *(float *)(v19 + 8);
        uint64_t v20 = (float *)(v19 + 8);
        v14.n128_f32[0] = v21;
        float v22 = NAN;
        if (v21 != -INFINITY)
        {
          float v22 = NAN;
          if (v61.n128_f32[2] != -INFINITY)
          {
            if (v14.n128_f32[0] >= v61.n128_f32[2]) {
              float v22 = v61.n128_f32[2];
            }
            else {
              float v22 = v14.n128_f32[0];
            }
          }
        }
        float *v20 = v22;
      }
      else
      {
        while (a1[30] <= (unint64_t)v61.n128_i32[3])
        {
          LOBYTE(v55) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 29), &v55);
        }
        if (((*(void *)(*v6 + (((unint64_t)v61.n128_i32[3] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v61.n128_i8[12]) & 1) == 0) {
          std::deque<int>::push_back(a1 + 23, &v61.n128_u32[3]);
        }
      }
LABEL_64:
      if (v62[0]) {
        (*(void (**)(void, __n128))(*(void *)v62[0] + 40))(v62[0], v14);
      }
      else {
        ++v64;
      }
    }
    if (v62[0])
    {
      (*(void (**)(void))(*(void *)v62[0] + 8))();
    }
    else
    {
LABEL_69:
      if (v63) {
        --*v63;
      }
    }
    uint64_t v43 = *(void *)a1[1];
    (*(void (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, v8);
    float v45 = *(float *)(v43 + 4 * (int)v8);
    float v46 = NAN;
    if (v45 != -INFINITY && v44 != -INFINITY)
    {
      float v46 = INFINITY;
      BOOL v47 = v44 == INFINITY || v45 == INFINITY;
      float v48 = v45 + v44;
      if (!v47) {
        float v46 = v48;
      }
    }
    float v49 = *((float *)a1 + 72);
    if (v49 >= v46) {
      float v50 = v46;
    }
    else {
      float v50 = *((float *)a1 + 72);
    }
    BOOL v52 = v46 == -INFINITY || v49 == -INFINITY;
    float v53 = NAN;
    if (!v52) {
      float v53 = v50;
    }
    *((float *)a1 + 72) = v53;
LABEL_90:
    uint64_t v4 = a1[28];
  }
  while (v4);
LABEL_91:
  for (uint64_t result = (int *)a1[32]; result; uint64_t result = (int *)a1[32])
  {
    *(void *)(a1[29] + (((unint64_t)result[2] >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << result[2]);
    a1[32] = *(void *)result;
    operator delete(result);
  }
  ++*((_DWORD *)a1 + 73);
  return result;
}

void sub_1B1F892F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_DWORD *a22)
{
  if (a19)
  {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  else if (a22)
  {
    --*a22;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) == -1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0);
    if (!result) {
      return result;
    }
    float v137 = (char *)a1 + 116;
    goto LABEL_224;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v4 = a2;
  char v5 = (void **)a1[1];
  uint64_t v7 = v5 + 1;
  uint64_t v6 = v5[1];
  uint64_t v8 = (char *)*v5;
  unint64_t v9 = ((char *)v6 - (unsigned char *)*v5) >> 2;
  if (v9 <= a2)
  {
    uint64_t v10 = (char **)(a1 + 5);
    do
    {
      unint64_t v11 = (unint64_t)v5[2];
      if ((unint64_t)v6 >= v11)
      {
        if ((v9 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v11 - (void)v8;
        uint64_t v14 = v13 >> 1;
        if (v13 >> 1 <= v9 + 1) {
          uint64_t v14 = v9 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          BOOL v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v5 + 2), v15);
        }
        else {
          BOOL v16 = 0;
        }
        uint64_t v17 = &v16[4 * v9];
        *(_DWORD *)uint64_t v17 = 2139095040;
        uint64_t v12 = v17 + 4;
        int v18 = (char *)*v7;
        uint64_t v19 = (char *)*v5;
        if (*v7 != *v5)
        {
          do
          {
            int v20 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v17 - 1) = v20;
            v17 -= 4;
          }
          while (v18 != v19);
          int v18 = (char *)*v5;
        }
        *char v5 = v17;
        *uint64_t v7 = v12;
        void v5[2] = &v16[4 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v6 = 2139095040;
        uint64_t v12 = v6 + 1;
      }
      *uint64_t v7 = v12;
      float v22 = (_DWORD *)a1[6];
      unint64_t v21 = a1[7];
      if ((unint64_t)v22 >= v21)
      {
        uint64_t v24 = ((char *)v22 - *v10) >> 2;
        if ((unint64_t)(v24 + 1) >> 62) {
LABEL_229:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v25 = v21 - (void)*v10;
        uint64_t v26 = v25 >> 1;
        if (v25 >> 1 <= (unint64_t)(v24 + 1)) {
          uint64_t v26 = v24 + 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v27);
        }
        else {
          unint64_t v28 = 0;
        }
        uint64_t v29 = &v28[4 * v24];
        *(_DWORD *)uint64_t v29 = 2139095040;
        uint64_t v23 = v29 + 4;
        int v31 = (char *)a1[5];
        unint64_t v30 = (char *)a1[6];
        if (v30 != v31)
        {
          do
          {
            int v32 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v29 - 1) = v32;
            v29 -= 4;
          }
          while (v30 != v31);
          unint64_t v30 = *v10;
        }
        a1[5] = v29;
        a1[6] = v23;
        a1[7] = &v28[4 * v27];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        _DWORD *v22 = 2139095040;
        uint64_t v23 = v22 + 1;
      }
      a1[6] = v23;
      LOBYTE(v139[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v139);
      char v5 = (void **)a1[1];
      uint64_t v7 = v5 + 1;
      uint64_t v6 = v5[1];
      uint64_t v8 = (char *)*v5;
      unint64_t v9 = ((char *)v6 - (unsigned char *)*v5) >> 2;
    }
    while (v9 <= v4);
  }
  if (*((unsigned char *)a1 + 33))
  {
    uint64_t v33 = (char *)a1[11];
    unint64_t v34 = (char *)a1[12];
    unint64_t v35 = (v34 - v33) >> 2;
    if (v35 <= v4)
    {
      unint64_t v36 = a1 + 13;
      do
      {
        if ((unint64_t)v34 >= *v36)
        {
          unint64_t v38 = v35 + 1;
          if ((v35 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = *v36 - (void)v33;
          if (v39 >> 1 > v38) {
            unint64_t v38 = v39 >> 1;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            unint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v40);
            uint64_t v33 = (char *)a1[11];
            unint64_t v34 = (char *)a1[12];
          }
          else
          {
            unint64_t v41 = 0;
          }
          unint64_t v42 = &v41[4 * v35];
          *(_DWORD *)unint64_t v42 = -1;
          uint64_t v37 = v42 + 4;
          while (v34 != v33)
          {
            int v43 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *((_DWORD *)v42 - 1) = v43;
            v42 -= 4;
          }
          a1[11] = v42;
          a1[12] = v37;
          a1[13] = &v41[4 * v40];
          if (v33)
          {
            operator delete(v33);
            uint64_t v33 = (char *)a1[11];
          }
          else
          {
            uint64_t v33 = v42;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v34 = -1;
          uint64_t v37 = v34 + 4;
        }
        a1[12] = v37;
        unint64_t v35 = (v37 - v33) >> 2;
        unint64_t v34 = v37;
      }
      while (v35 <= v4);
      uint64_t v8 = *(char **)a1[1];
    }
    *(_DWORD *)&v33[4 * v4] = *((_DWORD *)a1 + 28);
  }
  *(_DWORD *)&v8[4 * v4] = 0;
  float v44 = (char **)(a1 + 5);
  *(_DWORD *)(a1[5] + 4 * v4) = 0;
  *(void *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v4);
  float v45 = a1 + 13;
  float v137 = (char *)a1 + 116;
  uint64_t v138 = (uint64_t)(a1 + 7);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_220;
    }
    int v46 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    BOOL v47 = (void **)a1[1];
    float v49 = v47 + 1;
    float v48 = v47[1];
    float v50 = (char *)*v47;
    for (unint64_t i = ((char *)v48 - (unsigned char *)*v47) >> 2; i <= v46; unint64_t i = ((char *)v48 - (unsigned char *)*v47) >> 2)
    {
      unint64_t v52 = (unint64_t)v47[2];
      if ((unint64_t)v48 >= v52)
      {
        if ((i + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v54 = v52 - (void)v50;
        uint64_t v55 = v54 >> 1;
        if (v54 >> 1 <= i + 1) {
          uint64_t v55 = i + 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v55;
        }
        if (v56) {
          int v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v47 + 2), v56);
        }
        else {
          int v57 = 0;
        }
        uint64_t v58 = &v57[4 * i];
        *(_DWORD *)uint64_t v58 = 2139095040;
        float v53 = v58 + 4;
        unint64_t v59 = (char *)*v49;
        unsigned __int32 v60 = (char *)*v47;
        if (*v49 != *v47)
        {
          do
          {
            int v61 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v58 - 1) = v61;
            v58 -= 4;
          }
          while (v59 != v60);
          unint64_t v59 = (char *)*v47;
        }
        *BOOL v47 = v58;
        *float v49 = v53;
        v47[2] = &v57[4 * v56];
        if (v59) {
          operator delete(v59);
        }
      }
      else
      {
        *float v48 = 2139095040;
        float v53 = v48 + 1;
      }
      *float v49 = v53;
      int v63 = (_DWORD *)a1[6];
      unint64_t v62 = a1[7];
      if ((unint64_t)v63 >= v62)
      {
        uint64_t v65 = ((char *)v63 - *v44) >> 2;
        if ((unint64_t)(v65 + 1) >> 62) {
          goto LABEL_229;
        }
        uint64_t v66 = v62 - (void)*v44;
        uint64_t v67 = v66 >> 1;
        if (v66 >> 1 <= (unint64_t)(v65 + 1)) {
          uint64_t v67 = v65 + 1;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68) {
          int v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v138, v68);
        }
        else {
          int v69 = 0;
        }
        uint64_t v70 = &v69[4 * v65];
        *(_DWORD *)uint64_t v70 = 2139095040;
        unint64_t v64 = v70 + 4;
        unint64_t v72 = (char *)a1[5];
        uint64_t v71 = (char *)a1[6];
        if (v71 != v72)
        {
          do
          {
            int v73 = *((_DWORD *)v71 - 1);
            v71 -= 4;
            *((_DWORD *)v70 - 1) = v73;
            v70 -= 4;
          }
          while (v71 != v72);
          uint64_t v71 = *v44;
        }
        a1[5] = v70;
        a1[6] = v64;
        a1[7] = &v69[4 * v68];
        if (v71) {
          operator delete(v71);
        }
      }
      else
      {
        _DWORD *v63 = 2139095040;
        unint64_t v64 = v63 + 1;
      }
      a1[6] = v64;
      LOBYTE(v139[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v139);
      BOOL v47 = (void **)a1[1];
      float v49 = v47 + 1;
      float v48 = v47[1];
      float v50 = (char *)*v47;
    }
    if (*((unsigned char *)a1 + 32))
    {
      LODWORD(v139[0]) = (*(float (**)(void, void))(*(void *)*a1 + 32))(*a1, v46);
      int v142 = 2139095040;
      if (*(float *)v139 != INFINITY)
      {
LABEL_220:
        ++*((_DWORD *)a1 + 28);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0);
        if (!result) {
          return result;
        }
LABEL_224:
        *float v137 = 1;
        return result;
      }
    }
    *(void *)(a1[8] + (((unint64_t)v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v46);
    uint64_t v74 = a1[5];
    float v75 = *(float *)(v74 + 4 * v46);
    *(_DWORD *)(v74 + 4 * v46) = 2139095040;
    uint64_t v76 = *a1;
    unint64_t v141 = 0;
    (*(void (**)(uint64_t, void, void *))(*(void *)v76 + 136))(v76, v46, v139);
    while (1)
    {
      if (!v139[0])
      {
        if (v141 >= v139[2])
        {
LABEL_212:
          char v135 = 1;
          goto LABEL_213;
        }
LABEL_108:
        uint64_t v77 = v139[1] + 16 * v141;
        goto LABEL_109;
      }
      if ((*(uint64_t (**)(void))(*(void *)v139[0] + 24))(v139[0])) {
        goto LABEL_212;
      }
      if (!v139[0]) {
        goto LABEL_108;
      }
      uint64_t v77 = (*(uint64_t (**)(void))(*(void *)v139[0] + 32))(v139[0]);
LABEL_109:
      if (!*(void *)v77)
      {
        uint64_t v78 = (void **)a1[1];
        uint64_t v80 = v78 + 1;
        uint64_t v79 = v78[1];
        unint64_t v81 = (char *)*v78;
        unint64_t v82 = ((char *)v79 - (unsigned char *)*v78) >> 2;
        if (v82 <= *(int *)(v77 + 12))
        {
          do
          {
            unint64_t v84 = (unint64_t)v78[2];
            if ((unint64_t)v79 >= v84)
            {
              if ((v82 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v86 = v84 - (void)v81;
              uint64_t v87 = v86 >> 1;
              if (v86 >> 1 <= v82 + 1) {
                uint64_t v87 = v82 + 1;
              }
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v87;
              }
              if (v88) {
                uint64_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v78 + 2), v88);
              }
              else {
                uint64_t v89 = 0;
              }
              unint64_t v90 = &v89[4 * v82];
              *(_DWORD *)unint64_t v90 = 2139095040;
              unint64_t v85 = v90 + 4;
              unint64_t v91 = (char *)*v80;
              uint64_t v92 = (char *)*v78;
              if (*v80 != *v78)
              {
                do
                {
                  int v93 = *((_DWORD *)v91 - 1);
                  v91 -= 4;
                  *((_DWORD *)v90 - 1) = v93;
                  v90 -= 4;
                }
                while (v91 != v92);
                unint64_t v91 = (char *)*v78;
              }
              *uint64_t v78 = v90;
              *uint64_t v80 = v85;
              v78[2] = &v89[4 * v88];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              _DWORD *v79 = 2139095040;
              unint64_t v85 = v79 + 1;
            }
            *uint64_t v80 = v85;
            int v95 = (_DWORD *)a1[6];
            unint64_t v94 = a1[7];
            if ((unint64_t)v95 >= v94)
            {
              uint64_t v97 = ((char *)v95 - *v44) >> 2;
              if ((unint64_t)(v97 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v98 = v94 - (void)*v44;
              uint64_t v99 = v98 >> 1;
              if (v98 >> 1 <= (unint64_t)(v97 + 1)) {
                uint64_t v99 = v97 + 1;
              }
              if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v100 = v99;
              }
              if (v100) {
                uint64_t v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v138, v100);
              }
              else {
                uint64_t v101 = 0;
              }
              unint64_t v102 = &v101[4 * v97];
              *(_DWORD *)unint64_t v102 = 2139095040;
              unint64_t v96 = v102 + 4;
              uint64_t v104 = (char *)a1[5];
              unint64_t v103 = (char *)a1[6];
              if (v103 != v104)
              {
                do
                {
                  int v105 = *((_DWORD *)v103 - 1);
                  v103 -= 4;
                  *((_DWORD *)v102 - 1) = v105;
                  v102 -= 4;
                }
                while (v103 != v104);
                unint64_t v103 = *v44;
              }
              a1[5] = v102;
              a1[6] = v96;
              a1[7] = &v101[4 * v100];
              if (v103) {
                operator delete(v103);
              }
            }
            else
            {
              _DWORD *v95 = 2139095040;
              unint64_t v96 = v95 + 1;
            }
            a1[6] = v96;
            LOBYTE(v142) = 0;
            std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v142);
            uint64_t v78 = (void **)a1[1];
            uint64_t v80 = v78 + 1;
            uint64_t v79 = v78[1];
            unint64_t v81 = (char *)*v78;
            unint64_t v82 = ((char *)v79 - (unsigned char *)*v78) >> 2;
            unint64_t v83 = *(int *)(v77 + 12);
          }
          while (v82 <= v83);
        }
        else
        {
          LODWORD(v83) = *(_DWORD *)(v77 + 12);
        }
        if (*((unsigned char *)a1 + 33))
        {
          unsigned int v106 = (char *)a1[11];
          int v107 = (char *)a1[12];
          unint64_t v108 = (v107 - v106) >> 2;
          if (v108 <= (int)v83)
          {
            do
            {
              if ((unint64_t)v107 >= *v45)
              {
                unint64_t v111 = v108 + 1;
                if ((v108 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v112 = *v45 - (void)v106;
                if (v112 >> 1 > v111) {
                  unint64_t v111 = v112 >> 1;
                }
                if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v113 = v111;
                }
                if (v113)
                {
                  uint64_t v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v113);
                  unsigned int v106 = (char *)a1[11];
                  int v107 = (char *)a1[12];
                }
                else
                {
                  uint64_t v114 = 0;
                }
                unint64_t v115 = &v114[4 * v108];
                *(_DWORD *)unint64_t v115 = -1;
                unint64_t v110 = v115 + 4;
                while (v107 != v106)
                {
                  int v116 = *((_DWORD *)v107 - 1);
                  v107 -= 4;
                  *((_DWORD *)v115 - 1) = v116;
                  v115 -= 4;
                }
                a1[11] = v115;
                a1[12] = v110;
                a1[13] = &v114[4 * v113];
                if (v106)
                {
                  operator delete(v106);
                  unsigned int v106 = (char *)a1[11];
                }
                else
                {
                  unsigned int v106 = v115;
                }
              }
              else
              {
                *(_DWORD *)int v107 = -1;
                unint64_t v110 = v107 + 4;
              }
              a1[12] = v110;
              unint64_t v108 = (v110 - v106) >> 2;
              LODWORD(v83) = *(_DWORD *)(v77 + 12);
              int v107 = v110;
            }
            while (v108 <= (int)v83);
            uint64_t v109 = (int)v83;
            uint64_t v78 = (void **)a1[1];
          }
          else
          {
            uint64_t v109 = (int)v83;
          }
          if (*(_DWORD *)&v106[4 * v109] != *((_DWORD *)a1 + 28))
          {
            *((_DWORD *)*v78 + v109) = 2139095040;
            *(_DWORD *)(a1[5] + 4 * *(int *)(v77 + 12)) = 2139095040;
            unint64_t v83 = *(int *)(v77 + 12);
            *(void *)(a1[8] + ((v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v83);
            *(_DWORD *)(a1[11] + 4 * v83) = *((_DWORD *)a1 + 28);
            uint64_t v78 = (void **)a1[1];
            LODWORD(v83) = *(_DWORD *)(v77 + 12);
          }
        }
        float v117 = (char *)*v78;
        int v118 = *v44;
        float v119 = NAN;
        if (v75 != -INFINITY)
        {
          float v120 = *(float *)(v77 + 8);
          float v119 = NAN;
          if (v120 != -INFINITY)
          {
            float v119 = INFINITY;
            BOOL v121 = v120 == INFINITY || v75 == INFINITY;
            float v122 = v75 + v120;
            if (!v121) {
              float v119 = v122;
            }
          }
        }
        float v123 = *(float *)&v117[4 * (int)v83];
        if (v123 >= v119) {
          float v124 = v119;
        }
        else {
          float v124 = *(float *)&v117[4 * (int)v83];
        }
        if (v119 == -INFINITY || v123 == -INFINITY) {
          float v124 = NAN;
        }
        float v127 = *((float *)a1 + 7);
        if (v124 > (float)(v123 + v127) || v123 > (float)(v127 + v124)) {
          break;
        }
      }
LABEL_209:
      if (v139[0]) {
        (*(void (**)(void))(*(void *)v139[0] + 40))(v139[0]);
      }
      else {
        ++v141;
      }
    }
    *(float *)&v117[4 * (int)v83] = v124;
    float v129 = *(float *)&v118[4 * (int)v83];
    if (v129 >= v119) {
      float v130 = v119;
    }
    else {
      float v130 = *(float *)&v118[4 * (int)v83];
    }
    BOOL v132 = v119 == -INFINITY || v129 == -INFINITY;
    float v133 = NAN;
    if (!v132) {
      float v133 = v130;
    }
    *(float *)&v118[4 * (int)v83] = v133;
    if (*(float *)&v117[4 * (int)v83] != -INFINITY && (v133 < -INFINITY || v133 > -INFINITY))
    {
      uint64_t v134 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[8] + (((unint64_t)*(int *)(v77 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v77 + 12)))
      {
        (*(void (**)(void))(v134 + 40))();
      }
      else
      {
        (*(void (**)(void))(v134 + 24))();
        *(void *)(a1[8] + (((unint64_t)*(int *)(v77 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v77 + 12);
      }
      goto LABEL_209;
    }
    char v135 = 0;
    *float v137 = 1;
LABEL_213:
    uint64_t result = v139[0];
    if (v139[0])
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v139[0] + 8))(v139[0]);
    }
    else if (v140)
    {
      --*v140;
    }
  }
  while ((v135 & 1) != 0);
  return result;
}

void sub_1B1F8A0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a13)
  {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  else if (a16)
  {
    --*a16;
  }
  _Unwind_Resume(exception_object);
}

void fst::Prune<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if (v4)
  {
    unint64_t v5 = v4;
    LODWORD(v84[0]) = 2139095040;
    std::vector<fst::TropicalWeightTpl<float>>::vector(v92, v4, v84);
    uint64_t v89 = 0;
    unint64_t v90 = 0;
    uint64_t v91 = 0;
    if (!*(void *)(a2 + 16))
    {
      std::vector<fst::TropicalWeightTpl<float>>::reserve(&v89, v5);
      fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, (uint64_t)&v89, 1);
    }
    uint64_t v6 = *(uint64_t **)(a2 + 16);
    if (!*(_DWORD *)(a2 + 4)) {
      goto LABEL_7;
    }
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = *v6;
    if ((*(int (**)(uint64_t))(*(void *)a1 + 24))(a1) >= (unint64_t)((v8 - v9) >> 2)) {
      goto LABEL_7;
    }
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    uint64_t v11 = *v6;
    LODWORD(v84[0]) = 0;
    LODWORD(v84[0]) = *(_DWORD *)(v11 + 4 * v10);
    LODWORD(v82) = 2139095040;
    if (*(float *)v84 != INFINITY)
    {
      v84[0] = v92;
      v84[1] = v6;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      memset(v88, 0, 28);
      LOBYTE(v81[0]) = 0;
      std::vector<BOOL>::vector(&v82, v5, (unsigned __int8 *)v81);
      std::string __p = (void *)-1;
      std::vector<unsigned long>::vector(v81, v5, &__p);
      std::string __p = 0;
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      int v13 = v12;
      uint64_t v14 = v79;
      if (v79 >= v80)
      {
        BOOL v16 = (char *)__p;
        uint64_t v17 = (v79 - (unsigned char *)__p) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v80 - (unsigned char *)__p;
        if ((v80 - (unsigned char *)__p) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80, v20);
          BOOL v16 = (char *)__p;
          uint64_t v14 = v79;
        }
        else
        {
          unint64_t v21 = 0;
        }
        float v22 = &v21[4 * v17];
        uint64_t v23 = &v21[4 * v20];
        *(_DWORD *)float v22 = v13;
        unint64_t v15 = v22 + 4;
        while (v14 != v16)
        {
          int v24 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v24;
          v22 -= 4;
        }
        std::string __p = v22;
        uint64_t v79 = v15;
        uint64_t v80 = v23;
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v79 = v12;
        unint64_t v15 = v14 + 4;
      }
      uint64_t v79 = v15;
      float v25 = *(float *)(*v6 + 4 * (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1));
      float v26 = NAN;
      if (v25 != -INFINITY)
      {
        float v27 = *(float *)a2;
        float v26 = NAN;
        if (*(float *)a2 != -INFINITY)
        {
          float v26 = INFINITY;
          BOOL v28 = v27 == INFINITY || v25 == INFINITY;
          float v29 = v25 + v27;
          if (!v28) {
            float v26 = v29;
          }
        }
      }
      float v76 = v26;
      unsigned int v75 = 0;
      unsigned int v75 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v77, &v76, (float *)(*v6 + 4 * (int)v75)))
      {
        int v30 = 0;
      }
      else
      {
        *((_DWORD *)v92[0] + (int)v75) = 0;
        int v31 = fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert((uint64_t)v84, (int *)&v75);
        *((void *)v81[0] + (int)v75) = v31;
        int v30 = 1;
      }
      while (LODWORD(v88[3]))
      {
        unsigned int v75 = *(_DWORD *)v88[0];
        fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Pop((uint64_t)v84);
        int v32 = v75;
        uint64_t v33 = (int)v75;
        *((void *)v81[0] + (int)v75) = -1;
        *(void *)((char *)v82 + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
        unint64_t v34 = (float *)v92[0];
        (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
        float v36 = v34[v33];
        float v37 = NAN;
        if (v36 != -INFINITY && v35 != -INFINITY)
        {
          float v37 = INFINITY;
          BOOL v38 = v36 == INFINITY || v35 == INFINITY;
          float v39 = v35 + v36;
          if (!v38) {
            float v37 = v39;
          }
        }
        *(float *)&long long v73 = v37;
        if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v77, &v76, (float *)&v73)) {
          (*(void (**)(uint64_t, void, float))(*(void *)a1 + 184))(a1, v75, INFINITY);
        }
        (*(void (**)(uint64_t, void, uint64_t *))(*(void *)a1 + 296))(a1, v75, &v74);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v74 + 24))(v74))
        {
          long long v73 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v74 + 32))(v74);
          float v40 = *((float *)v92[0] + (int)v75);
          float v41 = NAN;
          if (v40 != -INFINITY)
          {
            float v41 = NAN;
            if (*((float *)&v73 + 2) != -INFINITY)
            {
              float v41 = INFINITY;
              BOOL v42 = *((float *)&v73 + 2) == INFINITY || v40 == INFINITY;
              float v43 = v40 + *((float *)&v73 + 2);
              if (!v42) {
                float v41 = v43;
              }
            }
          }
          if (SHIDWORD(v73) >= (unint64_t)((*(void *)(v7 + 8) - *v6) >> 2)) {
            float v44 = INFINITY;
          }
          else {
            float v44 = *(float *)(*v6 + 4 * SHIDWORD(v73));
          }
          float v45 = NAN;
          if (v41 != -INFINITY && v44 != -INFINITY)
          {
            float v45 = INFINITY;
            BOOL v46 = v44 == INFINITY || v41 == INFINITY;
            float v47 = v41 + v44;
            if (!v46) {
              float v45 = v47;
            }
          }
          float v72 = v45;
          if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v77, &v76, &v72))
          {
            HIDWORD(v73) = *(_DWORD *)__p;
            (*(void (**)(uint64_t, long long *))(*(void *)v74 + 88))(v74, &v73);
          }
          else
          {
            float v48 = *((float *)v92[0] + (int)v75);
            float v49 = NAN;
            if (v48 != -INFINITY)
            {
              float v49 = NAN;
              if (*((float *)&v73 + 2) != -INFINITY)
              {
                float v49 = INFINITY;
                BOOL v50 = *((float *)&v73 + 2) == INFINITY || v48 == INFINITY;
                float v51 = v48 + *((float *)&v73 + 2);
                if (!v50) {
                  float v49 = v51;
                }
              }
            }
            float v71 = v49;
            if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v77, &v71, (float *)v92[0] + SHIDWORD(v73)))
            {
              float v52 = *((float *)v92[0] + (int)v75);
              float v53 = NAN;
              if (v52 != -INFINITY)
              {
                float v53 = NAN;
                if (*((float *)&v73 + 2) != -INFINITY)
                {
                  float v53 = INFINITY;
                  BOOL v54 = *((float *)&v73 + 2) == INFINITY || v52 == INFINITY;
                  float v55 = v52 + *((float *)&v73 + 2);
                  if (!v54) {
                    float v53 = v55;
                  }
                }
              }
              *((float *)v92[0] + SHIDWORD(v73)) = v53;
            }
            if (((*(void *)((char *)v82 + (((unint64_t)SHIDWORD(v73) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE12(v73)) & 1) == 0)
            {
              int v56 = *(_DWORD *)(a2 + 4);
              if (v56 == -1 || v30 < v56)
              {
                uint64_t v57 = *((void *)v81[0] + SHIDWORD(v73));
                if (v57 == -1)
                {
                  int v58 = fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert((uint64_t)v84, (int *)&v73 + 3);
                  *((void *)v81[0] + SHIDWORD(v73)) = v58;
                  ++v30;
                }
                else
                {
                  fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Update((uint64_t)v84, v57, (int *)&v73 + 3);
                }
              }
            }
          }
          (*(void (**)(uint64_t))(*(void *)v74 + 40))(v74);
        }
        if (v74) {
          (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
        }
      }
      unint64_t v59 = v83;
      if (v83)
      {
        unint64_t v60 = 0;
        do
        {
          if (((*(void *)((char *)v82 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v60) & 1) == 0)
          {
            int v61 = v79;
            if (v79 >= v80)
            {
              int v63 = (char *)__p;
              uint64_t v64 = (v79 - (unsigned char *)__p) >> 2;
              unint64_t v65 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v66 = v80 - (unsigned char *)__p;
              if ((v80 - (unsigned char *)__p) >> 1 > v65) {
                unint64_t v65 = v66 >> 1;
              }
              if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v67 = v65;
              }
              if (v67)
              {
                unint64_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80, v67);
                int v63 = (char *)__p;
                int v61 = v79;
              }
              else
              {
                unint64_t v68 = 0;
              }
              int v69 = &v68[4 * v64];
              *(_DWORD *)int v69 = v60;
              unint64_t v62 = v69 + 4;
              while (v61 != v63)
              {
                int v70 = *((_DWORD *)v61 - 1);
                v61 -= 4;
                *((_DWORD *)v69 - 1) = v70;
                v69 -= 4;
              }
              std::string __p = v69;
              uint64_t v79 = v62;
              uint64_t v80 = &v68[4 * v67];
              if (v63) {
                operator delete(v63);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v79 = v60;
              unint64_t v62 = v61 + 4;
            }
            uint64_t v79 = v62;
            unint64_t v59 = v83;
          }
          ++v60;
        }
        while (v60 < v59);
      }
      (*(void (**)(uint64_t, void **))(*(void *)a1 + 216))(a1, &__p);
      if (__p)
      {
        uint64_t v79 = (char *)__p;
        operator delete(__p);
      }
      if (v81[0])
      {
        v81[1] = v81[0];
        operator delete(v81[0]);
      }
      if (v82) {
        operator delete(v82);
      }
      fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(v84);
    }
    else
    {
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
    }
    if (v89)
    {
      unint64_t v90 = v89;
      operator delete(v89);
    }
    if (v92[0])
    {
      v92[1] = v92[0];
      operator delete(v92[0]);
    }
  }
}

void sub_1B1F8AAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(&a26);
  BOOL v28 = *(void **)(v26 - 144);
  if (v28)
  {
    *(void *)(v26 - 136) = v28;
    operator delete(v28);
  }
  float v29 = *(void **)(v26 - 120);
  if (v29)
  {
    *(void *)(v26 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void std::vector<fst::TropicalWeightTpl<float>>::reserve(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    uint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        int v13 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 72;
  int v4 = *(int **)(a1 + 72);
  unint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = *(int **)(v5 + 8);
  unint64_t v8 = v7 - v4;
  if (v8 > v6)
  {
    v4[v6] = *a2;
    *(_DWORD *)(*(void *)(a1 + 24) + 4 * *(int *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 96))) = *(_DWORD *)(a1 + 96);
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 88);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v9 - (void)v4;
    unint64_t v12 = (uint64_t)(v9 - (void)v4) >> 1;
    if (v12 <= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 88, v13);
      int v4 = *(int **)(a1 + 72);
      uint64_t v7 = *(int **)(a1 + 80);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = (int *)&v14[4 * v8];
    BOOL v16 = &v14[4 * v13];
    int *v15 = *a2;
    int v10 = v15 + 1;
    while (v7 != v4)
    {
      int v17 = *--v7;
      *--unint64_t v15 = v17;
    }
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v16;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    int v10 = v7 + 1;
  }
  unint64_t v18 = *(void *)(a1 + 40);
  *(void *)(a1 + 80) = v10;
  uint64_t v19 = *(char **)(a1 + 32);
  if ((unint64_t)v19 >= v18)
  {
    unint64_t v21 = *(char **)(a1 + 24);
    uint64_t v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_55;
    }
    unint64_t v23 = v18 - (void)v21;
    unint64_t v24 = (uint64_t)(v18 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 40, v25);
      unint64_t v21 = *(char **)(a1 + 24);
      uint64_t v19 = *(char **)(a1 + 32);
    }
    else
    {
      uint64_t v26 = 0;
    }
    float v27 = &v26[4 * v22];
    BOOL v28 = &v26[4 * v25];
    *(_DWORD *)float v27 = *(_DWORD *)(a1 + 96);
    unint64_t v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v27;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 40) = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v19 = *(_DWORD *)(a1 + 96);
    unint64_t v20 = v19 + 4;
  }
  unint64_t v30 = *(void *)(a1 + 64);
  *(void *)(a1 + 32) = v20;
  int v31 = *(char **)(a1 + 56);
  if ((unint64_t)v31 >= v30)
  {
    uint64_t v33 = *(char **)(a1 + 48);
    uint64_t v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      unint64_t v35 = v30 - (void)v33;
      unint64_t v36 = (uint64_t)(v30 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        BOOL v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 64, v37);
        uint64_t v33 = *(char **)(a1 + 48);
        int v31 = *(char **)(a1 + 56);
      }
      else
      {
        BOOL v38 = 0;
      }
      float v39 = &v38[4 * v34];
      float v40 = &v38[4 * v37];
      *(_DWORD *)float v39 = *(_DWORD *)(a1 + 96);
      int v32 = v39 + 4;
      while (v31 != v33)
      {
        int v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)(a1 + 48) = v39;
      *(void *)(a1 + 56) = v32;
      *(void *)(a1 + 64) = v40;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_51;
    }
LABEL_55:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)int v31 = *(_DWORD *)(a1 + 96);
  int v32 = v31 + 4;
LABEL_51:
  *(void *)(a1 + 56) = v32;
LABEL_52:
  int v42 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v42 + 1;
  return fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Pop(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 72);
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(a1 + 96) - 1;
  int v4 = *(int **)(a1 + 48);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[v3];
  int *v4 = v6;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  _DWORD *v1 = v1[v3];
  v1[v3] = v4;
  --*(_DWORD *)(a1 + 96);
  fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Heapify(a1, 0);
  return v2;
}

uint64_t fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Update(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(int *)(*(void *)(a1 + 24) + 4 * a2);
  int v6 = v5 - 1;
  if ((int)v5 < 1) {
    int v6 = *(_DWORD *)(*(void *)(a1 + 24) + 4 * a2);
  }
  if (fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)a1, *a3, *(_DWORD *)(*(void *)(a1 + 72) + 4 * (v6 >> 1))))
  {
    return fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(a1, a3, v5);
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 72) + 4 * v5) = *a3;
    return fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Heapify(a1, v5);
  }
}

void *std::vector<fst::TropicalWeightTpl<float>>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    int v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1F8B098(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3 = a3;
  if (a3 >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    while (1)
    {
      unsigned int v7 = v3 - 1;
      uint64_t v8 = (v3 - 1) >> 1;
      if (fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)a1, *(_DWORD *)(v6 + 4 * v8), *a2))
      {
        break;
      }
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *(int *)(v9 + 4 * v3);
      uint64_t v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      uint64_t v12 = *(void *)(a1 + 24);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      uint64_t v6 = *(void *)(a1 + 72);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      unsigned int v3 = v7 >> 1;
      if (v7 <= 1) {
        return *(unsigned int *)(*(void *)(a1 + 48) + 4 * (int)v8);
      }
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(void *)(a1 + 48) + 4 * (int)v8);
}

BOOL fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v3 = **a1;
  unint64_t v4 = ((*a1)[1] - v3) >> 2;
  if (v4 <= a2) {
    float v5 = INFINITY;
  }
  else {
    float v5 = *(float *)(v3 + 4 * a2);
  }
  uint64_t v6 = *a1[1];
  unint64_t v7 = (a1[1][1] - v6) >> 2;
  if (v7 <= a2) {
    float v8 = INFINITY;
  }
  else {
    float v8 = *(float *)(v6 + 4 * a2);
  }
  float v9 = NAN;
  if (v5 != -INFINITY && v8 != -INFINITY)
  {
    float v9 = INFINITY;
    BOOL v10 = v8 == INFINITY || v5 == INFINITY;
    float v11 = v5 + v8;
    if (!v10) {
      float v9 = v11;
    }
  }
  float v19 = v9;
  if (v4 <= a3) {
    float v12 = INFINITY;
  }
  else {
    float v12 = *(float *)(v3 + 4 * a3);
  }
  if (v7 <= a3) {
    float v13 = INFINITY;
  }
  else {
    float v13 = *(float *)(v6 + 4 * a3);
  }
  float v14 = NAN;
  if (v12 != -INFINITY && v13 != -INFINITY)
  {
    float v14 = INFINITY;
    BOOL v15 = v13 == INFINITY || v12 == INFINITY;
    float v16 = v12 + v13;
    if (!v15) {
      float v14 = v16;
    }
  }
  float v18 = v14;
  return fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)(a1 + 2), &v19, &v18);
}

BOOL fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Heapify(BOOL result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    uint64_t v4 = (2 * a2) | 1u;
    if ((int)v4 >= *(_DWORD *)(v3 + 96)
      || !(uint64_t result = fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)v3, *(_DWORD *)(*(void *)(v3 + 72) + 4 * (int)v4), *(_DWORD *)(*(void *)(v3 + 72) + 4 * (int)a2))))
    {
      uint64_t v4 = a2;
    }
    unsigned int v5 = 2 * a2 + 2;
    if ((signed int)v5 < *(_DWORD *)(v3 + 96))
    {
      uint64_t result = fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)v3, *(_DWORD *)(*(void *)(v3 + 72) + 4 * (int)v5), *(_DWORD *)(*(void *)(v3 + 72) + 4 * (int)v4));
      if (result) {
        uint64_t v4 = v5;
      }
      else {
        uint64_t v4 = v4;
      }
    }
    if (v4 == a2) {
      break;
    }
    uint64_t v6 = *(void *)(v3 + 48);
    uint64_t v7 = *(int *)(v6 + 4 * (int)a2);
    uint64_t v8 = *(int *)(v6 + 4 * (int)v4);
    *(_DWORD *)(v6 + 4 * (int)a2) = v8;
    uint64_t v9 = *(void *)(v3 + 24);
    *(_DWORD *)(v9 + 4 * v8) = a2;
    *(_DWORD *)(v6 + 4 * (int)v4) = v7;
    *(_DWORD *)(v9 + 4 * v7) = v4;
    uint64_t v10 = *(void *)(v3 + 72);
    LODWORD(v7) = *(_DWORD *)(v10 + 4 * (int)a2);
    *(_DWORD *)(v10 + 4 * (int)a2) = *(_DWORD *)(v10 + 4 * (int)v4);
    *(_DWORD *)(v10 + 4 * (int)v4) = v7;
    a2 = v4;
  }
  return result;
}

void *fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A3B438;
  a1[1] = 0;
  v2[0] = FLAGS_fst_default_cache_gc;
  uint64_t v3 = FLAGS_fst_default_cache_gc_limit;
  int v4 = 981467136;
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Init<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, (uint64_t)v2);
}

void sub_1B1F8B450(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Init<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1)) {
    operator new();
  }
  int v4 = *(_DWORD *)(a3 + 24);
  if (v4)
  {
    if (v4 == 2) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B1F8B5B8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40BF12C28CLL);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFst(void *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Copy()
{
}

void sub_1B1F8B688(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitStateIterator()
{
}

void sub_1B1F8B764(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B1F8B980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1F8BB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(void *a1)
{
  *a1 = &unk_1F0A3F4D0;
  uint64_t v2 = a1[17];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_1B1F8BD70(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Expand(void *a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = (uint64_t *)v9;
  fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  int v4 = v8;
  if (v8 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, v4 + 5);
      uint64_t v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          char v6 = v5;
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          char v6 = (uint64_t *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          int v4 = v6;
        }
        while (!v7);
      }
      int v4 = v6;
    }
    while (v6 != (uint64_t *)v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<int>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1B1F8BE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result != -1) {
    operator new();
  }
  return result;
}

float fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v2 = **(float ***)(*(void *)(*(void *)(a1 + 184) + 88) + 8 * a2);
  if (!v2) {
    return INFINITY;
  }
  float v4 = INFINITY;
  do
  {
    (*(void (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), *((unsigned int *)v2 + 2));
    float v6 = v2[3];
    float v7 = NAN;
    if (v6 != -INFINITY && v5 != -INFINITY)
    {
      float v7 = INFINITY;
      BOOL v8 = v5 == INFINITY || v6 == INFINITY;
      float v9 = v6 + v5;
      if (!v8) {
        float v7 = v9;
      }
    }
    if (v4 >= v7) {
      float v10 = v7;
    }
    else {
      float v10 = v4;
    }
    if (v7 == -INFINITY || v4 == -INFINITY) {
      float v4 = NAN;
    }
    else {
      float v4 = v10;
    }
    if (v4 >= -INFINITY && v4 <= -INFINITY) {
      *(void *)(a1 + 8) |= 4uLL;
    }
    uint64_t v2 = *(float **)v2;
  }
  while (v2);
  return v4;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (void *)(a1 + 8), (void *)(a1 + 16));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (a2) {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  }
  return a1;
}

void sub_1B1F8C0AC(_Unwind_Exception *a1)
{
  float v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1F8C118(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  *a1 = &unk_1F0A3DED8;
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  uint64_t v3 = a1[23];
  if (v3)
  {
    uint64_t v4 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1B3EA8670](v4, 0x10E0C400200E20DLL);
  }
  return fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(a1);
}

void fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F8C36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F8C500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::GetLabelMap(void *a1, int a2, uint64_t **a3)
{
  float v5 = **(float ***)(*(void *)(a1[23] + 88) + 8 * a2);
  if (!v5) {
    goto LABEL_24;
  }
  do
  {
    uint64_t v6 = *((unsigned int *)v5 + 2);
    uint64_t v7 = a1[17];
    unint64_t v22 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 136))(v7, v6, v20);
    while (1)
    {
      if (!v20[0])
      {
        if (v22 >= v20[2]) {
          goto LABEL_21;
        }
LABEL_8:
        uint64_t v8 = v20[1] + 16 * v22;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)v20[0] + 24))(v20[0])) {
        break;
      }
      if (!v20[0]) {
        goto LABEL_8;
      }
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v20[0] + 32))();
LABEL_9:
      float v9 = v5[3];
      float v10 = NAN;
      if (v9 != -INFINITY)
      {
        float v11 = *(float *)(v8 + 8);
        float v10 = NAN;
        if (v11 != -INFINITY)
        {
          float v10 = INFINITY;
          BOOL v12 = v11 == INFINITY || v9 == INFINITY;
          float v13 = v9 + v11;
          if (!v12) {
            float v10 = v13;
          }
        }
      }
      LODWORD(v19) = *(_DWORD *)(v8 + 12);
      *((float *)&v19 + 1) = v10;
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FilterArc(a1[22], (_DWORD *)v8, (uint64_t)(v5 + 2), &v19, a3);
      if (v20[0]) {
        (*(void (**)(void))(*(void *)v20[0] + 40))(v20[0]);
      }
      else {
        ++v22;
      }
    }
    if (v20[0])
    {
      (*(void (**)(void))(*(void *)v20[0] + 8))();
      goto LABEL_23;
    }
LABEL_21:
    if (v21) {
      --*v21;
    }
LABEL_23:
    float v5 = *(float **)v5;
  }
  while (v5);
LABEL_24:
  float v16 = *a3;
  float v14 = a3 + 1;
  BOOL v15 = v16;
  if (v16 != (uint64_t *)v14)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v15 + 5));
      int v17 = (uint64_t *)v15[1];
      if (v17)
      {
        do
        {
          float v18 = v17;
          int v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          float v18 = (uint64_t *)v15[2];
          BOOL v12 = *v18 == (void)v15;
          BOOL v15 = v18;
        }
        while (!v12);
      }
      BOOL v15 = v18;
    }
    while (v18 != (uint64_t *)v14);
  }
}

void sub_1B1F8C784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  LODWORD(v7) = *a3;
  *(void *)((char *)&v7 + 4) = v5;
  HIDWORD(v7) = fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::FindState(a1, (float **)a3[1]);
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v7);
}

uint64_t fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, float **a2)
{
  uint64_t State = fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::FindState(*(void **)(a1 + 184), (void **)a2);
  uint64_t v5 = State;
  if (*(void *)(a1 + 152))
  {
    uint64_t v6 = *(void ***)(a1 + 160);
    if ((int)State >= (unint64_t)(((unsigned char *)v6[1] - (unsigned char *)*v6) >> 2))
    {
      float v7 = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2);
      float v8 = v7;
      unint64_t v9 = (unint64_t)v6[2];
      float v10 = (float *)v6[1];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = ((char *)v10 - (unsigned char *)*v6) >> 2;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v9 - (void)*v6;
        uint64_t v14 = v13 >> 1;
        if (v13 >> 1 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          float v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v6 + 2), v15);
        }
        else {
          float v16 = 0;
        }
        int v17 = (float *)&v16[4 * v12];
        float v18 = &v16[4 * v15];
        float *v17 = v8;
        float v11 = v17 + 1;
        unint64_t v20 = (char *)*v6;
        uint64_t v19 = (char *)v6[1];
        if (v19 != *v6)
        {
          do
          {
            int v21 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v17-- - 1) = v21;
          }
          while (v19 != v20);
          uint64_t v19 = (char *)*v6;
        }
        *uint64_t v6 = v17;
        v6[1] = v11;
        void v6[2] = v18;
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        float *v10 = v7;
        float v11 = v10 + 1;
      }
      v6[1] = v11;
    }
  }
  return v5;
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::FindState(void *a1, void **a2)
{
  float v8 = a2;
  uint64_t v2 = (a1[12] - a1[11]) >> 3;
  uint64_t Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v8, 1);
  if (Id != v2)
  {
    uint64_t v4 = v8;
    if (v8)
    {
      uint64_t v5 = *v8;
      if (*v8)
      {
        do
        {
          uint64_t v6 = (void *)*v5;
          operator delete(v5);
          uint64_t v5 = v6;
        }
        while (v6);
      }
      void *v4 = 0;
      MEMORY[0x1B3EA8670](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(void *a1, void *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  float v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  float v10 = (void *)a1[11];
  uint64_t v11 = ((uint64_t)v10 - v9) >> 3;
  unsigned int v23 = v11;
  unint64_t v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v12 - v9;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v15 = v11 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    }
    else {
      int v17 = 0;
    }
    float v18 = &v17[8 * v11];
    uint64_t v19 = &v17[8 * v16];
    *(void *)float v18 = *a2;
    uint64_t v13 = v18 + 8;
    int v21 = (char *)a1[10];
    unint64_t v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      unint64_t v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    void *v10 = *a2;
    uint64_t v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1F8CC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v15 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(v14);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Init()
{
}

void sub_1B1F8CDE0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~ImplToFst((void *)(v2 - 48));
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(void *a1)
{
  fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_1B1F8CFAC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40BF12C28CLL);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Expand(uint64_t a1, int a2)
{
  fst::ArcIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ArcIterator(&v8, *(void *)(a1 + 160), a2);
  uint64_t v4 = v8;
  for (unint64_t i = v9; ; unint64_t i = ++v9)
  {
    uint64_t v6 = *((void *)v4 + 3);
    if (i >= (*((void *)v4 + 4) - v6) >> 4) {
      break;
    }
    Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, (_OWORD *)(v6 + 16 * i));
    uint64_t v4 = v8;
  }
  --*((_DWORD *)v4 + 13);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1F8D064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 24))();
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeFinal(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 32))();
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFst()
{
}

void sub_1B1F8D164(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFst(void *a1)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    float v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Copy()
{
}

void sub_1B1F8D35C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1F8D450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1F8D54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitStateIterator()
{
}

void sub_1B1F8D5E4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::IsMemoryMapped()
{
  return 0;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B1F8D6C4(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Init(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v2);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 48) = 0;
  }
  unint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if (result == -1)
  {
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    unint64_t v5 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 0x3FFFFFFF0004, 0);
    unint64_t result = fst::ProjectProperties(v5, 1);
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | result & 0x3FFCFFFF0007;
    if (*(_DWORD *)(a1 + 156) == 2) {
      *(_DWORD *)(a1 + 160) = 0;
    }
  }
  return result;
}

void sub_1B1F8D84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0)|| (fst::ProjectProperties(0, 1) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FFB8;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38E78;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FFB8;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38E78;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B1F8DA6C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  uint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FFB8;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B1F8DC38(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  std::__list_imp<char *>::clear(v2);
  int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38E78;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    uint64_t v3 = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  uint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~FstImpl((uint64_t)a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A388C8;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3) {
      MEMORY[0x1B3EA8670](v3, 0xC400A2AC0F1);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
      int v3 = *(_DWORD *)(a1 + 160);
      if (v3 != -1 && v3 <= v2) {
        int v5 = v2 + 1;
      }
      else {
        int v5 = v2;
      }
      if (v5 >= *(_DWORD *)(a1 + 164)) {
        *(_DWORD *)(a1 + 164) = v5 + 1;
      }
      *(_DWORD *)(a1 + 64) = v5;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v5) {
        *(_DWORD *)(a1 + 68) = v5 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void *fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    int v6 = *(_DWORD *)(a1 + 156);
    if (v6 == 1)
    {
      int v8 = *(_DWORD *)(a1 + 160);
      if (v8 != a2)
      {
        BOOL v20 = v8 != -1 && v8 <= a2;
        float v21 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v20));
        float v40 = 0;
        float v41 = v21;
        int v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          unsigned int v23 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
          int v28 = *v23;
          uint64_t v22 = v29;
          std::list<int>::list(v29, (uint64_t)(v23 + 2));
          int v30 = v23[8];
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v28);
        }
        else
        {
          int v31 = v46;
          uint64_t v22 = v32;
          std::list<int>::list(v32, (uint64_t)v47);
          int v33 = v48;
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v31);
        }
        std::__list_imp<char *>::clear(v22);
        float v18 = v47;
        goto LABEL_35;
      }
      unint64_t v9 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
      int v34 = *v9;
      float v10 = v35;
      std::list<int>::list(v35, (uint64_t)(v9 + 2));
      int v36 = v9[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v34);
    }
    else
    {
      if (v6 != 2)
      {
        int v11 = *(_DWORD *)(a1 + 160);
        BOOL v13 = v11 != -1 && v11 <= a2;
        float v14 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v13));
        float v40 = 0;
        float v41 = v14;
        int v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          if (FLAGS_fst_error_fatal) {
            std::string::basic_string[abi:ne180100]<0>(&v40, "FATAL");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(&v40, "ERROR");
          }
          uint64_t v15 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v40);
          unint64_t v16 = (void *)fst::cerr(v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
          if (v43 < 0) {
            operator delete(v40);
          }
          *(void *)(a1 + 8) |= 4uLL;
        }
        int v37 = v46;
        std::list<int>::list(v38, (uint64_t)v47);
        int v39 = v48;
        fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v37);
        std::__list_imp<char *>::clear(v38);
        float v18 = v47;
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 160) == a2) {
        uint64_t v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
      }
      else {
        uint64_t v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
      }
      int v17 = v7;
      int v25 = *v7;
      float v10 = v26;
      std::list<int>::list(v26, (uint64_t)(v7 + 2));
      int v27 = v17[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v25);
    }
    float v18 = v10;
LABEL_35:
    std::__list_imp<char *>::clear(v18);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1B1F8E1D0(_Unwind_Exception *a1)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v1 - 105));
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  std::__list_imp<char *>::clear((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void *fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()@<X0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)a1 + 3) == -1)
  {
    float v30 = 0.0;
    float v30 = a1[2];
    v29[8] = 2139095040;
    if (v30 == INFINITY)
    {
      char v12 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
      int v23 = *v12;
      uint64_t v7 = v24;
      std::list<int>::list(v24, (uint64_t)(v12 + 2));
      int v25 = v12[8];
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = v23;
      std::list<int>::list((void *)(a2 + 16), (uint64_t)v24);
      *(_DWORD *)(a2 + 40) = v25;
      *(_DWORD *)(a2 + 48) = -1;
      return std::__list_imp<char *>::clear(v7);
    }
    int v8 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    int v26 = *v8;
    uint64_t v7 = v27;
    std::list<int>::list(v27, (uint64_t)(v8 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v28, &v26, a1[2]);
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v28;
    unint64_t v9 = v29;
    std::list<int>::list((void *)(a2 + 16), (uint64_t)v29);
    *(_DWORD *)(a2 + 40) = v29[6];
    *(_DWORD *)(a2 + 48) = -1;
    goto LABEL_7;
  }
  float v5 = *a1;
  int v4 = *((_DWORD *)a1 + 1);
  if (!v4)
  {
    float v10 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    int v19 = *v10;
    uint64_t v7 = v20;
    std::list<int>::list(v20, (uint64_t)(v10 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v21, &v19, a1[2]);
    int v11 = *((_DWORD *)a1 + 3);
    *(float *)a2 = v5;
    *(float *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v21;
    unint64_t v9 = v22;
    std::list<int>::list((void *)(a2 + 16), (uint64_t)v22);
    *(_DWORD *)(a2 + 40) = v22[6];
    *(_DWORD *)(a2 + 48) = v11;
LABEL_7:
    std::__list_imp<char *>::clear(v9);
    return std::__list_imp<char *>::clear(v7);
  }
  fst::StringWeight<int,(fst::StringType)2>::StringWeight((uint64_t)&v14, v4);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v16, &v14, a1[2]);
  int v6 = *((_DWORD *)a1 + 3);
  *(float *)a2 = v5;
  *(float *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v16;
  std::list<int>::list((void *)(a2 + 16), (uint64_t)v17);
  *(_DWORD *)(a2 + 40) = v18;
  *(_DWORD *)(a2 + 48) = v6;
  std::__list_imp<char *>::clear(v17);
  uint64_t v7 = &v15;
  return std::__list_imp<char *>::clear(v7);
}

void sub_1B1F8E458(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  int v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  int v5 = a3[8];
  int v9 = v5;
  *(_DWORD *)Mutableuint64_t State = v7;
  if (MutableState != (char *)&v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)MutableState + 1, v8[1], (uint64_t)v8);
    int v5 = v9;
  }
  *((_DWORD *)MutableState + 8) = v5;
  unint64_t result = std::__list_imp<char *>::clear(v8);
  *((_DWORD *)MutableState + 20) |= 9u;
  return result;
}

void sub_1B1F8E548(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One(void)::one;
}

void sub_1B1F8E5F8(_Unwind_Exception *a1)
{
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero(void)::zero;
}

void sub_1B1F8E6CC(_Unwind_Exception *a1)
{
}

uint64_t fst::StringWeight<int,(fst::StringType)2>::One()
{
  {
    operator new();
  }
  return fst::StringWeight<int,(fst::StringType)2>::One(void)::one;
}

void sub_1B1F8E784(_Unwind_Exception *a1)
{
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::ProductWeight(a1, &v6, a3);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1B1F8E804(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::ProductWeight(uint64_t a1, int *a2, float a3)
{
  int v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  *(_DWORD *)a1 = v6;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)v7);
  *(float *)(a1 + 32) = a3;
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1B1F8E888(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)2>::StringWeight(uint64_t a1, int a2)
{
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(_DWORD *)a1 = 0;
  fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a1, a2);
  return a1;
}

void sub_1B1F8E8D4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>::GetMutableState(a1, a2);
  int v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + *(void *)(a1 + 112) + 88;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(char **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 76) = a2;
      Mutableuint64_t State = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 20) |= 4u;
      std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
      return *(char **)(a1 + 80);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    if (!*(_DWORD *)(v5 + 84))
    {
      *(_DWORD *)(a1 + 76) = a2;
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Reset(v5);
      unint64_t result = *(char **)(a1 + 80);
      *((_DWORD *)result + 20) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      int v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      int v9 = (void *)fst::cerr(v8);
      float v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      int v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      char v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache unint64_t size = ", 15);
      BOOL v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      int v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        int v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        int v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      int v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      float v30 = (void *)fst::cerr(v29);
      int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      int v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      int v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache unint64_t size = ", 15);
      int v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      unint64_t v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      int v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B1F8EE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    uint64_t v14 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v14);
  }
  else
  {
    int v8 = *(char **)(v6 + 8 * a2);
    if (v8) {
      return v8;
    }
  }
  int v8 = (char *)operator new(0x58uLL);
  int v9 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  *(_DWORD *)int v8 = *v9;
  std::list<int>::list((void *)v8 + 1, (uint64_t)(v9 + 2));
  *((_DWORD *)v8 + 8) = v9[8];
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(void *)(*(void *)(a1 + 8) + 8 * v4) = v8;
  if (*(unsigned char *)a1)
  {
    float v10 = operator new(0x18uLL);
    v10[4] = a2;
    uint64_t v12 = *(void *)(a1 + 32);
    int v11 = (void *)(a1 + 32);
    *(void *)float v10 = v12;
    *((void *)v10 + 1) = v11;
    *(void *)(v12 + 8) = v10;
    *int v11 = v10;
    ++v11[2];
  }
  return v8;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Reset(uint64_t a1)
{
  uint64_t result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  uint64_t v3 = result;
  *(_DWORD *)a1 = *(_DWORD *)result;
  if (result != a1) {
    uint64_t result = (uint64_t)std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(void *)(result + 16), result + 8);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 + 32);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v4 - 56;
      uint64_t result = (uint64_t)std::__list_imp<char *>::clear((void *)(v4 - 40));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  *(void *)(a1 + 64) = v5;
  return result;
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 56 * v6;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1F8F0B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(void *)(v12 - 56) = *(void *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((void *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1F8F1DC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One(void)::one;
}

void sub_1B1F8F29C(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One(void)::one;
}

void sub_1B1F8F398(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero(void)::zero;
}

void sub_1B1F8F47C(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero(void)::zero;
}

void sub_1B1F8F57C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)2>::Zero()
{
  {
    operator new();
  }
  return fst::StringWeight<int,(fst::StringType)2>::Zero(void)::zero;
}

void sub_1B1F8F640(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C40CA22B68ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetArcs(a1, a2);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  BOOL v7 = v4 != -1 && v4 <= a2;
  unint64_t v58 = 0;
  (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v5 + 136))(v5, (a2 - v7), &v54);
  while (1)
  {
    if (!v54)
    {
      if (v58 >= v56) {
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v54 + 24))(v54)) {
      break;
    }
    if (v54)
    {
      uint64_t v8 = (long long *)(*(uint64_t (**)(void))(*(void *)v54 + 32))();
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v8 = (long long *)(v55 + 16 * v58);
LABEL_18:
    long long v68 = *v8;
    int v9 = HIDWORD(v68);
    int v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= SHIDWORD(v68)) {
      int v9 = HIDWORD(v68) + 1;
    }
    if (v9 >= *(_DWORD *)(a1 + 164)) {
      *(_DWORD *)(a1 + 164) = v9 + 1;
    }
    HIDWORD(v68) = v9;
    fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()((float *)&v68, (uint64_t)&v61);
    Mutableuint64_t State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(MutableState, (uint64_t)&v61);
    std::__list_imp<char *>::clear(&v63);
    if (v54) {
      (*(void (**)(uint64_t))(*(void *)v54 + 40))(v54);
    }
    else {
      ++v58;
    }
  }
  if (v54)
  {
    (*(void (**)(void))(*(void *)v54 + 8))();
    goto LABEL_32;
  }
LABEL_30:
  if (v57) {
    --*v57;
  }
LABEL_32:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
LABEL_54:
    int v26 = *(_DWORD *)(a1 + 156);
    if (v26 == 1)
    {
      int v32 = *(_DWORD *)(a1 + 160);
      BOOL v34 = v32 != -1 && v32 <= a2;
      *(float *)&unsigned int v35 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v34));
      uint64_t v54 = 0;
      unint64_t v55 = v35 | 0xFFFFFFFF00000000;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()((float *)&v54, (uint64_t)&v61);
      if (v61)
      {
        int v36 = *(_DWORD *)(a1 + 160);
        if (v36 == -1)
        {
          int v36 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v36;
          *(_DWORD *)(a1 + 164) = v36 + 1;
        }
        int v67 = v36;
        int v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(v37, (uint64_t)&v61);
      }
      uint64_t v14 = &v63;
      goto LABEL_98;
    }
    if (v26 != 2) {
      goto LABEL_99;
    }
    int v27 = *(_DWORD *)(a1 + 160);
    BOOL v29 = v27 != -1 && v27 <= a2;
    *(float *)&unsigned int v30 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v29));
    uint64_t v54 = 0;
    unint64_t v55 = v30 | 0xFFFFFFFF00000000;
    fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()((float *)&v54, (uint64_t)&v61);
    if (v61)
    {
      int v31 = v62;
    }
    else
    {
      uint64_t v38 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
      int v31 = v62;
      if (v62) {
        uint64_t v39 = v65 + 1;
      }
      else {
        uint64_t v39 = 0;
      }
      if (*(_DWORD *)v38) {
        uint64_t v40 = *(void *)(v38 + 24) + 1;
      }
      else {
        uint64_t v40 = 0;
      }
      if (v39 == v40)
      {
        char v41 = 0;
        uint64_t v42 = v64;
        char v43 = (uint64_t *)(v38 + 16);
        BOOL v44 = v62 && v62 == *(_DWORD *)v38;
        BOOL v45 = !v44;
        int v46 = !v45;
        while (1)
        {
          uint64_t v47 = *v43;
          if ((v41 & 1) == 0 && !v46) {
            break;
          }
          if ((uint64_t *)v42 == &v63) {
            goto LABEL_95;
          }
          if (*(_DWORD *)(v42 + 16) != *(_DWORD *)(v47 + 16)) {
            goto LABEL_96;
          }
          uint64_t v42 = *(void *)(v42 + 8);
          char v43 = (uint64_t *)(v47 + 8);
          char v41 = 1;
        }
        if (v62) {
          goto LABEL_96;
        }
LABEL_95:
        *(float *)&uint64_t v54 = v66;
        LODWORD(v68) = 0;
        LODWORD(v68) = *(_DWORD *)(v38 + 32);
        if (v66 == *(float *)&v68) {
          goto LABEL_97;
        }
      }
    }
LABEL_96:
    uint64_t v48 = v61;
    int v51 = v31;
    std::list<int>::list(v52, (uint64_t)&v63);
    float v53 = v66;
    int v49 = *(_DWORD *)(a1 + 160);
    uint64_t v54 = v48;
    LODWORD(v55) = v51;
    std::list<int>::list(&v56, (uint64_t)v52);
    float v59 = v53;
    int v60 = v49;
    BOOL v50 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(v50, (uint64_t)&v54);
    std::__list_imp<char *>::clear(&v56);
    std::__list_imp<char *>::clear(v52);
LABEL_97:
    uint64_t v14 = &v63;
LABEL_98:
    std::__list_imp<char *>::clear(v14);
    goto LABEL_99;
  }
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final(a1, a2, (uint64_t)&v61);
  uint64_t v13 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  uint64_t v14 = &v62;
  if (v61) {
    uint64_t v15 = v64 + 1;
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(_DWORD *)v13) {
    uint64_t v16 = *(void *)(v13 + 24) + 1;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15 != v16) {
    goto LABEL_98;
  }
  char v17 = 0;
  uint64_t v18 = v63;
  int v19 = (uint64_t *)(v13 + 16);
  if (v61) {
    BOOL v20 = v61 == *(_DWORD *)v13;
  }
  else {
    BOOL v20 = 0;
  }
  int v21 = !v20;
  int v22 = v21 ^ 1;
  while (1)
  {
    uint64_t v23 = *v19;
    if ((v17 & 1) == 0 && !v22) {
      break;
    }
    if ((uint64_t *)v18 == &v62) {
      goto LABEL_53;
    }
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v23 + 16)) {
      goto LABEL_98;
    }
    uint64_t v18 = *(void *)(v18 + 8);
    int v19 = (uint64_t *)(v23 + 8);
    char v17 = 1;
  }
  if (v61) {
    goto LABEL_98;
  }
LABEL_53:
  LODWORD(v54) = v65;
  LODWORD(v68) = 0;
  LODWORD(v68) = *(_DWORD *)(v13 + 32);
  float v24 = *(float *)&v65;
  float v25 = *(float *)&v68;
  std::__list_imp<char *>::clear(&v62);
  if (v24 == v25) {
    goto LABEL_54;
  }
LABEL_99:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetArcs(a1, a2);
}

void sub_1B1F8FC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 7);
  uint64_t v6 = *((void *)MutableState + 8) - v5;
  if (v6)
  {
    unint64_t v7 = v6 / 56;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    int v9 = (int *)(v5 + 48);
    do
    {
      int v11 = *v9;
      v9 += 14;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 80) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 64) - *(void *)(a2 + 56) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GC(a1, (char *)a2, 0, 0.666);
      }
    }
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 7;
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t result = std::list<int>::list((void *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1B1F8FEC0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  int v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  char v17 = &v10[56 * v9];
  *(void *)int v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((void *)v11 + 2, a2 + 16);
  uint64_t v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1F90000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

unint64_t fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(a1, a2, a3, 1);
  }
}

void sub_1B1F90214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v116 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      uint64_t v112 = (uint64_t *)&v116;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>(a1, (uint64_t)&v109);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
      goto LABEL_211;
    }
    uint64_t v11 = a2 & 0xC0000;
    uint64_t v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0) {
      uint64_t v12 = 0x10425A850000;
    }
    unint64_t v13 = v8 | v12;
    uint64_t v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0) {
      v13 |= 0x100000uLL;
    }
    unint64_t v116 = v13;
    memset(&v108, 0, sizeof(v108));
    memset(&v107, 0, sizeof(v107));
    unsigned int v106 = 0;
    uint64_t v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v104);
    int v16 = 0;
LABEL_12:
    if (!v104)
    {
      if ((int)v106 >= v105) {
        goto LABEL_203;
      }
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v104 + 16))(v104))
    {
      if (v104)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v104 + 24))();
LABEL_18:
        std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
        uint64_t v111 = (uint64_t)&v111;
        uint64_t v112 = &v111;
        uint64_t v113 = 0;
        LODWORD(v110) = 0;
        v108.__end_ = v108.__begin_;
        v107.__end_ = v107.__begin_;
        if (v11) {
          std::vector<int>::reserve(&v108, v18);
        }
        if (v14) {
          std::vector<int>::reserve(&v107, v18);
        }
        int v98 = v16;
        unint64_t v103 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v99);
        char v19 = 1;
        while (1)
        {
          if (v99)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v99 + 24))(v99))
            {
              if (v99)
              {
                (*(void (**)(void))(*(void *)v99 + 8))();
              }
              else
              {
LABEL_132:
                if (v102) {
                  --*v102;
                }
              }
              uint64_t v15 = a1;
              int v16 = v98;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v108.__end_ - (char *)v108.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14) {
                  goto LABEL_152;
                }
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  unint64_t v72 = v107.__end_ - v107.__begin_;
                  if (v72 <= 2) {
                    unint64_t v72 = 2;
                  }
                  std::vector<unsigned int>::pointer v73 = v107.__begin_ + 1;
                  unsigned int v74 = *v107.__begin_;
                  unint64_t v75 = v72 - 1;
                  while (1)
                  {
                    unsigned int v77 = *v73++;
                    unsigned int v76 = v77;
                    if (v77 == v74) {
                      break;
                    }
                    unsigned int v74 = v76;
                    if (!--v75) {
                      goto LABEL_152;
                    }
                  }
                  unint64_t v116 = v116 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              unint64_t v66 = v108.__end_ - v108.__begin_;
              if (v66 <= 2) {
                unint64_t v66 = 2;
              }
              std::vector<unsigned int>::pointer v67 = v108.__begin_ + 1;
              unsigned int v68 = *v108.__begin_;
              unint64_t v69 = v66 - 1;
              while (1)
              {
                unsigned int v71 = *v67++;
                unsigned int v70 = v71;
                if (v71 == v68) {
                  break;
                }
                unsigned int v68 = v70;
                if (!--v69) {
                  goto LABEL_141;
                }
              }
              unint64_t v116 = v116 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14) {
                goto LABEL_142;
              }
LABEL_152:
              if (v98 >= 1) {
                unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v99, a1, v17);
              uint64_t v78 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
              if (v99) {
                uint64_t v79 = (char *)v102 + 1;
              }
              else {
                uint64_t v79 = 0;
              }
              if (*(_DWORD *)v78) {
                uint64_t v80 = *(void *)(v78 + 24) + 1;
              }
              else {
                uint64_t v80 = 0;
              }
              if (v79 != (char *)v80) {
                goto LABEL_174;
              }
              char v81 = 0;
              unint64_t v82 = v101;
              unint64_t v83 = (uint64_t *)(v78 + 16);
              BOOL v84 = v99 && v99 == *(_DWORD *)v78;
              BOOL v85 = !v84;
              while (1)
              {
                uint64_t v86 = *v83;
                if ((v81 & 1) == 0 && v85) {
                  break;
                }
                if ((uint64_t *)v82 == &v100) {
                  goto LABEL_173;
                }
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16)) {
                  goto LABEL_174;
                }
                unint64_t v82 = *(void *)(v82 + 8);
                unint64_t v83 = (uint64_t *)(v86 + 8);
                char v81 = 1;
              }
              if (v99) {
                goto LABEL_174;
              }
LABEL_173:
              float v118 = *(float *)&v103;
              float v117 = 0.0;
              float v117 = *(float *)(v78 + 32);
              if (*(float *)&v103 == v117)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v17, *(float *)&v103) != 1)unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
              }
                }
              else
              {
LABEL_174:
                uint64_t v87 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
                if (v99) {
                  unint64_t v88 = (char *)v102 + 1;
                }
                else {
                  unint64_t v88 = 0;
                }
                if (*(_DWORD *)v87) {
                  uint64_t v89 = *(void *)(v87 + 24) + 1;
                }
                else {
                  uint64_t v89 = 0;
                }
                if (v88 != (char *)v89) {
                  goto LABEL_194;
                }
                char v90 = 0;
                unint64_t v91 = v101;
                uint64_t v92 = (uint64_t *)(v87 + 16);
                BOOL v93 = v99 && v99 == *(_DWORD *)v87;
                BOOL v94 = !v93;
                while (1)
                {
                  uint64_t v95 = *v92;
                  if ((v90 & 1) == 0 && v94) {
                    break;
                  }
                  if ((uint64_t *)v91 == &v100) {
                    goto LABEL_193;
                  }
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16)) {
                    goto LABEL_194;
                  }
                  unint64_t v91 = *(void *)(v91 + 8);
                  uint64_t v92 = (uint64_t *)(v95 + 8);
                  char v90 = 1;
                }
                if (v99) {
                  goto LABEL_194;
                }
LABEL_193:
                float v118 = *(float *)&v103;
                float v117 = 0.0;
                float v117 = *(float *)(v87 + 32);
                if (*(float *)&v103 != v117) {
LABEL_194:
                }
                  unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                int v16 = v98 + 1;
              }
              std::__list_imp<char *>::clear(&v100);
              std::__list_imp<char *>::clear(&v111);
              if (v104) {
                (*(void (**)(uint64_t))(*(void *)v104 + 32))(v104);
              }
              else {
                ++v106;
              }
              goto LABEL_12;
            }
            if (v99)
            {
              uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v99 + 32))();
              goto LABEL_29;
            }
          }
          else if (v103 >= v101)
          {
            goto LABEL_132;
          }
          uint64_t v20 = v100 + 56 * v103;
LABEL_29:
          int v21 = *(_DWORD *)v20;
          int v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            unint64_t v116 = v116 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            int v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22) {
                goto LABEL_35;
              }
              goto LABEL_39;
            }
            unint64_t v23 = v116;
          }
          else
          {
            unint64_t v23 = v116 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          unint64_t v116 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_44;
          }
LABEL_39:
          unint64_t v116 = v116 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v109) {
              unint64_t v116 = v116 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            }
            if (v22 < SHIDWORD(v109)) {
              unint64_t v116 = v116 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
            }
          }
LABEL_44:
          uint64_t v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
          int v25 = *(_DWORD *)(v20 + 8);
          if (v25) {
            uint64_t v26 = *(void *)(v20 + 32) + 1;
          }
          else {
            uint64_t v26 = 0;
          }
          if (*(_DWORD *)v24) {
            uint64_t v27 = *(void *)(v24 + 24) + 1;
          }
          else {
            uint64_t v27 = 0;
          }
          if (v26 != v27) {
            goto LABEL_64;
          }
          char v28 = 0;
          BOOL v29 = (uint64_t *)(v20 + 24);
          unsigned int v30 = (uint64_t *)(v24 + 16);
          BOOL v31 = v25 && v25 == *(_DWORD *)v24;
          BOOL v32 = !v31;
          while (1)
          {
            uint64_t v33 = *v29;
            uint64_t v34 = *v30;
            if ((v28 & 1) == 0 && v32) {
              break;
            }
            if (v33 == v20 + 16) {
              goto LABEL_63;
            }
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16)) {
              goto LABEL_64;
            }
            BOOL v29 = (uint64_t *)(v33 + 8);
            unsigned int v30 = (uint64_t *)(v34 + 8);
            char v28 = 1;
          }
          if (v25) {
            goto LABEL_64;
          }
LABEL_63:
          float v118 = 0.0;
          float v118 = *(float *)(v20 + 40);
          float v117 = 0.0;
          float v117 = *(float *)(v24 + 32);
          if (v118 != v117)
          {
LABEL_64:
            uint64_t v35 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
            int v25 = *(_DWORD *)(v20 + 8);
            if (v25) {
              uint64_t v36 = *(void *)(v20 + 32) + 1;
            }
            else {
              uint64_t v36 = 0;
            }
            if (*(_DWORD *)v35) {
              uint64_t v37 = *(void *)(v35 + 24) + 1;
            }
            else {
              uint64_t v37 = 0;
            }
            if (v36 != v37) {
              goto LABEL_84;
            }
            char v38 = 0;
            uint64_t v39 = (uint64_t *)(v20 + 24);
            uint64_t v40 = (uint64_t *)(v35 + 16);
            BOOL v41 = v25 && v25 == *(_DWORD *)v35;
            BOOL v42 = !v41;
            while (1)
            {
              uint64_t v43 = *v39;
              uint64_t v44 = *v40;
              if ((v38 & 1) == 0 && v42) {
                break;
              }
              if (v43 == v20 + 16) {
                goto LABEL_83;
              }
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16)) {
                goto LABEL_84;
              }
              uint64_t v39 = (uint64_t *)(v43 + 8);
              uint64_t v40 = (uint64_t *)(v44 + 8);
              char v38 = 1;
            }
            if (v25) {
              goto LABEL_84;
            }
LABEL_83:
            float v118 = 0.0;
            float v118 = *(float *)(v20 + 40);
            float v117 = 0.0;
            float v117 = *(float *)(v35 + 32);
            if (v118 != v117) {
LABEL_84:
            }
              unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          int v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17) {
            unint64_t v116 = v116 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          }
          if (v45 != v17 + 1) {
            unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          uint64_t v109 = *(void *)v20;
          LODWORD(v110) = v25;
          if (&v109 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v111, *(void *)(v20 + 24), v20 + 16);
            int v45 = *(_DWORD *)(v20 + 48);
          }
          int v114 = *(_DWORD *)(v20 + 40);
          int v115 = v45;
          if (v11)
          {
            std::vector<unsigned int>::pointer end = v108.__end_;
            if (v108.__end_ >= v108.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v108.__begin_;
              int64_t v49 = v108.__end_ - v108.__begin_;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                goto LABEL_213;
              }
              int64_t v51 = (char *)v108.__end_cap_.__value_ - (char *)v108.__begin_;
              if (((char *)v108.__end_cap_.__value_ - (char *)v108.__begin_) >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                float v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v108.__end_cap_, v52);
                std::vector<unsigned int>::pointer begin = v108.__begin_;
                std::vector<unsigned int>::pointer end = v108.__end_;
              }
              else
              {
                float v53 = 0;
              }
              uint64_t v54 = (unsigned int *)&v53[4 * v49];
              *uint64_t v54 = *(_DWORD *)v20;
              uint64_t v47 = v54 + 1;
              while (end != begin)
              {
                unsigned int v55 = *--end;
                *--uint64_t v54 = v55;
              }
              v108.__begin_ = v54;
              v108.__end_ = v47;
              v108.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v108.__end_ = *(_DWORD *)v20;
              uint64_t v47 = end + 1;
            }
            v108.__end_ = v47;
          }
          if (v14)
          {
            std::vector<unsigned int>::pointer v56 = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer v58 = v107.__begin_;
              int64_t v59 = v107.__end_ - v107.__begin_;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62) {
LABEL_213:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              int64_t v61 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                uint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v62);
                std::vector<unsigned int>::pointer v58 = v107.__begin_;
                std::vector<unsigned int>::pointer v56 = v107.__end_;
              }
              else
              {
                uint64_t v63 = 0;
              }
              uint64_t v64 = (unsigned int *)&v63[4 * v59];
              *uint64_t v64 = *(_DWORD *)(v20 + 4);
              uint64_t v57 = v64 + 1;
              while (v56 != v58)
              {
                unsigned int v65 = *--v56;
                *--uint64_t v64 = v65;
              }
              v107.__begin_ = v64;
              v107.__end_ = v57;
              v107.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *v107.__end_ = *(_DWORD *)(v20 + 4);
              uint64_t v57 = v56 + 1;
            }
            v107.__end_ = v57;
          }
          if (v99)
          {
            (*(void (**)(uint64_t))(*(void *)v99 + 40))(v99);
            char v19 = 0;
          }
          else
          {
            char v19 = 0;
            ++v103;
          }
        }
      }
LABEL_17:
      uint64_t v17 = v106;
      goto LABEL_18;
    }
    if (v104) {
      (*(void (**)(void))(*(void *)v104 + 8))();
    }
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
    {
      unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    if (v108.__begin_)
    {
      v108.__end_ = v108.__begin_;
      operator delete(v108.__begin_);
    }
    unint64_t v8 = v116;
LABEL_211:
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1B1F90E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F91798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
    **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

uint64_t fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1F91B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>();
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v34);
  uint64_t v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  if (v34) {
    uint64_t v7 = v35[2] + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (*(_DWORD *)v6) {
    uint64_t v8 = *(void *)(v6 + 24) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 == v8)
  {
    char v9 = 0;
    uint64_t v10 = v35[1];
    uint64_t v11 = (uint64_t *)(v6 + 16);
    if (v34) {
      BOOL v12 = v34 == *(_DWORD *)v6;
    }
    else {
      BOOL v12 = 0;
    }
    int v13 = !v12;
    int v14 = v13 ^ 1;
    while (1)
    {
      uint64_t v15 = *v11;
      if ((v9 & 1) == 0 && !v14) {
        break;
      }
      if ((void *)v10 == v35) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16)) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void *)(v10 + 8);
      uint64_t v11 = (uint64_t *)(v15 + 8);
      char v9 = 1;
    }
    if (v34) {
      goto LABEL_21;
    }
LABEL_42:
    float v38 = v36;
    float v37 = 0.0;
    float v37 = *(float *)(v6 + 32);
    float v32 = v36;
    float v33 = v37;
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      unint64_t v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  unint64_t v17 = a2;
  *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  uint64_t v18 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17)) {
    goto LABEL_36;
  }
  char v19 = 0;
  uint64_t v20 = *(void **)(a1 + 80);
  uint64_t v21 = v20[1];
  uint64_t v22 = **(void **)(a1 + 16);
  unint64_t v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    unint64_t v24 = *v23--;
    v19 |= *(void *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while (v24 != a2);
  int v25 = *(void **)a1;
  uint64_t v26 = **(void **)(a1 + 72);
  for (unint64_t i = (int *)(v21 - 4); ; --i)
  {
    unint64_t v28 = *i;
    if (v25) {
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    }
    unint64_t result = v28 >> 6;
    uint64_t v29 = 1 << v28;
    if ((v19 & 1) == 0) {
      break;
    }
    *(void *)(v22 + 8 * result) |= v29;
    *(void *)(v26 + 8 * result) &= ~v29;
    if (v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(void *)(v26 + 8 * result) &= ~v29;
  if (v28 != a2) {
    goto LABEL_33;
  }
  v20[1] = i;
  **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    uint64_t v30 = **(void **)(a1 + 16);
    if ((*(void *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17)) {
      *(void *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3)) {
      *(_DWORD *)(v18 + 4 * a3) = v31;
    }
  }
  return result;
}

void sub_1B1F91DF4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36FE0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36FE0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36FE0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1F91EA4(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37F98;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1F91FBC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37F98;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::vector<unsigned int>::pointer v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1F92404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    uint64_t v10 = v27 + 56 * v28;
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v25 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v25 = v13;
    }
    *(void *)(a1 + 8) = v25;
    uint64_t v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(uint64_t **)(a1 + 16);
    uint64_t v15 = *(uint64_t **)a1;
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = &v14[7 * v13];
  uint64_t v16 = v26;
  uint64_t v17 = v27;
  unint64_t v19 = v28;
  uint64_t v18 = v29;
  if (v29) {
    ++*v29;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    uint64_t v24 = v15 - 7;
    uint64_t *v24 = *(void *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(void *)(v23 + 24), v23 + 16);
    }
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 56 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B1F926FC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *unint64_t result = &unk_1F0A41780;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1F927DC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F928AC(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1B1F92A54(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      Mutableuint64_t State = 0;
    }
    else {
      Mutableuint64_t State = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  unint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        unint64_t v8 = operator new(0x58uLL);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          char v9 = operator new(0x18uLL);
          void v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)char v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        unint64_t v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        unint64_t v19 = &v18[8 * v14];
        *(void *)unint64_t v19 = v8;
        unint64_t v13 = v19 + 8;
        int v21 = (char *)a1[1];
        unint64_t v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          unint64_t v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        void *v12 = v8;
        unint64_t v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::list<int>::list((void *)(a1 + 8), a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*>>((void *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(void *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1B1F92D2C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1F92DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2 + v7;
      uint64_t v9 = a4 + v7;
      *(void *)uint64_t v9 = *(void *)(a2 + v7);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + v7 + 8);
      std::list<int>::list((void *)(a4 + v7 + 16), a2 + v7 + 16);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(a2 + v7 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v8 + 56 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1F92E58(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 40;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A39F48;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1B1F92F14(_Unwind_Exception *exception_object)
{
  if (*v1) {
    fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::StateIterator(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    uint64_t v2 = result;
    if (!*(unsigned char *)(result + 44))
    {
      unint64_t result = *(void *)(result + 16);
      if (result)
      {
        unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        if (result) {
          return result;
        }
        uint64_t v1 = *(void *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      float v3 = (*(float (**)(void, void))(**(void **)(v1 + 136) + 32))(*(void *)(v1 + 136), *(unsigned int *)(v2 + 40));
      uint64_t v4 = 0;
      float v5 = v3;
      int v6 = -1;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()((float *)&v4, (uint64_t)&v7);
      if (v7) {
        *(unsigned char *)(v2 + 44) = 1;
      }
      return (uint64_t)std::__list_imp<char *>::clear(v8);
    }
  }
  return result;
}

void *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39F48;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39F48;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Next(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 40);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if ((result & 1) == 0)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
LABEL_7:
        return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 44)) {
    *(unsigned char *)(a1 + 44) = 0;
  }
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  else {
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

void *fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DefaultDeterminizeFilter<fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(void *a1, uint64_t a2, void *a3)
{
  *a1 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  if (a3)
  {
    if (*a3) {
      (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
    }
    MEMORY[0x1B3EA8670](a3, 0x20C4093837F09);
  }
  return a1;
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DeterminizeFst<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A3B7A8;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    uint64_t v4 = (void *)fst::cerr(v3);
    float v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1[1] + 8) |= 4uLL;
  }
  operator new();
}

void sub_1B1F93530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~ImplToFst(v18);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + 8) = a2;
  return result;
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A44EA8;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~DeterminizeFst(void *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    char v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Copy()
{
}

void sub_1B1F93830(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitStateIterator()
{
}

void sub_1B1F93924(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B1F93B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DeterminizeFstImplBase<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1F93D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~DeterminizeFstImplBase(void *a1)
{
  *a1 = &unk_1F0A3F688;
  uint64_t v2 = a1[17];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_1B1F93F50(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::Expand(void *a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = v9;
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  uint64_t v4 = v8;
  if (v8 != v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, (uint64_t)(v4 + 5));
      unint64_t v5 = v4[1];
      if (v5)
      {
        do
        {
          int v6 = (void **)v5;
          unint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (void **)v4[2];
          BOOL v7 = *v6 == v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1B1F9402C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (v1 != -1)
  {
    int v2 = v1;
    int v3 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
    int v5 = *v3;
    std::list<int>::list(v6, (uint64_t)(v3 + 2));
    int v7 = v3[8];
    int v8 = v2;
    int v9 = v5;
    std::list<int>::list(v10, (uint64_t)v6);
    int v11 = v7;
    std::__list_imp<char *>::clear(v6);
    operator new();
  }
  return 0xFFFFFFFFLL;
}

void sub_1B1F94168(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X8>)
{
  int v5 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 184) + 88) + 8 * a2);
  int v6 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  *a3 = *v6;
  uint64_t result = std::list<int>::list((void *)a3 + 1, (uint64_t)(v6 + 2));
  a3[8] = v6[8];
  int v8 = (float *)(a3 + 8);
  for (unint64_t i = *v5; i; unint64_t i = (uint64_t *)*i)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v26);
    fst::Times<int,(fst::StringType)2>((int *)i + 4, (uint64_t)&v26, (uint64_t)&v36);
    float v10 = *((float *)i + 12);
    float v11 = NAN;
    if (v10 != -INFINITY)
    {
      float v11 = NAN;
      if (v28 != -INFINITY)
      {
        float v11 = INFINITY;
        BOOL v12 = v28 == INFINITY || v10 == INFINITY;
        float v13 = v10 + v28;
        if (!v12) {
          float v11 = v13;
        }
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)v29, &v36, v11);
    std::__list_imp<char *>::clear(v37);
    BOOL v14 = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v36, (float *)a3 + 8, &v31);
    BOOL v15 = v14;
    if (v14) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = (int *)v29;
    }
    int v32 = *v16;
    if (v14) {
      unint64_t v17 = a3 + 2;
    }
    else {
      unint64_t v17 = v30;
    }
    std::list<int>::list(&v33, (uint64_t)v17);
    if (v15) {
      uint64_t v18 = (float *)a3;
    }
    else {
      uint64_t v18 = (float *)v29;
    }
    float v19 = v18[8];
    float v35 = v19;
    *a3 = v32;
    if (&v32 != a3)
    {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)a3 + 1, v34, (uint64_t)&v33);
      float v19 = v35;
    }
    *((float *)a3 + 8) = v19;
    std::__list_imp<char *>::clear(&v33);
    std::__list_imp<char *>::clear(v30);
    std::__list_imp<char *>::clear(v27);
    int v23 = *a3;
    std::list<int>::list(v24, (uint64_t)(a3 + 2));
    float v25 = *v8;
    int v32 = v23;
    std::list<int>::list(&v33, (uint64_t)v24);
    float v20 = v25;
    float v35 = v25;
    *a3 = v32;
    if (&v32 != a3)
    {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)a3 + 1, v34, (uint64_t)&v33);
      float v20 = v35;
    }
    *((float *)a3 + 8) = v20;
    std::__list_imp<char *>::clear(&v33);
    uint64_t result = std::__list_imp<char *>::clear(v24);
    if (*a3)
    {
      if (*((void *)a3 + 3)) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = *a3 == -2;
      }
      if (!v21)
      {
        float v22 = *((float *)a3 + 8);
        if (v22 < -INFINITY || v22 > -INFINITY) {
          continue;
        }
      }
    }
    else if (*v8 < -INFINITY || *v8 > -INFINITY)
    {
      continue;
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
  return result;
}

void sub_1B1F9444C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (void *)(a1 + 8), (void *)(a1 + 16));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (a2) {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  }
  return a1;
}

void sub_1B1F94520(_Unwind_Exception *a1)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1F9458C(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  *a1 = &unk_1F0A3E090;
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  uint64_t v3 = a1[23];
  if (v3)
  {
    uint64_t v4 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1B3EA8670](v4, 0x10E0C400200E20DLL);
  }
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~DeterminizeFstImplBase(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(uint64_t a1)
{
  uint64_t v4 = a1 + 88;
  uint64_t v2 = *(void **)(a1 + 88);
  uint64_t v3 = *(void *)(v4 + 8);
  if ((int)((unint64_t)(v3 - (void)v2) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::clear((void **)v2[v5]);
        MEMORY[0x1B3EA8670](v6, 0x1020C405F07FB98);
        uint64_t v2 = *(void **)(a1 + 88);
        uint64_t v3 = *(void *)(a1 + 96);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 32);
  return a1;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::clear(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__list_imp<char *>::clear(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  *a1 = 0;
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F948C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F94A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::GetLabelMap(void *a1, int a2, void *a3)
{
  uint64_t v5 = **(uint64_t ***)(*(void *)(a1[23] + 88) + 8 * a2);
  if (!v5) {
    goto LABEL_24;
  }
  do
  {
    uint64_t v6 = *((unsigned int *)v5 + 2);
    uint64_t v7 = a1[17];
    unint64_t v28 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 136))(v7, v6, v26);
    while (1)
    {
      if (!v26[0])
      {
        if (v28 >= v26[2]) {
          goto LABEL_21;
        }
LABEL_8:
        uint64_t v8 = v26[1] + 56 * v28;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)v26[0] + 24))(v26[0])) {
        break;
      }
      if (!v26[0]) {
        goto LABEL_8;
      }
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v26[0] + 32))();
LABEL_9:
      int v9 = *(_DWORD *)(v8 + 48);
      fst::Times<int,(fst::StringType)2>((int *)v5 + 4, v8 + 8, (uint64_t)&v29);
      float v10 = *((float *)v5 + 12);
      float v11 = NAN;
      if (v10 != -INFINITY)
      {
        float v12 = *(float *)(v8 + 40);
        float v11 = NAN;
        if (v12 != -INFINITY)
        {
          float v11 = INFINITY;
          BOOL v13 = v12 == INFINITY || v10 == INFINITY;
          float v14 = v10 + v12;
          if (!v13) {
            float v11 = v14;
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v20, &v29, v11);
      std::__list_imp<char *>::clear(v30);
      v23[0] = v9;
      void v23[2] = v20;
      std::list<int>::list(v24, (uint64_t)v21);
      int v25 = v22;
      std::__list_imp<char *>::clear(v21);
      fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::FilterArc(a1[22], (_DWORD *)v8, (uint64_t)(v5 + 1), v23, (uint64_t)a3);
      std::__list_imp<char *>::clear(v24);
      if (v26[0]) {
        (*(void (**)(void))(*(void *)v26[0] + 40))(v26[0]);
      }
      else {
        ++v28;
      }
    }
    if (v26[0])
    {
      (*(void (**)(void))(*(void *)v26[0] + 8))();
      goto LABEL_23;
    }
LABEL_21:
    if (v27) {
      --*v27;
    }
LABEL_23:
    uint64_t v5 = (uint64_t *)*v5;
  }
  while (v5);
LABEL_24:
  unint64_t v17 = (void *)*a3;
  uint64_t v16 = a3 + 1;
  BOOL v15 = v17;
  if (v17 != v16)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v15 + 5));
      uint64_t v18 = (void *)v15[1];
      if (v18)
      {
        do
        {
          float v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          float v19 = (void *)v15[2];
          BOOL v13 = *v19 == (void)v15;
          BOOL v15 = v19;
        }
        while (!v13);
      }
      BOOL v15 = v19;
    }
    while (v19 != v16);
  }
}

void sub_1B1F94D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_DWORD *a24)
{
  if (a21)
  {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  else if (a24)
  {
    --*a24;
  }
  _Unwind_Resume(exception_object);
}

void *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  v9[0] = (uint64_t)v9;
  v9[1] = (uint64_t)v9;
  void v9[2] = 0;
  v8[0] = *(_DWORD *)a3;
  v8[1] = v8[0];
  v8[2] = *(_DWORD *)(a3 + 8);
  if (v8 != (_DWORD *)a3) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v9, *(void *)(a3 + 24), a3 + 16);
  }
  int v10 = *(_DWORD *)(a3 + 40);
  int State = fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(uint64_t ***)(a3 + 48));
  Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(MutableState, (uint64_t)v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1B1F94E90(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  int v10 = a2;
  uint64_t v7 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v10);
  if (*((_DWORD *)v7 + 10) == -1) {
    fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::DeterminizeArc((uint64_t)&v10, a2);
  }
  uint64_t v8 = (uint64_t *)v7[11];
  *uint64_t v8 = (uint64_t)std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> const&>((uint64_t)v8, *v8, a4);
  return 1;
}

void sub_1B1F94F90(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(uint64_t ***)(a2 + 48);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  uint64_t v5 = *v4;
  if (*v4)
  {
    int v22 = v4;
    uint64_t v23 = a1;
    uint64_t v6 = (int *)(v2 + 8);
    uint64_t v7 = (uint64_t *)(v2 + 16);
    uint64_t v8 = *v4;
    uint64_t v24 = v2;
    do
    {
      int v9 = v8 + 2;
      fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()((uint64_t)v6, (uint64_t)(v8 + 2), (uint64_t)&v25);
      *uint64_t v6 = v25;
      if (v6 != &v25) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v7, v27, (uint64_t)&v26);
      }
      *(_DWORD *)(v2 + 40) = v28;
      std::__list_imp<char *>::clear(&v26);
      if (v5 == v8 || *((_DWORD *)v8 + 2) != *((_DWORD *)v5 + 2))
      {
        BOOL v15 = (uint64_t *)*v8;
        uint64_t v5 = v8;
      }
      else
      {
        int v10 = v7;
        float v11 = (int *)(v5 + 2);
        float v12 = (float *)(v5 + 6);
        BOOL v13 = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v29, (float *)v5 + 12, (float *)v8 + 12);
        if (v13) {
          float v14 = v5;
        }
        else {
          float v14 = v8;
        }
        if (v13) {
          int v9 = v5 + 2;
        }
        int v25 = *((_DWORD *)v14 + 4);
        std::list<int>::list(&v26, (uint64_t)(v9 + 1));
        int v28 = *((_DWORD *)v9 + 8);
        *((_DWORD *)v5 + 4) = v25;
        if (v11 != &v25) {
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v5 + 3, v27, (uint64_t)&v26);
        }
        *(_DWORD *)float v12 = v28;
        std::__list_imp<char *>::clear(&v26);
        if (*v11 == -2 && !v5[5] || *v12 >= -INFINITY && *v12 <= -INFINITY) {
          *(void *)(v23 + 8) |= 4uLL;
        }
        BOOL v15 = (uint64_t *)*v8;
        uint64_t v16 = (void *)*v5;
        unint64_t v17 = (void *)(*v5 + 24);
        *uint64_t v5 = *(void *)*v5;
        std::__list_imp<char *>::clear(v17);
        operator delete(v16);
        uint64_t v7 = v10;
        uint64_t v2 = v24;
      }
      uint64_t v8 = v15;
    }
    while (v15);
    for (unint64_t i = *v22; i; unint64_t i = (uint64_t *)*i)
    {
      float v19 = (int *)(i + 2);
      fst::DivideLeft<int,(fst::StringType)2>((int *)i + 4, v6, (uint64_t)&v29);
      float v20 = *((float *)i + 12);
      float v21 = NAN;
      if (v20 != -INFINITY)
      {
        if ((*(_DWORD *)(v2 + 40) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          float v21 = INFINITY;
          if (v20 != INFINITY) {
            float v21 = v20 - *(float *)(v2 + 40);
          }
        }
        else
        {
          float v21 = NAN;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v25, &v29, v21);
      std::__list_imp<char *>::clear(v30);
      int *v19 = v25;
      if (v19 != &v25) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(i + 3, v27, (uint64_t)&v26);
      }
      *((_DWORD *)i + 12) = v28;
      std::__list_imp<char *>::clear(&v26);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Quantize((float *)i + 4, (uint64_t)&v25, *(float *)(v23 + 144));
      *((_DWORD *)i + 4) = v25;
      if (v19 != &v25) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(i + 3, v27, (uint64_t)&v26);
      }
      *((_DWORD *)i + 12) = v28;
      std::__list_imp<char *>::clear(&v26);
    }
  }
}

void sub_1B1F95290(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::Times<int,(fst::StringType)2>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 && (*a1 == -2 ? (BOOL v6 = *((void *)a1 + 3) == 0) : (BOOL v6 = 0), v6)
    || *(_DWORD *)a2 && (*(_DWORD *)a2 == -2 ? (BOOL v7 = *(void *)(a2 + 24) == 0) : (BOOL v7 = 0), v7))
  {
    float v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
  }
  else
  {
    uint64_t v8 = fst::StringWeight<int,(fst::StringType)2>::Zero();
    int v9 = *a1;
    if (*a1) {
      uint64_t v10 = *((void *)a1 + 3) + 1;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(_DWORD *)v8) {
      uint64_t v11 = *(void *)(v8 + 24) + 1;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v10 != v11) {
      goto LABEL_32;
    }
    char v12 = 0;
    BOOL v13 = (uint64_t *)(a1 + 4);
    float v14 = (uint64_t *)(v8 + 16);
    BOOL v15 = v9 && v9 == *(_DWORD *)v8;
    BOOL v16 = !v15;
    int v17 = !v16;
    while (1)
    {
      uint64_t v18 = *v13;
      uint64_t v19 = *v14;
      if ((v12 & 1) == 0 && !v17) {
        break;
      }
      if ((int *)v18 == a1 + 2) {
        goto LABEL_61;
      }
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16)) {
        goto LABEL_32;
      }
      BOOL v13 = (uint64_t *)(v18 + 8);
      float v14 = (uint64_t *)(v19 + 8);
      char v12 = 1;
    }
    if (v9)
    {
LABEL_32:
      uint64_t v21 = fst::StringWeight<int,(fst::StringType)2>::Zero();
      int v22 = *(_DWORD *)a2;
      if (*(_DWORD *)a2) {
        uint64_t v23 = *(void *)(a2 + 24) + 1;
      }
      else {
        uint64_t v23 = 0;
      }
      if (*(_DWORD *)v21) {
        uint64_t v24 = *(void *)(v21 + 24) + 1;
      }
      else {
        uint64_t v24 = 0;
      }
      if (v23 != v24) {
        goto LABEL_52;
      }
      char v25 = 0;
      uint64_t v26 = (uint64_t *)(a2 + 16);
      uint64_t v27 = (uint64_t *)(v21 + 16);
      BOOL v28 = v22 && v22 == *(_DWORD *)v21;
      BOOL v29 = !v28;
      int v30 = !v29;
      while (1)
      {
        uint64_t v31 = *v26;
        uint64_t v32 = *v27;
        if ((v25 & 1) == 0 && !v30) {
          break;
        }
        if (v31 == a2 + 8) {
          goto LABEL_61;
        }
        if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16)) {
          goto LABEL_52;
        }
        uint64_t v26 = (uint64_t *)(v31 + 8);
        uint64_t v27 = (uint64_t *)(v32 + 8);
        char v25 = 1;
      }
      if (v22)
      {
LABEL_52:
        *(_DWORD *)a3 = *a1;
        uint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(a1 + 2));
        char v34 = 0;
        for (unint64_t i = (uint64_t *)(a2 + 16); ; unint64_t i = (uint64_t *)(v36 + 8))
        {
          uint64_t v36 = *i;
          do
          {
            char v37 = v34;
            if (v34)
            {
              if (v36 == a2 + 8) {
                return result;
              }
              int v38 = *(_DWORD *)(v36 + 16);
            }
            else
            {
              int v38 = *(_DWORD *)a2;
              if (!*(_DWORD *)a2) {
                return result;
              }
            }
            uint64_t result = fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a3, v38);
            char v34 = 1;
          }
          while ((v37 & 1) == 0);
        }
      }
    }
LABEL_61:
    float v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::Zero();
  }
  *(_DWORD *)a3 = *v20;
  return std::list<int>::list((void *)(a3 + 8), (uint64_t)(v20 + 2));
}

void sub_1B1F954D4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)2>::NoWeight()
{
  {
    operator new();
  }
  return fst::StringWeight<int,(fst::StringType)2>::NoWeight(void)::no_weight;
}

void sub_1B1F95564(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C40CA22B68ALL);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  BOOL v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t *)v5;
        int v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        BOOL v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        BOOL v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = **a2;
  v6[10] = -1;
  int v7 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  v6[12] = *v7;
  uint64_t result = std::list<int>::list((void *)v6 + 7, (uint64_t)(v7 + 2));
  v6[20] = v7[8];
  *((void *)v6 + 11) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1F956F0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__list_imp<char *>::clear(v2 + 7);
    }
    operator delete(v2);
  }
}

void fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  uint64_t v3 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  *(_DWORD *)(a1 + 8) = *v3;
  std::list<int>::list((void *)(a1 + 16), (uint64_t)(v3 + 2));
  *(_DWORD *)(a1 + 40) = v3[8];
  operator new();
}

void sub_1B1F957E4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_DWORD *std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = operator new(0x38uLL);
  *(void *)uint64_t v5 = a2;
  void v5[2] = *a3;
  v5[4] = a3[2];
  std::list<int>::list((void *)v5 + 3, (uint64_t)(a3 + 4));
  v5[12] = a3[10];
  return v5;
}

void sub_1B1F9585C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  fst::LabelCommonDivisor<int,(fst::StringType)2>::operator()((int *)a1, a2, (uint64_t)&v10);
  float v6 = *(float *)(a1 + 32);
  float v7 = NAN;
  if (v6 != -INFINITY)
  {
    float v8 = *(float *)(a2 + 32);
    float v7 = NAN;
    if (v8 != -INFINITY)
    {
      if (v6 >= v8) {
        float v7 = *(float *)(a2 + 32);
      }
      else {
        float v7 = *(float *)(a1 + 32);
      }
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight(a3, &v10, v7);
  return std::__list_imp<char *>::clear(v11);
}

void sub_1B1F95910(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void *fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1B1F95980(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::LabelCommonDivisor<int,(fst::StringType)2>::operator()@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = (uint64_t *)(a1 + 4);
  if (!*a1) {
    goto LABEL_51;
  }
  BOOL v7 = *((void *)a1 + 3) == -1 || *(_DWORD *)a2 == 0;
  if (v7 || *(void *)(a2 + 24) == -1) {
    goto LABEL_51;
  }
  uint64_t v9 = fst::StringWeight<int,(fst::StringType)2>::Zero();
  int v10 = *a1;
  if (*a1) {
    uint64_t v11 = *((void *)a1 + 3) + 1;
  }
  else {
    uint64_t v11 = 0;
  }
  if (*(_DWORD *)v9) {
    uint64_t v12 = *(void *)(v9 + 24) + 1;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v11 == v12)
  {
    char v13 = 0;
    float v14 = (uint64_t *)(v9 + 16);
    if (v10) {
      BOOL v15 = v10 == *(_DWORD *)v9;
    }
    else {
      BOOL v15 = 0;
    }
    int v16 = !v15;
    int v17 = v16 ^ 1;
    while (1)
    {
      uint64_t v18 = *v4;
      uint64_t v19 = *v14;
      if ((v13 & 1) == 0 && !v17) {
        break;
      }
      if ((int *)v18 == a1 + 2) {
        goto LABEL_48;
      }
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16)) {
        goto LABEL_29;
      }
      uint64_t v4 = (uint64_t *)(v18 + 8);
      float v14 = (uint64_t *)(v19 + 8);
      char v13 = 1;
    }
    if (v10) {
      goto LABEL_29;
    }
LABEL_48:
    int v21 = *(_DWORD *)a2;
    goto LABEL_55;
  }
LABEL_29:
  uint64_t v20 = fst::StringWeight<int,(fst::StringType)2>::Zero();
  int v21 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    uint64_t v22 = *(void *)(a2 + 24) + 1;
  }
  else {
    uint64_t v22 = 0;
  }
  if (*(_DWORD *)v20) {
    uint64_t v23 = *(void *)(v20 + 24) + 1;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v22 == v23)
  {
    char v24 = 0;
    char v25 = (uint64_t *)(a2 + 16);
    uint64_t v26 = (uint64_t *)(v20 + 16);
    if (v21) {
      BOOL v27 = v21 == *(_DWORD *)v20;
    }
    else {
      BOOL v27 = 0;
    }
    int v28 = !v27;
    int v29 = v28 ^ 1;
    while (1)
    {
      uint64_t v30 = *v25;
      uint64_t v31 = *v26;
      if ((v24 & 1) == 0 && !v29) {
        break;
      }
      if (v30 == a2 + 8) {
        goto LABEL_54;
      }
      if (*(_DWORD *)(v30 + 16) != *(_DWORD *)(v31 + 16)) {
        goto LABEL_50;
      }
      char v25 = (uint64_t *)(v30 + 8);
      uint64_t v26 = (uint64_t *)(v31 + 8);
      char v24 = 1;
    }
    if (v21) {
      goto LABEL_50;
    }
LABEL_54:
    int v21 = *a1;
    goto LABEL_55;
  }
LABEL_50:
  if (*a1 != v21)
  {
LABEL_51:
    uint64_t v32 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::One();
    *(_DWORD *)a3 = *v32;
    return std::list<int>::list((void *)(a3 + 8), (uint64_t)(v32 + 2));
  }
LABEL_55:
  return (void *)fst::StringWeight<int,(fst::StringType)2>::StringWeight(a3, v21);
}

void *fst::Divide<int,(fst::StringType)2>@<X0>(int *a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 == 1)
  {
    return fst::DivideRight<int,(fst::StringType)2>(a1, a2, a4);
  }
  else if (a3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    float v6 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    BOOL v7 = (void *)fst::cerr(v6);
    float v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"StringWeight::Divide: ", 22);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"only explicit left or right division is defined ", 48);
    int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"for the ", 8);
    uint64_t v11 = fst::StringWeight<int,(fst::StringType)2>::Type();
    int v12 = *(char *)(v11 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = *(void *)v11;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v11 + 8);
    }
    BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" semiring", 9);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    int v16 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
    *(_DWORD *)a4 = *v16;
    return std::list<int>::list((void *)(a4 + 8), (uint64_t)(v16 + 2));
  }
  else
  {
    return fst::DivideLeft<int,(fst::StringType)2>(a1, a2, a4);
  }
}

void sub_1B1F95CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::DivideLeft<int,(fst::StringType)2>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 && (*a1 == -2 ? (BOOL v6 = *((void *)a1 + 3) == 0) : (BOOL v6 = 0), v6)
    || *a2 && (*a2 == -2 ? (BOOL v7 = *((void *)a2 + 3) == 0) : (BOOL v7 = 0), v7))
  {
    uint64_t v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
    goto LABEL_31;
  }
  uint64_t v8 = fst::StringWeight<int,(fst::StringType)2>::Zero();
  int v9 = *a2;
  if (*a2) {
    uint64_t v10 = *((void *)a2 + 3) + 1;
  }
  else {
    uint64_t v10 = 0;
  }
  if (*(_DWORD *)v8) {
    uint64_t v11 = *(void *)(v8 + 24) + 1;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10 != v11)
  {
LABEL_35:
    uint64_t result = (void *)fst::StringWeight<int,(fst::StringType)2>::Zero();
    int v22 = *a1;
    if (*a1) {
      uint64_t v23 = *((void *)a1 + 3) + 1;
    }
    else {
      uint64_t v23 = 0;
    }
    if (*(_DWORD *)result) {
      uint64_t v24 = result[3] + 1;
    }
    else {
      uint64_t v24 = 0;
    }
    if (v23 != v24)
    {
      uint64_t v26 = *((void *)a1 + 2);
LABEL_55:
      unint64_t v33 = 0;
      char v34 = 0;
      *(void *)(a3 + 8) = a3 + 8;
      *(void *)(a3 + 16) = a3 + 8;
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
      *(_DWORD *)a3 = 0;
      if (*a1)
      {
        do
        {
          if (!*a2 || *((void *)a2 + 3) + 1 <= v33)
          {
            float v35 = (int *)(v26 + 16);
            if ((v34 & 1) == 0) {
              float v35 = a1;
            }
            uint64_t result = fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a3, *v35);
          }
          if (v34) {
            uint64_t v26 = *(void *)(v26 + 8);
          }
          ++v33;
          char v34 = 1;
        }
        while ((int *)v26 != a1 + 2);
      }
      return result;
    }
    char v25 = 0;
    uint64_t v26 = *((void *)a1 + 2);
    BOOL v27 = result + 2;
    if (v22) {
      BOOL v28 = v22 == *(_DWORD *)result;
    }
    else {
      BOOL v28 = 0;
    }
    int v29 = !v28;
    int v30 = v29 ^ 1;
    uint64_t v31 = *((void *)a1 + 2);
    while (1)
    {
      uint64_t v32 = *v27;
      if ((v25 & 1) == 0 && !v30) {
        break;
      }
      if ((int *)v31 == a1 + 2) {
        goto LABEL_72;
      }
      if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16)) {
        goto LABEL_55;
      }
      uint64_t v31 = *(void *)(v31 + 8);
      BOOL v27 = (uint64_t *)(v32 + 8);
      char v25 = 1;
    }
    if (v22) {
      goto LABEL_55;
    }
LABEL_72:
    uint64_t v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::Zero();
LABEL_31:
    *(_DWORD *)a3 = *v20;
    return std::list<int>::list((void *)(a3 + 8), (uint64_t)(v20 + 2));
  }
  char v12 = 0;
  uint64_t v13 = (uint64_t *)(a2 + 4);
  uint64_t v14 = (uint64_t *)(v8 + 16);
  if (v9) {
    BOOL v15 = v9 == *(_DWORD *)v8;
  }
  else {
    BOOL v15 = 0;
  }
  int v16 = !v15;
  int v17 = v16 ^ 1;
  while (1)
  {
    uint64_t v18 = *v13;
    uint64_t v19 = *v14;
    if ((v12 & 1) == 0 && !v17) {
      break;
    }
    if ((int *)v18 == a2 + 2) {
      goto LABEL_68;
    }
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16)) {
      goto LABEL_35;
    }
    uint64_t v13 = (uint64_t *)(v18 + 8);
    uint64_t v14 = (uint64_t *)(v19 + 8);
    char v12 = 1;
  }
  if (v9) {
    goto LABEL_35;
  }
LABEL_68:
  return (void *)fst::StringWeight<int,(fst::StringType)2>::StringWeight(a3, -2);
}

void sub_1B1F95F7C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::DivideRight<int,(fst::StringType)2>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 && (*a1 == -2 ? (BOOL v6 = *((void *)a1 + 3) == 0) : (BOOL v6 = 0), v6)
    || *a2 && (*a2 == -2 ? (BOOL v7 = *((void *)a2 + 3) == 0) : (BOOL v7 = 0), v7))
  {
    uint64_t v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
    goto LABEL_31;
  }
  uint64_t v8 = fst::StringWeight<int,(fst::StringType)2>::Zero();
  int v9 = *a2;
  if (*a2) {
    uint64_t v10 = *((void *)a2 + 3) + 1;
  }
  else {
    uint64_t v10 = 0;
  }
  if (*(_DWORD *)v8) {
    uint64_t v11 = *(void *)(v8 + 24) + 1;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10 != v11)
  {
LABEL_35:
    uint64_t result = (void *)fst::StringWeight<int,(fst::StringType)2>::Zero();
    int v22 = *a1;
    if (*a1) {
      uint64_t v23 = *((void *)a1 + 3) + 1;
    }
    else {
      uint64_t v23 = 0;
    }
    if (*(_DWORD *)result) {
      uint64_t v24 = result[3] + 1;
    }
    else {
      uint64_t v24 = 0;
    }
    if (v23 != v24)
    {
LABEL_54:
      *(void *)(a3 + 8) = a3 + 8;
      *(void *)(a3 + 16) = a3 + 8;
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
      *(_DWORD *)a3 = 0;
      if (v22)
      {
LABEL_61:
        unint64_t v33 = 0;
        char v34 = a1 + 2;
        while (1)
        {
          if (!*a2 || *((void *)a2 + 3) + 1 <= v33)
          {
            float v35 = a1;
            if (v34 != *((void **)a1 + 2)) {
              float v35 = (int *)(*v34 + 16);
            }
            uint64_t result = fst::StringWeight<int,(fst::StringType)1>::PushFront((_DWORD *)a3, *v35);
          }
          if (v34 == *((void **)a1 + 2)) {
            break;
          }
          char v34 = (void *)*v34;
          ++v33;
        }
      }
      return result;
    }
    char v25 = 0;
    uint64_t v26 = (uint64_t *)(a1 + 4);
    BOOL v27 = result + 2;
    if (v22) {
      BOOL v28 = v22 == *(_DWORD *)result;
    }
    else {
      BOOL v28 = 0;
    }
    int v29 = !v28;
    int v30 = v29 ^ 1;
    while (1)
    {
      uint64_t v31 = *v26;
      uint64_t v32 = *v27;
      if ((v25 & 1) == 0 && !v30) {
        break;
      }
      if ((int *)v31 == a1 + 2) {
        goto LABEL_69;
      }
      if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16)) {
        goto LABEL_54;
      }
      uint64_t v26 = (uint64_t *)(v31 + 8);
      BOOL v27 = (uint64_t *)(v32 + 8);
      char v25 = 1;
    }
    if (v22)
    {
      *(void *)(a3 + 8) = a3 + 8;
      *(void *)(a3 + 16) = a3 + 8;
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
      *(_DWORD *)a3 = 0;
      goto LABEL_61;
    }
LABEL_69:
    uint64_t v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::Zero();
LABEL_31:
    *(_DWORD *)a3 = *v20;
    return std::list<int>::list((void *)(a3 + 8), (uint64_t)(v20 + 2));
  }
  char v12 = 0;
  uint64_t v13 = (uint64_t *)(a2 + 4);
  uint64_t v14 = (uint64_t *)(v8 + 16);
  if (v9) {
    BOOL v15 = v9 == *(_DWORD *)v8;
  }
  else {
    BOOL v15 = 0;
  }
  int v16 = !v15;
  int v17 = v16 ^ 1;
  while (1)
  {
    uint64_t v18 = *v13;
    uint64_t v19 = *v14;
    if ((v12 & 1) == 0 && !v17) {
      break;
    }
    if ((int *)v18 == a2 + 2) {
      goto LABEL_56;
    }
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16)) {
      goto LABEL_35;
    }
    uint64_t v13 = (uint64_t *)(v18 + 8);
    uint64_t v14 = (uint64_t *)(v19 + 8);
    char v12 = 1;
  }
  if (v9) {
    goto LABEL_35;
  }
LABEL_56:
  return (void *)fst::StringWeight<int,(fst::StringType)2>::StringWeight(a3, -2);
}

void sub_1B1F961F4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)2>::Type()
{
  {
    operator new();
  }
  return fst::StringWeight<int,(fst::StringType)2>::Type(void)::type;
}

void sub_1B1F96288(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1B1F9631C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v8 = *a1;
  std::list<int>::list(v9, (uint64_t)(a1 + 2));
  float v6 = a1[8];
  if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
    float v6 = floorf((float)(v6 / a3) + 0.5) * a3;
  }
  *(float *)a2 = v8;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v9);
  *(float *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v9);
}

void sub_1B1F963D8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, uint64_t **a2)
{
  uint64_t State = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::FindState(*(void **)(a1 + 184), a2);
  uint64_t v5 = State;
  if (*(void *)(a1 + 152))
  {
    float v6 = *(uint64_t **)(a1 + 160);
    if (0xCCCCCCCCCCCCCCCDLL * ((v6[1] - *v6) >> 3) <= (int)State)
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (uint64_t)&v10);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v8 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>(v6, &v10);
      }
      else
      {
        *(_DWORD *)unint64_t v7 = v10;
        std::list<int>::list((void *)(v7 + 8), (uint64_t)v11);
        *(_DWORD *)(v7 + 32) = v12;
        uint64_t v8 = v7 + 40;
        v6[1] = v7 + 40;
      }
      v6[1] = v8;
      std::__list_imp<char *>::clear(v11);
    }
  }
  return v5;
}

void sub_1B1F964C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::FindState(void *a1, void **a2)
{
  float v6 = a2;
  uint64_t v2 = (a1[12] - a1[11]) >> 3;
  uint64_t Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v6, 1);
  if (Id != v2)
  {
    uint64_t v4 = v6;
    if (v6)
    {
      std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::clear(v6);
      MEMORY[0x1B3EA8670](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

void *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::ComputeDistance@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  *(_DWORD *)a3 = *v5;
  uint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(v5 + 2));
  *(_DWORD *)(a3 + 32) = v5[8];
  for (unint64_t i = *a2; i; unint64_t i = (uint64_t *)*i)
  {
    unint64_t v8 = *((int *)i + 2);
    uint64_t v9 = **(void **)(a1 + 152);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a1 + 152) + 8) - v9) >> 3) <= v8) {
      uint64_t v10 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
    }
    else {
      uint64_t v10 = v9 + 40 * (int)v8;
    }
    int v28 = *(_DWORD *)v10;
    std::list<int>::list(v29, v10 + 8);
    float v30 = *(float *)(v10 + 32);
    fst::Times<int,(fst::StringType)2>((int *)i + 4, (uint64_t)&v28, (uint64_t)&v31);
    float v11 = *((float *)i + 12);
    float v12 = NAN;
    if (v11 != -INFINITY)
    {
      float v12 = NAN;
      if (v30 != -INFINITY)
      {
        float v12 = INFINITY;
        BOOL v13 = v30 == INFINITY || v11 == INFINITY;
        float v14 = v11 + v30;
        if (!v13) {
          float v12 = v14;
        }
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)v22, &v31, v12);
    std::__list_imp<char *>::clear(v32);
    BOOL v15 = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v31, (float *)(a3 + 32), &v24);
    BOOL v16 = v15;
    if (v15) {
      int v17 = (int *)a3;
    }
    else {
      int v17 = (int *)v22;
    }
    int v25 = *v17;
    if (v15) {
      uint64_t v18 = (void *)(a3 + 8);
    }
    else {
      uint64_t v18 = v23;
    }
    std::list<int>::list(v26, (uint64_t)v18);
    if (v16) {
      uint64_t v19 = (unsigned char *)a3;
    }
    else {
      uint64_t v19 = v22;
    }
    int v20 = *((_DWORD *)v19 + 8);
    int v27 = v20;
    *(_DWORD *)a3 = v25;
    if (&v25 != (int *)a3)
    {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v26[1], (uint64_t)v26);
      int v20 = v27;
    }
    *(_DWORD *)(a3 + 32) = v20;
    std::__list_imp<char *>::clear(v26);
    std::__list_imp<char *>::clear(v23);
    uint64_t result = std::__list_imp<char *>::clear(v29);
  }
  return result;
}

void sub_1B1F9677C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v4);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(void *a1, void *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  unint64_t v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, (int *)&fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  uint64_t v10 = (void *)a1[11];
  uint64_t v11 = ((uint64_t)v10 - v9) >> 3;
  unsigned int v23 = v11;
  unint64_t v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v12 - v9;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v15 = v11 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    }
    else {
      int v17 = 0;
    }
    uint64_t v18 = &v17[8 * v11];
    uint64_t v19 = &v17[8 * v16];
    *(void *)uint64_t v18 = *a2;
    BOOL v13 = v18 + 8;
    int v21 = (char *)a1[10];
    int v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      int v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    void *v10 = *a2;
    BOOL v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  uint64_t v4 = *a2;
  if ((int)v4 < -1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v5 = a1[4];
    if (v4 == -1) {
      uint64_t v6 = *(uint64_t ****)(v5 + 104);
    }
    else {
      uint64_t v6 = (uint64_t ***)(*(void *)(v5 + 80) + 8 * v4);
    }
    unint64_t v7 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v5, *v6);
  }
  int8x8_t v8 = (int8x8_t)a1[1];
  if (!*(void *)&v8) {
    return 0;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v11 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v8 - 1) & v7;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  BOOL v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = a1 + 6;
    do
    {
      unint64_t v15 = v13[1];
      if (v15 == v7)
      {
        if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v14, *((_DWORD *)v13 + 4), *a2))return v13; {
      }
        }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(void *)&v8) {
            v15 %= *(void *)&v8;
          }
        }
        else
        {
          v15 &= *(void *)&v8 - 1;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      BOOL v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1) {
    return a2 == a3;
  }
  uint64_t v3 = *a1;
  if (a2 == -1) {
    uint64_t v4 = *(uint64_t **)(v3 + 104);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 80) + 8 * a2);
  }
  if (a3 == -1) {
    uint64_t v6 = *(uint64_t **)(v3 + 104);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(v3 + 80) + 8 * a3);
  }
  return fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::operator==(*v4, *v6);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *((char *)a2 + 8);
  uint64_t v3 = (int *)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v4 = v3[2];
      v2 ^= fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(v3 + 4) ^ (2 * v2) ^ (32 * v4) ^ (v4 >> 59);
      uint64_t v3 = *(int **)v3;
    }
    while (v3);
  }
  return v2;
}

uint64_t fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a1 + 8)) {
    return 0;
  }
  uint64_t v2 = (void *)a2;
  uint64_t v3 = (void *)a1;
  while (1)
  {
    uint64_t v2 = (void *)*v2;
    uint64_t v3 = (void *)*v3;
    if (!v2 || v3 == 0) {
      break;
    }
    if (!fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::operator==((uint64_t)(v2 + 1), (uint64_t)(v3 + 1)))return 0; {
  }
    }
  return (v2 != 0) ^ (v3 == 0);
}

BOOL fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = v2 ? *(void *)(a1 + 32) + 1 : 0;
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 ? *(void *)(a2 + 32) + 1 : 0;
  if (v3 != v5) {
    return 0;
  }
  char v6 = 0;
  unint64_t v7 = (uint64_t *)(a1 + 24);
  int8x8_t v8 = (uint64_t *)(a2 + 24);
  if (v2) {
    BOOL v9 = v2 == v4;
  }
  else {
    BOOL v9 = 0;
  }
  int v10 = !v9;
  int v11 = v10 ^ 1;
  while (1)
  {
    uint64_t v12 = *v7;
    uint64_t v13 = *v8;
    if ((v6 & 1) == 0 && !v11) {
      break;
    }
    if (v12 == a1 + 16) {
      return *(float *)(a1 + 40) == *(float *)(a2 + 40);
    }
    if (*(_DWORD *)(v12 + 16) != *(_DWORD *)(v13 + 16)) {
      return 0;
    }
    unint64_t v7 = (uint64_t *)(v12 + 8);
    int8x8_t v8 = (uint64_t *)(v13 + 8);
    char v6 = 1;
  }
  if (v2) {
    return 0;
  }
  return *(float *)(a1 + 40) == *(float *)(a2 + 40);
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v7 = *a2;
  if ((int)v7 < -1)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v7 == -1) {
      BOOL v9 = *(uint64_t ****)(v8 + 104);
    }
    else {
      BOOL v9 = (uint64_t ***)(*(void *)(v8 + 80) + 8 * v7);
    }
    unint64_t v10 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v8, *v9);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x18uLL);
  *(void *)unint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  float v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)unint64_t i = *v24;
LABEL_44:
    void *v24 = i;
    goto LABEL_45;
  }
  *(void *)unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    float v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1F96E98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  unint64_t v16 = &v10[40 * v9];
  *(_DWORD *)unint64_t v11 = *a2;
  std::list<int>::list((void *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1F96FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      *(_DWORD *)(a7 + v11 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((void *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1F970CC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 8;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, a2[1]);
    std::__list_imp<char *>::clear(a2 + 7);
    operator delete(a2);
  }
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void *fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 64))(&v10, a1, a2);
    int v7 = v10;
    std::list<int>::list(v8, (uint64_t)v11);
    int v9 = v12;
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v7);
    std::__list_imp<char *>::clear(v8);
    std::__list_imp<char *>::clear(v11);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1B1F972E4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

void *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DeterminizeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A3B7A8;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B1F97570(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 7);
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((*((void *)v19 + 8) - v8) >> 3);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      int v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        int v14 = *v12;
        v12 += 14;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1F9770C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1F977B4(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FactorWeightFst()
{
}

void sub_1B1F978C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::~FactorWeightFst(void *a1)
{
  fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Start(uint64_t a1)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Copy()
{
}

void sub_1B1F97AA0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::InitStateIterator()
{
}

void sub_1B1F97B94(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1F97DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  unint64_t v21 = v19;
  uint64_t v22 = (uint64_t)(v19 - 5);
  uint64_t v23 = *v21;
  if (*v21)
  {
    v18[30] = v23;
    operator delete(v23);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(v22);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::~FactorWeightFstImpl(uint64_t a1)
{
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::~FactorWeightFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::~FactorWeightFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3EF38;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(void *)(a1 + 240) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(a1 + 192);
  unint64_t v5 = (void **)(a1 + 168);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Start(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
  {
    *(unsigned char *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result != -1)
  {
    int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
    BOOL v4 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
    int v6 = *v4;
    std::list<int>::list(v7, (uint64_t)(v4 + 2));
    int v8 = v4[8];
    v9[0] = v3;
    void v9[2] = v6;
    std::list<int>::list(v10, (uint64_t)v7);
    int v11 = v8;
    int State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FindState(a1, v9);
    std::__list_imp<char *>::clear(v10);
    std::__list_imp<char *>::clear(v7);
    *(_DWORD *)(a1 + 64) = State;
    *(unsigned char *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= State) {
      *(_DWORD *)(a1 + 68) = State + 1;
    }
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

void sub_1B1F98144(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FindState(uint64_t a1, int *a2)
{
  if ((*(unsigned char *)(a1 + 148) & 2) != 0) {
    goto LABEL_27;
  }
  uint64_t v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
  int v5 = a2[2];
  uint64_t v6 = v5 ? *((void *)a2 + 4) + 1 : 0;
  uint64_t v7 = *(_DWORD *)v4 ? *(void *)(v4 + 24) + 1 : 0;
  if (v6 != v7) {
    goto LABEL_27;
  }
  char v8 = 0;
  unint64_t v9 = (uint64_t *)(a2 + 6);
  uint64_t v10 = (uint64_t *)(v4 + 16);
  BOOL v11 = v5 && v5 == *(_DWORD *)v4;
  BOOL v12 = !v11;
  int v13 = !v12;
  while (1)
  {
    uint64_t v14 = *v9;
    uint64_t v15 = *v10;
    if ((v8 & 1) == 0 && !v13) {
      break;
    }
    if ((int *)v14 == a2 + 4) {
      goto LABEL_22;
    }
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16)) {
      goto LABEL_27;
    }
    unint64_t v9 = (uint64_t *)(v14 + 8);
    uint64_t v10 = (uint64_t *)(v15 + 8);
    char v8 = 1;
  }
  if (v5) {
    goto LABEL_27;
  }
LABEL_22:
  v40[0] = 0;
  v40[0] = a2[10];
  float v44 = 0.0;
  float v44 = *(float *)(v4 + 32);
  int v16 = *a2;
  if (*(float *)v40 != v44 || v16 == -1)
  {
LABEL_27:
    float v18 = std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>((void *)(a1 + 192), a2);
    if (v18)
    {
      return *((unsigned int *)v18 + 16);
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 176);
      unint64_t v20 = (uint64_t *)(a1 + 168);
      uint64_t v19 = -1431655765 * ((v21 - *(void *)(a1 + 168)) >> 4);
      if (v21 >= *(void *)(a1 + 184))
      {
        uint64_t v22 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element const&>(v20, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element const&>((uint64_t)v20, a2);
        uint64_t v22 = v21 + 48;
      }
      *(void *)(a1 + 176) = v22;
      int v23 = a2[2];
      v40[0] = *a2;
      v40[2] = v23;
      std::list<int>::list(v41, (uint64_t)(a2 + 4));
      int v42 = a2[10];
      int v43 = v19;
      std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(a1 + 192, v40, v40);
      std::__list_imp<char *>::clear(v41);
    }
  }
  else
  {
    uint64_t v25 = v16;
    uint64_t v26 = *(char **)(a1 + 232);
    int v27 = *(char **)(a1 + 240);
    unint64_t v28 = (v27 - v26) >> 2;
    if (v28 <= v16)
    {
      int v29 = (void *)(a1 + 248);
      do
      {
        if ((unint64_t)v27 >= *v29)
        {
          unint64_t v31 = v28 + 1;
          if ((v28 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v32 = *v29 - (void)v26;
          if (v32 >> 1 > v31) {
            unint64_t v31 = v32 >> 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            char v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v33);
            uint64_t v26 = *(char **)(a1 + 232);
            int v27 = *(char **)(a1 + 240);
          }
          else
          {
            char v34 = 0;
          }
          float v35 = &v34[4 * v28];
          *(_DWORD *)float v35 = -1;
          float v30 = v35 + 4;
          while (v27 != v26)
          {
            int v36 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(void *)(a1 + 232) = v35;
          *(void *)(a1 + 240) = v30;
          *(void *)(a1 + 248) = &v34[4 * v33];
          if (v26)
          {
            operator delete(v26);
            uint64_t v26 = *(char **)(a1 + 232);
          }
          else
          {
            uint64_t v26 = v35;
          }
        }
        else
        {
          *(_DWORD *)int v27 = -1;
          float v30 = v27 + 4;
        }
        *(void *)(a1 + 240) = v30;
        unint64_t v28 = (v30 - v26) >> 2;
        int v16 = *a2;
        int v27 = v30;
      }
      while (v28 <= *a2);
      uint64_t v25 = v16;
    }
    if (*(_DWORD *)&v26[4 * v25] == -1)
    {
      unint64_t v37 = *(void *)(a1 + 176);
      *(_DWORD *)&v26[4 * v25] = -1431655765 * ((v37 - *(void *)(a1 + 168)) >> 4);
      int v38 = (uint64_t *)(a1 + 168);
      if (v37 >= *(void *)(a1 + 184))
      {
        uint64_t v39 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element const&>(v38, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element const&>((uint64_t)v38, a2);
        uint64_t v39 = v37 + 48;
      }
      *(void *)(a1 + 176) = v39;
      int v16 = *a2;
      uint64_t v26 = *(char **)(a1 + 232);
    }
    return *(unsigned int *)&v26[4 * v16];
  }
  return v19;
}

void sub_1B1F9846C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v4 = *a2;
  *(_DWORD *)(v4 + 8) = a2[2];
  uint64_t result = std::list<int>::list((void *)(v4 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(v4 + 40) = a2[10];
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1B1F984DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = (char *)&v10[12 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  int v16 = (char *)&v10[12 * v9];
  *(_DWORD *)BOOL v11 = *a2;
  *((_DWORD *)v11 + 2) = a2[2];
  std::list<int>::list((void *)v11 + 2, (uint64_t)(a2 + 4));
  v10[12 * v4 + 10] = a2[10];
  v15 += 48;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1F985FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      *(_DWORD *)(v12 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((void *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 48;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1F98720(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    uint64_t v6 = (int *)(*(void *)(a1 + 168) + 48 * a2);
    int v8 = *v6;
    uint64_t v7 = v6 + 2;
    if (v8 == -1)
    {
      int v28 = *v7;
      std::list<int>::list(v29, (uint64_t)(v7 + 2));
      float v30 = *((float *)v7 + 8);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v24);
      fst::Times<int,(fst::StringType)2>(v7, (uint64_t)&v24, (uint64_t)&v31);
      float v9 = *((float *)v7 + 8);
      float v10 = NAN;
      if (v9 != -INFINITY)
      {
        float v10 = NAN;
        if (v26 != -INFINITY)
        {
          float v10 = INFINITY;
          BOOL v11 = v26 == INFINITY || v9 == INFINITY;
          float v12 = v9 + v26;
          if (!v11) {
            float v10 = v12;
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v28, &v31, v10);
      std::__list_imp<char *>::clear(v32);
      std::__list_imp<char *>::clear(v25);
    }
    LODWORD(v++*(_DWORD *)(result + 24) = v28;
    std::list<int>::list(v25, (uint64_t)v29);
    float v26 = v30;
    if (v28) {
      BOOL v13 = (unint64_t)(v29[2] + 1) >= 2;
    }
    else {
      BOOL v13 = 0;
    }
    int v14 = !v13;
    char v27 = v14;
    if ((*(unsigned char *)(a1 + 148) & 1) == 0 || v14)
    {
      int v21 = v28;
      int v16 = v22;
      std::list<int>::list(v22, (uint64_t)v29);
      float v23 = v30;
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v21);
    }
    else
    {
      uint64_t v15 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
      int v18 = *v15;
      int v16 = v19;
      std::list<int>::list(v19, (uint64_t)(v15 + 2));
      int v20 = v15[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v18);
    }
    std::__list_imp<char *>::clear(v16);
    std::__list_imp<char *>::clear(v25);
    std::__list_imp<char *>::clear(v29);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1B1F98974(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

void *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Expand(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 168) + 48 * a2;
  int v82 = *(_DWORD *)v3;
  int v83 = *(_DWORD *)(v3 + 8);
  std::list<int>::list(v84, v3 + 16);
  float v85 = *(float *)(v3 + 40);
  if (v82 == -1) {
    goto LABEL_33;
  }
  uint64_t v4 = *(void *)(a1 + 136);
  unint64_t v81 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
  uint64_t v5 = &v66;
  while (1)
  {
    if (!v78)
    {
      if (v81 >= v79[1]) {
        goto LABEL_31;
      }
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v78 + 24))(v78)) {
      break;
    }
    if (v78)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 32))(v78);
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v6 = v79[0] + 56 * v81;
LABEL_9:
    fst::Times<int,(fst::StringType)2>(&v83, v6 + 8, (uint64_t)&v59);
    float v7 = NAN;
    if (v85 != -INFINITY)
    {
      float v8 = *(float *)(v6 + 40);
      float v7 = NAN;
      if (v8 != -INFINITY)
      {
        float v7 = INFINITY;
        if (v8 != INFINITY && v85 != INFINITY) {
          float v7 = v85 + v8;
        }
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v75, (int *)&v59, v7);
    std::__list_imp<char *>::clear(&v60);
    float v71 = *(float *)&v75;
    std::list<int>::list(v72, (uint64_t)v76);
    int v73 = v77;
    int v11 = *(float *)&v75 == 0.0 || (unint64_t)(v76[2] + 1) < 2;
    char v74 = v11;
    if ((*(unsigned char *)(a1 + 148) & 2) == 0 || v11)
    {
      int v16 = v5;
      int v17 = *(_DWORD *)(v6 + 48);
      int v18 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
      int v68 = *v18;
      std::list<int>::list(v69, (uint64_t)(v18 + 2));
      int v70 = v18[8];
      LODWORD(v59) = v17;
      LODWORD(v60) = v68;
      std::list<int>::list(v61, (uint64_t)v69);
      int v63 = v70;
      LODWORD(v18) = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FindState(a1, (int *)&v59);
      uint64_t v5 = v16;
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v69);
      uint64_t v19 = *(void *)v6;
      int v65 = v75;
      std::list<int>::list(v16, (uint64_t)v76);
      int v67 = v77;
      uint64_t v59 = v19;
      LODWORD(v60) = v65;
      std::list<int>::list(v61, (uint64_t)v16);
      int v63 = v67;
      LODWORD(v64[0]) = v18;
      Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(MutableState, (uint64_t)&v59);
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v16);
    }
    else
    {
      fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Value((int *)&v71, (uint64_t)&v59);
      int v12 = *(_DWORD *)(v6 + 48);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Quantize((float *)&v63, (uint64_t)&v56, *(float *)(a1 + 144));
      LODWORD(v51) = v12;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v56;
      std::list<int>::list(v53, (uint64_t)v57);
      float v54 = v58;
      int State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v57);
      uint64_t v14 = *(void *)v6;
      int v48 = v59;
      std::list<int>::list(v49, (uint64_t)&v60);
      float v50 = v62;
      uint64_t v51 = v14;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v48;
      std::list<int>::list(v53, (uint64_t)v49);
      float v54 = v50;
      int v55 = State;
      uint64_t v15 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(v15, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v49);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      char v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v76);
    if (v78) {
      (*(void (**)(uint64_t))(*(void *)v78 + 40))(v78);
    }
    else {
      ++v81;
    }
  }
  if (v78)
  {
    (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
    goto LABEL_33;
  }
LABEL_31:
  if (v80) {
    --*v80;
  }
LABEL_33:
  if (*(unsigned char *)(a1 + 148))
  {
    if (v82 == -1) {
      goto LABEL_65;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v59);
    uint64_t v21 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
    uint64_t v22 = v59 ? v61[1] + 1 : 0;
    uint64_t v23 = *(_DWORD *)v21 ? *(void *)(v21 + 24) + 1 : 0;
    if (v22 == v23)
    {
      char v24 = 0;
      uint64_t v25 = v61[0];
      float v26 = (uint64_t *)(v21 + 16);
      if (v59) {
        BOOL v27 = v59 == *(_DWORD *)v21;
      }
      else {
        BOOL v27 = 0;
      }
      int v28 = !v27;
      int v29 = v28 ^ 1;
      while (1)
      {
        uint64_t v30 = *v26;
        if ((v24 & 1) == 0 && !v29) {
          break;
        }
        if ((uint64_t *)v25 == &v60) {
          goto LABEL_77;
        }
        if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v30 + 16)) {
          goto LABEL_55;
        }
        uint64_t v25 = *(void *)(v25 + 8);
        float v26 = (uint64_t *)(v30 + 8);
        char v24 = 1;
      }
      if (v59) {
        goto LABEL_55;
      }
LABEL_77:
      *(float *)&uint64_t v51 = v62;
      float v71 = 0.0;
      float v71 = *(float *)(v21 + 32);
      float v39 = v62;
      float v40 = v71;
      std::__list_imp<char *>::clear(&v60);
      if (v39 == v40) {
        goto LABEL_76;
      }
    }
    else
    {
LABEL_55:
      std::__list_imp<char *>::clear(&v60);
    }
    if (v82 == -1)
    {
LABEL_65:
      LODWORD(v78) = v83;
      std::list<int>::list(v79, (uint64_t)v84);
      *(float *)&unint64_t v81 = v85;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v59);
      fst::Times<int,(fst::StringType)2>(&v83, (uint64_t)&v59, (uint64_t)&v51);
      float v31 = NAN;
      if (v85 != -INFINITY)
      {
        float v31 = NAN;
        if (v62 != -INFINITY)
        {
          float v31 = INFINITY;
          if (v62 != INFINITY && v85 != INFINITY) {
            float v31 = v85 + v62;
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v78, (int *)&v51, v31);
      std::__list_imp<char *>::clear(&v52);
      std::__list_imp<char *>::clear(&v60);
    }
    uint64_t v33 = *(void *)(a1 + 152);
    float v71 = *(float *)&v78;
    std::list<int>::list(v72, (uint64_t)v79);
    int v73 = v81;
    if (v78) {
      BOOL v34 = (unint64_t)v80 + 1 >= 2;
    }
    else {
      BOOL v34 = 0;
    }
    char v35 = !v34;
    char v74 = v35;
    if (v34)
    {
      fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Value((int *)&v71, (uint64_t)&v59);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Quantize((float *)&v63, (uint64_t)&v45, *(float *)(a1 + 144));
      LODWORD(v51) = -1;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v45;
      std::list<int>::list(v53, (uint64_t)v46);
      float v54 = v47;
      int v36 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v46);
      int v42 = v59;
      std::list<int>::list(v43, (uint64_t)&v60);
      float v44 = v62;
      uint64_t v51 = v33;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v42;
      std::list<int>::list(v53, (uint64_t)v43);
      float v54 = v44;
      int v55 = v36;
      unint64_t v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(v37, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v43);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      char v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v79);
  }
LABEL_76:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetArcs(a1, a2);
  return std::__list_imp<char *>::clear(v84);
}

void sub_1B1F9928C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::__list_imp<char *>::clear((void *)(v47 + 8));
  std::__list_imp<char *>::clear(&a47);
  std::__list_imp<char *>::clear(v48);
  _Unwind_Resume(a1);
}

void *fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Value@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v35 = *a1;
  std::list<int>::list(v36, (uint64_t)(a1 + 2));
  if (*a1) {
    BOOL v4 = (unint64_t)(*((void *)a1 + 3) + 1) >= 2;
  }
  else {
    BOOL v4 = 0;
  }
  char v5 = !v4;
  char v37 = v5;
  fst::StringFactor<int,(fst::StringType)2>::Value((uint64_t)&v35, (uint64_t)&v22);
  int v30 = v22;
  v31[0] = v31;
  v31[1] = v31;
  uint64_t v32 = 0;
  uint64_t v6 = v25;
  if (v25)
  {
    uint64_t v8 = v23;
    float v7 = v24;
    uint64_t v9 = *v24;
    *(void *)(v9 + 8) = *(void *)(v23 + 8);
    **(void **)(v8 + 8) = v9;
    uint64_t v10 = v31[0];
    *(void *)(v31[0] + 8) = v7;
    *float v7 = v10;
    v31[0] = v8;
    *(void *)(v8 + 8) = v31;
    uint64_t v32 = v6;
    uint64_t v25 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v33, &v30, *((float *)a1 + 8));
  std::__list_imp<char *>::clear(v31);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  fst::StringFactor<int,(fst::StringType)2>::Value((uint64_t)&v35, (uint64_t)&v22);
  int v17 = v26;
  v18[0] = v18;
  v18[1] = v18;
  uint64_t v19 = 0;
  uint64_t v11 = v29;
  if (v29)
  {
    uint64_t v13 = v27;
    int v12 = v28;
    uint64_t v14 = *v28;
    *(void *)(v14 + 8) = *(void *)(v27 + 8);
    **(void **)(v13 + 8) = v14;
    uint64_t v15 = v18[0];
    *(void *)(v18[0] + 8) = v12;
    void *v12 = v15;
    v18[0] = v13;
    *(void *)(v13 + 8) = v18;
    uint64_t v19 = v11;
    uint64_t v29 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v20, &v17, 0.0);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>&,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>&,0>(a2, &v33, &v20);
  std::__list_imp<char *>::clear(v21);
  std::__list_imp<char *>::clear(v34);
  return std::__list_imp<char *>::clear(v36);
}

void sub_1B1F99650(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v2 + 8));
  std::__list_imp<char *>::clear((void *)(v3 - 120));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::StringFactor<int,(fst::StringType)2>::Value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 16);
  fst::StringWeight<int,(fst::StringType)2>::StringWeight((uint64_t)&v14, *(_DWORD *)a1);
  v12[0] = v12;
  v12[1] = v12;
  uint64_t v13 = 0;
  int v11 = 0;
  if (v4 != v3)
  {
    int v5 = 0;
    uint64_t v6 = 0;
    float v7 = v12;
    do
    {
      int v8 = *(_DWORD *)(v4 + 16);
      if (v5)
      {
        uint64_t v9 = operator new(0x18uLL);
        int v9[4] = v8;
        *(void *)uint64_t v9 = v7;
        *((void *)v9 + 1) = v12;
        v7[1] = v9;
        ++v6;
        float v7 = v9;
        v12[0] = v9;
        uint64_t v13 = v6;
      }
      else
      {
        int v11 = *(_DWORD *)(v4 + 16);
        int v5 = v8;
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
  }
  std::pair<fst::StringWeight<int,(fst::StringType)2>,fst::StringWeight<int,(fst::StringType)2>>::pair[abi:ne180100]<fst::StringWeight<int,(fst::StringType)2>&,fst::StringWeight<int,(fst::StringType)2>&,0>(a2, &v14, &v11);
  std::__list_imp<char *>::clear(v12);
  return std::__list_imp<char *>::clear(v15);
}

void sub_1B1F997AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__list_imp<char *>::clear(v6);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::StringWeight<int,(fst::StringType)2>,fst::StringWeight<int,(fst::StringType)2>>::pair[abi:ne180100]<fst::StringWeight<int,(fst::StringType)2>&,fst::StringWeight<int,(fst::StringType)2>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = *a3;
  std::list<int>::list((void *)(a1 + 40), (uint64_t)(a3 + 2));
  return a1;
}

void sub_1B1F99828(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>&,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_DWORD *)(a1 + 40) = *a3;
  std::list<int>::list((void *)(a1 + 48), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 72) = a3[8];
  return a1;
}

void sub_1B1F998A8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A445B8;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1F99A14(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F99B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *v17;
  if (*v17)
  {
    v15[30] = v19;
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)v16 + 24);
  std::string __p = v16;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  int v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  int v6 = v5;
  do
  {
    fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 7);
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((*((void *)v19 + 8) - v8) >> 3);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      int v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        int v14 = *v12;
        v12 += 14;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    int v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while (v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1F99D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Expand(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1F99E10(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFst()
{
}

void sub_1B1F99F14(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFst(void *a1)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Copy()
{
}

void sub_1B1F9A0F8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitStateIterator()
{
}

void sub_1B1F9A188(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B1F9A278(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Init(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v2);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 48) = 0;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result == -1)
  {
    *(_DWORD *)(a1 + 156) = 0;
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    *(_DWORD *)(a1 + 156) = 1;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 0x3FFFFFFF0004, 0);
    if (*(unsigned char *)(*(void *)(a1 + 144) + 4)) {
      uint64_t v5 = result & 0x2EBC21080003 | 4;
    }
    else {
      uint64_t v5 = result & 0x2EBC21080007;
    }
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | v5;
    if (*(_DWORD *)(a1 + 156) == 2) {
      *(_DWORD *)(a1 + 160) = 0;
    }
  }
  return result;
}

void sub_1B1F9A414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0)|| *(unsigned char *)(*(void *)(a1 + 144) + 4)))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38A88;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3) {
      MEMORY[0x1B3EA8670](v3, 0x1000C4090D0E795);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((void *)a1);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41D00;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
      int v3 = *(_DWORD *)(a1 + 160);
      if (v3 != -1 && v3 <= v2) {
        int v5 = v2 + 1;
      }
      else {
        int v5 = v2;
      }
      if (v5 >= *(_DWORD *)(a1 + 164)) {
        *(_DWORD *)(a1 + 164) = v5 + 1;
      }
      *(_DWORD *)(a1 + 64) = v5;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v5) {
        *(_DWORD *)(a1 + 68) = v5 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0)
  {
    int v4 = *(_DWORD *)(a1 + 156);
    if (v4 == 1)
    {
      if (*(_DWORD *)(a1 + 160) == a2)
      {
        Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        *(_DWORD *)Mutableint State = 0;
      }
      else
      {
        int v13 = *(int **)(a1 + 144);
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v20);
        std::string __p = 0;
        int v28 = v20;
        std::list<int>::list(v29, (uint64_t)v21);
        int v30 = v22;
        int v31 = -1;
        unint64_t v14 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(v13, (int *)&__p);
        int v16 = v15;
        std::__list_imp<char *>::clear(v29);
        std::__list_imp<char *>::clear(v21);
        Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        if (v14) {
          *(_DWORD *)Mutableint State = 2139095040;
        }
        else {
          *(_DWORD *)Mutableint State = v16;
        }
      }
    }
    else if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2) {
        float v5 = 0.0;
      }
      else {
        float v5 = INFINITY;
      }
      Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      *(float *)Mutableint State = v5;
    }
    else
    {
      unint64_t v7 = *(int **)(a1 + 144);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v24);
      std::string __p = 0;
      int v28 = v24;
      std::list<int>::list(v29, (uint64_t)v25);
      int v30 = v26;
      int v31 = -1;
      unint64_t v8 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(v7, (int *)&__p);
      int v10 = v9;
      std::__list_imp<char *>::clear(v29);
      std::__list_imp<char *>::clear(v25);
      if (v8)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        }
        int v11 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)&__p);
        int v12 = (void *)fst::cerr(v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
        if (SHIBYTE(v29[0]) < 0) {
          operator delete(__p);
        }
        *(void *)(a1 + 8) |= 4uLL;
      }
      Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      *(_DWORD *)Mutableint State = v10;
    }
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  uint64_t v17 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v17 + 76) == a2) {
    uint64_t v18 = v17 + 80;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 8) + 8 * (a2 + 1);
  }
  return **(float **)v18;
}

void sub_1B1F9A9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(int *a1, int *a2)
{
  if (a2[12] != -1) {
    goto LABEL_24;
  }
  uint64_t v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  int v5 = a2[2];
  uint64_t v6 = v5 ? *((void *)a2 + 4) + 1 : 0;
  uint64_t v7 = *(_DWORD *)v4 ? *(void *)(v4 + 24) + 1 : 0;
  if (v6 != v7) {
    goto LABEL_24;
  }
  char v8 = 0;
  int v9 = (uint64_t *)(a2 + 6);
  int v10 = (uint64_t *)(v4 + 16);
  BOOL v11 = v5 && v5 == *(_DWORD *)v4;
  BOOL v12 = !v11;
  int v13 = !v12;
  while (1)
  {
    uint64_t v14 = *v9;
    uint64_t v15 = *v10;
    if ((v8 & 1) == 0 && !v13) {
      break;
    }
    if ((int *)v14 == a2 + 4) {
      goto LABEL_22;
    }
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16)) {
      goto LABEL_24;
    }
    int v9 = (uint64_t *)(v14 + 8);
    int v10 = (uint64_t *)(v15 + 8);
    char v8 = 1;
  }
  if (v5) {
    goto LABEL_24;
  }
LABEL_22:
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = a2[10];
  v29[0] = 0.0;
  v29[0] = *(float *)(v4 + 32);
  if (*(float *)__p == v29[0])
  {
    unint64_t v16 = 0;
    unsigned int v17 = *a2;
  }
  else
  {
LABEL_24:
    unsigned int v28 = -1;
    if (!fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>((unsigned int *)a2 + 2, &v27, &v28)|| (unsigned int v17 = *a2, *a2 != a2[1]))
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v18 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
      uint64_t v19 = (void *)fst::cerr(v18);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"FromGallicMapper: unrepresentable weight: ", 42);
      fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v29, v20);
      if (*FLAGS_fst_weight_parentheses)
      {
        char v30 = *FLAGS_fst_weight_parentheses;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)v29, (uint64_t)&v30, 1);
      }
      fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>((uint64_t)v29, a2 + 2);
      fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>((uint64_t)v29, (float *)a2 + 10);
      if (*FLAGS_fst_weight_parentheses)
      {
        char v30 = *(unsigned char *)(FLAGS_fst_weight_parentheses + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)v29, (uint64_t)&v30, 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for arc with ilabel = ", 23);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", olabel = ", 11);
      int v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", nextstate = ", 14);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      *((unsigned char *)a1 + 4) = 1;
      unsigned int v17 = *a2;
    }
    if (!v17 && v28 && a2[12] == -1) {
      unsigned int v17 = *a1;
    }
    unint64_t v16 = (unint64_t)v28 << 32;
  }
  return v16 | v17;
}

void sub_1B1F9AD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  BOOL v7 = v4 != -1 && v4 <= a2;
  unint64_t v43 = 0;
  (*(void (**)(uint64_t, void, unint64_t *))(*(void *)v5 + 136))(v5, (a2 - v7), &v39);
  while (1)
  {
    if (!v39)
    {
      if (v43 >= v41) {
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(unint64_t))(*(void *)v39 + 24))(v39)) {
      break;
    }
    if (v39)
    {
      uint64_t v8 = (*(uint64_t (**)(unint64_t))(*(void *)v39 + 32))(v39);
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v8 = v40 + 56 * v43;
LABEL_18:
    unint64_t v33 = *(void *)v8;
    float v34 = *(float *)(v8 + 8);
    std::list<int>::list(v36, v8 + 16);
    int v37 = *(_DWORD *)(v8 + 40);
    int v9 = *(_DWORD *)(v8 + 48);
    int v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= v9) {
      ++v9;
    }
    if (v9 >= *(_DWORD *)(a1 + 164)) {
      *(_DWORD *)(a1 + 164) = v9 + 1;
    }
    int v38 = v9;
    *(void *)&long long v32 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(*(int **)(a1 + 144), (int *)&v33);
    *((void *)&v32 + 1) = v12;
    Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v32);
    std::__list_imp<char *>::clear(v36);
    if (v39) {
      (*(void (**)(unint64_t))(*(void *)v39 + 40))(v39);
    }
    else {
      ++v43;
    }
  }
  if (v39)
  {
    (*(void (**)(unint64_t))(*(void *)v39 + 8))(v39);
    goto LABEL_32;
  }
LABEL_30:
  if (v42) {
    --*v42;
  }
LABEL_32:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (LODWORD(v33) = fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final(a1, a2), LODWORD(v39) = 2139095040, *(float *)&v33 == INFINITY))
  {
    int v14 = *(_DWORD *)(a1 + 156);
    if (v14 == 2)
    {
      uint64_t v21 = *(int **)(a1 + 144);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v26);
      unint64_t v33 = 0;
      float v34 = *(float *)&v26;
      std::list<int>::list(v36, (uint64_t)v27);
      int v37 = v28;
      int v38 = -1;
      unint64_t v22 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(v21, (int *)&v33);
      float v24 = v23;
      std::__list_imp<char *>::clear(v36);
      std::__list_imp<char *>::clear(v27);
      if (v22 || (*(float *)&unint64_t v33 = v24, LODWORD(v39) = 2139095040, v24 != INFINITY))
      {
        int v25 = *(_DWORD *)(a1 + 160);
        unint64_t v33 = v22;
        float v34 = v24;
        int v35 = v25;
        uint64_t v19 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        uint64_t v20 = &v33;
        goto LABEL_43;
      }
    }
    else if (v14 == 1)
    {
      uint64_t v15 = *(int **)(a1 + 144);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v29);
      unint64_t v33 = 0;
      float v34 = *(float *)&v29;
      std::list<int>::list(v36, (uint64_t)v30);
      int v37 = v31;
      int v38 = -1;
      unint64_t v16 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(v15, (int *)&v33);
      unint64_t v39 = v16;
      uint64_t v40 = v17;
      std::__list_imp<char *>::clear(v36);
      std::__list_imp<char *>::clear(v30);
      if (v16)
      {
        int v18 = *(_DWORD *)(a1 + 160);
        if (v18 == -1)
        {
          int v18 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v18;
          *(_DWORD *)(a1 + 164) = v18 + 1;
        }
        HIDWORD(v40) = v18;
        uint64_t v19 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        uint64_t v20 = &v39;
LABEL_43:
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v19, v20);
      }
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1F9B224(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A41D00;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1F9B3D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F9B4B0(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A3A148;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1B1F9B55C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::StateIterator(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    uint64_t v2 = result;
    if (!*(unsigned char *)(result + 44))
    {
      uint64_t result = *(void *)(result + 16);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        if (result) {
          return result;
        }
        uint64_t v1 = *(void *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      uint64_t v3 = *(int **)(v1 + 144);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v1 + 136) + 32))(&v5);
      uint64_t v8 = 0;
      int v9 = v5;
      std::list<int>::list(v10, (uint64_t)v6);
      int v11 = v7;
      int v12 = -1;
      unint64_t v4 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(v3, (int *)&v8);
      std::__list_imp<char *>::clear(v10);
      uint64_t result = (uint64_t)std::__list_imp<char *>::clear(v6);
      if (v4) {
        *(unsigned char *)(v2 + 44) = 1;
      }
    }
  }
  return result;
}

void sub_1B1F9B69C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A3A148;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A3A148;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Done(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
      return *(unsigned char *)(a1 + 44) == 0;
    }
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(unsigned char *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Next(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 40);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if ((result & 1) == 0)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
LABEL_7:
        return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 44)) {
    *(unsigned char *)(a1 + 44) = 0;
  }
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  else {
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A445B8;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41780;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3E2A0;
  uint64_t v2 = a1[20];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1F9BBD4(_Unwind_Exception *a1)
{
  fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(v1);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1F9BC5C(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 52);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1F9BD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v15 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(v14);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Init()
{
}

void sub_1B1F9BF1C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~ImplToFst((void *)(v2 - 48));
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(void *a1)
{
  fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_1B1F9C0E8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40BF12C28CLL);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Expand(uint64_t a1, int a2)
{
  fst::ArcIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ArcIterator(&v8, *(void *)(a1 + 160), a2);
  unint64_t v4 = v8;
  for (unint64_t i = v9; ; unint64_t i = ++v9)
  {
    uint64_t v6 = *((void *)v4 + 3);
    if (i >= (*((void *)v4 + 4) - v6) >> 4) {
      break;
    }
    Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, (_OWORD *)(v6 + 16 * i));
    unint64_t v4 = v8;
  }
  --*((_DWORD *)v4 + 13);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1F9C1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 24))();
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeFinal(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 32))();
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFst()
{
}

void sub_1B1F9C2A0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFst(void *a1)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Copy()
{
}

void sub_1B1F9C498(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1F9C58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1F9C688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitStateIterator()
{
}

void sub_1B1F9C720(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::IsMemoryMapped()
{
  return 0;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B1F9C800(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Init(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v2);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 48) = 0;
  }
  unint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if (result == -1)
  {
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    unint64_t v5 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 0x3FFFFFFF0004, 0);
    unint64_t result = fst::ProjectProperties(v5, 1);
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | result & 0x3FFCFFFF0007;
    if (*(_DWORD *)(a1 + 156) == 2) {
      *(_DWORD *)(a1 + 160) = 0;
    }
  }
  return result;
}

void sub_1B1F9C988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0)|| (fst::ProjectProperties(0, 1) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FF80;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38E40;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FF80;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38E40;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B1F9CBA8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  unint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FF80;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B1F9CD74(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;
  std::__list_imp<char *>::clear(v2);
  int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38E40;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    uint64_t v3 = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  unint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~FstImpl((uint64_t)a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38890;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3) {
      MEMORY[0x1B3EA8670](v3, 0xC400A2AC0F1);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
      int v3 = *(_DWORD *)(a1 + 160);
      if (v3 != -1 && v3 <= v2) {
        int v5 = v2 + 1;
      }
      else {
        int v5 = v2;
      }
      if (v5 >= *(_DWORD *)(a1 + 164)) {
        *(_DWORD *)(a1 + 164) = v5 + 1;
      }
      *(_DWORD *)(a1 + 64) = v5;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v5) {
        *(_DWORD *)(a1 + 68) = v5 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void *fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    int v6 = *(_DWORD *)(a1 + 156);
    if (v6 == 1)
    {
      int v8 = *(_DWORD *)(a1 + 160);
      if (v8 != a2)
      {
        BOOL v20 = v8 != -1 && v8 <= a2;
        float v21 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v20));
        uint64_t v40 = 0;
        float v41 = v21;
        int v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          float v23 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
          int v28 = *v23;
          unint64_t v22 = v29;
          std::list<int>::list(v29, (uint64_t)(v23 + 2));
          int v30 = v23[8];
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v28);
        }
        else
        {
          int v31 = v46;
          unint64_t v22 = v32;
          std::list<int>::list(v32, (uint64_t)v47);
          int v33 = v48;
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v31);
        }
        std::__list_imp<char *>::clear(v22);
        int v18 = v47;
        goto LABEL_35;
      }
      unint64_t v9 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
      int v34 = *v9;
      int v10 = v35;
      std::list<int>::list(v35, (uint64_t)(v9 + 2));
      int v36 = v9[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v34);
    }
    else
    {
      if (v6 != 2)
      {
        int v11 = *(_DWORD *)(a1 + 160);
        BOOL v13 = v11 != -1 && v11 <= a2;
        float v14 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v13));
        uint64_t v40 = 0;
        float v41 = v14;
        int v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          if (FLAGS_fst_error_fatal) {
            std::string::basic_string[abi:ne180100]<0>(&v40, "FATAL");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(&v40, "ERROR");
          }
          uint64_t v15 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v40);
          unint64_t v16 = (void *)fst::cerr(v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
          if (v43 < 0) {
            operator delete(v40);
          }
          *(void *)(a1 + 8) |= 4uLL;
        }
        int v37 = v46;
        std::list<int>::list(v38, (uint64_t)v47);
        int v39 = v48;
        fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v37);
        std::__list_imp<char *>::clear(v38);
        int v18 = v47;
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 160) == a2) {
        uint64_t v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
      }
      else {
        uint64_t v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
      }
      uint64_t v17 = v7;
      int v25 = *v7;
      int v10 = v26;
      std::list<int>::list(v26, (uint64_t)(v7 + 2));
      int v27 = v17[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v25);
    }
    int v18 = v10;
LABEL_35:
    std::__list_imp<char *>::clear(v18);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1B1F9D30C(_Unwind_Exception *a1)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v1 - 105));
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  std::__list_imp<char *>::clear((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void *fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()@<X0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)a1 + 3) == -1)
  {
    float v30 = 0.0;
    float v30 = a1[2];
    char v29[8] = 2139095040;
    if (v30 == INFINITY)
    {
      char v12 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
      int v23 = *v12;
      uint64_t v7 = v24;
      std::list<int>::list(v24, (uint64_t)(v12 + 2));
      int v25 = v12[8];
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = v23;
      std::list<int>::list((void *)(a2 + 16), (uint64_t)v24);
      *(_DWORD *)(a2 + 40) = v25;
      *(_DWORD *)(a2 + 48) = -1;
      return std::__list_imp<char *>::clear(v7);
    }
    int v8 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    int v26 = *v8;
    uint64_t v7 = v27;
    std::list<int>::list(v27, (uint64_t)(v8 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v28, &v26, a1[2]);
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v28;
    unint64_t v9 = v29;
    std::list<int>::list((void *)(a2 + 16), (uint64_t)v29);
    *(_DWORD *)(a2 + 40) = v29[6];
    *(_DWORD *)(a2 + 48) = -1;
    goto LABEL_7;
  }
  float v5 = *a1;
  int v4 = *((_DWORD *)a1 + 1);
  if (!v4)
  {
    int v10 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    int v19 = *v10;
    uint64_t v7 = v20;
    std::list<int>::list(v20, (uint64_t)(v10 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v21, &v19, a1[2]);
    int v11 = *((_DWORD *)a1 + 3);
    *(float *)a2 = v5;
    *(float *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v21;
    unint64_t v9 = v22;
    std::list<int>::list((void *)(a2 + 16), (uint64_t)v22);
    *(_DWORD *)(a2 + 40) = v22[6];
    *(_DWORD *)(a2 + 48) = v11;
LABEL_7:
    std::__list_imp<char *>::clear(v9);
    return std::__list_imp<char *>::clear(v7);
  }
  fst::StringWeight<int,(fst::StringType)2>::StringWeight((uint64_t)&v14, v4);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v16, &v14, a1[2]);
  int v6 = *((_DWORD *)a1 + 3);
  *(float *)a2 = v5;
  *(float *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v16;
  std::list<int>::list((void *)(a2 + 16), (uint64_t)v17);
  *(_DWORD *)(a2 + 40) = v18;
  *(_DWORD *)(a2 + 48) = v6;
  std::__list_imp<char *>::clear(v17);
  uint64_t v7 = &v15;
  return std::__list_imp<char *>::clear(v7);
}

void sub_1B1F9D594(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  int v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  int v5 = a3[8];
  int v9 = v5;
  *(_DWORD *)Mutableint State = v7;
  if (MutableState != (char *)&v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)MutableState + 1, v8[1], (uint64_t)v8);
    int v5 = v9;
  }
  *((_DWORD *)MutableState + 8) = v5;
  unint64_t result = std::__list_imp<char *>::clear(v8);
  *((_DWORD *)MutableState + 20) |= 9u;
  return result;
}

void sub_1B1F9D684(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One(void)::one;
}

void sub_1B1F9D734(_Unwind_Exception *a1)
{
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero(void)::zero;
}

void sub_1B1F9D808(_Unwind_Exception *a1)
{
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::ProductWeight(a1, &v6, a3);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1B1F9D8A8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  Mutableint State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>::GetMutableState(a1, a2);
  int v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + *(void *)(a1 + 112) + 88;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(char **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 76) = a2;
      Mutableint State = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 20) |= 4u;
      std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
      return *(char **)(a1 + 80);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    if (!*(_DWORD *)(v5 + 84))
    {
      *(_DWORD *)(a1 + 76) = a2;
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Reset(v5);
      unint64_t result = *(char **)(a1 + 80);
      *((_DWORD *)result + 20) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      int v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      int v9 = (void *)fst::cerr(v8);
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      int v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      char v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache unint64_t size = ", 15);
      BOOL v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      int v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      Mutableint State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        int v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        int v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      uint64_t v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      float v30 = (void *)fst::cerr(v29);
      int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      long long v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      int v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache unint64_t size = ", 15);
      int v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      int v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      int v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B1F9DDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    uint64_t v14 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v14);
  }
  else
  {
    int v8 = *(char **)(v6 + 8 * a2);
    if (v8) {
      return v8;
    }
  }
  int v8 = (char *)operator new(0x58uLL);
  int v9 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  *(_DWORD *)int v8 = *v9;
  std::list<int>::list((void *)v8 + 1, (uint64_t)(v9 + 2));
  *((_DWORD *)v8 + 8) = v9[8];
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(void *)(*(void *)(a1 + 8) + 8 * v4) = v8;
  if (*(unsigned char *)a1)
  {
    int v10 = operator new(0x18uLL);
    v10[4] = a2;
    uint64_t v12 = *(void *)(a1 + 32);
    int v11 = (void *)(a1 + 32);
    *(void *)int v10 = v12;
    *((void *)v10 + 1) = v11;
    *(void *)(v12 + 8) = v10;
    *int v11 = v10;
    ++v11[2];
  }
  return v8;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Reset(uint64_t a1)
{
  uint64_t result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  uint64_t v3 = result;
  *(_DWORD *)a1 = *(_DWORD *)result;
  if (result != a1) {
    uint64_t result = (uint64_t)std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(void *)(result + 16), result + 8);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 + 32);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v4 - 56;
      uint64_t result = (uint64_t)std::__list_imp<char *>::clear((void *)(v4 - 40));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  *(void *)(a1 + 64) = v5;
  return result;
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 56 * v6;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1F9E084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(void *)(v12 - 56) = *(void *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((void *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1F9E1B0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetArcs(a1, a2);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  BOOL v7 = v4 != -1 && v4 <= a2;
  unint64_t v58 = 0;
  (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v5 + 136))(v5, (a2 - v7), &v54);
  while (1)
  {
    if (!v54)
    {
      if (v58 >= v56) {
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v54 + 24))(v54)) {
      break;
    }
    if (v54)
    {
      uint64_t v8 = (long long *)(*(uint64_t (**)(void))(*(void *)v54 + 32))();
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v8 = (long long *)(v55 + 16 * v58);
LABEL_18:
    long long v68 = *v8;
    int v9 = HIDWORD(v68);
    int v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= SHIDWORD(v68)) {
      int v9 = HIDWORD(v68) + 1;
    }
    if (v9 >= *(_DWORD *)(a1 + 164)) {
      *(_DWORD *)(a1 + 164) = v9 + 1;
    }
    HIDWORD(v68) = v9;
    fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()((float *)&v68, (uint64_t)&v61);
    Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(MutableState, (uint64_t)&v61);
    std::__list_imp<char *>::clear(&v63);
    if (v54) {
      (*(void (**)(uint64_t))(*(void *)v54 + 40))(v54);
    }
    else {
      ++v58;
    }
  }
  if (v54)
  {
    (*(void (**)(void))(*(void *)v54 + 8))();
    goto LABEL_32;
  }
LABEL_30:
  if (v57) {
    --*v57;
  }
LABEL_32:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
LABEL_54:
    int v26 = *(_DWORD *)(a1 + 156);
    if (v26 == 1)
    {
      int v32 = *(_DWORD *)(a1 + 160);
      BOOL v34 = v32 != -1 && v32 <= a2;
      *(float *)&unsigned int v35 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v34));
      uint64_t v54 = 0;
      unint64_t v55 = v35 | 0xFFFFFFFF00000000;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()((float *)&v54, (uint64_t)&v61);
      if (v61)
      {
        int v36 = *(_DWORD *)(a1 + 160);
        if (v36 == -1)
        {
          int v36 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v36;
          *(_DWORD *)(a1 + 164) = v36 + 1;
        }
        int v67 = v36;
        int v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(v37, (uint64_t)&v61);
      }
      uint64_t v14 = &v63;
      goto LABEL_98;
    }
    if (v26 != 2) {
      goto LABEL_99;
    }
    int v27 = *(_DWORD *)(a1 + 160);
    BOOL v29 = v27 != -1 && v27 <= a2;
    *(float *)&unsigned int v30 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v29));
    uint64_t v54 = 0;
    unint64_t v55 = v30 | 0xFFFFFFFF00000000;
    fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()((float *)&v54, (uint64_t)&v61);
    if (v61)
    {
      int v31 = v62;
    }
    else
    {
      uint64_t v38 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
      int v31 = v62;
      if (v62) {
        uint64_t v39 = v65 + 1;
      }
      else {
        uint64_t v39 = 0;
      }
      if (*(_DWORD *)v38) {
        uint64_t v40 = *(void *)(v38 + 24) + 1;
      }
      else {
        uint64_t v40 = 0;
      }
      if (v39 == v40)
      {
        char v41 = 0;
        uint64_t v42 = v64;
        char v43 = (uint64_t *)(v38 + 16);
        BOOL v44 = v62 && v62 == *(_DWORD *)v38;
        BOOL v45 = !v44;
        int v46 = !v45;
        while (1)
        {
          uint64_t v47 = *v43;
          if ((v41 & 1) == 0 && !v46) {
            break;
          }
          if ((uint64_t *)v42 == &v63) {
            goto LABEL_95;
          }
          if (*(_DWORD *)(v42 + 16) != *(_DWORD *)(v47 + 16)) {
            goto LABEL_96;
          }
          uint64_t v42 = *(void *)(v42 + 8);
          char v43 = (uint64_t *)(v47 + 8);
          char v41 = 1;
        }
        if (v62) {
          goto LABEL_96;
        }
LABEL_95:
        *(float *)&uint64_t v54 = v66;
        LODWORD(v68) = 0;
        LODWORD(v68) = *(_DWORD *)(v38 + 32);
        if (v66 == *(float *)&v68) {
          goto LABEL_97;
        }
      }
    }
LABEL_96:
    uint64_t v48 = v61;
    int v51 = v31;
    std::list<int>::list(v52, (uint64_t)&v63);
    float v53 = v66;
    int v49 = *(_DWORD *)(a1 + 160);
    uint64_t v54 = v48;
    LODWORD(v55) = v51;
    std::list<int>::list(&v56, (uint64_t)v52);
    float v59 = v53;
    int v60 = v49;
    float v50 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(v50, (uint64_t)&v54);
    std::__list_imp<char *>::clear(&v56);
    std::__list_imp<char *>::clear(v52);
LABEL_97:
    uint64_t v14 = &v63;
LABEL_98:
    std::__list_imp<char *>::clear(v14);
    goto LABEL_99;
  }
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final(a1, a2, (uint64_t)&v61);
  uint64_t v13 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  uint64_t v14 = &v62;
  if (v61) {
    uint64_t v15 = v64 + 1;
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(_DWORD *)v13) {
    uint64_t v16 = *(void *)(v13 + 24) + 1;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15 != v16) {
    goto LABEL_98;
  }
  char v17 = 0;
  uint64_t v18 = v63;
  int v19 = (uint64_t *)(v13 + 16);
  if (v61) {
    BOOL v20 = v61 == *(_DWORD *)v13;
  }
  else {
    BOOL v20 = 0;
  }
  int v21 = !v20;
  int v22 = v21 ^ 1;
  while (1)
  {
    uint64_t v23 = *v19;
    if ((v17 & 1) == 0 && !v22) {
      break;
    }
    if ((uint64_t *)v18 == &v62) {
      goto LABEL_53;
    }
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v23 + 16)) {
      goto LABEL_98;
    }
    uint64_t v18 = *(void *)(v18 + 8);
    int v19 = (uint64_t *)(v23 + 8);
    char v17 = 1;
  }
  if (v61) {
    goto LABEL_98;
  }
LABEL_53:
  LODWORD(v54) = v65;
  LODWORD(v68) = 0;
  LODWORD(v68) = *(_DWORD *)(v13 + 32);
  float v24 = *(float *)&v65;
  float v25 = *(float *)&v68;
  std::__list_imp<char *>::clear(&v62);
  if (v24 == v25) {
    goto LABEL_54;
  }
LABEL_99:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetArcs(a1, a2);
}

void sub_1B1F9E7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 7);
  uint64_t v6 = *((void *)MutableState + 8) - v5;
  if (v6)
  {
    unint64_t v7 = v6 / 56;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    int v9 = (int *)(v5 + 48);
    do
    {
      int v11 = *v9;
      v9 += 14;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 80) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 64) - *(void *)(a2 + 56) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GC(a1, (char *)a2, 0, 0.666);
      }
    }
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 7;
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t result = std::list<int>::list((void *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1B1F9EA1C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  int v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  char v17 = &v10[56 * v9];
  *(void *)int v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((void *)v11 + 2, a2 + 16);
  uint64_t v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1F9EB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

unint64_t fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(a1, a2, a3, 1);
  }
}

void sub_1B1F9ED70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v116 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      uint64_t v112 = (uint64_t *)&v116;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>(a1, (uint64_t)&v109);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
      goto LABEL_211;
    }
    uint64_t v11 = a2 & 0xC0000;
    uint64_t v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0) {
      uint64_t v12 = 0x10425A850000;
    }
    unint64_t v13 = v8 | v12;
    uint64_t v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0) {
      v13 |= 0x100000uLL;
    }
    unint64_t v116 = v13;
    memset(&v108, 0, sizeof(v108));
    memset(&v107, 0, sizeof(v107));
    unsigned int v106 = 0;
    uint64_t v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v104);
    int v16 = 0;
LABEL_12:
    if (!v104)
    {
      if ((int)v106 >= v105) {
        goto LABEL_203;
      }
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v104 + 16))(v104))
    {
      if (v104)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v104 + 24))();
LABEL_18:
        std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
        uint64_t v111 = (uint64_t)&v111;
        uint64_t v112 = &v111;
        uint64_t v113 = 0;
        LODWORD(v110) = 0;
        v108.__end_ = v108.__begin_;
        v107.__end_ = v107.__begin_;
        if (v11) {
          std::vector<int>::reserve(&v108, v18);
        }
        if (v14) {
          std::vector<int>::reserve(&v107, v18);
        }
        int v98 = v16;
        unint64_t v103 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v99);
        char v19 = 1;
        while (1)
        {
          if (v99)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v99 + 24))(v99))
            {
              if (v99)
              {
                (*(void (**)(void))(*(void *)v99 + 8))();
              }
              else
              {
LABEL_132:
                if (v102) {
                  --*v102;
                }
              }
              uint64_t v15 = a1;
              int v16 = v98;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v108.__end_ - (char *)v108.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14) {
                  goto LABEL_152;
                }
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  unint64_t v72 = v107.__end_ - v107.__begin_;
                  if (v72 <= 2) {
                    unint64_t v72 = 2;
                  }
                  std::vector<unsigned int>::pointer v73 = v107.__begin_ + 1;
                  unsigned int v74 = *v107.__begin_;
                  unint64_t v75 = v72 - 1;
                  while (1)
                  {
                    unsigned int v77 = *v73++;
                    unsigned int v76 = v77;
                    if (v77 == v74) {
                      break;
                    }
                    unsigned int v74 = v76;
                    if (!--v75) {
                      goto LABEL_152;
                    }
                  }
                  unint64_t v116 = v116 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              unint64_t v66 = v108.__end_ - v108.__begin_;
              if (v66 <= 2) {
                unint64_t v66 = 2;
              }
              std::vector<unsigned int>::pointer v67 = v108.__begin_ + 1;
              unsigned int v68 = *v108.__begin_;
              unint64_t v69 = v66 - 1;
              while (1)
              {
                unsigned int v71 = *v67++;
                unsigned int v70 = v71;
                if (v71 == v68) {
                  break;
                }
                unsigned int v68 = v70;
                if (!--v69) {
                  goto LABEL_141;
                }
              }
              unint64_t v116 = v116 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14) {
                goto LABEL_142;
              }
LABEL_152:
              if (v98 >= 1) {
                unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v99, a1, v17);
              uint64_t v78 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
              if (v99) {
                uint64_t v79 = (char *)v102 + 1;
              }
              else {
                uint64_t v79 = 0;
              }
              if (*(_DWORD *)v78) {
                uint64_t v80 = *(void *)(v78 + 24) + 1;
              }
              else {
                uint64_t v80 = 0;
              }
              if (v79 != (char *)v80) {
                goto LABEL_174;
              }
              char v81 = 0;
              unint64_t v82 = v101;
              int v83 = (uint64_t *)(v78 + 16);
              BOOL v84 = v99 && v99 == *(_DWORD *)v78;
              BOOL v85 = !v84;
              while (1)
              {
                uint64_t v86 = *v83;
                if ((v81 & 1) == 0 && v85) {
                  break;
                }
                if ((uint64_t *)v82 == &v100) {
                  goto LABEL_173;
                }
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16)) {
                  goto LABEL_174;
                }
                unint64_t v82 = *(void *)(v82 + 8);
                int v83 = (uint64_t *)(v86 + 8);
                char v81 = 1;
              }
              if (v99) {
                goto LABEL_174;
              }
LABEL_173:
              float v118 = *(float *)&v103;
              float v117 = 0.0;
              float v117 = *(float *)(v78 + 32);
              if (*(float *)&v103 == v117)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v17, *(float *)&v103) != 1)unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
              }
                }
              else
              {
LABEL_174:
                uint64_t v87 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
                if (v99) {
                  unint64_t v88 = (char *)v102 + 1;
                }
                else {
                  unint64_t v88 = 0;
                }
                if (*(_DWORD *)v87) {
                  uint64_t v89 = *(void *)(v87 + 24) + 1;
                }
                else {
                  uint64_t v89 = 0;
                }
                if (v88 != (char *)v89) {
                  goto LABEL_194;
                }
                char v90 = 0;
                unint64_t v91 = v101;
                uint64_t v92 = (uint64_t *)(v87 + 16);
                BOOL v93 = v99 && v99 == *(_DWORD *)v87;
                BOOL v94 = !v93;
                while (1)
                {
                  uint64_t v95 = *v92;
                  if ((v90 & 1) == 0 && v94) {
                    break;
                  }
                  if ((uint64_t *)v91 == &v100) {
                    goto LABEL_193;
                  }
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16)) {
                    goto LABEL_194;
                  }
                  unint64_t v91 = *(void *)(v91 + 8);
                  uint64_t v92 = (uint64_t *)(v95 + 8);
                  char v90 = 1;
                }
                if (v99) {
                  goto LABEL_194;
                }
LABEL_193:
                float v118 = *(float *)&v103;
                float v117 = 0.0;
                float v117 = *(float *)(v87 + 32);
                if (*(float *)&v103 != v117) {
LABEL_194:
                }
                  unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                int v16 = v98 + 1;
              }
              std::__list_imp<char *>::clear(&v100);
              std::__list_imp<char *>::clear(&v111);
              if (v104) {
                (*(void (**)(uint64_t))(*(void *)v104 + 32))(v104);
              }
              else {
                ++v106;
              }
              goto LABEL_12;
            }
            if (v99)
            {
              uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v99 + 32))();
              goto LABEL_29;
            }
          }
          else if (v103 >= v101)
          {
            goto LABEL_132;
          }
          uint64_t v20 = v100 + 56 * v103;
LABEL_29:
          int v21 = *(_DWORD *)v20;
          int v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            unint64_t v116 = v116 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            int v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22) {
                goto LABEL_35;
              }
              goto LABEL_39;
            }
            unint64_t v23 = v116;
          }
          else
          {
            unint64_t v23 = v116 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          unint64_t v116 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_44;
          }
LABEL_39:
          unint64_t v116 = v116 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v109) {
              unint64_t v116 = v116 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            }
            if (v22 < SHIDWORD(v109)) {
              unint64_t v116 = v116 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
            }
          }
LABEL_44:
          uint64_t v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
          int v25 = *(_DWORD *)(v20 + 8);
          if (v25) {
            uint64_t v26 = *(void *)(v20 + 32) + 1;
          }
          else {
            uint64_t v26 = 0;
          }
          if (*(_DWORD *)v24) {
            uint64_t v27 = *(void *)(v24 + 24) + 1;
          }
          else {
            uint64_t v27 = 0;
          }
          if (v26 != v27) {
            goto LABEL_64;
          }
          char v28 = 0;
          BOOL v29 = (uint64_t *)(v20 + 24);
          unsigned int v30 = (uint64_t *)(v24 + 16);
          BOOL v31 = v25 && v25 == *(_DWORD *)v24;
          BOOL v32 = !v31;
          while (1)
          {
            uint64_t v33 = *v29;
            uint64_t v34 = *v30;
            if ((v28 & 1) == 0 && v32) {
              break;
            }
            if (v33 == v20 + 16) {
              goto LABEL_63;
            }
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16)) {
              goto LABEL_64;
            }
            BOOL v29 = (uint64_t *)(v33 + 8);
            unsigned int v30 = (uint64_t *)(v34 + 8);
            char v28 = 1;
          }
          if (v25) {
            goto LABEL_64;
          }
LABEL_63:
          float v118 = 0.0;
          float v118 = *(float *)(v20 + 40);
          float v117 = 0.0;
          float v117 = *(float *)(v24 + 32);
          if (v118 != v117)
          {
LABEL_64:
            uint64_t v35 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
            int v25 = *(_DWORD *)(v20 + 8);
            if (v25) {
              uint64_t v36 = *(void *)(v20 + 32) + 1;
            }
            else {
              uint64_t v36 = 0;
            }
            if (*(_DWORD *)v35) {
              uint64_t v37 = *(void *)(v35 + 24) + 1;
            }
            else {
              uint64_t v37 = 0;
            }
            if (v36 != v37) {
              goto LABEL_84;
            }
            char v38 = 0;
            uint64_t v39 = (uint64_t *)(v20 + 24);
            uint64_t v40 = (uint64_t *)(v35 + 16);
            BOOL v41 = v25 && v25 == *(_DWORD *)v35;
            BOOL v42 = !v41;
            while (1)
            {
              uint64_t v43 = *v39;
              uint64_t v44 = *v40;
              if ((v38 & 1) == 0 && v42) {
                break;
              }
              if (v43 == v20 + 16) {
                goto LABEL_83;
              }
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16)) {
                goto LABEL_84;
              }
              uint64_t v39 = (uint64_t *)(v43 + 8);
              uint64_t v40 = (uint64_t *)(v44 + 8);
              char v38 = 1;
            }
            if (v25) {
              goto LABEL_84;
            }
LABEL_83:
            float v118 = 0.0;
            float v118 = *(float *)(v20 + 40);
            float v117 = 0.0;
            float v117 = *(float *)(v35 + 32);
            if (v118 != v117) {
LABEL_84:
            }
              unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          int v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17) {
            unint64_t v116 = v116 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          }
          if (v45 != v17 + 1) {
            unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          uint64_t v109 = *(void *)v20;
          LODWORD(v110) = v25;
          if (&v109 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v111, *(void *)(v20 + 24), v20 + 16);
            int v45 = *(_DWORD *)(v20 + 48);
          }
          int v114 = *(_DWORD *)(v20 + 40);
          int v115 = v45;
          if (v11)
          {
            std::vector<unsigned int>::pointer end = v108.__end_;
            if (v108.__end_ >= v108.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v108.__begin_;
              int64_t v49 = v108.__end_ - v108.__begin_;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                goto LABEL_213;
              }
              int64_t v51 = (char *)v108.__end_cap_.__value_ - (char *)v108.__begin_;
              if (((char *)v108.__end_cap_.__value_ - (char *)v108.__begin_) >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                float v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v108.__end_cap_, v52);
                std::vector<unsigned int>::pointer begin = v108.__begin_;
                std::vector<unsigned int>::pointer end = v108.__end_;
              }
              else
              {
                float v53 = 0;
              }
              uint64_t v54 = (unsigned int *)&v53[4 * v49];
              *uint64_t v54 = *(_DWORD *)v20;
              uint64_t v47 = v54 + 1;
              while (end != begin)
              {
                unsigned int v55 = *--end;
                *--uint64_t v54 = v55;
              }
              v108.__begin_ = v54;
              v108.__end_ = v47;
              v108.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v108.__end_ = *(_DWORD *)v20;
              uint64_t v47 = end + 1;
            }
            v108.__end_ = v47;
          }
          if (v14)
          {
            std::vector<unsigned int>::pointer v56 = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer v58 = v107.__begin_;
              int64_t v59 = v107.__end_ - v107.__begin_;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62) {
LABEL_213:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              int64_t v61 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                uint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v62);
                std::vector<unsigned int>::pointer v58 = v107.__begin_;
                std::vector<unsigned int>::pointer v56 = v107.__end_;
              }
              else
              {
                uint64_t v63 = 0;
              }
              uint64_t v64 = (unsigned int *)&v63[4 * v59];
              *uint64_t v64 = *(_DWORD *)(v20 + 4);
              uint64_t v57 = v64 + 1;
              while (v56 != v58)
              {
                unsigned int v65 = *--v56;
                *--uint64_t v64 = v65;
              }
              v107.__begin_ = v64;
              v107.__end_ = v57;
              v107.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *v107.__end_ = *(_DWORD *)(v20 + 4);
              uint64_t v57 = v56 + 1;
            }
            v107.__end_ = v57;
          }
          if (v99)
          {
            (*(void (**)(uint64_t))(*(void *)v99 + 40))(v99);
            char v19 = 0;
          }
          else
          {
            char v19 = 0;
            ++v103;
          }
        }
      }
LABEL_17:
      uint64_t v17 = v106;
      goto LABEL_18;
    }
    if (v104) {
      (*(void (**)(void))(*(void *)v104 + 8))();
    }
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
    {
      unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    if (v108.__begin_)
    {
      v108.__end_ = v108.__begin_;
      operator delete(v108.__begin_);
    }
    unint64_t v8 = v116;
LABEL_211:
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1B1F9F994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FA02F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
    **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

uint64_t fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1FA0678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>();
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v34);
  uint64_t v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  if (v34) {
    uint64_t v7 = v35[2] + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (*(_DWORD *)v6) {
    uint64_t v8 = *(void *)(v6 + 24) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 == v8)
  {
    char v9 = 0;
    uint64_t v10 = v35[1];
    uint64_t v11 = (uint64_t *)(v6 + 16);
    if (v34) {
      BOOL v12 = v34 == *(_DWORD *)v6;
    }
    else {
      BOOL v12 = 0;
    }
    int v13 = !v12;
    int v14 = v13 ^ 1;
    while (1)
    {
      uint64_t v15 = *v11;
      if ((v9 & 1) == 0 && !v14) {
        break;
      }
      if ((void *)v10 == v35) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16)) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void *)(v10 + 8);
      uint64_t v11 = (uint64_t *)(v15 + 8);
      char v9 = 1;
    }
    if (v34) {
      goto LABEL_21;
    }
LABEL_42:
    float v38 = v36;
    float v37 = 0.0;
    float v37 = *(float *)(v6 + 32);
    float v32 = v36;
    float v33 = v37;
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      unint64_t v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  unint64_t v17 = a2;
  *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  uint64_t v18 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17)) {
    goto LABEL_36;
  }
  char v19 = 0;
  uint64_t v20 = *(void **)(a1 + 80);
  uint64_t v21 = v20[1];
  uint64_t v22 = **(void **)(a1 + 16);
  unint64_t v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    unint64_t v24 = *v23--;
    v19 |= *(void *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while (v24 != a2);
  int v25 = *(void **)a1;
  uint64_t v26 = **(void **)(a1 + 72);
  for (unint64_t i = (int *)(v21 - 4); ; --i)
  {
    unint64_t v28 = *i;
    if (v25) {
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    }
    unint64_t result = v28 >> 6;
    uint64_t v29 = 1 << v28;
    if ((v19 & 1) == 0) {
      break;
    }
    *(void *)(v22 + 8 * result) |= v29;
    *(void *)(v26 + 8 * result) &= ~v29;
    if (v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(void *)(v26 + 8 * result) &= ~v29;
  if (v28 != a2) {
    goto LABEL_33;
  }
  v20[1] = i;
  **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    uint64_t v30 = **(void **)(a1 + 16);
    if ((*(void *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17)) {
      *(void *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3)) {
      *(_DWORD *)(v18 + 4 * a3) = v31;
    }
  }
  return result;
}

void sub_1B1FA0950(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36FB8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36FB8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36FB8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1FA0A00(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37F70;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1FA0B18(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37F70;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::vector<unsigned int>::pointer v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1FA0F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    uint64_t v10 = v27 + 56 * v28;
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v25 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v25 = v13;
    }
    *(void *)(a1 + 8) = v25;
    uint64_t v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(uint64_t **)(a1 + 16);
    uint64_t v15 = *(uint64_t **)a1;
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = &v14[7 * v13];
  uint64_t v16 = v26;
  uint64_t v17 = v27;
  unint64_t v19 = v28;
  uint64_t v18 = v29;
  if (v29) {
    ++*v29;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    uint64_t v24 = v15 - 7;
    uint64_t *v24 = *(void *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(void *)(v23 + 24), v23 + 16);
    }
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 56 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B1FA1258(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *unint64_t result = &unk_1F0A416D0;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1FA1338(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FA1408(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1B1FA15B0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      Mutableint State = 0;
    }
    else {
      Mutableint State = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  unint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        unint64_t v8 = operator new(0x58uLL);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          char v9 = operator new(0x18uLL);
          int v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)char v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        unint64_t v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        unint64_t v19 = &v18[8 * v14];
        *(void *)unint64_t v19 = v8;
        unint64_t v13 = v19 + 8;
        int v21 = (char *)a1[1];
        unint64_t v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          unint64_t v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        void *v12 = v8;
        unint64_t v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::list<int>::list((void *)(a1 + 8), a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*>>((void *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(void *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1B1FA1888(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1FA1904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2 + v7;
      uint64_t v9 = a4 + v7;
      *(void *)uint64_t v9 = *(void *)(a2 + v7);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + v7 + 8);
      std::list<int>::list((void *)(a4 + v7 + 16), a2 + v7 + 16);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(a2 + v7 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v8 + 56 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1FA19B4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 40;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A39F08;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1B1FA1A70(_Unwind_Exception *exception_object)
{
  if (*v1) {
    fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::StateIterator(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    uint64_t v2 = result;
    if (!*(unsigned char *)(result + 44))
    {
      unint64_t result = *(void *)(result + 16);
      if (result)
      {
        unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        if (result) {
          return result;
        }
        uint64_t v1 = *(void *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      float v3 = (*(float (**)(void, void))(**(void **)(v1 + 136) + 32))(*(void *)(v1 + 136), *(unsigned int *)(v2 + 40));
      uint64_t v4 = 0;
      float v5 = v3;
      int v6 = -1;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()((float *)&v4, (uint64_t)&v7);
      if (v7) {
        *(unsigned char *)(v2 + 44) = 1;
      }
      return (uint64_t)std::__list_imp<char *>::clear(v8);
    }
  }
  return result;
}

void *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39F08;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39F08;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Next(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 40);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if ((result & 1) == 0)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
LABEL_7:
        return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 44)) {
    *(unsigned char *)(a1 + 44) = 0;
  }
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  else {
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

void *fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DefaultDeterminizeFilter<fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(void *a1, uint64_t a2, void *a3)
{
  *a1 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  if (a3)
  {
    if (*a3) {
      (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
    }
    MEMORY[0x1B3EA8670](a3, 0x20C4093837F09);
  }
  return a1;
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DeterminizeFst<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A3B6F8;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    uint64_t v4 = (void *)fst::cerr(v3);
    float v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1[1] + 8) |= 4uLL;
  }
  operator new();
}

void sub_1B1FA208C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~ImplToFst(v18);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + 8) = a2;
  return result;
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A44DF8;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~DeterminizeFst(void *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    char v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Copy()
{
}

void sub_1B1FA238C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitStateIterator()
{
}

void sub_1B1FA2480(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B1FA26BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DeterminizeFstImplBase<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1FA28D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~DeterminizeFstImplBase(void *a1)
{
  *a1 = &unk_1F0A3F630;
  uint64_t v2 = a1[17];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_1B1FA2AAC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::Expand(void *a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = v9;
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  uint64_t v4 = v8;
  if (v8 != v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, (uint64_t)(v4 + 5));
      unint64_t v5 = v4[1];
      if (v5)
      {
        do
        {
          int v6 = (void **)v5;
          unint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (void **)v4[2];
          BOOL v7 = *v6 == v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1B1FA2B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (v1 != -1)
  {
    int v2 = v1;
    int v3 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
    int v5 = *v3;
    std::list<int>::list(v6, (uint64_t)(v3 + 2));
    int v7 = v3[8];
    int v8 = v2;
    int v9 = v5;
    std::list<int>::list(v10, (uint64_t)v6);
    int v11 = v7;
    std::__list_imp<char *>::clear(v6);
    operator new();
  }
  return 0xFFFFFFFFLL;
}

void sub_1B1FA2CC4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 184) + 88) + 8 * a2);
  int v6 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  *(_DWORD *)a3 = *v6;
  uint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(v6 + 2));
  *(_DWORD *)(a3 + 32) = v6[8];
  for (unint64_t i = *v5; i; unint64_t i = (uint64_t *)*i)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v22);
    fst::Times<int,(fst::StringType)2>((int *)i + 4, (uint64_t)&v22, (uint64_t)&v32);
    float v9 = *((float *)i + 12);
    float v10 = NAN;
    if (v9 != -INFINITY)
    {
      float v10 = NAN;
      if (v24 != -INFINITY)
      {
        float v10 = INFINITY;
        BOOL v11 = v24 == INFINITY || v9 == INFINITY;
        float v12 = v9 + v24;
        if (!v11) {
          float v10 = v12;
        }
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v25, &v32, v10);
    std::__list_imp<char *>::clear(v33);
    fst::Plus<int,(fst::StringType)2>(a3, &v25, (uint64_t)&v32);
    float v13 = *(float *)(a3 + 32);
    float v14 = NAN;
    if (v13 != -INFINITY)
    {
      float v14 = NAN;
      if (v27 != -INFINITY)
      {
        if (v13 >= v27) {
          float v14 = v27;
        }
        else {
          float v14 = *(float *)(a3 + 32);
        }
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v28, &v32, v14);
    std::__list_imp<char *>::clear(v33);
    *(_DWORD *)a3 = v28;
    if (&v28 != (int *)a3) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v30, (uint64_t)&v29);
    }
    *(_DWORD *)(a3 + 32) = v31;
    std::__list_imp<char *>::clear(&v29);
    std::__list_imp<char *>::clear(v26);
    std::__list_imp<char *>::clear(v23);
    int v19 = *(_DWORD *)a3;
    std::list<int>::list(v20, a3 + 8);
    int v21 = *(_DWORD *)(a3 + 32);
    int v28 = v19;
    std::list<int>::list(&v29, (uint64_t)v20);
    int v15 = v21;
    int v31 = v21;
    *(_DWORD *)a3 = v28;
    if (&v28 != (int *)a3)
    {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v30, (uint64_t)&v29);
      int v15 = v31;
    }
    *(_DWORD *)(a3 + 32) = v15;
    std::__list_imp<char *>::clear(&v29);
    uint64_t result = std::__list_imp<char *>::clear(v20);
    if (*(_DWORD *)a3)
    {
      if (*(void *)(a3 + 24)) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = *(_DWORD *)a3 == -2;
      }
      if (!v16)
      {
        float v17 = *(float *)(a3 + 32);
        if (v17 < -INFINITY || v17 > -INFINITY) {
          continue;
        }
      }
    }
    else
    {
      float v18 = *(float *)(a3 + 32);
      if (v18 < -INFINITY || v18 > -INFINITY) {
        continue;
      }
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
  return result;
}

void sub_1B1FA2FA8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (void *)(a1 + 8), (void *)(a1 + 16));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (a2) {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  }
  return a1;
}

void sub_1B1FA3088(_Unwind_Exception *a1)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1FA30F4(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  *a1 = &unk_1F0A3E038;
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  uint64_t v3 = a1[23];
  if (v3)
  {
    uint64_t v4 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1B3EA8670](v4, 0x10E0C400200E20DLL);
  }
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~DeterminizeFstImplBase(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FA3348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FA34DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::GetLabelMap(void *a1, int a2, void *a3)
{
  int v5 = **(uint64_t ***)(*(void *)(a1[23] + 88) + 8 * a2);
  if (!v5) {
    goto LABEL_24;
  }
  do
  {
    uint64_t v6 = *((unsigned int *)v5 + 2);
    uint64_t v7 = a1[17];
    unint64_t v28 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 136))(v7, v6, v26);
    while (1)
    {
      if (!v26[0])
      {
        if (v28 >= v26[2]) {
          goto LABEL_21;
        }
LABEL_8:
        uint64_t v8 = v26[1] + 56 * v28;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)v26[0] + 24))(v26[0])) {
        break;
      }
      if (!v26[0]) {
        goto LABEL_8;
      }
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v26[0] + 32))();
LABEL_9:
      int v9 = *(_DWORD *)(v8 + 48);
      fst::Times<int,(fst::StringType)2>((int *)v5 + 4, v8 + 8, (uint64_t)&v29);
      float v10 = *((float *)v5 + 12);
      float v11 = NAN;
      if (v10 != -INFINITY)
      {
        float v12 = *(float *)(v8 + 40);
        float v11 = NAN;
        if (v12 != -INFINITY)
        {
          float v11 = INFINITY;
          BOOL v13 = v12 == INFINITY || v10 == INFINITY;
          float v14 = v10 + v12;
          if (!v13) {
            float v11 = v14;
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v20, &v29, v11);
      std::__list_imp<char *>::clear(v30);
      v23[0] = v9;
      void v23[2] = v20;
      std::list<int>::list(v24, (uint64_t)v21);
      int v25 = v22;
      std::__list_imp<char *>::clear(v21);
      fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::FilterArc(a1[22], (_DWORD *)v8, (uint64_t)(v5 + 1), v23, (uint64_t)a3);
      std::__list_imp<char *>::clear(v24);
      if (v26[0]) {
        (*(void (**)(void))(*(void *)v26[0] + 40))(v26[0]);
      }
      else {
        ++v28;
      }
    }
    if (v26[0])
    {
      (*(void (**)(void))(*(void *)v26[0] + 8))();
      goto LABEL_23;
    }
LABEL_21:
    if (v27) {
      --*v27;
    }
LABEL_23:
    int v5 = (uint64_t *)*v5;
  }
  while (v5);
LABEL_24:
  float v17 = (void *)*a3;
  BOOL v16 = a3 + 1;
  int v15 = v17;
  if (v17 != v16)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v15 + 5));
      float v18 = (void *)v15[1];
      if (v18)
      {
        do
        {
          int v19 = v18;
          float v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (void *)v15[2];
          BOOL v13 = *v19 == (void)v15;
          int v15 = v19;
        }
        while (!v13);
      }
      int v15 = v19;
    }
    while (v19 != v16);
  }
}

void sub_1B1FA37EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_DWORD *a24)
{
  if (a21)
  {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  else if (a24)
  {
    --*a24;
  }
  _Unwind_Resume(exception_object);
}

void *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  v9[0] = (uint64_t)v9;
  v9[1] = (uint64_t)v9;
  void v9[2] = 0;
  v8[0] = *(_DWORD *)a3;
  v8[1] = v8[0];
  v8[2] = *(_DWORD *)(a3 + 8);
  if (v8 != (_DWORD *)a3) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v9, *(void *)(a3 + 24), a3 + 16);
  }
  int v10 = *(_DWORD *)(a3 + 40);
  int State = fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(uint64_t ***)(a3 + 48));
  Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(MutableState, (uint64_t)v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1B1FA3910(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  int v10 = a2;
  uint64_t v7 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v10);
  if (*((_DWORD *)v7 + 10) == -1) {
    fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::DeterminizeArc((uint64_t)&v10, a2);
  }
  uint64_t v8 = (uint64_t *)v7[11];
  *uint64_t v8 = (uint64_t)std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> const&>((uint64_t)v8, *v8, a4);
  return 1;
}

void sub_1B1FA3A10(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t ***)(a2 + 48);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  int v5 = *v4;
  if (*v4)
  {
    uint64_t v21 = a1;
    uint64_t v6 = (int *)(a2 + 8);
    int v20 = v4;
    uint64_t v7 = *v4;
    do
    {
      fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()(a2 + 8, (uint64_t)(v7 + 2), (uint64_t)&v22);
      *uint64_t v6 = v22;
      if (v6 != &v22) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a2 + 16), v24, (uint64_t)&v23);
      }
      *(_DWORD *)(a2 + 40) = v25;
      std::__list_imp<char *>::clear(&v23);
      if (v5 == v7 || *((_DWORD *)v7 + 2) != *((_DWORD *)v5 + 2))
      {
        BOOL v13 = (uint64_t *)*v7;
        int v5 = v7;
      }
      else
      {
        uint64_t v8 = (int *)(v5 + 2);
        fst::Plus<int,(fst::StringType)2>((uint64_t)(v5 + 2), (int *)v7 + 4, (uint64_t)&v26);
        float v9 = *((float *)v5 + 12);
        float v10 = NAN;
        if (v9 != -INFINITY)
        {
          float v11 = *((float *)v7 + 12);
          float v10 = NAN;
          if (v11 != -INFINITY)
          {
            if (v9 >= v11) {
              float v10 = *((float *)v7 + 12);
            }
            else {
              float v10 = *((float *)v5 + 12);
            }
          }
        }
        fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v22, &v26, v10);
        std::__list_imp<char *>::clear(v27);
        *uint64_t v8 = v22;
        if (v8 != &v22) {
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v5 + 3, v24, (uint64_t)&v23);
        }
        *((_DWORD *)v5 + 12) = v25;
        std::__list_imp<char *>::clear(&v23);
        if (*((_DWORD *)v5 + 4) == -2 && !v5[5] || (float v12 = *((float *)v5 + 12), v12 >= -INFINITY) && v12 <= -INFINITY) {
          *(void *)(v21 + 8) |= 4uLL;
        }
        BOOL v13 = (uint64_t *)*v7;
        float v14 = (void *)*v5;
        int v15 = (void *)(*v5 + 24);
        *int v5 = *(void *)*v5;
        std::__list_imp<char *>::clear(v15);
        operator delete(v14);
      }
      uint64_t v7 = v13;
    }
    while (v13);
    for (unint64_t i = *v20; i; unint64_t i = (uint64_t *)*i)
    {
      float v17 = (int *)(i + 2);
      fst::DivideLeft<int,(fst::StringType)2>((int *)i + 4, (int *)(a2 + 8), (uint64_t)&v26);
      float v18 = *((float *)i + 12);
      float v19 = NAN;
      if (v18 != -INFINITY)
      {
        if ((*(_DWORD *)(a2 + 40) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          float v19 = INFINITY;
          if (v18 != INFINITY) {
            float v19 = v18 - *(float *)(a2 + 40);
          }
        }
        else
        {
          float v19 = NAN;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v22, &v26, v19);
      std::__list_imp<char *>::clear(v27);
      int *v17 = v22;
      if (v17 != &v22) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(i + 3, v24, (uint64_t)&v23);
      }
      *((_DWORD *)i + 12) = v25;
      std::__list_imp<char *>::clear(&v23);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Quantize((float *)i + 4, (uint64_t)&v22, *(float *)(v21 + 144));
      *((_DWORD *)i + 4) = v22;
      if (v17 != &v22) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(i + 3, v24, (uint64_t)&v23);
      }
      *((_DWORD *)i + 12) = v25;
      std::__list_imp<char *>::clear(&v23);
    }
  }
}

void sub_1B1FA3D38(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t *)v5;
        int v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = **a2;
  v6[10] = -1;
  int v7 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  v6[12] = *v7;
  uint64_t result = std::list<int>::list((void *)v6 + 7, (uint64_t)(v7 + 2));
  v6[20] = v7[8];
  *((void *)v6 + 11) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1FA3EC4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  uint64_t v3 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  *(_DWORD *)(a1 + 8) = *v3;
  std::list<int>::list((void *)(a1 + 16), (uint64_t)(v3 + 2));
  *(_DWORD *)(a1 + 40) = v3[8];
  operator new();
}

void sub_1B1FA3F60(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_DWORD *std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = operator new(0x38uLL);
  *(void *)uint64_t v5 = a2;
  void v5[2] = *a3;
  v5[4] = a3[2];
  std::list<int>::list((void *)v5 + 3, (uint64_t)(a3 + 4));
  v5[12] = a3[10];
  return v5;
}

void sub_1B1FA3FD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  fst::LabelCommonDivisor<int,(fst::StringType)2>::operator()((int *)a1, a2, (uint64_t)&v10);
  float v6 = *(float *)(a1 + 32);
  float v7 = NAN;
  if (v6 != -INFINITY)
  {
    float v8 = *(float *)(a2 + 32);
    float v7 = NAN;
    if (v8 != -INFINITY)
    {
      if (v6 >= v8) {
        float v7 = *(float *)(a2 + 32);
      }
      else {
        float v7 = *(float *)(a1 + 32);
      }
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight(a3, &v10, v7);
  return std::__list_imp<char *>::clear(v11);
}

void sub_1B1FA408C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void *fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1B1FA40FC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::Plus<int,(fst::StringType)2>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)a1 && (*(_DWORD *)a1 == -2 ? (BOOL v6 = *(void *)(a1 + 24) == 0) : (BOOL v6 = 0), v6)
    || *a2 && (*a2 == -2 ? (BOOL v7 = *((void *)a2 + 3) == 0) : (BOOL v7 = 0), v7))
  {
    int v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
    uint64_t v21 = (uint64_t)(v20 + 2);
    *(_DWORD *)a3 = *v20;
    int v22 = (void *)(a3 + 8);
  }
  else
  {
    uint64_t v8 = fst::StringWeight<int,(fst::StringType)2>::Zero();
    int v9 = *(_DWORD *)a1;
    if (*(_DWORD *)a1) {
      uint64_t v10 = *(void *)(a1 + 24) + 1;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(_DWORD *)v8) {
      uint64_t v11 = *(void *)(v8 + 24) + 1;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v10 == v11)
    {
      char v12 = 0;
      BOOL v13 = (uint64_t *)(a1 + 16);
      float v14 = (uint64_t *)(v8 + 16);
      if (v9) {
        BOOL v15 = v9 == *(_DWORD *)v8;
      }
      else {
        BOOL v15 = 0;
      }
      int v16 = !v15;
      int v17 = v16 ^ 1;
      while (1)
      {
        uint64_t v18 = *v13;
        uint64_t v19 = *v14;
        if ((v12 & 1) == 0 && !v17) {
          break;
        }
        if (v18 == a1 + 8) {
          goto LABEL_55;
        }
        if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16)) {
          goto LABEL_36;
        }
        BOOL v13 = (uint64_t *)(v18 + 8);
        float v14 = (uint64_t *)(v19 + 8);
        char v12 = 1;
      }
      if (v9) {
        goto LABEL_36;
      }
LABEL_55:
      *(_DWORD *)a3 = *a2;
      uint64_t v23 = (void *)(a3 + 8);
      uint64_t v21 = (uint64_t)(a2 + 2);
      goto LABEL_32;
    }
LABEL_36:
    uint64_t v25 = fst::StringWeight<int,(fst::StringType)2>::Zero();
    int v26 = *a2;
    if (*a2) {
      uint64_t v27 = *((void *)a2 + 3) + 1;
    }
    else {
      uint64_t v27 = 0;
    }
    if (*(_DWORD *)v25) {
      uint64_t v28 = *(void *)(v25 + 24) + 1;
    }
    else {
      uint64_t v28 = 0;
    }
    if (v27 == v28)
    {
      char v29 = 0;
      uint64_t v30 = (uint64_t *)(a2 + 4);
      int v31 = (uint64_t *)(v25 + 16);
      if (v26) {
        BOOL v32 = v26 == *(_DWORD *)v25;
      }
      else {
        BOOL v32 = 0;
      }
      int v33 = !v32;
      int v34 = v33 ^ 1;
      while (1)
      {
        uint64_t v35 = *v30;
        uint64_t v36 = *v31;
        if ((v29 & 1) == 0 && !v34) {
          break;
        }
        if ((int *)v35 == a2 + 2) {
          goto LABEL_73;
        }
        if (*(_DWORD *)(v35 + 16) != *(_DWORD *)(v36 + 16)) {
          goto LABEL_57;
        }
        uint64_t v30 = (uint64_t *)(v35 + 8);
        int v31 = (uint64_t *)(v36 + 8);
        char v29 = 1;
      }
      if (v26) {
        goto LABEL_57;
      }
LABEL_73:
      *(_DWORD *)a3 = *(_DWORD *)a1;
      uint64_t v23 = (void *)(a3 + 8);
      uint64_t v21 = a1 + 8;
      goto LABEL_32;
    }
LABEL_57:
    int v37 = *(_DWORD *)a1;
    if (*(_DWORD *)a1) {
      uint64_t v38 = *(void *)(a1 + 24) + 1;
    }
    else {
      uint64_t v38 = 0;
    }
    if (v38 != v27)
    {
LABEL_75:
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v47 = fst::LogMessage::LogMessage((fst *)&v57, (uint64_t)__p);
      uint64_t v48 = (void *)fst::cerr(v47);
      uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"StringWeight::Plus: unequal arguments ", 38);
      uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"(non-functional FST?)", 21);
      int64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" w1 = ", 6);
      uint64_t v52 = fst::operator<<<int,(fst::StringType)1>(v51, (int *)a1);
      float v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" w2 = ", 6);
      fst::operator<<<int,(fst::StringType)1>(v53, a2);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v57);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      long long v54 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
      *(_DWORD *)a3 = *v54;
      return std::list<int>::list((void *)(a3 + 8), (uint64_t)(v54 + 2));
    }
    char v39 = 0;
    uint64_t v21 = a1 + 8;
    uint64_t v40 = (uint64_t *)(a1 + 16);
    BOOL v41 = (uint64_t *)(a2 + 4);
    if (v37) {
      BOOL v42 = v37 == v26;
    }
    else {
      BOOL v42 = 0;
    }
    int v43 = !v42;
    int v44 = v43 ^ 1;
    while (1)
    {
      uint64_t v45 = *v40;
      uint64_t v46 = *v41;
      if ((v39 & 1) == 0 && !v44) {
        break;
      }
      if (v45 == v21) {
        goto LABEL_81;
      }
      if (*(_DWORD *)(v45 + 16) != *(_DWORD *)(v46 + 16)) {
        goto LABEL_75;
      }
      uint64_t v40 = (uint64_t *)(v45 + 8);
      BOOL v41 = (uint64_t *)(v46 + 8);
      char v39 = 1;
    }
    if (v37) {
      goto LABEL_75;
    }
LABEL_81:
    *(_DWORD *)a3 = v37;
    int v22 = (void *)(a3 + 8);
  }
  uint64_t v23 = v22;
LABEL_32:
  return std::list<int>::list(v23, v21);
}

void sub_1B1FA4438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, uint64_t **a2)
{
  uint64_t State = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::FindState(*(void **)(a1 + 184), a2);
  uint64_t v5 = State;
  if (*(void *)(a1 + 152))
  {
    BOOL v6 = *(uint64_t **)(a1 + 160);
    if (0xCCCCCCCCCCCCCCCDLL * ((v6[1] - *v6) >> 3) <= (int)State)
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (uint64_t)&v10);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v8 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>(v6, &v10);
      }
      else
      {
        *(_DWORD *)unint64_t v7 = v10;
        std::list<int>::list((void *)(v7 + 8), (uint64_t)v11);
        *(_DWORD *)(v7 + 32) = v12;
        uint64_t v8 = v7 + 40;
        v6[1] = v7 + 40;
      }
      v6[1] = v8;
      std::__list_imp<char *>::clear(v11);
    }
  }
  return v5;
}

void sub_1B1FA454C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::FindState(void *a1, void **a2)
{
  BOOL v6 = a2;
  uint64_t v2 = (a1[12] - a1[11]) >> 3;
  uint64_t Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v6, 1);
  if (Id != v2)
  {
    uint64_t v4 = v6;
    if (v6)
    {
      std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::clear(v6);
      MEMORY[0x1B3EA8670](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

void *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::ComputeDistance@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  *(_DWORD *)a3 = *v6;
  uint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(v6 + 2));
  *(_DWORD *)(a3 + 32) = v6[8];
  for (unint64_t i = *a2; i; unint64_t i = (uint64_t *)*i)
  {
    unint64_t v9 = *((int *)i + 2);
    uint64_t v10 = **(void **)(a1 + 152);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a1 + 152) + 8) - v10) >> 3) <= v9) {
      uint64_t v11 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
    }
    else {
      uint64_t v11 = v10 + 40 * (int)v9;
    }
    int v24 = *(_DWORD *)v11;
    std::list<int>::list(v25, v11 + 8);
    float v26 = *(float *)(v11 + 32);
    fst::Times<int,(fst::StringType)2>((int *)i + 4, (uint64_t)&v24, (uint64_t)&v27);
    float v12 = *((float *)i + 12);
    float v13 = NAN;
    if (v12 != -INFINITY)
    {
      float v13 = NAN;
      if (v26 != -INFINITY)
      {
        float v13 = INFINITY;
        BOOL v14 = v26 == INFINITY || v12 == INFINITY;
        float v15 = v12 + v26;
        if (!v14) {
          float v13 = v15;
        }
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v18, &v27, v13);
    std::__list_imp<char *>::clear(v28);
    fst::Plus<int,(fst::StringType)2>(a3, &v18, (uint64_t)&v27);
    float v16 = *(float *)(a3 + 32);
    float v17 = NAN;
    if (v16 != -INFINITY)
    {
      float v17 = NAN;
      if (v20 != -INFINITY)
      {
        if (v16 >= v20) {
          float v17 = v20;
        }
        else {
          float v17 = *(float *)(a3 + 32);
        }
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v21, &v27, v17);
    std::__list_imp<char *>::clear(v28);
    *(_DWORD *)a3 = v21;
    if (&v21 != (int *)a3) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v22[1], (uint64_t)v22);
    }
    *(_DWORD *)(a3 + 32) = v23;
    std::__list_imp<char *>::clear(v22);
    std::__list_imp<char *>::clear(v19);
    uint64_t result = std::__list_imp<char *>::clear(v25);
  }
  return result;
}

void sub_1B1FA4808(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v4);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(void *a1, void *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  unint64_t v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  uint64_t v10 = (void *)a1[11];
  uint64_t v11 = ((uint64_t)v10 - v9) >> 3;
  unsigned int v23 = v11;
  unint64_t v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v12 - v9;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v15 = v11 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    }
    else {
      float v17 = 0;
    }
    int v18 = &v17[8 * v11];
    uint64_t v19 = &v17[8 * v16];
    *(void *)int v18 = *a2;
    float v13 = v18 + 8;
    int v21 = (char *)a1[10];
    float v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      float v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    void *v10 = *a2;
    float v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[40 * v9];
  *(_DWORD *)uint64_t v11 = *a2;
  std::list<int>::list((void *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1FA4AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      *(_DWORD *)(a7 + v11 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((void *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1FA4BC4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 8;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void *fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 64))(&v10, a1, a2);
    int v7 = v10;
    std::list<int>::list(v8, (uint64_t)v11);
    int v9 = v12;
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v7);
    std::__list_imp<char *>::clear(v8);
    std::__list_imp<char *>::clear(v11);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1B1FA4D80(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

void *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DeterminizeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A3B6F8;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B1FA500C(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 7);
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((*((void *)v19 + 8) - v8) >> 3);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      int v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        int v14 = *v12;
        v12 += 14;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1FA51A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1FA5250(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FactorWeightFst()
{
}

void sub_1B1FA535C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::~FactorWeightFst(void *a1)
{
  fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Start(uint64_t a1)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Copy()
{
}

void sub_1B1FA553C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::InitStateIterator()
{
}

void sub_1B1FA5630(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1FA5878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  int v21 = v19;
  uint64_t v22 = (uint64_t)(v19 - 5);
  unsigned int v23 = *v21;
  if (*v21)
  {
    v18[30] = v23;
    operator delete(v23);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(v22);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::~FactorWeightFstImpl(uint64_t a1)
{
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::~FactorWeightFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::~FactorWeightFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3EF00;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(void *)(a1 + 240) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(a1 + 192);
  unint64_t v5 = (void **)(a1 + 168);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Start(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
  {
    *(unsigned char *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result != -1)
  {
    int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
    BOOL v4 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
    int v6 = *v4;
    std::list<int>::list(v7, (uint64_t)(v4 + 2));
    int v8 = v4[8];
    v9[0] = v3;
    void v9[2] = v6;
    std::list<int>::list(v10, (uint64_t)v7);
    int v11 = v8;
    int State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FindState(a1, v9);
    std::__list_imp<char *>::clear(v10);
    std::__list_imp<char *>::clear(v7);
    *(_DWORD *)(a1 + 64) = State;
    *(unsigned char *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= State) {
      *(_DWORD *)(a1 + 68) = State + 1;
    }
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

void sub_1B1FA5BE0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FindState(uint64_t a1, int *a2)
{
  if ((*(unsigned char *)(a1 + 148) & 2) != 0) {
    goto LABEL_27;
  }
  uint64_t v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
  int v5 = a2[2];
  uint64_t v6 = v5 ? *((void *)a2 + 4) + 1 : 0;
  uint64_t v7 = *(_DWORD *)v4 ? *(void *)(v4 + 24) + 1 : 0;
  if (v6 != v7) {
    goto LABEL_27;
  }
  char v8 = 0;
  unint64_t v9 = (uint64_t *)(a2 + 6);
  uint64_t v10 = (uint64_t *)(v4 + 16);
  BOOL v11 = v5 && v5 == *(_DWORD *)v4;
  BOOL v12 = !v11;
  int v13 = !v12;
  while (1)
  {
    uint64_t v14 = *v9;
    uint64_t v15 = *v10;
    if ((v8 & 1) == 0 && !v13) {
      break;
    }
    if ((int *)v14 == a2 + 4) {
      goto LABEL_22;
    }
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16)) {
      goto LABEL_27;
    }
    unint64_t v9 = (uint64_t *)(v14 + 8);
    uint64_t v10 = (uint64_t *)(v15 + 8);
    char v8 = 1;
  }
  if (v5) {
    goto LABEL_27;
  }
LABEL_22:
  v40[0] = 0;
  v40[0] = a2[10];
  float v44 = 0.0;
  float v44 = *(float *)(v4 + 32);
  int v16 = *a2;
  if (*(float *)v40 != v44 || v16 == -1)
  {
LABEL_27:
    int v18 = std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>((void *)(a1 + 192), a2);
    if (v18)
    {
      return *((unsigned int *)v18 + 16);
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 176);
      unint64_t v20 = (uint64_t *)(a1 + 168);
      uint64_t v19 = -1431655765 * ((v21 - *(void *)(a1 + 168)) >> 4);
      if (v21 >= *(void *)(a1 + 184))
      {
        uint64_t v22 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element const&>(v20, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element const&>((uint64_t)v20, a2);
        uint64_t v22 = v21 + 48;
      }
      *(void *)(a1 + 176) = v22;
      int v23 = a2[2];
      v40[0] = *a2;
      v40[2] = v23;
      std::list<int>::list(v41, (uint64_t)(a2 + 4));
      int v42 = a2[10];
      int v43 = v19;
      std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(a1 + 192, v40, v40);
      std::__list_imp<char *>::clear(v41);
    }
  }
  else
  {
    uint64_t v25 = v16;
    float v26 = *(char **)(a1 + 232);
    int v27 = *(char **)(a1 + 240);
    unint64_t v28 = (v27 - v26) >> 2;
    if (v28 <= v16)
    {
      char v29 = (void *)(a1 + 248);
      do
      {
        if ((unint64_t)v27 >= *v29)
        {
          unint64_t v31 = v28 + 1;
          if ((v28 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v32 = *v29 - (void)v26;
          if (v32 >> 1 > v31) {
            unint64_t v31 = v32 >> 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v33);
            float v26 = *(char **)(a1 + 232);
            int v27 = *(char **)(a1 + 240);
          }
          else
          {
            int v34 = 0;
          }
          uint64_t v35 = &v34[4 * v28];
          *(_DWORD *)uint64_t v35 = -1;
          uint64_t v30 = v35 + 4;
          while (v27 != v26)
          {
            int v36 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(void *)(a1 + 232) = v35;
          *(void *)(a1 + 240) = v30;
          *(void *)(a1 + 248) = &v34[4 * v33];
          if (v26)
          {
            operator delete(v26);
            float v26 = *(char **)(a1 + 232);
          }
          else
          {
            float v26 = v35;
          }
        }
        else
        {
          *(_DWORD *)int v27 = -1;
          uint64_t v30 = v27 + 4;
        }
        *(void *)(a1 + 240) = v30;
        unint64_t v28 = (v30 - v26) >> 2;
        int v16 = *a2;
        int v27 = v30;
      }
      while (v28 <= *a2);
      uint64_t v25 = v16;
    }
    if (*(_DWORD *)&v26[4 * v25] == -1)
    {
      unint64_t v37 = *(void *)(a1 + 176);
      *(_DWORD *)&v26[4 * v25] = -1431655765 * ((v37 - *(void *)(a1 + 168)) >> 4);
      uint64_t v38 = (uint64_t *)(a1 + 168);
      if (v37 >= *(void *)(a1 + 184))
      {
        uint64_t v39 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element const&>(v38, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element const&>((uint64_t)v38, a2);
        uint64_t v39 = v37 + 48;
      }
      *(void *)(a1 + 176) = v39;
      int v16 = *a2;
      float v26 = *(char **)(a1 + 232);
    }
    return *(unsigned int *)&v26[4 * v16];
  }
  return v19;
}

void sub_1B1FA5F08(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v4 = *a2;
  *(_DWORD *)(v4 + 8) = a2[2];
  uint64_t result = std::list<int>::list((void *)(v4 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(v4 + 40) = a2[10];
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1B1FA5F78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = (char *)&v10[12 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  int v16 = (char *)&v10[12 * v9];
  *(_DWORD *)BOOL v11 = *a2;
  *((_DWORD *)v11 + 2) = a2[2];
  std::list<int>::list((void *)v11 + 2, (uint64_t)(a2 + 4));
  v10[12 * v4 + 10] = a2[10];
  v15 += 48;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1FA6098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      *(_DWORD *)(v12 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((void *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 48;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1FA61BC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    uint64_t v6 = (int *)(*(void *)(a1 + 168) + 48 * a2);
    int v8 = *v6;
    uint64_t v7 = v6 + 2;
    if (v8 == -1)
    {
      int v28 = *v7;
      std::list<int>::list(v29, (uint64_t)(v7 + 2));
      float v30 = *((float *)v7 + 8);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v24);
      fst::Times<int,(fst::StringType)2>(v7, (uint64_t)&v24, (uint64_t)&v31);
      float v9 = *((float *)v7 + 8);
      float v10 = NAN;
      if (v9 != -INFINITY)
      {
        float v10 = NAN;
        if (v26 != -INFINITY)
        {
          float v10 = INFINITY;
          BOOL v11 = v26 == INFINITY || v9 == INFINITY;
          float v12 = v9 + v26;
          if (!v11) {
            float v10 = v12;
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v28, &v31, v10);
      std::__list_imp<char *>::clear(v32);
      std::__list_imp<char *>::clear(v25);
    }
    LODWORD(v++*(_DWORD *)(result + 24) = v28;
    std::list<int>::list(v25, (uint64_t)v29);
    float v26 = v30;
    if (v28) {
      BOOL v13 = (unint64_t)(v29[2] + 1) >= 2;
    }
    else {
      BOOL v13 = 0;
    }
    int v14 = !v13;
    char v27 = v14;
    if ((*(unsigned char *)(a1 + 148) & 1) == 0 || v14)
    {
      int v21 = v28;
      int v16 = v22;
      std::list<int>::list(v22, (uint64_t)v29);
      float v23 = v30;
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v21);
    }
    else
    {
      uint64_t v15 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
      int v18 = *v15;
      int v16 = v19;
      std::list<int>::list(v19, (uint64_t)(v15 + 2));
      int v20 = v15[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v18);
    }
    std::__list_imp<char *>::clear(v16);
    std::__list_imp<char *>::clear(v25);
    std::__list_imp<char *>::clear(v29);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1B1FA6410(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

void *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Expand(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 168) + 48 * a2;
  int v82 = *(_DWORD *)v3;
  int v83 = *(_DWORD *)(v3 + 8);
  std::list<int>::list(v84, v3 + 16);
  float v85 = *(float *)(v3 + 40);
  if (v82 == -1) {
    goto LABEL_33;
  }
  uint64_t v4 = *(void *)(a1 + 136);
  unint64_t v81 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
  uint64_t v5 = &v66;
  while (1)
  {
    if (!v78)
    {
      if (v81 >= v79[1]) {
        goto LABEL_31;
      }
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v78 + 24))(v78)) {
      break;
    }
    if (v78)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 32))(v78);
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v6 = v79[0] + 56 * v81;
LABEL_9:
    fst::Times<int,(fst::StringType)2>(&v83, v6 + 8, (uint64_t)&v59);
    float v7 = NAN;
    if (v85 != -INFINITY)
    {
      float v8 = *(float *)(v6 + 40);
      float v7 = NAN;
      if (v8 != -INFINITY)
      {
        float v7 = INFINITY;
        if (v8 != INFINITY && v85 != INFINITY) {
          float v7 = v85 + v8;
        }
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v75, (int *)&v59, v7);
    std::__list_imp<char *>::clear(&v60);
    float v71 = *(float *)&v75;
    std::list<int>::list(v72, (uint64_t)v76);
    int v73 = v77;
    int v11 = *(float *)&v75 == 0.0 || (unint64_t)(v76[2] + 1) < 2;
    char v74 = v11;
    if ((*(unsigned char *)(a1 + 148) & 2) == 0 || v11)
    {
      int v16 = v5;
      int v17 = *(_DWORD *)(v6 + 48);
      int v18 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
      int v68 = *v18;
      std::list<int>::list(v69, (uint64_t)(v18 + 2));
      int v70 = v18[8];
      LODWORD(v59) = v17;
      LODWORD(v60) = v68;
      std::list<int>::list(v61, (uint64_t)v69);
      int v63 = v70;
      LODWORD(v18) = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FindState(a1, (int *)&v59);
      uint64_t v5 = v16;
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v69);
      uint64_t v19 = *(void *)v6;
      int v65 = v75;
      std::list<int>::list(v16, (uint64_t)v76);
      int v67 = v77;
      uint64_t v59 = v19;
      LODWORD(v60) = v65;
      std::list<int>::list(v61, (uint64_t)v16);
      int v63 = v67;
      LODWORD(v64[0]) = v18;
      Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(MutableState, (uint64_t)&v59);
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v16);
    }
    else
    {
      fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Value((int *)&v71, (uint64_t)&v59);
      int v12 = *(_DWORD *)(v6 + 48);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Quantize((float *)&v63, (uint64_t)&v56, *(float *)(a1 + 144));
      LODWORD(v51) = v12;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v56;
      std::list<int>::list(v53, (uint64_t)v57);
      float v54 = v58;
      int State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v57);
      uint64_t v14 = *(void *)v6;
      int v48 = v59;
      std::list<int>::list(v49, (uint64_t)&v60);
      float v50 = v62;
      uint64_t v51 = v14;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v48;
      std::list<int>::list(v53, (uint64_t)v49);
      float v54 = v50;
      int v55 = State;
      uint64_t v15 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(v15, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v49);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      char v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v76);
    if (v78) {
      (*(void (**)(uint64_t))(*(void *)v78 + 40))(v78);
    }
    else {
      ++v81;
    }
  }
  if (v78)
  {
    (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
    goto LABEL_33;
  }
LABEL_31:
  if (v80) {
    --*v80;
  }
LABEL_33:
  if (*(unsigned char *)(a1 + 148))
  {
    if (v82 == -1) {
      goto LABEL_65;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v59);
    uint64_t v21 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
    uint64_t v22 = v59 ? v61[1] + 1 : 0;
    uint64_t v23 = *(_DWORD *)v21 ? *(void *)(v21 + 24) + 1 : 0;
    if (v22 == v23)
    {
      char v24 = 0;
      uint64_t v25 = v61[0];
      float v26 = (uint64_t *)(v21 + 16);
      if (v59) {
        BOOL v27 = v59 == *(_DWORD *)v21;
      }
      else {
        BOOL v27 = 0;
      }
      int v28 = !v27;
      int v29 = v28 ^ 1;
      while (1)
      {
        uint64_t v30 = *v26;
        if ((v24 & 1) == 0 && !v29) {
          break;
        }
        if ((uint64_t *)v25 == &v60) {
          goto LABEL_77;
        }
        if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v30 + 16)) {
          goto LABEL_55;
        }
        uint64_t v25 = *(void *)(v25 + 8);
        float v26 = (uint64_t *)(v30 + 8);
        char v24 = 1;
      }
      if (v59) {
        goto LABEL_55;
      }
LABEL_77:
      *(float *)&uint64_t v51 = v62;
      float v71 = 0.0;
      float v71 = *(float *)(v21 + 32);
      float v39 = v62;
      float v40 = v71;
      std::__list_imp<char *>::clear(&v60);
      if (v39 == v40) {
        goto LABEL_76;
      }
    }
    else
    {
LABEL_55:
      std::__list_imp<char *>::clear(&v60);
    }
    if (v82 == -1)
    {
LABEL_65:
      LODWORD(v78) = v83;
      std::list<int>::list(v79, (uint64_t)v84);
      *(float *)&unint64_t v81 = v85;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v59);
      fst::Times<int,(fst::StringType)2>(&v83, (uint64_t)&v59, (uint64_t)&v51);
      float v31 = NAN;
      if (v85 != -INFINITY)
      {
        float v31 = NAN;
        if (v62 != -INFINITY)
        {
          float v31 = INFINITY;
          if (v62 != INFINITY && v85 != INFINITY) {
            float v31 = v85 + v62;
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v78, (int *)&v51, v31);
      std::__list_imp<char *>::clear(&v52);
      std::__list_imp<char *>::clear(&v60);
    }
    uint64_t v33 = *(void *)(a1 + 152);
    float v71 = *(float *)&v78;
    std::list<int>::list(v72, (uint64_t)v79);
    int v73 = v81;
    if (v78) {
      BOOL v34 = (unint64_t)v80 + 1 >= 2;
    }
    else {
      BOOL v34 = 0;
    }
    char v35 = !v34;
    char v74 = v35;
    if (v34)
    {
      fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Value((int *)&v71, (uint64_t)&v59);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Quantize((float *)&v63, (uint64_t)&v45, *(float *)(a1 + 144));
      LODWORD(v51) = -1;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v45;
      std::list<int>::list(v53, (uint64_t)v46);
      float v54 = v47;
      int v36 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v46);
      int v42 = v59;
      std::list<int>::list(v43, (uint64_t)&v60);
      float v44 = v62;
      uint64_t v51 = v33;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v42;
      std::list<int>::list(v53, (uint64_t)v43);
      float v54 = v44;
      int v55 = v36;
      unint64_t v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(v37, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v43);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      char v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v79);
  }
LABEL_76:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetArcs(a1, a2);
  return std::__list_imp<char *>::clear(v84);
}

void sub_1B1FA6D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::__list_imp<char *>::clear((void *)(v47 + 8));
  std::__list_imp<char *>::clear(&a47);
  std::__list_imp<char *>::clear(v48);
  _Unwind_Resume(a1);
}

void *fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Value@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v35 = *a1;
  std::list<int>::list(v36, (uint64_t)(a1 + 2));
  if (*a1) {
    BOOL v4 = (unint64_t)(*((void *)a1 + 3) + 1) >= 2;
  }
  else {
    BOOL v4 = 0;
  }
  char v5 = !v4;
  char v37 = v5;
  fst::StringFactor<int,(fst::StringType)2>::Value((uint64_t)&v35, (uint64_t)&v22);
  int v30 = v22;
  v31[0] = v31;
  v31[1] = v31;
  uint64_t v32 = 0;
  uint64_t v6 = v25;
  if (v25)
  {
    uint64_t v8 = v23;
    float v7 = v24;
    uint64_t v9 = *v24;
    *(void *)(v9 + 8) = *(void *)(v23 + 8);
    **(void **)(v8 + 8) = v9;
    uint64_t v10 = v31[0];
    *(void *)(v31[0] + 8) = v7;
    *float v7 = v10;
    v31[0] = v8;
    *(void *)(v8 + 8) = v31;
    uint64_t v32 = v6;
    uint64_t v25 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v33, &v30, *((float *)a1 + 8));
  std::__list_imp<char *>::clear(v31);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  fst::StringFactor<int,(fst::StringType)2>::Value((uint64_t)&v35, (uint64_t)&v22);
  int v17 = v26;
  v18[0] = v18;
  v18[1] = v18;
  uint64_t v19 = 0;
  uint64_t v11 = v29;
  if (v29)
  {
    uint64_t v13 = v27;
    int v12 = v28;
    uint64_t v14 = *v28;
    *(void *)(v14 + 8) = *(void *)(v27 + 8);
    **(void **)(v13 + 8) = v14;
    uint64_t v15 = v18[0];
    *(void *)(v18[0] + 8) = v12;
    void *v12 = v15;
    v18[0] = v13;
    *(void *)(v13 + 8) = v18;
    uint64_t v19 = v11;
    uint64_t v29 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v20, &v17, 0.0);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>&,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>&,0>(a2, &v33, &v20);
  std::__list_imp<char *>::clear(v21);
  std::__list_imp<char *>::clear(v34);
  return std::__list_imp<char *>::clear(v36);
}

void sub_1B1FA70EC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v2 + 8));
  std::__list_imp<char *>::clear((void *)(v3 - 120));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>&,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_DWORD *)(a1 + 40) = *a3;
  std::list<int>::list((void *)(a1 + 48), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 72) = a3[8];
  return a1;
}

void sub_1B1FA71D0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A44508;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1FA733C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FA74C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *v17;
  if (*v17)
  {
    v15[30] = v19;
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)v16 + 24);
  std::string __p = v16;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  int v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  int v6 = v5;
  do
  {
    fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 7);
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((*((void *)v19 + 8) - v8) >> 3);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      int v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        int v14 = *v12;
        v12 += 14;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    int v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while (v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1FA76B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Expand(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1FA7738(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFst()
{
}

void sub_1B1FA783C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFst(void *a1)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Copy()
{
}

void sub_1B1FA7A20(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitStateIterator()
{
}

void sub_1B1FA7AB0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B1FA7BA0(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Init(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v2);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 48) = 0;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result == -1)
  {
    *(_DWORD *)(a1 + 156) = 0;
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    *(_DWORD *)(a1 + 156) = 1;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 0x3FFFFFFF0004, 0);
    if (*(unsigned char *)(*(void *)(a1 + 144) + 4)) {
      uint64_t v5 = result & 0x2EBC21080003 | 4;
    }
    else {
      uint64_t v5 = result & 0x2EBC21080007;
    }
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | v5;
    if (*(_DWORD *)(a1 + 156) == 2) {
      *(_DWORD *)(a1 + 160) = 0;
    }
  }
  return result;
}

void sub_1B1FA7D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0)|| *(unsigned char *)(*(void *)(a1 + 144) + 4)))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38A50;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3) {
      MEMORY[0x1B3EA8670](v3, 0x1000C4090D0E795);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((void *)a1);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41C50;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
      int v3 = *(_DWORD *)(a1 + 160);
      if (v3 != -1 && v3 <= v2) {
        int v5 = v2 + 1;
      }
      else {
        int v5 = v2;
      }
      if (v5 >= *(_DWORD *)(a1 + 164)) {
        *(_DWORD *)(a1 + 164) = v5 + 1;
      }
      *(_DWORD *)(a1 + 64) = v5;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v5) {
        *(_DWORD *)(a1 + 68) = v5 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0)
  {
    int v4 = *(_DWORD *)(a1 + 156);
    if (v4 == 1)
    {
      if (*(_DWORD *)(a1 + 160) == a2)
      {
        Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        *(_DWORD *)Mutableint State = 0;
      }
      else
      {
        int v13 = *(int **)(a1 + 144);
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v20);
        std::string __p = 0;
        int v28 = v20;
        std::list<int>::list(v29, (uint64_t)v21);
        int v30 = v22;
        int v31 = -1;
        unint64_t v14 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(v13, (int *)&__p);
        int v16 = v15;
        std::__list_imp<char *>::clear(v29);
        std::__list_imp<char *>::clear(v21);
        Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        if (v14) {
          *(_DWORD *)Mutableint State = 2139095040;
        }
        else {
          *(_DWORD *)Mutableint State = v16;
        }
      }
    }
    else if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2) {
        float v5 = 0.0;
      }
      else {
        float v5 = INFINITY;
      }
      Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      *(float *)Mutableint State = v5;
    }
    else
    {
      unint64_t v7 = *(int **)(a1 + 144);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v24);
      std::string __p = 0;
      int v28 = v24;
      std::list<int>::list(v29, (uint64_t)v25);
      int v30 = v26;
      int v31 = -1;
      unint64_t v8 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(v7, (int *)&__p);
      int v10 = v9;
      std::__list_imp<char *>::clear(v29);
      std::__list_imp<char *>::clear(v25);
      if (v8)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        }
        int v11 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)&__p);
        int v12 = (void *)fst::cerr(v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
        if (SHIBYTE(v29[0]) < 0) {
          operator delete(__p);
        }
        *(void *)(a1 + 8) |= 4uLL;
      }
      Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      *(_DWORD *)Mutableint State = v10;
    }
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  uint64_t v17 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v17 + 76) == a2) {
    uint64_t v18 = v17 + 80;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 8) + 8 * (a2 + 1);
  }
  return **(float **)v18;
}

void sub_1B1FA8318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(int *a1, int *a2)
{
  if (a2[12] != -1) {
    goto LABEL_24;
  }
  uint64_t v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  int v5 = a2[2];
  uint64_t v6 = v5 ? *((void *)a2 + 4) + 1 : 0;
  uint64_t v7 = *(_DWORD *)v4 ? *(void *)(v4 + 24) + 1 : 0;
  if (v6 != v7) {
    goto LABEL_24;
  }
  char v8 = 0;
  int v9 = (uint64_t *)(a2 + 6);
  int v10 = (uint64_t *)(v4 + 16);
  BOOL v11 = v5 && v5 == *(_DWORD *)v4;
  BOOL v12 = !v11;
  int v13 = !v12;
  while (1)
  {
    uint64_t v14 = *v9;
    uint64_t v15 = *v10;
    if ((v8 & 1) == 0 && !v13) {
      break;
    }
    if ((int *)v14 == a2 + 4) {
      goto LABEL_22;
    }
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16)) {
      goto LABEL_24;
    }
    int v9 = (uint64_t *)(v14 + 8);
    int v10 = (uint64_t *)(v15 + 8);
    char v8 = 1;
  }
  if (v5) {
    goto LABEL_24;
  }
LABEL_22:
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = a2[10];
  v29[0] = 0.0;
  v29[0] = *(float *)(v4 + 32);
  if (*(float *)__p == v29[0])
  {
    unint64_t v16 = 0;
    unsigned int v17 = *a2;
  }
  else
  {
LABEL_24:
    unsigned int v28 = -1;
    if (!fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>((unsigned int *)a2 + 2, &v27, &v28)|| (unsigned int v17 = *a2, *a2 != a2[1]))
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v18 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
      uint64_t v19 = (void *)fst::cerr(v18);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"FromGallicMapper: unrepresentable weight: ", 42);
      fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v29, v20);
      if (*FLAGS_fst_weight_parentheses)
      {
        char v30 = *FLAGS_fst_weight_parentheses;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)v29, (uint64_t)&v30, 1);
      }
      fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>((uint64_t)v29, a2 + 2);
      fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>((uint64_t)v29, (float *)a2 + 10);
      if (*FLAGS_fst_weight_parentheses)
      {
        char v30 = *(unsigned char *)(FLAGS_fst_weight_parentheses + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)v29, (uint64_t)&v30, 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for arc with ilabel = ", 23);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", olabel = ", 11);
      int v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", nextstate = ", 14);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      *((unsigned char *)a1 + 4) = 1;
      unsigned int v17 = *a2;
    }
    if (!v17 && v28 && a2[12] == -1) {
      unsigned int v17 = *a1;
    }
    unint64_t v16 = (unint64_t)v28 << 32;
  }
  return v16 | v17;
}

void sub_1B1FA8640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  BOOL v7 = v4 != -1 && v4 <= a2;
  unint64_t v43 = 0;
  (*(void (**)(uint64_t, void, unint64_t *))(*(void *)v5 + 136))(v5, (a2 - v7), &v39);
  while (1)
  {
    if (!v39)
    {
      if (v43 >= v41) {
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(unint64_t))(*(void *)v39 + 24))(v39)) {
      break;
    }
    if (v39)
    {
      uint64_t v8 = (*(uint64_t (**)(unint64_t))(*(void *)v39 + 32))(v39);
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v8 = v40 + 56 * v43;
LABEL_18:
    unint64_t v33 = *(void *)v8;
    float v34 = *(float *)(v8 + 8);
    std::list<int>::list(v36, v8 + 16);
    int v37 = *(_DWORD *)(v8 + 40);
    int v9 = *(_DWORD *)(v8 + 48);
    int v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= v9) {
      ++v9;
    }
    if (v9 >= *(_DWORD *)(a1 + 164)) {
      *(_DWORD *)(a1 + 164) = v9 + 1;
    }
    int v38 = v9;
    *(void *)&long long v32 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(*(int **)(a1 + 144), (int *)&v33);
    *((void *)&v32 + 1) = v12;
    Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v32);
    std::__list_imp<char *>::clear(v36);
    if (v39) {
      (*(void (**)(unint64_t))(*(void *)v39 + 40))(v39);
    }
    else {
      ++v43;
    }
  }
  if (v39)
  {
    (*(void (**)(unint64_t))(*(void *)v39 + 8))(v39);
    goto LABEL_32;
  }
LABEL_30:
  if (v42) {
    --*v42;
  }
LABEL_32:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (LODWORD(v33) = fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final(a1, a2), LODWORD(v39) = 2139095040, *(float *)&v33 == INFINITY))
  {
    int v14 = *(_DWORD *)(a1 + 156);
    if (v14 == 2)
    {
      uint64_t v21 = *(int **)(a1 + 144);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v26);
      unint64_t v33 = 0;
      float v34 = *(float *)&v26;
      std::list<int>::list(v36, (uint64_t)v27);
      int v37 = v28;
      int v38 = -1;
      unint64_t v22 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(v21, (int *)&v33);
      float v24 = v23;
      std::__list_imp<char *>::clear(v36);
      std::__list_imp<char *>::clear(v27);
      if (v22 || (*(float *)&unint64_t v33 = v24, LODWORD(v39) = 2139095040, v24 != INFINITY))
      {
        int v25 = *(_DWORD *)(a1 + 160);
        unint64_t v33 = v22;
        float v34 = v24;
        int v35 = v25;
        uint64_t v19 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        uint64_t v20 = &v33;
        goto LABEL_43;
      }
    }
    else if (v14 == 1)
    {
      uint64_t v15 = *(int **)(a1 + 144);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v29);
      unint64_t v33 = 0;
      float v34 = *(float *)&v29;
      std::list<int>::list(v36, (uint64_t)v30);
      int v37 = v31;
      int v38 = -1;
      unint64_t v16 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(v15, (int *)&v33);
      unint64_t v39 = v16;
      uint64_t v40 = v17;
      std::__list_imp<char *>::clear(v36);
      std::__list_imp<char *>::clear(v30);
      if (v16)
      {
        int v18 = *(_DWORD *)(a1 + 160);
        if (v18 == -1)
        {
          int v18 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v18;
          *(_DWORD *)(a1 + 164) = v18 + 1;
        }
        HIDWORD(v40) = v18;
        uint64_t v19 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        uint64_t v20 = &v39;
LABEL_43:
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v19, v20);
      }
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1FA8B4C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A41C50;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1FA8CF8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FA8DD8(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A3A108;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1B1FA8E84(_Unwind_Exception *exception_object)
{
  if (*v1) {
    fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::StateIterator(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    uint64_t v2 = result;
    if (!*(unsigned char *)(result + 44))
    {
      uint64_t result = *(void *)(result + 16);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        if (result) {
          return result;
        }
        uint64_t v1 = *(void *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      uint64_t v3 = *(int **)(v1 + 144);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v1 + 136) + 32))(&v5);
      uint64_t v8 = 0;
      int v9 = v5;
      std::list<int>::list(v10, (uint64_t)v6);
      int v11 = v7;
      int v12 = -1;
      unint64_t v4 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(v3, (int *)&v8);
      std::__list_imp<char *>::clear(v10);
      uint64_t result = (uint64_t)std::__list_imp<char *>::clear(v6);
      if (v4) {
        *(unsigned char *)(v2 + 44) = 1;
      }
    }
  }
  return result;
}

void sub_1B1FA8FC4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A3A108;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A3A108;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Done(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
      return *(unsigned char *)(a1 + 44) == 0;
    }
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(unsigned char *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Next(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 40);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if ((result & 1) == 0)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
LABEL_7:
        return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 44)) {
    *(unsigned char *)(a1 + 44) = 0;
  }
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  else {
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A44508;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A416D0;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3E248;
  uint64_t v2 = a1[20];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FA94FC(_Unwind_Exception *a1)
{
  fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(v1);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1FA9584(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 52);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1FA96B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v15 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(v14);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Init()
{
}

void sub_1B1FA9844(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C4093837F09);
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~ImplToFst((void *)(v2 - 48));
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(void *a1)
{
  fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_1B1FA9A10(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40BF12C28CLL);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Expand(uint64_t a1, int a2)
{
  fst::ArcIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ArcIterator(&v8, *(void *)(a1 + 160), a2);
  unint64_t v4 = v8;
  for (unint64_t i = v9; ; unint64_t i = ++v9)
  {
    uint64_t v6 = *((void *)v4 + 3);
    if (i >= (*((void *)v4 + 4) - v6) >> 4) {
      break;
    }
    Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, (_OWORD *)(v6 + 16 * i));
    unint64_t v4 = v8;
  }
  --*((_DWORD *)v4 + 13);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1FA9AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 24))();
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeFinal(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 32))();
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFst()
{
}

void sub_1B1FA9BC8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFst(void *a1)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Start(*(void *)(a1 + 8));
}

uint64_t *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final(*(void *)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Copy()
{
}

void sub_1B1FA9DC0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1FA9EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1FA9FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitStateIterator()
{
}

void sub_1B1FAA048(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::IsMemoryMapped()
{
  return 0;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B1FAA128(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Init(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v2);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 48) = 0;
  }
  unint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if (result == -1)
  {
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    unint64_t v5 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 0x3FFFFFFF0004, 0);
    unint64_t result = fst::ProjectProperties(v5, 1);
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | result & 0x3FFCFFFF0007;
    if (*(_DWORD *)(a1 + 156) == 2) {
      *(_DWORD *)(a1 + 160) = 0;
    }
  }
  return result;
}

void sub_1B1FAA2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0)|| (fst::ProjectProperties(0, 1) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FFF0;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38EB0;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FFF0;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38EB0;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B1FAA4D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  unint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FFF0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B1FAA69C(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;
  std::__list_imp<char *>::clear(v2);
  int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::Clear(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2 != a1[1])
  {
    unint64_t v3 = 0;
    uint64_t v2 = a1[1];
    do
    {
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Destroy(*(void *)(v2 + 8 * v3++));
      uint64_t v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<char *>::clear(a1 + 4);
}

void fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Destroy(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (void **)(a1 + 80);
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(a1 + 40));
    std::__list_imp<char *>::clear((void *)(a1 + 8));
    operator delete((void *)a1);
  }
}

void std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__base_destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  unint64_t v3 = result;
  for (uint64_t i = result[1]; i != a2; i -= 80)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(i - 32));
    unint64_t result = std::__list_imp<char *>::clear((void *)(i - 64));
  }
  v3[1] = a2;
  return result;
}

void std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        std::__list_imp<char *>::clear(v3 + 3);
        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38EB0;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    unint64_t v3 = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  uint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~FstImpl((uint64_t)a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38900;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3) {
      MEMORY[0x1B3EA8670](v3, 0xC400A2AC0F1);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
      int v3 = *(_DWORD *)(a1 + 160);
      if (v3 != -1 && v3 <= v2) {
        int v5 = v2 + 1;
      }
      else {
        int v5 = v2;
      }
      if (v5 >= *(_DWORD *)(a1 + 164)) {
        *(_DWORD *)(a1 + 164) = v5 + 1;
      }
      *(_DWORD *)(a1 + 64) = v5;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v5) {
        *(_DWORD *)(a1 + 68) = v5 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

uint64_t *fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasFinal(a1, a2) & 1) == 0)
  {
    int v6 = *(_DWORD *)(a1 + 156);
    if (v6 == 1)
    {
      int v8 = *(_DWORD *)(a1 + 160);
      if (v8 != a2)
      {
        BOOL v21 = v8 != -1 && v8 <= a2;
        float v22 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v21));
        uint64_t v47 = 0;
        float v48 = v22;
        int v49 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()((uint64_t)&v47, (uint64_t)&v52);
        if (v52)
        {
          int v25 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
          int v31 = *v25;
          float v23 = v32;
          std::list<int>::list(v32, (uint64_t)(v25 + 2));
          int v33 = v25[8];
          float v24 = v34;
          std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v34, (uint64_t)(v25 + 10));
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v31);
        }
        else
        {
          int v35 = v53;
          float v23 = v36;
          std::list<int>::list(v36, (uint64_t)v54);
          int v37 = v55;
          float v24 = v38;
          std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v38, (uint64_t)v56);
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v35);
        }
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v24);
        std::__list_imp<char *>::clear(v23);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v56);
        uint64_t v19 = v54;
        goto LABEL_35;
      }
      unint64_t v9 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
      int v39 = *v9;
      int v10 = v40;
      std::list<int>::list(v40, (uint64_t)(v9 + 2));
      int v41 = v9[8];
      int v11 = v42;
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v42, (uint64_t)(v9 + 10));
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v39);
    }
    else
    {
      if (v6 != 2)
      {
        int v12 = *(_DWORD *)(a1 + 160);
        BOOL v14 = v12 != -1 && v12 <= a2;
        float v15 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v14));
        uint64_t v47 = 0;
        float v48 = v15;
        int v49 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()((uint64_t)&v47, (uint64_t)&v52);
        if (v52)
        {
          if (FLAGS_fst_error_fatal) {
            std::string::basic_string[abi:ne180100]<0>(&v47, "FATAL");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(&v47, "ERROR");
          }
          unint64_t v16 = fst::LogMessage::LogMessage((fst *)&v51, (uint64_t)&v47);
          uint64_t v17 = (void *)fst::cerr(v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v51);
          if (v50 < 0) {
            operator delete(v47);
          }
          *(void *)(a1 + 8) |= 4uLL;
        }
        int v43 = v53;
        std::list<int>::list(v44, (uint64_t)v54);
        int v45 = v55;
        std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v46, (uint64_t)v56);
        fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v43);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v46);
        std::__list_imp<char *>::clear(v44);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v56);
        uint64_t v19 = v54;
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 160) == a2) {
        uint64_t v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
      }
      else {
        uint64_t v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
      }
      int v18 = v7;
      int v27 = *v7;
      int v10 = v28;
      std::list<int>::list(v28, (uint64_t)(v7 + 2));
      int v29 = v18[8];
      int v11 = v30;
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v30, (uint64_t)(v18 + 10));
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v27);
    }
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v11);
    uint64_t v19 = v10;
LABEL_35:
    std::__list_imp<char *>::clear(v19);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final(a1, a2, a3);
}

void sub_1B1FAAEB4(_Unwind_Exception *a1)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v1 - 145));
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 - 96));
  std::__list_imp<char *>::clear((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasFinal(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    int v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    unint64_t v4 = a2 + 1;
    uint64_t v6 = v2 + 8;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v4 >= (*(void *)(v6 + 8) - v5) >> 3) {
      return 0;
    }
    int v3 = (uint64_t *)(v5 + 8 * v4);
  }
  uint64_t v7 = *v3;
  if (!v7) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 104);
  if ((v8 & 1) == 0) {
    return 0;
  }
  *(_DWORD *)(v7 + 104) = v8 | 8;
  return 1;
}

void *fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 12) == -1)
  {
    float v28 = 0.0;
    float v28 = *(float *)(a1 + 8);
    v27[16] = 2139095040;
    if (v28 == INFINITY)
    {
      int v11 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
      int v21 = *v11;
      uint64_t v6 = v22;
      std::list<int>::list(v22, (uint64_t)(v11 + 2));
      int v23 = v11[8];
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v24, (uint64_t)(v11 + 10));
      fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc(a2, 0, 0, &v21, -1);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v24);
      return std::__list_imp<char *>::clear(v6);
    }
    uint64_t v7 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    int v25 = *v7;
    uint64_t v6 = v26;
    std::list<int>::list(v26, (uint64_t)(v7 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight((uint64_t)v27, &v25, *(float *)(a1 + 8));
    int v8 = (uint64_t *)v27;
    fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc(a2, 0, 0, v27, -1);
    goto LABEL_7;
  }
  int v5 = *(_DWORD *)a1;
  int v4 = *(_DWORD *)(a1 + 4);
  if (!v4)
  {
    unint64_t v9 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    int v18 = *v9;
    uint64_t v6 = v19;
    std::list<int>::list(v19, (uint64_t)(v9 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight((uint64_t)v20, &v18, *(float *)(a1 + 8));
    int v10 = *(_DWORD *)(a1 + 12);
    int v8 = (uint64_t *)v20;
    fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc(a2, v5, v5, v20, v10);
LABEL_7:
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v8 + 5);
    std::__list_imp<char *>::clear(v8 + 1);
    return std::__list_imp<char *>::clear(v6);
  }
  fst::StringWeight<int,(fst::StringType)2>::StringWeight((uint64_t)&v13, v4);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight((uint64_t)&v15, &v13, *(float *)(a1 + 8));
  fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc(a2, v5, v5, &v15, *(_DWORD *)(a1 + 12));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v17);
  std::__list_imp<char *>::clear(v16);
  uint64_t v6 = &v14;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1B1FAB1A8(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  int v6 = *a3;
  std::list<int>::list(v7, (uint64_t)(a3 + 2));
  int v8 = a3[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v9, (uint64_t)(a3 + 10));
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(MutableState, (uint64_t)&v6);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v9);
  unint64_t result = std::__list_imp<char *>::clear(v7);
  *((_DWORD *)MutableState + 26) |= 9u;
  return result;
}

void sub_1B1FAB2B4(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One(void)::one;
}

void sub_1B1FAB35C(_Unwind_Exception *a1)
{
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero(void)::zero;
}

void sub_1B1FAB418(_Unwind_Exception *a1)
{
}

uint64_t *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v3 + 76) == a2)
  {
    int v4 = (_DWORD **)(v3 + 80);
  }
  else
  {
    unint64_t v5 = a2 + 1;
    uint64_t v7 = v3 + 8;
    uint64_t v6 = *(void *)(v3 + 8);
    if (v5 >= (*(void *)(v7 + 8) - v6) >> 3)
    {
      int v8 = 0;
      return fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final(v8, a3);
    }
    int v4 = (_DWORD **)(v6 + 8 * v5);
  }
  int v8 = *v4;
  return fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final(v8, a3);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v8, &v6, a3);
  fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::UnionWeight(a1, &v8);
  std::__list_imp<char *>::clear(v9);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1B1FAB51C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v2 + 8));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::UnionWeight(uint64_t a1, int *a2)
{
  *(_DWORD *)a1 = *a2;
  int v4 = a2 + 2;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  *(void *)(a1 + 40) = a1 + 40;
  *(void *)(a1 + 48) = a1 + 40;
  *(void *)(a1 + 56) = 0;
  uint64_t v5 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
  int v6 = *a2;
  if (*a2) {
    uint64_t v7 = *((void *)a2 + 3) + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (*(_DWORD *)v5) {
    uint64_t v8 = *(void *)(v5 + 24) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 == v8)
  {
    char v9 = 0;
    int v10 = (uint64_t *)(a2 + 4);
    int v11 = (uint64_t *)(v5 + 16);
    if (v6) {
      BOOL v12 = v6 == *(_DWORD *)v5;
    }
    else {
      BOOL v12 = 0;
    }
    int v13 = !v12;
    int v14 = v13 ^ 1;
    while (1)
    {
      uint64_t v15 = *v10;
      uint64_t v16 = *v11;
      if ((v9 & 1) == 0 && !v14) {
        break;
      }
      if ((int *)v15 == v4) {
        goto LABEL_21;
      }
      if (*(_DWORD *)(v15 + 16) != *(_DWORD *)(v16 + 16)) {
        return a1;
      }
      int v10 = (uint64_t *)(v15 + 8);
      int v11 = (uint64_t *)(v16 + 8);
      char v9 = 1;
    }
    if (v6) {
      return a1;
    }
LABEL_21:
    if (*((float *)a2 + 8) == *(float *)(v5 + 32))
    {
      uint64_t v17 = std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>(a1 + 40, 0, 0, a2);
      uint64_t v18 = *(void *)(a1 + 40);
      void *v17 = v18;
      v17[1] = a1 + 40;
      *(void *)(v18 + 8) = v17;
      *(void *)(a1 + 40) = v17;
      ++*(void *)(a1 + 56);
    }
  }
  return a1;
}

void sub_1B1FAB68C(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight(void)::no_weight;
}

void sub_1B1FAB744(_Unwind_Exception *a1)
{
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::NoWeight()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1B1FAB818(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::NoWeight()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1B1FAB918(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

void *std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = operator new(0x38uLL);
  *uint64_t v7 = a2;
  v7[1] = a3;
  *((_DWORD *)v7 + 4) = *a4;
  std::list<int>::list(v7 + 3, (uint64_t)(a4 + 2));
  *((_DWORD *)v7 + 12) = a4[8];
  return v7;
}

void sub_1B1FAB9C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc(uint64_t a1, int a2, int a3, _DWORD *a4, int a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = *a4;
  std::list<int>::list((void *)(a1 + 16), (uint64_t)(a4 + 2));
  *(_DWORD *)(a1 + 40) = a4[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(a4 + 10));
  *(_DWORD *)(a1 + 72) = a5;
  return a1;
}

void sub_1B1FABA3C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_DWORD *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  Mutableint State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::GetMutableState(a1, a2);
  int v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = MutableState[26];
    if ((v5 & 4) == 0)
    {
      MutableState[26] = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 11) - *((void *)MutableState + 10) + *(void *)(a1 + 112) + 112;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

uint64_t *fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(uint64_t *result, uint64_t a2)
{
  *(_DWORD *)unint64_t result = *(_DWORD *)a2;
  if (result != (uint64_t *)a2)
  {
    uint64_t v3 = result;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(result + 1, *(void *)(a2 + 16), a2 + 8);
    *((_DWORD *)v3 + 8) = *(_DWORD *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 48);
    return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(v3 + 5, v4, a2 + 40);
  }
  return result;
}

_DWORD *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(_DWORD **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 76) = a2;
      Mutableint State = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 26) |= 4u;
      std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::reserve((uint64_t *)MutableState + 10, 0x80uLL);
      return *(_DWORD **)(a1 + 80);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    if (!*(_DWORD *)(v5 + 108))
    {
      *(_DWORD *)(a1 + 76) = a2;
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Reset(v5);
      unint64_t result = *(_DWORD **)(a1 + 80);
      result[26] |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 104) &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GC(uint64_t a1, _DWORD *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      char v9 = (void *)fst::cerr(v8);
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      int v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      BOOL v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache unint64_t size = ", 15);
      int v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      int v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      Mutableint State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !MutableState[27])
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = MutableState[26];
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 11) - *((void *)MutableState + 10) + 112;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = MutableState[26];
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      MutableState[26] &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        int v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        float v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      int v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      char v30 = (void *)fst::cerr(v29);
      int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      long long v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      int v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache unint64_t size = ", 15);
      float v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      int v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      int v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B1FAC000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    uint64_t v13 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v13);
  }
  else
  {
    uint64_t v8 = *(void **)(v6 + 8 * a2);
    if (v8) {
      return v8;
    }
  }
  uint64_t v8 = operator new(0x70uLL);
  *(void *)(*(void *)(a1 + 8) + 8 * v4) = fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheState((uint64_t)v8);
  if (*(unsigned char *)a1)
  {
    char v9 = operator new(0x18uLL);
    void v9[4] = a2;
    uint64_t v11 = *(void *)(a1 + 32);
    int v10 = (void *)(a1 + 32);
    *(void *)char v9 = v11;
    *((void *)v9 + 1) = v10;
    *(void *)(v11 + 8) = v9;
    void *v10 = v9;
    ++v10[2];
  }
  return v8;
}

void *fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Reset(uint64_t a1)
{
  uint64_t v2 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  *(_DWORD *)a1 = *(_DWORD *)v2;
  if (v2 != a1)
  {
    uint64_t v3 = v2;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(void *)(v2 + 16), v2 + 8);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 + 32);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>((uint64_t *)(a1 + 40), *(void *)(v3 + 48), v3 + 40);
  }
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v5 = (void *)(a1 + 80);
  uint64_t v4 = v6;
  void v5[3] = 0;
  *(v5 - 2) = 0;
  *(v5 - 1) = 0;
  return std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__base_destruct_at_end[abi:ne180100](v5, v4);
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheState(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  *(_DWORD *)a1 = *v2;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)(v2 + 2));
  *(_DWORD *)(a1 + 32) = v2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 40), (uint64_t)(v2 + 10));
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return a1;
}

void sub_1B1FAC210(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void **std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t result = (void **)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 80 * v6;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B1FAC2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 80;
      std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>(a1, v7 - 80, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 80;
      *((void *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B1FAC408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  std::list<int>::list((void *)(a2 + 16), a3 + 16);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  uint64_t result = std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a2 + 48), a3 + 48);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a3 + 72);
  return result;
}

void sub_1B1FAC484(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  while (v1 != v2)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 + 48));
    uint64_t result = std::__list_imp<char *>::clear((void *)(v1 + 16));
    v1 += 80;
  }
  return result;
}

void **std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 80;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v2 - 32));
      uint64_t result = std::__list_imp<char *>::clear((void *)(v2 - 64));
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (a1 == a2)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  }
  else
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(void *)(a2 + 16), a2 + 8);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>((uint64_t *)(a1 + 40), *(void *)(a2 + 48), a2 + 40);
  }
  return a1;
}

uint64_t *std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      *((_DWORD *)v6 + 4) = *(_DWORD *)(v4 + 16);
      if (v6 != (uint64_t *)v4) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v6 + 3, *(void *)(v4 + 32), v4 + 24);
      }
      *((_DWORD *)v6 + 12) = *(_DWORD *)(v4 + 48);
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t v6 = (uint64_t *)v6[1];
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
  {
    return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>((uint64_t)a1, a1, v4, a3);
  }
  else
  {
    return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::erase((uint64_t)a1, v6, a1);
  }
}

uint64_t *std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>(a1, 0, 0, (_DWORD *)(a3 + 16));
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = (uint64_t)v8;
      do
      {
        uint64_t v8 = std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>(a1, v12, 0, (_DWORD *)(v10 + 16));
        *(void *)(v12 + 8) = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    void *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1B1FAC7B8(void *a1)
{
  __cxa_begin_catch(a1);
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(v1);
  __cxa_rethrow();
}

void sub_1B1FAC7CC(_Unwind_Exception *a1)
{
}

void *std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::erase(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = *a3;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8);
    **(void **)(v6 + 8) = v7;
    do
    {
      uint64_t v8 = (void *)v4[1];
      --*(void *)(a1 + 16);
      std::__list_imp<char *>::clear(v4 + 3);
      operator delete(v4);
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::Delete(void *a1)
{
  int v1 = *(_DWORD *)(a1[7] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 19))
  {
    *((_DWORD *)a1 + 19) = -1;
    a1[10] = 0;
  }
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::Delete(a1);
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::Delete(void *a1)
{
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Destroy(*(void *)(a1[1] + 8 * *(int *)(a1[7] + 16)));
  uint64_t v2 = a1[6];
  *(void *)(a1[1] + 8 * *(int *)(a1[7] + 16)) = 0;
  uint64_t v3 = (uint64_t *)a1[7];
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  *(void *)(v5 + 8) = v4;
  *(void *)v3[1] = v5;
  a1[6] = v2 - 1;
  a1[7] = v4;
  operator delete(v3);
}

uint64_t *std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v5 = std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>((uint64_t)a1, 0, 0, (_DWORD *)(i + 16));
    uint64_t v6 = *a1;
    *uint64_t v5 = *a1;
    v5[1] = a1;
    *(void *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_1B1FAC980(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::One()
{
  {
    operator new();
  }
  return fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::One(void)::one;
}

void sub_1B1FACA5C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C404C081FCELL);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 40), (uint64_t)(a2 + 10));
  return a1;
}

void sub_1B1FACAFC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero()
{
  {
    operator new();
  }
  return fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero(void)::zero;
}

void sub_1B1FACBD8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C404C081FCELL);
  _Unwind_Resume(a1);
}

uint64_t *fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *a1;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)(a1 + 2));
  *(_DWORD *)(a2 + 32) = a1[8];
  return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a2 + 40), (uint64_t)(a1 + 10));
}

void sub_1B1FACC78(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*(void *)v5 + 88) - *(void *)(*(void *)v5 + 80)) >> 4);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    uint64_t v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    unint64_t v4 = a2 + 1;
    uint64_t v6 = v2 + 8;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v4 >= (*(void *)(v6 + 8) - v5) >> 3) {
      return 0;
    }
    uint64_t v3 = (uint64_t *)(v5 + 8 * v4);
  }
  uint64_t v7 = *v3;
  if (!v7) {
    return 0;
  }
  int v8 = *(_DWORD *)(v7 + 104);
  if ((v8 & 2) == 0) {
    return 0;
  }
  *(_DWORD *)(v7 + 104) = v8 | 8;
  return 1;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs(a1, a2);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  BOOL v7 = v4 != -1 && v4 <= a2;
  unint64_t v38 = 0;
  (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v5 + 136))(v5, (a2 - v7), &v34);
  while (1)
  {
    if (!v34)
    {
      if (v38 >= v36) {
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v34 + 24))(v34)) {
      break;
    }
    if (v34)
    {
      int v8 = (long long *)(*(uint64_t (**)(void))(*(void *)v34 + 32))();
      goto LABEL_18;
    }
LABEL_17:
    int v8 = (long long *)(v35 + 16 * v38);
LABEL_18:
    long long v46 = *v8;
    int v9 = HIDWORD(v46);
    int v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= SHIDWORD(v46)) {
      int v9 = HIDWORD(v46) + 1;
    }
    if (v9 >= *(_DWORD *)(a1 + 164)) {
      *(_DWORD *)(a1 + 164) = v9 + 1;
    }
    HIDWORD(v46) = v9;
    fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()((uint64_t)&v46, (uint64_t)&v40);
    Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(MutableState, (uint64_t)&v40);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
    std::__list_imp<char *>::clear(v42);
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 40))(v34);
    }
    else {
      ++v38;
    }
  }
  if (v34)
  {
    (*(void (**)(void))(*(void *)v34 + 8))();
    goto LABEL_32;
  }
LABEL_30:
  if (v37) {
    --*v37;
  }
LABEL_32:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasFinal(a1, a2) & 1) == 0|| (fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final(a1, a2, (uint64_t)&v40), uint64_t v13 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero(), v14 = fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)&v40, v13), std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v43), std::__list_imp<char *>::clear(&v41), v14))
  {
    int v15 = *(_DWORD *)(a1 + 156);
    if (v15 == 1)
    {
      int v24 = *(_DWORD *)(a1 + 160);
      BOOL v26 = v24 != -1 && v24 <= a2;
      *(float *)&unsigned int v27 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v26));
      uint64_t v34 = 0;
      unint64_t v35 = v27 | 0xFFFFFFFF00000000;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()((uint64_t)&v34, (uint64_t)&v40);
      if (v40)
      {
        int v28 = *(_DWORD *)(a1 + 160);
        if (v28 == -1)
        {
          int v28 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v28;
          *(_DWORD *)(a1 + 164) = v28 + 1;
        }
        int v45 = v28;
        int v29 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(v29, (uint64_t)&v40);
      }
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
      goto LABEL_58;
    }
    if (v15 == 2)
    {
      int v16 = *(_DWORD *)(a1 + 160);
      BOOL v18 = v16 != -1 && v16 <= a2;
      *(float *)&unsigned int v19 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v18));
      uint64_t v34 = 0;
      unint64_t v35 = v19 | 0xFFFFFFFF00000000;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()((uint64_t)&v34, (uint64_t)&v40);
      int v20 = v40;
      int v21 = HIDWORD(v40);
      if (v40)
      {
LABEL_45:
        int v30 = v41;
        std::list<int>::list(v31, (uint64_t)v42);
        int v32 = v43;
        std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v33, (uint64_t)v44);
        fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)&v34, v20, v21, &v30, *(_DWORD *)(a1 + 160));
        unint64_t v23 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(v23, (uint64_t)&v34);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v39);
        std::__list_imp<char *>::clear(&v36);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v33);
        std::__list_imp<char *>::clear(v31);
      }
      else
      {
        uint64_t v22 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
        if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)&v41, v22) & 1) == 0)
        {
          int v20 = v40;
          int v21 = HIDWORD(v40);
          goto LABEL_45;
        }
      }
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
LABEL_58:
      std::__list_imp<char *>::clear(v42);
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs(a1, a2);
}

void sub_1B1FAD1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v34);
  std::__list_imp<char *>::clear(v33);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&a33);
  std::__list_imp<char *>::clear(&a29);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 10);
  uint64_t v6 = *((void *)MutableState + 11) - v5;
  if (v6)
  {
    unint64_t v7 = v6 / 80;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    int v9 = (int *)(v5 + 72);
    do
    {
      int v11 = *v9;
      v9 += 20;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  MutableState[26] |= 0xAu;
}

uint64_t fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(int *a1, uint64_t a2)
{
  float v2 = *(float *)a1;
  if (!*a1)
  {
    uint64_t v3 = 0;
    float v5 = *((float *)a1 + 8);
    if (v5 == -INFINITY) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v3 = 0;
  if (*((void *)a1 + 3)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = LODWORD(v2) == -2;
  }
  float v5 = *((float *)a1 + 8);
  if (!v4 && v5 != -INFINITY) {
LABEL_9:
  }
    uint64_t v3 = *((void *)a1 + 7) + 1;
LABEL_10:
  if (!*(_DWORD *)a2)
  {
    uint64_t v6 = 0;
    if (*(float *)(a2 + 32) == -INFINITY) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v6 = 0;
  if (*(void *)(a2 + 24)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(_DWORD *)a2 == -2;
  }
  if (!v7 && *(float *)(a2 + 32) != -INFINITY) {
LABEL_18:
  }
    uint64_t v6 = *(void *)(a2 + 56) + 1;
LABEL_19:
  if (v3 == v6)
  {
    char v8 = 0;
    int v9 = (uint64_t *)(a1 + 12);
    int v10 = (uint64_t *)(a2 + 48);
    BOOL v12 = v2 == NAN && *((void *)a1 + 3) == 0 || v5 == -INFINITY;
LABEL_26:
    uint64_t v13 = *v9;
    uint64_t v14 = *v10;
    while (1)
    {
      char v15 = v8;
      if (v8)
      {
        int v16 = (int *)(v13 + 16);
        if ((int *)v13 == a1 + 10) {
          return 1;
        }
      }
      else if (v2 == 0.0)
      {
        uint64_t v17 = 1;
        int v16 = a1;
        if (v5 == -INFINITY) {
          return v17;
        }
      }
      else
      {
        int v16 = a1;
        if (v12) {
          return 1;
        }
      }
      if (v15) {
        uint64_t v18 = v14 + 16;
      }
      else {
        uint64_t v18 = a2;
      }
      int v19 = *v16;
      if (*v16) {
        uint64_t v20 = *((void *)v16 + 3) + 1;
      }
      else {
        uint64_t v20 = 0;
      }
      if (*(_DWORD *)v18) {
        uint64_t v21 = *(void *)(v18 + 24) + 1;
      }
      else {
        uint64_t v21 = 0;
      }
      if (v20 != v21) {
        return 0;
      }
      char v22 = 0;
      unint64_t v23 = (uint64_t *)(v16 + 4);
      int v24 = (uint64_t *)(v18 + 16);
      BOOL v25 = v19 && v19 == *(_DWORD *)v18;
      BOOL v26 = !v25;
      while (1)
      {
        uint64_t v27 = *v23;
        uint64_t v28 = *v24;
        if ((v22 & 1) == 0 && v26) {
          break;
        }
        if ((int *)v27 == v16 + 2) {
          goto LABEL_56;
        }
        if (*(_DWORD *)(v27 + 16) != *(_DWORD *)(v28 + 16)) {
          return 0;
        }
        unint64_t v23 = (uint64_t *)(v27 + 8);
        int v24 = (uint64_t *)(v28 + 8);
        char v22 = 1;
      }
      if (v19) {
        return 0;
      }
LABEL_56:
      if (*((float *)v16 + 8) != *(float *)(v18 + 32)) {
        return 0;
      }
      char v8 = 1;
      if (v15)
      {
        int v9 = (uint64_t *)(v13 + 8);
        int v10 = (uint64_t *)(v14 + 8);
        goto LABEL_26;
      }
    }
  }
  return 0;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 104) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 88) - *(void *)(a2 + 80) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GC(a1, (_DWORD *)a2, 0, 0.666);
      }
    }
  }
}

void *fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs(void *result)
{
  uint64_t v1 = result[10];
  uint64_t v2 = result[11] - v1;
  if (v2)
  {
    unint64_t v3 = v2 / 80;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    unint64_t v4 = (_DWORD *)(v1 + 4);
    do
    {
      if (!*(v4 - 1)) {
        ++result[8];
      }
      if (!*v4) {
        ++result[9];
      }
      v4 += 20;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[12];
  uint64_t v3 = (uint64_t)(a1 + 12);
  unint64_t v5 = *(void *)(v3 - 8);
  if (v5 >= v4)
  {
    uint64_t result = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>(a1 + 10, a2);
  }
  else
  {
    std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>(v3, *(void *)(v3 - 8), a2);
    uint64_t result = v5 + 80;
    a1[11] = v5 + 80;
  }
  a1[11] = result;
  return result;
}

void sub_1B1FAD6A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    BOOL v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v6);
  }
  else {
    BOOL v7 = 0;
  }
  int v10 = v7;
  int v11 = &v7[80 * v3];
  uint64_t v13 = &v7[80 * v6];
  std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  BOOL v12 = v11 + 80;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1FAD7AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 64);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 72);
}

unint64_t fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      int v9 = (void *)fst::cerr(v8);
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(a1, a2, a3, 1);
  }
}

void sub_1B1FAD9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7 = a1;
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (!a4
    || (uint64_t v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    unint64_t v9 = v8 & 7;
    unint64_t v80 = v9;
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      v76[0] = 0;
      v76[1] = (uint64_t)&v80;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>(v7, (uint64_t)&v74);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      uint64_t v12 = a2 & 0xC0000;
      uint64_t v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v13 = 0x10425A850000;
      }
      unint64_t v14 = v9 | v13;
      uint64_t v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v14 |= 0x100000uLL;
      }
      unint64_t v80 = v14;
      memset(&v73, 0, sizeof(v73));
      memset(&v72, 0, sizeof(v72));
      unsigned int v71 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 128))(v7, &v69);
      int v63 = 0;
      uint64_t v62 = v7;
LABEL_12:
      if (v69)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v69 + 16))(v69))
        {
          if (v69)
          {
            uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v69 + 24))();
LABEL_18:
            std::vector<unsigned int>::size_type v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v16);
            uint64_t v18 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
            LODWORD(v75) = *v18;
            std::list<int>::list(v76, (uint64_t)(v18 + 2));
            int v77 = v18[8];
            v78[0] = (uint64_t)v78;
            v78[1] = (uint64_t)v78;
            v78[2] = 0;
            v73.__end_ = v73.__begin_;
            v72.__end_ = v72.__begin_;
            if (v12) {
              std::vector<int>::reserve(&v73, v17);
            }
            if (v15) {
              std::vector<int>::reserve(&v72, v17);
            }
            unint64_t v67 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v7 + 136))(v7, v16, &v64);
            char v19 = 1;
            while (1)
            {
              if (v64)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v64 + 24))(v64))
                {
                  if (v64)
                  {
                    (*(void (**)(void))(*(void *)v64 + 8))();
                  }
                  else
                  {
LABEL_94:
                    if (v66) {
                      --*v66;
                    }
                  }
                  uint64_t v7 = v62;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v73.__end_ - (char *)v73.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    unint64_t v47 = v73.__end_ - v73.__begin_;
                    if (v47 <= 2) {
                      unint64_t v47 = 2;
                    }
                    std::vector<unsigned int>::pointer v48 = v73.__begin_ + 1;
                    unsigned int v49 = *v73.__begin_;
                    unint64_t v50 = v47 - 1;
                    while (1)
                    {
                      unsigned int v52 = *v48++;
                      unsigned int v51 = v52;
                      if (v52 == v49) {
                        break;
                      }
                      unsigned int v49 = v51;
                      if (!--v50) {
                        goto LABEL_103;
                      }
                    }
                    unint64_t v80 = v80 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_114:
                      if (v63 >= 1) {
                        unint64_t v80 = v80 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v62 + 32))(&v64, v62, v16);
                      uint64_t v59 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
                      if (fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)&v64, v59))
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v62 + 40))(v62, v16) != 1) {
                          unint64_t v80 = v80 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                        }
                      }
                      else
                      {
                        uint64_t v60 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
                        if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)&v64, v60) & 1) == 0)unint64_t v80 = v80 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000; {
                        ++v63;
                        }
                      }
                      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v68);
                      std::__list_imp<char *>::clear(v65);
                      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v78);
                      std::__list_imp<char *>::clear(v76);
                      if (v69) {
                        (*(void (**)(uint64_t))(*(void *)v69 + 32))(v69);
                      }
                      else {
                        ++v71;
                      }
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_103:
                    if (!v15) {
                      goto LABEL_114;
                    }
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v72.__end_ - (char *)v72.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    unint64_t v53 = v72.__end_ - v72.__begin_;
                    if (v53 <= 2) {
                      unint64_t v53 = 2;
                    }
                    std::vector<unsigned int>::pointer v54 = v72.__begin_ + 1;
                    unsigned int v55 = *v72.__begin_;
                    unint64_t v56 = v53 - 1;
                    while (1)
                    {
                      unsigned int v58 = *v54++;
                      unsigned int v57 = v58;
                      if (v58 == v55) {
                        break;
                      }
                      unsigned int v55 = v57;
                      if (!--v56) {
                        goto LABEL_114;
                      }
                    }
                    unint64_t v80 = v80 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_114;
                }
                if (v64)
                {
                  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v64 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v67 >= v65[1])
              {
                goto LABEL_94;
              }
              uint64_t v20 = v65[0] + 80 * v67;
LABEL_29:
              int v21 = *(_DWORD *)v20;
              int v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
              {
                unint64_t v80 = v80 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                int v22 = *(_DWORD *)(v20 + 4);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (!v22) {
                    goto LABEL_39;
                  }
                  goto LABEL_35;
                }
                unint64_t v23 = v80;
              }
              else
              {
                unint64_t v23 = v80 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              unint64_t v80 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (!v22)
              {
LABEL_39:
                unint64_t v80 = v80 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
                if (v19) {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
LABEL_35:
              if (v19) {
                goto LABEL_44;
              }
LABEL_40:
              if (v21 < (int)v74) {
                unint64_t v80 = v80 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              }
              if (v22 < SHIDWORD(v74)) {
                unint64_t v80 = v80 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
              }
LABEL_44:
              uint64_t v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
              if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)(v20 + 8), v24) & 1) == 0)
              {
                uint64_t v25 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
                if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)(v20 + 8), v25) & 1) == 0)unint64_t v80 = v80 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000; {
              }
                }
              int v26 = *(_DWORD *)(v20 + 72);
              if (v26 <= (int)v16) {
                unint64_t v80 = v80 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              }
              if (v26 != v16 + 1) {
                unint64_t v80 = v80 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              uint64_t v74 = *(void *)v20;
              LODWORD(v75) = *(_DWORD *)(v20 + 8);
              if (&v74 != (uint64_t *)v20)
              {
                std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v76, *(void *)(v20 + 24), v20 + 16);
                int v77 = *(_DWORD *)(v20 + 40);
                std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(v78, *(void *)(v20 + 56), v20 + 48);
                int v26 = *(_DWORD *)(v20 + 72);
              }
              int v79 = v26;
              if (v12)
              {
                std::vector<unsigned int>::pointer end = v73.__end_;
                if (v73.__end_ >= v73.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer begin = v73.__begin_;
                  int64_t v30 = v73.__end_ - v73.__begin_;
                  unint64_t v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62) {
                    goto LABEL_137;
                  }
                  int64_t v32 = (char *)v73.__end_cap_.__value_ - (char *)v73.__begin_;
                  if (((char *)v73.__end_cap_.__value_ - (char *)v73.__begin_) >> 1 > v31) {
                    unint64_t v31 = v32 >> 1;
                  }
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v33 = v31;
                  }
                  if (v33)
                  {
                    uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v73.__end_cap_, v33);
                    std::vector<unsigned int>::pointer begin = v73.__begin_;
                    std::vector<unsigned int>::pointer end = v73.__end_;
                  }
                  else
                  {
                    uint64_t v34 = 0;
                  }
                  unint64_t v35 = (unsigned int *)&v34[4 * v30];
                  *unint64_t v35 = *(_DWORD *)v20;
                  uint64_t v28 = v35 + 1;
                  while (end != begin)
                  {
                    unsigned int v36 = *--end;
                    *--unint64_t v35 = v36;
                  }
                  v73.__begin_ = v35;
                  v73.__end_ = v28;
                  v73.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *v73.__end_ = *(_DWORD *)v20;
                  uint64_t v28 = end + 1;
                }
                v73.__end_ = v28;
              }
              if (v15)
              {
                std::vector<unsigned int>::pointer v37 = v72.__end_;
                if (v72.__end_ >= v72.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer v39 = v72.__begin_;
                  int64_t v40 = v72.__end_ - v72.__begin_;
                  unint64_t v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 62) {
LABEL_137:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  int64_t v42 = (char *)v72.__end_cap_.__value_ - (char *)v72.__begin_;
                  if (((char *)v72.__end_cap_.__value_ - (char *)v72.__begin_) >> 1 > v41) {
                    unint64_t v41 = v42 >> 1;
                  }
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v43 = v41;
                  }
                  if (v43)
                  {
                    float v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v72.__end_cap_, v43);
                    std::vector<unsigned int>::pointer v39 = v72.__begin_;
                    std::vector<unsigned int>::pointer v37 = v72.__end_;
                  }
                  else
                  {
                    float v44 = 0;
                  }
                  int v45 = (unsigned int *)&v44[4 * v40];
                  *int v45 = *(_DWORD *)(v20 + 4);
                  unint64_t v38 = v45 + 1;
                  while (v37 != v39)
                  {
                    unsigned int v46 = *--v37;
                    *--int v45 = v46;
                  }
                  v72.__begin_ = v45;
                  v72.__end_ = v38;
                  v72.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                  if (v39) {
                    operator delete(v39);
                  }
                }
                else
                {
                  *v72.__end_ = *(_DWORD *)(v20 + 4);
                  unint64_t v38 = v37 + 1;
                }
                v72.__end_ = v38;
              }
              if (v64)
              {
                (*(void (**)(uint64_t))(*(void *)v64 + 40))(v64);
                char v19 = 0;
              }
              else
              {
                char v19 = 0;
                ++v67;
              }
            }
          }
LABEL_17:
          uint64_t v16 = v71;
          goto LABEL_18;
        }
        if (v69) {
          (*(void (**)(void))(*(void *)v69 + 8))();
        }
      }
      else if ((int)v71 < v70)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7))
      {
        unint64_t v80 = v80 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v72.__begin_)
      {
        v72.__end_ = v72.__begin_;
        operator delete(v72.__begin_);
      }
      if (v73.__begin_)
      {
        v73.__end_ = v73.__begin_;
        operator delete(v73.__begin_);
      }
      unint64_t v9 = v80;
    }
    uint64_t v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1B1FAE3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FAED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
    **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

uint64_t fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1FAF0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>();
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v23);
  uint64_t v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  int v7 = fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)&v23, v6);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v25);
  unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v24);
  if (!v7) {
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v9 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v9 + 4 * a2)) {
    goto LABEL_16;
  }
  char v10 = 0;
  int v11 = *(void **)(a1 + 80);
  uint64_t v12 = v11[1];
  uint64_t v13 = **(void **)(a1 + 16);
  uint64_t v14 = (int *)(((v12 - *v11) & 0xFFFFFFFFFFFFFFFCLL) + *v11 - 4);
  do
  {
    unint64_t v15 = *v14--;
    v10 |= *(void *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15;
  }
  while (v15 != a2);
  uint64_t v16 = *(void **)a1;
  uint64_t v17 = **(void **)(a1 + 72);
  for (uint64_t i = (int *)(v12 - 4); ; --i)
  {
    unint64_t v19 = *i;
    if (v16) {
      *(_DWORD *)(*v16 + 4 * v19) = *(_DWORD *)(a1 + 48);
    }
    unint64_t result = v19 >> 6;
    uint64_t v20 = 1 << v19;
    if ((v10 & 1) == 0) {
      break;
    }
    *(void *)(v13 + 8 * result) |= v20;
    *(void *)(v17 + 8 * result) &= ~v20;
    if (v19 == a2)
    {
      v11[1] = i;
      goto LABEL_15;
    }
LABEL_13:
    ;
  }
  *(void *)(v17 + 8 * result) &= ~v20;
  if (v19 != a2) {
    goto LABEL_13;
  }
  v11[1] = i;
  **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_15:
  ++*(_DWORD *)(a1 + 48);
LABEL_16:
  if (a3 != -1)
  {
    uint64_t v21 = **(void **)(a1 + 16);
    if ((*(void *)(v21 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2)) {
      *(void *)(v21 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v22 = *(_DWORD *)(v9 + 4 * a2);
    if (v22 < *(_DWORD *)(v9 + 4 * a3)) {
      *(_DWORD *)(v9 + 4 * a3) = v22;
    }
  }
  return result;
}

void sub_1B1FAF314(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 + 40));
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 72);
  int v4 = *(_DWORD *)(**(void **)(a1 + 56) + 4 * v3);
  uint64_t v5 = **(void **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2)) {
    *(_DWORD *)(v5 + 4 * a2) = v4;
  }
  uint64_t v6 = **(void **)(a1 + 16);
  if ((*(void *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
    *(void *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  int v7 = *(unint64_t **)(a1 + 24);
  unint64_t v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  *int v7 = v8;
  if (*(_DWORD *)(a3 + 72) == *(_DWORD *)(a1 + 40)) {
    *int v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  }
  return 1;
}

uint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ForwardOrCrossArc(void **a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 72);
  uint64_t v4 = *a1[7];
  int v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
  }
  else
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
    if ((*(void *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      uint64_t v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2)) {
        *(_DWORD *)(v8 + 4 * a2) = v5;
      }
    }
  }
  uint64_t v9 = *a1[2];
  if ((*(void *)(v9 + 8 * v6) & v7) != 0) {
    *(void *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  return 1;
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A37008;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A37008;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37008;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1FAF504(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37FC0;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1FAF61C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37FC0;
  uint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      std::vector<unsigned int>::pointer v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    float v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      std::vector<unsigned int>::pointer v37 = &v34[8 * v47];
      std::vector<unsigned int>::pointer v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unsigned int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unsigned int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1FAFA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    uint64_t v10 = v27 + 80 * v28;
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v25 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v25 = v13;
    }
    *(void *)(a1 + 8) = v25;
    uint64_t v15 = (uint64_t *)malloc_type_malloc(80 * v25, 0x1020040B5FA0AF2uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(uint64_t **)(a1 + 16);
    uint64_t v15 = *(uint64_t **)a1;
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = &v14[10 * v13];
  uint64_t v16 = v26;
  uint64_t v17 = v27;
  unint64_t v19 = v28;
  uint64_t v18 = v29;
  if (v29) {
    ++*v29;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 10;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    uint64_t v24 = v15 - 10;
    uint64_t *v24 = *(void *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 10 != (uint64_t *)v23)
    {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 8, *(void *)(v23 + 24), v23 + 16);
      *((_DWORD *)v15 - 10) = *(_DWORD *)(v23 + 40);
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(v15 - 4, *(void *)(v23 + 56), v23 + 48);
    }
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 72);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 10;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 80 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B1FAFD6C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *unint64_t result = &unk_1F0A41830;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1FAFE4C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FAFF1C(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1B1FB00C4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      Mutableint State = 0;
    }
    else {
      Mutableint State = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::Clear(a1);
  unint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        unint64_t v8 = operator new(0x70uLL);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          uint64_t v9 = operator new(0x18uLL);
          void v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)uint64_t v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        unint64_t v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        unint64_t v19 = &v18[8 * v14];
        *(void *)unint64_t v19 = v8;
        unint64_t v13 = v19 + 8;
        int v21 = (char *)a1[1];
        unint64_t v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          unint64_t v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        void *v12 = v8;
        unint64_t v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheState(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final((_DWORD *)a2, a1);
  long long v4 = *(_OWORD *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*>>((void *)(a1 + 80), v5, v6, 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 4));
  *(void *)(a1 + 104) = *(unsigned int *)(a2 + 104);
  return a1;
}

void sub_1B1FB037C(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 + 40));
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1FB0400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>(a1, v4, v6);
      v6 += 80;
      uint64_t v4 = v12 + 80;
      v12 += 80;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1FB04B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>::operator()[abi:ne180100](void *result)
{
  unint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  for (uint64_t i = *v2; v3 != i; v3 -= 80)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v3 - 32));
    unint64_t result = std::__list_imp<char *>::clear((void *)(v3 - 64));
  }
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A39F88;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1B1FB05F4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::StateIterator(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    uint64_t v2 = result;
    if (!*(unsigned char *)(result + 44))
    {
      unint64_t result = *(void *)(result + 16);
      if (result)
      {
        unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        if (result) {
          return result;
        }
        uint64_t v1 = *(void *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      float v3 = (*(float (**)(void, void))(**(void **)(v1 + 136) + 32))(*(void *)(v1 + 136), *(unsigned int *)(v2 + 40));
      uint64_t v4 = 0;
      float v5 = v3;
      int v6 = -1;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()((uint64_t)&v4, (uint64_t)&v7);
      if (v7) {
        *(unsigned char *)(v2 + 44) = 1;
      }
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v9);
      return (uint64_t)std::__list_imp<char *>::clear(v8);
    }
  }
  return result;
}

void *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39F88;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A39F88;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Next(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 40);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if ((result & 1) == 0)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
LABEL_7:
        return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 44)) {
    *(unsigned char *)(a1 + 44) = 0;
  }
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  else {
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InitArcIterator(a1, a2, a3);
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 120);
  if (*(_DWORD *)(v3 + 76) == a2) {
    uint64_t v4 = (uint64_t *)(v3 + 80);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 8) + 8 * (a2 + 1));
  }
  uint64_t v5 = *v4;
  int v8 = *(_DWORD *)(v5 + 108);
  int v6 = (_DWORD *)(v5 + 108);
  int v7 = v8;
  uint64_t v9 = *(void *)(v6 - 7);
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v6 - 5) - v9) >> 4);
  if (*(void *)(v6 - 5) == v9) {
    uint64_t v9 = 0;
  }
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  *int v6 = v7 + 1;
  return result;
}

void *fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DefaultDeterminizeFilter<fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(void *a1, uint64_t a2, void *a3)
{
  *a1 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  if (a3)
  {
    if (*a3) {
      (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
    }
    MEMORY[0x1B3EA8670](a3, 0x20C4093837F09);
  }
  return a1;
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeFst<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A3B858;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    uint64_t v4 = (void *)fst::cerr(v3);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1[1] + 8) |= 4uLL;
  }
  operator new();
}

void sub_1B1FB0C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~ImplToFst(v18);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + 8) = a2;
  return result;
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A44F58;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~DeterminizeFst(void *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Start(*(void *)(a1 + 8));
}

uint64_t *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final(*(void *)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    char v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Copy()
{
}

void sub_1B1FB0F78(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitStateIterator()
{
}

void sub_1B1FB106C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B1FB1288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeFstImplBase<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1FB14A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~DeterminizeFstImplBase(void *a1)
{
  *a1 = &unk_1F0A3F6E0;
  uint64_t v2 = a1[17];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_1B1FB1678(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::Expand(uint64_t a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = v9;
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  uint64_t v4 = v8;
  if (v8 != v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::AddArc(a1, a2, (uint64_t)(v4 + 5));
      unint64_t v5 = v4[1];
      if (v5)
      {
        do
        {
          int v6 = (void **)v5;
          unint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (void **)v4[2];
          BOOL v7 = *v6 == v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs(a1, a2);
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1B1FB1754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (v1 != -1)
  {
    int v2 = v1;
    int v3 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
    int v5 = *v3;
    std::list<int>::list(v6, (uint64_t)(v3 + 2));
    int v7 = v3[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v8, (uint64_t)(v3 + 10));
    fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeElement((uint64_t)v9, v2, &v5);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v8);
    std::__list_imp<char *>::clear(v6);
    operator new();
  }
  return 0xFFFFFFFFLL;
}

void sub_1B1FB18A4(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(int ***)(*(void *)(*(void *)(a1 + 184) + 88) + 8 * a2);
  int v5 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  *(_DWORD *)a3 = *v5;
  std::list<int>::list((void *)(a3 + 8), (uint64_t)(v5 + 2));
  *(_DWORD *)(a3 + 32) = v5[8];
  uint64_t v6 = a3 + 40;
  uint64_t result = std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), (uint64_t)(v5 + 10));
  for (uint64_t i = *v4; i; uint64_t i = *(int **)i)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v42);
    fst::Times<int,fst::TropicalWeightTpl<float>>(i + 4, (int *)&v42, (uint64_t)&v45);
    fst::Plus<int,fst::TropicalWeightTpl<float>>((int *)a3, &v45, (uint64_t)&v48);
    *(_DWORD *)a3 = v48;
    if (&v48 != (int *)a3) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v50, (uint64_t)&v49);
    }
    *(_DWORD *)(a3 + 32) = v51;
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(a3 + 40));
    uint64_t v9 = v54;
    if (v54)
    {
      uint64_t v11 = v52;
      unint64_t v10 = v53;
      uint64_t v12 = *v53;
      *(void *)(v12 + 8) = *(void *)(v52 + 8);
      **(void **)(v11 + 8) = v12;
      uint64_t v13 = *(void *)(a3 + 40);
      *(void *)(v13 + 8) = v10;
      uint64_t *v10 = v13;
      *(void *)(a3 + 40) = v11;
      *(void *)(v11 + 8) = v6;
      *(void *)(a3 + 56) += v9;
      uint64_t v54 = 0;
    }
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v52);
    std::__list_imp<char *>::clear(&v49);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v47);
    std::__list_imp<char *>::clear(v46);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
    std::__list_imp<char *>::clear(v43);
    int v36 = *(_DWORD *)a3;
    std::list<int>::list(v37, a3 + 8);
    int v38 = *(_DWORD *)(a3 + 32);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(&v39, a3 + 40);
    int v48 = v36;
    std::list<int>::list(&v49, (uint64_t)v37);
    int v51 = v38;
    uint64_t v52 = (uint64_t)&v52;
    unint64_t v53 = &v52;
    uint64_t v54 = 0;
    uint64_t v14 = v41;
    if (v41)
    {
      uint64_t v16 = v39;
      uint64_t v15 = v40;
      uint64_t v17 = *v40;
      *(void *)(v17 + 8) = *(void *)(v39 + 8);
      **(void **)(v16 + 8) = v17;
      uint64_t v18 = v52;
      *(void *)(v52 + 8) = v15;
      uint64_t *v15 = v18;
      uint64_t v52 = v16;
      *(void *)(v16 + 8) = &v52;
      uint64_t v54 = v14;
      uint64_t v41 = 0;
    }
    *(_DWORD *)a3 = v48;
    if (&v48 != (int *)a3) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v50, (uint64_t)&v49);
    }
    *(_DWORD *)(a3 + 32) = v51;
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(a3 + 40));
    uint64_t v19 = v54;
    if (v54)
    {
      uint64_t v21 = v52;
      unint64_t v20 = v53;
      uint64_t v22 = *v53;
      *(void *)(v22 + 8) = *(void *)(v52 + 8);
      **(void **)(v21 + 8) = v22;
      uint64_t v23 = *(void *)(a3 + 40);
      *(void *)(v23 + 8) = v20;
      uint64_t *v20 = v23;
      *(void *)(a3 + 40) = v21;
      *(void *)(v21 + 8) = v6;
      *(void *)(a3 + 56) += v19;
      uint64_t v54 = 0;
    }
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v52);
    std::__list_imp<char *>::clear(&v49);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v39);
    uint64_t result = std::__list_imp<char *>::clear(v37);
    int v24 = *(_DWORD *)a3;
    if (*(_DWORD *)a3)
    {
      if (*(void *)(a3 + 24)) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v24 == -2;
      }
      if (!v25 && *(float *)(a3 + 32) != -INFINITY)
      {
LABEL_20:
        if ((unint64_t)(*(void *)(a3 + 56) + 1) >= 2)
        {
          char v26 = 0;
          BOOL v29 = v24 != -2 || *(void *)(a3 + 24) != 0 || v24 == 0;
          long long v30 = (uint64_t *)(a3 + 48);
LABEL_31:
          uint64_t v31 = *v30;
          while (1)
          {
            char v32 = v26;
            if (v26)
            {
              uint64_t v33 = v31 + 16;
              if (v31 == v6) {
                goto LABEL_45;
              }
            }
            else
            {
              uint64_t v33 = a3;
              if (!v29) {
                goto LABEL_45;
              }
            }
            if (*(_DWORD *)v33)
            {
              if (*(_DWORD *)v33 == -2 && *(void *)(v33 + 24) == 0) {
                break;
              }
            }
            if (*(float *)(v33 + 32) == -INFINITY) {
              break;
            }
            char v26 = 1;
            if (v32)
            {
              long long v30 = (uint64_t *)(v31 + 8);
              goto LABEL_31;
            }
          }
          *(void *)(a1 + 8) |= 4uLL;
        }
      }
    }
    else if (*(float *)(a3 + 32) != -INFINITY)
    {
      goto LABEL_20;
    }
LABEL_45:
    ;
  }
  return result;
}

void sub_1B1FB1CC4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (void *)(a1 + 8), (void *)(a1 + 16));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (a2) {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  }
  return a1;
}

void sub_1B1FB1DCC(_Unwind_Exception *a1)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1FB1E38(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__base_destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  int v3 = result;
  for (uint64_t i = result[1]; i != a2; i -= 64)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(i - 24));
    uint64_t result = std::__list_imp<char *>::clear((void *)(i - 56));
  }
  v3[1] = a2;
  return result;
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  *a1 = &unk_1F0A3E0E8;
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  uint64_t v3 = a1[23];
  if (v3)
  {
    uint64_t v4 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1B3EA8670](v4, 0x10E0C400200E20DLL);
  }
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~DeterminizeFstImplBase(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(uint64_t a1)
{
  uint64_t v4 = a1 + 88;
  uint64_t v2 = *(void **)(a1 + 88);
  uint64_t v3 = *(void *)(v4 + 8);
  if ((int)((unint64_t)(v3 - (void)v2) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::clear((void **)v2[v5]);
        MEMORY[0x1B3EA8670](v6, 0x1020C405F07FB98);
        uint64_t v2 = *(void **)(a1 + 88);
        uint64_t v3 = *(void *)(a1 + 96);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 32);
  return a1;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::clear(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2 + 7);
      std::__list_imp<char *>::clear(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  *a1 = 0;
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FB21D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FB236C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::GetLabelMap(uint64_t result, int a2, void *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = **(void **)(*(void *)(*(void *)(result + 184) + 88) + 8 * a2);
  if (!v5) {
    goto LABEL_17;
  }
  do
  {
    uint64_t v18 = (uint64_t *)v5;
    unsigned int v7 = *(_DWORD *)(v5 + 8);
    uint64_t v6 = v5 + 8;
    uint64_t v8 = *(void *)(v4 + 136);
    unint64_t v27 = 0;
    (*(void (**)(uint64_t, void, void *))(*(void *)v8 + 136))(v8, v7, v25);
    while (1)
    {
      uint64_t result = v25[0];
      if (!v25[0])
      {
        if (v27 >= v25[2]) {
          goto LABEL_14;
        }
LABEL_8:
        unint64_t v10 = (_DWORD *)(v25[1] + 80 * v27);
        goto LABEL_9;
      }
      int v9 = (*(uint64_t (**)(void))(*(void *)v25[0] + 24))(v25[0]);
      uint64_t result = v25[0];
      if (v9) {
        break;
      }
      if (!v25[0]) {
        goto LABEL_8;
      }
      unint64_t v10 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)v25[0] + 32))(v25[0]);
LABEL_9:
      int v11 = v10[18];
      fst::Times<int,fst::TropicalWeightTpl<float>>((int *)(v6 + 8), v10 + 2, (uint64_t)&v19);
      fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeElement((uint64_t)v22, v11, &v19);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v21);
      std::__list_imp<char *>::clear(v20);
      fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::FilterArc(*(void *)(v4 + 176), v10, v6, v22, (uint64_t)a3);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v24);
      std::__list_imp<char *>::clear(v23);
      if (v25[0]) {
        (*(void (**)(void))(*(void *)v25[0] + 40))(v25[0]);
      }
      else {
        ++v27;
      }
    }
    if (v25[0])
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v25[0] + 8))(v25[0]);
      goto LABEL_16;
    }
LABEL_14:
    if (v26) {
      --*v26;
    }
LABEL_16:
    uint64_t v5 = *v18;
  }
  while (*v18);
LABEL_17:
  uint64_t v14 = (void *)*a3;
  uint64_t v12 = a3 + 1;
  uint64_t v13 = v14;
  if (v14 != v12)
  {
    do
    {
      uint64_t result = fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::NormArc(v4, (uint64_t)(v13 + 5));
      uint64_t v15 = (void *)v13[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v13[2];
          BOOL v17 = *v16 == (void)v13;
          uint64_t v13 = v16;
        }
        while (!v17);
      }
      uint64_t v13 = v16;
    }
    while (v16 != v12);
  }
  return result;
}

void sub_1B1FB2610(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 128);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else
  {
    uint64_t v4 = *(_DWORD **)(v1 - 104);
    if (v4) {
      --*v4;
    }
  }
  _Unwind_Resume(exception_object);
}

void *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
  int v12 = *v6;
  std::list<int>::list(v13, (uint64_t)(v6 + 2));
  int v7 = v6[8];
  v15[0] = (uint64_t)v15;
  v15[1] = (uint64_t)v15;
  void v15[2] = 0;
  v11[0] = *(_DWORD *)a3;
  v11[1] = v11[0];
  int v8 = *(_DWORD *)(a3 + 8);
  int v14 = v7;
  int v12 = v8;
  if (v11 != (_DWORD *)a3)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v13, *(void *)(a3 + 24), a3 + 16);
    int v14 = *(_DWORD *)(a3 + 40);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(v15, *(void *)(a3 + 56), a3 + 48);
  }
  int State = fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(int ***)(a3 + 72));
  Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(MutableState, (uint64_t)v11);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v15);
  return std::__list_imp<char *>::clear(v13);
}

void sub_1B1FB2780(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::Times<int,fst::TropicalWeightTpl<float>>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v11 = *a1;
  std::list<int>::list(v12, (uint64_t)(a1 + 2));
  int v13 = a1[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v14, (uint64_t)(a1 + 10));
  int v7 = *a2;
  std::list<int>::list(v8, (uint64_t)(a2 + 2));
  int v9 = a2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v10, (uint64_t)(a2 + 10));
  fst::Times<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(&v11, (uint64_t)&v7, (uint64_t)&v15);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(a3, &v15);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v17);
  std::__list_imp<char *>::clear(v16);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v10);
  std::__list_imp<char *>::clear(v8);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v14);
  return std::__list_imp<char *>::clear(v12);
}

void sub_1B1FB289C(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v5 + 40));
  std::__list_imp<char *>::clear((void *)(v5 + 8));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v4);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  unint64_t v10 = a2;
  int v7 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v10);
  if (*((_DWORD *)v7 + 10) == -1) {
    fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeArc((uint64_t)&v10, a2);
  }
  int v8 = (uint64_t *)v7[14];
  *int v8 = (uint64_t)std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> const&>((uint64_t)v8, *v8, a4);
  return 1;
}

void sub_1B1FB2A40(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v2 + 48));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t ***)(a2 + 72);
  uint64_t result = (uint64_t)std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  unint64_t v43 = v4;
  uint64_t v6 = *v4;
  if (*v4)
  {
    uint64_t v42 = a1;
    int v7 = (int *)(a2 + 8);
    int v8 = v6;
    do
    {
      fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()(a2 + 8, (uint64_t)(v8 + 2), (uint64_t)&v44);
      *int v7 = v44;
      if (v7 != &v44) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a2 + 16), v46, (uint64_t)&v45);
      }
      *(_DWORD *)(a2 + 40) = v47;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(a2 + 48));
      uint64_t v9 = v50;
      if (v50)
      {
        uint64_t v11 = v48;
        unint64_t v10 = v49;
        uint64_t v12 = *v49;
        *(void *)(v12 + 8) = *(void *)(v48 + 8);
        **(void **)(v11 + 8) = v12;
        uint64_t v13 = *(void *)(a2 + 48);
        *(void *)(v13 + 8) = v10;
        void *v10 = v13;
        *(void *)(a2 + 48) = v11;
        *(void *)(v11 + 8) = a2 + 48;
        *(void *)(a2 + 64) += v9;
        uint64_t v50 = 0;
      }
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v48);
      uint64_t result = (uint64_t)std::__list_imp<char *>::clear(&v45);
      if (v6 == v8 || *((_DWORD *)v8 + 2) != *((_DWORD *)v6 + 2))
      {
        uint64_t v28 = *v8;
        uint64_t v6 = v8;
      }
      else
      {
        int v14 = (int *)(v6 + 2);
        fst::Plus<int,fst::TropicalWeightTpl<float>>((int *)v6 + 4, (int *)v8 + 4, (uint64_t)&v44);
        *((_DWORD *)v6 + 4) = v44;
        if (v6 + 2 != (uint64_t *)&v44) {
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v6 + 3, v46, (uint64_t)&v45);
        }
        *((_DWORD *)v6 + 12) = v47;
        int v15 = v6 + 7;
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v6 + 7);
        uint64_t v16 = v50;
        if (v50)
        {
          uint64_t v18 = v48;
          BOOL v17 = v49;
          uint64_t v19 = *v49;
          *(void *)(v19 + 8) = *(void *)(v48 + 8);
          **(void **)(v18 + 8) = v19;
          uint64_t v20 = v6[7];
          *(void *)(v20 + 8) = v17;
          uint64_t *v17 = v20;
          v6[7] = v18;
          *(void *)(v18 + 8) = v15;
          v6[9] += v16;
          uint64_t v50 = 0;
        }
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v48);
        std::__list_imp<char *>::clear(&v45);
        int v21 = *v14;
        if ((!*v14 || v21 != -2 || v6[5]) && *((float *)v6 + 12) != -INFINITY && (unint64_t)(v6[9] + 1) >= 2)
        {
          char v22 = 0;
          uint64_t v23 = (uint64_t **)(v6 + 8);
LABEL_19:
          int v24 = *v23;
          while (1)
          {
            char v25 = v22;
            if (v22)
            {
              char v26 = v24 + 2;
              if (v24 == v15) {
                goto LABEL_36;
              }
            }
            else
            {
              char v26 = v6 + 2;
              if (v21)
              {
                char v26 = v6 + 2;
                if (v21 == -2)
                {
                  char v26 = v6 + 2;
                  if (!v6[5]) {
                    goto LABEL_36;
                  }
                }
              }
            }
            if (*(_DWORD *)v26)
            {
              if (*(_DWORD *)v26 == -2 && v26[3] == 0) {
                break;
              }
            }
            if (*((float *)v26 + 8) == -INFINITY) {
              break;
            }
            char v22 = 1;
            if (v25)
            {
              uint64_t v23 = (uint64_t **)(v24 + 1);
              goto LABEL_19;
            }
          }
          *(void *)(v42 + 8) |= 4uLL;
        }
LABEL_36:
        uint64_t v28 = *v8;
        uint64_t result = std::forward_list<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::erase_after((uint64_t)v43, (void **)v6);
      }
      int v8 = (uint64_t *)v28;
    }
    while (v28);
    for (uint64_t i = *v43; i; uint64_t i = (uint64_t *)*i)
    {
      long long v30 = (int *)(i + 2);
      fst::Divide<int,fst::TropicalWeightTpl<float>>((int *)i + 4, v7, 0, (uint64_t)&v44);
      *((_DWORD *)i + 4) = v44;
      if (i + 2 != (uint64_t *)&v44) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(i + 3, v46, (uint64_t)&v45);
      }
      *((_DWORD *)i + 12) = v47;
      uint64_t v31 = i + 7;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(i + 7);
      uint64_t v32 = v50;
      if (v50)
      {
        uint64_t v34 = v48;
        uint64_t v33 = v49;
        uint64_t v35 = *v49;
        *(void *)(v35 + 8) = *(void *)(v48 + 8);
        **(void **)(v34 + 8) = v35;
        uint64_t v36 = i[7];
        *(void *)(v36 + 8) = v33;
        *uint64_t v33 = v36;
        i[7] = v34;
        *(void *)(v34 + 8) = v31;
        i[9] += v32;
        uint64_t v50 = 0;
      }
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v48);
      std::__list_imp<char *>::clear(&v45);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Quantize((uint64_t)(i + 2), (uint64_t)&v44, *(float *)(v42 + 144));
      *long long v30 = v44;
      if (v30 != &v44) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(i + 3, v46, (uint64_t)&v45);
      }
      *((_DWORD *)i + 12) = v47;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(i + 7);
      uint64_t v37 = v50;
      if (v50)
      {
        uint64_t v39 = v48;
        int v38 = v49;
        uint64_t v40 = *v49;
        *(void *)(v40 + 8) = *(void *)(v48 + 8);
        **(void **)(v39 + 8) = v40;
        uint64_t v41 = i[7];
        *(void *)(v41 + 8) = v38;
        *int v38 = v41;
        i[7] = v39;
        *(void *)(v39 + 8) = v31;
        i[9] += v37;
        uint64_t v50 = 0;
      }
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v48);
      uint64_t result = (uint64_t)std::__list_imp<char *>::clear(&v45);
    }
  }
  return result;
}

void sub_1B1FB2E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(a11);
  std::__list_imp<char *>::clear(v11);
  _Unwind_Resume(a1);
}

float fst::Times<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>@<S0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1;
  int v6 = *a1;
  if (*a1)
  {
    if (*((void *)a1 + 3)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v6 == -2;
    }
    if (v7 || *((float *)a1 + 8) == -INFINITY) {
      goto LABEL_10;
    }
  }
  else if (*((float *)a1 + 8) == -INFINITY)
  {
    goto LABEL_10;
  }
  if ((unint64_t)(*((void *)a1 + 7) + 1) >= 2)
  {
    char v14 = 0;
    int v15 = (uint64_t *)(a1 + 12);
    BOOL v18 = v6 != -2 || *((void *)a1 + 3) != 0 || v6 == 0;
LABEL_31:
    uint64_t v19 = *v15;
    while (1)
    {
      char v20 = v14;
      if (v14)
      {
        int v21 = (int *)(v19 + 16);
        if ((int *)v19 == a1 + 10) {
          break;
        }
      }
      else
      {
        int v21 = a1;
        if (!v18) {
          break;
        }
      }
      if (*v21)
      {
        if (*v21 == -2 && *((void *)v21 + 3) == 0) {
          goto LABEL_66;
        }
      }
      if (*((float *)v21 + 8) == -INFINITY) {
        goto LABEL_66;
      }
      char v14 = 1;
      if (v20)
      {
        int v15 = (uint64_t *)(v19 + 8);
        goto LABEL_31;
      }
    }
  }
LABEL_10:
  int v8 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    if (*(void *)(a2 + 24)) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = v8 == -2;
    }
    if (v9 || *(float *)(a2 + 32) == -INFINITY) {
      goto LABEL_19;
    }
  }
  else if (*(float *)(a2 + 32) == -INFINITY)
  {
    goto LABEL_19;
  }
  if ((unint64_t)(*(void *)(a2 + 56) + 1) < 2)
  {
LABEL_19:
    uint64_t v10 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
    if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(v4, v10) & 1) != 0|| (uint64_t v11 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero(), fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)a2, v11)))
    {
      uint64_t v12 = (_DWORD *)fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
      *(_DWORD *)a3 = *v12;
      std::list<int>::list((void *)(a3 + 8), (uint64_t)(v12 + 2));
      *(_DWORD *)(a3 + 32) = v12[8];
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), (uint64_t)(v12 + 10));
      return result;
    }
    unint64_t v56 = v4 + 10;
    uint64_t v33 = (int *)*((void *)v4 + 6);
    uint64_t v34 = *(void *)(a2 + 48);
    uint64_t v35 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
    *(_DWORD *)a3 = *v35;
    unsigned int v57 = (uint64_t *)(a3 + 8);
    std::list<int>::list((void *)(a3 + 8), (uint64_t)(v35 + 2));
    char v36 = 0;
    *(_DWORD *)(a3 + 32) = v35[8];
    uint64_t v37 = (uint64_t *)(a3 + 40);
    *(void *)(a3 + 40) = a3 + 40;
    *(void *)(a3 + 48) = a3 + 40;
    *(void *)(a3 + 56) = 0;
    uint64_t v59 = a3;
    unsigned int v58 = v4;
LABEL_69:
    uint64_t v60 = v33;
    int64_t v61 = v33 + 4;
LABEL_70:
    char v62 = v36;
    if (v36)
    {
      if (v33 == v56) {
        return result;
      }
    }
    else if (*v4)
    {
      if (*((void *)v4 + 3)) {
        BOOL v38 = 0;
      }
      else {
        BOOL v38 = *v4 == -2;
      }
      if (v38) {
        return result;
      }
      float result = *((float *)v4 + 8);
      if (result == -INFINITY) {
        return result;
      }
    }
    else
    {
      float result = *((float *)v4 + 8);
      if (result == -INFINITY) {
        return result;
      }
    }
    uint64_t v39 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
    int v71 = *v39;
    std::list<int>::list(v72, (uint64_t)(v39 + 2));
    char v40 = 0;
    int v73 = v39[8];
    v74[0] = (uint64_t)v74;
    v74[1] = (uint64_t)v74;
    v74[2] = 0;
    if (v62) {
      uint64_t v41 = v61;
    }
    else {
      uint64_t v41 = v4;
    }
    while (1)
    {
      uint64_t v42 = v37;
      char v43 = v40;
      if (v40)
      {
        if (v34 == a2 + 40) {
          goto LABEL_107;
        }
      }
      else if (*(_DWORD *)a2)
      {
        if (*(void *)(a2 + 24)) {
          BOOL v44 = 0;
        }
        else {
          BOOL v44 = *(_DWORD *)a2 == -2;
        }
        if (v44 || *(float *)(a2 + 32) == -INFINITY)
        {
LABEL_107:
          fst::Plus<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(v59, (uint64_t)&v71, (uint64_t)&v63);
          *(_DWORD *)uint64_t v59 = v63;
          uint64_t v4 = v58;
          if (&v63 != (int *)v59) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v57, v64[1], (uint64_t)v64);
          }
          *(_DWORD *)(v59 + 32) = v65;
          std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v37);
          uint64_t v51 = v68;
          if (v68)
          {
            uint64_t v53 = v66;
            uint64_t v52 = v67;
            uint64_t v54 = *v67;
            *(void *)(v54 + 8) = *(void *)(v66 + 8);
            **(void **)(v53 + 8) = v54;
            uint64_t v55 = *(void *)(v59 + 40);
            *(void *)(v55 + 8) = v52;
            *uint64_t v52 = v55;
            *(void *)(v59 + 40) = v53;
            *(void *)(v53 + 8) = v37;
            *(void *)(v59 + 56) += v51;
            uint64_t v68 = 0;
          }
          std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v66);
          std::__list_imp<char *>::clear(v64);
          uint64_t v34 = *(void *)(a2 + 48);
          std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v74);
          std::__list_imp<char *>::clear(v72);
          char v36 = 1;
          uint64_t v33 = v60;
          if (v62)
          {
            uint64_t v33 = (int *)*((void *)v60 + 1);
            goto LABEL_69;
          }
          goto LABEL_70;
        }
      }
      else if (*(float *)(a2 + 32) == -INFINITY)
      {
        goto LABEL_107;
      }
      if (v40) {
        uint64_t v45 = v34 + 16;
      }
      else {
        uint64_t v45 = a2;
      }
      fst::Times<int,(fst::StringType)2>(v41, v45, (uint64_t)&v63);
      float v46 = *((float *)v41 + 8);
      float v47 = NAN;
      if (v46 != -INFINITY)
      {
        float v48 = *(float *)(v45 + 32);
        float v47 = NAN;
        if (v48 != -INFINITY)
        {
          float v47 = INFINITY;
          BOOL v49 = v48 == INFINITY || v46 == INFINITY;
          float v50 = v46 + v48;
          if (!v49) {
            float v47 = v50;
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)v69, &v63, v47);
      std::__list_imp<char *>::clear(v64);
      uint64_t v37 = v42;
      fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)&v71, (uint64_t)v69, 1);
      std::__list_imp<char *>::clear(v70);
      char v40 = 1;
      if (v43) {
        uint64_t v34 = *(void *)(v34 + 8);
      }
    }
  }
  char v23 = 0;
  int v24 = (uint64_t *)(a2 + 48);
  BOOL v27 = v8 != -2 || *(void *)(a2 + 24) != 0 || v8 == 0;
LABEL_53:
  uint64_t v28 = *v24;
  while (1)
  {
    char v29 = v23;
    if (v23)
    {
      uint64_t v30 = v28 + 16;
      if (v28 == a2 + 40) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v30 = a2;
      if (!v27) {
        goto LABEL_19;
      }
    }
    if (*(_DWORD *)v30)
    {
      if (*(_DWORD *)v30 == -2 && *(void *)(v30 + 24) == 0) {
        break;
      }
    }
    if (*(float *)(v30 + 32) == -INFINITY) {
      break;
    }
    char v23 = 1;
    if (v29)
    {
      int v24 = (uint64_t *)(v28 + 8);
      goto LABEL_53;
    }
  }
LABEL_66:
  uint64_t v32 = (_DWORD *)fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight();
  *(_DWORD *)a3 = *v32;
  std::list<int>::list((void *)(a3 + 8), (uint64_t)(v32 + 2));
  *(_DWORD *)(a3 + 32) = v32[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), (uint64_t)(v32 + 10));
  return result;
}

void sub_1B1FB3494(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight()
{
  {
    operator new();
  }
  return fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight(void)::no_weight;
}

void sub_1B1FB3610(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C404C081FCELL);
  _Unwind_Resume(a1);
}

float *fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack(float *result, uint64_t a2, int a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 && (v5 == -2 ? (BOOL v6 = *(void *)(a2 + 24) == 0) : (BOOL v6 = 0), v6)
    || (float v7 = *(float *)(a2 + 32), v7 >= -INFINITY) && v7 <= -INFINITY)
  {
LABEL_8:
    uint64_t v8 = (uint64_t)(v4 + 10);
LABEL_9:
    float result = (float *)std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>(v8, 0, 0, (_DWORD *)a2);
    *((void *)result + 1) = v8;
    uint64_t v9 = *((void *)v4 + 5);
    *(void *)float result = v9;
    *(void *)(v9 + 8) = result;
    *((void *)v4 + 5) = result;
    ++*((void *)v4 + 7);
    return result;
  }
  if (*(_DWORD *)result == -2 && !*((void *)result + 3)) {
    goto LABEL_23;
  }
  float v10 = result[8];
  if (v10 >= -INFINITY && v10 <= -INFINITY) {
    goto LABEL_23;
  }
  if (!a3)
  {
    uint64_t v8 = (uint64_t)(result + 10);
    if (fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>::Compare::operator()((uint64_t)&v16, (int *)result, (int *)a2))goto LABEL_9; {
    float result = (float *)std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>((uint64_t)(v4 + 10), 0, 0, v4);
    }
    *((void *)result + 1) = v8;
    uint64_t v12 = *((void *)v4 + 5);
    *(void *)float result = v12;
    *(void *)(v12 + 8) = result;
    *((void *)v4 + 5) = result;
    ++*((void *)v4 + 7);
    int v5 = *(_DWORD *)a2;
LABEL_23:
    *(_DWORD *)uint64_t v4 = v5;
    if (v4 != (float *)a2) {
      float result = (float *)std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)v4 + 1, *(void *)(a2 + 16), a2 + 8);
    }
    v4[8] = *(float *)(a2 + 32);
    return result;
  }
  uint64_t v11 = (uint64_t)result;
  if (*((void *)result + 7)) {
    uint64_t v11 = *((void *)result + 5) + 16;
  }
  if (fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>::Compare::operator()((uint64_t)&v16, (int *)v11, (int *)a2))goto LABEL_8; {
  fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>::Merge::operator()(v11, a2, (uint64_t)&v13);
  }
  *(_DWORD *)uint64_t v11 = v13;
  if ((int *)v11 != &v13) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v11 + 8), v14[1], (uint64_t)v14);
  }
  *(_DWORD *)(v11 + 32) = v15;
  return (float *)std::__list_imp<char *>::clear(v14);
}

void sub_1B1FB382C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

float fst::Plus<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    if (*(void *)(a1 + 24)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v6 == -2;
    }
    if (v7 || *(float *)(a1 + 32) == -INFINITY) {
      goto LABEL_10;
    }
  }
  else if (*(float *)(a1 + 32) == -INFINITY)
  {
    goto LABEL_10;
  }
  if ((unint64_t)(*(void *)(a1 + 56) + 1) >= 2)
  {
    char v13 = 0;
    char v14 = (uint64_t *)(a1 + 48);
    BOOL v17 = v6 != -2 || *(void *)(a1 + 24) != 0 || v6 == 0;
LABEL_32:
    uint64_t v18 = *v14;
    while (1)
    {
      char v19 = v13;
      if (v13)
      {
        uint64_t v20 = v18 + 16;
        if (v18 == a1 + 40) {
          break;
        }
      }
      else
      {
        uint64_t v20 = a1;
        if (!v17) {
          break;
        }
      }
      if (*(_DWORD *)v20)
      {
        if (*(_DWORD *)v20 == -2 && *(void *)(v20 + 24) == 0) {
          goto LABEL_67;
        }
      }
      if (*(float *)(v20 + 32) == -INFINITY) {
        goto LABEL_67;
      }
      char v13 = 1;
      if (v19)
      {
        char v14 = (uint64_t *)(v18 + 8);
        goto LABEL_32;
      }
    }
  }
LABEL_10:
  int v8 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
  {
    if (*(float *)(a2 + 32) == -INFINITY) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (*(void *)(a2 + 24)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v8 == -2;
  }
  if (!v9 && *(float *)(a2 + 32) != -INFINITY)
  {
LABEL_18:
    if ((unint64_t)(*(void *)(a2 + 56) + 1) < 2) {
      goto LABEL_19;
    }
    char v22 = 0;
    char v23 = (uint64_t *)(a2 + 48);
    BOOL v26 = v8 != -2 || *(void *)(a2 + 24) != 0 || v8 == 0;
LABEL_54:
    uint64_t v27 = *v23;
    while (1)
    {
      char v28 = v22;
      if (v22)
      {
        uint64_t v29 = v27 + 16;
        if (v27 == a2 + 40) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v29 = a2;
        if (!v26) {
          goto LABEL_19;
        }
      }
      if (*(_DWORD *)v29)
      {
        if (*(_DWORD *)v29 == -2 && *(void *)(v29 + 24) == 0) {
          break;
        }
      }
      if (*(float *)(v29 + 32) == -INFINITY) {
        break;
      }
      char v22 = 1;
      if (v28)
      {
        char v23 = (uint64_t *)(v27 + 8);
        goto LABEL_54;
      }
    }
LABEL_67:
    uint64_t v31 = (_DWORD *)fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight();
    *(_DWORD *)a3 = *v31;
    std::list<int>::list((void *)(a3 + 8), (uint64_t)(v31 + 2));
    *(_DWORD *)(a3 + 32) = v31[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), (uint64_t)(v31 + 10));
    return result;
  }
LABEL_19:
  uint64_t v10 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
  if (fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)a1, v10))
  {
    *(_DWORD *)a3 = *(_DWORD *)a2;
    std::list<int>::list((void *)(a3 + 8), a2 + 8);
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 32);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), a2 + 40);
  }
  else
  {
    uint64_t v12 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
    if (!fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)a2, v12))
    {
      uint64_t v32 = *(void *)(a1 + 48);
      uint64_t v49 = a2 + 40;
      uint64_t v50 = a1 + 40;
      uint64_t v51 = *(void *)(a2 + 48);
      uint64_t v33 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
      *(_DWORD *)a3 = *v33;
      std::list<int>::list((void *)(a3 + 8), (uint64_t)(v33 + 2));
      *(_DWORD *)(a3 + 32) = v33[8];
      *(void *)(a3 + 40) = a3 + 40;
      *(void *)(a3 + 48) = a3 + 40;
      *(void *)(a3 + 56) = 0;
      int v34 = 1;
      int v35 = 1;
      while (1)
      {
        if (*(_DWORD *)a1)
        {
          if (*(void *)(a1 + 24)) {
            BOOL v36 = 0;
          }
          else {
            BOOL v36 = *(_DWORD *)a1 == -2;
          }
          if (v36 || (float result = *(float *)(a1 + 32), result == -INFINITY))
          {
            while (1)
            {
LABEL_105:
              int v40 = v35;
              if (v35)
              {
                int v41 = *(_DWORD *)a1;
                if (*(_DWORD *)a1)
                {
                  if (*(void *)(a1 + 24)) {
                    BOOL v42 = 0;
                  }
                  else {
                    BOOL v42 = v41 == -2;
                  }
                  if (v42 || (float result = *(float *)(a1 + 32), v43 = a1, result >= -INFINITY) && result <= -INFINITY)
                  {
LABEL_119:
                    uint64_t v44 = v51;
                    while (1)
                    {
                      int v45 = v34;
                      if (v34)
                      {
                        int v46 = *(_DWORD *)a2;
                        if (*(_DWORD *)a2)
                        {
                          if (*(void *)(a2 + 24)) {
                            BOOL v47 = 0;
                          }
                          else {
                            BOOL v47 = v46 == -2;
                          }
                          if (v47) {
                            return result;
                          }
                          float result = *(float *)(a2 + 32);
                          uint64_t v48 = a2;
                          if (result == -INFINITY) {
                            return result;
                          }
                        }
                        else
                        {
                          float result = *(float *)(a2 + 32);
                          uint64_t v48 = a2;
                          if (result == -INFINITY) {
                            return result;
                          }
                        }
                      }
                      else
                      {
                        if (v44 == v49) {
                          return result;
                        }
                        int v46 = *(_DWORD *)(v44 + 16);
                        uint64_t v48 = v44 + 16;
                      }
                      int v52 = v46;
                      std::list<int>::list(v53, v48 + 8);
                      int v54 = *(_DWORD *)(v48 + 32);
                      fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a3, (uint64_t)&v52, 1);
                      std::__list_imp<char *>::clear(v53);
                      int v34 = 0;
                      if (!v45)
                      {
                        int v34 = 0;
                        uint64_t v44 = *(void *)(v44 + 8);
                      }
                    }
                  }
                }
                else
                {
                  float result = *(float *)(a1 + 32);
                  uint64_t v43 = a1;
                  if (result == -INFINITY) {
                    goto LABEL_119;
                  }
                }
              }
              else
              {
                if (v32 == v50) {
                  goto LABEL_119;
                }
                int v41 = *(_DWORD *)(v32 + 16);
                uint64_t v43 = v32 + 16;
              }
              int v55 = v41;
              std::list<int>::list(v56, v43 + 8);
              int v57 = *(_DWORD *)(v43 + 32);
              fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a3, (uint64_t)&v55, 1);
              std::__list_imp<char *>::clear(v56);
              int v35 = 0;
              if (!v40)
              {
                int v35 = 0;
                uint64_t v32 = *(void *)(v32 + 8);
              }
            }
          }
        }
        else
        {
          float result = *(float *)(a1 + 32);
          if (result == -INFINITY) {
            goto LABEL_105;
          }
        }
        while (1)
        {
          if (v34)
          {
            if (*(_DWORD *)a2)
            {
              if (*(void *)(a2 + 24)) {
                BOOL v37 = 0;
              }
              else {
                BOOL v37 = *(_DWORD *)a2 == -2;
              }
              if (v37) {
                goto LABEL_105;
              }
              float result = *(float *)(a2 + 32);
              if (result == -INFINITY) {
                goto LABEL_105;
              }
            }
            else
            {
              float result = *(float *)(a2 + 32);
              if (result == -INFINITY) {
                goto LABEL_105;
              }
            }
          }
          else if (v51 == v49)
          {
            uint64_t v51 = a2 + 40;
            goto LABEL_105;
          }
          BOOL v38 = (int *)(v35 ? a1 : v32 + 16);
          int v67 = *v38;
          std::list<int>::list(v68, (uint64_t)(v38 + 2));
          int v69 = v38[8];
          uint64_t v39 = (int *)(v34 ? a2 : v51 + 16);
          int v64 = *v39;
          std::list<int>::list(v65, (uint64_t)(v39 + 2));
          int v66 = v39[8];
          if (fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>::Compare::operator()((uint64_t)v70, &v67, &v64))
          {
            int v61 = v67;
            std::list<int>::list(v62, (uint64_t)v68);
            int v63 = v69;
            fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a3, (uint64_t)&v61, 1);
            std::__list_imp<char *>::clear(v62);
            if (v35) {
              int v35 = 0;
            }
            else {
              uint64_t v32 = *(void *)(v32 + 8);
            }
          }
          else
          {
            int v58 = v64;
            std::list<int>::list(v59, (uint64_t)v65);
            int v60 = v66;
            fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a3, (uint64_t)&v58, 1);
            std::__list_imp<char *>::clear(v59);
            if (v34) {
              int v34 = 0;
            }
            else {
              uint64_t v51 = *(void *)(v51 + 8);
            }
          }
          std::__list_imp<char *>::clear(v65);
          std::__list_imp<char *>::clear(v68);
          if (v35) {
            break;
          }
          if (v32 == v50)
          {
            uint64_t v32 = a1 + 40;
            goto LABEL_105;
          }
        }
      }
    }
    *(_DWORD *)a3 = *(_DWORD *)a1;
    std::list<int>::list((void *)(a3 + 8), a1 + 8);
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 32);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), a1 + 40);
  }
  return result;
}

void sub_1B1FB3F0C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::UnionWeight(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 40), 1, a3);
  return a1;
}

void sub_1B1FB3FF8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2)
  {
    uint64_t v5 = a2;
    do
    {
      int v6 = std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>((uint64_t)a1, 0, 0, a3);
      uint64_t v7 = *a1;
      *int v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1B1FB4084(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>::Compare::operator()(uint64_t a1, int *a2, int *a3)
{
  int v22 = *a2;
  std::list<int>::list(v23, (uint64_t)(a2 + 2));
  int v18 = *a3;
  uint64_t v4 = std::list<int>::list(&v19, (uint64_t)(a3 + 2));
  if (v22) {
    unint64_t v5 = v24 + 1;
  }
  else {
    unint64_t v5 = 0;
  }
  if (!v18 || v21 + 1 <= v5)
  {
    if (v18) {
      unint64_t v7 = v21 + 1;
    }
    else {
      unint64_t v7 = 0;
    }
    if (v22 && v24 + 1 > v7)
    {
LABEL_12:
      uint64_t v6 = 0;
      goto LABEL_13;
    }
    char v9 = 0;
    uint64_t v10 = (void *)v23[1];
    uint64_t v11 = &v20;
LABEL_15:
    uint64_t v12 = *v11;
    while (1)
    {
      char v13 = v9;
      if (v9)
      {
        char v14 = (int *)(v10 + 2);
        if (v10 == v23) {
          goto LABEL_12;
        }
      }
      else
      {
        if (!v22) {
          goto LABEL_12;
        }
        char v14 = &v22;
      }
      int v15 = *v14;
      char v16 = (v13 & 1) != 0 ? (int *)(v12 + 16) : &v18;
      int v17 = *v16;
      if (v15 < v17) {
        break;
      }
      if (v15 > v17) {
        goto LABEL_12;
      }
      char v9 = 1;
      if (v13)
      {
        uint64_t v10 = (void *)v10[1];
        uint64_t v11 = (uint64_t *)(v12 + 8);
        goto LABEL_15;
      }
    }
  }
  uint64_t v6 = 1;
LABEL_13:
  std::__list_imp<char *>::clear(v4);
  std::__list_imp<char *>::clear(v23);
  return v6;
}

void sub_1B1FB41B8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>::Merge::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v10 = *(_DWORD *)a1;
  std::list<int>::list(v11, a1 + 8);
  float v6 = *(float *)(a1 + 32);
  float v7 = NAN;
  if (v6 != -INFINITY)
  {
    float v8 = *(float *)(a2 + 32);
    float v7 = NAN;
    if (v8 != -INFINITY)
    {
      if (v6 >= v8) {
        float v7 = *(float *)(a2 + 32);
      }
      else {
        float v7 = *(float *)(a1 + 32);
      }
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight(a3, &v10, v7);
  return std::__list_imp<char *>::clear(v11);
}

void sub_1B1FB4278(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeElement(uint64_t a1, int a2, _DWORD *a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = *a3;
  std::list<int>::list((void *)(a1 + 16), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 40) = a3[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(a3 + 10));
  return a1;
}

void sub_1B1FB42EC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  float v6 = (uint64_t **)(a1 + 8);
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        float v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        float v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        float v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    float v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

uint64_t std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  float v6 = operator new(0x78uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = **a2;
  uint64_t result = fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeArc((uint64_t)(v6 + 10));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1FB442C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(uint64_t a1)
{
  *(_DWORD *)a1 = -1;
  uint64_t v2 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  *(_DWORD *)(a1 + 8) = *v2;
  std::list<int>::list((void *)(a1 + 16), (uint64_t)(v2 + 2));
  *(_DWORD *)(a1 + 40) = v2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(v2 + 10));
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_1B1FB44B4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, uint64_t *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(__p + 11);
    std::__list_imp<char *>::clear(__p + 7);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  uint64_t v3 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  *(_DWORD *)(a1 + 8) = *v3;
  std::list<int>::list((void *)(a1 + 16), (uint64_t)(v3 + 2));
  *(_DWORD *)(a1 + 40) = v3[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(v3 + 10));
  operator new();
}

void sub_1B1FB45B8(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  float v6 = operator new(0x50uLL);
  *float v6 = a2;
  std::allocator<std::__forward_list_node<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,void *>>::construct[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> const&>(a1, (uint64_t)(v6 + 1), a3);
  return v6;
}

void sub_1B1FB4630(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<std::__forward_list_node<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,void *>>::construct[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)a2 = *a3;
  *(_DWORD *)(a2 + 8) = a3[2];
  std::list<int>::list((void *)(a2 + 16), (uint64_t)(a3 + 4));
  *(_DWORD *)(a2 + 40) = a3[10];
  return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a2 + 48), (uint64_t)(a3 + 12));
}

void sub_1B1FB46A4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  int v39 = *(_DWORD *)v5;
  std::list<int>::list(v40, v5 + 8);
  char v6 = 0;
  float v41 = *(float *)(v5 + 32);
  int v7 = (uint64_t *)(a1 + 48);
LABEL_2:
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 16;
  while (1)
  {
    char v10 = v6;
    if (v6)
    {
      if (v8 == a1 + 40) {
        break;
      }
      uint64_t v11 = v9;
      goto LABEL_13;
    }
    if (!*(_DWORD *)a1)
    {
      float v13 = *(float *)(a1 + 32);
      if (v13 >= -INFINITY && v13 <= -INFINITY) {
        break;
      }
      goto LABEL_12;
    }
    BOOL v12 = !*(void *)(a1 + 24) && *(_DWORD *)a1 == -2;
    if (v12 || *(float *)(a1 + 32) == -INFINITY) {
      break;
    }
LABEL_12:
    uint64_t v11 = a1;
LABEL_13:
    fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()((uint64_t)&v39, v11, (uint64_t)&v35);
    int v39 = v35;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v40, v37, (uint64_t)&v36);
    float v41 = v38;
    std::__list_imp<char *>::clear(&v36);
    char v6 = 1;
    if (v10)
    {
      int v7 = (uint64_t *)(v8 + 8);
      goto LABEL_2;
    }
  }
  char v14 = 0;
  int v15 = (uint64_t *)(a2 + 48);
  while (2)
  {
    uint64_t v16 = *v15;
    uint64_t v17 = *v15 + 16;
LABEL_19:
    char v18 = v14;
    if (v14)
    {
      if (v16 == a2 + 40) {
        goto LABEL_33;
      }
      uint64_t v19 = v17;
LABEL_29:
      fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()((uint64_t)&v39, v19, (uint64_t)&v35);
      int v39 = v35;
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v40, v37, (uint64_t)&v36);
      float v41 = v38;
      std::__list_imp<char *>::clear(&v36);
      char v14 = 1;
      if (v18)
      {
        int v15 = (uint64_t *)(v16 + 8);
        continue;
      }
      goto LABEL_19;
    }
    break;
  }
  if (!*(_DWORD *)a2)
  {
    float v21 = *(float *)(a2 + 32);
    if (v21 >= -INFINITY && v21 <= -INFINITY) {
      goto LABEL_33;
    }
    goto LABEL_28;
  }
  if (*(void *)(a2 + 24)) {
    BOOL v20 = 0;
  }
  else {
    BOOL v20 = *(_DWORD *)a2 == -2;
  }
  if (!v20 && *(float *)(a2 + 32) != -INFINITY)
  {
LABEL_28:
    uint64_t v19 = a2;
    goto LABEL_29;
  }
LABEL_33:
  uint64_t v22 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  if (v39) {
    uint64_t v23 = v40[2] + 1;
  }
  else {
    uint64_t v23 = 0;
  }
  if (*(_DWORD *)v22) {
    uint64_t v24 = *(void *)(v22 + 24) + 1;
  }
  else {
    uint64_t v24 = 0;
  }
  if (v23 != v24) {
    goto LABEL_55;
  }
  char v25 = 0;
  uint64_t v26 = v40[1];
  uint64_t v27 = (uint64_t *)(v22 + 16);
  BOOL v28 = v39 && v39 == *(_DWORD *)v22;
  BOOL v29 = !v28;
  int v30 = !v29;
  while (1)
  {
    uint64_t v31 = *v27;
    if ((v25 & 1) == 0 && !v30) {
      break;
    }
    if ((uint64_t *)v26 == v40) {
      goto LABEL_53;
    }
    if (*(_DWORD *)(v26 + 16) != *(_DWORD *)(v31 + 16)) {
      goto LABEL_55;
    }
    uint64_t v26 = *(void *)(v26 + 8);
    uint64_t v27 = (uint64_t *)(v31 + 8);
    char v25 = 1;
  }
  if (v39) {
    goto LABEL_55;
  }
LABEL_53:
  int v35 = LODWORD(v41);
  float v42 = 0.0;
  float v42 = *(float *)(v22 + 32);
  if (v41 == v42)
  {
    uint64_t v32 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
    *(_DWORD *)a3 = *v32;
    std::list<int>::list((void *)(a3 + 8), (uint64_t)(v32 + 2));
    *(_DWORD *)(a3 + 32) = v32[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), (uint64_t)(v32 + 10));
  }
  else
  {
LABEL_55:
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(a3, &v39);
  }
  return std::__list_imp<char *>::clear(v40);
}

void sub_1B1FB49D0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::Plus<int,fst::TropicalWeightTpl<float>>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v11 = *a1;
  std::list<int>::list(v12, (uint64_t)(a1 + 2));
  int v13 = a1[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v14, (uint64_t)(a1 + 10));
  int v7 = *a2;
  std::list<int>::list(v8, (uint64_t)(a2 + 2));
  int v9 = a2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v10, (uint64_t)(a2 + 10));
  fst::Plus<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((uint64_t)&v11, (uint64_t)&v7, (uint64_t)&v15);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(a3, &v15);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v17);
  std::__list_imp<char *>::clear(v16);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v10);
  std::__list_imp<char *>::clear(v8);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v14);
  return std::__list_imp<char *>::clear(v12);
}

void sub_1B1FB4B14(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v5 + 40));
  std::__list_imp<char *>::clear((void *)(v5 + 8));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v4);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::forward_list<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::erase_after(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 7;
  *a2 = (void *)**a2;
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v4);
  std::__list_imp<char *>::clear(v3 + 3);
  operator delete(v3);
  return (uint64_t)*a2;
}

void *fst::Divide<int,fst::TropicalWeightTpl<float>>@<X0>(int *a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v13 = *a1;
  std::list<int>::list(v14, (uint64_t)(a1 + 2));
  int v15 = a1[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v16, (uint64_t)(a1 + 10));
  int v9 = *a2;
  std::list<int>::list(v10, (uint64_t)(a2 + 2));
  int v11 = a2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v12, (uint64_t)(a2 + 10));
  fst::Divide<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((uint64_t)&v13, (uint64_t)&v9, a3, (uint64_t)&v17);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(a4, &v17);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v19);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v12);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v16);
  return std::__list_imp<char *>::clear(v14);
}

void sub_1B1FB4CC0(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v5 + 40));
  std::__list_imp<char *>::clear((void *)(v5 + 8));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v4);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Quantize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Quantize(a1, (uint64_t)&v5, a3);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(a2, &v5);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v7);
  return std::__list_imp<char *>::clear(v6);
}

void sub_1B1FB4D6C(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 + 40));
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(uint64_t a1, int *a2)
{
  int v5 = *a2;
  std::list<int>::list(v6, (uint64_t)(a2 + 2));
  int v7 = a2[8];
  fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::UnionWeight(a1, &v5);
  std::__list_imp<char *>::clear(v6);
  return a1;
}

void sub_1B1FB4DF4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

float fst::Divide<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    if (*(void *)(a1 + 24)) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = v7 == -2;
    }
    if (v8 || *(float *)(a1 + 32) == -INFINITY) {
      goto LABEL_10;
    }
  }
  else if (*(float *)(a1 + 32) == -INFINITY)
  {
    goto LABEL_10;
  }
  if ((unint64_t)(*(void *)(a1 + 56) + 1) >= 2)
  {
    char v15 = 0;
    uint64_t v16 = (uint64_t *)(a1 + 48);
    BOOL v19 = v7 != -2 || *(void *)(a1 + 24) != 0 || v7 == 0;
LABEL_31:
    uint64_t v20 = *v16;
    while (1)
    {
      char v21 = v15;
      if (v15)
      {
        uint64_t v22 = v20 + 16;
        if (v20 == a1 + 40) {
          break;
        }
      }
      else
      {
        uint64_t v22 = a1;
        if (!v19) {
          break;
        }
      }
      if (*(_DWORD *)v22)
      {
        if (*(_DWORD *)v22 == -2 && *(void *)(v22 + 24) == 0) {
          goto LABEL_66;
        }
      }
      if (*(float *)(v22 + 32) == -INFINITY) {
        goto LABEL_66;
      }
      char v15 = 1;
      if (v21)
      {
        uint64_t v16 = (uint64_t *)(v20 + 8);
        goto LABEL_31;
      }
    }
  }
LABEL_10:
  int v9 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    if (*(void *)(a2 + 24)) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = v9 == -2;
    }
    if (!v10 && *(float *)(a2 + 32) != -INFINITY) {
      goto LABEL_18;
    }
  }
  else if (*(float *)(a2 + 32) != -INFINITY)
  {
LABEL_18:
    if ((unint64_t)(*(void *)(a2 + 56) + 1) < 2) {
      goto LABEL_19;
    }
    char v24 = 0;
    char v25 = (uint64_t *)(a2 + 48);
    BOOL v28 = v9 != -2 || *(void *)(a2 + 24) != 0 || v9 == 0;
LABEL_53:
    uint64_t v29 = *v25;
    while (1)
    {
      char v30 = v24;
      if (v24)
      {
        uint64_t v31 = v29 + 16;
        if (v29 == a2 + 40) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v31 = a2;
        if (!v28) {
          goto LABEL_19;
        }
      }
      if (*(_DWORD *)v31)
      {
        if (*(_DWORD *)v31 == -2 && *(void *)(v31 + 24) == 0) {
          break;
        }
      }
      if (*(float *)(v31 + 32) == -INFINITY) {
        break;
      }
      char v24 = 1;
      if (v30)
      {
        char v25 = (uint64_t *)(v29 + 8);
        goto LABEL_53;
      }
    }
LABEL_66:
    uint64_t v33 = (_DWORD *)fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight();
    *(_DWORD *)a4 = *v33;
    std::list<int>::list((void *)(a4 + 8), (uint64_t)(v33 + 2));
    *(_DWORD *)(a4 + 32) = v33[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a4 + 40), (uint64_t)(v33 + 10));
    return result;
  }
LABEL_19:
  uint64_t v11 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
  if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)a1, v11) & 1) != 0|| (uint64_t v12 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero(), fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)a2, v12)))
  {
    int v13 = (_DWORD *)fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
    *(_DWORD *)a4 = *v13;
    std::list<int>::list((void *)(a4 + 8), (uint64_t)(v13 + 2));
    *(_DWORD *)(a4 + 32) = v13[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a4 + 40), (uint64_t)(v13 + 10));
    return result;
  }
  int v34 = (void *)(a2 + 40);
  BOOL v35 = *(_DWORD *)a2 == -2 && !*(void *)(a2 + 24) || *(float *)(a2 + 32) == -INFINITY;
  uint64_t v36 = *(void *)(a1 + 48);
  uint64_t v37 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
  *(_DWORD *)a4 = *v37;
  std::list<int>::list((void *)(a4 + 8), (uint64_t)(v37 + 2));
  *(_DWORD *)(a4 + 32) = v37[8];
  *(void *)(a4 + 40) = a4 + 40;
  *(void *)(a4 + 48) = a4 + 40;
  *(void *)(a4 + 56) = 0;
  if (*(_DWORD *)a1)
  {
    if (*(void *)(a1 + 24)) {
      BOOL v38 = 0;
    }
    else {
      BOOL v38 = *(_DWORD *)a1 == -2;
    }
    if (v38 || (float result = *(float *)(a1 + 32), result == -INFINITY))
    {
LABEL_80:
      if (*(_DWORD *)a2)
      {
        if (*(void *)(a2 + 24)) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = *(_DWORD *)a2 == -2;
        }
        if (!v39)
        {
          float result = *(float *)(a2 + 32);
          if (result != -INFINITY)
          {
LABEL_88:
            uint64_t v40 = *(void *)(a2 + 56);
            if (!v40)
            {
              for (uint64_t i = v36; ; uint64_t i = *(void *)(v54 + 8))
              {
                uint64_t v53 = i + 16;
                uint64_t v54 = i;
                do
                {
                  char v47 = v40;
                  if (v40)
                  {
                    uint64_t v48 = v53;
                    if (v54 == a1 + 40) {
                      return result;
                    }
                  }
                  else if (*(_DWORD *)a1)
                  {
                    if (*(void *)(a1 + 24)) {
                      BOOL v49 = 0;
                    }
                    else {
                      BOOL v49 = *(_DWORD *)a1 == -2;
                    }
                    if (v49) {
                      return result;
                    }
                    float result = *(float *)(a1 + 32);
                    uint64_t v48 = a1;
                    if (result == -INFINITY) {
                      return result;
                    }
                  }
                  else
                  {
                    float result = *(float *)(a1 + 32);
                    uint64_t v48 = a1;
                    if (result == -INFINITY) {
                      return result;
                    }
                  }
                  if (v34 == *(void **)(a2 + 48)) {
                    uint64_t v50 = a2;
                  }
                  else {
                    uint64_t v50 = *(void *)(a2 + 40) + 16;
                  }
                  fst::Divide<int,(fst::StringType)2>((int *)v48, (int *)v50, a3, (uint64_t)&v60);
                  float v51 = *(float *)(v48 + 32);
                  float v52 = NAN;
                  if (v51 != -INFINITY)
                  {
                    if ((*(_DWORD *)(v50 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                    {
                      float v52 = INFINITY;
                      if (v51 != INFINITY) {
                        float v52 = v51 - *(float *)(v50 + 32);
                      }
                    }
                    else
                    {
                      float v52 = NAN;
                    }
                  }
                  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)v56, &v60, v52);
                  std::__list_imp<char *>::clear(v61);
                  fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a4, (uint64_t)v56, 1);
                  std::__list_imp<char *>::clear(v57);
                  LOBYTE(v40) = 1;
                }
                while ((v47 & 1) == 0);
              }
            }
          }
        }
      }
      else
      {
        float result = *(float *)(a2 + 32);
        if (result != -INFINITY) {
          goto LABEL_88;
        }
      }
      uint64_t v41 = fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::NoWeight();
      fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::operator=(a4, v41);
      return result;
    }
  }
  else
  {
    float result = *(float *)(a1 + 32);
    if (result == -INFINITY) {
      goto LABEL_80;
    }
  }
  if (*(void *)(a1 + 56)) {
    goto LABEL_80;
  }
  if (!v35)
  {
    float v42 = *(void **)(a2 + 48);
    while (1)
    {
      uint64_t v43 = a2;
      if (v34 != v42) {
        uint64_t v43 = *v34 + 16;
      }
      fst::Divide<int,(fst::StringType)2>((int *)a1, (int *)v43, a3, (uint64_t)&v60);
      float v44 = *(float *)(a1 + 32);
      float v45 = NAN;
      if (v44 != -INFINITY)
      {
        if ((*(_DWORD *)(v43 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          float v45 = INFINITY;
          if (v44 != INFINITY) {
            float v45 = v44 - *(float *)(v43 + 32);
          }
        }
        else
        {
          float v45 = NAN;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)v58, &v60, v45);
      std::__list_imp<char *>::clear(v61);
      fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a4, (uint64_t)v58, 1);
      std::__list_imp<char *>::clear(v59);
      float v42 = *(void **)(a2 + 48);
      if (v34 == v42) {
        break;
      }
      int v34 = (void *)*v34;
    }
  }
  return result;
}

void sub_1B1FB541C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, void *a11)
{
}

float *fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Quantize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  char v6 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
  *(_DWORD *)a2 = *v6;
  float result = (float *)std::list<int>::list((void *)(a2 + 8), (uint64_t)(v6 + 2));
  char v8 = 0;
  *(_DWORD *)(a2 + 32) = v6[8];
  *(void *)(a2 + 40) = a2 + 40;
  *(void *)(a2 + 48) = a2 + 40;
  *(void *)(a2 + 56) = 0;
  int v9 = (uint64_t *)(a1 + 48);
LABEL_2:
  uint64_t v10 = *v9;
  uint64_t v11 = *v9 + 16;
  while (1)
  {
    char v12 = v8;
    if (v8)
    {
      float result = (float *)v11;
      if (v10 == a1 + 40) {
        return result;
      }
      goto LABEL_5;
    }
    if (*(_DWORD *)a1)
    {
      if (*(_DWORD *)a1 == -2 && *(void *)(a1 + 24) == 0) {
        return result;
      }
    }
    float v14 = *(float *)(a1 + 32);
    float result = (float *)a1;
    if (v14 >= -INFINITY && v14 <= -INFINITY) {
      return result;
    }
LABEL_5:
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Quantize(result, (uint64_t)v15, a3);
    fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::PushBack((float *)a2, (uint64_t)v15, 1);
    float result = (float *)std::__list_imp<char *>::clear(v16);
    char v8 = 1;
    if (v12)
    {
      int v9 = (uint64_t *)(v10 + 8);
      goto LABEL_2;
    }
  }
}

void sub_1B1FB559C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, int **a2)
{
  uint64_t State = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::FindState(*(void **)(a1 + 184), (void **)a2);
  uint64_t v5 = State;
  if (*(void *)(a1 + 152))
  {
    char v6 = *(uint64_t **)(a1 + 160);
    if ((int)State >= (unint64_t)((v6[1] - *v6) >> 6))
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (uint64_t)&v10);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v8 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>(v6, (uint64_t)&v10);
      }
      else
      {
        std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>((uint64_t)(v6 + 2), v6[1], (uint64_t)&v10);
        uint64_t v8 = v7 + 64;
        v6[1] = v7 + 64;
      }
      v6[1] = v8;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v12);
      std::__list_imp<char *>::clear(v11);
    }
  }
  return v5;
}

void sub_1B1FB568C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)va1);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::FindState(void *a1, void **a2)
{
  uint64_t v6 = a2;
  uint64_t v2 = (a1[12] - a1[11]) >> 3;
  uint64_t Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v6, 1);
  if (Id != v2)
  {
    uint64_t v4 = v6;
    if (v6)
    {
      std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::clear(v6);
      MEMORY[0x1B3EA8670](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

uint64_t *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::ComputeDistance@<X0>(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  *(_DWORD *)a3 = *v5;
  std::list<int>::list((void *)(a3 + 8), (uint64_t)(v5 + 2));
  *(_DWORD *)(a3 + 32) = v5[8];
  float result = std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), (uint64_t)(v5 + 10));
  for (uint64_t i = *a2; i; uint64_t i = *(int **)i)
  {
    unint64_t v8 = i[2];
    uint64_t v9 = **(void **)(a1 + 152);
    if (v8 >= (*(void *)(*(void *)(a1 + 152) + 8) - v9) >> 6) {
      uint64_t v10 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
    }
    else {
      uint64_t v10 = (int *)(v9 + (v8 << 6));
    }
    int v26 = *v10;
    std::list<int>::list(v27, (uint64_t)(v10 + 2));
    int v28 = v10[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v29, (uint64_t)(v10 + 10));
    fst::Times<int,fst::TropicalWeightTpl<float>>(i + 4, &v26, (uint64_t)&v17);
    fst::Plus<int,fst::TropicalWeightTpl<float>>((int *)a3, &v17, (uint64_t)&v20);
    *(_DWORD *)a3 = v20;
    if (&v20 != (int *)a3) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v21[1], (uint64_t)v21);
    }
    *(_DWORD *)(a3 + 32) = v22;
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(a3 + 40));
    uint64_t v11 = v25;
    if (v25)
    {
      uint64_t v13 = v23;
      char v12 = v24;
      uint64_t v14 = *v24;
      *(void *)(v14 + 8) = *(void *)(v23 + 8);
      **(void **)(v13 + 8) = v14;
      uint64_t v15 = *(void *)(a3 + 40);
      *(void *)(v15 + 8) = v12;
      void *v12 = v15;
      *(void *)(a3 + 40) = v13;
      *(void *)(v13 + 8) = a3 + 40;
      *(void *)(a3 + 56) += v11;
      uint64_t v25 = 0;
    }
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v23);
    std::__list_imp<char *>::clear(v21);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v19);
    std::__list_imp<char *>::clear(v18);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v29);
    float result = std::__list_imp<char *>::clear(v27);
  }
  return result;
}

void sub_1B1FB5910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(void *a1, void *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  uint64_t v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, (int *)&fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  uint64_t v10 = (void *)a1[11];
  uint64_t v11 = ((uint64_t)v10 - v9) >> 3;
  unsigned int v23 = v11;
  unint64_t v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v12 - v9;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v15 = v11 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    }
    else {
      int v17 = 0;
    }
    char v18 = &v17[8 * v11];
    BOOL v19 = &v17[8 * v16];
    *(void *)char v18 = *a2;
    uint64_t v13 = v18 + 8;
    char v21 = (char *)a1[10];
    int v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      int v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    void *v10 = *a2;
    uint64_t v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  uint64_t v4 = *a2;
  if ((int)v4 < -1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v5 = a1[4];
    if (v4 == -1) {
      uint64_t v6 = *(uint64_t ****)(v5 + 104);
    }
    else {
      uint64_t v6 = (uint64_t ***)(*(void *)(v5 + 80) + 8 * v4);
    }
    unint64_t v7 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v5, *v6);
  }
  int8x8_t v8 = (int8x8_t)a1[1];
  if (!*(void *)&v8) {
    return 0;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v11 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v8 - 1) & v7;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = a1 + 6;
    do
    {
      unint64_t v15 = v13[1];
      if (v15 == v7)
      {
        if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v14, *((_DWORD *)v13 + 4), *a2))return v13; {
      }
        }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(void *)&v8) {
            v15 %= *(void *)&v8;
          }
        }
        else
        {
          v15 &= *(void *)&v8 - 1;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      uint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1) {
    return a2 == a3;
  }
  uint64_t v3 = *a1;
  if (a2 == -1) {
    uint64_t v4 = *(uint64_t **)(v3 + 104);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 80) + 8 * a2);
  }
  uint64_t v6 = *v4;
  if (a3 == -1) {
    unint64_t v7 = *(uint64_t ***)(v3 + 104);
  }
  else {
    unint64_t v7 = (uint64_t **)(*(void *)(v3 + 80) + 8 * a3);
  }
  if (*((unsigned __int8 *)*v7 + 8) == *(unsigned __int8 *)(v6 + 8)) {
    return std::operator==[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::allocator<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>(*v7, (uint64_t *)v6);
  }
  else {
    return 0;
  }
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *((char *)a2 + 8);
  uint64_t v3 = (int *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v4 = 0;
      unint64_t v5 = v3[2];
      uint64_t v6 = v3 + 4;
      uint64_t v7 = *((void *)v3 + 8);
      if (!*v6 || (*v6 == -2 ? (BOOL v9 = *((void *)v3 + 5) == 0) : (BOOL v9 = 0), !v9))
      {
        if (*((float *)v3 + 12) != -INFINITY)
        {
          uint64_t v8 = fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(v3 + 4);
          while (1)
          {
            v4 ^= v8;
            if ((int *)v7 == v3 + 14) {
              break;
            }
            uint64_t v8 = fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash((int *)(v7 + 16)) ^ (2 * v4);
            uint64_t v7 = *(void *)(v7 + 8);
          }
        }
      }
      v2 ^= (2 * v2) ^ (32 * v5) ^ (v5 >> 59) ^ v4;
      uint64_t v3 = *(int **)v3;
    }
    while (v3);
  }
  return v2;
}

uint64_t std::operator==[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::allocator<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>(uint64_t *a1, uint64_t *a2)
{
  while (1)
  {
    a1 = (uint64_t *)*a1;
    a2 = (uint64_t *)*a2;
    if (!a1 || a2 == 0) {
      break;
    }
    if (*((_DWORD *)a1 + 2) != *((_DWORD *)a2 + 2)
      || (fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)a1 + 4, (uint64_t)(a2 + 2)) & 1) == 0)
    {
      return 0;
    }
  }
  return (a1 != 0) ^ (a2 == 0);
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v7 = *a2;
  if ((int)v7 < -1)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v7 == -1) {
      BOOL v9 = *(uint64_t ****)(v8 + 104);
    }
    else {
      BOOL v9 = (uint64_t ***)(*(void *)(v8 + 80) + 8 * v7);
    }
    unint64_t v10 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v8, *v9);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  char v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_44:
    void *v24 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    char v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1FB6024(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  unint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v11 = v8;
  uint8x8_t v12 = &v8[64 * v3];
  uint64_t v14 = &v8[64 * v7];
  std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  unint64_t v13 = v12 + 64;
  std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~__split_buffer(&v11);
  return v9;
}

void sub_1B1FB6114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  std::list<int>::list((void *)(a2 + 8), a3 + 8);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(void *)(a2 + 40) = a2 + 40;
  *(void *)(a2 + 48) = a2 + 40;
  *(void *)(a2 + 56) = 0;
  return std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice(a2 + 40, (uint64_t *)(a2 + 40), (void *)(a3 + 40));
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 16;
      std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4> const&>(a1, v7 - 64, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 64;
      *((void *)&v16 + 1) -= 64;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B1FB62BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4> const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)a2 = *a3;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)(a3 + 2));
  *(_DWORD *)(a2 + 32) = a3[8];
  return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a2 + 40), (uint64_t)(a3 + 10));
}

void sub_1B1FB6328(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  while (v1 != v2)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 + 40));
    uint64_t result = std::__list_imp<char *>::clear((void *)(v1 + 8));
    v1 += 64;
  }
  return result;
}

void **std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    do
    {
      v4[2] = v2 - 64;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v2 - 24));
      uint64_t result = std::__list_imp<char *>::clear((void *)(v2 - 56));
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, a2[1]);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(a2 + 11);
    std::__list_imp<char *>::clear(a2 + 7);
    operator delete(a2);
  }
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

uint64_t *fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 64))(&v11, a1, a2);
    int v7 = v11;
    std::list<int>::list(v8, (uint64_t)v12);
    int v9 = v13;
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v10, (uint64_t)v14);
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v7);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v10);
    std::__list_imp<char *>::clear(v8);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v14);
    std::__list_imp<char *>::clear(v12);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final(a1, a2, a3);
}

void sub_1B1FB6678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v16);
  std::__list_imp<char *>::clear(v15);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)va);
  std::__list_imp<char *>::clear(v14);
  _Unwind_Resume(a1);
}

unint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*(void *)v5 + 88) - *(void *)(*(void *)v5 + 80)) >> 4);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 64);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 72);
}

void *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A3B858;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B1FB6918(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *(void *)(v19 + 80);
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v19 + 88) - v8) >> 4);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      uint8x8_t v12 = (int *)(v8 + 80 * v20 + 72);
      do
      {
        int v14 = *v12;
        v12 += 20;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*(_DWORD *)(v19 + 108);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1FB6AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *fst::ArcIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ArcIterator(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++MutableState[27];
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1FB6B54(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 108);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InitArcIterator(a1, a2, a3);
  }
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FactorWeightFst()
{
}

void sub_1B1FB6C60(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~FactorWeightFst(void *a1)
{
  fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Start(uint64_t a1)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Start(*(void *)(a1 + 8));
}

uint64_t *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Final(*(void *)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Copy()
{
}

void sub_1B1FB6E40(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::InitStateIterator()
{
}

void sub_1B1FB6F34(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1FB717C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  unint64_t v21 = v19;
  uint64_t v22 = (uint64_t)(v19 - 5);
  uint64_t v23 = *v21;
  if (*v21)
  {
    v18[30] = v23;
    operator delete(v23);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::~__hash_table(v22);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~FactorWeightFstImpl(uint64_t a1)
{
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~FactorWeightFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2 + 8);
      std::__list_imp<char *>::clear(v2 + 4);
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__base_destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = result[1]; i != a2; i -= 72)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(i - 24));
    uint64_t result = std::__list_imp<char *>::clear((void *)(i - 56));
  }
  v3[1] = a2;
  return result;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~FactorWeightFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3EF70;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(void *)(a1 + 240) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::~__hash_table(a1 + 192);
  unint64_t v5 = (void **)(a1 + 168);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Start(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
  {
    *(unsigned char *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result != -1)
  {
    int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
    BOOL v4 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
    int v6 = *v4;
    std::list<int>::list(v7, (uint64_t)(v4 + 2));
    int v8 = v4[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v9, (uint64_t)(v4 + 10));
    fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element::Element((uint64_t)v10, v3, &v6);
    int State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FindState(a1, v10);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v12);
    std::__list_imp<char *>::clear(v11);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v9);
    std::__list_imp<char *>::clear(v7);
    *(_DWORD *)(a1 + 64) = State;
    *(unsigned char *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= State) {
      *(_DWORD *)(a1 + 68) = State + 1;
    }
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

void sub_1B1FB7630(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v3 + 48));
  std::__list_imp<char *>::clear((void *)(v3 + 16));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FindState(uint64_t a1, int *a2)
{
  if ((*(unsigned char *)(a1 + 148) & 2) != 0
    || (uint64_t v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One(),
        !fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(a2 + 2, v4))|| (int v5 = *a2, *a2 == -1))
  {
    unint64_t v20 = std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>((void *)(a1 + 192), a2);
    if (v20)
    {
      return *((unsigned int *)v20 + 22);
    }
    else
    {
      unint64_t v22 = *(void *)(a1 + 176);
      unsigned int v27 = 954437177 * ((v22 - *(void *)(a1 + 168)) >> 3);
      if (v22 >= *(void *)(a1 + 184))
      {
        uint64_t v23 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>((uint64_t *)(a1 + 168), a2);
      }
      else
      {
        std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>::construct[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>(a1 + 184, v22, a2);
        uint64_t v23 = v22 + 72;
        *(void *)(a1 + 176) = v22 + 72;
      }
      *(void *)(a1 + 176) = v23;
      std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>::pair[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&,int &,0>((uint64_t)v24, a2, &v27);
      std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>>(a1 + 192, v24, v24);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v26);
      std::__list_imp<char *>::clear(v25);
      return v27;
    }
  }
  else
  {
    uint64_t v6 = v5;
    unint64_t v7 = *(char **)(a1 + 232);
    int v8 = *(char **)(a1 + 240);
    unint64_t v9 = (v8 - v7) >> 2;
    if (v9 <= v5)
    {
      uint64_t v10 = (void *)(a1 + 248);
      do
      {
        if ((unint64_t)v8 >= *v10)
        {
          unint64_t v12 = v9 + 1;
          if ((v9 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = *v10 - (void)v7;
          if (v13 >> 1 > v12) {
            unint64_t v12 = v13 >> 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v14);
            unint64_t v7 = *(char **)(a1 + 232);
            int v8 = *(char **)(a1 + 240);
          }
          else
          {
            int v15 = 0;
          }
          uint64_t v16 = &v15[4 * v9];
          *(_DWORD *)uint64_t v16 = -1;
          int v11 = v16 + 4;
          while (v8 != v7)
          {
            int v17 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v16 - 1) = v17;
            v16 -= 4;
          }
          *(void *)(a1 + 232) = v16;
          *(void *)(a1 + 240) = v11;
          *(void *)(a1 + 248) = &v15[4 * v14];
          if (v7)
          {
            operator delete(v7);
            unint64_t v7 = *(char **)(a1 + 232);
          }
          else
          {
            unint64_t v7 = v16;
          }
        }
        else
        {
          *(_DWORD *)int v8 = -1;
          int v11 = v8 + 4;
        }
        *(void *)(a1 + 240) = v11;
        unint64_t v9 = (v11 - v7) >> 2;
        int v5 = *a2;
        int v8 = v11;
      }
      while (v9 <= *a2);
      uint64_t v6 = v5;
    }
    if (*(_DWORD *)&v7[4 * v6] == -1)
    {
      unint64_t v18 = *(void *)(a1 + 176);
      *(_DWORD *)&v7[4 * v6] = 954437177 * ((v18 - *(void *)(a1 + 168)) >> 3);
      if (v18 >= *(void *)(a1 + 184))
      {
        uint64_t v19 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>((uint64_t *)(a1 + 168), a2);
      }
      else
      {
        std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>::construct[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>(a1 + 184, v18, a2);
        uint64_t v19 = v18 + 72;
        *(void *)(a1 + 176) = v18 + 72;
      }
      *(void *)(a1 + 176) = v19;
      int v5 = *a2;
      unint64_t v7 = *(char **)(a1 + 232);
    }
    return *(unsigned int *)&v7[4 * v5];
  }
}

void sub_1B1FB78F0(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 176) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>(uint64_t *a1, _DWORD *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  int v11 = &v7[72 * v3];
  uint64_t v13 = &v7[72 * v6];
  std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>::construct[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 72;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element> &>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1FB7A38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>::construct[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)a2 = *a3;
  *(_DWORD *)(a2 + 8) = a3[2];
  std::list<int>::list((void *)(a2 + 16), (uint64_t)(a3 + 4));
  *(_DWORD *)(a2 + 40) = a3[10];
  return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a2 + 48), (uint64_t)(a3 + 12));
}

void sub_1B1FB7AAC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      v9 -= 18;
      std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>::construct[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&>(a1, v7 - 72, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 72;
      *((void *)&v16 + 1) -= 72;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B1FB7BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  while (v1 != v2)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 + 48));
    uint64_t result = std::__list_imp<char *>::clear((void *)(v1 + 16));
    v1 += 72;
  }
  return result;
}

void **std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element> &>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element> &>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    do
    {
      v4[2] = v2 - 72;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v2 - 24));
      uint64_t result = std::__list_imp<char *>::clear((void *)(v2 - 56));
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>(void *a1, int *a2)
{
  unint64_t v4 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey::operator()((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v12 = i[1];
    if (v12 == v6)
    {
      if (*((_DWORD *)i + 4) == *a2
        && (fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)i + 6, (uint64_t)(a2 + 2)) & 1) != 0)
      {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey::operator()(uint64_t a1, int *a2)
{
  uint64_t v2 = 0;
  int v3 = *a2;
  unint64_t v4 = a2 + 2;
  int8x8_t v5 = a2 + 12;
  uint64_t v6 = *((void *)a2 + 7);
  if (!*v4)
  {
    if (*((float *)a2 + 10) == -INFINITY) {
      return v2 + 7853 * v3;
    }
    goto LABEL_12;
  }
  if (*((void *)a2 + 4)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *v4 == -2;
  }
  if (!v8 && *((float *)a2 + 10) != -INFINITY)
  {
LABEL_12:
    uint64_t v7 = fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(a2 + 2);
    while (1)
    {
      v2 ^= v7;
      if ((int *)v6 == v5) {
        break;
      }
      uint64_t v7 = fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash((int *)(v6 + 16)) ^ (2 * v2);
      uint64_t v6 = *(void *)(v6 + 8);
    }
  }
  return v2 + 7853 * v3;
}

uint64_t *std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>>(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey::operator()(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (*((_DWORD *)i + 4) == *a2
            && (fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)i + 6, (uint64_t)(a2 + 2)) & 1) != 0)
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::__construct_node_hash<std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (uint64_t *)v25[0];
  ++*v7;
  return i;
}

void sub_1B1FB8170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::__construct_node_hash<std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>::pair[abi:ne180100]((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1FB8204(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>::pair[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = a2[2];
  std::list<int>::list((void *)(a1 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(a1 + 40) = a2[10];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(a2 + 12));
  *(_DWORD *)(a1 + 72) = a2[18];
  return a1;
}

void sub_1B1FB828C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,void *>>>::operator()[abi:ne180100](uint64_t a1, uint64_t *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(__p + 8);
    std::__list_imp<char *>::clear(__p + 4);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const,int>::pair[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element const&,int &,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = a2[2];
  std::list<int>::list((void *)(a1 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(a1 + 40) = a2[10];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(a2 + 12));
  *(_DWORD *)(a1 + 72) = *a3;
  return a1;
}

void sub_1B1FB836C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element::Element(uint64_t a1, int a2, _DWORD *a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = *a3;
  std::list<int>::list((void *)(a1 + 16), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 40) = a3[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(a3 + 10));
  return a1;
}

void sub_1B1FB83E0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasFinal(a1, a2) & 1) == 0)
  {
    uint64_t v6 = (int *)(*(void *)(a1 + 168) + 72 * a2);
    int v8 = *v6;
    uint64_t v7 = v6 + 2;
    if (v8 == -1)
    {
      int v28 = *v7;
      std::list<int>::list(v29, (uint64_t)(v7 + 2));
      int v30 = v7[8];
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v31, (uint64_t)(v7 + 10));
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v22);
      fst::Times<int,fst::TropicalWeightTpl<float>>(v7, (int *)&v22, (uint64_t)&v28);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v27);
      std::__list_imp<char *>::clear(&v23);
    }
    fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicFactor((uint64_t)&v22, &v28);
    if ((*(unsigned char *)(a1 + 148) & 1) == 0 || v26) {
      goto LABEL_12;
    }
    if (v24)
    {
      if (*(_DWORD *)v22 == -2 && !*(void *)(v22 + 24)) {
        goto LABEL_12;
      }
      float v9 = *(float *)(v22 + 32);
      if (v9 >= -INFINITY && v9 <= -INFINITY) {
        goto LABEL_12;
      }
    }
    else if (v25 == v23)
    {
LABEL_12:
      int v18 = v28;
      unint64_t v10 = v19;
      std::list<int>::list(v19, (uint64_t)v29);
      int v20 = v30;
      uint8x8_t v11 = v21;
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v21, (uint64_t)v31);
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v18);
LABEL_15:
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v11);
      std::__list_imp<char *>::clear(v10);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v31);
      std::__list_imp<char *>::clear(v29);
      return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final(a1, a2, a3);
    }
    unint64_t v12 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
    int v14 = *v12;
    unint64_t v10 = v15;
    std::list<int>::list(v15, (uint64_t)(v12 + 2));
    int v16 = v12[8];
    uint8x8_t v11 = v17;
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v17, (uint64_t)(v12 + 10));
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v14);
    goto LABEL_15;
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final(a1, a2, a3);
}

void sub_1B1FB8614(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v3 - 88));
  std::__list_imp<char *>::clear((void *)(v3 - 120));
  _Unwind_Resume(a1);
}

uint64_t fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicFactor(uint64_t result, int *a2)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a2 + 10;
  *(unsigned char *)(result + 16) = 1;
  *(void *)(result + ++*(_DWORD *)(result + 24) = *((void *)a2 + 6);
  int v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *((void *)a2 + 3);
    if (v3) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = v2 == -2;
    }
    BOOL v5 = 1;
    if (!v4)
    {
      float v6 = *((float *)a2 + 8);
      if (v6 != -INFINITY)
      {
        uint64_t v7 = *((void *)a2 + 7);
        if (v7 != -1)
        {
          BOOL v5 = 0;
          BOOL v8 = !v3 && v2 == -2;
          if (!v8 && v6 != -INFINITY && !v7)
          {
            uint64_t v9 = *((void *)a2 + 3);
LABEL_17:
            BOOL v5 = (unint64_t)(v9 + 1) < 2;
          }
        }
      }
    }
  }
  else
  {
    BOOL v5 = 1;
    if (*((float *)a2 + 8) != -INFINITY)
    {
      uint64_t v9 = *((void *)a2 + 7);
      goto LABEL_17;
    }
  }
  *(unsigned char *)(result + 32) = v5;
  return result;
}

unint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*(void *)v5 + 88) - *(void *)(*(void *)v5 + 80)) >> 4);
}

void *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Expand(uint64_t a1, int a2)
{
  uint64_t v3 = (int *)(*(void *)(a1 + 168) + 72 * a2);
  int v86 = *v3;
  int v87 = v3[2];
  std::list<int>::list(v88, (uint64_t)(v3 + 4));
  int v89 = v3[10];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v90, (uint64_t)(v3 + 12));
  if (v86 == -1) {
    goto LABEL_39;
  }
  uint64_t v4 = *(void *)(a1 + 136);
  unint64_t v85 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
  while (1)
  {
    if (!v81)
    {
      if (v85 >= v83) {
        goto LABEL_37;
      }
LABEL_8:
      uint64_t v5 = (int *)(v82 + 80 * v85);
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v81 + 24))(v81)) {
      break;
    }
    if (!v81) {
      goto LABEL_8;
    }
    uint64_t v5 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v81 + 32))(v81);
LABEL_9:
    fst::Times<int,fst::TropicalWeightTpl<float>>(&v87, v5 + 2, (uint64_t)&v77);
    fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicFactor((uint64_t)&v72, &v77);
    if ((*(unsigned char *)(a1 + 148) & 2) != 0 && !v76)
    {
      int v6 = v74;
      if (v74)
      {
        if (*(_DWORD *)v72 != -2 || *(void *)(v72 + 24))
        {
          float v7 = *(float *)(v72 + 32);
          if (v7 < -INFINITY || v7 > -INFINITY)
          {
            while (1)
            {
LABEL_21:
              if (v6)
              {
                if (*(_DWORD *)v72)
                {
                  if (*(_DWORD *)v72 == -2 && *(void *)(v72 + 24) == 0) {
                    goto LABEL_17;
                  }
                }
                if (*(float *)(v72 + 32) == -INFINITY) {
                  goto LABEL_17;
                }
              }
              else if (v75 == v73)
              {
                goto LABEL_17;
              }
              fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Value((uint64_t)&v72, (uint64_t)&v55);
              int v15 = v5[18];
              fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Quantize((uint64_t)&v61, (uint64_t)&v52, *(float *)(a1 + 144));
              fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element::Element((uint64_t)v49, v15, &v52);
              int State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FindState(a1, v49);
              std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v51);
              std::__list_imp<char *>::clear(v50);
              std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v54);
              std::__list_imp<char *>::clear(v53);
              int v18 = *v5;
              int v17 = v5[1];
              int v45 = v55;
              std::list<int>::list(v46, (uint64_t)&v56);
              int v47 = v58;
              std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v48, (uint64_t)&v59);
              fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)v49, v18, v17, &v45, State);
              Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
              fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(MutableState, (uint64_t)v49);
              std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v51);
              std::__list_imp<char *>::clear(v50);
              std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v48);
              std::__list_imp<char *>::clear(v46);
              std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v63);
              std::__list_imp<char *>::clear(v62);
              std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v59);
              std::__list_imp<char *>::clear(&v56);
              if (v74) {
                unsigned __int8 v74 = 0;
              }
              else {
                uint64_t v75 = *(void *)(v75 + 8);
              }
              int v6 = 0;
              if (v76) {
                goto LABEL_17;
              }
            }
          }
        }
      }
      else if (v75 != v73)
      {
        goto LABEL_21;
      }
    }
    int v8 = v5[18];
    uint64_t v9 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
    int v68 = *v9;
    std::list<int>::list(v69, (uint64_t)(v9 + 2));
    int v70 = v9[8];
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v71, (uint64_t)(v9 + 10));
    fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element::Element((uint64_t)&v55, v8, &v68);
    int v10 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FindState(a1, (int *)&v55);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v60);
    std::__list_imp<char *>::clear(v57);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v71);
    std::__list_imp<char *>::clear(v69);
    int v12 = *v5;
    int v11 = v5[1];
    int v64 = v77;
    std::list<int>::list(v65, (uint64_t)v78);
    int v66 = v79;
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v67, (uint64_t)v80);
    fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)&v55, v12, v11, &v64, v10);
    uint64_t v13 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(v13, (uint64_t)&v55);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v60);
    std::__list_imp<char *>::clear(v57);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v67);
    std::__list_imp<char *>::clear(v65);
LABEL_17:
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v80);
    std::__list_imp<char *>::clear(v78);
    if (v81) {
      (*(void (**)(uint64_t))(*(void *)v81 + 40))(v81);
    }
    else {
      ++v85;
    }
  }
  if (v81)
  {
    (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
    goto LABEL_39;
  }
LABEL_37:
  if (v84) {
    --*(_DWORD *)v84;
  }
LABEL_39:
  if (*(unsigned char *)(a1 + 148))
  {
    if (v86 == -1) {
      goto LABEL_45;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v55);
    uint64_t v20 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
    char v21 = fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)&v55, v20);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v59);
    std::__list_imp<char *>::clear(&v56);
    if (v21) {
      goto LABEL_42;
    }
    if (v86 == -1)
    {
LABEL_45:
      int v77 = v87;
      std::list<int>::list(v78, (uint64_t)v88);
      int v79 = v89;
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v80, (uint64_t)v90);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v55);
      fst::Times<int,fst::TropicalWeightTpl<float>>(&v87, (int *)&v55, (uint64_t)&v77);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v59);
      std::__list_imp<char *>::clear(&v56);
    }
    int v23 = *(_DWORD *)(a1 + 152);
    int v24 = *(_DWORD *)(a1 + 156);
    fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicFactor((uint64_t)&v81, &v77);
    if (!(_BYTE)v85)
    {
      uint64_t v25 = v51;
      char v26 = v50;
      unsigned int v27 = v40;
      BOOL v28 = (_BYTE)v83 == 0;
      do
      {
        if (v28)
        {
          if (v84 == v82) {
            break;
          }
        }
        else
        {
          if (*(_DWORD *)v81)
          {
            if (*(_DWORD *)v81 == -2 && *(void *)(v81 + 24) == 0) {
              break;
            }
          }
          float v37 = *(float *)(v81 + 32);
          if (v37 >= -INFINITY && v37 <= -INFINITY) {
            break;
          }
        }
        fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Value((uint64_t)&v81, (uint64_t)&v55);
        fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Quantize((uint64_t)&v61, (uint64_t)&v42, *(float *)(a1 + 144));
        fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element::Element((uint64_t)v49, -1, &v42);
        int v29 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FindState(a1, v49);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v25);
        std::__list_imp<char *>::clear(v26);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
        std::__list_imp<char *>::clear(v43);
        int v39 = v55;
        std::list<int>::list(v27, (uint64_t)&v56);
        v40[6] = v58;
        std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v41, (uint64_t)&v59);
        fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)v49, v23, v24, &v39, v29);
        int v30 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(v30, (uint64_t)v49);
        uint64_t v31 = v25;
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v25);
        uint64_t v32 = v26;
        std::__list_imp<char *>::clear(v26);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v41);
        uint64_t v33 = v27;
        std::__list_imp<char *>::clear(v27);
        int v34 = *(unsigned __int8 *)(a1 + 160);
        int v35 = *(unsigned __int8 *)(a1 + 161);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v63);
        std::__list_imp<char *>::clear(v62);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v59);
        std::__list_imp<char *>::clear(&v56);
        if ((_BYTE)v83) {
          LOBYTE(v83) = 0;
        }
        else {
          uint64_t v84 = *(void *)(v84 + 8);
        }
        v23 += v34;
        v24 += v35;
        BOOL v28 = 1;
        unsigned int v27 = v33;
        char v26 = v32;
        uint64_t v25 = v31;
      }
      while (!(_BYTE)v85);
    }
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v80);
    std::__list_imp<char *>::clear(v78);
  }
LABEL_42:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs(a1, a2);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v90);
  return std::__list_imp<char *>::clear(v88);
}

void sub_1B1FB9034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, void *a10)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v10 + 40));
  std::__list_imp<char *>::clear((void *)(v10 + 8));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(a9);
  std::__list_imp<char *>::clear(a10);
  _Unwind_Resume(a1);
}

void *fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = *(float **)a1;
  }
  else {
    uint64_t v3 = (float *)(*(void *)(a1 + 24) + 16);
  }
  float v41 = *v3;
  std::list<int>::list(v42, (uint64_t)(v3 + 2));
  float v43 = v3[8];
  float v38 = v41;
  std::list<int>::list(v39, (uint64_t)v42);
  char v5 = v41 == 0.0 || (unint64_t)(v42[2] + 1) < 2;
  char v40 = v5;
  fst::StringFactor<int,(fst::StringType)2>::Value((uint64_t)&v38, (uint64_t)&v25);
  int v33 = v25;
  v34[0] = v34;
  v34[1] = v34;
  uint64_t v35 = 0;
  uint64_t v6 = v28;
  if (v28)
  {
    uint64_t v8 = v26;
    float v7 = v27;
    uint64_t v9 = *v27;
    *(void *)(v9 + 8) = *(void *)(v26 + 8);
    **(void **)(v8 + 8) = v9;
    uint64_t v10 = v34[0];
    *(void *)(v34[0] + 8) = v7;
    *float v7 = v10;
    v34[0] = v8;
    *(void *)(v8 + 8) = v34;
    uint64_t v35 = v6;
    uint64_t v28 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v36, &v33, v43);
  std::__list_imp<char *>::clear(v34);
  std::__list_imp<char *>::clear(&v30);
  std::__list_imp<char *>::clear(&v26);
  fst::StringFactor<int,(fst::StringType)2>::Value((uint64_t)&v38, (uint64_t)&v25);
  int v20 = v29;
  v21[0] = v21;
  v21[1] = v21;
  uint64_t v22 = 0;
  uint64_t v11 = v32;
  if (v32)
  {
    uint64_t v13 = v30;
    int v12 = v31;
    uint64_t v14 = *v31;
    *(void *)(v14 + 8) = *(void *)(v30 + 8);
    **(void **)(v13 + 8) = v14;
    uint64_t v15 = v21[0];
    *(void *)(v21[0] + 8) = v12;
    void *v12 = v15;
    v21[0] = v13;
    *(void *)(v13 + 8) = v21;
    uint64_t v22 = v11;
    uint64_t v32 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v23, &v20, 0.0);
  std::__list_imp<char *>::clear(v21);
  std::__list_imp<char *>::clear(&v30);
  std::__list_imp<char *>::clear(&v26);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight((uint64_t)&v25, &v36);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight((uint64_t)&v17, &v23);
  std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,0>(a2, (uint64_t)&v25, (uint64_t)&v17);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v19);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v30);
  std::__list_imp<char *>::clear(&v26);
  std::__list_imp<char *>::clear(v24);
  std::__list_imp<char *>::clear(v37);
  std::__list_imp<char *>::clear(v39);
  return std::__list_imp<char *>::clear(v42);
}

void sub_1B1FB94C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v33 + 40));
  std::__list_imp<char *>::clear((void *)(v33 + 8));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&a31);
  std::__list_imp<char *>::clear(&a27);
  std::__list_imp<char *>::clear(&a22);
  std::__list_imp<char *>::clear((void *)(v34 - 160));
  std::__list_imp<char *>::clear(v32);
  std::__list_imp<char *>::clear(v31);
  _Unwind_Resume(a1);
}

void sub_1B1FB9550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__list_imp<char *>::clear(v31);
  std::__list_imp<char *>::clear(&a31);
  JUMPOUT(0x1B1FB9534);
}

void sub_1B1FB9570()
{
}

void sub_1B1FB9578()
{
}

void *std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~pair(void *a1)
{
  return a1;
}

uint64_t std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::list<int>::list((void *)(a1 + 8), a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = a1 + 40;
  *(void *)(a1 + 48) = a1 + 40;
  *(void *)(a1 + 56) = 0;
  std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice(a1 + 40, (uint64_t *)(a1 + 40), (void *)(a2 + 40));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)a3;
  std::list<int>::list((void *)(a1 + 72), a3 + 8);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a3 + 32);
  *(void *)(a1 + 104) = a1 + 104;
  *(void *)(a1 + 112) = a1 + 104;
  *(void *)(a1 + 120) = 0;
  std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice(a1 + 104, (uint64_t *)(a1 + 104), (void *)(a3 + 40));
  return a1;
}

void sub_1B1FB966C(_Unwind_Exception *a1)
{
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 64);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 72);
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A44668;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1FB97E0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FB9964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v19 = *v17;
  if (*v17)
  {
    v15[30] = v19;
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,int>>>::~__hash_table((uint64_t)v16 + 24);
  std::string __p = v16;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  int v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  int v6 = v5;
  do
  {
    fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *(void *)(v19 + 80);
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v19 + 88) - v8) >> 4);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      int v12 = (int *)(v8 + 80 * v20 + 72);
      do
      {
        int v14 = *v12;
        v12 += 20;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*(_DWORD *)(v19 + 108);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    int v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while (v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1FB9B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>>::ArcIterator(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++MutableState[27];
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Expand(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1FB9BD4(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 108);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InitArcIterator(a1, a2, a3);
  }
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFst()
{
}

void sub_1B1FB9CD8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFst(void *a1)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}