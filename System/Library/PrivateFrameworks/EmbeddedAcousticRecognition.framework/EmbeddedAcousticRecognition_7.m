void sub_1B1E9C484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;

  *(void *)(v27 - 112) = &a23;
  std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 112));
  _Unwind_Resume(a1);
}

void **std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 8 * v6;
    std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B1E9C5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TensorFstCreator::PreprocessFst(uint64_t a1, void *a2)
{
  LODWORD(v4[0]) = 1;
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a2, v4);
  uint64_t v3 = (*(uint64_t (**)(void *))(*(void *)a2 + 112))(a2);
  (*(void (**)(void *, uint64_t))(*(void *)a2 + 288))(a2, v3);
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2);
  v4[6] = &unk_1F0A38370;
  v4[7] = a2;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B1E9C730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  memset(v36, 0, sizeof(v36));
  int v37 = 1065353216;
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      int v10 = *(_DWORD *)(v7 + v8 + 4);
      *(void *)&v34[0] = v7 + v8;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v36, (int *)(v7 + v8), (uint64_t)&std::piecewise_construct, (_DWORD **)v34)+ 5) = v10;
      ++v9;
      uint64_t v7 = *a2;
      v8 += 8;
    }
    while (v9 < (a2[1] - *a2) >> 3);
  }
  memset(v34, 0, sizeof(v34));
  int v35 = 1065353216;
  uint64_t v11 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      int v14 = *(_DWORD *)(v11 + v12 + 4);
      v31 = (_DWORD *)(v11 + v12);
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v34, (int *)(v11 + v12), (uint64_t)&std::piecewise_construct, &v31)+ 5) = v14;
      ++v13;
      uint64_t v11 = *a3;
      v12 += 8;
    }
    while (v13 < (a3[1] - *a3) >> 3);
  }
  unsigned int v33 = 0;
  (*(void (**)(uint64_t, _DWORD **))(*(void *)a1 + 128))(a1, &v31);
  while (1)
  {
    if (!v31)
    {
      if ((int)v33 >= v32) {
        goto LABEL_45;
      }
LABEL_13:
      uint64_t v15 = v33;
      goto LABEL_14;
    }
    if ((*(uint64_t (**)(_DWORD *))(*(void *)v31 + 16))(v31)) {
      break;
    }
    if (!v31) {
      goto LABEL_13;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v31 + 24))();
LABEL_14:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v15, &v30);
    while (((*(uint64_t (**)(uint64_t))(*(void *)v30 + 24))(v30) & 1) == 0)
    {
      long long v29 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 32))(v30);
      v16 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v36, (int *)&v29);
      if (v16)
      {
        if (*((_DWORD *)v16 + 5) == -1)
        {
          if (FLAGS_fst_error_fatal) {
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          }
          v18 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)__p);
          v19 = (void *)fst::cerr(v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input symbol id ", 16);
          v22 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" missing from target vocabulary", 31);
          goto LABEL_36;
        }
        LODWORD(v29) = *((_DWORD *)v16 + 5);
      }
      v17 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v34, (int *)&v29 + 1);
      if (v17)
      {
        if (*((_DWORD *)v17 + 5) == -1)
        {
          if (FLAGS_fst_error_fatal) {
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          }
          v20 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)__p);
          v21 = (void *)fst::cerr(v20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Output symbol id ", 17);
          v23 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" missing from target vocabulary", 31);
LABEL_36:
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          if (v31) {
            (*(void (**)(_DWORD *))(*(void *)v31 + 8))(v31);
          }
          goto LABEL_42;
        }
        DWORD1(v29) = *((_DWORD *)v17 + 5);
      }
      (*(void (**)(uint64_t, long long *))(*(void *)v30 + 88))(v30, &v29);
      (*(void (**)(uint64_t))(*(void *)v30 + 40))(v30);
    }
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
    if (v31) {
      (*(void (**)(_DWORD *))(*(void *)v31 + 32))(v31);
    }
    else {
      ++v33;
    }
  }
  if (v31) {
    (*(void (**)(void))(*(void *)v31 + 8))();
  }
LABEL_45:
  unint64_t v25 = fst::RelabelProperties(v6);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v25, 0x3FFFFFFF0007);
LABEL_42:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v34);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v36);
}

void sub_1B1E9CCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

__n128 kaldi::quasar::TensorFstCreator::Make@<Q0>(kaldi::quasar::TensorFstCreator *this@<X0>, const kaldi::quasar::ComputeEngineItf *a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, const kaldi::quasar::ComputeEngineItf *, char *, void))(*(void *)a2 + 16))(&v19, a2, (char *)this + 104, 0);
  uint64_t v6 = v19;
  uint64_t v19 = 0;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v8 = v19;
    uint64_t v19 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, const kaldi::quasar::ComputeEngineItf *, char *, void))(*(void *)a2 + 16))(&v19, a2, (char *)this + 128, 0);
  uint64_t v9 = v19;
  uint64_t v19 = 0;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v11 = v19;
    uint64_t v19 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, const kaldi::quasar::ComputeEngineItf *, char *, void))(*(void *)a2 + 24))(&v19, a2, (char *)this + 152, 0);
  uint64_t v12 = v19;
  uint64_t v19 = 0;
  uint64_t v13 = *((void *)this + 5);
  *((void *)this + 5) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  long long v15 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)a3 = v15;
  uint64_t v16 = *((void *)this + 5);
  uint64_t v17 = *((void *)this + 6);
  *((void *)this + 5) = 0;
  *(void *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v17;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)((char *)this + 56);
  *(void *)(a3 + 48) = *((void *)this + 9);
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  __n128 result = *((__n128 *)this + 5);
  *(__n128 *)(a3 + 56) = result;
  *(void *)(a3 + 72) = *((void *)this + 12);
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  return result;
}

uint64_t fst::GetLinearSymbolSequence<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>(uint64_t a1, char *a2, uint64_t a3, float *a4, int a5)
{
  __p = 0;
  v54 = 0;
  unint64_t v55 = 0;
  v50 = 0;
  v51 = 0;
  unint64_t v52 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v10 == -1)
  {
    if (a2) {
      *((void *)a2 + 1) = *(void *)a2;
    }
    if (a3) {
      *(void *)(a3 + 8) = *(void *)a3;
    }
    if (a4) {
      *a4 = INFINITY;
    }
  }
  else
  {
    v46 = a2;
    v45 = a4;
    for (float i = 0.0; ; float i = v15)
    {
      float v12 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v10);
      *(float *)v47 = v12;
      int v56 = 2139095040;
      if (v12 != INFINITY) {
        break;
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v10) != 1) {
        goto LABEL_76;
      }
      uint64_t v49 = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v10, v47);
      if (v47[0]) {
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v47[0] + 32))(v47[0]);
      }
      else {
        uint64_t v13 = v47[1] + 16 * v49;
      }
      float v14 = *(float *)(v13 + 8);
      float v15 = NAN;
      if (v14 != -INFINITY && i != -INFINITY)
      {
        BOOL v16 = v14 == INFINITY || i == INFINITY;
        float v17 = i + v14;
        if (v16) {
          float v15 = INFINITY;
        }
        else {
          float v15 = v17;
        }
      }
      int v18 = *(_DWORD *)v13;
      if (*(_DWORD *)v13) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = a5 == 0;
      }
      if (!v19)
      {
        v20 = v54;
        if ((unint64_t)v54 >= v55)
        {
          v22 = __p;
          uint64_t v23 = ((char *)v54 - (unsigned char *)__p) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            goto LABEL_91;
          }
          uint64_t v25 = v55 - (void)__p;
          if ((uint64_t)(v55 - (void)__p) >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            char v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v55, v26);
            v22 = __p;
            v20 = v54;
            int v18 = *(_DWORD *)v13;
          }
          else
          {
            char v27 = 0;
          }
          char v28 = &v27[4 * v23];
          *(_DWORD *)char v28 = v18;
          v21 = v28 + 4;
          while (v20 != v22)
          {
            int v29 = *--v20;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          __p = v28;
          v54 = v21;
          unint64_t v55 = (unint64_t)&v27[4 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          _DWORD *v54 = v18;
          v21 = v20 + 1;
        }
        v54 = v21;
      }
      int v30 = *(_DWORD *)(v13 + 4);
      if (v30 || a5)
      {
        v31 = v51;
        if ((unint64_t)v51 >= v52)
        {
          unsigned int v33 = v50;
          uint64_t v34 = ((char *)v51 - (unsigned char *)v50) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
LABEL_91:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v36 = v52 - (void)v50;
          if ((uint64_t)(v52 - (void)v50) >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v52, v37);
            unsigned int v33 = v50;
            v31 = v51;
            int v30 = *(_DWORD *)(v13 + 4);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = v30;
          int v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *--v31;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          v50 = v39;
          v51 = v32;
          unint64_t v52 = (unint64_t)&v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          _DWORD *v51 = v30;
          int v32 = v31 + 1;
        }
        v51 = v32;
      }
      uint64_t v10 = *(unsigned int *)(v13 + 12);
      if (v47[0])
      {
        (*(void (**)(void))(*(void *)v47[0] + 8))(v47[0]);
      }
      else if (v48)
      {
        --*v48;
      }
    }
    float v41 = NAN;
    if (v12 != -INFINITY && i != -INFINITY)
    {
      if (v12 == INFINITY || i == INFINITY) {
        float v41 = INFINITY;
      }
      else {
        float v41 = i + v12;
      }
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v10))
    {
LABEL_76:
      uint64_t v43 = 0;
      goto LABEL_86;
    }
    if (v46 && &__p != (void **)v46) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v46, (char *)__p, (uint64_t)v54, ((char *)v54 - (unsigned char *)__p) >> 2);
    }
    if (a3 && &v50 != (void **)a3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, (char *)v50, (uint64_t)v51, ((char *)v51 - (unsigned char *)v50) >> 2);
    }
    if (v45) {
      float *v45 = v41;
    }
  }
  uint64_t v43 = 1;
LABEL_86:
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  return v43;
}

void sub_1B1E9D538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::reverse_iterator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::reverse_iterator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::reverse_iterator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::reverse_iterator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::reverse_iterator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::reverse_iterator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::reverse_iterator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::reverse_iterator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::reverse_iterator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::reverse_iterator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>::operator()[abi:ne180100](void *result)
{
  v1 = *(void ***)(result[2] + 8);
  v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__clear[abi:ne180100](void *result)
{
  v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void *std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::resize(void *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = (v3 - *result) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *result + 16 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = v3 - 16;
        uint64_t v8 = (uint64_t (***)(void))(v3 - 16);
        uint64_t v9 = (uint64_t (***)(void))(v3 - 16);
        do
        {
          uint64_t v10 = *v9;
          v9 -= 2;
          uint64_t result = (void *)(*v10)(v8);
          v7 -= 16;
          BOOL v11 = v8 == (uint64_t (***)(void))v6;
          uint64_t v8 = v9;
        }
        while (!v11);
      }
      v2[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return (void *)std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__append(result, v5);
  }
  return result;
}

uint64_t std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__append(void *a1, unint64_t a2)
{
  uint64_t v5 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v4 = v5;
  uint64_t v6 = *(void *)(result - 8);
  if (a2 > (v5 - v6) >> 4)
  {
    unint64_t v7 = a2 + ((v6 - *a1) >> 4);
    if (!(v7 >> 60))
    {
      uint64_t v8 = v4 - *a1;
      if (v8 >> 3 > v7) {
        unint64_t v7 = v8 >> 3;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v7;
      }
      if (v9) {
        std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v9);
      }
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
    }
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (a2) {
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
  }
  a1[1] = v6;
  return result;
}

void sub_1B1E9DAB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

double quasar::TokenInfo::TokenInfo(std::string *this, const quasar::Token *a2)
{
  uint64_t v2 = quasar::Token::Token(this, a2);
  LODWORD(v2[9].__r_.__value_.__r.__words[2]) = 0;
  v2[9].__r_.__value_.__l.__size_ = 0;
  double result = 0.0;
  *(_OWORD *)&v2[10].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v2[10].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v2[11].__r_.__value_.__r.__words[1] = 0u;
  return result;
}

void quasar::TokenInfo::ptree(quasar::TokenInfo *this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::PTree::PTree(a2);
  quasar::PTree::PTree(&Type, this);
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  unsigned int v4 = *((_DWORD *)this + 7);
  int Type = quasar::getType((quasar *)v4);
  std::to_string(&v31, v4);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 1;
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  unsigned int v5 = *((_DWORD *)this + 8);
  int Type = quasar::getType((quasar *)v5);
  std::to_string(&v31, v5);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 1;
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  unsigned int v6 = *((_DWORD *)this + 9);
  int Type = quasar::getType((quasar *)v6);
  std::to_string(&v31, v6);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 1;
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  quasar::PTree::PTree(&Type, (char *)this + 48);
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  float v7 = *((float *)this + 57);
  int Type = quasar::getType(v8, v7);
  std::to_string(&v31, v7);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 1;
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  float v9 = *((float *)this + 58);
  int Type = quasar::getType(v10, v9);
  std::to_string(&v31, v9);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 1;
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  quasar::PTree::PTree((quasar::PTree *)&Type);
  BOOL v11 = (int *)*((void *)this + 30);
  for (float i = (int *)*((void *)this + 31); v11 != i; ++v11)
  {
    int v13 = *v11;
    int v24 = quasar::getType((quasar *)*v11);
    std::to_string(&v25, v13);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    char v29 = 1;
    quasar::PTree::addChild((quasar::PTree *)&Type, (const quasar::PTree *)&v24);
    quasar::PTree::~PTree((quasar::PTree *)&v24);
  }
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::PTree((quasar::PTree *)&v24);
  long long v15 = (float *)*((void *)this + 33);
  for (j = (float *)*((void *)this + 34); v15 != j; ++v15)
  {
    float v17 = *v15;
    int v18 = quasar::getType(v14, *v15);
    std::to_string(&v19, v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    char v23 = 1;
    quasar::PTree::addChild((quasar::PTree *)&v24, (const quasar::PTree *)&v18);
    quasar::PTree::~PTree((quasar::PTree *)&v18);
  }
  quasar::PTree::addChild(a2, (const quasar::PTree *)&v24);
  quasar::PTree::~PTree((quasar::PTree *)&v24);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
}

void sub_1B1E9DDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  quasar::PTree::~PTree((quasar::PTree *)va);
  quasar::PTree::~PTree((quasar::PTree *)va1);
  quasar::PTree::~PTree(v9);
  _Unwind_Resume(a1);
}

void quasar::ChoiceInfo::finalize(quasar::ChoiceInfo *this, const quasar::DecoderPassData *a2, const quasar::SpeechRequestData *a3, quasar::FstLmScorer *a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::LmInfo::LmInfo((uint64_t)v64, 1, (long long *)__p);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (const quasar::DecoderPassData *)((char *)a2 + 232);
  double Latitude = quasar::Location::getLatitude(v8);
  double Weight = quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight(v8);
  uint64_t v11 = *((void *)a3 + 3);
  v62 = 0;
  uint64_t v63 = 0;
  v61 = 0;
  std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(&v61, *(void **)(v11 + 272), *(void **)(v11 + 280), (uint64_t)(*(void *)(v11 + 280) - *(void *)(v11 + 272)) >> 4);
  std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<kaldi::quasar::LmHandle>*>,std::__wrap_iter<std::shared_ptr<kaldi::quasar::LmHandle>*>>((uint64_t *)&v61, v62, *(uint64_t **)(*((void *)a3 + 3) + 296), *(void **)(*((void *)a3 + 3) + 304), (uint64_t)(*(void *)(*((void *)a3 + 3) + 304) - *(void *)(*((void *)a3 + 3) + 296)) >> 4);
  LmeDataStreams = (void **)quasar::SpeechRequestData::getLmeDataStreams(a3);
  memset(v60, 0, sizeof(v60));
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>(v60, *LmeDataStreams, LmeDataStreams[1], ((char *)LmeDataStreams[1] - (char *)*LmeDataStreams) >> 4);
  v57 = 0;
  v58 = 0;
  unint64_t v59 = 0;
  v54 = 0;
  unint64_t v55 = 0;
  int v56 = 0;
  v51 = 0;
  unint64_t v52 = 0;
  v53 = 0;
  uint64_t v14 = *(void *)this;
  uint64_t v13 = *((void *)this + 1);
  if (v13 != *(void *)this)
  {
    v44 = a3;
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = v14 + 288 * v15;
      if (*(int *)(v16 + 224) >= 1)
      {
        uint64_t v17 = v58;
        if ((unint64_t)v58 >= v59)
        {
          uint64_t v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v57, (long long *)v16);
        }
        else
        {
          if (*(char *)(v16 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v58, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
          }
          else
          {
            long long v18 = *(_OWORD *)v16;
            v58->__r_.__value_.__r.__words[2] = *(void *)(v16 + 16);
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          uint64_t v19 = v17 + 1;
        }
        v58 = v19;
        uint64_t v20 = (_DWORD *)(*(void *)this + 288 * v15 + 224);
        uint64_t v21 = v55;
        if (v55 >= v56)
        {
          char v23 = (char *)v54;
          uint64_t v24 = (v55 - (unsigned char *)v54) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            goto LABEL_58;
          }
          uint64_t v26 = v56 - (unsigned char *)v54;
          if ((v56 - (unsigned char *)v54) >> 1 > v25) {
            unint64_t v25 = v26 >> 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v56, v27);
            char v23 = (char *)v54;
            uint64_t v21 = v55;
          }
          else
          {
            uint64_t v28 = 0;
          }
          char v29 = &v28[4 * v24];
          *(_DWORD *)char v29 = *v20;
          uint64_t v22 = v29 + 4;
          while (v21 != v23)
          {
            int v30 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          v54 = v29;
          unint64_t v55 = v22;
          int v56 = &v28[4 * v27];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v55 = *v20;
          uint64_t v22 = v21 + 4;
        }
        unint64_t v55 = v22;
        std::string v31 = v52;
        if (v52 >= v53)
        {
          uint64_t v33 = (char *)v51;
          uint64_t v34 = (v52 - (unsigned char *)v51) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
LABEL_58:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v36 = v53 - (unsigned char *)v51;
          if ((v53 - (unsigned char *)v51) >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v53, v37);
            uint64_t v33 = (char *)v51;
            std::string v31 = v52;
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = v15;
          uint64_t v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          v51 = v39;
          unint64_t v52 = v32;
          v53 = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v52 = v15;
          uint64_t v32 = v31 + 4;
        }
        unint64_t v52 = v32;
        uint64_t v14 = *(void *)this;
        uint64_t v13 = *((void *)this + 1);
      }
      ++v15;
    }
    while (0x8E38E38E38E38E39 * ((v13 - v14) >> 5) > v15);
    if (v57 != v58)
    {
      int64x2_t v49 = vdupq_n_s64(0x4076800000000000uLL);
      v50[0] = quasar::Location::knownOrFallback((uint64_t)&v49, Latitude, Weight);
      v50[1] = v41;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      std::string::basic_string[abi:ne180100]<0>(&v48, "");
      int v42 = *((_DWORD *)v44 + 4);
      memset(v47, 0, sizeof(v47));
      BYTE2(v43) = 1;
      LOWORD(v43) = 257;
      quasar::FstLmScorer::computeLmScore((uint64_t)a4, (int)v60, (int)v50, (long long *)__p, (int)&v57, 1, (int)v64, &v61, 0, &v48, (uint64_t)&v54, v43, v42, (uint64_t)v47, 1);
    }
    if (v51)
    {
      unint64_t v52 = (char *)v51;
      operator delete(v51);
    }
  }
  if (v54)
  {
    unint64_t v55 = (char *)v54;
    operator delete(v54);
  }
  __p[0] = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v60;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v61;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v66 < 0) {
    operator delete((void *)v65[4]);
  }
  __p[0] = v65;
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1E9E788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a17);
  if (__p)
  {
    a64 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  a17 = &a69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a72;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (void *)(v72 - 240);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  quasar::LmInfo::~LmInfo((quasar::LmInfo *)(v72 - 216));
  _Unwind_Resume(a1);
}

void quasar::ChoiceInfo::ptree(quasar::ChoiceInfo *this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::PTree::PTree(a2);
  quasar::PTree::PTree((quasar::PTree *)v18);
  unsigned int v4 = *(quasar::TokenInfo **)this;
  unsigned int v5 = (quasar::TokenInfo *)*((void *)this + 1);
  while (v4 != v5)
  {
    quasar::TokenInfo::ptree(v4, (quasar::PTree *)&__p);
    quasar::PTree::addChild((quasar::PTree *)v18, (const quasar::PTree *)&__p);
    quasar::PTree::~PTree((quasar::PTree *)&__p);
    unsigned int v4 = (quasar::TokenInfo *)((char *)v4 + 288);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "tokens");
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)&__p, (uint64_t)v18, 1);
  if (v13.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  unsigned int v6 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v10, "graphCost");
  float v7 = *((float *)this + 6);
  LODWORD(__p) = quasar::getType(v6, v7);
  std::to_string(&v13, v7);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v10, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v8 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v10, "acousticCost");
  float v9 = *((float *)this + 7);
  LODWORD(__p) = quasar::getType(v8, v9);
  std::to_string(&v13, v9);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v10, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  quasar::PTree::~PTree((quasar::PTree *)v18);
}

void sub_1B1E9EA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  quasar::PTree::~PTree((quasar::PTree *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a27);
  quasar::PTree::~PTree(v27);
  _Unwind_Resume(a1);
}

void quasar::ResultInfo::ptree(quasar::ChoiceInfo **this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::PTree::PTree(a2);
  quasar::PTree::PTree((quasar::PTree *)v15);
  unsigned int v4 = *this;
  unsigned int v5 = this[1];
  while (v4 != v5)
  {
    quasar::ChoiceInfo::ptree(v4, (quasar::PTree *)&__p);
    quasar::PTree::addChild((quasar::PTree *)v15, (const quasar::PTree *)&__p);
    quasar::PTree::~PTree((quasar::PTree *)&__p);
    unsigned int v4 = (quasar::ChoiceInfo *)((char *)v4 + 32);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "choices");
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)&__p, (uint64_t)v15, 1);
  if (v10.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "aligned");
  unsigned int v6 = (quasar *)*((unsigned __int8 *)this + 24);
  LODWORD(__p) = quasar::getType(v6);
  std::to_string(&v10, (int)v6);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  char v14 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v7, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  quasar::PTree::~PTree((quasar::PTree *)v15);
}

void sub_1B1E9EC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  quasar::PTree::~PTree((quasar::PTree *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a27);
  quasar::PTree::~PTree(v27);
  _Unwind_Resume(a1);
}

void quasar::UttInfo::addResult(uint64_t **a1, const void **a2, uint64_t a3, void *a4)
{
  char v8 = (char *)operator new(0x38uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)char v8 = &unk_1F0A5F798;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(void *)&long long v22 = a2;
  float v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, a2, (uint64_t)&std::piecewise_construct, (long long **)&v22);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  std::string v10 = (std::__shared_weak_count *)v9[8];
  v9[7] = (uint64_t)(v8 + 24);
  v9[8] = (uint64_t)v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a4[19])
  {
    uint64_t v11 = (char *)operator new(0x198uLL);
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *(void *)uint64_t v11 = &unk_1F0A61408;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_OWORD *)(v11 + 168) = 0u;
    *(_OWORD *)(v11 + 184) = 0u;
    *(_OWORD *)(v11 + 200) = 0u;
    *(_OWORD *)(v11 + 216) = 0u;
    *(_OWORD *)(v11 + 232) = 0u;
    *(_OWORD *)(v11 + 248) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 264) = 0u;
    *(_OWORD *)(v11 + 280) = 0u;
    *(_OWORD *)(v11 + 296) = 0u;
    *(_OWORD *)(v11 + 312) = 0u;
    *(_OWORD *)(v11 + 328) = 0u;
    *(_OWORD *)(v11 + 344) = 0u;
    *(_OWORD *)(v11 + 360) = 0u;
    *(_OWORD *)(v11 + 376) = 0u;
    *(_OWORD *)(v11 + 392) = 0u;
    quasar::SpeechRequestResultData::SpeechRequestResultData((quasar::SpeechRequestResultData *)(v11 + 24));
    *(void *)&long long v22 = v12;
    *((void *)&v22 + 1) = v11;
    std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList> const&,std::shared_ptr<quasar::SpeechRequestResultData>,void>(a4 + 59, &v22, &v23);
    if (*((void *)&v22 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
    }
    uint64_t v13 = v23;
    uint64_t v15 = a4[61];
    uint64_t v14 = a4[62];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = *(std::__shared_weak_count **)(v13 + 496);
    *(void *)(v13 + 488) = v15;
    *(void *)(v13 + 496) = v14;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (*(void *)(a3 + 216)) {
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
    }
    uint64_t v17 = v23;
    if (!*(void *)(v23 + 152))
    {
      uint64_t v18 = a4[19];
      uint64_t v19 = operator new(0x28uLL);
      v19[1] = 0;
      v19[2] = 0;
      void *v19 = &unk_1F0A5E730;
      uint64_t v20 = *(void *)(v18 + 8);
      v19[4] = v20;
      ++*(_DWORD *)(v20 + 56);
      v19[3] = &unk_1F0A46010;
      uint64_t v21 = *(std::__shared_weak_count **)(v17 + 160);
      *(void *)(v17 + 152) = v19 + 3;
      *(void *)(v17 + 160) = v19;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }
    quasar::Decoder::populateResultInfo();
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_1B1E9EFCC(_Unwind_Exception *a1)
{
  unsigned int v4 = *(std::__shared_weak_count **)(v2 - 88);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unsigned int v5 = *(std::__shared_weak_count **)(v2 - 72);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::UttInfo::finalize(quasar::UttInfo *this, const quasar::DecoderPassData *a2, const quasar::DecoderChainOutput *a3, const quasar::SpeechRequestData *a4, quasar::FstLmScorer *a5)
{
  int v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)a2 + 16) + 24))(*(void *)(*(void *)a2 + 16));
  int v11 = *((_DWORD *)a4 + 2);
  int v12 = v11 * v10;
  int v13 = (*((_DWORD *)a3 + 144) + v11) * v10;
  *((_DWORD *)this + 6) = v12;
  *((_DWORD *)this + 7) = v13;
  uint64_t v16 = *(char **)this;
  uint64_t v14 = (char *)this + 8;
  uint64_t v15 = v16;
  if (v16 != v14)
  {
    do
    {
      uint64_t v17 = (quasar::ChoiceInfo **)*((void *)v15 + 7);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      while (v18 != v19)
      {
        quasar::ChoiceInfo::finalize(v18, a2, a4, a5);
        uint64_t v18 = (quasar::ChoiceInfo *)((char *)v18 + 32);
      }
      uint64_t v20 = (char *)*((void *)v15 + 1);
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = *(char **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (char *)*((void *)v15 + 2);
          BOOL v22 = *(void *)v21 == (void)v15;
          uint64_t v15 = v21;
        }
        while (!v22);
      }
      uint64_t v15 = v21;
    }
    while (v21 != v14);
  }
}

void quasar::UttInfo::ptree(quasar::UttInfo *this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::PTree::PTree(a2);
  quasar::PTree::PTree((quasar::PTree *)v18);
  unsigned int v4 = *(quasar::UttInfo **)this;
  if (*(quasar::UttInfo **)this != (quasar::UttInfo *)((char *)this + 8))
  {
    do
    {
      quasar::ResultInfo::ptree(*((quasar::ChoiceInfo ***)v4 + 7), (quasar::PTree *)&__p);
      quasar::PTree::putChild((uint64_t)v18, (uint64_t)v4 + 32, (uint64_t)&__p, 1);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      unsigned int v5 = (quasar::UttInfo *)*((void *)v4 + 1);
      if (v5)
      {
        do
        {
          unsigned int v6 = v5;
          unsigned int v5 = *(quasar::UttInfo **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unsigned int v6 = (quasar::UttInfo *)*((void *)v4 + 2);
          BOOL v7 = *(void *)v6 == (void)v4;
          unsigned int v4 = v6;
        }
        while (!v7);
      }
      unsigned int v4 = v6;
    }
    while (v6 != (quasar::UttInfo *)((char *)this + 8));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "results");
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)&__p, (uint64_t)v18, 1);
  if (v13.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "startMillis");
  unsigned int v8 = *((_DWORD *)this + 6);
  LODWORD(__p) = quasar::getType((quasar *)v8);
  std::to_string(&v13, v8);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v10, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "endMillis");
  float v9 = (quasar *)*((unsigned int *)this + 7);
  LODWORD(__p) = quasar::getType(v9);
  std::to_string(&v13, v9);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v10, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  quasar::PTree::~PTree((quasar::PTree *)v18);
}

void sub_1B1E9F2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  quasar::PTree::~PTree((quasar::PTree *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a27);
  quasar::PTree::~PTree(v27);
  _Unwind_Resume(a1);
}

void quasar::UttInfo::ptreeBatch(quasar::UttInfo ***a1@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::PTree::PTree(a2);
  unsigned int v5 = *a1;
  unsigned int v4 = a1[1];
  while (v5 != v4)
  {
    quasar::UttInfo::ptree(*v5, (quasar::PTree *)v6);
    quasar::PTree::addChild(a2, (const quasar::PTree *)v6);
    quasar::PTree::~PTree((quasar::PTree *)v6);
    v5 += 2;
  }
}

void sub_1B1E9F3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::PTree::~PTree((quasar::PTree *)&a9);
  quasar::PTree::~PTree(v9);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<kaldi::quasar::LmHandle>*>,std::__wrap_iter<std::shared_ptr<kaldi::quasar::LmHandle>*>>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  unsigned int v5 = a2;
  if (a5 >= 1)
  {
    BOOL v7 = a3;
    uint64_t v11 = a1[2];
    float v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        uint64_t v21 = &a3[2 * a5];
      }
      else
      {
        uint64_t v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      BOOL v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      uint64_t v23 = &v22[2 * a5];
      do
      {
        uint64_t *v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      v26[2] = v23;
      unsigned int v5 = (void *)std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_1B1E9F5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::LmHandle>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::LmHandle>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::LmHandle>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unsigned int v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::LmHandle>>,std::shared_ptr<kaldi::quasar::LmHandle>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void std::__shared_ptr_emplace<quasar::ResultInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ResultInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::ResultInfo>::__on_zero_shared(uint64_t a1)
{
  v1 = (void **)(a1 + 24);
  std::vector<quasar::ChoiceInfo>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<quasar::ChoiceInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unsigned int v4 = (void **)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        std::vector<quasar::TokenInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList> const&,std::shared_ptr<quasar::SpeechRequestResultData>,void>@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x4A8uLL);
  double result = std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList> const&,std::shared_ptr<quasar::SpeechRequestResultData>,std::allocator<quasar::DecoderChainOutput>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1E9F850(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList> const&,std::shared_ptr<quasar::SpeechRequestResultData>,std::allocator<quasar::DecoderChainOutput>,0>(void *a1, uint64_t *a2, long long *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60598;
  std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList> const&,std::shared_ptr<quasar::SpeechRequestResultData>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B1E9F8C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList> const&,std::shared_ptr<quasar::SpeechRequestResultData>>(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4)
{
  unsigned int v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  char v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v5 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  quasar::DecoderChainOutput::DecoderChainOutput(a2, &v6, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1B1E9F948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::MultiAudioBuffer::MultiAudioBuffer(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (void *)quasar::RecogAudioBufferBase::RecogAudioBufferBase(a1, 0);
  v4[3] = 0;
  v4[2] = v4 + 3;
  *unsigned int v4 = &unk_1F0A53520;
  v4[4] = 0;
  long long v5 = *(uint64_t **)a2;
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  v8[0] = v5;
  v8[1] = (uint64_t *)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::MultiAudioBuffer::addBuffer(a1, 0, v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

void sub_1B1E9FA10(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(v2, *((void **)v1 + 3));
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiAudioBuffer::addBuffer(uint64_t a1, int a2, uint64_t **a3)
{
  int v8 = a2;
  uint64_t v9 = &v8;
  unsigned int v4 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>((uint64_t **)(a1 + 16), &v8, (uint64_t)&std::piecewise_construct, &v9);
  uint64_t v6 = *a3;
  long long v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  char v7 = (std::__shared_weak_count *)v4[6];
  v4[5] = v6;
  v4[6] = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

uint64_t quasar::MultiAudioBuffer::getBuffer@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t result = a1 + 24;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = result;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != result && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v11 = *(void *)(v6 + 40);
    uint64_t v10 = *(void *)(v6 + 48);
    *a3 = v11;
    a3[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t quasar::MultiAudioBuffer::addAudio(quasar::MultiAudioBuffer *this, const __int16 *a2, uint64_t a3)
{
  uint64_t v3 = (char *)*((void *)this + 2);
  uint64_t v4 = (char *)this + 24;
  if (v3 == (char *)this + 24) {
    return 0;
  }
  LODWORD(v7) = 0;
  do
  {
    unsigned int v8 = (*(uint64_t (**)(void, const __int16 *, uint64_t))(**((void **)v3 + 5) + 16))(*((void *)v3 + 5), a2, a3);
    if (*((_DWORD *)v3 + 8)) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v8;
    }
    uint64_t v9 = (char *)*((void *)v3 + 1);
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = *(char **)v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v10 = (char *)*((void *)v3 + 2);
        BOOL v11 = *(void *)v10 == (void)v3;
        uint64_t v3 = v10;
      }
      while (!v11);
    }
    uint64_t v3 = v10;
  }
  while (v10 != v4);
  return v7;
}

uint64_t quasar::MultiAudioBuffer::addAudio(quasar::MultiAudioBuffer *this, const float *a2, uint64_t a3)
{
  uint64_t v3 = (char *)*((void *)this + 2);
  uint64_t v4 = (char *)this + 24;
  if (v3 == (char *)this + 24) {
    return 0;
  }
  LODWORD(v7) = 0;
  do
  {
    unsigned int v8 = (*(uint64_t (**)(void, const float *, uint64_t))(**((void **)v3 + 5) + 24))(*((void *)v3 + 5), a2, a3);
    if (*((_DWORD *)v3 + 8)) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v8;
    }
    uint64_t v9 = (char *)*((void *)v3 + 1);
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = *(char **)v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v10 = (char *)*((void *)v3 + 2);
        BOOL v11 = *(void *)v10 == (void)v3;
        uint64_t v3 = v10;
      }
      while (!v11);
    }
    uint64_t v3 = v10;
  }
  while (v10 != v4);
  return v7;
}

uint64_t quasar::MultiAudioBuffer::endAudio(uint64_t this)
{
  v1 = *(void **)(this + 16);
  uint64_t v2 = (void *)(this + 24);
  if (v1 != (void *)(this + 24))
  {
    do
    {
      this = (*(uint64_t (**)(void))(*(void *)v1[5] + 32))(v1[5]);
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

uint64_t quasar::MultiAudioBuffer::setServerSideEndPointing(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void **)(this + 16);
  uint64_t v3 = (void *)(this + 24);
  if (v2 != (void *)(this + 24))
  {
    do
    {
      this = (*(uint64_t (**)(void, uint64_t))(*(void *)v2[5] + 40))(v2[5], a2);
      BOOL v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          BOOL v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  return this;
}

uint64_t quasar::MultiAudioBuffer::triggerServerSideEndPointer(uint64_t this)
{
  v1 = *(void **)(this + 16);
  uint64_t v2 = (void *)(this + 24);
  if (v1 != (void *)(this + 24))
  {
    do
    {
      this = (*(uint64_t (**)(void))(*(void *)v1[5] + 48))(v1[5]);
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

uint64_t quasar::MultiAudioBuffer::stopAudioDecoding(uint64_t this)
{
  v1 = *(void **)(this + 16);
  uint64_t v2 = (void *)(this + 24);
  if (v1 != (void *)(this + 24))
  {
    do
    {
      this = (*(uint64_t (**)(void))(*(void *)v1[5] + 56))(v1[5]);
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

float quasar::MultiAudioBuffer::audioLeftSeconds(quasar::MultiAudioBuffer *this)
{
  v1 = (char *)*((void *)this + 2);
  uint64_t v2 = (char *)this + 24;
  float v3 = 0.0;
  if (v1 != (char *)this + 24)
  {
    do
    {
      float v4 = (*(float (**)(void))(**((void **)v1 + 5) + 64))(*((void *)v1 + 5));
      if (v3 < v4) {
        float v3 = v4;
      }
      BOOL v5 = (char *)*((void *)v1 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          BOOL v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)*((void *)v1 + 2);
          BOOL v7 = *(void *)v6 == (void)v1;
          v1 = v6;
        }
        while (!v7);
      }
      v1 = v6;
    }
    while (v6 != v2);
  }
  return v3;
}

float quasar::MultiAudioBuffer::audioReadSeconds(quasar::MultiAudioBuffer *this)
{
  v1 = (char *)*((void *)this + 2);
  uint64_t v2 = (char *)this + 24;
  float v3 = 0.0;
  if (v1 != (char *)this + 24)
  {
    do
    {
      float v4 = (*(float (**)(void))(**((void **)v1 + 5) + 72))(*((void *)v1 + 5));
      if (v3 < v4) {
        float v3 = v4;
      }
      BOOL v5 = (char *)*((void *)v1 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          BOOL v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)*((void *)v1 + 2);
          BOOL v7 = *(void *)v6 == (void)v1;
          v1 = v6;
        }
        while (!v7);
      }
      v1 = v6;
    }
    while (v6 != v2);
  }
  return v3;
}

uint64_t quasar::MultiAudioBuffer::packetArrivalTimestampFromAudioTime(uint64_t **this, float a2)
{
  int v5 = 0;
  uint64_t v6 = &v5;
  float v3 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>(this + 2, &v5, (uint64_t)&std::piecewise_construct, &v6);
  return (*(uint64_t (**)(uint64_t *, float))(*v3[5] + 80))(v3[5], a2);
}

void quasar::MultiAudioBuffer::setLeadBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(int **)(a1 + 16);
  float v3 = (int *)(a1 + 24);
  if (v2 != (int *)(a1 + 24))
  {
    do
    {
      uint64_t v5 = *((void *)v2 + 5);
      uint64_t v6 = *a2;
      if (*a2)
      {
        unint64_t v14 = v2 + 8;
        BOOL v7 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>((uint64_t **)(v6 + 16), v2 + 8, (uint64_t)&std::piecewise_construct, &v14);
        unsigned int v8 = (std::__shared_weak_count *)v7[6];
        unint64_t v12 = v7[5];
        uint64_t v13 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
      quasar::RecogAudioBuffer::setLeadBuffer(v5, (uint64_t *)&v12);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v9 = (int *)*((void *)v2 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = *(int **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (int *)*((void *)v2 + 2);
          BOOL v11 = *(void *)v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1B1EA0194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::MultiAudioBuffer::emptyAudioBuffer(quasar::MultiAudioBuffer *this)
{
  v1 = (char *)*((void *)this + 2);
  uint64_t v2 = (char *)this + 24;
  if (v1 != (char *)this + 24)
  {
    do
    {
      quasar::RecogAudioBuffer::emptyAudioBuffer(*((quasar::RecogAudioBuffer **)v1 + 5));
      float v3 = (char *)*((void *)v1 + 1);
      if (v3)
      {
        do
        {
          float v4 = v3;
          float v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          float v4 = (char *)*((void *)v1 + 2);
          BOOL v5 = *(void *)v4 == (void)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
}

void quasar::MultiAudioBuffer::startCountingAudioDuration(uint64_t **this)
{
  int v2 = 0;
  float v3 = &v2;
  v1 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>(this + 2, &v2, (uint64_t)&std::piecewise_construct, &v3);
  quasar::RecogAudioBuffer::startCountingAudioDuration((quasar::RecogAudioBuffer *)v1[5]);
}

float quasar::MultiAudioBuffer::stopCountingAudioDuration(uint64_t **this)
{
  int v3 = 0;
  float v4 = &v3;
  v1 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>(this + 2, &v3, (uint64_t)&std::piecewise_construct, &v4);
  return quasar::RecogAudioBuffer::stopCountingAudioDuration((quasar::RecogAudioBuffer *)v1[5]);
}

double quasar::MultiChainMultiAudioBuffer::MultiChainMultiAudioBuffer(quasar::MultiChainMultiAudioBuffer *this)
{
  uint64_t v1 = quasar::RecogAudioBufferBase::RecogAudioBufferBase((uint64_t)this, 0);
  *(void *)uint64_t v1 = &unk_1F0A573C0;
  *(void *)(v1 + 16) = 850045863;
  double result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 80) = v1 + 88;
  *(unsigned char *)(v1 + 132) = 0;
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = 0;
  *(unsigned char *)(v1 + 128) = 0;
  return result;
}

void quasar::MultiChainMultiAudioBuffer::addBuffer(uint64_t a1, std::string *a2, uint64_t *a3, int a4)
{
  unsigned int v8 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  *(void *)&v14[0] = a2;
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 80), (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)v14);
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = (std::__shared_weak_count *)v9[8];
  v9[7] = v11;
  v9[8] = v10;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a4)
  {
    if (*(char *)(a1 + 127) < 0)
    {
      if (!*(void *)(a1 + 112)) {
        goto LABEL_8;
      }
    }
    else if (!*(unsigned char *)(a1 + 127))
    {
LABEL_8:
      std::string::operator=((std::string *)(a1 + 104), a2);
      goto LABEL_9;
    }
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Multiple primary buffers are not allowed! ", 42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Hint: Only one decoder chain can do system combination.", 55);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
  }
LABEL_9:
  quasar::MultiChainMultiAudioBuffer::updateLeadBuffersUnlocked((const void **)a1);
  std::mutex::unlock(v8);
}

void sub_1B1EA0460(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::updateLeadBuffersUnlocked(const void **this)
{
  int v2 = (unsigned __int8 **)(this + 13);
  int v3 = (long long **)(this + 10);
  float v4 = (const void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(this + 10), this + 13);
  BOOL v5 = (char *)(this + 11);
  if (this + 11 == v4)
  {
    uint64_t v6 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v7 = (uint64_t)v4[7];
    uint64_t v6 = (std::__shared_weak_count *)v4[8];
    uint64_t v22 = v7;
    uint64_t v23 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  unsigned int v8 = *v3;
  if (v8 != (long long *)v5)
  {
    while (1)
    {
      std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](&__s1, v8 + 2);
      uint64_t v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s1.__r_.__value_.__l.__size_;
      }
      uint64_t v11 = (const void *)*((unsigned __int8 *)this + 127);
      int v12 = (char)v11;
      if ((char)v11 < 0) {
        uint64_t v11 = this[14];
      }
      if ((const void *)size == v11)
      {
        if (v12 >= 0) {
          uint64_t v13 = (unsigned __int8 *)v2;
        }
        else {
          uint64_t v13 = *v2;
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v13, __s1.__r_.__value_.__l.__size_))
          {
LABEL_23:
            v18[0] = 0;
            v18[1] = 0;
            quasar::MultiAudioBuffer::setLeadBuffer(v20, v18);
            goto LABEL_24;
          }
        }
        else
        {
          if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
            goto LABEL_23;
          }
          p_s1 = &__s1;
          while (p_s1->__r_.__value_.__s.__data_[0] == *v13)
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            ++v13;
            if (!--v9) {
              goto LABEL_23;
            }
          }
        }
      }
      quasar::MultiAudioBuffer::setLeadBuffer(v20, &v22);
LABEL_24:
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      uint64_t v15 = (char *)*((void *)v8 + 1);
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (char *)*((void *)v8 + 2);
          BOOL v17 = *(void *)v16 == (void)v8;
          unsigned int v8 = (long long *)v16;
        }
        while (!v17);
      }
      unsigned int v8 = (long long *)v16;
      if (v16 == v5)
      {
        uint64_t v6 = v23;
        break;
      }
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B1EA05FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)va);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 - 40);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::removeBuffer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  uint64_t v5 = a2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 127);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 112);
  }
  if (v6 != v7) {
    goto LABEL_17;
  }
  if (v8 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(a1 + 104);
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)(a1 + 104);
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v9, *((void *)a2 + 1))) {
      goto LABEL_17;
    }
LABEL_15:
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Cannot remove the primary buffer", 32);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
  }
  if (!a2[23]) {
    goto LABEL_15;
  }
  uint64_t v10 = a2;
  while (*v10 == *v9)
  {
    ++v10;
    ++v9;
    if (!--v5) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 80, (const void **)a2);
  int v12 = (uint64_t *)v11;
  if (a1 + 88 != v11)
  {
    (*(void (**)(void))(**(void **)(v11 + 56) + 32))(*(void *)(v11 + 56));
    uint64_t v13 = v12[7];
    v14[0] = 0uLL;
    quasar::MultiAudioBuffer::setLeadBuffer(v13, (uint64_t *)v14);
    std::__tree<std::string>::__remove_node_pointer((uint64_t **)(a1 + 80), v12);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(v12 + 4));
    operator delete(v12);
  }
  std::mutex::unlock(v4);
}

const void **quasar::MultiChainMultiAudioBuffer::getPrimaryBufferUnlocked@<X0>(const void **this@<X0>, void *a2@<X8>)
{
  double result = (const void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(this + 10), this + 13);
  if (this + 11 == result)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v5 = (atomic_ullong *)result[8];
    *a2 = result[7];
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void quasar::MultiChainMultiAudioBuffer::getBuffer(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  uint64_t v7 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 80, a2);
  if (a1 + 88 == v7)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v7 + 64);
    *a3 = *(void *)(v7 + 56);
    a3[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  std::mutex::unlock(v6);
}

void sub_1B1EA08D4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::getPrimaryBuffer(const void **this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::mutex *)(this + 2);
  std::mutex::lock((std::mutex *)(this + 2));
  quasar::MultiChainMultiAudioBuffer::getPrimaryBufferUnlocked(this, a2);
  std::mutex::unlock(v4);
}

void sub_1B1EA0940(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::MultiChainMultiAudioBuffer::addAudio<short>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  uint64_t v7 = (void *)(a1 + 80);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 80, (const void **)(a1 + 104));
  uint64_t v9 = v8;
  uint64_t v10 = (void *)(a1 + 88);
  if (a1 + 88 == v8)
  {
    int v12 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = *(void *)(v8 + 56);
    int v12 = *(std::__shared_weak_count **)(v9 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, a2, a3);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (!v13)
  {
    unint64_t v14 = (void *)*v7;
    if ((void *)*v7 != v10)
    {
      do
      {
        uint64_t v15 = *((unsigned __int8 *)v14 + 55);
        if ((v15 & 0x80u) == 0) {
          uint64_t v16 = *((unsigned __int8 *)v14 + 55);
        }
        else {
          uint64_t v16 = v14[5];
        }
        uint64_t v17 = *(unsigned __int8 *)(a1 + 127);
        int v18 = (char)v17;
        if ((v17 & 0x80u) != 0) {
          uint64_t v17 = *(void *)(a1 + 112);
        }
        if (v16 != v17) {
          goto LABEL_24;
        }
        uint64_t v19 = (const void **)(v14 + 4);
        if (v18 >= 0) {
          uint64_t v20 = (unsigned __int8 *)(a1 + 104);
        }
        else {
          uint64_t v20 = *(unsigned __int8 **)(a1 + 104);
        }
        if ((v15 & 0x80) != 0)
        {
          if (memcmp(*v19, v20, v14[5])) {
            goto LABEL_24;
          }
        }
        else if (*((unsigned char *)v14 + 55))
        {
          while (*(unsigned __int8 *)v19 == *v20)
          {
            uint64_t v19 = (const void **)((char *)v19 + 1);
            ++v20;
            if (!--v15) {
              goto LABEL_29;
            }
          }
LABEL_24:
          v28[0] = 0;
          v28[0] = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v14[7] + 16))(v14[7], a2, a3);
          if (v28[0]) {
            BOOL v21 = quasar::gLogLevel < 5;
          }
          else {
            BOOL v21 = 1;
          }
          if (!v21)
          {
            memset(v27, 0, sizeof(v27));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
            uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Secondary chain rejected audio, probably waiting for primary: ", 62);
            quasar::operator<<(v22, v28);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v27);
          }
        }
LABEL_29:
        uint64_t v23 = (void *)v14[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = v23;
            uint64_t v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (void *)v14[2];
            BOOL v25 = *v24 == (void)v14;
            unint64_t v14 = v24;
          }
          while (!v25);
        }
        unint64_t v14 = v24;
      }
      while (v24 != v10);
    }
  }
  std::mutex::unlock(v6);
  return v13;
}

void sub_1B1EA0BA8(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::MultiChainMultiAudioBuffer::addAudio<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  uint64_t v7 = (void *)(a1 + 80);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 80, (const void **)(a1 + 104));
  uint64_t v9 = v8;
  uint64_t v10 = (void *)(a1 + 88);
  if (a1 + 88 == v8)
  {
    int v12 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = *(void *)(v8 + 56);
    int v12 = *(std::__shared_weak_count **)(v9 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 24))(v11, a2, a3);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (!v13)
  {
    unint64_t v14 = (void *)*v7;
    if ((void *)*v7 != v10)
    {
      do
      {
        uint64_t v15 = *((unsigned __int8 *)v14 + 55);
        if ((v15 & 0x80u) == 0) {
          uint64_t v16 = *((unsigned __int8 *)v14 + 55);
        }
        else {
          uint64_t v16 = v14[5];
        }
        uint64_t v17 = *(unsigned __int8 *)(a1 + 127);
        int v18 = (char)v17;
        if ((v17 & 0x80u) != 0) {
          uint64_t v17 = *(void *)(a1 + 112);
        }
        if (v16 != v17) {
          goto LABEL_24;
        }
        uint64_t v19 = (const void **)(v14 + 4);
        if (v18 >= 0) {
          uint64_t v20 = (unsigned __int8 *)(a1 + 104);
        }
        else {
          uint64_t v20 = *(unsigned __int8 **)(a1 + 104);
        }
        if ((v15 & 0x80) != 0)
        {
          if (memcmp(*v19, v20, v14[5])) {
            goto LABEL_24;
          }
        }
        else if (*((unsigned char *)v14 + 55))
        {
          while (*(unsigned __int8 *)v19 == *v20)
          {
            uint64_t v19 = (const void **)((char *)v19 + 1);
            ++v20;
            if (!--v15) {
              goto LABEL_29;
            }
          }
LABEL_24:
          v28[0] = 0;
          v28[0] = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v14[7] + 24))(v14[7], a2, a3);
          if (v28[0]) {
            BOOL v21 = quasar::gLogLevel < 5;
          }
          else {
            BOOL v21 = 1;
          }
          if (!v21)
          {
            memset(v27, 0, sizeof(v27));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
            uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Secondary chain rejected audio, probably waiting for primary: ", 62);
            quasar::operator<<(v22, v28);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v27);
          }
        }
LABEL_29:
        uint64_t v23 = (void *)v14[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = v23;
            uint64_t v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (void *)v14[2];
            BOOL v25 = *v24 == (void)v14;
            unint64_t v14 = v24;
          }
          while (!v25);
        }
        unint64_t v14 = v24;
      }
      while (v24 != v10);
    }
  }
  std::mutex::unlock(v6);
  return v13;
}

void sub_1B1EA0E3C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::endAudio(quasar::MultiChainMultiAudioBuffer *this)
{
  int v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  int v3 = (char *)*((void *)this + 10);
  uint64_t v4 = (char *)this + 88;
  if (v3 != v4)
  {
    do
    {
      (*(void (**)(void))(**((void **)v3 + 7) + 32))(*((void *)v3 + 7));
      uint64_t v5 = (char *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          int v3 = v6;
        }
        while (!v7);
      }
      int v3 = v6;
    }
    while (v6 != v4);
  }
  std::mutex::unlock(v2);
}

void sub_1B1EA0F34(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::endAudioForSecondaryBuffers(quasar::MultiChainMultiAudioBuffer *this, int a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  if (*((void *)this + 12) != 1)
  {
    uint64_t v5 = (quasar::MultiChainMultiAudioBuffer *)*((void *)this + 10);
    if (v5 != (quasar::MultiChainMultiAudioBuffer *)((char *)this + 88))
    {
      do
      {
        uint64_t v6 = *((unsigned __int8 *)v5 + 55);
        if ((v6 & 0x80u) == 0) {
          uint64_t v7 = *((unsigned __int8 *)v5 + 55);
        }
        else {
          uint64_t v7 = *((void *)v5 + 5);
        }
        uint64_t v8 = *((unsigned __int8 *)this + 127);
        int v9 = (char)v8;
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *((void *)this + 14);
        }
        if (v7 == v8)
        {
          uint64_t v10 = (const void **)((char *)v5 + 32);
          if (v9 >= 0) {
            uint64_t v11 = (unsigned __int8 *)this + 104;
          }
          else {
            uint64_t v11 = (unsigned __int8 *)*((void *)this + 13);
          }
          if ((v6 & 0x80) != 0)
          {
            if (!memcmp(*v10, v11, *((void *)v5 + 5)))
            {
LABEL_19:
              quasar::MultiAudioBuffer::getBuffer(*((void *)v5 + 7), 0, &v15);
              quasar::RecogAudioBuffer::setWaitingForFollowers(v15, 1);
              goto LABEL_20;
            }
          }
          else
          {
            if (!*((unsigned char *)v5 + 55)) {
              goto LABEL_19;
            }
            while (*(unsigned __int8 *)v10 == *v11)
            {
              uint64_t v10 = (const void **)((char *)v10 + 1);
              ++v11;
              if (!--v6) {
                goto LABEL_19;
              }
            }
          }
        }
        quasar::MultiAudioBuffer::getBuffer(*((void *)v5 + 7), 0, &v15);
        quasar::RecogAudioBuffer::endAudioToLeadBuffer(v15);
LABEL_20:
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        int v12 = (quasar::MultiChainMultiAudioBuffer *)*((void *)v5 + 1);
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            int v12 = *(quasar::MultiChainMultiAudioBuffer **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (quasar::MultiChainMultiAudioBuffer *)*((void *)v5 + 2);
            BOOL v14 = *(void *)v13 == (void)v5;
            uint64_t v5 = v13;
          }
          while (!v14);
        }
        uint64_t v5 = v13;
      }
      while (v13 != (quasar::MultiChainMultiAudioBuffer *)((char *)this + 88));
    }
    *((_DWORD *)this + 32) = a2;
    *((unsigned char *)this + 132) = 1;
  }
  std::mutex::unlock(v4);
}

void sub_1B1EA10C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::synchronizeSecondaryBuffersToPrimary(quasar::MultiChainMultiAudioBuffer *this)
{
  int v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  int v3 = (quasar::MultiChainMultiAudioBuffer *)*((void *)this + 10);
  if (v3 != (quasar::MultiChainMultiAudioBuffer *)((char *)this + 88))
  {
    do
    {
      uint64_t v4 = *((unsigned __int8 *)v3 + 55);
      if ((v4 & 0x80u) == 0) {
        uint64_t v5 = *((unsigned __int8 *)v3 + 55);
      }
      else {
        uint64_t v5 = *((void *)v3 + 5);
      }
      uint64_t v6 = *((unsigned __int8 *)this + 127);
      int v7 = (char)v6;
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *((void *)this + 14);
      }
      if (v5 != v6) {
        goto LABEL_17;
      }
      uint64_t v8 = (const void **)((char *)v3 + 32);
      if (v7 >= 0) {
        int v9 = (unsigned __int8 *)this + 104;
      }
      else {
        int v9 = (unsigned __int8 *)*((void *)this + 13);
      }
      if ((v4 & 0x80) != 0)
      {
        if (memcmp(*v8, v9, *((void *)v3 + 5))) {
          goto LABEL_17;
        }
      }
      else if (*((unsigned char *)v3 + 55))
      {
        while (*(unsigned __int8 *)v8 == *v9)
        {
          uint64_t v8 = (const void **)((char *)v8 + 1);
          ++v9;
          if (!--v4) {
            goto LABEL_18;
          }
        }
LABEL_17:
        quasar::MultiAudioBuffer::getBuffer(*((void *)v3 + 7), 0, &v13);
        quasar::RecogAudioBuffer::synchronizeToLeadBuffer(v13);
      }
LABEL_18:
      quasar::MultiAudioBuffer::getBuffer(*((void *)v3 + 7), 0, &v13);
      quasar::RecogAudioBuffer::setWaitingForFollowers(v13, 0);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      uint64_t v10 = (quasar::MultiChainMultiAudioBuffer *)*((void *)v3 + 1);
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = *(quasar::MultiChainMultiAudioBuffer **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (quasar::MultiChainMultiAudioBuffer *)*((void *)v3 + 2);
          BOOL v12 = *(void *)v11 == (void)v3;
          int v3 = v11;
        }
        while (!v12);
      }
      int v3 = v11;
    }
    while (v11 != (quasar::MultiChainMultiAudioBuffer *)((char *)this + 88));
  }
  if (*((unsigned char *)this + 132)) {
    *((unsigned char *)this + 132) = 0;
  }
  std::mutex::unlock(v2);
}

void sub_1B1EA1254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::setServerSideEndPointing(quasar::MultiChainMultiAudioBuffer *this, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  uint64_t v5 = (char *)*((void *)this + 10);
  uint64_t v6 = (char *)this + 88;
  if (v5 != v6)
  {
    do
    {
      (*(void (**)(void, uint64_t))(**((void **)v5 + 7) + 40))(*((void *)v5 + 7), a2);
      int v7 = (char *)*((void *)v5 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v5 + 2);
          BOOL v9 = *(void *)v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v6);
  }
  std::mutex::unlock(v4);
}

void sub_1B1EA1338(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::triggerServerSideEndPointer(quasar::MultiChainMultiAudioBuffer *this)
{
  int v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  int v3 = (char *)*((void *)this + 10);
  uint64_t v4 = (char *)this + 88;
  if (v3 != v4)
  {
    do
    {
      (*(void (**)(void))(**((void **)v3 + 7) + 48))(*((void *)v3 + 7));
      uint64_t v5 = (char *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          int v3 = v6;
        }
        while (!v7);
      }
      int v3 = v6;
    }
    while (v6 != v4);
  }
  std::mutex::unlock(v2);
}

void sub_1B1EA1404(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::stopAudioDecoding(quasar::MultiChainMultiAudioBuffer *this)
{
  int v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  int v3 = (char *)*((void *)this + 10);
  uint64_t v4 = (char *)this + 88;
  if (v3 != v4)
  {
    do
    {
      (*(void (**)(void))(**((void **)v3 + 7) + 56))(*((void *)v3 + 7));
      uint64_t v5 = (char *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          int v3 = v6;
        }
        while (!v7);
      }
      int v3 = v6;
    }
    while (v6 != v4);
  }
  std::mutex::unlock(v2);
}

void sub_1B1EA14D0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

float quasar::MultiChainMultiAudioBuffer::audioLeftSeconds(quasar::MultiChainMultiAudioBuffer *this)
{
  int v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  int v3 = (char *)*((void *)this + 10);
  uint64_t v4 = (char *)this + 88;
  float v5 = 0.0;
  if (v3 != v4)
  {
    do
    {
      float v6 = (*(float (**)(void))(**((void **)v3 + 7) + 64))(*((void *)v3 + 7));
      if (v5 < v6) {
        float v5 = v6;
      }
      BOOL v7 = (char *)*((void *)v3 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v3 + 2);
          BOOL v9 = *(void *)v8 == (void)v3;
          int v3 = v8;
        }
        while (!v9);
      }
      int v3 = v8;
    }
    while (v8 != v4);
  }
  std::mutex::unlock(v2);
  return v5;
}

void sub_1B1EA15A8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

float quasar::MultiChainMultiAudioBuffer::audioReadSeconds(quasar::MultiChainMultiAudioBuffer *this)
{
  int v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  int v3 = (char *)*((void *)this + 10);
  uint64_t v4 = (char *)this + 88;
  float v5 = 0.0;
  if (v3 != v4)
  {
    do
    {
      float v6 = (*(float (**)(void))(**((void **)v3 + 7) + 72))(*((void *)v3 + 7));
      if (v5 < v6) {
        float v5 = v6;
      }
      BOOL v7 = (char *)*((void *)v3 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v3 + 2);
          BOOL v9 = *(void *)v8 == (void)v3;
          int v3 = v8;
        }
        while (!v9);
      }
      int v3 = v8;
    }
    while (v8 != v4);
  }
  std::mutex::unlock(v2);
  return v5;
}

void sub_1B1EA1680(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::MultiChainMultiAudioBuffer::packetArrivalTimestampFromAudioTime(uint64_t **this, float a2)
{
  uint64_t v4 = (std::mutex *)(this + 2);
  std::mutex::lock((std::mutex *)(this + 2));
  uint64_t v8 = (long long *)(this + 13);
  float v5 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 10, (const void **)this + 13, (uint64_t)&std::piecewise_construct, &v8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, float))(*(void *)v5[7] + 80))(v5[7], a2);
  std::mutex::unlock(v4);
  return v6;
}

void sub_1B1EA1730(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::MultiChainMultiAudioBuffer::getPrimaryAudioEndMs(quasar::MultiChainMultiAudioBuffer *this)
{
  int v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  uint64_t v3 = *((void *)this + 16);
  std::mutex::unlock(v2);
  return v3;
}

void quasar::MultiChainMultiAudioBuffer::emptyAudioBuffer(quasar::MultiChainMultiAudioBuffer *this)
{
  int v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  uint64_t v3 = (char *)*((void *)this + 10);
  uint64_t v4 = (char *)this + 88;
  if (v3 != v4)
  {
    do
    {
      quasar::MultiAudioBuffer::emptyAudioBuffer(*((quasar::MultiAudioBuffer **)v3 + 7));
      float v5 = (char *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          float v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v4);
  }
  std::mutex::unlock(v2);
}

void sub_1B1EA1818(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::startCountingAudioDuration(uint64_t **this)
{
  int v2 = (std::mutex *)(this + 2);
  std::mutex::lock((std::mutex *)(this + 2));
  uint64_t v4 = (long long *)(this + 13);
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 10, (const void **)this + 13, (uint64_t)&std::piecewise_construct, &v4);
  quasar::MultiAudioBuffer::startCountingAudioDuration((uint64_t **)v3[7]);
  std::mutex::unlock(v2);
}

void sub_1B1EA1890(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

float quasar::MultiChainMultiAudioBuffer::stopCountingAudioDuration(uint64_t **this)
{
  int v2 = (std::mutex *)(this + 2);
  std::mutex::lock((std::mutex *)(this + 2));
  uint64_t v6 = (long long *)(this + 13);
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 10, (const void **)this + 13, (uint64_t)&std::piecewise_construct, &v6);
  float v4 = quasar::MultiAudioBuffer::stopCountingAudioDuration((uint64_t **)v3[7]);
  std::mutex::unlock(v2);
  return v4;
}

void sub_1B1EA1918(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiAudioBuffer::~MultiAudioBuffer(quasar::MultiAudioBuffer *this)
{
  *(void *)this = &unk_1F0A53520;
  std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A53520;
  std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::MultiChainMultiAudioBuffer::~MultiChainMultiAudioBuffer(quasar::MultiChainMultiAudioBuffer *this)
{
  *(void *)this = &unk_1F0A573C0;
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A573C0;
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t **std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  BOOL v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        BOOL v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        BOOL v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1B1EA1BF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LexiconFST::removeAuxSymbols(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(a2 + 8) + 72) - *(void *)(*(void *)(a2 + 8) + 64);
  if ((int)(v3 >> 3) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (v3 >> 3);
    do
    {
      uint64_t v17 = &unk_1F0A3E910;
      unint64_t v20 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a2);
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = *(void *)(*(void *)(v8 + 64) + 8 * v6);
      uint64_t v18 = v9;
      uint64_t v19 = v8 + 8;
      for (unint64_t i = v20; ; unint64_t i = ++v20)
      {
        uint64_t v12 = v9 + 24;
        uint64_t v11 = *(void *)(v9 + 24);
        if (i >= (*(void *)(v12 + 8) - v11) >> 4) {
          break;
        }
        __n128 v16 = *(__n128 *)(v11 + 16 * i);
        (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a3 + 88))(v14, a3, v16.n128_i32[0]);
        if ((v15 & 0x80000000) == 0)
        {
          if (v15) {
            goto LABEL_8;
          }
LABEL_7:
          v16.n128_u32[0] = 0;
          fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v17, &v16);
          goto LABEL_8;
        }
        uint64_t v13 = v14[1];
        operator delete(v14[0]);
        if (!v13) {
          goto LABEL_7;
        }
LABEL_8:
        uint64_t v9 = v18;
      }
      ++v6;
    }
    while (v6 != v7);
  }
}

void quasar::LexiconFST::readLexicon(uint64_t a1, void *a2, void *a3)
{
  memset(&v34, 0, sizeof(v34));
  float v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    uint64_t v6 = std::locale::use_facet((const std::locale *)__p, v5);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale((std::locale *)__p);
    uint64_t v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v34, v7);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    quasar::trim(&v34);
    std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v34.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "\t");
      quasar::splitAndTrimNoEmpty(&v34, (char *)__p, v33);
      if (SBYTE7(v17) < 0) {
        operator delete(__p[0]);
      }
      if ((unsigned __int8 *)(v33[1] - v33[0]) == (unsigned __int8 *)48)
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3, v33[0]))
        {
          *(_OWORD *)__p = 0u;
          long long v17 = 0u;
          LODWORD(v18) = 1065353216;
          v35[0] = (long long *)v33[0];
          int v10 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, v33[0], (uint64_t)&std::piecewise_construct, v35);
          if (v10 + 40 != (unsigned __int8 *)__p)
          {
            *((_DWORD *)v10 + 18) = v18;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((void *)v10 + 5, (uint64_t *)v17, 0);
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
        }
        v35[0] = (long long *)v33[0];
        uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, v33[0], (uint64_t)&std::piecewise_construct, v35);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(v11 + 40), v33[0] + 24, (uint64_t)(v33[0] + 24));
      }
      else if (quasar::gLogLevel >= 5)
      {
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid line in lexicon: '", 26);
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v13 = &v34;
        }
        else {
          uint64_t v13 = (std::string *)v34.__r_.__value_.__r.__words[0];
        }
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v14 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v14 = v34.__r_.__value_.__l.__size_;
        }
        char v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      __p[0] = v33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_1B1EA1FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __p = (void *)(v14 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v14 - 105) < 0) {
    operator delete(*(void **)(v14 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::LexiconFST::loadAdditionalLexicon(uint64_t a1, uint64_t a2)
{
  v13[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v11);
  if (v12[15])
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::clear(a1 + 1600);
    quasar::LexiconFST::readLexicon(v4, v11, (void *)(a1 + 1600));
  }
  else if (quasar::gLogLevel >= 5)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    float v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unable to load additional lexicon from: ", 40);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v10);
  }
  v11[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v12);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v13);
  return 0;
}

void sub_1B1EA223C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void quasar::LexiconFST::createFstWithAuxSyms(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::LexiconFST::_createFst();
}

void sub_1B1EA22C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LexiconFST::_createFst()
{
}

void sub_1B1EA386C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void ***a36,uint64_t a37,uint64_t a38,void **a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,std::locale a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  __p = &a36;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a36 = &a39;
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  a39 = (void **)&a42;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a39);
  if (a51 < 0) {
    operator delete(a46.__locale_);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a59);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  std::__tree<std::string>::destroy((uint64_t)&a72, a73);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&a74);
  a68 = &a75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a68);
  _Unwind_Resume(a1);
}

void quasar::LexiconFST::createFstWithoutAuxSyms(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::LexiconFST::_createFst();
}

void sub_1B1EA3C30(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SymbolTable::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 != v3)
  {
    uint64_t v4 = result;
    ++*(_DWORD *)(v3 + 168);
    int v5 = *(_DWORD *)(v2 + 168) - 1;
    *(_DWORD *)(v2 + 168) = v5;
    if (!v5)
    {
      if (*(char *)(v2 + 223) < 0) {
        operator delete(*(void **)(v2 + 200));
      }
      if (*(char *)(v2 + 199) < 0) {
        operator delete(*(void **)(v2 + 176));
      }
      std::__tree<int>::destroy(v2 + 144, *(void **)(v2 + 152));
      uint64_t v7 = *(void **)(v2 + 120);
      if (v7)
      {
        *(void *)(v2 + 128) = v7;
        operator delete(v7);
      }
      fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v2 + 40));
      if (*(char *)(v2 + 23) < 0) {
        operator delete(*(void **)v2);
      }
      double result = MEMORY[0x1B3EA8670](v2, 0x10B2C404FCE5648);
      uint64_t v3 = *(void *)(a2 + 8);
    }
    *(void *)(v4 + 8) = v3;
  }
  return result;
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,double>(uint64_t *a1, int *a2, uint64_t a3, double *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v6;
  }
  long long v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v14 = v11;
  char v15 = &v11[40 * v5];
  long long v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,double>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  __n128 v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1B1EA3E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,double>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, double *a5)
{
  int v7 = *a3;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  float v8 = *a5;
  *(_DWORD *)a2 = v7;
  uint64_t v9 = (std::string *)(a2 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(float *)(a2 + 32) = v8;
    if (v10 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a2 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
    *(float *)(a2 + 32) = v8;
  }
}

void sub_1B1EA3EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::createNameEnumerator(uint64_t a1@<X0>, quasar::SystemConfig *a2@<X1>, void *a3@<X8>)
{
  if (quasar::gLogLevel >= 4)
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Building NameEnumerator ", 24);
    int v7 = *(char *)(a1 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *(void *)a1;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v34);
  }
  *a3 = 0;
  a3[1] = 0;
  quasar::PTree::PTree((quasar::PTree *)v33);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v10 = *(unsigned __int8 *)(a1 + 23);
    uint64_t v11 = (int *)a1;
    switch(*(unsigned char *)(a1 + 23))
    {
      case 5:
        goto LABEL_68;
      case 6:
        if (*(_DWORD *)a1 != 1886218611 || *(_WORD *)(a1 + 4) != 25964) {
          goto LABEL_75;
        }
        goto LABEL_46;
      case 7:
        goto LABEL_38;
      case 8:
        if (*(void *)a1 == 0x79706F632D776172) {
          goto LABEL_62;
        }
        if (v10 == 5) {
          goto LABEL_68;
        }
        uint64_t v11 = (int *)a1;
        if (v10 != 7) {
          goto LABEL_75;
        }
        goto LABEL_38;
      case 0xA:
        if (*(void *)a1 == 0x6974737561687865 && *(_WORD *)(a1 + 8) == 25974) {
          goto LABEL_63;
        }
        uint64_t v11 = (int *)a1;
        if (v10 == 7) {
          goto LABEL_38;
        }
        if (v10 != 5) {
          goto LABEL_75;
        }
LABEL_68:
        if (*(_DWORD *)a1 != 1701274994 || *(unsigned char *)(a1 + 4) != 120) {
          goto LABEL_75;
        }
        goto LABEL_73;
      default:
        goto LABEL_75;
    }
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if (v13 != 6
    || (**(_DWORD **)a1 == 1886218611 ? (BOOL v14 = *(unsigned __int16 *)(*(void *)a1 + 4) == 25964) : (BOOL v14 = 0), !v14))
  {
    if (v13 == 8)
    {
      if (**(void **)a1 == 0x79706F632D776172)
      {
LABEL_62:
        std::allocate_shared[abi:ne180100]<quasar::RawCopyEnumerator,std::allocator<quasar::RawCopyEnumerator>,std::string const&,void>((long long *)a1, &v34);
        goto LABEL_74;
      }
      uint64_t v13 = *(void *)(a1 + 8);
    }
    if (v13 == 10)
    {
      if (**(void **)a1 == 0x6974737561687865 && *(_WORD *)(*(void *)a1 + 8) == 25974)
      {
LABEL_63:
        std::allocate_shared[abi:ne180100]<quasar::ExhaustiveEnumerator,std::allocator<quasar::ExhaustiveEnumerator>,std::string const&,quasar::PTree const&,void>(&v34);
        goto LABEL_74;
      }
      uint64_t v13 = *(void *)(a1 + 8);
    }
    if (v13 == 5)
    {
      if (**(_DWORD **)a1 == 1701274994 && *(unsigned char *)(*(void *)a1 + 4) == 120)
      {
LABEL_73:
        std::allocate_shared[abi:ne180100]<quasar::RegexEnumerator,std::allocator<quasar::RegexEnumerator>,std::string const&,quasar::PTree const&,void>(&v34);
        goto LABEL_74;
      }
      uint64_t v13 = *(void *)(a1 + 8);
    }
    if (v13 != 7) {
      goto LABEL_75;
    }
    uint64_t v11 = *(int **)a1;
LABEL_38:
    int v17 = *v11;
    int v18 = *(int *)((char *)v11 + 3);
    if (v17 != 1769104740 || v18 != 1684371049)
    {
LABEL_75:
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v34 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
      long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Unknown NameEnumerator \"", 24);
      int v29 = *(char *)(a1 + 23);
      if (v29 >= 0) {
        uint64_t v30 = a1;
      }
      else {
        uint64_t v30 = *(void *)a1;
      }
      if (v29 >= 0) {
        uint64_t v31 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v31 = *(void *)(a1 + 8);
      }
      long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"", 1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v34);
    }
    uint64_t SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(a2);
    uint64_t v21 = SpeechModelInfo + 120;
    int v22 = *(char *)(SpeechModelInfo + 143);
    if (v22 < 0)
    {
      if (*(void *)(SpeechModelInfo + 128) != 5)
      {
LABEL_53:
        std::allocate_shared[abi:ne180100]<quasar::DerivedEnumerator,std::allocator<quasar::DerivedEnumerator>,std::string const&,quasar::SystemConfig &,quasar::PTree const&,void>(&v34);
        goto LABEL_74;
      }
      uint64_t v21 = *(void *)v21;
    }
    else if (v22 != 5)
    {
      goto LABEL_53;
    }
    int v23 = *(_DWORD *)v21;
    int v24 = *(unsigned __int8 *)(v21 + 4);
    if (v23 == 1247764842 && v24 == 80)
    {
      std::allocate_shared[abi:ne180100]<quasar::JapaneseDerivedEnumerator,std::allocator<quasar::JapaneseDerivedEnumerator>,std::string const&,quasar::SystemConfig &,quasar::PTree const&,void>(&v34);
      goto LABEL_74;
    }
    goto LABEL_53;
  }
LABEL_46:
  std::allocate_shared[abi:ne180100]<quasar::SimpleNameEnumerator,std::allocator<quasar::SimpleNameEnumerator>,std::string const&,quasar::PTree const&,void>(&v34);
LABEL_74:
  *(_OWORD *)a3 = v34;
  quasar::PTree::~PTree((quasar::PTree *)v33);
}

void sub_1B1EA4374(_Unwind_Exception *a1)
{
}

void sub_1B1EA437C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  JUMPOUT(0x1B1EA4388);
}

void quasar::NameEnumerator::~NameEnumerator(void **this)
{
  *this = &unk_1F0A52878;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void quasar::NameEnumerator::addSpecEnumerations(uint64_t a1, int **a2, long long **a3, char a4, uint64_t *a5)
{
  unint64_t v6 = *a3;
  unint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    if (*a2 == a2[1])
    {
      unint64_t v27 = a5[1];
      if (v27 >= a5[2])
      {
        uint64_t v28 = std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__push_back_slow_path<std::vector<quasar::LmeDataFactoryBase::Word> const&>(a5, a3);
      }
      else
      {
        std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word> const&>((uint64_t)a5, a3);
        uint64_t v28 = v27 + 24;
      }
      a5[1] = v28;
    }
    else
    {
      v40[0] = 0;
      v40[1] = 0;
      long long v39 = (uint64_t *)v40;
      do
      {
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v9 = *v6;
          v34.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v9;
        }
        if (*((char *)v6 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 3), *((void *)v6 + 4));
        }
        else
        {
          long long v10 = *(long long *)((char *)v6 + 24);
          __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 5);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
        }
        int v36 = *((_DWORD *)v6 + 12);
        std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](&v37, (uint64_t)v6 + 56);
        if (v40 == (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v39, (const void **)&__p.__r_.__value_.__l.__data_))
        {
          long long v32 = 0uLL;
          unint64_t v33 = 0;
          p_p = &__p;
          uint64_t v11 = std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v39, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
          std::vector<quasar::LmeDataFactoryBase::Word>::__vdeallocate((void **)v11 + 7);
          *(_OWORD *)(v11 + 7) = v32;
          v11[9] = v33;
          unint64_t v33 = 0;
          long long v32 = 0uLL;
          long long v42 = (void **)&v32;
          std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&v42);
        }
        *(void *)&long long v32 = &__p;
        uint64_t v12 = std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v39, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v32);
        uint64_t v13 = (std::string *)v12[8];
        if ((unint64_t)v13 >= v12[9])
        {
          p_std::string::size_type size = std::vector<quasar::LmeDataFactoryBase::Word>::__push_back_slow_path<quasar::LmeDataFactoryBase::Word const&>(v12 + 7, (long long *)&v34);
        }
        else
        {
          std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>(v12 + 72, v13, (long long *)&v34);
          p_std::string::size_type size = (uint64_t)&v13[3].__r_.__value_.__l.__size_;
          v12[8] = (uint64_t)&v13[3].__r_.__value_.__l.__size_;
        }
        v12[8] = p_size;
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v37, v38);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        v6 += 5;
      }
      while (v6 != v5);
      char v15 = *a2;
      if (*a2 != a2[1])
      {
        int v29 = a2;
        do
        {
          long long v32 = 0uLL;
          unint64_t v33 = 0;
          __n128 v16 = (const void **)*((void *)v15 + 1);
          if (v16 != *((const void ***)v15 + 2))
          {
            int v17 = *v15;
            do
            {
              uint64_t v18 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v39, v16);
              if (v40 == (void **)v18)
              {
                if ((a4 & 1) == 0) {
                  goto LABEL_47;
                }
              }
              else
              {
                long long v19 = *(long long **)(v18 + 56);
                long long v20 = *(long long **)(v18 + 64);
                while (v19 != v20)
                {
                  if (*((char *)v19 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v19, *((void *)v19 + 1));
                  }
                  else
                  {
                    long long v21 = *v19;
                    v34.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
                    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
                  }
                  if (*((char *)v19 + 47) < 0)
                  {
                    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v19 + 3), *((void *)v19 + 4));
                  }
                  else
                  {
                    long long v22 = *(long long *)((char *)v19 + 24);
                    __p.__r_.__value_.__r.__words[2] = *((void *)v19 + 5);
                    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
                  }
                  int v36 = *((_DWORD *)v19 + 12);
                  std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](&v37, (uint64_t)v19 + 56);
                  v36 *= v17;
                  uint64_t v23 = *((void *)&v32 + 1);
                  if (*((void *)&v32 + 1) >= v33)
                  {
                    uint64_t v24 = std::vector<quasar::LmeDataFactoryBase::Word>::__push_back_slow_path<quasar::LmeDataFactoryBase::Word const&>((uint64_t *)&v32, (long long *)&v34);
                  }
                  else
                  {
                    std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>((int)&v33, *((std::string **)&v32 + 1), (long long *)&v34);
                    uint64_t v24 = v23 + 80;
                  }
                  *((void *)&v32 + 1) = v24;
                  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v37, v38);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v34.__r_.__value_.__l.__data_);
                  }
                  v19 += 5;
                }
              }
              v16 += 3;
            }
            while (v16 != *((const void ***)v15 + 2));
          }
          unint64_t v25 = a5[1];
          if (v25 >= a5[2])
          {
            uint64_t v26 = std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__push_back_slow_path<std::vector<quasar::LmeDataFactoryBase::Word> const&>(a5, (long long **)&v32);
          }
          else
          {
            std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word> const&>((uint64_t)a5, (long long **)&v32);
            uint64_t v26 = v25 + 24;
          }
          a5[1] = v26;
LABEL_47:
          v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
          std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
          v15 += 8;
        }
        while (v15 != v29[1]);
      }
      std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy((uint64_t)&v39, v40[0]);
    }
  }
}

void sub_1B1EA47D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v28 - 96) = &a13;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 96));
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&__p);
  std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy(v28 - 136, *(void **)(v28 - 128));
  _Unwind_Resume(a1);
}

void quasar::RawCopyEnumerator::~RawCopyEnumerator(void **this)
{
  *this = &unk_1F0A52878;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A52878;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::RawCopyEnumerator::addEnumerations(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v3 = *a2;
  if (*a2 != a2[1])
  {
    memset(&v20, 0, sizeof(v20));
    std::to_string(&v19, *(_DWORD *)(v3 + 48));
    std::vector<std::string>::pointer end = v20.__end_;
    if (v20.__end_ >= v20.__end_cap_.__value_)
    {
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20.__end_ - (char *)v20.__begin_) >> 3);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v20.__end_cap_.__value_ - (char *)v20.__begin_) >> 3) > v9) {
        unint64_t v9 = 0x5555555555555556 * (((char *)v20.__end_cap_.__value_ - (char *)v20.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v20.__end_cap_.__value_ - (char *)v20.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v20.__end_cap_;
      if (v10) {
        uint64_t v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v20.__end_cap_, v10);
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = v11 + v8;
      __v.__first_ = v11;
      __v.__begin_ = v12;
      __v.__end_cap_.__value_ = &v11[v10];
      long long v13 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
      v12->__r_.__value_.__r.__words[2] = v19.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      memset(&v19, 0, sizeof(v19));
      __v.__end_ = v12 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v20, &__v);
      BOOL v14 = v20.__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      v20.__end_ = v14;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v7 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
      v20.__end_->__r_.__value_.__r.__words[2] = v19.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
      v20.__end_ = end + 1;
    }
    uint64_t v15 = *a2;
    uint64_t v16 = a2[1];
    if (*a2 != v16)
    {
      int v17 = v20.__end_;
      do
      {
        if (v17 >= v20.__end_cap_.__value_)
        {
          int v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v20, (long long *)v15);
        }
        else
        {
          if (*(char *)(v15 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v15, *(void *)(v15 + 8));
          }
          else
          {
            long long v18 = *(_OWORD *)v15;
            v17->__r_.__value_.__r.__words[2] = *(void *)(v15 + 16);
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          ++v17;
        }
        v20.__end_ = v17;
        v15 += 80;
      }
      while (v15 != v16);
    }
    std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(a3, &v20, (long long **)&v20);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
}

void sub_1B1EA4B60(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, char a8, uint64_t a9, char *__pa, std::__split_buffer<std::wstring> *a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__pa);
  }
  __pa = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t quasar::RawCopyEnumerator::isCalculatedInQuasar(quasar::RawCopyEnumerator *this)
{
  return 1;
}

void *std::allocate_shared[abi:ne180100]<quasar::SimpleNameEnumerator,std::allocator<quasar::SimpleNameEnumerator>,std::string const&,quasar::PTree const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x50uLL);
  double result = std::__shared_ptr_emplace<quasar::SimpleNameEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::SimpleNameEnumerator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1EA4C10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SimpleNameEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::SimpleNameEnumerator>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60BF0;
  quasar::SimpleNameEnumerator::SimpleNameEnumerator(a1 + 3);
  return a1;
}

void sub_1B1EA4C6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SimpleNameEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SimpleNameEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::SimpleNameEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<quasar::RawCopyEnumerator,std::allocator<quasar::RawCopyEnumerator>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x38uLL);
  double result = std::__shared_ptr_emplace<quasar::RawCopyEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::RawCopyEnumerator>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1EA4D64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::RawCopyEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::RawCopyEnumerator>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60410;
  quasar::NameEnumerator::NameEnumerator(a1 + 3, a2);
  a1[3] = &unk_1F0A53C60;
  return a1;
}

void sub_1B1EA4DDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RawCopyEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RawCopyEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::RawCopyEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<quasar::ExhaustiveEnumerator,std::allocator<quasar::ExhaustiveEnumerator>,std::string const&,quasar::PTree const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x58uLL);
  double result = std::__shared_ptr_emplace<quasar::ExhaustiveEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::ExhaustiveEnumerator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1EA4EDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::ExhaustiveEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::ExhaustiveEnumerator>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60AA0;
  quasar::ExhaustiveEnumerator::ExhaustiveEnumerator(a1 + 3);
  return a1;
}

void sub_1B1EA4F38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ExhaustiveEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ExhaustiveEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::ExhaustiveEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<quasar::RegexEnumerator,std::allocator<quasar::RegexEnumerator>,std::string const&,quasar::PTree const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x80uLL);
  double result = std::__shared_ptr_emplace<quasar::RegexEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::RegexEnumerator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1EA5038(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::RegexEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::RegexEnumerator>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60058;
  quasar::RegexEnumerator::RegexEnumerator(a1 + 3);
  return a1;
}

void sub_1B1EA5094(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RegexEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RegexEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::RegexEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<quasar::JapaneseDerivedEnumerator,std::allocator<quasar::JapaneseDerivedEnumerator>,std::string const&,quasar::SystemConfig &,quasar::PTree const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x148uLL);
  double result = std::__shared_ptr_emplace<quasar::JapaneseDerivedEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::SystemConfig &,quasar::PTree const&,std::allocator<quasar::JapaneseDerivedEnumerator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1EA51A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::JapaneseDerivedEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::SystemConfig &,quasar::PTree const&,std::allocator<quasar::JapaneseDerivedEnumerator>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A616A8;
  quasar::JapaneseDerivedEnumerator::JapaneseDerivedEnumerator(a1 + 3);
  return a1;
}

void sub_1B1EA5200(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::JapaneseDerivedEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A616A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::JapaneseDerivedEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A616A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::JapaneseDerivedEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<quasar::DerivedEnumerator,std::allocator<quasar::DerivedEnumerator>,std::string const&,quasar::SystemConfig &,quasar::PTree const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x138uLL);
  double result = std::__shared_ptr_emplace<quasar::DerivedEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::SystemConfig &,quasar::PTree const&,std::allocator<quasar::DerivedEnumerator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1EA5310(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::DerivedEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::SystemConfig &,quasar::PTree const&,std::allocator<quasar::DerivedEnumerator>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A602F8;
  quasar::DerivedEnumerator::DerivedEnumerator(a1 + 3);
  return a1;
}

void sub_1B1EA536C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::DerivedEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A602F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::DerivedEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A602F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::DerivedEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::LmeDataFactoryBase::Word>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::LmeDataFactoryBase::Word>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  long long v7 = (std::string *)(v6 + 4);
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1EA55EC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::LmeDataFactoryBase::Word>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::vector<quasar::LmeDataFactoryBase::Word>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__push_back_slow_path<quasar::LmeDataFactoryBase::Word const&>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  BOOL v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  unint64_t v10 = v7;
  uint64_t v11 = (std::string *)&v7[80 * v3];
  long long v13 = &v7[80 * v6];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>(a1 + 16, v11, a2);
  uint64_t v12 = &v11[3].__r_.__value_.__s.__data_[8];
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1EA57C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

srilm::NgramCountContext *srilm::NgramCountContext::NgramCountContext(srilm::NgramCountContext *this)
{
  *(unsigned char *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0xBFF0000000000000;
  *((_DWORD *)this + 22) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 12, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 15, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 18, "");
  return this;
}

void sub_1B1EA5870(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  uint64_t v6 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  long long v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *v4;
  *unint64_t v4 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  _Unwind_Resume(exception_object);
}

void **std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100](void ***a1, void **a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    srilm::NgramCountContext::~NgramCountContext(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void srilm::NgramCountContext::~NgramCountContext(void **this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  uint64_t v2 = this[6];
  this[6] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)this[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = this[3];
  this[3] = 0;
  if (v4) {
    (*(void (**)(void *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = this[2];
  this[2] = 0;
  if (v5) {
    (*(void (**)(void *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = this[1];
  this[1] = 0;
  if (v6) {
    (*(void (**)(void *))(*(void *)v6 + 8))(v6);
  }
}

void *kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(void *this)
{
  *this = &unk_1F0A510E8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf(void **this)
{
  *this = &unk_1F0A510E8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t kaldi::quasar::ComputeEngineBufferItf::CopyFrom(kaldi::quasar::ComputeEngineBufferItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  kaldi::quasar::ComputeEngineBufferItf::GetShape(this, (char **)&__p);
  kaldi::quasar::ComputeEngineBufferItf::GetShape(a2, &v10);
  unint64_t v4 = __p;
  uint64_t v5 = v10;
  if (v9 - (unsigned char *)__p != v11 - v10)
  {
    BOOL v6 = 0;
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v6 = memcmp(__p, v10, v9 - (unsigned char *)__p) == 0;
  if (v5)
  {
LABEL_5:
    uint64_t v11 = v5;
    operator delete(v5);
    unint64_t v4 = __p;
  }
LABEL_6:
  if (v4)
  {
    uint64_t v9 = v4;
    operator delete(v4);
  }
  if (!v6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "GetShape() == src.GetShape()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  return (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, const kaldi::quasar::ComputeEngineBufferItf *))(*(void *)this + 64))(this, a2);
}

void sub_1B1EA5C9C(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::ComputeEngineBufferItf::GetShape(kaldi::quasar::ComputeEngineBufferItf *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v4 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)this + 176))(this);
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      int v6 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)this + 184))(this, v5);
      uint64_t v7 = v6;
      uint64_t v9 = a2[1];
      unint64_t v8 = (unint64_t)a2[2];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = *a2;
        uint64_t v12 = (v9 - *a2) >> 3;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v8 - (void)v11;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v15);
          uint64_t v11 = *a2;
          uint64_t v9 = a2[1];
        }
        else
        {
          uint64_t v16 = 0;
        }
        int v17 = &v16[8 * v12];
        *(void *)int v17 = v7;
        uint64_t v10 = v17 + 8;
        while (v9 != v11)
        {
          uint64_t v18 = *((void *)v9 - 1);
          v9 -= 8;
          *((void *)v17 - 1) = v18;
          v17 -= 8;
        }
        *a2 = v17;
        a2[1] = v10;
        a2[2] = &v16[8 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(void *)uint64_t v9 = v6;
        uint64_t v10 = v9 + 8;
      }
      a2[1] = v10;
      uint64_t v5 = (v5 + 1);
    }
    while (v5 != v4);
  }
}

void sub_1B1EA5E1C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ComputeEngineBufferItf::GetFirstNonZeroColumn(kaldi::quasar::ComputeEngineBufferItf *this, float a2)
{
  if ((*(unsigned int (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)this + 176))(this) != 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "GetNumDims() == 2");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  double v4 = kaldi::Matrix<float>::Matrix((uint64_t)v7);
  (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t *, double))(*(void *)this + 24))(this, v7, v4);
  uint64_t NonZeroColumn = kaldi::MatrixBase<float>::FirstNonZeroColumn(v7, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)v7);
  return NonZeroColumn;
}

void sub_1B1EA5F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::ComputeEngineBufferItf::GetSize(kaldi::quasar::ComputeEngineBufferItf *this)
{
  int v2 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)this + 176))(this);
  if (v2 < 1) {
    return 1;
  }
  int v3 = v2;
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  do
  {
    v5 *= (*(int (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)this + 184))(this, v4);
    uint64_t v4 = (v4 + 1);
  }
  while (v3 != v4);
  return v5;
}

void *kaldi::quasar::ComputeEngineBufferItf::GetShapeString@<X0>(kaldi::quasar::ComputeEngineBufferItf *this@<X0>, void *a2@<X8>)
{
  int v4 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)this + 176))(this);
  if (v4)
  {
    int v5 = v4;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"[ ", 2);
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, void))(*(void *)this + 184))(this, 0);
    std::ostream::operator<<();
    if (v5 >= 2)
    {
      uint64_t v6 = 1;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)this + 184))(this, v6);
        std::ostream::operator<<();
        uint64_t v6 = (v6 + 1);
      }
      while (v5 != v6);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ]", 2);
    std::stringbuf::str();
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1B3EA8520](&v10);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "[]");
  }
}

void sub_1B1EA624C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *kaldi::quasar::ComputeEngineBufferItf::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void kaldi::quasar::ComputeEngineItf::CreateConcatMove(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1] - *a2;
  if (v7 == 1)
  {
    uint64_t v8 = *v6;
    *uint64_t v6 = 0;
    *a4 = v8;
  }
  else if (v7)
  {
    std::string __p = 0;
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(&__p, v7);
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    if (*a2 != v12)
    {
      unint64_t v13 = v24;
      do
      {
        uint64_t v14 = *v11;
        if (v13 >= v25)
        {
          uint64_t v15 = (v13 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v15 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v16 = (v25 - (unsigned char *)__p) >> 2;
          if (v16 <= v15 + 1) {
            unint64_t v16 = v15 + 1;
          }
          if ((unint64_t)(v25 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v25, v17);
          }
          else {
            uint64_t v18 = 0;
          }
          std::string v19 = &v18[8 * v15];
          *(void *)std::string v19 = v14;
          unint64_t v13 = v19 + 8;
          long long v21 = (char *)__p;
          std::vector<std::string> v20 = v24;
          if (v24 != __p)
          {
            do
            {
              uint64_t v22 = *((void *)v20 - 1);
              v20 -= 8;
              *((void *)v19 - 1) = v22;
              v19 -= 8;
            }
            while (v20 != v21);
            std::vector<std::string> v20 = (char *)__p;
          }
          std::string __p = v19;
          uint64_t v24 = v13;
          unint64_t v25 = &v18[8 * v17];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *(void *)unint64_t v13 = v14;
          v13 += 8;
        }
        uint64_t v24 = v13;
        ++v11;
      }
      while (v11 != v12);
    }
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 96))(a1, &__p, a3);
    if (__p)
    {
      uint64_t v24 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    *a4 = 0;
  }
}

void sub_1B1EA6424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ComputeEngineItf::CreateConcat(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  std::string __p = 0;
  uint64_t v18 = 0;
  std::string v19 = 0;
  int v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *v5;
      if (v7 >= v19)
      {
        uint64_t v9 = (v7 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v10 = (v19 - (unsigned char *)__p) >> 2;
        if (v10 <= v9 + 1) {
          unint64_t v10 = v9 + 1;
        }
        if ((unint64_t)(v19 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v19, v11);
        }
        else {
          uint64_t v12 = 0;
        }
        unint64_t v13 = &v12[8 * v9];
        *(void *)unint64_t v13 = v8;
        unint64_t v7 = v13 + 8;
        uint64_t v15 = (char *)__p;
        uint64_t v14 = v18;
        if (v18 != __p)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)__p;
        }
        std::string __p = v13;
        uint64_t v18 = v7;
        std::string v19 = &v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)unint64_t v7 = v8;
        v7 += 8;
      }
      uint64_t v18 = v7;
      ++v5;
    }
    while (v5 != v6);
  }
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 96))(a1, &__p, a3);
  if (__p)
  {
    uint64_t v18 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B1EA65C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **kaldi::quasar::ComputeEngineItf::CreateSplitMove@<X0>(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t *a3@<X8>)
{
  double result = *a2;
  if (!*a2) {
    goto LABEL_5;
  }
  double result = (void **)(*((uint64_t (**)(void **))*result + 22))(result);
  if (!result) {
    goto LABEL_5;
  }
  double result = (void **)(*((uint64_t (**)(void **, void))**a2 + 23))(*a2, 0);
  if (result == 1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v13[4] = a3 + 2;
    unint64_t v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), 1uLL);
    v13[0] = v7;
    v13[1] = v7;
    void v13[3] = &v7[v8];
    uint64_t v9 = *a2;
    *a2 = 0;
    *unint64_t v7 = v9;
    v13[2] = v7 + 1;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a3, v13);
    uint64_t v10 = a3[1];
    double result = std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(v13);
    a3[1] = v10;
    return result;
  }
  if (result)
  {
    unint64_t v11 = *a2;
    uint64_t v12 = *(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 104);
    return (void **)v12(a1, v11);
  }
  else
  {
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_1B1EA6730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
}

void kaldi::quasar::ComputeEngineItf::RunBatch(uint64_t a1, long long **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      kaldi::quasar::ComputeEngineItf::CreateConcatMove(a1, (uint64_t **)v9 + 3, 0, &p_p);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v11 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      p_data = (void **)&p_p->__r_.__value_.__l.__data_;
      p_p = 0;
      unint64_t v33 = p_data;
      unint64_t v13 = v35;
      if (v35 >= v36)
      {
        uint64_t v17 = (uint64_t)(v35 - v34) >> 5;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v36 - v34;
        if ((uint64_t)(v36 - v34) >> 4 > v18) {
          unint64_t v18 = v19 >> 4;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        long long v41 = &v36;
        long long v21 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v36, v20);
        uint64_t v22 = &v21[4 * v17];
        uint64_t v37 = v21;
        long long v38 = v22;
        long long v40 = &v21[4 * v23];
        long long v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v22[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v22 = v24;
        memset(&__p, 0, sizeof(__p));
        unint64_t v25 = v33;
        unint64_t v33 = 0;
        v22[3] = (uint64_t)v25;
        long long v39 = (char *)(v22 + 4);
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(&v34, &v37);
        unint64_t v16 = v35;
        std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v37);
      }
      else
      {
        long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v35 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v13 = v14;
        memset(&__p, 0, sizeof(__p));
        uint64_t v15 = v33;
        unint64_t v33 = 0;
        *(void *)(v13 + 24) = v15;
        unint64_t v16 = v13 + 32;
      }
      unint64_t v35 = v16;
      uint64_t v26 = v33;
      unint64_t v33 = 0;
      if (v26) {
        (*((void (**)(void **))*v26 + 1))(v26);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      unint64_t v27 = (void **)&p_p->__r_.__value_.__l.__data_;
      p_p = 0;
      if (v27) {
        (*((void (**)(void **))*v27 + 1))(v27);
      }
      v9 += 3;
    }
    while (v9 != v10);
  }
  uint64_t v37 = 0;
  long long v38 = 0;
  long long v39 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)a1 + 120))(a1, &v34, a3, a4, &v37);
  uint64_t v28 = *a5;
  std::string::size_type v29 = a5[1];
  while (v29 != v28)
  {
    v29 -= 24;
    __p.__r_.__value_.__r.__words[0] = v29;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  a5[1] = v28;
  uint64_t v30 = (void ***)v37;
  uint64_t v31 = (void ***)v38;
  if (v37 != v38)
  {
    do
    {
      kaldi::quasar::ComputeEngineItf::CreateSplitMove(a1, v30, (uint64_t *)&__p);
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::push_back[abi:ne180100](a5, (uint64_t)&__p);
      p_p = &__p;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      ++v30;
    }
    while (v30 != v31);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v37 = &v34;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
}

void sub_1B1EA6A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  a9 = (void **)&a17;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)&a14;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    long long v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)long long v14 = 0;
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    double result = std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v16);
  }
  else
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1EA6C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(kaldi::quasar::ComputeEngineConfigItf *this)
{
  *(void *)this = &unk_1F0A511C0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *kaldi::quasar::ComputeEngineConfigItf::CreateComputeEngineAllowingFallback@<X0>(kaldi::quasar::ComputeEngineConfigItf *this@<X0>, uint64_t a2@<X8>)
{
  double result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)this + 24))(&v4);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = v4;
  return result;
}

uint64_t kaldi::quasar::ComputeEngineConfigItf::ComputeEngineUpgradeLikelyExists(kaldi::quasar::ComputeEngineConfigItf *this)
{
  return 0;
}

void kaldi::quasar::ComputeEngineBufferItf::CopyFromImpl(kaldi::quasar::ComputeEngineBufferItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "CopyFromImpl not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::ComputeEngineBufferItf::GetFloat16Scalar(kaldi::quasar::ComputeEngineBufferItf *this)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetFloatScalarFloat16 not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::GetWritableDataFloat16(kaldi::quasar::ComputeEngineBufferItf *this)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetWritableDataFloat16 not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::GetDataFloat16(kaldi::quasar::ComputeEngineBufferItf *this)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetDataFloatFloat16 not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::GetWritableDataFloat(kaldi::quasar::ComputeEngineBufferItf *this)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetWritableDataFloat not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::GetDataFloat(kaldi::quasar::ComputeEngineBufferItf *this)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetDataFloat not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::GetDataInt32(kaldi::quasar::ComputeEngineBufferItf *this)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetDataInt32 not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::isDataFloat16(kaldi::quasar::ComputeEngineBufferItf *this)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "isDataFloat16 not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

uint64_t std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  int v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = v1;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void *quasar::corrective_reranking::operator<<(void *a1)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
  int v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)")", 1);
  return a1;
}

void *quasar::corrective_reranking::operator<<(void *a1, uint64_t *a2)
{
  quasar::joinToList<std::vector<quasar::corrective_reranking::TextRange>>(a2, 0);
  if ((v7 & 0x80u) == 0) {
    int v3 = __p;
  }
  else {
    int v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1B1EA71F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::joinToList<std::vector<quasar::corrective_reranking::TextRange>>(uint64_t *a1, int a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"[", 1);
  if (*a1 != a1[1])
  {
    if (a2)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n ", 2);
      uint64_t v4 = ",\n ";
    }
    else
    {
      uint64_t v4 = ", ";
    }
    v7[0] = (uint64_t)v4;
    v7[1] = strlen(v4);
    quasar::joinToStream<std::vector<quasar::corrective_reranking::TextRange>>(v9, a1, v7);
    if (a2) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"]", 1);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v9[0] = v5;
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v11);
}

void sub_1B1EA740C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *quasar::corrective_reranking::operator<<(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  uint64_t v2 = *(void *)(a2 + 64);
  if (0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3) != (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "o.outputs.size() == o.utterance.size()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (v2 != v3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(a2 + 32);
      if (v8) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      }
      uint64_t v10 = v3 + v6;
      int v11 = *(char *)(v9 + v7 + 23);
      if (v11 >= 0) {
        uint64_t v12 = v9 + v7;
      }
      else {
        uint64_t v12 = *(void *)(v9 + v7);
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(v9 + v7 + 23);
      }
      else {
        uint64_t v13 = *(void *)(v9 + v7 + 8);
      }
      long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v12, v13);
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
      int v16 = *(char *)(v10 + 23);
      if (v16 >= 0) {
        uint64_t v17 = v10;
      }
      else {
        uint64_t v17 = *(void *)v10;
      }
      if (v16 >= 0) {
        uint64_t v18 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        uint64_t v18 = *(void *)(v10 + 8);
      }
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
      ++v8;
      uint64_t v3 = *(void *)(a2 + 56);
      v7 += 32;
      v6 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 64) - v3) >> 3) > v8);
  }
  if (*(unsigned char *)(a2 + 112))
  {
    unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" | targetRange=", 15);
    quasar::corrective_reranking::operator<<(v20, (uint64_t *)(a2 + 88));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" | wfst_weight=", 15);
  std::ostream::operator<<();
  return a1;
}

void quasar::corrective_reranking::ASRCandidate::ASRCandidate(quasar::corrective_reranking::ASRCandidate *this, const quasar::PTree *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "text");
  quasar::PTree::getChild((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1EA7688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::ASRCandidate::toPtree(quasar::corrective_reranking::ASRCandidate *this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::PTree::PTree(a2);
  std::string::basic_string[abi:ne180100]<0>(v11, "text");
  quasar::PTree::PTree(&Type, this);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v11, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "confidence");
  uint64_t v4 = (quasar *)*((unsigned int *)this + 6);
  int Type = quasar::getType(v4);
  std::to_string(&v6, (int)v4);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v10 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v11, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_1B1EA77B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v3 - 17) < 0) {
    operator delete(*(void **)(v3 - 40));
  }
  quasar::PTree::~PTree(v2);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TextRange::toPtree(quasar::corrective_reranking::TextRange *this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::PTree::PTree(a2);
  std::string::basic_string[abi:ne180100]<0>(v12, "start_index");
  int v4 = *(_DWORD *)this;
  int Type = quasar::getType((quasar *)*(unsigned int *)this);
  std::to_string(&v7, v4);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v12, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "length");
  uint64_t v5 = (quasar *)*((unsigned int *)this + 1);
  int Type = quasar::getType(v5);
  std::to_string(&v7, (int)v5);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v12, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_1B1EA790C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v3 - 33) < 0) {
    operator delete(*(void **)(v3 - 56));
  }
  quasar::PTree::~PTree(v2);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TargetRange::toPtree(quasar::corrective_reranking::TextRange **this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::PTree::PTree(a2);
  quasar::PTree::PTree((quasar::PTree *)v8);
  int v4 = *this;
  uint64_t v5 = this[1];
  while (v4 != v5)
  {
    quasar::corrective_reranking::TextRange::toPtree(v4, (quasar::PTree *)__p);
    quasar::PTree::addChild((quasar::PTree *)v8, (const quasar::PTree *)__p);
    quasar::PTree::~PTree((quasar::PTree *)__p);
    int v4 = (quasar::corrective_reranking::TextRange *)((char *)v4 + 8);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "token_ranges");
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)v8, 1);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  quasar::PTree::~PTree((quasar::PTree *)v8);
}

void sub_1B1EA7A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a20);
  quasar::PTree::~PTree(v20);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Parse::toPtree(uint64_t a1@<X0>, uint64_t *a2@<X1>, quasar::PTree *a3@<X8>)
{
  quasar::PTree::PTree(a3);
  std::string::basic_string[abi:ne180100]<0>(v17, "asr_candidate");
  quasar::corrective_reranking::ASRCandidate::toPtree((quasar::corrective_reranking::ASRCandidate *)a1, (quasar::PTree *)&Type);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "utterance");
  quasar::corrective_reranking::tokensWithRangesToPtree((uint64_t *)(a1 + 32), (uint64_t *)a1, (quasar::PTree *)&Type);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "outputs");
  quasar::PTree::PTree<std::string>((uint64_t)&Type, (uint64_t *)(a1 + 56));
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  std::string v6 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v17, "weight");
  float v7 = *(float *)(a1 + 80);
  int Type = quasar::getType(v6, v7);
  std::to_string(&v12, v7);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (*(unsigned char *)(a1 + 112))
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "target_range");
    quasar::corrective_reranking::TargetRange::toCodePoints((unsigned int **)(a1 + 88), a2, &__p);
    quasar::corrective_reranking::TargetRange::toPtree((quasar::corrective_reranking::TextRange **)&__p, (quasar::PTree *)&Type);
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
    quasar::PTree::~PTree((quasar::PTree *)&Type);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
  if (*(char *)(a1 + 143) < 0)
  {
    if (!*(void *)(a1 + 128)) {
      goto LABEL_20;
    }
  }
  else if (!*(unsigned char *)(a1 + 143))
  {
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "_assigned_payload");
  quasar::PTree::PTree(&Type, a1 + 120);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
LABEL_20:
  uint64_t v8 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v17, "ranker_score");
  float v9 = *(float *)(a1 + 144);
  int Type = quasar::getType(v8, v9);
  std::to_string(&v12, v9);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "ranker_features");
  quasar::PTree::PTree<float>((uint64_t)&Type, (float **)(a1 + 152));
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "intent");
  quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)a1, (uint64_t)&__p);
  quasar::PTree::PTree(&Type, &__p);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "target");
  quasar::corrective_reranking::Parse::getTargetWithRanges(a1, (uint64_t *)&__p);
  quasar::corrective_reranking::tokensWithRangesToPtree((uint64_t *)&__p, a2, (quasar::PTree *)&Type);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  p_p = &__p;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "payload");
  quasar::corrective_reranking::Parse::getPayload((quasar::corrective_reranking::Parse *)a1, &__p);
  quasar::PTree::PTree(&Type, &__p);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "left_replacements");
  quasar::PTree::PTree<std::string>((uint64_t)&Type, (uint64_t *)(a1 + 184));
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "right_replacements");
  quasar::PTree::PTree<std::string>((uint64_t)&Type, (uint64_t *)(a1 + 208));
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
}

void sub_1B1EA7F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::PTree::~PTree((quasar::PTree *)&a16);
  if (*(char *)(v17 - 57) < 0) {
    operator delete(*(void **)(v17 - 80));
  }
  quasar::PTree::~PTree(v16);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::tokensWithRangesToPtree(uint64_t *a1@<X0>, uint64_t *a2@<X1>, quasar::PTree *a3@<X8>)
{
  quasar::corrective_reranking::getTokenRanges(a1, (char **)&v15);
  std::string __p = 0;
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = 0uLL;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&__p, v15, (uint64_t)v16, (v16 - (unsigned char *)v15) >> 3);
  quasar::corrective_reranking::TargetRange::toCodePoints((unsigned int **)&__p, a2, &v23);
  float v7 = v23;
  uint64_t v6 = v24;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  if (__p)
  {
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    operator delete(__p);
  }
  if (v15)
  {
    char v16 = v15;
    operator delete(v15);
  }
  if ((a1[1] - *a1) >> 5 != (v6 - (uint64_t)v7) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"tokensWithRanges.size() == tokenRangesInCodePoints.size()", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v23);
  }
  quasar::PTree::PTree(a3);
  uint64_t v8 = *a1;
  uint64_t v14 = v7;
  if (a1[1] == *a1)
  {
    if (!v7) {
      return;
    }
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    char v11 = v7 + 1;
    do
    {
      quasar::PTree::PTree((quasar::PTree *)&v23);
      unsigned int v12 = *(v11 - 1);
      LODWORD(__p) = quasar::getType((quasar *)v12);
      std::to_string(&v18, v12);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      char v22 = 1;
      quasar::PTree::addChild((quasar::PTree *)&v23, (const quasar::PTree *)&__p);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      int v13 = *v11;
      LODWORD(__p) = quasar::getType((quasar *)*v11);
      std::to_string(&v18, v13);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      char v22 = 1;
      quasar::PTree::addChild((quasar::PTree *)&v23, (const quasar::PTree *)&__p);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      quasar::PTree::PTree((quasar::PTree *)&__p);
      quasar::PTree::PTree(&v15, v8 + v9);
      quasar::PTree::addChild((quasar::PTree *)&__p, (const quasar::PTree *)&v15);
      quasar::PTree::~PTree((quasar::PTree *)&v15);
      quasar::PTree::addChild((quasar::PTree *)&__p, (const quasar::PTree *)&v23);
      quasar::PTree::addChild(a3, (const quasar::PTree *)&__p);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      quasar::PTree::~PTree((quasar::PTree *)&v23);
      ++v10;
      uint64_t v8 = *a1;
      v11 += 2;
      v9 += 32;
    }
    while (v10 < (a1[1] - *a1) >> 5);
  }
  operator delete(v14);
}

void quasar::corrective_reranking::TargetRange::toCodePoints(unsigned int **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  if (*a1 == a1[1])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(a3, 0, 0, 0);
    return;
  }
  uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a2[1];
  }
  std::vector<int>::vector(&v36, v6 + 1);
  unint64_t v7 = 0;
  int v8 = 0;
  for (std::vector<int>::pointer i = v36.__begin_; ; i[v7++] = v8 - 1)
  {
    unint64_t v10 = *((unsigned __int8 *)a2 + 23);
    if (*((char *)a2 + 23) < 0) {
      break;
    }
    if (v7 >= v10) {
      goto LABEL_20;
    }
LABEL_9:
    if ((v10 & 0x80u) == 0) {
      char v11 = a2;
    }
    else {
      char v11 = (uint64_t *)*a2;
    }
    if ((*((unsigned char *)v11 + v7) & 0xC0) != 0x80) {
      ++v8;
    }
    if (!v8)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"numCodePoints > 0", 17);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
  }
  if (a2[1] > v7) {
    goto LABEL_9;
  }
  unint64_t v10 = a2[1];
LABEL_20:
  i[v10] = v8;
  std::string __p = 0;
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  unsigned int v12 = *a1;
  int v13 = a1[1];
  if (*a1 == v13)
  {
    uint64_t v14 = 0;
    long long v32 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      unint64_t v15 = *v12;
      if ((v15 & 0x80000000) != 0)
      {
        int v17 = 0;
      }
      else
      {
        std::vector<int>::pointer v16 = v36.__end_ - 1;
        if (v15 < v36.__end_ - v36.__begin_) {
          std::vector<int>::pointer v16 = &v36.__begin_[v15];
        }
        int v17 = *v16;
      }
      unint64_t v18 = v12[1] + v15;
      if ((v18 & 0x80000000) != 0)
      {
        int v20 = 0;
      }
      else
      {
        if (v18 >= v36.__end_ - v36.__begin_) {
          std::vector<int>::pointer v19 = v36.__end_ - 1;
        }
        else {
          std::vector<int>::pointer v19 = &v36.__begin_[v18];
        }
        int v20 = *v19;
      }
      int v21 = v20 - v17;
      if (v14 >= v35)
      {
        uint64_t v22 = (v14 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v22 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v23 = (v35 - (unsigned char *)__p) >> 2;
        if (v23 <= v22 + 1) {
          unint64_t v23 = v22 + 1;
        }
        if ((unint64_t)(v35 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v35, v24);
        unint64_t v27 = (int *)&v25[8 * v22];
        *unint64_t v27 = v17;
        v27[1] = v21;
        std::string::size_type v29 = (char *)__p;
        uint64_t v28 = v34;
        uint64_t v30 = (char *)v27;
        if (v34 != __p)
        {
          do
          {
            uint64_t v31 = *((void *)v28 - 1);
            v28 -= 8;
            *((void *)v30 - 1) = v31;
            v30 -= 8;
          }
          while (v28 != v29);
          uint64_t v28 = (char *)__p;
        }
        uint64_t v14 = (char *)(v27 + 2);
        std::string __p = v30;
        uint64_t v34 = (char *)(v27 + 2);
        unint64_t v35 = &v25[8 * v26];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v14 = v17;
        *((_DWORD *)v14 + 1) = v21;
        v14 += 8;
      }
      uint64_t v34 = v14;
      v12 += 2;
    }
    while (v12 != v13);
    long long v32 = __p;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(a3, v32, (uint64_t)v14, (v14 - (unsigned char *)v32) >> 3);
  if (__p)
  {
    uint64_t v34 = (char *)__p;
    operator delete(__p);
  }
  if (v36.__begin_)
  {
    v36.__end_ = v36.__begin_;
    operator delete(v36.__begin_);
  }
}

std::string *quasar::corrective_reranking::Parse::getIntent@<X0>(quasar::corrective_reranking::Parse *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = (quasar::corrective_reranking::Parse *)std::string::basic_string[abi:ne180100]<0>((void *)a2, "dictate");
  uint64_t result = (std::string *)quasar::corrective_reranking::Parse::getCommandTokens(v4);
  uint64_t v6 = &result->__r_.__value_.__s.__data_[16];
  while (1)
  {
    uint64_t v6 = *(std::string::value_type **)v6;
    if (!v6) {
      break;
    }
    uint64_t result = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*((void *)this + 7), *((void *)this + 8), (unsigned __int8 **)v6 + 2);
    if (result != *((std::string **)this + 8))
    {
      uint64_t result = std::string::operator=((std::string *)a2, (const std::string *)(v6 + 16));
      uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
      BOOL v8 = (v7 & 0x80u) != 0;
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(a2 + 8);
      }
      if (v8) {
        uint64_t v9 = *(std::string **)a2;
      }
      else {
        uint64_t v9 = (std::string *)a2;
      }
      if (v7 >= 6)
      {
        unint64_t v10 = (std::string *)((char *)v9 + v7);
        uint64_t result = v9;
        while (1)
        {
          uint64_t result = (std::string *)memchr(result, 105, v7 - 5);
          if (!result) {
            break;
          }
          if (LODWORD(result->__r_.__value_.__l.__data_) == 1702063721
            && WORD2(result->__r_.__value_.__r.__words[0]) == 29810)
          {
            if (result != v10 && (char *)result - (char *)v9 != -1)
            {
              unsigned int v12 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char [11],std::__identity>(*((unsigned __int8 **)this + 7), *((unsigned __int8 **)this + 8), "LEFTTARGET");
              int v13 = (unsigned __int8 *)*((void *)this + 8);
              uint64_t result = (std::string *)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char [12],std::__identity>(*((unsigned __int8 **)this + 7), v13, "RIGHTTARGET");
              uint64_t v14 = (std::string *)*((void *)this + 8);
              if (result != v14 || v12 != v13)
              {
                unint64_t v15 = "insertbefore";
                if (result != v14 && v12 != v13) {
                  unint64_t v15 = "insertbetween";
                }
                if (result == v14) {
                  int v17 = "insertafter";
                }
                else {
                  int v17 = v15;
                }
                uint64_t result = (std::string *)MEMORY[0x1B3EA7B20](a2, v17);
              }
            }
            goto LABEL_31;
          }
          uint64_t result = (std::string *)((char *)result + 1);
          uint64_t v7 = (char *)v10 - (char *)result;
          if ((char *)v10 - (char *)result < 6) {
            goto LABEL_31;
          }
        }
      }
      break;
    }
  }
LABEL_31:
  if (*((unsigned char *)this + 112))
  {
    if (*((void *)this + 11) == *((void *)this + 12)) {
      return std::string::append((std::string *)a2, "All");
    }
  }
  return result;
}

void sub_1B1EA8808(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::corrective_reranking::Parse::getTargetWithRanges@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = (quasar::corrective_reranking::Parse *)this;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(this + 112) && *(void *)(this + 88) == *(void *)(this + 96))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return this;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "TARGET");
  std::unordered_set<std::string>::unordered_set((uint64_t)v39, (unsigned __int8 *)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::corrective_reranking::Parse::getIntent(v2, (uint64_t)&v37);
  if ((v38 & 0x80000000) == 0)
  {
    if (v38 != 11)
    {
      if (v38 != 12)
      {
        if (v38 == 13)
        {
          int v4 = (uint64_t *)&v37;
          goto LABEL_24;
        }
        goto LABEL_49;
      }
      if ((void)v37 != 0x6562747265736E69 || DWORD2(v37) != 1701998438) {
        goto LABEL_49;
      }
      goto LABEL_40;
    }
    if ((void)v37 != 0x6661747265736E69 || *(void *)((char *)&v37 + 3) != 0x7265746661747265) {
      goto LABEL_49;
    }
LABEL_46:
    std::string::basic_string[abi:ne180100]<0>(&__p, "LEFTTARGET");
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v39, &__p, &v41);
LABEL_47:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_49;
  }
  uint64_t v5 = *((void *)&v37 + 1);
  if (*((void *)&v37 + 1) == 11)
  {
    if (*(void *)v37 == 0x6661747265736E69 && *(void *)(v37 + 3) == 0x7265746661747265) {
      goto LABEL_46;
    }
    uint64_t v5 = *((void *)&v37 + 1);
  }
  else if (*((void *)&v37 + 1) == 12 {
         && *(void *)v37 == 0x6562747265736E69
  }
         && *(_DWORD *)(v37 + 8) == 1701998438)
  {
LABEL_40:
    std::string::basic_string[abi:ne180100]<0>(&__p, "RIGHTTARGET");
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v39, &__p, &v41);
    goto LABEL_47;
  }
  if (v5 == 13)
  {
    int v4 = (uint64_t *)v37;
LABEL_24:
    uint64_t v8 = *v4;
    uint64_t v9 = *(uint64_t *)((char *)v4 + 5);
    if (v8 == 0x6562747265736E69 && v9 == 0x6E65657774656274)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "LEFTTARGET");
      std::string::basic_string[abi:ne180100]<0>(&v41, "RIGHTTARGET");
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v39, &__p, v42);
      for (uint64_t i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v41.__r_.__value_.__r.__words[i + 2]) < 0) {
          operator delete(*(void **)((char *)&__p + i * 8 + 24));
        }
      }
    }
  }
LABEL_49:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v14 = *((void *)v2 + 7);
  uint64_t v15 = *((void *)v2 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3) != (uint64_t)(*((void *)v2 + 5) - *((void *)v2 + 4)) >> 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"outputs.size() == utterance.size()", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  if (v15 != v14)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = *((void *)v2 + 4);
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v39, (unsigned __int8 *)(v14 + v16)))
      {
        int v20 = (long long *)(v19 + v17);
        if (*(char *)(v19 + v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v19 + v17), *(void *)(v19 + v17 + 8));
        }
        else
        {
          long long v21 = *v20;
          v35.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v21;
        }
        uint64_t v36 = *((void *)v20 + 3);
        unint64_t v22 = a2[1];
        unint64_t v23 = a2[2];
        if (v22 >= v23)
        {
          uint64_t v25 = (uint64_t)(v22 - *a2) >> 5;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v27 = v23 - *a2;
          if (v27 >> 4 > v26) {
            unint64_t v26 = v27 >> 4;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          v41.__r_.__value_.__l.__size_ = (std::string::size_type)(a2 + 2);
          std::string::size_type v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a2 + 2), v28);
          std::string::size_type v30 = (std::string::size_type)v29 + 32 * v25;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
          __p.__r_.__value_.__l.__size_ = v30;
          v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v29 + 32 * v31;
          long long v32 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
          *(void *)(v30 + 16) = *((void *)&v35.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v30 = v32;
          memset(&v35, 0, sizeof(v35));
          *(void *)(v30 + 24) = v36;
          __p.__r_.__value_.__r.__words[2] = v30 + 32;
          std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a2, &__p);
          uint64_t v33 = a2[1];
          std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&__p);
          int v34 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
          a2[1] = v33;
          if (v34 < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v24 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
          *(void *)(v22 + 16) = *((void *)&v35.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v22 = v24;
          memset(&v35, 0, sizeof(v35));
          *(void *)(v22 + 24) = v36;
          a2[1] = v22 + 32;
        }
      }
      ++v18;
      uint64_t v14 = *((void *)v2 + 7);
      v17 += 32;
      v16 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)v2 + 8) - v14) >> 3) > v18);
  }
  if (v38 < 0) {
    operator delete((void *)v37);
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v39);
}

void sub_1B1EA8DC0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1EA8DF8);
}

void quasar::corrective_reranking::Parse::getPayload(quasar::corrective_reranking::Parse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v4 = (_OWORD *)((char *)this + 120);
  if ((*((char *)this + 143) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 143))
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((void *)this + 17);
      return;
    }
    goto LABEL_8;
  }
  std::string::size_type v5 = *((void *)this + 16);
  if (!v5)
  {
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(__p, "PAYLOAD");
    std::unordered_set<std::string>::unordered_set((uint64_t)v19, (unsigned __int8 *)__p, 1);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v7 = *((void *)this + 7);
    uint64_t v8 = *((void *)this + 8);
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3) != (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"outputs.size() == utterance.size()", 34);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    if (v8 == v7) {
      goto LABEL_21;
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *((void *)this + 4);
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v19, (unsigned __int8 *)(v7 + v9)))
      {
        int v13 = (long long *)(v12 + v10);
        unint64_t v14 = v17;
        if (v17 >= v18)
        {
          uint64_t v15 = std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>(&v16, v13);
        }
        else
        {
          std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>((uint64_t)&v16, v13);
          uint64_t v15 = v14 + 32;
        }
        unint64_t v17 = v15;
      }
      ++v11;
      uint64_t v7 = *((void *)this + 7);
      v10 += 32;
      v9 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8) - v7) >> 3) > v11);
    if (v16 == v17) {
LABEL_21:
    }
      std::string::basic_string[abi:ne180100]<0>(a2, "");
    else {
      quasar::pySlice<std::string>((uint64_t)this, *(_DWORD *)(v16 + 24), *(_DWORD *)(v17 - 4) + *(_DWORD *)(v17 - 8), a2);
    }
    __p[0] = &v16;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v19);
    return;
  }
  uint64_t v6 = *(const std::string::value_type **)v4;
  std::string::__init_copy_ctor_external(a2, v6, v5);
}

void sub_1B1EA9078(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1EA90A4);
}

void *quasar::corrective_reranking::TargetRange::TargetRange(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  return a1;
}

void quasar::corrective_reranking::TargetRange::getTargetFromText(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)a1 == v3)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::size_type v8 = *(void *)(a2 + 8);
      uint64_t v9 = *(const std::string::value_type **)a2;
      std::string::__init_copy_ctor_external(a3, v9, v8);
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
  else
  {
    float v4 = (float)**(int **)a1;
    if ((COERCE_INT(fabs(v4)) - 0x800000) >> 24 >= 0x7F && COERCE_INT((float)**(int **)a1) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "std::isfinite(getStartIndex())");
      goto LABEL_20;
    }
    float v6 = (float)(*(_DWORD *)(v3 - 4) + *(_DWORD *)(v3 - 8));
    if ((COERCE_INT(fabs(v6)) - 0x800000) >> 24 >= 0x7F && LODWORD(v6) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "std::isfinite(getEndIndex())");
LABEL_20:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    quasar::pySlice<std::string>(a2, (int)v4, (int)v6, a3);
  }
}

void quasar::pySlice<std::string>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    LODWORD(v6) = *(unsigned __int8 *)(a1 + 23);
    if (*(unsigned char *)(a1 + 23)) {
      goto LABEL_3;
    }
LABEL_10:
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  std::string::size_type v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_10;
  }
LABEL_3:
  int32x2_t v7 = vdup_n_s32(v6);
  int32x2_t v8 = vmax_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)v7), (int32x2_t)__PAIR64__(a3, a2)), 0);
  int32x2_t v9 = vmin_s32(v8, v7);
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  __int32 v10 = v9.i32[1] - v9.i32[0];
  if (v9.i32[1] > v9.i32[0])
  {
    unsigned __int32 v12 = v8.i32[0];
    std::string::reserve(a4, v10);
    if ((int)v6 >= (uint64_t)v12) {
      std::string::size_type v6 = v12;
    }
    else {
      std::string::size_type v6 = (int)v6;
    }
    do
    {
      unint64_t v11 = (std::string::value_type *)std::string::at((const std::string *)a1, v6);
      std::string::push_back(a4, *v11);
      ++v6;
      --v10;
    }
    while (v10);
  }
}

void sub_1B1EA9308(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::corrective_reranking::Parse::Parse(std::string *this, uint64_t a2, long long **a3, uint64_t a4, long long *a5, uint64_t a6, std::string::value_type a7, long long **a8, float a9, float a10, long long **a11)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v21 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v21;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  quasar::corrective_reranking::tokenize(a2, (long long *)&this[1].__r_.__value_.__r.__words[1]);
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 56), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  *(float *)&this[3].__r_.__value_.__r.__words[1] = a9;
  std::__optional_copy_base<quasar::corrective_reranking::TargetRange,false>::__optional_copy_base[abi:ne180100]((uint64_t)&this[3].__r_.__value_.__r.__words[2], a4);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v22 = *a5;
    this[5].__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v22;
  }
  this[6].__r_.__value_.__l.__size_ = 0;
  *(float *)&this[6].__r_.__value_.__l.__data_ = a10;
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__r.__words[0] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[6].__r_.__value_.__l.__size_, *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__s.__data_[8] = a7;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[8].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 184), *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  this[9].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 208), *a11, a11[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a11[1] - (char *)*a11) >> 3));
  return this;
}

{
  return quasar::corrective_reranking::Parse::Parse(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_1B1EA94C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(unsigned char *)(v2 + 112))
  {
    std::string::size_type v5 = *v3;
    if (*v3)
    {
      *(void *)(v2 + 96) = v5;
      operator delete(v5);
    }
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void sub_1B1EA9560()
{
}

void sub_1B1EA9568()
{
}

uint64_t quasar::corrective_reranking::Parse::getCommandTokens(quasar::corrective_reranking::Parse *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return quasar::corrective_reranking::Parse::getCommandTokens(void)::set;
}

void sub_1B1EA97DC(_Unwind_Exception *a1)
{
  uint64_t v4 = 408;
  while (1)
  {
    if (*(char *)(v2 + v4 - 1) < 0) {
      operator delete(*(void **)(v2 + v4 - 24));
    }
    v4 -= 24;
    if (!v4)
    {
      MEMORY[0x1B3EA8670](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t quasar::corrective_reranking::Parse::getCommandsWithTarget(quasar::corrective_reranking::Parse *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return quasar::corrective_reranking::Parse::getCommandsWithTarget(void)::set;
}

void sub_1B1EA9A2C(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 239) < 0) {
      operator delete(*(void **)(v2 + v4 + 216));
    }
    v4 -= 24;
    if (v4 == -240)
    {
      MEMORY[0x1B3EA8670](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t quasar::corrective_reranking::Parse::getCommandsWithPayload(quasar::corrective_reranking::Parse *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return quasar::corrective_reranking::Parse::getCommandsWithPayload(void)::set;
}

void sub_1B1EA9C0C(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 119) < 0) {
      operator delete(*(void **)(v2 + v4 + 96));
    }
    v4 -= 24;
    if (v4 == -120)
    {
      MEMORY[0x1B3EA8670](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t quasar::corrective_reranking::Parse::getCommandsWithMetaTarget(quasar::corrective_reranking::Parse *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return quasar::corrective_reranking::Parse::getCommandsWithMetaTarget(void)::set;
}

void sub_1B1EA9DC0(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 71) < 0) {
      operator delete(*(void **)(v2 + v4 + 48));
    }
    v4 -= 24;
    if (v4 == -72)
    {
      MEMORY[0x1B3EA8670](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t quasar::corrective_reranking::Parse::getCommandsWithNoTransformerVisibleChange(quasar::corrective_reranking::Parse *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return quasar::corrective_reranking::Parse::getCommandsWithNoTransformerVisibleChange(void)::set;
}

void sub_1B1EAA000(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 215) < 0) {
      operator delete(*(void **)(v2 + v4 + 192));
    }
    v4 -= 24;
    if (v4 == -216)
    {
      MEMORY[0x1B3EA8670](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

BOOL quasar::corrective_reranking::Parse::isEditCommand(quasar::corrective_reranking::Parse *this)
{
  CommandTokens = (void *)quasar::corrective_reranking::Parse::getCommandTokens(this);
  quasar::corrective_reranking::Parse::getIntent(this, (uint64_t)__p);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(CommandTokens, (unsigned __int8 *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3 != 0;
}

BOOL quasar::corrective_reranking::Parse::isTargetExpectingCommand(quasar::corrective_reranking::Parse *this)
{
  CommandsWithTarget = (void *)quasar::corrective_reranking::Parse::getCommandsWithTarget(this);
  quasar::corrective_reranking::Parse::getIntent(this, (uint64_t)__p);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(CommandsWithTarget, (unsigned __int8 *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3 != 0;
}

BOOL quasar::corrective_reranking::Parse::isPayloadExpectingCommand(quasar::corrective_reranking::Parse *this)
{
  CommandsWithPayload = (void *)quasar::corrective_reranking::Parse::getCommandsWithPayload(this);
  quasar::corrective_reranking::Parse::getIntent(this, (uint64_t)__p);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(CommandsWithPayload, (unsigned __int8 *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3 != 0;
}

BOOL quasar::corrective_reranking::Parse::isIncomplete(quasar::corrective_reranking::Parse *this)
{
  BOOL isTargetExpectingCommand = quasar::corrective_reranking::Parse::isTargetExpectingCommand(this);
  if (isTargetExpectingCommand)
  {
    quasar::corrective_reranking::Parse::getTarget(this, v7);
    if (v7[0] == v7[1])
    {
      BOOL v4 = 1;
      goto LABEL_13;
    }
  }
  if (!quasar::corrective_reranking::Parse::isPayloadExpectingCommand(this))
  {
    BOOL v4 = 0;
    if (!isTargetExpectingCommand) {
      return v4;
    }
    goto LABEL_13;
  }
  quasar::corrective_reranking::Parse::getPayload(this, &__p);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  BOOL v4 = size == 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!isTargetExpectingCommand) {
      return v4;
    }
    goto LABEL_13;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (isTargetExpectingCommand)
  {
LABEL_13:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  return v4;
}

void sub_1B1EAA278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12)
  {
    a9 = &a12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::Parse::getTarget(quasar::corrective_reranking::Parse *this@<X0>, uint64_t *a2@<X8>)
{
  quasar::corrective_reranking::Parse::getTargetWithRanges((uint64_t)this, (uint64_t *)v3);
  quasar::corrective_reranking::getTokens(v3, a2);
  BOOL v4 = v3;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_1B1EAA2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL quasar::corrective_reranking::Parse::hasFullTextTarget(quasar::corrective_reranking::Parse *this)
{
  return *((unsigned char *)this + 112) && *((void *)this + 11) == *((void *)this + 12);
}

std::string *quasar::corrective_reranking::Parse::setPayload(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 5, a2);
}

BOOL quasar::corrective_reranking::Parse::isChangeInvisibleToTransformer(quasar::corrective_reranking::Parse *this)
{
  uint64_t v2 = (void *)quasar::corrective_reranking::Parse::getCommandsWithNoTransformerVisibleChange(this);
  quasar::corrective_reranking::Parse::getIntent(this, (uint64_t)__p);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3 != 0;
}

void quasar::corrective_reranking::Parse::getTargetPrecedingFillerTokens(quasar::corrective_reranking::Parse *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *((void *)this + 7);
  uint64_t v4 = *((void *)this + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3) != (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"outputs.size() == utterance.size()", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  if (v4 != v3)
  {
    unint64_t v6 = 0;
    while (1)
    {
      int32x2_t v7 = (uint64_t *)(v3 + 24 * v6);
      int v8 = *((unsigned __int8 *)v7 + 23);
      if ((*((char *)v7 + 23) & 0x80000000) == 0) {
        break;
      }
      __int32 v10 = (_DWORD *)*v7;
      uint64_t v9 = v7[1];
      if (v9 != 4) {
        goto LABEL_12;
      }
      if (*v10 == 1701736270) {
        goto LABEL_10;
      }
LABEL_23:
      std::vector<quasar::TextTokenizer::Token>::__clear[abi:ne180100](a2);
LABEL_24:
      ++v6;
      uint64_t v3 = *((void *)this + 7);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8) - v3) >> 3) <= v6) {
        return;
      }
    }
    if (v8 == 4 && *(_DWORD *)v7 == 1701736270)
    {
LABEL_10:
      unint64_t v11 = (long long *)(*((void *)this + 4) + 32 * v6);
      unint64_t v12 = a2[1];
      if (v12 >= a2[2])
      {
        uint64_t v13 = std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>(a2, v11);
      }
      else
      {
        std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>((uint64_t)a2, v11);
        uint64_t v13 = v12 + 32;
      }
      a2[1] = v13;
      goto LABEL_24;
    }
    uint64_t v9 = *((unsigned __int8 *)v7 + 23);
    __int32 v10 = v7;
LABEL_12:
    if (v9 >= 6)
    {
      unint64_t v14 = (char *)v10 + v9;
      uint64_t v15 = v10;
      while (1)
      {
        uint64_t v16 = (char *)memchr(v15, 84, v9 - 5);
        if (!v16) {
          goto LABEL_23;
        }
        if (*(_DWORD *)v16 == 1196573012 && *((_WORD *)v16 + 2) == 21573) {
          break;
        }
        uint64_t v15 = v16 + 1;
        uint64_t v9 = v14 - (unsigned char *)v15;
        if (v14 - (unsigned char *)v15 < 6) {
          goto LABEL_23;
        }
      }
      if (v16 == v14 || v16 - (char *)v10 == -1) {
        goto LABEL_23;
      }
      if ((v8 & 0x80) != 0)
      {
        uint64_t v19 = v7[1];
        if (v19 != 10)
        {
          if (v19 != 11) {
            return;
          }
          if (*(void *)*v7 != 0x5241545448474952 || *(void *)(*v7 + 3) != 0x5445475241545448) {
            return;
          }
          goto LABEL_50;
        }
        int32x2_t v7 = (uint64_t *)*v7;
      }
      else if (v8 != 10)
      {
        if (v8 != 11) {
          return;
        }
        if (*v7 != 0x5241545448474952 || *(uint64_t *)((char *)v7 + 3) != 0x5445475241545448) {
          return;
        }
LABEL_50:
        long long v22 = (long long *)a2[1];
        if ((long long *)*a2 != v22)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange> *,std::pair<std::string,quasar::corrective_reranking::TextRange> *,std::pair<std::string,quasar::corrective_reranking::TextRange> *>((uint64_t)v27, (long long *)(*a2 + 32), v22, *a2);
          uint64_t v24 = v23;
          for (uint64_t i = a2[1]; i != v24; i -= 32)
          {
            if (*(char *)(i - 9) < 0) {
              operator delete(*(void **)(i - 32));
            }
          }
          a2[1] = v24;
        }
        return;
      }
      if (*v7 != 0x475241545446454CLL || *((_WORD *)v7 + 4) != 21573) {
        return;
      }
      goto LABEL_50;
    }
    goto LABEL_23;
  }
}

uint64_t quasar::corrective_reranking::TextEdit::getArgumentlessCommands(quasar::corrective_reranking::TextEdit *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return quasar::corrective_reranking::TextEdit::getArgumentlessCommands(void)::set;
}

void sub_1B1EAA7E0(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 95) < 0) {
      operator delete(*(void **)(v2 + v4 + 72));
    }
    v4 -= 24;
    if (v4 == -96)
    {
      MEMORY[0x1B3EA8670](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

quasar::corrective_reranking::TextEdit *quasar::corrective_reranking::TextEdit::TextEdit(quasar::corrective_reranking::TextEdit *this, const quasar::corrective_reranking::Parse *a2)
{
  *((unsigned char *)this + 24) = 0;
  uint64_t v4 = (std::vector<int> *)((char *)this + 24);
  *(_OWORD *)((char *)this + 56) = 0u;
  std::string::size_type v5 = (void **)((char *)this + 56);
  *((unsigned char *)this + 48) = 0;
  unint64_t v6 = (std::vector<std::wstring> *)((char *)this + 80);
  *(_OWORD *)((char *)this + 104) = 0u;
  int32x2_t v7 = (std::vector<std::wstring> *)((char *)this + 104);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    uint64_t v9 = (int *)*((void *)a2 + 11);
    int v8 = (int *)*((void *)a2 + 12);
    if (v9 == v8)
    {
      memset(&__p, 0, sizeof(__p));
      std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&__p, 0, 0, 0);
      std::optional<quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100]<quasar::corrective_reranking::TargetRange,void>(v4, (__n128 *)&__p);
      unint64_t v14 = (void *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_9;
      }
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    }
    else
    {
      int v10 = *v9;
      int v11 = *(v8 - 2);
      int v12 = *(v8 - 1);
      uint64_t v13 = operator new(8uLL);
      *uint64_t v13 = (int)(float)v10 | ((unint64_t)(int)(float)((float)(v12 + v11)
                                                                                         - (float)v10) << 32);
      memset(&__p, 0, sizeof(__p));
      std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&__p, v13, (uint64_t)(v13 + 1), 1uLL);
      std::optional<quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100]<quasar::corrective_reranking::TargetRange,void>(v4, (__n128 *)&__p);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      unint64_t v14 = v13;
    }
    operator delete(v14);
  }
LABEL_9:
  quasar::corrective_reranking::Parse::getIntent(a2, (uint64_t)&__p);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
  *(std::string *)this = __p;
  int v15 = *((char *)this + 23);
  if (v15 < 0)
  {
    if (*((void *)this + 1) != 7)
    {
LABEL_20:
      quasar::corrective_reranking::Parse::getPayload(a2, &__p);
      goto LABEL_21;
    }
    uint64_t v16 = *(quasar::corrective_reranking::TextEdit **)this;
  }
  else
  {
    uint64_t v16 = this;
    if (v15 != 7) {
      goto LABEL_20;
    }
  }
  int v17 = *(_DWORD *)v16;
  int v18 = *(_DWORD *)((char *)v16 + 3);
  if (v17 != 1952672100 || v18 != 1702125940) {
    goto LABEL_20;
  }
  quasar::corrective_reranking::detokenize((long long **)a2 + 4, &__p);
LABEL_21:
  if (*((char *)this + 79) < 0) {
    operator delete(*v5);
  }
  *(std::string *)std::string::size_type v5 = __p;
  if (v6 != (std::vector<std::wstring> *)((char *)a2 + 184)) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v6, *((std::string **)a2 + 23), *((long long **)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 3));
  }
  if (v7 != (std::vector<std::wstring> *)((char *)a2 + 208)) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v7, *((std::string **)a2 + 26), *((long long **)a2 + 27), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 3));
  }
  return this;
}

void sub_1B1EAAAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v11 + 79) < 0) {
    operator delete(*v13);
  }
  if (*(unsigned char *)(v11 + 48))
  {
    int v15 = *v12;
    if (*v12)
    {
      *(void *)(v11 + 32) = v15;
      operator delete(v15);
    }
  }
  if (*(char *)(v11 + 23) < 0) {
    operator delete(*(void **)v11);
  }
  _Unwind_Resume(a1);
}

std::vector<int> *std::optional<quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100]<quasar::corrective_reranking::TargetRange,void>(std::vector<int> *this, __n128 *a2)
{
  if (LOBYTE(this[1].__begin_))
  {
    std::vector<int>::__move_assign((uint64_t)this, a2);
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    *this = *(std::vector<int> *)a2->n128_u8;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    LOBYTE(this[1].__begin_) = 1;
  }
  return this;
}

void *std::vector<quasar::corrective_reranking::TextRange>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a3);
    unint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_1B1EAAC30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TextEdit::onText(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(unsigned char *)(a1 + 48)
    || (ArgumentlessCommands = (void *)quasar::corrective_reranking::TextEdit::getArgumentlessCommands((quasar::corrective_reranking::TextEdit *)a1),
        std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(ArgumentlessCommands, (unsigned __int8 *)a1)))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      uint64_t v9 = *(const std::string::value_type **)a2;
      std::string::size_type v10 = *(void *)(a2 + 8);
      std::string::__init_copy_ctor_external((std::string *)a4, v9, v10);
    }
    else
    {
      *(_OWORD *)a4 = *(_OWORD *)a2;
      *(void *)(a4 + 16) = *(void *)(a2 + 16);
    }
    return;
  }
  quasar::corrective_reranking::TextEdit::textSurroundingEditLocation(a1, (long long *)a2, &v15);
  quasar::corrective_reranking::TextEdit::adjustedPayload((unsigned __int8 *)a1, a2, 0, &__str);
  quasar::corrective_reranking::TextEdit::adjustedTargetRange((void *)a1, a2, (int **)__p);
  quasar::corrective_reranking::TextEdit::assembleEditComponents(&__str, (const void **)&v15.__r_.__value_.__l.__data_, (uint64_t)&v16, __p, a4);
  if (*(void *)(a1 + 80) == *(void *)(a1 + 88))
  {
    if (*(void *)(a1 + 104) == *(void *)(a1 + 112) || (a3 & 1) == 0) {
      goto LABEL_16;
    }
LABEL_13:
    quasar::corrective_reranking::TextEdit::applyAdjacentEdits(a1, a4, (uint64_t)&v11);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = v11;
    *(void *)(a4 + 16) = v12;
    goto LABEL_16;
  }
  if (a3) {
    goto LABEL_13;
  }
LABEL_16:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1B1EAADDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (*(char *)(v22 + 23) < 0) {
    operator delete(*(void **)v22);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::pair<std::string,std::string>::~pair((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TextEdit::textSurroundingEditLocation(uint64_t a1@<X0>, long long *a2@<X1>, std::string *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 48)
    && (ArgumentlessCommands = (void *)quasar::corrective_reranking::TextEdit::getArgumentlessCommands((quasar::corrective_reranking::TextEdit *)a1),
        !std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(ArgumentlessCommands, (unsigned __int8 *)a1)))
  {
    quasar::corrective_reranking::TextEdit::adjustedTargetRange((void *)a1, (uint64_t)a2, (int **)&__p);
    if (__p == v10)
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[1],0>(a3, a2, "");
    }
    else
    {
      quasar::pySlice<std::string>((uint64_t)a2, 0, (int)(float)*(int *)__p, &v8);
      quasar::pySlice<std::string>((uint64_t)a2, (int)(float)((float)((float)(*(v10 - 1) + *(v10 - 2)) - (float)*(int *)__p) + (float)*(int *)__p), 0x7FFFFFFFu, &v7);
      *a3 = v8;
      a3[1] = v7;
    }
    if (__p)
    {
      std::string::size_type v10 = __p;
      operator delete(__p);
    }
  }
  else
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[1],0>(a3, a2, "");
  }
}

void sub_1B1EAAF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TextEdit::adjustedPayload(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  v45[0] = 0;
  v45[1] = 0;
  uint64_t v46 = 0;
  long long v42 = 0;
  std::string::size_type v43 = 0;
  uint64_t v44 = 0;
  if ((char)a1[79] < 0) {
    std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)a1 + 7), *((void *)a1 + 8));
  }
  else {
    std::string v41 = *(std::string *)(a1 + 56);
  }
  if (((char)a1[23] & 0x80000000) == 0)
  {
    int v8 = a1[23];
    switch(a1[23])
    {
      case 7u:
        if (*(_DWORD *)a1 != 1952672100 || *(_DWORD *)(a1 + 3) != 1702125940) {
          goto LABEL_69;
        }
        goto LABEL_87;
      case 9u:
        goto LABEL_60;
      case 0xAu:
        goto LABEL_55;
      case 0xBu:
        goto LABEL_49;
      case 0xCu:
        if (*(void *)a1 == 0x6562747265736E69 && *((_DWORD *)a1 + 2) == 1701998438) {
          goto LABEL_96;
        }
        if (v8 == 9) {
          goto LABEL_60;
        }
        if (v8 == 10) {
          goto LABEL_55;
        }
        if (v8 != 11) {
          goto LABEL_69;
        }
LABEL_49:
        if (*(void *)a1 == 0x6661747265736E69 && *(void *)(a1 + 3) == 0x7265746661747265) {
          goto LABEL_87;
        }
        if (v8 == 9) {
          goto LABEL_60;
        }
        if (v8 != 10) {
          goto LABEL_69;
        }
LABEL_55:
        if (*(void *)a1 == 0x696C617469706163 && *((_WORD *)a1 + 4) == 25978) {
          goto LABEL_101;
        }
        if (v8 != 9) {
          goto LABEL_69;
        }
LABEL_60:
        if (*(void *)a1 == 0x7361637265776F6CLL && a1[8] == 101) {
          goto LABEL_88;
        }
        uint64_t v16 = a1;
        if (v8 == 9) {
          goto LABEL_65;
        }
        goto LABEL_69;
      default:
        goto LABEL_69;
    }
  }
  uint64_t v10 = *((void *)a1 + 1);
  if (v10 == 7 && **(_DWORD **)a1 == 1952672100 && *(_DWORD *)(*(void *)a1 + 3) == 1702125940) {
    goto LABEL_87;
  }
  if (v10 == 12)
  {
    if (**(void **)a1 == 0x6562747265736E69 && *(_DWORD *)(*(void *)a1 + 8) == 1701998438)
    {
LABEL_96:
      int isPunctuation = quasar::corrective_reranking::isPunctuation((char *)&v41);
      std::string::size_type v30 = (void **)&v42;
      goto LABEL_97;
    }
    uint64_t v10 = *((void *)a1 + 1);
  }
  if (v10 != 11) {
    goto LABEL_29;
  }
  if (**(void **)a1 == 0x6661747265736E69 && *(void *)(*(void *)a1 + 3) == 0x7265746661747265)
  {
LABEL_87:
    int isPunctuation = quasar::corrective_reranking::isPunctuation((char *)&v41);
    std::string::size_type v30 = (void **)v45;
LABEL_97:
    if (isPunctuation) {
      uint64_t v33 = "";
    }
    else {
      uint64_t v33 = " ";
    }
    uint64_t v24 = (quasar::corrective_reranking::TextEdit *)MEMORY[0x1B3EA7B20](v30, v33);
    goto LABEL_120;
  }
  uint64_t v10 = *((void *)a1 + 1);
LABEL_29:
  if (v10 == 10)
  {
    if (**(void **)a1 == 0x696C617469706163 && *(_WORD *)(*(void *)a1 + 8) == 25978)
    {
LABEL_101:
      if (!a1[48])
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"targetRange", 11);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)(a1 + 24), a2, &exception_object);
      if ((exception_object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string exception_object = &exception_object;
      }
      else {
        p_std::string exception_object = (std::string *)exception_object.__r_.__value_.__r.__words[0];
      }
      if ((exception_object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(exception_object.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = exception_object.__r_.__value_.__l.__size_;
      }
      quasar::utf8::convertToTitleCaseOrEmpty((char *)p_exception_object, size, __p);
      goto LABEL_117;
    }
    uint64_t v10 = *((void *)a1 + 1);
  }
  if (v10 != 9) {
    goto LABEL_69;
  }
  if (**(void **)a1 == 0x7361637265776F6CLL && *(unsigned char *)(*(void *)a1 + 8) == 101)
  {
LABEL_88:
    if (!a1[48])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"targetRange", 11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)(a1 + 24), a2, &exception_object);
    if ((exception_object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v31 = &exception_object;
    }
    else {
      uint64_t v31 = (std::string *)exception_object.__r_.__value_.__r.__words[0];
    }
    if ((exception_object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(exception_object.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = exception_object.__r_.__value_.__l.__size_;
    }
    quasar::utf8::convertToLowerCaseOrEmpty((char *)v31, v32, __p);
  }
  else
  {
    if (*((void *)a1 + 1) != 9) {
      goto LABEL_69;
    }
    uint64_t v16 = *(unsigned __int8 **)a1;
LABEL_65:
    uint64_t v21 = *(void *)v16;
    int v22 = v16[8];
    if (v21 != 0x7361637265707075 || v22 != 101)
    {
LABEL_69:
      std::string::basic_string[abi:ne180100]<0>(__p, "select");
      uint64_t v24 = (quasar::corrective_reranking::TextEdit *)quasar::startsWith(a1, (unsigned __int8 *)__p);
      int v25 = (int)v24;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if (!v25) {
          goto LABEL_120;
        }
      }
      else if (!v24)
      {
        goto LABEL_120;
      }
      if (!a1[48])
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"targetRange", 11);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)(a1 + 24), a2, __p);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      std::string v41 = __p[0];
      if (a3) {
        goto LABEL_121;
      }
      goto LABEL_77;
    }
    if (!a1[48])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"targetRange", 11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)(a1 + 24), a2, &exception_object);
    if ((exception_object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v36 = &exception_object;
    }
    else {
      uint64_t v36 = (std::string *)exception_object.__r_.__value_.__r.__words[0];
    }
    if ((exception_object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v37 = HIBYTE(exception_object.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v37 = exception_object.__r_.__value_.__l.__size_;
    }
    quasar::utf8::convertToUpperCaseOrEmpty((char *)v36, v37, __p);
  }
LABEL_117:
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  std::string v41 = __p[0];
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 0;
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_120:
    if (a3) {
      goto LABEL_121;
    }
    goto LABEL_77;
  }
  operator delete(exception_object.__r_.__value_.__l.__data_);
  if (a3)
  {
LABEL_121:
    if (a1[48]
      && (ArgumentlessCommands = (void *)quasar::corrective_reranking::TextEdit::getArgumentlessCommands(v24),
          !std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(ArgumentlessCommands, a1)))
    {
      quasar::corrective_reranking::TextEdit::adjustedTargetRange(a1, a2, (int **)__p);
      quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)__p, a2, &exception_object);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      std::string v41 = exception_object;
      if (__p[0].__r_.__value_.__r.__words[0])
      {
        __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      MEMORY[0x1B3EA7B20](&v41, "");
    }
    *a4 = v41;
    goto LABEL_125;
  }
LABEL_77:
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v45, (const void **)&v41.__r_.__value_.__l.__data_, (uint64_t)__p);
  if (v44 >= 0) {
    unint64_t v26 = (const std::string::value_type *)&v42;
  }
  else {
    unint64_t v26 = v42;
  }
  if (v44 >= 0) {
    std::string::size_type v27 = HIBYTE(v44);
  }
  else {
    std::string::size_type v27 = v43;
  }
  unint64_t v28 = std::string::append(__p, v26, v27);
  *a4 = *v28;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
LABEL_125:
  if (SHIBYTE(v44) < 0) {
    operator delete(v42);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete((void *)v45[0]);
  }
}

void sub_1B1EAB6E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TextEdit::adjustedTargetRange(void *a1@<X0>, uint64_t a2@<X1>, int **a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a1 + 48))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v47, "targetRange");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(a3, (const void *)a1[3], a1[4], (uint64_t)(a1[4] - a1[3]) >> 3);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v6 = *((unsigned __int8 *)a1 + 23);
    std::string v7 = a1;
    switch(*((unsigned char *)a1 + 23))
    {
      case 6:
        goto LABEL_40;
      case 7:
        if (*(_DWORD *)a1 == 1952672100 && *(_DWORD *)((char *)a1 + 3) == 1702125940) {
          goto LABEL_69;
        }
        return;
      case 0xB:
        goto LABEL_35;
      case 0xC:
        if (*a1 == 0x6562747265736E69 && *((_DWORD *)a1 + 2) == 1701998438) {
          goto LABEL_55;
        }
        std::string v7 = a1;
        if (v6 == 6) {
          goto LABEL_40;
        }
        if (v6 != 11) {
          return;
        }
LABEL_35:
        if (*a1 == 0x6661747265736E69 && *(void *)((char *)a1 + 3) == 0x7265746661747265) {
          goto LABEL_62;
        }
        std::string v7 = a1;
        if (v6 == 6) {
          goto LABEL_40;
        }
        return;
      default:
        return;
    }
  }
  uint64_t v9 = a1[1];
  if (v9 == 7 && *(_DWORD *)*a1 == 1952672100 && *(_DWORD *)(*a1 + 3) == 1702125940)
  {
LABEL_69:
    unsigned int v32 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v33 = *(void *)(a2 + 8);
    int v34 = operator new(8uLL);
    uint64_t v31 = v34;
    if ((v32 & 0x80u) == 0) {
      unsigned int v35 = v32;
    }
    else {
      unsigned int v35 = v33;
    }
    *int v34 = v35;
    long long v48 = 0;
    long long v47 = 0uLL;
    std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&v47, v34, (uint64_t)(v34 + 1), 1uLL);
    goto LABEL_76;
  }
  if (v9 == 12)
  {
    if (*(void *)*a1 == 0x6562747265736E69 && *(_DWORD *)(*a1 + 8) == 1701998438)
    {
LABEL_55:
      uint64_t v24 = (int *)a1[3];
      if (v24 == (int *)a1[4])
      {
        uint64_t v27 = 0;
      }
      else
      {
        float v25 = (float)*v24;
        if ((COERCE_INT(fabs(v25)) - 0x800000) >> 24 >= 0x7F && LODWORD(v25) != 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"std::isfinite(targetRange->getStartIndex())", 43);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
        }
        uint64_t v27 = (int)v25;
      }
      uint64_t v31 = operator new(8uLL);
      void *v31 = v27;
      long long v48 = 0;
      long long v47 = 0uLL;
      std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&v47, v31, (uint64_t)(v31 + 1), 1uLL);
      goto LABEL_76;
    }
    uint64_t v9 = a1[1];
  }
  if (v9 == 11)
  {
    if (*(void *)*a1 == 0x6661747265736E69 && *(void *)(*a1 + 3) == 0x7265746661747265)
    {
LABEL_62:
      uint64_t v28 = a1[4];
      if (a1[3] == v28
        || ((float v29 = (float)(*(_DWORD *)(v28 - 4) + *(_DWORD *)(v28 - 8)),
             (COERCE_INT(fabs(v29)) - 0x800000) >> 24 >= 0x7F)
          ? (BOOL v30 = LODWORD(v29) == 0)
          : (BOOL v30 = 1),
            !v30))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"std::isfinite(targetRange->getEndIndex())", 41);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
      }
      uint64_t v31 = operator new(8uLL);
      void *v31 = (int)v29;
      long long v48 = 0;
      long long v47 = 0uLL;
      std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&v47, v31, (uint64_t)(v31 + 1), 1uLL);
      goto LABEL_76;
    }
    uint64_t v9 = a1[1];
  }
  if (v9 == 6)
  {
    std::string v7 = (void *)*a1;
LABEL_40:
    int v15 = *(_DWORD *)v7;
    int v16 = *((unsigned __int16 *)v7 + 2);
    if (v15 == 1701602660 && v16 == 25972)
    {
      uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
      if ((v18 & 0x80u) != 0) {
        uint64_t v18 = *(void *)(a2 + 8);
      }
      if (v18)
      {
        int v20 = (int *)a1[3];
        uint64_t v19 = (int *)a1[4];
        if (v20 == v19)
        {
          float v23 = INFINITY;
        }
        else
        {
          float v21 = (float)*v20;
          if ((COERCE_INT(fabs(v21)) - 0x800000) >> 24 >= 0x7F && LODWORD(v21) != 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"std::isfinite(targetRange->getStartIndex())", 43);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
          }
          float v23 = (float)(*(v19 - 1) + *(v19 - 2)) - v21;
        }
        if (((LODWORD(v23) & 0x7FFFFFFFu) - 0x800000) >> 24 >= 0x7F
          && (LODWORD(v23) & 0x7FFFFFFFu) - 1 >= 0x7FFFFF
          && LODWORD(v23) != 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"std::isfinite(targetRange->getLength())", 39);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
        }
        if (*a3 == a3[1]) {
          int v40 = -1;
        }
        else {
          int v40 = (int)(float)**a3 - 1;
        }
        if (*std::string::at((const std::string *)a2, v40 & ~(v40 >> 31)) != 32) {
          return;
        }
        std::string v41 = a3[1];
        if (*a3 == v41)
        {
          int v43 = -1;
        }
        else
        {
          float v42 = (float)**a3;
          int v43 = (int)(float)(v42 + -1.0);
          LODWORD(v41) = (int)(float)((float)((float)(*(v41 - 1) + *(v41 - 2)) - v42) + 1.0);
        }
        v49[0] = v43;
        v49[1] = v41;
        std::vector<quasar::corrective_reranking::TextRange>::vector[abi:ne180100](&__p, v49, 1uLL);
        long long v47 = 0uLL;
        long long v48 = 0;
        std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&v47, __p, (uint64_t)v46, (v46 - (unsigned char *)__p) >> 3);
        uint64_t v44 = *a3;
        if (*a3)
        {
          a3[1] = v44;
          operator delete(v44);
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
        }
        *(_OWORD *)a3 = v47;
        a3[2] = v48;
        long long v48 = 0;
        long long v47 = 0uLL;
        std::string::size_type v37 = __p;
        if (!__p) {
          return;
        }
        uint64_t v46 = __p;
LABEL_79:
        operator delete(v37);
        return;
      }
      uint64_t v31 = operator new(8uLL);
      void *v31 = 0;
      long long v48 = 0;
      long long v47 = 0uLL;
      std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&v47, v31, (uint64_t)(v31 + 1), 1uLL);
LABEL_76:
      uint64_t v36 = *a3;
      if (*a3)
      {
        a3[1] = v36;
        operator delete(v36);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
      }
      *(_OWORD *)a3 = v47;
      a3[2] = v48;
      long long v48 = 0;
      long long v47 = 0uLL;
      std::string::size_type v37 = v31;
      goto LABEL_79;
    }
  }
}

void sub_1B1EABDE4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TextEdit::assembleEditComponents(std::string *__str@<X3>, const void **a2@<X0>, uint64_t a3@<X1>, void *a4@<X2>, uint64_t a5@<X8>)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  if (*a4 == a4[1])
  {
    std::string::operator=((std::string *)a5, __str);
  }
  else
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)&__str->__r_.__value_.__l.__data_, (uint64_t)&__p);
    int v7 = *(char *)(a3 + 23);
    if (v7 >= 0) {
      int v8 = (const std::string::value_type *)a3;
    }
    else {
      int v8 = *(const std::string::value_type **)a3;
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v9 = *(void *)(a3 + 8);
    }
    uint64_t v10 = std::string::append(&__p, v8, v9);
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[0];
    v16[0] = v10->__r_.__value_.__l.__size_;
    *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
    char v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    int v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a5 + 15) = *(void *)((char *)v16 + 7);
    uint64_t v14 = v16[0];
    *(void *)a5 = v11;
    *(void *)(a5 + 8) = v14;
    *(unsigned char *)(a5 + 23) = v12;
    if (v13 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B1EABF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TextEdit::applyAdjacentEdits(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 48))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v31, "this->targetRange");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v31);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
  }
  quasar::corrective_reranking::tokenize(a3, &v29);
  quasar::corrective_reranking::tokenize(a1 + 56, &v28);
  quasar::corrective_reranking::getTokens((long long **)&v28, (uint64_t *)&v31);
  unint64_t AdjacentWordsToTarget = quasar::corrective_reranking::findAdjacentWordsToTarget(a1, a1 + 24, &v31, (uint64_t *)&v29, 1);
  uint64_t v7 = v6;
  unint64_t v26 = (void **)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  unint64_t v26 = (void **)&v28;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v26);
  quasar::pySlice<std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>>(&v29, AdjacentWordsToTarget, HIDWORD(AdjacentWordsToTarget), (uint64_t *)&v28);
  quasar::pySlice<std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>>(&v29, v7, HIDWORD(v7), (uint64_t *)&v26);
  memset(&v31, 0, sizeof(v31));
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(&v31, (long long *)v26, v27, ((char *)v27 - (char *)v26) >> 5);
  memset(v32, 0, 24);
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(v32, (long long *)v28, *((long long **)&v28 + 1), (uint64_t)(*((void *)&v28 + 1) - v28) >> 5);
  for (uint64_t i = 0; i != 2; ++i)
  {
    std::string::size_type v9 = &v31 + i;
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[0];
    std::string::size_type size = v9->__r_.__value_.__l.__size_;
    while (v10 != size)
    {
      quasar::pySlice<std::string>(a3, 0, *(_DWORD *)(v10 + 24), &v24);
      int v12 = *(char *)(v10 + 23);
      if (v12 >= 0) {
        int v13 = (const std::string::value_type *)v10;
      }
      else {
        int v13 = *(const std::string::value_type **)v10;
      }
      if (v12 >= 0) {
        std::string::size_type v14 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        std::string::size_type v14 = *(void *)(v10 + 8);
      }
      int v15 = std::string::append(&v24, v13, v14);
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      quasar::pySlice<std::string>(a3, *(_DWORD *)(v10 + 28) + *(_DWORD *)(v10 + 24), 0x7FFFFFFFu, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v19 = std::string::append(&v25, (const std::string::value_type *)p_p, v18);
      std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
      v30[0] = v19->__r_.__value_.__l.__size_;
      *(void *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
      char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(void *)a3 = v20;
      *(void *)(a3 + 8) = v30[0];
      *(void *)(a3 + 15) = *(void *)((char *)v30 + 7);
      *(unsigned char *)(a3 + 23) = v21;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      v10 += 32;
    }
  }
  for (uint64_t j = 24; j != -24; j -= 24)
  {
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31 + j;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  }
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
}

void sub_1B1EAC2C4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1EAC38CLL);
}

void sub_1B1EAC2D4()
{
}

void sub_1B1EAC2DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  for (uint64_t i = 24; i != -24; i -= 24)
  {
    std::string __p = &a39 + i;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  JUMPOUT(0x1B1EAC34CLL);
}

void quasar::corrective_reranking::TextEdit::targetIn(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 48)) {
    quasar::corrective_reranking::TargetRange::getTargetFromText(a1 + 24, a2, a3);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

void *quasar::pySlice<std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>>@<X0>(void *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *result;
  uint64_t v6 = result[1];
  if (*result == v6)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    uint64_t v7 = v6 - v5;
    int32x2_t v8 = vdup_n_s32((unint64_t)(v6 - v5) >> 5);
    int32x2_t v9 = vmax_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)v8), (int32x2_t)__PAIR64__(a3, a2)), 0);
    int32x2_t v10 = vmin_s32(v9, v8);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    __int32 v11 = v10.i32[1] - v10.i32[0];
    if (v10.i32[1] > v10.i32[0])
    {
      int v12 = result;
      unsigned __int32 v17 = v9.i32[0];
      std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::reserve(a4, v11);
      if ((int)(v7 >> 5) >= (uint64_t)v17) {
        unint64_t v13 = v17;
      }
      else {
        unint64_t v13 = (int)(v7 >> 5);
      }
      uint64_t v14 = 32 * v13;
      do
      {
        if (v13 >= (uint64_t)(v12[1] - *v12) >> 5) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        int v15 = (long long *)(*v12 + v14);
        unint64_t v16 = a4[1];
        if (v16 >= a4[2])
        {
          uint64_t result = (void *)std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__push_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>(a4, v15);
        }
        else
        {
          std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>((uint64_t)a4, v15);
          uint64_t result = (void *)(v16 + 32);
        }
        a4[1] = (uint64_t)result;
        ++v13;
        v14 += 32;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

void sub_1B1EAC4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::tokenCasingFromScores(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  uint64_t v3 = v2 - v1;
  if ((unint64_t)v3 > 0x10)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "scores.size() <= kCaseCount");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  if ((unint64_t)v3 < 5) {
    return 0;
  }
  LODWORD(result) = 0;
  unint64_t v5 = v3 >> 2;
  if (v5 <= 2) {
    unint64_t v5 = 2;
  }
  for (uint64_t i = 1; i != v5; ++i)
  {
    if (*(float *)(v1 + 4 * i) <= *(float *)(v1 + 4 * (int)result)) {
      uint64_t result = result;
    }
    else {
      uint64_t result = i;
    }
  }
  return result;
}

void quasar::corrective_reranking::tokenCasingApply(int a1@<W0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  switch(a1)
  {
    case 3:
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
      }
      break;
    case 2:
      int v6 = *(char *)(a2 + 23);
      if (v6 >= 0) {
        uint64_t v7 = (char *)a2;
      }
      else {
        uint64_t v7 = *(char **)a2;
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v8 = *(void *)(a2 + 8);
      }
      quasar::utf8::convertToUpperCaseOrEmpty(v7, v8, a3);
      break;
    case 1:
      int v3 = *(char *)(a2 + 23);
      if (v3 >= 0) {
        uint64_t v4 = (char *)a2;
      }
      else {
        uint64_t v4 = *(char **)a2;
      }
      if (v3 >= 0) {
        uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v5 = *(void *)(a2 + 8);
      }
      quasar::utf8::convertToTitleCaseOrEmpty(v4, v5, a3);
      break;
    default:
      int v9 = *(char *)(a2 + 23);
      if (v9 >= 0) {
        int32x2_t v10 = (char *)a2;
      }
      else {
        int32x2_t v10 = *(char **)a2;
      }
      if (v9 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      quasar::utf8::convertToLowerCaseOrEmpty(v10, v11, a3);
      break;
  }
}

uint64_t std::__optional_copy_base<quasar::corrective_reranking::TargetRange,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<quasar::corrective_reranking::TargetRange,false> const&>((void *)a1, a2);
  return a1;
}

void sub_1B1EAC664(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<quasar::corrective_reranking::TargetRange,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<quasar::corrective_reranking::TargetRange,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *uint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
    uint64_t result = std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(result, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *quasar::joinToStream<std::vector<quasar::corrective_reranking::TextRange>>(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    int v6 = result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      uint64_t result = quasar::corrective_reranking::operator<<(v6);
      char v7 = 0;
      v3 += 8;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t quasar::PTree::PTree<std::string>(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)a1 = 4;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 56) = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      quasar::PTree::PTree(v6, v3);
      quasar::PTree::addChild((quasar::PTree *)a1, (const quasar::PTree *)v6);
      quasar::PTree::~PTree((quasar::PTree *)v6);
      v3 += 24;
    }
    while (v3 != v4);
  }
  return a1;
}

void sub_1B1EAC7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  quasar::PTree::~PTree((quasar::PTree *)&a9);
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (*(char *)(v9 + 31) < 0) {
    operator delete(*v10);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::PTree::PTree<float>(uint64_t a1, float **a2)
{
  *(_DWORD *)a1 = 4;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 56) = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      float v5 = *v3;
      int Type = quasar::getType((quasar *)a1, *v3);
      std::to_string(&v8, v5);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      char v12 = 1;
      quasar::PTree::addChild((quasar::PTree *)a1, (const quasar::PTree *)&Type);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      ++v3;
    }
    while (v3 != v4);
  }
  return a1;
}

void sub_1B1EAC8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  quasar::PTree::~PTree((quasar::PTree *)&a9);
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (*(char *)(v9 + 31) < 0) {
    operator delete(*v10);
  }
  _Unwind_Resume(a1);
}

void *std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1EAC970(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char [11],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char [12],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(void *a1, std::string *__str, std::string *a3)
{
  uint64_t v4 = __str;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = __str == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = (void **)v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 16), v4);
        uint64_t v10 = *(void ***)v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, v8);
        ++v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        uint64_t v8 = (uint64_t)v10;
      }
      while (!v11);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a1, (unsigned __int8 *)v4, (uint64_t)v4);
    ++v4;
  }
}

void sub_1B1EACBC4(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1B1EACBE0(_Unwind_Exception *a1)
{
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2 + 16);
  v2[1] = v5;
  uint64_t v6 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    uint64_t v10 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == a2)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a3)) {
            return i;
          }
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4) {
              v12 %= v4;
            }
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_perform[abi:ne180100](void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  unint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *unint64_t v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    unint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(v4 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 8) = v4 + 32;
}

void sub_1B1EACEE0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = (std::string *)&v10[4 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  unint64_t v17 = (char *)&v10[4 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    BOOL v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[4 * v4 + 3] = *((void *)a2 + 3);
  unint64_t v16 = (std::string *)((char *)v11 + 32);
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1EACFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange> *,std::pair<std::string,quasar::corrective_reranking::TextRange> *,std::pair<std::string,quasar::corrective_reranking::TextRange> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)unint64_t v5 = 0;
      *(void *)(a4 + 24) = *((void *)v5 + 3);
      a4 += 32;
      v5 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    uint64_t v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1EAD0FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__push_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = (std::string *)&v10[4 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  unint64_t v17 = (char *)&v10[4 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    BOOL v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[4 * v4 + 3] = *((void *)a2 + 3);
  unint64_t v16 = (std::string *)((char *)v11 + 32);
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1EAD20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1EAD288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  long long v12 = this;
  uint64_t v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        uint64_t v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((void *)v6 + 3);
      v6 += 2;
      uint64_t v4 = (std::string *)((char *)v8 + 32);
      uint64_t v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1B1EAD360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::pair<std::string,quasar::corrective_reranking::TextRange>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::__value_func[abi:ne180100](a1, a2);
  v3[7] = 0;
  uint64_t v4 = v3 + 8;
  v3[11] = 0;
  v6[0] = &unk_1F0A5B2B0;
  long long v7 = v6;
  std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::swap[abi:ne180100](v6, v3 + 4);
  std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::~__value_func[abi:ne180100](v6);
  v6[0] = &unk_1F0A5B258;
  long long v7 = v6;
  std::__function::__value_func<float ()(std::string)>::swap[abi:ne180100](v6, v4);
  std::__function::__value_func<float ()(std::string)>::~__value_func[abi:ne180100](v6);
  return a1;
}

float kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Align(void *a1, void *a2, uint64_t *a3, void *a4)
{
  v297[4] = *MEMORY[0x1E4F143B8];
  a4[1] = *a4;
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  float v8 = 0.0;
  BOOL v9 = v6 == *a3 && v4 == v5;
  if (!v9)
  {
    LODWORD(v247[0]) = 0;
    unint64_t v232 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) + 1;
    std::vector<float>::vector(&__p, v232, v247);
    uint64_t v233 = 0x2E8BA2E8BA2E8BA3 * ((v4 - v5) >> 4);
    unint64_t v12 = v233 + 1;
    std::vector<std::vector<float>>::vector(v248, v233 + 1, (uint64_t)&__p);
    if (__p)
    {
      v290 = __p;
      operator delete(__p);
    }
    v235 = a2;
    std::vector<std::vector<kaldi::quasar::AlignmentElement<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>>>::vector(v247, v12);
    uint64_t v13 = (void **)v247[0];
    kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)&__p);
    v245[1] = 0;
    uint64_t v246 = 0;
    v245[0] = 0;
    float v14 = (char *)v13[2];
    BOOL v15 = (char *)v13[1];
    if (v15 >= v14)
    {
      unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - (unsigned char *)*v13) >> 3);
      unint64_t v18 = v17 + 1;
      if (v17 + 1 > 0x666666666666666) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - (unsigned char *)*v13) >> 3);
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x333333333333333) {
        unint64_t v20 = 0x666666666666666;
      }
      else {
        unint64_t v20 = v18;
      }
      char v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(v13 + 2), v20);
      int v22 = &v21[40 * v17];
      std::string v24 = &v21[40 * v23];
      *(_DWORD *)int v22 = 0;
      *((void *)v22 + 1) = &__p;
      *((_DWORD *)v22 + 4) = 0;
      *((void *)v22 + 3) = v245;
      *((void *)v22 + 4) = 0;
      unint64_t v16 = v22 + 40;
      unint64_t v26 = (char *)*v13;
      std::string v25 = (char *)v13[1];
      if (v25 != *v13)
      {
        do
        {
          long long v27 = *(_OWORD *)(v25 - 40);
          long long v28 = *(_OWORD *)(v25 - 24);
          *((void *)v22 - 1) = *((void *)v25 - 1);
          *(_OWORD *)(v22 - 24) = v28;
          *(_OWORD *)(v22 - 40) = v27;
          v22 -= 40;
          v25 -= 40;
        }
        while (v25 != v26);
        std::string v25 = (char *)*v13;
      }
      *uint64_t v13 = v22;
      v13[1] = v16;
      v13[2] = v24;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(_DWORD *)BOOL v15 = 0;
      *((void *)v15 + 1) = &__p;
      *((_DWORD *)v15 + 4) = 0;
      unint64_t v16 = v15 + 40;
      *((void *)v15 + 3) = v245;
      *((void *)v15 + 4) = 0;
    }
    v13[1] = v16;
    if (SHIBYTE(v246) < 0) {
      operator delete(v245[0]);
    }
    unint64_t v234 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
    std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v297);
    long long v29 = v235;
    if (v295)
    {
      v296 = v295;
      operator delete(v295);
    }
    uint64_t v229 = v5;
    uint64_t v230 = v4;
    uint64_t v227 = v7;
    uint64_t v228 = v6;
    v231 = a4;
    if (v294 < 0) {
      operator delete(v293);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v292);
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v290);
    if (v12 >= 2)
    {
      uint64_t v30 = 1;
      do
      {
        uint64_t v31 = v30 - 1;
        float v32 = **(float **)(v248[0] + 24 * (v30 - 1));
        kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)v281, *v29 + 176 * (v30 - 1));
        uint64_t v33 = a1[7];
        if (!v33) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        float v34 = (*(float (**)(uint64_t, char *))(*(void *)v33 + 48))(v33, v281);
        **(float **)(v248[0] + 24 * v30) = v32 + v34;
        std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v288);
        if (v286)
        {
          v287 = v286;
          operator delete(v286);
        }
        if (v285 < 0) {
          operator delete(v284);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v283);
        std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v282);
        uint64_t v35 = v247[0];
        uint64_t v36 = *v29 + 176 * v31;
        v290 = 0;
        std::string __p = 0;
        v291 = 0;
        kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)v273, v36);
        uint64_t v37 = a1[7];
        if (!v37) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        float v38 = (*(float (**)(uint64_t, char *))(*(void *)v37 + 48))(v37, v273);
        float v39 = v38;
        uint64_t v40 = v35 + 24 * v30;
        unint64_t v43 = *(void *)(v40 + 8);
        float v42 = (char **)(v40 + 8);
        unint64_t v41 = v43;
        uint64_t v44 = v42[1];
        if (v43 >= (unint64_t)v44)
        {
          uint64_t v46 = (void **)(v35 + 24 * v30);
          unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v41 - (void)*v46) >> 3);
          unint64_t v48 = v47 + 1;
          if (v47 + 1 > 0x666666666666666) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - (unsigned char *)*v46) >> 3);
          if (2 * v49 > v48) {
            unint64_t v48 = 2 * v49;
          }
          if (v49 >= 0x333333333333333) {
            unint64_t v50 = 0x666666666666666;
          }
          else {
            unint64_t v50 = v48;
          }
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(v42 + 1), v50);
          v53 = &v51[40 * v47];
          *(_DWORD *)v53 = v31;
          *((void *)v53 + 1) = v36;
          *((_DWORD *)v53 + 4) = 0;
          *((void *)v53 + 3) = &__p;
          *((_DWORD *)v53 + 8) = 2;
          *((float *)v53 + 9) = v39;
          v54 = *v42;
          unint64_t v55 = (char *)*v46;
          int v56 = v53;
          if (*v42 == *v46)
          {
            long long v29 = v235;
          }
          else
          {
            long long v29 = v235;
            do
            {
              long long v57 = *(_OWORD *)(v54 - 40);
              long long v58 = *(_OWORD *)(v54 - 24);
              *((void *)v56 - 1) = *((void *)v54 - 1);
              *(_OWORD *)(v56 - 24) = v58;
              *(_OWORD *)(v56 - 40) = v57;
              v56 -= 40;
              v54 -= 40;
            }
            while (v54 != v55);
            v54 = (char *)*v46;
          }
          unsigned char *v46 = v56;
          long long v45 = v53 + 40;
          *float v42 = v53 + 40;
          v42[1] = &v51[40 * v52];
          if (v54) {
            operator delete(v54);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v41 = v31;
          *(void *)(v41 + 8) = v36;
          *(_DWORD *)(v41 + 16) = 0;
          *(void *)(v41 + 24) = &__p;
          *(_DWORD *)(v41 + 32) = 2;
          long long v45 = (char *)(v41 + 40);
          *(float *)(v41 + 36) = v38;
          long long v29 = v235;
        }
        *float v42 = v45;
        std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v280);
        if (v278)
        {
          v279 = v278;
          operator delete(v278);
        }
        if (v277 < 0) {
          operator delete(v276);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v275);
        std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v274);
        if (SHIBYTE(v291) < 0) {
          operator delete(__p);
        }
        BOOL v9 = v30++ == v233;
      }
      while (!v9);
    }
    unint64_t v59 = v234;
    if (v232 >= 2)
    {
      uint64_t v60 = 1;
      do
      {
        uint64_t v61 = v60 - 1;
        float v62 = *(float *)(*(void *)v248[0] + 4 * (v60 - 1));
        uint64_t v63 = *a3 + 24 * (v60 - 1);
        if (*(char *)(v63 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v244, *(const std::string::value_type **)v63, *(void *)(v63 + 8));
        }
        else
        {
          long long v64 = *(_OWORD *)v63;
          v244.__r_.__value_.__r.__words[2] = *(void *)(v63 + 16);
          *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v64;
        }
        uint64_t v65 = a1[11];
        if (!v65) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        float v66 = (*(float (**)(uint64_t, std::string *))(*(void *)v65 + 48))(v65, &v244);
        *(float *)(*(void *)v248[0] + 4 * v60) = v62 + v66;
        if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v244.__r_.__value_.__l.__data_);
        }
        v67 = (void **)v247[0];
        kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)&__p);
        uint64_t v68 = *a3 + 24 * v61;
        if (*(char *)(v68 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)v68, *(void *)(v68 + 8));
        }
        else
        {
          long long v69 = *(_OWORD *)v68;
          v243.__r_.__value_.__r.__words[2] = *(void *)(v68 + 16);
          *(_OWORD *)&v243.__r_.__value_.__l.__data_ = v69;
        }
        uint64_t v70 = a1[11];
        if (!v70) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        float v71 = (*(float (**)(uint64_t, std::string *))(*(void *)v70 + 48))(v70, &v243);
        float v72 = v71;
        v73 = (char *)v67[2];
        v74 = (char *)v67[1];
        if (v74 >= v73)
        {
          unint64_t v76 = 0xCCCCCCCCCCCCCCCDLL * ((v74 - (unsigned char *)*v67) >> 3);
          unint64_t v77 = v76 + 1;
          if (v76 + 1 > 0x666666666666666) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v78 = 0xCCCCCCCCCCCCCCCDLL * ((v73 - (unsigned char *)*v67) >> 3);
          if (2 * v78 > v77) {
            unint64_t v77 = 2 * v78;
          }
          if (v78 >= 0x333333333333333) {
            unint64_t v79 = 0x666666666666666;
          }
          else {
            unint64_t v79 = v77;
          }
          v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(v67 + 2), v79);
          v82 = &v80[40 * v76];
          *(_DWORD *)v82 = 0;
          *((void *)v82 + 1) = &__p;
          *((_DWORD *)v82 + 4) = v61;
          *((void *)v82 + 3) = v68;
          *((_DWORD *)v82 + 8) = 3;
          *((float *)v82 + 9) = v72;
          v84 = (char *)*v67;
          v83 = (char *)v67[1];
          v85 = v82;
          if (v83 == *v67)
          {
            unint64_t v59 = v234;
          }
          else
          {
            unint64_t v59 = v234;
            do
            {
              long long v86 = *(_OWORD *)(v83 - 40);
              long long v87 = *(_OWORD *)(v83 - 24);
              *((void *)v85 - 1) = *((void *)v83 - 1);
              *(_OWORD *)(v85 - 24) = v87;
              *(_OWORD *)(v85 - 40) = v86;
              v85 -= 40;
              v83 -= 40;
            }
            while (v83 != v84);
            v83 = (char *)*v67;
          }
          v75 = v82 + 40;
          void *v67 = v85;
          v67[1] = v82 + 40;
          v67[2] = &v80[40 * v81];
          if (v83) {
            operator delete(v83);
          }
        }
        else
        {
          *(_DWORD *)v74 = 0;
          *((void *)v74 + 1) = &__p;
          *((_DWORD *)v74 + 4) = v61;
          *((void *)v74 + 3) = v68;
          *((_DWORD *)v74 + 8) = 3;
          v75 = v74 + 40;
          *((float *)v74 + 9) = v71;
          unint64_t v59 = v234;
        }
        v67[1] = v75;
        if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v243.__r_.__value_.__l.__data_);
        }
        std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v297);
        if (v295)
        {
          v296 = v295;
          operator delete(v295);
        }
        if (v294 < 0) {
          operator delete(v293);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v292);
        std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v290);
        BOOL v9 = v60++ == v59;
      }
      while (!v9);
    }
    v88 = v235;
    if (v12 >= 2)
    {
      uint64_t v237 = 1;
      while (v232 < 2)
      {
LABEL_202:
        BOOL v9 = v237++ == v233;
        if (v9) {
          goto LABEL_204;
        }
      }
      uint64_t v239 = v237 - 1;
      uint64_t v89 = 1;
      while (1)
      {
        kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)v265, *v88 + 176 * v239);
        uint64_t v90 = v89 - 1;
        uint64_t v91 = *a3 + 24 * (v89 - 1);
        if (*(char *)(v91 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)v91, *(void *)(v91 + 8));
        }
        else
        {
          long long v92 = *(_OWORD *)v91;
          v242.__r_.__value_.__r.__words[2] = *(void *)(v91 + 16);
          *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v92;
        }
        uint64_t v93 = a1[3];
        if (!v93) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        float v94 = (*(float (**)(uint64_t, char *, std::string *))(*(void *)v93 + 48))(v93, v265, &v242);
        if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v242.__r_.__value_.__l.__data_);
        }
        std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v272);
        if (v270)
        {
          v271 = v270;
          operator delete(v270);
        }
        if (v269 < 0) {
          operator delete(v268);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v267);
        std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v266);
        float v95 = *(float *)(*(void *)(v248[0] + 24 * v239) + 4 * v89);
        kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)v257, *v88 + 176 * v239);
        uint64_t v96 = a1[7];
        if (!v96) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        float v97 = (*(float (**)(uint64_t, char *))(*(void *)v96 + 48))(v96, v257);
        float v98 = *(float *)(*(void *)(v248[0] + 24 * v237) + 4 * v90);
        uint64_t v99 = *a3 + 24 * v90;
        if (*(char *)(v99 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v241, *(const std::string::value_type **)v99, *(void *)(v99 + 8));
        }
        else
        {
          long long v100 = *(_OWORD *)v99;
          v241.__r_.__value_.__r.__words[2] = *(void *)(v99 + 16);
          *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v100;
        }
        uint64_t v101 = a1[11];
        if (!v101) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        float v102 = (*(float (**)(uint64_t, std::string *))(*(void *)v101 + 48))(v101, &v241);
        float v103 = *(float *)(*(void *)(v248[0] + 24 * v239) + 4 * v90);
        v104 = (float *)operator new(0xCuLL);
        float *v104 = v95 + v97;
        v104[1] = v98 + v102;
        v104[2] = v94 + v103;
        if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v241.__r_.__value_.__l.__data_);
        }
        std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v264);
        if (v262)
        {
          v263 = v262;
          operator delete(v262);
        }
        if (v261 < 0) {
          operator delete(v260);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v259);
        std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v258);
        float v105 = *v104;
        if (v104[1] >= *v104)
        {
          v106 = v104;
        }
        else
        {
          float v105 = v104[1];
          v106 = v104 + 1;
        }
        if (v104[2] >= v105) {
          v107 = (char *)v106;
        }
        else {
          v107 = (char *)(v104 + 2);
        }
        int64_t v108 = v107 - (char *)v104;
        uint64_t v109 = (v107 - (char *)v104) >> 2;
        *(_DWORD *)(*(void *)(v248[0] + 24 * v237) + 4 * v89) = *(_DWORD *)v107;
        if (v109 != 2)
        {
          if (v109 != 1)
          {
            if (!v109)
            {
              uint64_t v110 = v247[0];
              uint64_t v111 = *v88 + 176 * v239;
              v290 = 0;
              std::string __p = 0;
              v291 = 0;
              kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)v249, v111);
              uint64_t v112 = a1[7];
              if (!v112) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              float v113 = (*(float (**)(uint64_t, char *))(*(void *)v112 + 48))(v112, v249);
              float v114 = v113;
              uint64_t v115 = v110 + 24 * v237;
              unint64_t v118 = *(void *)(v115 + 8);
              v117 = (char **)(v115 + 8);
              unint64_t v116 = v118;
              v119 = v117[1];
              if (v118 >= (unint64_t)v119)
              {
                v124 = (void **)(v110 + 24 * v237);
                unint64_t v125 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v116 - (void)*v124) >> 3);
                unint64_t v126 = v125 + 1;
                if (v125 + 1 > 0x666666666666666) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v127 = 0xCCCCCCCCCCCCCCCDLL * ((v119 - (unsigned char *)*v124) >> 3);
                if (2 * v127 > v126) {
                  unint64_t v126 = 2 * v127;
                }
                if (v127 >= 0x333333333333333) {
                  unint64_t v128 = 0x666666666666666;
                }
                else {
                  unint64_t v128 = v126;
                }
                v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(v117 + 1), v128);
                v131 = &v129[40 * v125];
                *(_DWORD *)v131 = v239;
                *((void *)v131 + 1) = v111;
                *((_DWORD *)v131 + 4) = v89;
                *((void *)v131 + 3) = &__p;
                *((_DWORD *)v131 + 8) = 2;
                *((float *)v131 + 9) = v114;
                v132 = *v117;
                v133 = (char *)*v124;
                v134 = v131;
                if (*v117 != *v124)
                {
                  do
                  {
                    long long v135 = *(_OWORD *)(v132 - 40);
                    long long v136 = *(_OWORD *)(v132 - 24);
                    *((void *)v134 - 1) = *((void *)v132 - 1);
                    *(_OWORD *)(v134 - 24) = v136;
                    *(_OWORD *)(v134 - 40) = v135;
                    v134 -= 40;
                    v132 -= 40;
                  }
                  while (v132 != v133);
                  v132 = (char *)*v124;
                }
                *v124 = v134;
                v120 = v131 + 40;
                *v117 = v131 + 40;
                v117[1] = &v129[40 * v130];
                if (v132) {
                  operator delete(v132);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v116 = v239;
                *(void *)(v116 + 8) = v111;
                *(_DWORD *)(v116 + 16) = v89;
                *(void *)(v116 + 24) = &__p;
                *(_DWORD *)(v116 + 32) = 2;
                v120 = (char *)(v116 + 40);
                *(float *)(v116 + 36) = v113;
              }
              *v117 = v120;
              std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v256);
              if (v254)
              {
                v255 = v254;
                operator delete(v254);
              }
              if (v253 < 0) {
                operator delete(v252);
              }
              std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v251);
              std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v250);
              if (SHIBYTE(v291) < 0) {
                operator delete(__p);
              }
            }
            goto LABEL_200;
          }
          uint64_t v121 = v247[0];
          kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)&__p);
          uint64_t v122 = *a3 + 24 * v90;
          if (*(char *)(v122 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)v122, *(void *)(v122 + 8));
          }
          else
          {
            long long v123 = *(_OWORD *)v122;
            v240.__r_.__value_.__r.__words[2] = *(void *)(v122 + 16);
            *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v123;
          }
          uint64_t v137 = a1[11];
          if (!v137) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          float v138 = (*(float (**)(uint64_t, std::string *))(*(void *)v137 + 48))(v137, &v240);
          float v139 = v138;
          uint64_t v140 = v121 + 24 * v237;
          unint64_t v143 = *(void *)(v140 + 8);
          v142 = (char **)(v140 + 8);
          unint64_t v141 = v143;
          v144 = v142[1];
          if (v143 >= (unint64_t)v144)
          {
            v146 = (void **)(v121 + 24 * v237);
            unint64_t v147 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v141 - (void)*v146) >> 3);
            unint64_t v148 = v147 + 1;
            if (v147 + 1 > 0x666666666666666) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v149 = 0xCCCCCCCCCCCCCCCDLL * ((v144 - (unsigned char *)*v146) >> 3);
            if (2 * v149 > v148) {
              unint64_t v148 = 2 * v149;
            }
            if (v149 >= 0x333333333333333) {
              unint64_t v150 = 0x666666666666666;
            }
            else {
              unint64_t v150 = v148;
            }
            v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(v142 + 1), v150);
            v153 = &v151[40 * v147];
            *(_DWORD *)v153 = v237;
            *((void *)v153 + 1) = &__p;
            *((_DWORD *)v153 + 4) = v90;
            *((void *)v153 + 3) = v122;
            *((_DWORD *)v153 + 8) = 3;
            *((float *)v153 + 9) = v139;
            v154 = *v142;
            v155 = (char *)*v146;
            v156 = v153;
            if (*v142 != *v146)
            {
              do
              {
                long long v157 = *(_OWORD *)(v154 - 40);
                long long v158 = *(_OWORD *)(v154 - 24);
                *((void *)v156 - 1) = *((void *)v154 - 1);
                *(_OWORD *)(v156 - 24) = v158;
                *(_OWORD *)(v156 - 40) = v157;
                v156 -= 40;
                v154 -= 40;
              }
              while (v154 != v155);
              v154 = (char *)*v146;
            }
            unint64_t v59 = v234;
            *v146 = v156;
            v145 = v153 + 40;
            *v142 = v153 + 40;
            v142[1] = &v151[40 * v152];
            if (v154) {
              operator delete(v154);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v141 = v237;
            *(void *)(v141 + 8) = &__p;
            *(_DWORD *)(v141 + 16) = v90;
            *(void *)(v141 + 24) = v122;
            *(_DWORD *)(v141 + 32) = 3;
            v145 = (char *)(v141 + 40);
            *(float *)(v141 + 36) = v138;
            unint64_t v59 = v234;
          }
          *v142 = v145;
          if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v240.__r_.__value_.__l.__data_);
          }
          std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v297);
          v88 = v235;
          if (v295)
          {
            v296 = v295;
            operator delete(v295);
          }
          if (v294 < 0) {
            operator delete(v293);
          }
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v292);
          std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v290);
          if (v108 != 8) {
            goto LABEL_200;
          }
        }
        v159 = (char **)(v247[0] + 24 * v237);
        uint64_t v160 = *v88 + 176 * v239;
        uint64_t v161 = *a3 + 24 * v90;
        v163 = (void **)(v159 + 1);
        unint64_t v162 = (unint64_t)v159[1];
        v165 = v159 + 2;
        unint64_t v164 = (unint64_t)v159[2];
        if (v94 <= 0.0)
        {
          if (v162 >= v164)
          {
            unint64_t v179 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v162 - (void)*v159) >> 3);
            unint64_t v180 = v179 + 1;
            if (v179 + 1 > 0x666666666666666) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v181 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v164 - (void)*v159) >> 3);
            if (2 * v181 > v180) {
              unint64_t v180 = 2 * v181;
            }
            if (v181 >= 0x333333333333333) {
              unint64_t v182 = 0x666666666666666;
            }
            else {
              unint64_t v182 = v180;
            }
            v171 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)v165, v182);
            v173 = &v171[40 * v179];
            *(_DWORD *)v173 = v239;
            *((void *)v173 + 1) = v160;
            *((_DWORD *)v173 + 4) = v90;
            *((void *)v173 + 3) = v161;
            *((_DWORD *)v173 + 8) = 0;
            *((float *)v173 + 9) = v94;
            v174 = (char *)*v163;
            v183 = *v159;
            v176 = v173;
            if (*v163 != *v159)
            {
              unint64_t v59 = v234;
              v88 = v235;
              do
              {
                long long v184 = *(_OWORD *)(v174 - 40);
                long long v185 = *(_OWORD *)(v174 - 24);
                *((void *)v176 - 1) = *((void *)v174 - 1);
                *(_OWORD *)(v176 - 24) = v185;
                *(_OWORD *)(v176 - 40) = v184;
                v176 -= 40;
                v174 -= 40;
              }
              while (v174 != v183);
LABEL_195:
              v174 = *v159;
LABEL_197:
              *v159 = v176;
              v166 = v173 + 40;
              *v163 = v173 + 40;
              void *v165 = &v171[40 * v172];
              if (v174) {
                operator delete(v174);
              }
              goto LABEL_199;
            }
LABEL_196:
            unint64_t v59 = v234;
            v88 = v235;
            goto LABEL_197;
          }
          *(_DWORD *)unint64_t v162 = v239;
          *(void *)(v162 + 8) = v160;
          *(_DWORD *)(v162 + 16) = v90;
          *(void *)(v162 + 24) = v161;
          *(_DWORD *)(v162 + 32) = 0;
        }
        else
        {
          if (v162 >= v164)
          {
            unint64_t v167 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v162 - (void)*v159) >> 3);
            unint64_t v168 = v167 + 1;
            if (v167 + 1 > 0x666666666666666) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v169 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v164 - (void)*v159) >> 3);
            if (2 * v169 > v168) {
              unint64_t v168 = 2 * v169;
            }
            if (v169 >= 0x333333333333333) {
              unint64_t v170 = 0x666666666666666;
            }
            else {
              unint64_t v170 = v168;
            }
            v171 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)v165, v170);
            v173 = &v171[40 * v167];
            *(_DWORD *)v173 = v239;
            *((void *)v173 + 1) = v160;
            *((_DWORD *)v173 + 4) = v90;
            *((void *)v173 + 3) = v161;
            *((_DWORD *)v173 + 8) = 1;
            *((float *)v173 + 9) = v94;
            v174 = (char *)*v163;
            v175 = *v159;
            v176 = v173;
            if (*v163 != *v159)
            {
              unint64_t v59 = v234;
              v88 = v235;
              do
              {
                long long v177 = *(_OWORD *)(v174 - 40);
                long long v178 = *(_OWORD *)(v174 - 24);
                *((void *)v176 - 1) = *((void *)v174 - 1);
                *(_OWORD *)(v176 - 24) = v178;
                *(_OWORD *)(v176 - 40) = v177;
                v176 -= 40;
                v174 -= 40;
              }
              while (v174 != v175);
              goto LABEL_195;
            }
            goto LABEL_196;
          }
          *(_DWORD *)unint64_t v162 = v239;
          *(void *)(v162 + 8) = v160;
          *(_DWORD *)(v162 + 16) = v90;
          *(void *)(v162 + 24) = v161;
          *(_DWORD *)(v162 + 32) = 1;
        }
        v166 = (void *)(v162 + 40);
        *(float *)(v162 + 36) = v94;
        v88 = v235;
LABEL_199:
        *v163 = v166;
LABEL_200:
        operator delete(v104);
        BOOL v9 = v89++ == v59;
        if (v9) {
          goto LABEL_202;
        }
      }
    }
LABEL_204:
    v290 = 0;
    std::string __p = 0;
    v291 = 0;
    v186 = v231;
    if (v230 != v229 || (v187 = 0, v188 = 0, v228 != v227))
    {
      v188 = 0;
      unint64_t v189 = v59;
      uint64_t v190 = v233;
      do
      {
        uint64_t v191 = *(void *)(v247[0] + 24 * v190);
        v192 = (int *)(v191 + 40 * v189);
        if (v188 >= (_OWORD *)v291)
        {
          v195 = __p;
          unint64_t v196 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v188 - (unsigned char *)__p) >> 3);
          unint64_t v197 = v196 + 1;
          if (v196 + 1 > 0x666666666666666) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((v291 - (unsigned char *)__p) >> 3) > v197) {
            unint64_t v197 = 0x999999999999999ALL * ((v291 - (unsigned char *)__p) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v291 - (unsigned char *)__p) >> 3) >= 0x333333333333333) {
            unint64_t v198 = 0x666666666666666;
          }
          else {
            unint64_t v198 = v197;
          }
          if (v198)
          {
            v199 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)&v291, v198);
            v188 = v290;
            v195 = __p;
          }
          else
          {
            v199 = 0;
          }
          v200 = &v199[40 * v196];
          long long v201 = *(_OWORD *)v192;
          long long v202 = *((_OWORD *)v192 + 1);
          *((void *)v200 + 4) = *((void *)v192 + 4);
          *(_OWORD *)v200 = v201;
          *((_OWORD *)v200 + 1) = v202;
          if (v188 == v195)
          {
            v204 = &v199[40 * v196];
            v186 = v231;
          }
          else
          {
            v203 = &v199[40 * v196];
            v186 = v231;
            do
            {
              v204 = v203 - 40;
              long long v205 = *(_OWORD *)((char *)v188 - 40);
              long long v206 = *(_OWORD *)((char *)v188 - 24);
              *((void *)v203 - 1) = *((void *)v188 - 1);
              *(_OWORD *)(v203 - 24) = v206;
              *(_OWORD *)(v203 - 40) = v205;
              v188 = (_OWORD *)((char *)v188 - 40);
              v203 -= 40;
            }
            while (v188 != v195);
          }
          v188 = v200 + 40;
          std::string __p = v204;
          v290 = v200 + 40;
          v291 = &v199[40 * v198];
          if (v195) {
            operator delete(v195);
          }
        }
        else
        {
          long long v193 = *(_OWORD *)v192;
          long long v194 = *((_OWORD *)v192 + 1);
          *((void *)v188 + 4) = *((void *)v192 + 4);
          _OWORD *v188 = v193;
          v188[1] = v194;
          v188 = (_OWORD *)((char *)v188 + 40);
        }
        v290 = v188;
        uint64_t v190 = *v192;
        unint64_t v189 = *(int *)(v191 + 40 * v189 + 16);
      }
      while (v190 | v189);
      v187 = __p;
    }
    unsigned int v207 = -858993459 * ((unint64_t)((char *)v188 - v187) >> 3) - 1;
    if ((v207 & 0x80000000) == 0)
    {
      v208 = v186 + 2;
      v209 = (char *)v186[1];
      do
      {
        v210 = (char *)__p + 40 * v207;
        if ((unint64_t)v209 >= *v208)
        {
          unint64_t v213 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v209[-*v186] >> 3);
          unint64_t v214 = v213 + 1;
          if (v213 + 1 > 0x666666666666666) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((uint64_t)(*v208 - *v186) >> 3) > v214) {
            unint64_t v214 = 0x999999999999999ALL * ((uint64_t)(*v208 - *v186) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v208 - *v186) >> 3) >= 0x333333333333333) {
            unint64_t v215 = 0x666666666666666;
          }
          else {
            unint64_t v215 = v214;
          }
          if (v215) {
            v216 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(v186 + 2), v215);
          }
          else {
            v216 = 0;
          }
          v217 = &v216[40 * v213];
          long long v218 = *(_OWORD *)v210;
          long long v219 = *((_OWORD *)v210 + 1);
          *((void *)v217 + 4) = *((void *)v210 + 4);
          *(_OWORD *)v217 = v218;
          *((_OWORD *)v217 + 1) = v219;
          v221 = (char *)*v186;
          v220 = (char *)v186[1];
          v222 = v217;
          if (v220 != (char *)*v186)
          {
            do
            {
              long long v223 = *(_OWORD *)(v220 - 40);
              long long v224 = *(_OWORD *)(v220 - 24);
              *((void *)v222 - 1) = *((void *)v220 - 1);
              *(_OWORD *)(v222 - 24) = v224;
              *(_OWORD *)(v222 - 40) = v223;
              v222 -= 40;
              v220 -= 40;
            }
            while (v220 != v221);
            v220 = (char *)*v186;
          }
          v209 = v217 + 40;
          void *v186 = v222;
          v186[1] = v217 + 40;
          v186[2] = &v216[40 * v215];
          if (v220) {
            operator delete(v220);
          }
        }
        else
        {
          long long v211 = *(_OWORD *)v210;
          long long v212 = *((_OWORD *)v210 + 1);
          *((void *)v209 + 4) = *((void *)v210 + 4);
          *(_OWORD *)v209 = v211;
          *((_OWORD *)v209 + 1) = v212;
          v209 += 40;
        }
        v186[1] = v209;
      }
      while ((int)v207-- > 0);
      v187 = __p;
    }
    float v8 = *(float *)(*(void *)(v248[0] + 24 * v233) + 4 * v59);
    if (v187)
    {
      v290 = v187;
      operator delete(v187);
    }
    std::string __p = v247;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    std::string __p = v248;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  return v8;
}

void sub_1B1EAEAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a59 < 0) {
    operator delete(__p);
  }
  kaldi::quasar::ConfusionNetworkSlot<std::string>::~ConfusionNetworkSlot((uint64_t)&STACK[0x520]);
  STACK[0x520] = (unint64_t)&a60;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x520]);
  STACK[0x520] = (unint64_t)&a63;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x520]);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ConfusionNetworkSlot<std::string>::~ConfusionNetworkSlot(uint64_t a1)
{
  std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100]((void *)(a1 + 144));
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 48);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(a1 + 8);
  return a1;
}

void *std::__function::__value_func<float ()(std::string)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<float ()(std::string)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B1EAEFDC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::~__func()
{
}

void *std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A5B2B0;
  return result;
}

void std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5B2B0;
}

float std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke[abi:ne180100]<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1} &,kaldi::quasar::ConfusionNetworkSlot<std::string>>(a1 + 8, a2);
}

uint64_t std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::target_type()
{
}

double std::__invoke[abi:ne180100]<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1} &,kaldi::quasar::ConfusionNetworkSlot<std::string>>(uint64_t a1, uint64_t a2)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v5, (uint64_t *)(a2 + 8));
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v6, (uint64_t *)(a2 + 48));
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + 88);
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 112);
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  char v11 = *(unsigned char *)(a2 + 136);
  uint64_t v3 = (void *)std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100]((uint64_t)v12, a2 + 144);
  std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v6);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)v5);
  return 1.0;
}

void *std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B1EAF648(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1}>,float ()(std::string)>::~__func()
{
}

void *std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1}>,float ()(std::string)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A5B258;
  return result;
}

void std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1}>,float ()(std::string)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5B258;
}

float std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1}>,float ()(std::string)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  int v3 = *(char *)(a2 + 23);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v3 < 0) {
    operator delete(v2);
  }
  return 1.0;
}

uint64_t std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1}>,float ()(std::string)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1},std::allocator<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1}>,float ()(std::string)>::target_type()
{
}

void *std::vector<std::vector<kaldi::quasar::AlignmentElement<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B1EAF7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t quasar::DecoderChainPersistentData::DecoderChainPersistentData(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(void *)(this + 8) = 0;
  return this;
}

double quasar::DecoderChainPersistentData::getAverageConfidence(quasar::DecoderChainPersistentData *this)
{
  unint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0.0;
  }
  *(float *)&double result = *(float *)this / (float)v1;
  return result;
}

float quasar::DecoderChainPersistentData::updateData(uint64_t a1, uint64_t ***a2, float result)
{
  int v3 = **a2;
  if ((*a2)[1] != v3)
  {
    uint64_t v5 = *v3;
    uint64_t v4 = (**a2)[1];
    *(void *)(a1 + 8) += 0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 5);
    if (v4 == v5)
    {
      float v7 = 0.0;
    }
    else
    {
      int v6 = 0;
      do
      {
        int v6 = (int)(float)(*(float *)(v5 + 40) + (float)v6);
        v5 += 224;
      }
      while (v5 != v4);
      float v7 = (float)v6;
    }
    double result = *(float *)a1 + v7;
    *(float *)a1 = result;
  }
  return result;
}

float quasar::DecoderChainOutput::updatePersistentData(quasar::DecoderChainOutput *this, float a2)
{
  uint64_t v3 = *((void *)this + 76);
  uint64_t v4 = *((void *)this + 45);
  v6[0] = *((uint64_t ***)this + 44);
  v6[1] = (uint64_t **)v4;
  if (!v4) {
    return quasar::DecoderChainPersistentData::updateData(v3, v6, a2);
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  quasar::DecoderChainPersistentData::updateData(v3, v6, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  return result;
}

uint64_t quasar::DecoderChainOutput::DecoderChainOutput(uint64_t a1, void *a2, void *a3)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 424) = *a3;
  uint64_t v4 = a3[1];
  *(void *)(a1 + 432) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 448) = xmmword_1B257FBB0;
  *(void *)(a1 + 464) = 0xBFF0000000000000;
  *(void *)(a1 + 472) = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 480) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = operator new(0x30uLL);
  *(_OWORD *)((char *)v6 + 8) = 0u;
  *(void *)int v6 = &unk_1F0A5EAB0;
  v6[2] = 0u;
  *((void *)v6 + 3) = 0;
  *(void *)(a1 + 488) = (char *)v6 + 24;
  *(void *)(a1 + 496) = v6;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 504) = _D1;
  *(_DWORD *)(a1 + 512) = 0;
  *(_WORD *)(a1 + 516) = 0;
  *(void *)(a1 + 520) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 528) = -1;
  *(void *)(a1 + 536) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 632) = 0;
  *(unsigned char *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 574) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 613) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(unsigned char *)(a1 + 864) = 0;
  *(void *)(a1 + 920) = 1065353216;
  *(unsigned char *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 980) = 0u;
  *(_OWORD *)(a1 + 996) = 0u;
  *(_OWORD *)(a1 + 1012) = 0u;
  *(_OWORD *)(a1 + 1028) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1058) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(void *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 976) = 1065353216;
  *(void *)(a1 + 1080) = 0x4022000000000000;
  *(_WORD *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1092) = 0;
  *(unsigned char *)(a1 + 1096) = 0;
  *(void *)(a1 + 1100) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(void *)(a1 + 1128) = 0;
  *(unsigned char *)(a1 + 1136) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 1144), "▁");
  return a1;
}

void sub_1B1EAFB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  BOOL v15 = *(std::__shared_weak_count **)(v10 + 1064);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*(char *)(v10 + 1055) < 0) {
    operator delete(*(void **)(v10 + 1032));
  }
  unint64_t v16 = *(void **)(v10 + 1008);
  if (v16)
  {
    *(void *)(v10 + 1016) = v16;
    operator delete(v16);
  }
  unint64_t v17 = *(void **)(v10 + 984);
  if (v17)
  {
    *(void *)(v10 + 992) = v17;
    operator delete(v17);
  }
  if (*(char *)(v10 + 959) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v10 + 903) < 0) {
    operator delete(*v13);
  }
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  quasar::AudioAnalytics::~AudioAnalytics(v12);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unint64_t v18 = *(std::__shared_weak_count **)(v10 + 648);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  unint64_t v19 = *(std::__shared_weak_count **)(v10 + 616);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unint64_t v20 = *(std::__shared_weak_count **)(v10 + 568);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  char v21 = *(std::__shared_weak_count **)(v10 + 552);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  int v22 = *(std::__shared_weak_count **)(v10 + 496);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v10 + 480);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::string v24 = *(std::__shared_weak_count **)(v10 + 432);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::string v25 = *(std::__shared_weak_count **)(v10 + 416);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  unint64_t v26 = *(std::__shared_weak_count **)(v10 + 400);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a10 = v10 + 368;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  long long v27 = *(std::__shared_weak_count **)(v10 + 360);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  long long v28 = *(std::__shared_weak_count **)(v10 + 344);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  long long v29 = *(std::__shared_weak_count **)(v10 + 328);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v10 + 312);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  uint64_t v31 = *(std::__shared_weak_count **)(v10 + 296);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  float v32 = *(std::__shared_weak_count **)(v10 + 280);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  uint64_t v33 = *(std::__shared_weak_count **)(v10 + 264);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  float v34 = *(std::__shared_weak_count **)(v10 + 248);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v10 + 232);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(v10 + 216);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (*(unsigned char *)(v10 + 200))
  {
    uint64_t v37 = *(std::__shared_weak_count **)(v10 + 192);
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
  }
  float v38 = *(std::__shared_weak_count **)(v10 + 176);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  float v39 = *(std::__shared_weak_count **)(v10 + 160);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v11, *(void **)(v10 + 128));
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  uint64_t v40 = *(void **)(v10 + 72);
  if (v40)
  {
    *(void *)(v10 + 80) = v40;
    operator delete(v40);
  }
  a10 = v10 + 48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v10 + 24;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

BOOL quasar::DecoderChainOutput::nonEmptyTopChoice(quasar::DecoderChainOutput *this)
{
  unint64_t v1 = (void *)*((void *)this + 44);
  return v1 && *v1 != v1[1] && *(void *)*v1 != *(void *)(*v1 + 8);
}

BOOL quasar::DecoderChainOutput::scaleResultLattice(quasar::DecoderChainOutput *this, float a2, float a3, char a4)
{
  float v4 = a3;
  float v5 = a2;
  float v7 = *((float *)this + 126);
  if ((a4 & 1) == 0)
  {
    float v4 = v7 * a3;
    float v5 = *((float *)this + 127) * a2;
  }
  float v8 = *((float *)this + 127);
  BOOL v9 = v5 != v8 || v4 != v7;
  if (v9)
  {
    std::vector<std::vector<double>>::vector(v14, 2uLL);
    BOOL v15 = 0;
    std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v14[0], 2uLL, &v15);
    BOOL v15 = 0;
    std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)(v14[0] + 3), 2uLL, &v15);
    uint64_t v10 = v14[0];
    **v14[0] = (float)(v5 / v8);
    v10[3][1] = (float)(v4 / v7);
    fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>(v14, *((void *)this + 19));
    BOOL v15 = v14;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
  uint64_t v11 = (uint64_t *)*((void *)this + 61);
  if (v11)
  {
    float v12 = *((float *)this + 126);
    if (v4 != v12) {
      kaldi::LatticeScoreCache::ScaleAcousticScores(v11, v4 / v12);
    }
  }
  *((float *)this + 126) = v4;
  *((float *)this + 127) = v5;
  return v9;
}

void sub_1B1EAFEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::DecoderChainOutput::getWordHypLattice(quasar::DecoderChainOutput *this@<X0>, const quasar::DecoderPassData *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *((void *)a2 + 21);
  (*(void (**)(void))(**(void **)(*(void *)a2 + 16) + 32))(*(void *)(*(void *)a2 + 16));
  uint64_t v7 = *((void *)a2 + 23);
  quasar::DecoderChainOutput::getWordHypLattice((uint64_t)this, v6, v7, a3);
}

void quasar::DecoderChainOutput::getWordHypLattice(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, void *a4@<X8>)
{
  if (*(unsigned char *)(a1 + 864))
  {
    if (*(unsigned char *)(a1 + 200))
    {
      uint64_t v6 = *(void *)(a1 + 192);
      *a4 = *(void *)(a1 + 184);
      a4[1] = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    }
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(unsigned char *)(a1 + 200) = 1;
    uint64_t v10 = *(void *)(a1 + 336);
    if (v10)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 168);
      if (!v12) {
        _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
      }
      uint64_t v11 = *(std::__shared_weak_count **)(a1 + 176);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = *(void *)(a1 + 336);
      if (!v10) {
        goto LABEL_17;
      }
    }
    uint64_t v12 = v10 + 8;
LABEL_17:
    kaldi::WordHypLattice::getWordHypLattice(v12, &v29);
    uint64_t v13 = v29;
    float v14 = *(std::vector<std::string> ***)(v29 + 40);
    BOOL v15 = *(std::vector<std::string> ***)(v29 + 48);
    if (v14 != v15)
    {
      long long v28 = v11;
      do
      {
        quasar::SymbolTableList::lookup(*(uint64_t **)(a1 + 472), (int)(*v14)[10].__end_cap_.__value_, (unsigned __int8 *)&(*v14)[11], &(*v14)[12]);
        std::vector<std::string>::resize((std::vector<std::string> *)((char *)*v14 + 80), ((char *)(*v14)[4].__end_cap_.__value_ - (char *)(*v14)[4].__end_) >> 2);
        unint64_t v16 = *v14;
        std::vector<std::string>::pointer end = (*v14)[4].__end_;
        if ((*v14)[4].__end_cap_.__value_ != end)
        {
          uint64_t v18 = 0;
          unint64_t v19 = 0;
          do
          {
            (*(void (**)(long long *__return_ptr, uint64_t, void))(*(void *)a2 + 88))(&v31, a2, *((int *)&end->__r_.__value_.__l.__data_ + v19));
            unint64_t v20 = &(*v14)[3].__end_[v18];
            if (SHIBYTE(v20->__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v20->__r_.__value_.__l.__data_);
            }
            long long v21 = v31;
            v20->__r_.__value_.__r.__words[2] = v32;
            *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
            ++v19;
            unint64_t v16 = *v14;
            std::vector<std::string>::pointer end = (*v14)[4].__end_;
            ++v18;
          }
          while (v19 < ((char *)(*v14)[4].__end_cap_.__value_ - (char *)end) >> 2);
        }
        if (a3)
        {
          if (*(void *)(a1 + 336))
          {
            std::vector<std::string>::resize(v16 + 7, ((char *)v16[6].__end_ - (char *)v16[6].__begin_) >> 2);
            begin = (*v14)[6].__begin_;
            if ((*v14)[6].__end_ != begin)
            {
              uint64_t v23 = 0;
              unint64_t v24 = 0;
              do
              {
                (*(void (**)(long long *__return_ptr, uint64_t, void))(*(void *)a3 + 88))(&v31, a3, *((int *)&begin->__r_.__value_.__l.__data_ + v24));
                std::string v25 = &(*v14)[7].__begin_[v23];
                if (SHIBYTE(v25->__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v25->__r_.__value_.__l.__data_);
                }
                long long v26 = v31;
                v25->__r_.__value_.__r.__words[2] = v32;
                *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
                ++v24;
                begin = (*v14)[6].__begin_;
                ++v23;
              }
              while (v24 < ((char *)(*v14)[6].__end_ - (char *)begin) >> 2);
            }
          }
        }
        ++v14;
      }
      while (v14 != v15);
      uint64_t v11 = v28;
      uint64_t v13 = v29;
    }
    if (v13 && quasar::gLogLevel > 4)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      kaldi::operator<<((uint64_t *)&v31, v29);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v31);
    }
    std::optional<std::shared_ptr<kaldi::WordHypLattice>>::operator=[abi:ne180100]<std::shared_ptr<kaldi::WordHypLattice>&,void>(a1 + 184, &v29);
    uint64_t v27 = *(void *)(a1 + 192);
    *a4 = *(void *)(a1 + 184);
    a4[1] = v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    return;
  }
  if (*(unsigned char *)(a1 + 200))
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 192);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    *(unsigned char *)(a1 + 200) = 0;
  }
  *a4 = 0;
  a4[1] = 0;
}

void sub_1B1EB03E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::shared_ptr<kaldi::WordHypLattice>>::operator=[abi:ne180100]<std::shared_ptr<kaldi::WordHypLattice>&,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v4 = a2[1];
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    float v5 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void std::__shared_ptr_emplace<kaldi::LatticeScoreCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EAB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::LatticeScoreCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EAB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::LatticeScoreCache>::__on_zero_shared(uint64_t a1)
{
}

void quasar::corrective_reranking::PhoneticMatcher::PhoneticMatcher(quasar::corrective_reranking::PhoneticMatcher *this, const quasar::corrective_reranking::PhoneticMatcherConfig *a2)
{
  *(void *)this = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = *((_OWORD *)a2 + 1);
  *((unsigned char *)this + 32) = *((unsigned char *)a2 + 32);
  *((_OWORD *)this + 1) = v5;
  *((void *)this + 5) = *((void *)a2 + 5);
  uint64_t v6 = *((void *)a2 + 6);
  *((void *)this + 6) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 7) = 0;
  *((void *)this + 8) = *((void *)a2 + 2);
  std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,std::optional<kaldi::CuVector<float>>>,void *>,kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,std::optional<kaldi::CuVector<float>>>,void *>>>>::unordered_map((uint64_t)this + 72, 0, v7, &v8);
  *((void *)this + 15) = (char *)this + 120;
  *((void *)this + 16) = (char *)this + 120;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  if (*(void *)a2) {
    quasar::QuasarEuclid::createQuasarEuclid(*(void *)a2, 0, 0);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"config.euclidSysConfig", 22);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
}

void quasar::corrective_reranking::PhoneticMatcher::~PhoneticMatcher(quasar::corrective_reranking::PhoneticMatcher *this)
{
  std::__list_imp<std::pair<std::string,std::optional<kaldi::CuVector<float>>>>::clear((uint64_t *)this + 15);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 72);
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t quasar::corrective_reranking::PhoneticMatcher::nearestNeighbors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), a2, a3, 0x100000000);
}

float quasar::corrective_reranking::PhoneticMatcher::phoneticSimilarity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  quasar::copyAndTrim(a2, &v42);
  quasar::copyAndTrim(a3, &v41);
  uint64_t v5 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v42.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_18;
  }
  std::string::size_type v7 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v7 = v41.__r_.__value_.__l.__size_;
  }
  if (!v7)
  {
LABEL_18:
    float v9 = INFINITY;
    goto LABEL_106;
  }
  if (size == v7)
  {
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v8 = &v41;
    }
    else {
      char v8 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((*((unsigned char *)&v42.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(v42.__r_.__value_.__l.__data_, v8, v42.__r_.__value_.__l.__size_))
      {
        float v9 = 0.0;
        goto LABEL_106;
      }
    }
    else
    {
      float v9 = 0.0;
      if (!*((unsigned char *)&v42.__r_.__value_.__s + 23)) {
        goto LABEL_106;
      }
      uint64_t v10 = &v42;
      while (v10->__r_.__value_.__s.__data_[0] == v8->__r_.__value_.__s.__data_[0])
      {
        uint64_t v10 = (std::string *)((char *)v10 + 1);
        char v8 = (std::string *)((char *)v8 + 1);
        if (!--v5) {
          goto LABEL_106;
        }
      }
    }
  }
  long long v38 = 0u;
  long long v39 = 0u;
  int v40 = 1065353216;
  long long v35 = 0u;
  long long v36 = 0u;
  int v37 = 1065353216;
  if (*(unsigned char *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v38, (unsigned __int8 *)&v42, (uint64_t)&v42);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v35, (unsigned __int8 *)&v41, (uint64_t)&v41);
  }
  if (*(unsigned char *)(a1 + 25))
  {
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v42;
    }
    else {
      uint64_t v11 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v12 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v12 = v42.__r_.__value_.__l.__size_;
    }
    quasar::utf8::convertToLowerCaseOrEmpty((char *)v11, v12, &__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)&v38, (unsigned __int8 *)&__p, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v41;
    }
    else {
      uint64_t v13 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v14 = v41.__r_.__value_.__l.__size_;
    }
    quasar::utf8::convertToLowerCaseOrEmpty((char *)v13, v14, &__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)&v35, (unsigned __int8 *)&__p, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a1 + 26))
  {
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v15 = &v42;
    }
    else {
      BOOL v15 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v16 = v42.__r_.__value_.__l.__size_;
    }
    quasar::utf8::convertToUpperCaseOrEmpty((char *)v15, v16, &__p);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v17 = &v41;
    }
    else {
      unint64_t v17 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v18 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v18 = v41.__r_.__value_.__l.__size_;
    }
    quasar::utf8::convertToUpperCaseOrEmpty((char *)v17, v18, &v31);
    if ((*(_DWORD *)(a1 + 28) & 0x80000000) == 0) {
      quasar::toU32String();
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v38, (unsigned __int8 *)&__p, (uint64_t)&__p);
    if ((*(_DWORD *)(a1 + 28) & 0x80000000) == 0) {
      quasar::toU32String();
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v35, (unsigned __int8 *)&v31, (uint64_t)&v31);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (!*(unsigned char *)(a1 + 32)) {
    goto LABEL_88;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v38, (unsigned __int8 *)&v42, (uint64_t)&v42);
  int v19 = quasar::corrective_reranking::classifyCasing((uint64_t)&v42);
  switch(v19)
  {
    case 2:
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v22 = &v41;
      }
      else {
        int v22 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = v41.__r_.__value_.__l.__size_;
      }
      quasar::utf8::convertToTitleCaseOrEmpty((char *)v22, v23, &__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)&v35, (unsigned __int8 *)&__p, (uint64_t)&__p);
LABEL_85:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_88;
    case 1:
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v24 = &v41;
      }
      else {
        unint64_t v24 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v25 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v25 = v41.__r_.__value_.__l.__size_;
      }
      quasar::utf8::convertToUpperCaseOrEmpty((char *)v24, v25, &__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)&v35, (unsigned __int8 *)&__p, (uint64_t)&__p);
      goto LABEL_85;
    case 0:
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v20 = &v41;
      }
      else {
        unint64_t v20 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v21 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = v41.__r_.__value_.__l.__size_;
      }
      quasar::utf8::convertToLowerCaseOrEmpty((char *)v20, v21, &__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)&v35, (unsigned __int8 *)&__p, (uint64_t)&__p);
      goto LABEL_85;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v35, (unsigned __int8 *)&v41, (uint64_t)&v41);
LABEL_88:
  long long v26 = (void *)v39;
  if ((void)v39)
  {
    float v9 = INFINITY;
    do
    {
      quasar::corrective_reranking::PhoneticMatcher::computeEmbedding(a1, (uint64_t)(v26 + 2), (uint64_t)&__p);
      if (v34)
      {
        uint64_t v27 = (void *)v36;
        if (!(void)v36) {
          goto LABEL_101;
        }
        do
        {
          quasar::corrective_reranking::PhoneticMatcher::computeEmbedding(a1, (uint64_t)(v27 + 2), (uint64_t)&v31);
          if (v32)
          {
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v31, (uint64_t)&__p, -1.0, 1.0);
            kaldi::CuVectorBase<float>::ApplyPow((uint64_t)&v31, 2.0);
            double v28 = kaldi::CuVectorBase<float>::Sum((uint64_t)&v31);
            if (*(float *)&v28 < 0.0) {
              *(float *)&double v28 = 0.0;
            }
            float v29 = sqrtf(*(float *)&v28);
            if (v9 > v29) {
              float v9 = v29;
            }
            if (v32) {
              kaldi::CuVector<float>::~CuVector(&v31);
            }
          }
          uint64_t v27 = (void *)*v27;
        }
        while (v27);
        if (v34) {
LABEL_101:
        }
          kaldi::CuVector<float>::~CuVector(&__p);
      }
      long long v26 = (void *)*v26;
    }
    while (v26);
  }
  else
  {
    float v9 = INFINITY;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v35);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v38);
LABEL_106:
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_1B1EB0CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v29 - 144);
  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }
  if (*(char *)(v29 - 49) < 0) {
    operator delete(*(void **)(v29 - 72));
  }
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::PhoneticMatcher::computeEmbedding(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  quasar::QuasarEuclid::preprocessInput(*(void *)(a1 + 56), a2, 1, __p);
  unint64_t v5 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 32) = 0;
  if (v5)
  {
    if (kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::Get(a1 + 64, (uint64_t)__p, (void *)a3))
    {
      goto LABEL_8;
    }
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 56) + 24))(v6);
    std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>((void *)a3, (uint64_t)v6);
    if (v7) {
      kaldi::CuVector<float>::~CuVector(v6);
    }
    if (*(unsigned char *)(a3 + 32))
    {
LABEL_8:
      ++*(_DWORD *)(a1 + 144);
    }
    else
    {
      ++*(_DWORD *)(a1 + 148);
      quasar::QuasarEuclid::inferEmbeddingVectorWithPreprocessedInput(*(void **)(a1 + 56), (uint64_t)__p, (uint64_t)v6);
      std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>((void *)a3, (uint64_t)v6);
      if (v7) {
        kaldi::CuVector<float>::~CuVector(v6);
      }
      if (*(void *)(a1 + 64)) {
        kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::Insert(std::string const&,std::optional<kaldi::CuVector<float>> const&)::{lambda(std::optional<kaldi::CuVector<float>>&)#1}>((unint64_t *)(a1 + 64), (std::string::size_type)__p, a3);
      }
    }
  }
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1EB0ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13) {
    kaldi::CuVector<float>::~CuVector(&a9);
  }
  if (*(unsigned char *)(v19 + 32)) {
    kaldi::CuVector<float>::~CuVector((void *)v19);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::Get(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = 0;
  BOOL v4 = kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::Get(a1, a2, &v6);
  if (v4) {
    std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>(a3, v6);
  }
  return v4;
}

{
  void *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v9[34];

  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>((void *)(a1 + 8), v9);
  uint64_t v6 = v5;
  if (v5)
  {
    char v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

void quasar::corrective_reranking::PhoneticMatcher::clearCache(quasar::corrective_reranking::PhoneticMatcher *this)
{
  if (quasar::gLogLevel >= 5)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Clearing phonetic matcher cache, size=", 38);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", hits=", 7);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", misses=", 9);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v4);
  }
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)this + 9);
  std::__list_imp<std::pair<std::string,std::optional<kaldi::CuVector<float>>>>::clear((uint64_t *)this + 15);
  *((void *)this + 18) = 0;
}

void sub_1B1EB103C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__list_imp<std::pair<std::string,std::optional<kaldi::CuVector<float>>>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::optional<kaldi::CuVector<float>>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::optional<kaldi::CuVector<float>>>,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    kaldi::CuVector<float>::~CuVector((void *)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>(void *result, uint64_t a2)
{
  if (*((unsigned __int8 *)result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*((unsigned char *)result + 32))
    {
      return (void *)kaldi::CuVector<float>::operator=((uint64_t)result, a2);
    }
  }
  else if (*((unsigned char *)result + 32))
  {
    float result = kaldi::CuVector<float>::~CuVector(result);
    *((unsigned char *)result + 32) = 0;
  }
  else
  {
    float result = kaldi::CuVector<float>::CuVector(result, a2);
    *((unsigned char *)result + 32) = 1;
  }
  return result;
}

uint64_t std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,std::optional<kaldi::CuVector<float>>>,void *>,kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,std::optional<kaldi::CuVector<float>>>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5 = *a3;
  char v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1EB11C0(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::string::size_type v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    *unint64_t v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v16;
  void *v16 = i;
  *(void *)(v23 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1B1EB143C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::string,std::optional<kaldi::CuVector<float>>,std::hash<std::string>,std::equal_to<std::string>>::Insert(std::string const&,std::optional<kaldi::CuVector<float>> const&)::{lambda(std::optional<kaldi::CuVector<float>>&)#1}>(unint64_t *a1, std::string::size_type a2, uint64_t a3)
{
  double v28 = (uint64_t *)&v28;
  uint64_t v29 = (uint64_t *)&v28;
  uint64_t v30 = 0;
  char v6 = a1 + 1;
  v27.__r_.__value_.__r.__words[0] = a2;
  char v7 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>(a1 + 1, (uint64_t *)&v27);
  if (v7)
  {
    unint64_t v8 = (uint64_t *)v7[3];
    if (&v28 != (uint64_t **)v8)
    {
      unint64_t v9 = (uint64_t *)v8[1];
      if (v9 != (uint64_t *)&v28)
      {
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = v9;
        *(void *)v8[1] = v10;
        uint64_t v11 = (uint64_t)v28;
        v28[1] = (uint64_t)v8;
        *unint64_t v8 = v11;
        v8[1] = (uint64_t)&v28;
        --a1[9];
        double v28 = v8;
        ++v30;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v6, v7);
  }
  else
  {
    unint64_t v12 = a1[9];
    if (v12 >= *a1)
    {
      uint64_t v13 = (uint64_t *)a1[7];
      if (&v28 != (uint64_t **)v13)
      {
        std::string::size_type v14 = (uint64_t *)v13[1];
        if (v14 != (uint64_t *)&v28)
        {
          uint64_t v15 = *v13;
          *(void *)(v15 + 8) = v14;
          *(void *)v13[1] = v15;
          uint64_t v16 = (uint64_t)v28;
          v28[1] = (uint64_t)v13;
          *uint64_t v13 = v16;
          v13[1] = (uint64_t)&v28;
          a1[9] = v12 - 1;
          double v28 = v13;
          ++v30;
        }
      }
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)(v29 + 2);
      std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__erase_unique<std::string const*>(v6, (uint64_t *)&v27);
      std::string::operator=((std::string *)(v29 + 2), (const std::string *)a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v27 = *(std::string *)a2;
      }
      float v17 = (uint64_t *)operator new(0x50uLL);
      std::string::size_type size = v27.__r_.__value_.__l.__size_;
      v17[2] = v27.__r_.__value_.__r.__words[0];
      v17[3] = size;
      *(uint64_t *)((char *)v17 + 31) = *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 7);
      LOBYTE(size) = *((unsigned char *)&v27.__r_.__value_.__s + 23);
      memset(&v27, 0, sizeof(v27));
      *((unsigned char *)v17 + 39) = size;
      *((unsigned char *)v17 + 40) = 0;
      *((unsigned char *)v17 + 72) = 0;
      uint64_t v19 = (uint64_t)v28;
      uint64_t *v17 = (uint64_t)v28;
      v17[1] = (uint64_t)&v28;
      *(void *)(v19 + 8) = v17;
      double v28 = v17;
      ++v30;
    }
  }
  unint64_t v20 = v29;
  unint64_t v21 = v29 + 5;
  std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>(v29 + 5, a3);
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 2);
  v27.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
  std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__emplace_unique_key_args<std::string const*,std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>((uint64_t)v6, (uint64_t *)&v27, &v27);
  size_t v22 = (uint64_t *)a1[8];
  if (v22 != v20)
  {
    uint64_t v23 = (uint64_t *)v20[1];
    if (v23 != v22)
    {
      uint64_t v24 = *v20;
      *(void *)(v24 + 8) = v23;
      *(void *)v20[1] = v24;
      uint64_t v25 = *v22;
      *(void *)(v25 + 8) = v20;
      uint64_t *v20 = v25;
      uint64_t *v22 = (uint64_t)v20;
      v20[1] = (uint64_t)v22;
      --v30;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::string,std::optional<kaldi::CuVector<float>>>>::clear((uint64_t *)&v28);
  return v21;
}

void sub_1B1EB1768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
}

quasar::DoublePartialLogic *quasar::DoublePartialLogic::DoublePartialLogic(quasar::DoublePartialLogic *this)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1F0A62CF8;
  *((void *)this + 1) = v2;
  *((unsigned char *)v2 + 24) = 0;
  *(void *)this = v2 + 3;
  return this;
}

unsigned char **quasar::DoublePartialLogic::handlePartial(unsigned char **this, int a2, int a3, int a4, BOOL *a5, BOOL *a6)
{
  char v6 = a3 & ~(_BYTE)a4;
  if (!a2) {
    char v6 = 0;
  }
  *a6 = v6;
  char v7 = *this;
  if (a3 && a4 && (!*v7 || (a2 & 1) == 0))
  {
    *a5 = 1;
  }
  else
  {
    *a5 = 0;
    *char v7 = 0;
  }
  return this;
}

unsigned char **quasar::DoublePartialLogic::handleFinal(unsigned char **this)
{
  **this = 0;
  return this;
}

void *quasar::DoublePartialLogic::getIsLastPartialTrailingPunctuationHidden@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this[1];
  *a2 = *this;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void sdapi::SdapiTokenizer::~SdapiTokenizer(sdapi::SdapiTokenizer *this)
{
  *(void *)this = &unk_1F0A51828;
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(this);
  std::recursive_mutex::lock(SharedMutex);
  if (*((void *)this + 4) != -1)
  {
    TPToken_Close();
    *((void *)this + 4) = -1;
  }
  if (*((void *)this + 3) != -1)
  {
    TPLexicon_Close();
    *((void *)this + 3) = -1;
  }
  if (*((void *)this + 2) != -1)
  {
    SDVoc_Delete();
    *((void *)this + 2) = -1;
  }
  std::recursive_mutex::unlock(SharedMutex);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  sdapi::SdapiTokenizer::~SdapiTokenizer(this);
  JUMPOUT(0x1B3EA8670);
}

void sdapi::SdapiTokenizer::createSdapiTokenizer(sdapi::SdapiUtil *a1)
{
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(a1);
  std::recursive_mutex::lock(SharedMutex);
  operator new();
}

void sub_1B1EB1B18(_Unwind_Exception *a1)
{
  *uint64_t v2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sdapi::SdapiTokenizer::loadModels(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex((sdapi::SdapiUtil *)a1);
  std::recursive_mutex::lock(SharedMutex);
  a1[2] = a2;
  uint64_t LexiconHandle = sdapi::SdapiUtil::fetchLexiconHandle(a2, a3);
  a1[3] = LexiconHandle;
  a1[4] = sdapi::SdapiUtil::fetchTokenHandle(a1[2], LexiconHandle, a4);
  if (SDApi_HasErrored())
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Sdapi has errored. Dying.", 25);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  std::recursive_mutex::unlock(SharedMutex);
}

void sub_1B1EB1C58(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiTokenizer::tokenize(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex((sdapi::SdapiUtil *)a1);
  std::recursive_mutex::lock(SharedMutex);
  uint64_t v72 = 0;
  if (TPToken_Tokenize())
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v55 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Could not tokenize", 18);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v55);
    }
LABEL_7:
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  if (TPToken_GetResultInfo())
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v55 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Could not get info from tokenized result", 40);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v55);
    }
    goto LABEL_7;
  }
  memset(&__p, 0, sizeof(__p));
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  unsigned int v38 = v50;
  std::vector<TPTokenTrans>::resize((uint64_t)&v43, v50);
  unsigned int v39 = v51;
  std::vector<quasar::PreTokenToPostTokenItnMap>::resize((uint64_t)&v44 + 8, v51);
  unsigned int v40 = __sz_4;
  std::vector<int>::resize(&__p, __sz_4);
  unsigned int v41 = __sz;
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)&v47 + 8), __sz);
  unsigned int v42 = v52;
  if ((unint64_t)v52 <= *((void *)&v46 + 1) - (void)v46)
  {
    if ((unint64_t)v52 < *((void *)&v46 + 1) - (void)v46) {
      *((void *)&v46 + 1) = v46 + v52;
    }
  }
  else
  {
    std::vector<signed char>::__append((std::vector<char> *)&v46, v52 - (*((void *)&v46 + 1) - v46));
  }
  if (TPToken_GetResultData())
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v55 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Failed TPToken_GetResultData with error code : ", 47);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v55);
    }
LABEL_19:
    uint64_t v6 = 0;
    goto LABEL_20;
  }
  if (TPToken_DeleteResult())
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v55 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Failed TPToken_DeleteResult with error code : ", 46);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v55);
    }
    goto LABEL_19;
  }
  if (!v41)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v55 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"No starting states!", 19);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v55);
    }
    goto LABEL_19;
  }
  long long v35 = 0;
  unint64_t v36 = 0;
  char v34 = 0;
  uint64_t v8 = *((void *)&v44 + 1);
  if (!*(_DWORD *)(*((void *)&v44 + 1) + 12)) {
    goto LABEL_91;
  }
  do
  {
    uint64_t v9 = *(unsigned int *)(v8 + 8);
    uint64_t v10 = v43;
    uint64_t v11 = (char *)(v46 + *(unsigned int *)(v43 + 32 * v9));
    memset(&v32, 0, sizeof(v32));
    std::string::basic_string[abi:ne180100]<0>(v29, v11);
    int v12 = a1[8];
    SdapiAnnotatedText::SdapiAnnotatedText(&v55, v29);
    char v13 = BYTE7(v56);
    std::string::size_type v14 = *((void *)&v55 + 1);
    if ((SBYTE7(v56) & 0x80u) == 0) {
      size_t v15 = BYTE7(v56);
    }
    else {
      size_t v15 = *((void *)&v55 + 1);
    }
    if (!v15)
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "");
      goto LABEL_70;
    }
    uint64_t v16 = HIBYTE(v57);
    if (v57 < 0) {
      uint64_t v16 = v57;
    }
    if (v16)
    {
      std::string::basic_string[abi:ne180100]((uint64_t)&v73, v15 + 1);
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v17 = &v73;
      }
      else {
        float v17 = (std::string *)v73.__r_.__value_.__r.__words[0];
      }
      if ((SBYTE7(v56) & 0x80u) == 0) {
        float v18 = &v55;
      }
      else {
        float v18 = (long long *)v55;
      }
      memmove(v17, v18, v15);
      *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v15) = 92;
      if (v57 >= 0) {
        uint64_t v19 = (char *)&v56 + 8;
      }
      else {
        uint64_t v19 = (const std::string::value_type *)*((void *)&v56 + 1);
      }
      if (v57 >= 0) {
        std::string::size_type v20 = HIBYTE(v57);
      }
      else {
        std::string::size_type v20 = v57;
      }
      unint64_t v21 = std::string::append(&v73, v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (v12)
      {
        if ((SBYTE7(v59) & 0x80u) == 0) {
          uint64_t v23 = BYTE7(v59);
        }
        else {
          uint64_t v23 = *((void *)&v58 + 1);
        }
        uint64_t v24 = &v55;
        if (v23)
        {
          uint64_t v24 = &v58;
          char v13 = BYTE7(v59);
        }
        if ((v13 & 0x80) == 0)
        {
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *v24;
          std::string::size_type v25 = *((void *)v24 + 2);
LABEL_64:
          v31.__r_.__value_.__r.__words[2] = v25;
          goto LABEL_70;
        }
        if (v23) {
          std::string::size_type v14 = *((void *)&v58 + 1);
        }
      }
      else
      {
        if ((SBYTE7(v56) & 0x80000000) == 0)
        {
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v55;
          std::string::size_type v25 = v56;
          goto LABEL_64;
        }
        uint64_t v24 = &v55;
      }
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v24, v14);
    }
LABEL_70:
    if (SBYTE7(v59) < 0) {
      operator delete((void *)v58);
    }
    if (SHIBYTE(v57) < 0) {
      operator delete(*((void **)&v56 + 1));
    }
    if (SBYTE7(v56) < 0) {
      operator delete((void *)v55);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    std::string v32 = v31;
    *((unsigned char *)&v31.__r_.__value_.__s + 23) = 0;
    v31.__r_.__value_.__s.__data_[0] = 0;
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    int v33 = 0;
    long long v26 = v35;
    if ((unint64_t)v35 >= v36)
    {
      double v28 = (std::string *)std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>((uint64_t *)&v34, (long long *)&v32);
    }
    else
    {
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v35, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v27 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
        v35->__r_.__value_.__r.__words[2] = v32.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      }
      LODWORD(v26[1].__r_.__value_.__l.__data_) = v33;
      double v28 = (std::string *)((char *)v26 + 32);
    }
    long long v35 = v28;
    *(_OWORD *)uint64_t v8 = *(_OWORD *)(*((void *)&v44 + 1) + 16 * *(unsigned int *)(v10 + 32 * v9 + 8));
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
  }
  while (*(_DWORD *)(v8 + 12));
  if (v34 != v35)
  {
    int v37 = 0;
    std::vector<quasar::TextTokenizer::TokenString>::push_back[abi:ne180100](a3, (uint64_t)&v34);
  }
LABEL_91:
  *(void *)&long long v55 = &v34;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  uint64_t v6 = 1;
LABEL_20:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (*((void *)&v47 + 1))
  {
    *(void *)&long long v48 = *((void *)&v47 + 1);
    operator delete(*((void **)&v47 + 1));
  }
  if ((void)v46)
  {
    *((void *)&v46 + 1) = v46;
    operator delete((void *)v46);
  }
  if (*((void *)&v44 + 1))
  {
    *(void *)&long long v45 = *((void *)&v44 + 1);
    operator delete(*((void **)&v44 + 1));
  }
  if ((void)v43)
  {
    *((void *)&v43 + 1) = v43;
    operator delete((void *)v43);
  }
LABEL_8:
  std::recursive_mutex::unlock(SharedMutex);
  return v6;
}

void sub_1B1EB2330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a53);
  sdapi::SdapiTokenizer::TTokenizerResult::~TTokenizerResult((sdapi::SdapiTokenizer::TTokenizerResult *)&a32);
  std::recursive_mutex::unlock(v53);
  _Unwind_Resume(a1);
}

void std::vector<TPTokenTrans>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<TPTokenTrans>::__append((void **)a1, a2 - v2);
  }
}

uint64_t std::vector<quasar::TextTokenizer::TokenString>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<quasar::TextTokenizer::TokenString>::__push_back_slow_path<quasar::TextTokenizer::TokenString const&>(a1, a2);
  }
  else
  {
    std::vector<quasar::TextTokenizer::TokenString>::__construct_one_at_end[abi:ne180100]<quasar::TextTokenizer::TokenString const&>((uint64_t)a1, a2);
    uint64_t result = v3 + 32;
  }
  a1[1] = result;
  return result;
}

void sdapi::SdapiTokenizer::TTokenizerResult::~TTokenizerResult(sdapi::SdapiTokenizer::TTokenizerResult *this)
{
  unint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    *((void *)this + 4) = v6;
    operator delete(v6);
  }
}

void std::vector<TPTokenTrans>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  char v5 = v6;
  char v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v4, v12);
    }
    else {
      char v13 = 0;
    }
    std::string::size_type v14 = &v13[32 * v10];
    size_t v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    uint64_t v16 = &v14[32 * a2];
    float v18 = (char *)*a1;
    float v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      float v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t *kaldi::quasar::EspressoNDArray::EspressoNDArray(uint64_t *a1, long long *a2, int a3)
{
  uint64_t v4 = 0;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v5 = *a2;
  long long v6 = a2[2];
  *((_OWORD *)a1 + 1) = a2[1];
  *((_OWORD *)a1 + 2) = v6;
  *(_OWORD *)a1 = v5;
  long long v7 = a2[3];
  long long v8 = a2[4];
  long long v9 = a2[6];
  *((_OWORD *)a1 + 5) = a2[5];
  *((_OWORD *)a1 + 6) = v9;
  *((_OWORD *)a1 + 3) = v7;
  *((_OWORD *)a1 + 4) = v8;
  long long v10 = a2[7];
  long long v11 = a2[8];
  long long v12 = a2[9];
  a1[20] = *((void *)a2 + 20);
  *((_OWORD *)a1 + 8) = v11;
  *((_OWORD *)a1 + 9) = v12;
  *((_OWORD *)a1 + 7) = v10;
  a1[21] = 0;
  if (a3) {
    uint64_t v4 = *a1;
  }
  a1[22] = v4;
  int v13 = *((_DWORD *)a1 + 40);
  if (v13 != 65568)
  {
    if (v13)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v18, *((_DWORD *)a1 + 40));
      uint64_t v16 = std::string::insert(&v18, 0, "Unsupported storage type ");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v19.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v19);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *((_DWORD *)a1 + 40) = 65568;
  }
  espresso_buffer_unpack_tensor_shape();
  return a1;
}

void sub_1B1EB279C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::string::size_type v25 = *(void **)(v21 + 176);
      *(void *)(v21 + 176) = 0;
      if (v25) {
        free(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *kaldi::quasar::EspressoNDArray::InitBufferMemory(kaldi::quasar::EspressoNDArray *this, size_t count)
{
  *((void *)this + 20) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 40) = 65568;
  uint64_t result = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
  uint64_t v4 = (void *)*((void *)this + 22);
  *((void *)this + 22) = result;
  if (v4)
  {
    free(v4);
    uint64_t result = (void *)*((void *)this + 22);
  }
  *(void *)this = result;
  return result;
}

uint64_t kaldi::MelBanks::MelBanks(uint64_t a1, unsigned int *a2, uint64_t a3, float a4)
{
  long long v5 = (uint64_t *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 49) = *((unsigned char *)a2 + 21);
  unint64_t v6 = *a2;
  v75 = (uint64_t *)(a1 + 24);
  if ((int)v6 <= 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Must have at least 3 mel bins", 29);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v81);
  }
  if (*(float *)(a3 + 52) <= 0.0) {
    float v7 = *(float *)a3;
  }
  else {
    float v7 = *(float *)(a3 + 52);
  }
  double v8 = v7 * 0.001 * *(float *)(a3 + 8);
  uint64_t v9 = (int)v8;
  if (*(unsigned char *)(a3 + 48)) {
    uint64_t v9 = kaldi::RoundUpToNearestPowerOfTwo((kaldi *)(int)v8);
  }
  float v10 = v7 * 0.5;
  float v12 = *((float *)a2 + 1);
  float v11 = *((float *)a2 + 2);
  float v13 = -0.0;
  if (v11 <= 0.0) {
    float v13 = v7 * 0.5;
  }
  float v14 = v11 + v13;
  BOOL v15 = v12 >= 0.0 && v12 < v10;
  if (!v15 || (v14 > 0.0 ? (BOOL v16 = v14 <= v10) : (BOOL v16 = 0), v16 ? (v17 = v14 > v12) : (v17 = 0), !v17))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Bad values in options: low-freq ", 32);
    long long v64 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" and high-freq ", 15);
    long long v65 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" vs. nyquist ", 13);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v81);
  }
  float v18 = logf((float)(v12 / 700.0) + 1.0);
  float v73 = logf((float)(v14 / 700.0) + 1.0);
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 20);
  float v19 = *((float *)a2 + 3);
  float v20 = *((float *)a2 + 4);
  float v21 = -0.0;
  if (v20 < 0.0) {
    float v21 = v7 * 0.5;
  }
  float v78 = v20 + v21;
  float v79 = *((float *)a2 + 3);
  if (a4 != 1.0 && (v19 < 0.0 || v19 <= v12 || v19 >= v14 || v78 <= 0.0 || v78 >= v14 || v78 <= v19))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Bad values in options: vtln-low ", 32);
    long long v66 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" and vtln-high ", 15);
    long long v67 = (void *)std::ostream::operator<<();
    long long v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)", versus ", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"low-freq ", 9);
    long long v69 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" and high-freq ", 15);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v81);
  }
  float v22 = v18;
  float v77 = v14;
  std::vector<std::pair<int,kaldi::Vector<float>>>::resize(v5, v6);
  kaldi::Vector<float>::Resize((void **)a1, v6, 0);
  uint64_t v23 = 0;
  float v24 = v7 / (float)(int)v9;
  float v25 = v22 * 1127.0;
  float v26 = (float)(v73 * 1127.0) - v25;
  unsigned int v74 = (int)v9 >> 1;
  if ((int)v9 >> 1 <= 1) {
    uint64_t v27 = 1;
  }
  else {
    uint64_t v27 = ((int)v9 >> 1);
  }
  float v71 = v25;
  float v72 = v26 / (float)((int)v6 + 1);
  do
  {
    float v28 = v25 + (float)((float)(int)v23 * v72);
    uint64_t v29 = v23 + 1;
    float v30 = v25 + (float)((float)(v23 + 1) * v72);
    float v31 = v25 + (float)((float)(v23 + 2) * v72);
    if (a4 == 1.0)
    {
      float v41 = -1.0;
    }
    else
    {
      float v32 = expf(v28 / 1127.0);
      float v34 = kaldi::MelBanks::VtlnWarpFreq(v33, v79, v78, v12, v77, a4, (float)(v32 + -1.0) * 700.0);
      float v28 = logf((float)(v34 / 700.0) + 1.0) * 1127.0;
      float v35 = expf(v30 / 1127.0);
      float v37 = kaldi::MelBanks::VtlnWarpFreq(v36, v79, v78, v12, v77, a4, (float)(v35 + -1.0) * 700.0);
      float v30 = logf((float)(v37 / 700.0) + 1.0) * 1127.0;
      float v38 = expf(v31 / 1127.0);
      float v40 = kaldi::MelBanks::VtlnWarpFreq(v39, v79, v78, v12, v77, a4, (float)(v38 + -1.0) * 700.0);
      float v41 = -1.0;
      float v31 = logf((float)(v40 / 700.0) + 1.0) * 1127.0;
    }
    *(float *)(*(void *)a1 + 4 * v23) = (float)(expf(v30 / 1127.0) + v41) * 700.0;
    memset(v80, 0, sizeof(v80));
    kaldi::Vector<float>::Resize(v80, v74, 0);
    if ((int)v9 < 1) {
      goto LABEL_65;
    }
    uint64_t v42 = v9;
    uint64_t v43 = 0;
    int v44 = -1;
    long long v45 = (float *)v80[0];
    int v46 = -1;
    do
    {
      float v47 = logf((float)((float)(v24 * (float)(int)v43) / 700.0) + 1.0) * 1127.0;
      if (v47 > v28 && v47 < v31)
      {
        BOOL v16 = v47 > v30;
        float v49 = (float)(v31 - v47) / (float)(v31 - v30);
        float v50 = (float)(v47 - v28) / (float)(v30 - v28);
        if (v16) {
          float v50 = v49;
        }
        v45[v43] = v50;
        if (v46 == -1) {
          int v46 = v43;
        }
        int v44 = v43;
      }
      ++v43;
    }
    while (v27 != v43);
    if (v46 == -1 || (int v51 = v44 - v46, v44 < v46))
    {
LABEL_65:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Invalid indexing. You may have set --num-mel-bins too large.", 60);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v81);
    }
    uint64_t v52 = *v75 + 32 * v23;
    *(_DWORD *)uint64_t v52 = v46;
    int v53 = v51 + 1;
    kaldi::Vector<float>::Resize((void **)(v52 + 8), (v51 + 1), 0);
    uint64_t v54 = *v75;
    int v83 = 0;
    uint64_t v84 = 0;
    uint64_t v81 = (char *)v80[0] + 4 * v46;
    int v82 = v53;
    kaldi::VectorBase<float>::CopyFromVec(v54 + 32 * v23 + 8, (const void **)&v81);
    float v25 = v71;
    uint64_t v9 = v42;
    if (v71 != 0.0 && !v23 && *((unsigned char *)a2 + 21)) {
      **(_DWORD **)(*v75 + 8) = 0;
    }
    kaldi::Vector<float>::Destroy((uint64_t)v80);
    ++v23;
  }
  while (v29 != v6);
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v56 = *(void *)(a1 + 24);
    uint64_t v55 = *(void *)(a1 + 32);
    if (v55 != v56)
    {
      uint64_t v57 = 0;
      unint64_t v58 = 0;
      int v59 = kaldi::g_kaldi_verbose_level;
      do
      {
        if ((v59 & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"bin ", 4);
          long long v60 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)", offset = ", 11);
          long long v61 = (void *)std::ostream::operator<<();
          long long v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", vec = ", 8);
          kaldi::VectorBase<float>::Write(*v75 + v57 + 8, v62, 0);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v81);
          int v59 = kaldi::g_kaldi_verbose_level;
          uint64_t v56 = *(void *)(a1 + 24);
          uint64_t v55 = *(void *)(a1 + 32);
        }
        ++v58;
        v57 += 32;
      }
      while (v58 < (v55 - v56) >> 5);
    }
  }
  return a1;
}

void sub_1B1EB2F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  JUMPOUT(0x1B1EB2F8CLL);
}

float kaldi::MelBanks::VtlnWarpFreq(kaldi::MelBanks *this, float a2, float a3, float a4, float a5, float a6, float a7)
{
  if (a7 < a4 || a7 > a5) {
    return a7;
  }
  float v8 = fmaxf(a6, 1.0) * a2;
  float v9 = 1.0 / a6;
  if (v8 > a7) {
    return a4 + (float)((float)((float)((float)(v9 * v8) - a4) / (float)(v8 - a4)) * (float)(a7 - a4));
  }
  float v11 = fminf(a6, 1.0) * a3;
  if (v11 > a7) {
    return v9 * a7;
  }
  return a5 + (float)((float)((float)(a5 - (float)(v9 * v11)) / (float)(a5 - v11)) * (float)(a7 - a5));
}

void kaldi::MelBanks::Compute(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  unint64_t v7 = v6 >> 5;
  if (*(_DWORD *)(a3 + 8) != (v6 >> 5)) {
    kaldi::Vector<float>::Resize((void **)a3, v6 >> 5, 0);
  }
  uint64_t v8 = (v6 >> 5);
  if ((int)v7 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 16;
    do
    {
      float v11 = (_DWORD *)(*(void *)(a1 + 24) + v10);
      uint64_t v12 = (int)*(v11 - 4);
      uint64_t v13 = (uint64_t)(v11 - 2);
      LODWORD(v11) = *v11;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      float v18 = (const float *)(*a2 + 4 * v12);
      LODWORD(v19) = v11;
      float v14 = kaldi::VecVec<float>(v13, &v18);
      if (v14 < 1.0 && *(unsigned char *)(a1 + 49) != 0) {
        float v14 = 1.0;
      }
      *(float *)(*(void *)a3 + 4 * v9++) = v14;
      v10 += 32;
    }
    while (v8 != v9);
  }
  if (*(unsigned char *)(a1 + 48))
  {
    BOOL v16 = (FILE **)MEMORY[0x1E4F143C8];
    fwrite("MEL BANKS:\n", 0xBuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    if ((int)v7 >= 1)
    {
      uint64_t v17 = 0;
      do
        fprintf(*v16, " %f", *(float *)(*(void *)a3 + 4 * v17++));
      while (v8 != v17);
    }
    fputc(10, *v16);
  }
}

__n128 kaldi::ComputeLifterCoeffs(uint64_t *a1, __n128 result)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    float64x2_t v22 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
    uint64x2_t v23 = (uint64x2_t)vdupq_n_s64(v2 - 1);
    int64x2_t v21 = vdupq_n_s64(2uLL);
    uint64x2_t v4 = (uint64x2_t)xmmword_1B255FA20;
    *(double *)&uint64_t v5 = result.n128_f32[0];
    uint64_t v6 = *a1;
    uint64_t v7 = (v2 + 1) & 0x1FFFFFFFELL;
    float64x2_t v19 = (float64x2_t)vdupq_lane_s64(v5, 0);
    float64x2_t v20 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&v5 * 0.5), 0);
    __asm { FMOV            V0.2D, #1.0 }
    float64x2_t v18 = _Q0;
    do
    {
      int32x2_t v26 = vmovn_s64((int64x2_t)vcgeq_u64(v23, v4));
      int64x2_t v27 = (int64x2_t)v4;
      v13.i64[0] = (int)v3;
      v13.i64[1] = (int)v3 + 1;
      float64x2_t __x = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v13), v22), v19);
      long double v25 = sin(__x.f64[1]);
      v14.f64[0] = sin(__x.f64[0]);
      v14.f64[1] = v25;
      float64x2_t v15 = vmlaq_f64(v18, v14, v20);
      if (v26.i8[0])
      {
        float v16 = v15.f64[0];
        *(float *)(v6 + 4 * v3) = v16;
      }
      if (v26.i8[4])
      {
        float v17 = v15.f64[1];
        *(float *)(v6 + 4 * v3 + 4) = v17;
      }
      v3 += 2;
      uint64_t result = (__n128)v21;
      uint64x2_t v4 = (uint64x2_t)vaddq_s64(v27, v21);
    }
    while (v7 != v3);
  }
  return result;
}

void *quasar::MergerOptions::options@<X0>(quasar::MergerOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64x2_t v4 = operator new(8uLL);
  *a2 = v4;
  *uint64x2_t v4 = (char *)this + 16;
  uint64_t result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

void quasar::MergerBlock::process(void *a1, uint64_t a2, uint64_t a3)
{
}

void virtual thunk to'quasar::MergerBlock::process(void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t quasar::MergerBlock::init(quasar::MergerBlock *this)
{
  uint64_t v1 = (void *)((char *)this + 24);
  uint64_t result = quasar::OptionValue<std::string>::value((void *)this + 3);
  int v3 = *(char *)(result + 23);
  if (v3 < 0)
  {
    if (*(void *)(result + 8) != 3) {
      goto LABEL_12;
    }
    uint64_t result = *(void *)result;
  }
  else if (v3 != 3)
  {
    goto LABEL_12;
  }
  if (*(_WORD *)result != 28257 || *(unsigned char *)(result + 2) != 121)
  {
LABEL_12:
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Unsupported merge-style: ", 25);
    uint64_t v6 = quasar::OptionValue<std::string>::value(v1);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, v6);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  return result;
}

uint64_t virtual thunk to'quasar::MergerBlock::init(quasar::MergerBlock *this)
{
  return quasar::MergerBlock::init((quasar::MergerBlock *)((char *)this + *(void *)(*(void *)this - 88)));
}

uint64_t quasar::MergerBlock::minConfigVersion(quasar::MergerBlock *this)
{
  return 131;
}

uint64_t virtual thunk to'quasar::MergerBlock::minConfigVersion(quasar::MergerBlock *this)
{
  return 131;
}

void quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  int v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64x2_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v8 = *a2;
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64x2_t v4 = v10;
  }
  if (v4)
  {
    float v11 = v4;
    operator delete(v4);
  }
}

void sub_1B1EB3564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::MergerBlock::~MergerBlock(quasar::MergerBlock *this)
{
  uint64_t v1 = quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::~ConfiguredProcessingBlock((uint64_t)this, (uint64_t *)&off_1F0A32618);
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 184));
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::~ConfiguredProcessingBlock((uint64_t)this, (uint64_t *)&off_1F0A32618);
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 184));
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::MergerBlock::blockType(quasar::MergerBlock *this)
{
  return "MergerBlock";
}

void virtual thunk to'quasar::MergerBlock::~MergerBlock(quasar::MergerBlock *this)
{
  uint64_t v1 = (char **)(quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::~ConfiguredProcessingBlock((uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t *)&off_1F0A32618)+ 184);
  quasar::ProcessingBlock::~ProcessingBlock(v1);
}

{
  char **v1;
  uint64_t vars8;

  uint64_t v1 = (char **)((char *)this + *(void *)(*(void *)this - 24));
  quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::~ConfiguredProcessingBlock((uint64_t)v1, (uint64_t *)&off_1F0A32618);
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 23);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::MergerBlock::blockType(quasar::MergerBlock *this)
{
  return "MergerBlock";
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::MergerOptions>::~ConfiguredProcessingBlock(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 24)) = a2[1];
  *(void *)(a1 + 8) = &unk_1F0A524A8;
  *(void *)(a1 + 24) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 160, *(void **)(a1 + 168));
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  *(void *)(a1 + 24) = &unk_1F0A52FB8;
  uint64x2_t v4 = *(std::__shared_weak_count **)(a1 + 120);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void fst::quasar::MergeTrieFstImpl::MergeTrieFstImpl(uint64_t a1, uint64_t a2, int a3, int a4, long long *a5)
{
  *(void *)a1 = &unk_1F0A3FAA8;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a5, *((void *)a5 + 1));
    a3 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    long long v7 = *a5;
    *(void *)(a1 + 32) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 16) = v7;
  }
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if (a3 >= 1)
  {
    int v8 = *(_DWORD *)(a1 + 12);
    if (v8 >= 1 && a3 <= v8)
    {
      uint64_t v9 = *(void **)a2;
      if (*(void *)a2 != *(void *)(a2 + 8))
      {
        if (*v9 && ((*(uint64_t (**)(void))(*(void *)*v9 + 24))(*v9) & 0x80000000) == 0)
        {
          uint64_t v10 = *v9;
          uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*v9 + 24))(*v9);
          if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11)) {
            operator new();
          }
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"FstNonNullAndHasArcs(fst)", 25);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v12);
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"!fsts.empty()", 13);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v12);
    }
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"disambig_sym_start_ > 0 && disambig_sym_end_ > 0 && disambig_sym_start_ <= disambig_sym_end_", 92);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v12);
}

uint64_t fst::quasar::GetWordsAndCosts(uint64_t a1, uint64_t **a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  unint64_t v46 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v5, v44);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v42 = 0;
  long long v7 = operator new(0xCuLL);
  int v8 = (char *)(v7 + 3);
  float v41 = (char *)v7;
  uint64_t v43 = (char *)(v7 + 3);
  *long long v7 = v6;
  *(void *)(v7 + 1) = 0;
  uint64_t v9 = a2 + 1;
  do
  {
    unsigned int v11 = *((_DWORD *)v8 - 3);
    uint64_t v10 = v8 - 12;
    float v12 = *((float *)v10 + 1);
    int v13 = *((_DWORD *)v10 + 2);
    uint64_t v42 = v10;
    fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v44, a1, v11);
    while (v44[0])
    {
      if ((*(uint64_t (**)(void))(*(void *)v44[0] + 24))(v44[0])) {
        goto LABEL_42;
      }
      if (v44[0])
      {
        uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v44[0] + 32))(v44[0]);
        goto LABEL_10;
      }
LABEL_9:
      uint64_t v14 = v44[1] + 16 * v46;
LABEL_10:
      float v15 = *(float *)(v14 + 8);
      int v16 = *(_DWORD *)(v14 + 4);
      if (!v16) {
        int v16 = v13;
      }
      int v40 = v16;
      float v17 = (*(float (**)(uint64_t, void))(*(void *)a1 + 32))(a1, *(unsigned int *)(v14 + 12));
      float v18 = v12 + v15;
      if (v17 == INFINITY)
      {
        long double v25 = v42;
        if (v42 >= v43)
        {
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 2);
          unint64_t v29 = v28 + 1;
          if (v28 + 1 > 0x1555555555555555) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((v43 - v41) >> 2) > v29) {
            unint64_t v29 = 0x5555555555555556 * ((v43 - v41) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v43 - v41) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v30 = 0x1555555555555555;
          }
          else {
            unint64_t v30 = v29;
          }
          float v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v43, v30);
          int v33 = &v31[12 * v28];
          int v34 = v40;
          *(_DWORD *)int v33 = *(_DWORD *)(v14 + 12);
          *((float *)v33 + 1) = v18;
          *((_DWORD *)v33 + 2) = v34;
          unint64_t v36 = v41;
          float v35 = v42;
          float v37 = v33;
          if (v42 != v41)
          {
            do
            {
              uint64_t v38 = *(void *)(v35 - 12);
              v35 -= 12;
              int v39 = *((_DWORD *)v35 + 2);
              *(void *)(v37 - 12) = v38;
              v37 -= 12;
              *((_DWORD *)v37 + 2) = v39;
            }
            while (v35 != v36);
            float v35 = v41;
          }
          int64x2_t v27 = v33 + 12;
          float v41 = v37;
          uint64_t v42 = v33 + 12;
          uint64_t v43 = &v31[12 * v32];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          int v26 = v40;
          *(_DWORD *)uint64_t v42 = *(_DWORD *)(v14 + 12);
          *((float *)v25 + 1) = v18;
          *((_DWORD *)v25 + 2) = v26;
          int64x2_t v27 = v25 + 12;
        }
        uint64_t v42 = v27;
      }
      else
      {
        float v19 = v18 + v17;
        float64x2_t v20 = *v9;
        if (!*v9) {
          goto LABEL_24;
        }
        int64x2_t v21 = a2 + 1;
        do
        {
          int v22 = *((_DWORD *)v20 + 7);
          BOOL v23 = v22 < v40;
          if (v22 >= v40) {
            float v24 = v20;
          }
          else {
            float v24 = v20 + 1;
          }
          if (!v23) {
            int64x2_t v21 = (uint64_t **)v20;
          }
          float64x2_t v20 = (uint64_t *)*v24;
        }
        while (*v24);
        if (v21 == v9 || v40 < *((_DWORD *)v21 + 7) || v19 < *((float *)v21 + 8))
        {
LABEL_24:
          float v47 = (unsigned int *)&v40;
          *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a2, &v40, (uint64_t)&std::piecewise_construct, &v47)+ 8) = v19;
        }
      }
      if (v44[0]) {
        (*(void (**)(void))(*(void *)v44[0] + 40))(v44[0]);
      }
      else {
        ++v46;
      }
    }
    if (v46 < v44[2]) {
      goto LABEL_9;
    }
LABEL_42:
    int v8 = v42;
  }
  while (v41 != v42);
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  uint64_t result = v44[0];
  if (v44[0]) {
    return (*(uint64_t (**)(void))(*(void *)v44[0] + 8))(v44[0]);
  }
  if (v45) {
    --*v45;
  }
  return result;
}

void sub_1B1EB4668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::quasar::BuildUnigramFst(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
  if (a1[2])
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v5);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
    (*(void (**)(uint64_t, uint64_t, double))(*(void *)a2 + 184))(a2, v6, 0.0);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a2 + 256))(a2, v5, a1[2]);
    uint64_t v9 = (void *)*a1;
    long long v7 = a1 + 1;
    int v8 = v9;
    if (v9 != v7)
    {
      do
      {
        int v10 = *((_DWORD *)v8 + 8);
        v14[0] = *((_DWORD *)v8 + 7);
        v14[1] = v14[0];
        v14[2] = v10;
        v14[3] = v6;
        (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 208))(a2, v5, v14);
        unsigned int v11 = (void *)v8[1];
        if (v11)
        {
          do
          {
            float v12 = v11;
            unsigned int v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            float v12 = (void *)v8[2];
            BOOL v13 = *v12 == (void)v8;
            int v8 = v12;
          }
          while (!v13);
        }
        int v8 = v12;
      }
      while (v12 != v7);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 0x5685A950000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::quasar::MergeTrieFstImpl::~MergeTrieFstImpl(fst::quasar::MergeTrieFstImpl *this)
{
  *(void *)this = &unk_1F0A3FAA8;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"MergeTrieFst[", 13);
    int v3 = *((char *)this + 39);
    if (v3 >= 0) {
      uint64x2_t v4 = (char *)this + 16;
    }
    else {
      uint64x2_t v4 = (char *)*((void *)this + 2);
    }
    if (v3 >= 0) {
      uint64_t v5 = *((unsigned __int8 *)this + 39);
    }
    else {
      uint64_t v5 = *((void *)this + 3);
    }
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
    long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"]:", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" num_states ", 12);
    int v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" num_states_expanded ", 21);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" num_arcs ", 10);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v11);
  }
  int v10 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  v11[0] = (void **)((char *)this + 72);
  std::vector<std::unique_ptr<fst::quasar::State>>::__destroy_vector::operator()[abi:ne180100](v11);
  v11[0] = (void **)((char *)this + 48);
  std::vector<std::unique_ptr<fst::quasar::FstData>>::__destroy_vector::operator()[abi:ne180100](v11);
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  fst::quasar::MergeTrieFstImpl::~MergeTrieFstImpl(this);
  JUMPOUT(0x1B3EA8670);
}

void fst::quasar::MergeTrieFstImpl::ExpandAll(fst::quasar::MergeTrieFstImpl *this)
{
  if (*((void *)this + 10) != *((void *)this + 9))
  {
    unint64_t v2 = 0;
    do
      fst::quasar::MergeTrieFstImpl::Expand(this, v2++);
    while (v2 < (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 3);
  }
}

void fst::quasar::MergeTrieFstImpl::Expand(fst::quasar::MergeTrieFstImpl *this, int a2)
{
  uint64_t v2 = *((void *)this + 9);
  if (a2 >= (unint64_t)((*((void *)this + 10) - v2) >> 3)) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v3 = *(void *)(v2 + 8 * a2);
  if (!*(unsigned char *)(v3 + 48))
  {
    *(unsigned char *)(v3 + 48) = 1;
    ++*((_DWORD *)this + 24);
    v165 = 0;
    v166 = 0;
    v167[0] = 0;
    uint64_t v5 = *(uint64_t ****)v3;
    unint64_t v150 = (void *)v3;
    v155 = *(uint64_t ****)(v3 + 8);
    if (*(uint64_t ****)v3 != v155)
    {
      while (1)
      {
        uint64_t v6 = *v5;
        uint64_t v7 = *((unsigned int *)*v5 + 2);
        if (v7 != -2) {
          break;
        }
        int v8 = *((_DWORD *)this + 2);
        if (!v8)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v164);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v164, (uint64_t)"sub_arc.ilabel != 0", 19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v164);
        }
        int v10 = *((_DWORD *)v6 + 3);
        int v9 = *((_DWORD *)v6 + 4);
        unsigned int v11 = v166;
        if ((unint64_t)v166 >= v167[0])
        {
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (v166 - v165);
          unint64_t v39 = v38 + 1;
          if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v167[0] - (void)v165) >> 3) > v39) {
            unint64_t v39 = 0x5555555555555556 * ((uint64_t)(v167[0] - (void)v165) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v167[0] - (void)v165) >> 3) >= 0x555555555555555) {
            unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v40 = v39;
          }
          float v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v167, v40);
          uint64_t v43 = &v41[8 * (v166 - v165)];
          *(void *)uint64_t v43 = v6;
          *((_DWORD *)v43 + 2) = v8;
          *((_DWORD *)v43 + 3) = v10;
          *((_DWORD *)v43 + 4) = v9;
          *((_DWORD *)v43 + 5) = -3;
          long long v45 = v165;
          int v44 = v166;
          unint64_t v46 = &v41[24 * v38];
          if (v166 != v165)
          {
            do
            {
              long long v47 = *(_OWORD *)(v44 - 3);
              *((void *)v46 - 1) = *(v44 - 1);
              *(_OWORD *)(v46 - 24) = v47;
              v46 -= 24;
              v44 -= 3;
            }
            while (v44 != v45);
            int v44 = v165;
          }
          float v12 = (uint64_t ***)(v43 + 24);
          v165 = (uint64_t ***)v46;
          v166 = (uint64_t ***)(v43 + 24);
          v167[0] = &v41[24 * v42];
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          void *v166 = v6;
          *((_DWORD *)v11 + 2) = v8;
          *((_DWORD *)v11 + 3) = v10;
          float v12 = v11 + 3;
          *((_DWORD *)v11 + 4) = v9;
          *((_DWORD *)v11 + 5) = -3;
        }
        v166 = v12;
LABEL_57:
        if (++v5 == v155)
        {
          long long v48 = v165;
          unint64_t v49 = (unint64_t)v166;
          goto LABEL_60;
        }
      }
      BOOL v13 = *v6;
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit((void *)(*v6)[2], **v6, v7);
      while (1)
      {
        uint64_t v14 = (void *)v13[2];
        if (!*v14) {
          break;
        }
        if ((*(uint64_t (**)(void))(*(void *)*v14 + 24))(*v14)) {
          goto LABEL_57;
        }
        uint64_t v14 = (void *)v13[2];
        if (!*v14) {
          goto LABEL_14;
        }
        uint64_t v15 = (*(uint64_t (**)(void))(*(void *)*v14 + 32))(*v14);
LABEL_15:
        int v16 = *(_DWORD *)v15;
        if (*((_DWORD *)this + 2) <= *(_DWORD *)v15 && *((_DWORD *)this + 3) >= v16) {
          int v16 = *((_DWORD *)this + 2);
        }
        int v17 = *(_DWORD *)(v15 + 4);
        float v18 = *v5;
        if (!v17) {
          int v17 = *((_DWORD *)v18 + 3);
        }
        float v19 = *((float *)v18 + 4);
        float v20 = NAN;
        if (v19 != -INFINITY)
        {
          float v21 = *(float *)(v15 + 8);
          float v20 = NAN;
          if (v21 != -INFINITY)
          {
            BOOL v22 = v21 == INFINITY || v19 == INFINITY;
            float v23 = v19 + v21;
            if (v22) {
              float v20 = INFINITY;
            }
            else {
              float v20 = v23;
            }
          }
        }
        if (!v16)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v164);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v164, (uint64_t)"sub_arc.ilabel != 0", 19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v164);
        }
        int v24 = *(_DWORD *)(v15 + 12);
        long double v25 = v166;
        if ((unint64_t)v166 >= v167[0])
        {
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (v166 - v165);
          unint64_t v28 = v27 + 1;
          if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v167[0] - (void)v165) >> 3) > v28) {
            unint64_t v28 = 0x5555555555555556 * ((uint64_t)(v167[0] - (void)v165) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v167[0] - (void)v165) >> 3) >= 0x555555555555555) {
            unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v29 = v28;
          }
          unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v167, v29);
          uint64_t v32 = &v30[8 * (v166 - v165)];
          *(void *)uint64_t v32 = v18;
          *((_DWORD *)v32 + 2) = v16;
          *((_DWORD *)v32 + 3) = v17;
          *((float *)v32 + 4) = v20;
          *((_DWORD *)v32 + 5) = v24;
          int v34 = v165;
          int v33 = v166;
          float v35 = &v30[24 * v27];
          if (v166 != v165)
          {
            do
            {
              long long v36 = *(_OWORD *)(v33 - 3);
              *((void *)v35 - 1) = *(v33 - 1);
              *(_OWORD *)(v35 - 24) = v36;
              v35 -= 24;
              v33 -= 3;
            }
            while (v33 != v34);
            int v33 = v165;
          }
          int v26 = (uint64_t ***)(v32 + 24);
          v165 = (uint64_t ***)v35;
          v166 = (uint64_t ***)(v32 + 24);
          v167[0] = &v30[24 * v31];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          void *v166 = v18;
          *((_DWORD *)v25 + 2) = v16;
          *((_DWORD *)v25 + 3) = v17;
          *((float *)v25 + 4) = v20;
          int v26 = v25 + 3;
          *((_DWORD *)v25 + 5) = v24;
        }
        v166 = v26;
        float v37 = (void *)v13[2];
        if (*v37) {
          (*(void (**)(void))(*(void *)*v37 + 40))(*v37);
        }
        else {
          ++v37[4];
        }
      }
      if (v14[4] >= v14[2]) {
        goto LABEL_57;
      }
LABEL_14:
      uint64_t v15 = v14[1] + 16 * v14[4];
      goto LABEL_15;
    }
    unint64_t v49 = 0;
    long long v48 = 0;
LABEL_60:
    unint64_t v50 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (void)v48) >> 3));
    if ((uint64_t ***)v49 == v48) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = v50;
    }
    std::__introsort<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,false>((unint64_t)v48, v49, v51, 1);
    uint64_t v161 = 0;
    unint64_t v162 = 0;
    v163 = 0;
    uint64_t v52 = v165;
    int v53 = v166;
    if (v166 == v165)
    {
      uint64_t v54 = 0;
      uint64_t v52 = v166;
      if (!v166) {
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v54 = 0;
      unint64_t v55 = 0;
      int v56 = 0;
      do
      {
        uint64_t v57 = &v52[3 * v55];
        int v58 = *((_DWORD *)v57 + 2);
        if (v58 != *((_DWORD *)this + 2)
          || (int v59 = v58 + v56, *((_DWORD *)v57 + 2) = v59, ++v56, v59 <= *((_DWORD *)this + 3)))
        {
          if (v54 >= v163)
          {
            unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((v54 - (unsigned char *)v161) >> 3);
            unint64_t v62 = v61 + 1;
            if (v61 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((v163 - (unsigned char *)v161) >> 3) > v62) {
              unint64_t v62 = 0x5555555555555556 * ((v163 - (unsigned char *)v161) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v163 - (unsigned char *)v161) >> 3) >= 0x555555555555555) {
              unint64_t v63 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v63 = v62;
            }
            if (v63) {
              long long v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v163, v63);
            }
            else {
              long long v64 = 0;
            }
            long long v65 = &v64[24 * v61];
            long long v66 = *(_OWORD *)v57;
            *((void *)v65 + 2) = v57[2];
            *(_OWORD *)long long v65 = v66;
            long long v68 = (char *)v161;
            long long v67 = v162;
            long long v69 = v65;
            if (v162 != v161)
            {
              do
              {
                long long v70 = *(_OWORD *)(v67 - 24);
                *((void *)v69 - 1) = *((void *)v67 - 1);
                *(_OWORD *)(v69 - 24) = v70;
                v69 -= 24;
                v67 -= 24;
              }
              while (v67 != v68);
              long long v67 = (char *)v161;
            }
            uint64_t v54 = v65 + 24;
            uint64_t v161 = v69;
            unint64_t v162 = v65 + 24;
            v163 = &v64[24 * v63];
            if (v67) {
              operator delete(v67);
            }
          }
          else
          {
            long long v60 = *(_OWORD *)v57;
            *((void *)v54 + 2) = v57[2];
            *(_OWORD *)uint64_t v54 = v60;
            v54 += 24;
          }
          unint64_t v162 = v54;
          uint64_t v52 = v165;
          int v53 = v166;
        }
        ++v55;
      }
      while (0xAAAAAAAAAAAAAAABLL * (v53 - v52) > v55);
      if (!v52) {
        goto LABEL_87;
      }
    }
    v166 = v52;
    operator delete(v52);
    uint64_t v54 = v162;
LABEL_87:
    float v71 = (char *)v161;
    v165 = (uint64_t ***)v161;
    v166 = (uint64_t ***)v54;
    v167[0] = v163;
    unint64_t v162 = 0;
    v163 = 0;
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    std::vector<unsigned int> __p = 0;
    v159 = 0;
    if (v54 != v71)
    {
      v151 = 0;
      float v72 = 0;
      uint64_t v73 = 0;
      unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((v54 - v71) >> 3);
      do
      {
        v75 = &v71[24 * v73 + 8];
        if (!v73) {
          goto LABEL_94;
        }
        int v76 = *(_DWORD *)v75;
        int v77 = *(_DWORD *)&v71[24 * v73 - 16];
        if (*(_DWORD *)v75 <= v77 && (v76 != v77 || *(float *)&v71[24 * v73 + 16] < *(float *)&v71[24 * v73 - 8]))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v164);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v164, (uint64_t)"!prev_arc || (current_arc->ilabel > prev_arc->ilabel) || (current_arc->ilabel == prev_arc->ilabel && current_arc->weight.Value() >= prev_arc->weight.Value())", 157);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v164);
        }
        if (v77 != v76)
        {
LABEL_94:
          if (v72 >= v160)
          {
            uint64_t v79 = (v72 - (char *)__p) >> 3;
            unint64_t v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v81 = v160 - (char *)__p;
            if ((v160 - (char *)__p) >> 2 > v80) {
              unint64_t v80 = v81 >> 2;
            }
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v82 = v80;
            }
            int v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v160, v82);
            v85 = &v83[8 * v79];
            *(_DWORD *)v85 = v73;
            *((_DWORD *)v85 + 1) = -1;
            long long v86 = v159;
            long long v87 = v85;
            if (v159 != __p)
            {
              do
              {
                uint64_t v88 = *((void *)v86 - 1);
                v86 -= 2;
                *((void *)v87 - 1) = v88;
                v87 -= 8;
              }
              while (v86 != __p);
              long long v86 = __p;
            }
            float v78 = v85 + 8;
            std::vector<unsigned int> __p = (int *)v87;
            uint64_t v160 = &v83[8 * v84];
            if (v86)
            {
              uint64_t v89 = v78;
              operator delete(v86);
              float v78 = v89;
            }
          }
          else
          {
            *(_DWORD *)float v72 = v73;
            *((_DWORD *)v72 + 1) = -1;
            float v78 = v72 + 8;
          }
          v159 = v78;
          v151 = v78;
          float v72 = (char *)v78;
        }
        unint64_t v90 = v73 + 1;
        uint64_t v91 = (v73 + 1);
        if (v74 == v91 || *(_DWORD *)&v71[24 * v91 + 8] != *(_DWORD *)v75)
        {
          float v72 = (char *)v151;
          *(v151 - 1) = v73;
        }
        float v71 = (char *)v165;
        unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * (v166 - v165);
        ++v73;
      }
      while (v74 > v90);
      long long v92 = __p;
      uint64_t v93 = v151;
      if (__p != v151)
      {
        uint64_t v152 = (uint64_t)(v150 + 5);
        v153 = (char **)(v150 + 3);
        int v94 = -1;
        do
        {
          int v95 = v92[1];
          uint64_t v96 = *v92;
          if (v95 < (int)v96)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v164);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v164, (uint64_t)"group_size > 0", 14);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v164);
          }
          v156 = (int *)&v165[3 * (int)v96 + 1];
          int v97 = *v156;
          if (*((_DWORD *)this + 2) <= *v156)
          {
            BOOL v157 = v95 != v96;
            BOOL v98 = v95 == v96 || *((_DWORD *)this + 3) < v97;
            if (!v98)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v164);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v164, (uint64_t)"!IsDisambigSym(first_sub_arc.ilabel) || (group_size == 1)", 57);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v164);
            }
          }
          else
          {
            BOOL v157 = v95 != v96;
          }
          if (v97 <= v94)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v164);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v164, (uint64_t)"first_sub_arc.ilabel > prev_group_ilabel", 40);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v164);
          }
          v154 = (char *)&v165[3 * (int)v96 + 2];
          do
          {
            uint64_t v99 = v165;
            long long v100 = (char *)&v165[3 * v96];
            int v102 = *((_DWORD *)v100 + 2);
            uint64_t v101 = v100 + 8;
            if (v102 != *v156)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v164);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v164, (uint64_t)"sub_arc.ilabel == first_sub_arc.ilabel", 38);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v164);
            }
            float v103 = 0.0;
            if (HIDWORD(v165[3 * v96 + 2]) != -3)
            {
              float v103 = (*(float (**)(void, double))(*(void *)**v165[3 * v96] + 32))(**v165[3 * v96], 0.0);
              *(float *)&uint64_t v164 = v103;
              if (v103 == INFINITY)
              {
                if (v157) {
                  int v124 = 0;
                }
                else {
                  int v124 = HIDWORD(v99[3 * v96 + 1]);
                }
                unint64_t v125 = *((void *)this + 10) - *((void *)this + 9);
                unint64_t v126 = (_DWORD *)v150[4];
                unint64_t v127 = v150[5];
                if ((unint64_t)v126 >= v127)
                {
                  uint64_t v140 = ((char *)v126 - *v153) >> 4;
                  unint64_t v141 = v140 + 1;
                  if ((unint64_t)(v140 + 1) >> 60) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v142 = v127 - (void)*v153;
                  if (v142 >> 3 > v141) {
                    unint64_t v141 = v142 >> 3;
                  }
                  if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v143 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v143 = v141;
                  }
                  v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v152, v143);
                  v146 = &v144[16 * v140];
                  *(_DWORD *)v146 = *v101;
                  *((_DWORD *)v146 + 1) = v124;
                  *((_DWORD *)v146 + 2) = *(_DWORD *)v154;
                  *((_DWORD *)v146 + 3) = v125 >> 3;
                  unint64_t v148 = (char *)v150[3];
                  unint64_t v147 = (char *)v150[4];
                  unint64_t v149 = v146;
                  if (v147 != v148)
                  {
                    do
                    {
                      *((_OWORD *)v149 - 1) = *((_OWORD *)v147 - 1);
                      v149 -= 16;
                      v147 -= 16;
                    }
                    while (v147 != v148);
                    unint64_t v147 = *v153;
                  }
                  v129 = v150;
                  unint64_t v128 = v146 + 16;
                  v150[3] = v149;
                  v150[4] = v146 + 16;
                  v150[5] = &v144[16 * v145];
                  if (v147) {
                    operator delete(v147);
                  }
                }
                else
                {
                  *unint64_t v126 = *v101;
                  v126[1] = v124;
                  v126[2] = *(_DWORD *)v154;
                  v126[3] = v125 >> 3;
                  unint64_t v128 = v126 + 4;
                  v129 = v150;
                }
                v129[4] = v128;
                ++*((_DWORD *)this + 25);
                operator new();
              }
            }
            *(float *)&uint64_t v164 = v103;
            if (v103 != 0.0)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v164);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v164, (uint64_t)"sub_arc_nextstate_final == Weight::One()", 40);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v164);
            }
            if (v157)
            {
              unint64_t v104 = *((void *)this + 10) - *((void *)this + 9);
              float v105 = (_DWORD *)v150[4];
              unint64_t v106 = v150[5];
              if ((unint64_t)v105 >= v106)
              {
                uint64_t v130 = ((char *)v105 - *v153) >> 4;
                unint64_t v131 = v130 + 1;
                if ((unint64_t)(v130 + 1) >> 60) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v132 = v106 - (void)*v153;
                if (v132 >> 3 > v131) {
                  unint64_t v131 = v132 >> 3;
                }
                if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v133 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v133 = v131;
                }
                v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v152, v133);
                long long v136 = &v134[16 * v130];
                *(_DWORD *)long long v136 = *v101;
                *((_DWORD *)v136 + 1) = 0;
                *((_DWORD *)v136 + 2) = *(_DWORD *)v154;
                *((_DWORD *)v136 + 3) = v104 >> 3;
                float v138 = (char *)v150[3];
                uint64_t v137 = (char *)v150[4];
                float v139 = v136;
                if (v137 != v138)
                {
                  do
                  {
                    *((_OWORD *)v139 - 1) = *((_OWORD *)v137 - 1);
                    v139 -= 16;
                    v137 -= 16;
                  }
                  while (v137 != v138);
                  uint64_t v137 = *v153;
                }
                v107 = v136 + 16;
                v150[3] = v139;
                v150[4] = v136 + 16;
                v150[5] = &v134[16 * v135];
                if (v137) {
                  operator delete(v137);
                }
              }
              else
              {
                *float v105 = *v101;
                v105[1] = 0;
                v105[2] = *(_DWORD *)v154;
                v105[3] = v104 >> 3;
                v107 = v105 + 4;
              }
              v150[4] = v107;
              ++*((_DWORD *)this + 25);
              operator new();
            }
            int64_t v108 = (char *)&v99[3 * v96 + 2];
            unint64_t v109 = v150[4];
            unint64_t v110 = v150[5];
            if (v109 >= v110)
            {
              uint64_t v113 = (uint64_t)(v109 - (void)*v153) >> 4;
              unint64_t v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 60) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v115 = v110 - (void)*v153;
              if (v115 >> 3 > v114) {
                unint64_t v114 = v115 >> 3;
              }
              if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v116 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v116 = v114;
              }
              v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v152, v116);
              v119 = &v117[16 * v113];
              int v120 = *((_DWORD *)this + 11);
              *(void *)v119 = *(void *)v101;
              *((_DWORD *)v119 + 2) = *(_DWORD *)v108;
              *((_DWORD *)v119 + 3) = v120;
              uint64_t v122 = (char *)v150[3];
              uint64_t v121 = (char *)v150[4];
              long long v123 = v119;
              if (v121 != v122)
              {
                do
                {
                  *((_OWORD *)v123 - 1) = *((_OWORD *)v121 - 1);
                  v123 -= 16;
                  v121 -= 16;
                }
                while (v121 != v122);
                uint64_t v121 = *v153;
              }
              uint64_t v112 = v119 + 16;
              v150[3] = v123;
              v150[4] = v119 + 16;
              v150[5] = &v117[16 * v118];
              if (v121) {
                operator delete(v121);
              }
            }
            else
            {
              int v111 = *((_DWORD *)this + 11);
              *(void *)unint64_t v109 = *(void *)v101;
              *(_DWORD *)(v109 + 8) = *(_DWORD *)v108;
              *(_DWORD *)(v109 + 12) = v111;
              uint64_t v112 = (char *)(v109 + 16);
            }
            v150[4] = v112;
            ++*((_DWORD *)this + 25);
            BOOL v98 = v96++ < v92[1];
          }
          while (v98);
          int v94 = *v156;
          v92 += 2;
        }
        while (v92 != v151);
        uint64_t v93 = __p;
      }
      if (v93) {
        operator delete(v93);
      }
      if (v161)
      {
        unint64_t v162 = (char *)v161;
        operator delete(v161);
      }
    }
    if (v165)
    {
      v166 = v165;
      operator delete(v165);
    }
  }
}

void sub_1B1EB5E64()
{
  if (v0) {
    operator delete(v0);
  }
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x1B1EB5E98);
}

uint64_t fst::quasar::MergeTrieFstImpl::NumArcs(fst::quasar::MergeTrieFstImpl *this, int a2)
{
  fst::quasar::MergeTrieFstImpl::Expand(this, a2);
  uint64_t v4 = *((void *)this + 9);
  if (a2 >= (unint64_t)((*((void *)this + 10) - v4) >> 3)) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  return (uint64_t)(*(void *)(*(void *)(v4 + 8 * a2) + 32) - *(void *)(*(void *)(v4 + 8 * a2) + 24)) >> 4;
}

uint64_t fst::quasar::MergeTrieFstImpl::NumOutputEpsilons(fst::quasar::MergeTrieFstImpl *this, int a2)
{
  fst::quasar::MergeTrieFstImpl::Expand(this, a2);
  uint64_t v4 = *((void *)this + 9);
  if (a2 >= (unint64_t)((*((void *)this + 10) - v4) >> 3)) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v5 = *(void *)(v4 + 8 * a2);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(v5 + 32);
  if (v6 == v7) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    if (*(_DWORD *)(v6 + 4)) {
      uint64_t result = result;
    }
    else {
      uint64_t result = (result + 1);
    }
    v6 += 16;
  }
  while (v6 != v7);
  return result;
}

void fst::quasar::MergeTrieFstImpl::Type(fst::quasar::MergeTrieFstImpl *this)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void fst::quasar::MergeTrieFstImpl::Write()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void fst::quasar::MergeTrieFstImpl::InitArcIterator(fst::quasar::MergeTrieFstImpl *a1, int a2, void *a3)
{
  fst::quasar::MergeTrieFstImpl::Expand(a1, a2);
  *a3 = 0;
  uint64_t v6 = *((void *)a1 + 9);
  if (a2 >= (unint64_t)((*((void *)a1 + 10) - v6) >> 3)) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v7 = (void *)(*(void *)(v6 + 8 * a2) + 24);
  uint64_t v8 = (uint64_t)(v7[1] - *v7) >> 4;
  a3[1] = *v7;
  a3[2] = v8;
  a3[3] = 0;
}

void fst::quasar::MergeTrieFst::MergeTrieFst(void *a1, uint64_t a2, int a3, int a4, long long *a5)
{
  int v5 = a4;
  int v6 = a3;
  *a1 = &unk_1F0A3F9F8;
  std::allocate_shared[abi:ne180100]<fst::quasar::MergeTrieFstImpl,std::allocator<fst::quasar::MergeTrieFstImpl>,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,void>((uint64_t)&v7, a2, &v6, &v5, a5);
}

uint64_t fst::quasar::MergeTrieFst::CurrentUnigramFst@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(v2 + 104);
  uint64_t v3 = *(void *)(v2 + 112);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t fst::quasar::MergeTrieFst::HasSequentialStates(fst::quasar::MergeTrieFst *this)
{
  return 1;
}

uint64_t fst::quasar::MergeTrieFst::Start(fst::quasar::MergeTrieFst *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 40);
}

float fst::quasar::MergeTrieFst::Final(fst::quasar::MergeTrieFst *this, int a2)
{
  float result = INFINITY;
  if (*(_DWORD *)(*((void *)this + 1) + 44) == a2) {
    return 0.0;
  }
  return result;
}

uint64_t fst::quasar::MergeTrieFst::NumArcs(fst::quasar::MergeTrieFstImpl **this, int a2)
{
  return fst::quasar::MergeTrieFstImpl::NumArcs(this[1], a2);
}

uint64_t fst::quasar::MergeTrieFst::NumInputEpsilons(fst::quasar::MergeTrieFst *this)
{
  return 0;
}

uint64_t fst::quasar::MergeTrieFst::NumOutputEpsilons(fst::quasar::MergeTrieFstImpl **this, int a2)
{
  return fst::quasar::MergeTrieFstImpl::NumOutputEpsilons(this[1], a2);
}

uint64_t fst::quasar::MergeTrieFst::Properties(fst::quasar::MergeTrieFst *this, uint64_t a2)
{
  return a2 & 0x52812840000;
}

void fst::quasar::MergeTrieFst::Type(fst::quasar::MergeTrieFst *this)
{
}

void fst::quasar::MergeTrieFst::Copy(fst::quasar::MergeTrieFst *this, int a2)
{
  if (!a2) {
    operator new();
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "!safe");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void fst::quasar::MergeTrieFst::Write()
{
}

{
  fst::quasar::MergeTrieFstImpl::Write();
}

uint64_t fst::quasar::MergeTrieFst::InputSymbols(fst::quasar::MergeTrieFst *this)
{
  return 0;
}

uint64_t fst::quasar::MergeTrieFst::OutputSymbols(fst::quasar::MergeTrieFst *this)
{
  return 0;
}

void fst::quasar::MergeTrieFst::InitStateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(fst::quasar::MergeTrieFstImpl **)(a1 + 8);
  fst::quasar::MergeTrieFstImpl::ExpandAll(v3);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*((void *)v3 + 10) - *((void *)v3 + 9)) >> 3;
}

void fst::quasar::MergeTrieFst::InitArcIterator(uint64_t a1, int a2, void *a3)
{
}

void fst::quasar::MergeTrieFst::~MergeTrieFst(fst::quasar::MergeTrieFst *this)
{
  *(void *)this = &unk_1F0A3F9F8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0A3F9F8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void std::vector<std::unique_ptr<fst::quasar::FstData>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<fst::quasar::FstData>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::unique_ptr<fst::quasar::FstData>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    int v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      *int v5 = 0;
      if (v6) {
        std::default_delete<fst::quasar::FstData>::operator()[abi:ne180100]((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<std::unique_ptr<fst::quasar::State>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<fst::quasar::State>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::unique_ptr<fst::quasar::State>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    int v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      *int v5 = 0;
      if (v6) {
        std::default_delete<fst::quasar::State>::operator()[abi:ne180100]((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void fst::quasar::FstData::FstData(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void))(*(void *)*a2 + 24))(*a2);
  operator new();
}

void sub_1B1EB65B0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x1070C401ACC3EEFLL);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void std::default_delete<fst::quasar::FstData>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)(a2 + 16);
    uint64_t v4 = *(void **)(a2 + 16);
    *uint64_t v3 = 0;
    if (v4) {
      std::default_delete<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator()[abi:ne180100]((uint64_t)v3, v4);
    }
    int v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

uint64_t std::vector<std::unique_ptr<fst::quasar::FstData>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::quasar::FstData>>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::quasar::FstData>>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::FstData>>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::FstData>>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::FstData>>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::FstData>>,std::reverse_iterator<std::unique_ptr<fst::quasar::FstData>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    uint64_t *v1 = 0;
    if (v3) {
      std::default_delete<fst::quasar::FstData>::operator()[abi:ne180100]((uint64_t)v1, v3);
    }
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<fst::quasar::FstData>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unique_ptr<fst::quasar::FstData>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      std::default_delete<fst::quasar::FstData>::operator()[abi:ne180100](i - 8, v5);
    }
  }
}

void std::default_delete<fst::quasar::State>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 24);
    if (v3)
    {
      *(void *)(a2 + 32) = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void **)a2;
    std::vector<std::unique_ptr<fst::quasar::SubPath>>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x1B3EA8670](a2, 0x1020C40FB1A5927);
  }
}

void std::vector<std::unique_ptr<fst::quasar::SubPath>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<fst::quasar::SubPath>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<std::unique_ptr<fst::quasar::SubPath>>::__base_destruct_at_end[abi:ne180100](uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  while (v4 != a2)
  {
    uint64_t v5 = *--v4;
    uint64_t result = v5;
    *uint64_t v4 = 0;
    if (v5) {
      uint64_t result = MEMORY[0x1B3EA8670](result, 0x1020C405AF6BDC9);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t std::vector<std::unique_ptr<fst::quasar::State>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::quasar::State>>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::quasar::State>>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::State>>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::State>>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::State>>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::State>>,std::reverse_iterator<std::unique_ptr<fst::quasar::State>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    uint64_t *v1 = 0;
    if (v3) {
      std::default_delete<fst::quasar::State>::operator()[abi:ne180100]((uint64_t)v1, v3);
    }
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<fst::quasar::State>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unique_ptr<fst::quasar::State>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      std::default_delete<fst::quasar::State>::operator()[abi:ne180100](i - 8, v5);
    }
  }
}

uint64_t std::vector<std::unique_ptr<fst::quasar::SubPath>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::quasar::SubPath>>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::quasar::SubPath>>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::SubPath>>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::SubPath>>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::SubPath>>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::quasar::SubPath>>,std::reverse_iterator<std::unique_ptr<fst::quasar::SubPath>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    uint64_t *v1 = 0;
    if (result) {
      uint64_t result = MEMORY[0x1B3EA8670](result, 0x1020C405AF6BDC9);
    }
    ++v1;
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<fst::quasar::SubPath>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<fst::quasar::SubPath>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = MEMORY[0x1B3EA8670](result, 0x1020C405AF6BDC9);
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  v0 = operator new(0x28uLL);
  _ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEEC2B8ne180100IJESC_Li0EEESC_DpOT_(v0);
}

void sub_1B1EB6E24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEEC2B8ne180100IJESC_Li0EEESC_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E6F8;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B1EB6E80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                float v72 = (long long *)(a2 - 16);
                int v73 = *(_DWORD *)(a2 - 16);
                unint64_t v74 = (long long *)(v10 + 8);
                int v75 = *(_DWORD *)(v10 + 8);
                BOOL v5 = v73 == v75;
                BOOL v76 = v73 < v75;
                if (v5) {
                  BOOL v76 = *(float *)(a2 - 8) < *(float *)(v10 + 16);
                }
                if (v76)
                {
                  uint64_t v77 = *(void *)v10;
                  *(void *)unint64_t v10 = *(void *)(a2 - 24);
                  *(void *)(a2 - 24) = v77;
                  long long v173 = *v74;
                  long long *v74 = *v72;
                  *float v72 = v173;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)v10, (uint64_t *)(v10 + 24), (uint64_t *)(a2 - 24));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(v10, v10 + 24, v10 + 48, a2 - 24);
                break;
              case 5uLL:
                std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,0>(v10, v10 + 24, v10 + 48, v10 + 72, a2 - 24);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            float v78 = (void *)(v10 + 24);
            BOOL v80 = v10 == a2 || v78 == (void *)a2;
            if (a4)
            {
              if (!v80)
              {
                uint64_t v81 = 0;
                unint64_t v82 = (void *)v10;
                do
                {
                  int v83 = v78;
                  int v84 = *((_DWORD *)v82 + 8);
                  int v85 = *((_DWORD *)v82 + 2);
                  float v86 = *((float *)v82 + 10);
                  BOOL v5 = v84 == v85;
                  BOOL v87 = v84 < v85;
                  if (v5) {
                    BOOL v87 = v86 < *((float *)v82 + 4);
                  }
                  if (v87)
                  {
                    uint64_t v88 = *v83;
                    int v89 = *((_DWORD *)v82 + 9);
                    uint64_t v90 = v81;
                    int v91 = *((_DWORD *)v82 + 11);
                    while (1)
                    {
                      uint64_t v92 = v10 + v90;
                      *(void *)(v92 + 24) = *(void *)(v10 + v90);
                      *(_OWORD *)(v92 + 32) = *(_OWORD *)(v10 + v90 + 8);
                      if (!v90) {
                        break;
                      }
                      int v93 = *(_DWORD *)(v92 - 16);
                      BOOL v5 = v84 == v93;
                      BOOL v94 = v84 < v93;
                      if (v5) {
                        BOOL v94 = v86 < *(float *)(v92 - 8);
                      }
                      v90 -= 24;
                      if (!v94)
                      {
                        uint64_t v95 = v10 + v90 + 24;
                        goto LABEL_112;
                      }
                    }
                    uint64_t v95 = v10;
LABEL_112:
                    *(void *)uint64_t v95 = v88;
                    *(_DWORD *)(v92 + 8) = v84;
                    *(_DWORD *)(v95 + 12) = v89;
                    *(float *)(v95 + 16) = v86;
                    *(_DWORD *)(v95 + 20) = v91;
                  }
                  float v78 = v83 + 3;
                  v81 += 24;
                  unint64_t v82 = v83;
                }
                while (v83 + 3 != (void *)a2);
              }
            }
            else if (!v80)
            {
              long long v158 = (float *)(v10 + 44);
              do
              {
                v159 = v78;
                int v160 = *(_DWORD *)(a1 + 32);
                int v161 = *(_DWORD *)(a1 + 8);
                float v162 = *(float *)(a1 + 40);
                BOOL v5 = v160 == v161;
                BOOL v163 = v160 < v161;
                if (v5) {
                  BOOL v163 = v162 < *(float *)(a1 + 16);
                }
                if (v163)
                {
                  uint64_t v164 = *v159;
                  int v165 = *(_DWORD *)(a1 + 36);
                  v166 = v158;
                  int v167 = *(_DWORD *)(a1 + 44);
                  do
                  {
                    *(void *)(v166 - 5) = *(void *)(v166 - 11);
                    *(_OWORD *)(v166 - 3) = *(_OWORD *)(v166 - 9);
                    int v168 = *((_DWORD *)v166 - 15);
                    BOOL v5 = v160 == v168;
                    BOOL v169 = v160 < v168;
                    if (v5) {
                      BOOL v169 = v162 < *(v166 - 13);
                    }
                    v166 -= 6;
                  }
                  while (v169);
                  *(void *)(v166 - 5) = v164;
                  *((_DWORD *)v166 - 3) = v160;
                  *((_DWORD *)v166 - 2) = v165;
                  *(v166 - 1) = v162;
                  *(_DWORD *)v166 = v167;
                }
                float v78 = v159 + 3;
                v158 += 6;
                a1 = (unint64_t)v159;
              }
              while (v159 + 3 != (uint64_t *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v96 = (v12 - 2) >> 1;
              int64_t v97 = v96;
              do
              {
                int64_t v98 = v97;
                if (v96 >= v97)
                {
                  uint64_t v99 = (2 * v97) | 1;
                  unint64_t v100 = v10 + 24 * v99;
                  if (2 * v98 + 2 < (uint64_t)v12)
                  {
                    unint64_t v101 = v10 + 24 * v99;
                    int v102 = *(_DWORD *)(v101 + 8);
                    int v103 = *(_DWORD *)(v100 + 32);
                    BOOL v104 = *(float *)(v101 + 16) < *(float *)(v100 + 40);
                    BOOL v5 = v102 == v103;
                    BOOL v105 = v102 < v103;
                    if (!v5) {
                      BOOL v104 = v105;
                    }
                    v100 += 24 * v104;
                    if (v104) {
                      uint64_t v99 = 2 * v98 + 2;
                    }
                  }
                  unint64_t v106 = v10 + 24 * v98;
                  int v107 = *(_DWORD *)(v100 + 8);
                  int v108 = *(_DWORD *)(v106 + 8);
                  float v109 = *(float *)(v106 + 16);
                  BOOL v110 = *(float *)(v100 + 16) < v109;
                  BOOL v5 = v107 == v108;
                  BOOL v111 = v107 < v108;
                  if (!v5) {
                    BOOL v110 = v111;
                  }
                  if (!v110)
                  {
                    unint64_t v112 = v10 + 24 * v98;
                    uint64_t v113 = *(void *)v112;
                    int v114 = *(_DWORD *)(v112 + 12);
                    int v115 = *(_DWORD *)(v112 + 20);
                    do
                    {
                      unint64_t v116 = v112;
                      unint64_t v112 = v100;
                      *(void *)unint64_t v116 = *(void *)v100;
                      *(_OWORD *)(v116 + 8) = *(_OWORD *)(v100 + 8);
                      if (v96 < v99) {
                        break;
                      }
                      uint64_t v117 = (2 * v99) | 1;
                      unint64_t v100 = v10 + 24 * v117;
                      uint64_t v118 = 2 * v99 + 2;
                      if (v118 < (uint64_t)v12)
                      {
                        unint64_t v119 = v10 + 24 * v117;
                        int v120 = *(_DWORD *)(v119 + 8);
                        int v121 = *(_DWORD *)(v100 + 32);
                        BOOL v122 = *(float *)(v119 + 16) < *(float *)(v100 + 40);
                        BOOL v5 = v120 == v121;
                        BOOL v123 = v120 < v121;
                        if (!v5) {
                          BOOL v122 = v123;
                        }
                        v100 += 24 * v122;
                        if (v122) {
                          uint64_t v117 = v118;
                        }
                      }
                      int v124 = *(_DWORD *)(v100 + 8);
                      BOOL v125 = *(float *)(v100 + 16) < v109;
                      BOOL v5 = v124 == v108;
                      BOOL v126 = v124 < v108;
                      if (!v5) {
                        BOOL v125 = v126;
                      }
                      uint64_t v99 = v117;
                    }
                    while (!v125);
                    *(void *)unint64_t v112 = v113;
                    *(_DWORD *)(v112 + 8) = v108;
                    *(_DWORD *)(v112 + 12) = v114;
                    *(float *)(v112 + 16) = v109;
                    *(_DWORD *)(v112 + 20) = v115;
                  }
                }
                int64_t v97 = v98 - 1;
              }
              while (v98);
              int64_t v127 = v11 / 0x18uLL;
              do
              {
                uint64_t v128 = 0;
                uint64_t v129 = *(void *)v10;
                long long v174 = *(_OWORD *)(v10 + 8);
                unint64_t v130 = v10;
                do
                {
                  uint64_t v131 = v128 + 1;
                  unint64_t v132 = v130 + 24 * (v128 + 1);
                  uint64_t v133 = (2 * v128) | 1;
                  uint64_t v134 = 2 * v128 + 2;
                  if (v134 < v127)
                  {
                    unint64_t v135 = v130 + 24 * v131;
                    int v136 = *(_DWORD *)(v135 + 8);
                    int v137 = *(_DWORD *)(v132 + 32);
                    BOOL v138 = *(float *)(v135 + 16) < *(float *)(v132 + 40);
                    BOOL v5 = v136 == v137;
                    BOOL v139 = v136 < v137;
                    if (!v5) {
                      BOOL v138 = v139;
                    }
                    v132 += 24 * v138;
                    if (v138) {
                      uint64_t v133 = v134;
                    }
                  }
                  *(void *)unint64_t v130 = *(void *)v132;
                  *(_OWORD *)(v130 + 8) = *(_OWORD *)(v132 + 8);
                  unint64_t v130 = v132;
                  uint64_t v128 = v133;
                }
                while (v133 <= (uint64_t)((unint64_t)(v127 - 2) >> 1));
                uint64_t v140 = (_OWORD *)(v132 + 8);
                if (v132 == a2 - 24)
                {
                  *(void *)unint64_t v132 = v129;
                  *uint64_t v140 = v174;
                }
                else
                {
                  *(void *)unint64_t v132 = *(void *)(a2 - 24);
                  *uint64_t v140 = *(_OWORD *)(a2 - 16);
                  *(void *)(a2 - 24) = v129;
                  *(_OWORD *)(a2 - 16) = v174;
                  uint64_t v141 = v132 - v10 + 24;
                  if (v141 >= 25)
                  {
                    unint64_t v142 = (v141 / 0x18uLL - 2) >> 1;
                    unint64_t v143 = v10 + 24 * v142;
                    int v144 = *(_DWORD *)(v143 + 8);
                    int v145 = *(_DWORD *)(v132 + 8);
                    float v146 = *(float *)(v132 + 16);
                    BOOL v147 = *(float *)(v143 + 16) < v146;
                    BOOL v5 = v144 == v145;
                    BOOL v148 = v144 < v145;
                    if (!v5) {
                      BOOL v147 = v148;
                    }
                    if (v147)
                    {
                      uint64_t v149 = *(void *)v132;
                      int v150 = *(_DWORD *)(v132 + 12);
                      int v151 = *(_DWORD *)(v132 + 20);
                      do
                      {
                        unint64_t v152 = v132;
                        unint64_t v132 = v10 + 24 * v142;
                        *(void *)unint64_t v152 = *(void *)v132;
                        *(_OWORD *)(v152 + 8) = *(_OWORD *)(v132 + 8);
                        if (!v142) {
                          break;
                        }
                        unint64_t v142 = (v142 - 1) >> 1;
                        unint64_t v153 = v10 + 24 * v142;
                        int v154 = *(_DWORD *)(v153 + 8);
                        BOOL v155 = *(float *)(v153 + 16) < v146;
                        BOOL v5 = v154 == v145;
                        BOOL v156 = v154 < v145;
                        if (!v5) {
                          BOOL v155 = v156;
                        }
                      }
                      while (v155);
                      *(void *)unint64_t v132 = v149;
                      *(_DWORD *)(v132 + 8) = v145;
                      *(_DWORD *)(v132 + 12) = v150;
                      *(float *)(v132 + 16) = v146;
                      *(_DWORD *)(v132 + 20) = v151;
                    }
                  }
                }
                a2 -= 24;
              }
              while (v127-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          char v14 = (uint64_t *)(v10 + 24 * (v12 >> 1));
          if ((unint64_t)v11 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)a1, (uint64_t *)(a1 + 24 * (v12 >> 1)), (uint64_t *)(a2 - 24));
            unint64_t v15 = a1 + 24 * v13;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)(a1 + 24), (uint64_t *)(v15 - 24), (uint64_t *)(a2 - 48));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)(a1 + 48), (uint64_t *)(a1 + 24 + 24 * v13), (uint64_t *)(a2 - 72));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)(v15 - 24), v14, (uint64_t *)(a1 + 24 + 24 * v13));
            uint64_t v16 = *(void *)a1;
            *(void *)a1 = *v14;
            *char v14 = v16;
            long long v170 = *(_OWORD *)(a1 + 8);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v15 + 8);
            *(_OWORD *)(v15 + 8) = v170;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)(a1 + 24 * (v12 >> 1)), (uint64_t *)a1, (uint64_t *)(a2 - 24));
          }
          --a3;
          if (a4)
          {
            int v17 = *(_DWORD *)(a1 + 8);
            float v18 = *(float *)(a1 + 16);
            break;
          }
          int v19 = *(_DWORD *)(a1 - 16);
          int v17 = *(_DWORD *)(a1 + 8);
          float v18 = *(float *)(a1 + 16);
          BOOL v5 = v19 == v17;
          BOOL v20 = v19 < v17;
          if (v5) {
            BOOL v20 = *(float *)(a1 - 8) < v18;
          }
          if (v20) {
            break;
          }
          int v47 = *(_DWORD *)(a2 - 16);
          BOOL v5 = v17 == v47;
          BOOL v48 = v17 < v47;
          if (v5) {
            BOOL v48 = v18 < *(float *)(a2 - 8);
          }
          if (v48)
          {
            unint64_t v49 = a1;
            do
            {
              unint64_t v10 = v49 + 24;
              int v50 = *(_DWORD *)(v49 + 32);
              BOOL v51 = v18 < *(float *)(v49 + 40);
              BOOL v5 = v17 == v50;
              BOOL v52 = v17 < v50;
              if (v5) {
                BOOL v52 = v51;
              }
              unint64_t v49 = v10;
            }
            while (!v52);
          }
          else
          {
            unint64_t v53 = a1 + 24;
            do
            {
              unint64_t v10 = v53;
              if (v53 >= a2) {
                break;
              }
              int v54 = *(_DWORD *)(v53 + 8);
              BOOL v55 = v18 < *(float *)(v10 + 16);
              BOOL v5 = v17 == v54;
              BOOL v56 = v17 < v54;
              if (!v5) {
                BOOL v55 = v56;
              }
              unint64_t v53 = v10 + 24;
            }
            while (!v55);
          }
          unint64_t v57 = a2;
          if (v10 < a2)
          {
            unint64_t v58 = a2;
            do
            {
              unint64_t v57 = v58 - 24;
              int v59 = *(_DWORD *)(v58 - 16);
              BOOL v60 = v18 < *(float *)(v58 - 8);
              BOOL v5 = v17 == v59;
              BOOL v61 = v17 < v59;
              if (v5) {
                BOOL v61 = v60;
              }
              unint64_t v58 = v57;
            }
            while (v61);
          }
          uint64_t v62 = *(void *)a1;
          int v63 = *(_DWORD *)(a1 + 12);
          int v64 = *(_DWORD *)(a1 + 20);
          while (v10 < v57)
          {
            uint64_t v65 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v57;
            *(void *)unint64_t v57 = v65;
            long long v172 = *(_OWORD *)(v10 + 8);
            *(_OWORD *)(v10 + 8) = *(_OWORD *)(v57 + 8);
            *(_OWORD *)(v57 + 8) = v172;
            do
            {
              int v66 = *(_DWORD *)(v10 + 32);
              float v67 = *(float *)(v10 + 40);
              v10 += 24;
              BOOL v5 = v17 == v66;
              BOOL v68 = v17 < v66;
              if (v5) {
                BOOL v68 = v18 < v67;
              }
            }
            while (!v68);
            do
            {
              int v69 = *(_DWORD *)(v57 - 16);
              float v70 = *(float *)(v57 - 8);
              v57 -= 24;
              BOOL v5 = v17 == v69;
              BOOL v71 = v17 < v69;
              if (v5) {
                BOOL v71 = v18 < v70;
              }
            }
            while (v71);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            *(void *)a1 = *(void *)(v10 - 24);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 24) = v62;
          *(_DWORD *)(v10 - 16) = v17;
          *(_DWORD *)(v10 - 12) = v63;
          *(float *)(v10 - 8) = v18;
          *(_DWORD *)(v10 - 4) = v64;
        }
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        int v23 = *(_DWORD *)(a1 + 12);
        int v24 = *(_DWORD *)(a1 + 20);
        do
        {
          int v25 = *(_DWORD *)(a1 + v21 + 32);
          BOOL v26 = *(float *)(a1 + v21 + 40) < v18;
          BOOL v5 = v25 == v17;
          BOOL v27 = v25 < v17;
          if (!v5) {
            BOOL v26 = v27;
          }
          v21 += 24;
        }
        while (v26);
        unint64_t v28 = a1 + v21;
        unint64_t v29 = a2;
        if (v21 == 24)
        {
          unint64_t v34 = a2;
          while (v28 < v34)
          {
            unint64_t v30 = v34 - 24;
            int v35 = *(_DWORD *)(v34 - 16);
            BOOL v36 = *(float *)(v34 - 8) < v18;
            BOOL v5 = v35 == v17;
            BOOL v37 = v35 < v17;
            if (v5) {
              BOOL v37 = v36;
            }
            unint64_t v34 = v30;
            if (v37) {
              goto LABEL_30;
            }
          }
          unint64_t v30 = v34;
        }
        else
        {
          do
          {
            unint64_t v30 = v29 - 24;
            int v31 = *(_DWORD *)(v29 - 16);
            BOOL v32 = *(float *)(v29 - 8) < v18;
            BOOL v5 = v31 == v17;
            BOOL v33 = v31 < v17;
            if (v5) {
              BOOL v33 = v32;
            }
            unint64_t v29 = v30;
          }
          while (!v33);
        }
LABEL_30:
        unint64_t v10 = v28;
        if (v28 < v30)
        {
          unint64_t v38 = v30;
          do
          {
            uint64_t v39 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v38;
            *(void *)unint64_t v38 = v39;
            long long v171 = *(_OWORD *)(v10 + 8);
            *(_OWORD *)(v10 + 8) = *(_OWORD *)(v38 + 8);
            *(_OWORD *)(v38 + 8) = v171;
            do
            {
              int v40 = *(_DWORD *)(v10 + 32);
              float v41 = *(float *)(v10 + 40);
              v10 += 24;
              BOOL v5 = v40 == v17;
              BOOL v42 = v40 < v17;
              if (v5) {
                BOOL v42 = v41 < v18;
              }
            }
            while (v42);
            do
            {
              int v43 = *(_DWORD *)(v38 - 16);
              float v44 = *(float *)(v38 - 8);
              v38 -= 24;
              BOOL v5 = v43 == v17;
              BOOL v45 = v43 < v17;
              if (v5) {
                BOOL v45 = v44 < v18;
              }
            }
            while (!v45);
          }
          while (v10 < v38);
        }
        if (v10 - 24 != a1)
        {
          *(void *)a1 = *(void *)(v10 - 24);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 24) = v22;
        *(_DWORD *)(v10 - 16) = v17;
        *(_DWORD *)(v10 - 12) = v23;
        *(float *)(v10 - 8) = v18;
        *(_DWORD *)(v10 - 4) = v24;
        if (v28 >= v30) {
          break;
        }
LABEL_45:
        std::__introsort<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,false>(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v46 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(a1, v10 - 24);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(v10, a2))
      {
        break;
      }
      if (!v46) {
        goto LABEL_45;
      }
    }
    a2 = v10 - 24;
    if (!v46) {
      continue;
    }
    break;
  }
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(a1, a2, a3, a4);
  unint64_t v10 = (__n128 *)(a5 + 8);
  int v11 = *(_DWORD *)(a5 + 8);
  unint64_t v12 = (__n128 *)(a4 + 8);
  int v13 = *(_DWORD *)(a4 + 8);
  result.n128_u32[0] = *(_DWORD *)(a5 + 16);
  BOOL v15 = v11 == v13;
  BOOL v16 = v11 < v13;
  if (v15) {
    BOOL v16 = result.n128_f32[0] < *(float *)(a4 + 16);
  }
  if (v16)
  {
    uint64_t v17 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v17;
    __n128 result = *v12;
    *unint64_t v12 = *v10;
    *unint64_t v10 = result;
    float v18 = (__n128 *)(a3 + 8);
    LODWORD(v17) = *(_DWORD *)(a3 + 8);
    int v19 = *(_DWORD *)(a4 + 8);
    result.n128_u32[0] = *(_DWORD *)(a4 + 16);
    BOOL v15 = v19 == v17;
    BOOL v20 = v19 < (int)v17;
    if (v15) {
      BOOL v20 = result.n128_f32[0] < *(float *)(a3 + 16);
    }
    if (v20)
    {
      uint64_t v21 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v21;
      __n128 result = *v18;
      __n128 *v18 = *v12;
      *unint64_t v12 = result;
      uint64_t v22 = (__n128 *)(a2 + 8);
      LODWORD(v21) = *(_DWORD *)(a2 + 8);
      int v23 = *(_DWORD *)(a3 + 8);
      result.n128_u32[0] = *(_DWORD *)(a3 + 16);
      BOOL v15 = v23 == v21;
      BOOL v24 = v23 < (int)v21;
      if (v15) {
        BOOL v24 = result.n128_f32[0] < *(float *)(a2 + 16);
      }
      if (v24)
      {
        uint64_t v25 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v25;
        __n128 result = *v22;
        __n128 *v22 = *v18;
        __n128 *v18 = result;
        BOOL v26 = (__n128 *)(a1 + 8);
        LODWORD(v25) = *(_DWORD *)(a1 + 8);
        int v27 = *(_DWORD *)(a2 + 8);
        result.n128_u32[0] = *(_DWORD *)(a2 + 16);
        BOOL v15 = v27 == v25;
        BOOL v28 = v27 < (int)v25;
        if (v15) {
          BOOL v28 = result.n128_f32[0] < *(float *)(a1 + 16);
        }
        if (v28)
        {
          uint64_t v29 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v29;
          __n128 result = *v26;
          *BOOL v26 = *v22;
          __n128 *v22 = result;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = (long long *)(a2 + 1);
  int v4 = *((_DWORD *)a2 + 2);
  BOOL v5 = (long long *)(result + 1);
  int v6 = *((_DWORD *)result + 2);
  float v7 = *((float *)a2 + 4);
  BOOL v8 = v4 == v6;
  BOOL v9 = v4 < v6;
  if (v8) {
    BOOL v10 = v7 < *((float *)result + 4);
  }
  else {
    BOOL v10 = v9;
  }
  int v11 = (long long *)(a3 + 1);
  int v12 = *((_DWORD *)a3 + 2);
  BOOL v8 = v12 == v4;
  BOOL v13 = v12 < v4;
  if (v8) {
    BOOL v14 = *((float *)a3 + 4) < v7;
  }
  else {
    BOOL v14 = v13;
  }
  if (v10)
  {
    uint64_t v15 = *result;
    if (v14)
    {
      *__n128 result = *a3;
      *a3 = v15;
      long long v16 = *v5;
      *BOOL v5 = *v11;
LABEL_19:
      *int v11 = v16;
      return result;
    }
    *__n128 result = *a2;
    *a2 = v15;
    long long v23 = *v5;
    *BOOL v5 = *v3;
    *uint64_t v3 = v23;
    int v24 = *((_DWORD *)a3 + 2);
    int v25 = *((_DWORD *)a2 + 2);
    BOOL v8 = v24 == v25;
    BOOL v26 = v24 < v25;
    if (v8) {
      BOOL v26 = *((float *)a3 + 4) < *((float *)a2 + 4);
    }
    if (v26)
    {
      uint64_t v27 = *a2;
      *a2 = *a3;
      *a3 = v27;
      long long v16 = *v3;
      *uint64_t v3 = *v11;
      goto LABEL_19;
    }
  }
  else if (v14)
  {
    uint64_t v17 = *a2;
    *a2 = *a3;
    *a3 = v17;
    long long v18 = *v3;
    *uint64_t v3 = *v11;
    *int v11 = v18;
    int v19 = *((_DWORD *)a2 + 2);
    LODWORD(v17) = *((_DWORD *)result + 2);
    BOOL v8 = v19 == v17;
    BOOL v20 = v19 < (int)v17;
    if (v8) {
      BOOL v20 = *((float *)a2 + 4) < *((float *)result + 4);
    }
    if (v20)
    {
      uint64_t v21 = *result;
      *__n128 result = *a2;
      *a2 = v21;
      long long v22 = *v5;
      *BOOL v5 = *v3;
      *uint64_t v3 = v22;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = (long long *)(a2 - 16);
      int v7 = *(_DWORD *)(a2 - 16);
      BOOL v8 = (long long *)(a1 + 8);
      int v9 = *(_DWORD *)(a1 + 8);
      BOOL v10 = v7 == v9;
      BOOL v11 = v7 < v9;
      if (v10) {
        BOOL v11 = *(float *)(a2 - 8) < *(float *)(a1 + 16);
      }
      if (v11)
      {
        uint64_t v12 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v12;
        long long v13 = *v8;
        *BOOL v8 = *v6;
        *int v6 = v13;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v14 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      uint64_t v15 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    int v18 = *(_DWORD *)(v15 + 8);
    int v19 = *(_DWORD *)(v14 + 8);
    float v20 = *(float *)(v15 + 16);
    BOOL v10 = v18 == v19;
    BOOL v21 = v18 < v19;
    if (v10) {
      BOOL v21 = v20 < *(float *)(v14 + 16);
    }
    if (v21)
    {
      uint64_t v22 = *(void *)v15;
      int v23 = *(_DWORD *)(v15 + 12);
      uint64_t v24 = v16;
      int v25 = *(_DWORD *)(v15 + 20);
      while (1)
      {
        uint64_t v26 = a1 + v24;
        *(void *)(v26 + 72) = *(void *)(a1 + v24 + 48);
        *(_OWORD *)(v26 + 80) = *(_OWORD *)(a1 + v24 + 56);
        if (v24 == -48) {
          break;
        }
        int v27 = *(_DWORD *)(v26 + 32);
        BOOL v10 = v18 == v27;
        BOOL v28 = v18 < v27;
        if (v10) {
          BOOL v28 = v20 < *(float *)(v26 + 40);
        }
        v24 -= 24;
        if (!v28)
        {
          uint64_t v29 = a1 + v24 + 72;
          goto LABEL_18;
        }
      }
      uint64_t v29 = a1;
LABEL_18:
      *(void *)uint64_t v29 = v22;
      *(_DWORD *)(v26 + 56) = v18;
      *(_DWORD *)(v29 + 12) = v23;
      *(float *)(v29 + 16) = v20;
      ++v17;
      *(_DWORD *)(v29 + 20) = v25;
      if (v17 == 8) {
        return v15 + 24 == a2;
      }
    }
    uint64_t v14 = v15;
    v16 += 24;
    v15 += 24;
    if (v15 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  BOOL v8 = (__n128 *)(a4 + 8);
  int v9 = *(_DWORD *)(a4 + 8);
  BOOL v10 = (__n128 *)(a3 + 8);
  int v11 = *(_DWORD *)(a3 + 8);
  result.n128_u32[0] = *(_DWORD *)(a4 + 16);
  BOOL v13 = v9 == v11;
  BOOL v14 = v9 < v11;
  if (v13) {
    BOOL v14 = result.n128_f32[0] < *(float *)(a3 + 16);
  }
  if (v14)
  {
    uint64_t v15 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v15;
    __n128 result = *v10;
    *BOOL v10 = *v8;
    *BOOL v8 = result;
    uint64_t v16 = (__n128 *)(a2 + 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 8);
    int v17 = *(_DWORD *)(a3 + 8);
    result.n128_u32[0] = *(_DWORD *)(a3 + 16);
    BOOL v13 = v17 == v15;
    BOOL v18 = v17 < (int)v15;
    if (v13) {
      BOOL v18 = result.n128_f32[0] < *(float *)(a2 + 16);
    }
    if (v18)
    {
      uint64_t v19 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v19;
      __n128 result = *v16;
      __n128 *v16 = *v10;
      *BOOL v10 = result;
      float v20 = (__n128 *)(a1 + 8);
      LODWORD(v19) = *(_DWORD *)(a1 + 8);
      int v21 = *(_DWORD *)(a2 + 8);
      result.n128_u32[0] = *(_DWORD *)(a2 + 16);
      BOOL v13 = v21 == v19;
      BOOL v22 = v21 < (int)v19;
      if (v13) {
        BOOL v22 = result.n128_f32[0] < *(float *)(a1 + 16);
      }
      if (v22)
      {
        uint64_t v23 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v23;
        __n128 result = *v20;
        __n128 *v20 = *v16;
        __n128 *v16 = result;
      }
    }
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<fst::quasar::MergeTrieFstImpl,std::allocator<fst::quasar::MergeTrieFstImpl>,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,void>(uint64_t a1, uint64_t a2, int *a3, int *a4, long long *a5)
{
  int v9 = operator new(0x90uLL);
  std::__shared_ptr_emplace<fst::quasar::MergeTrieFstImpl>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,std::allocator<fst::quasar::MergeTrieFstImpl>,0>(v9, a2, a3, a4, a5);
}

void sub_1B1EB7FF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::quasar::MergeTrieFstImpl>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,std::allocator<fst::quasar::MergeTrieFstImpl>,0>(void *a1, uint64_t a2, int *a3, int *a4, long long *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E500;
  fst::quasar::MergeTrieFstImpl::MergeTrieFstImpl((uint64_t)(a1 + 3), a2, *a3, *a4, a5);
}

void sub_1B1EB8058(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::quasar::MergeTrieFstImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::quasar::MergeTrieFstImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::quasar::MergeTrieFstImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sdapi::sdapiErrorHandler(sdapi *this, const char *a2, unint64_t a3, const char *a4)
{
  return sdapi::SDAPIOSLog((sdapi *)0x10, (os_log_type_t)*(void *)(**(void **)vars0 + 8), "error: %s", a4, this);
}

uint64_t sdapi::SDAPIOSLog(sdapi *this, os_log_type_t a2, void *a3, const char *a4, ...)
{
  {
    sdapi::SDAPIOSLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "sdapi");
  }
  return os_log_with_args();
}

uint64_t sdapi::sdapiMemoryErrorHandler(sdapi *this, const char *a2, unint64_t a3, const char *a4)
{
  return sdapi::SDAPIOSLog((sdapi *)0x10, (os_log_type_t)*(void *)(**(void **)vars0 + 8), "memory error: %s", a4, this);
}

uint64_t sdapi::sdapiLogHandler(sdapi *this, const char *a2, unint64_t a3, const char *a4)
{
  return sdapi::SDAPIOSLog((sdapi *)2, (os_log_type_t)*(void *)(**(void **)vars0 + 8), "%s", a4, this);
}

uint64_t sdapi::SdapiUtil::initializeSdapi(sdapi::SdapiUtil *this)
{
  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1) {
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  }
  uint64_t v1 = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  if (SDApi_Initialize() != 1)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v5 = 0u;
      long long v6 = 0u;
      long long v4 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Initialized profile service failed ", 35);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v4);
    }
LABEL_11:
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v4 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Initialization of profile service succeeded ", 44);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v4);
  }
  if (partial apply())
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v5 = 0u;
      long long v6 = 0u;
      long long v4 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Initialization of textproc failed ", 34);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v4);
    }
    goto LABEL_11;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v4 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Initialization of textproc succeeded ", 37);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v4);
  }
  uint64_t v2 = 1;
LABEL_12:
  std::recursive_mutex::unlock(v1);
  return v2;
}

void sub_1B1EB8508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::recursive_mutex::unlock(v19);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiUtil::getSharedMutex(sdapi::SdapiUtil *this)
{
  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1) {
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  }
  return sdapi::SdapiUtil::getSharedMutex(void)::mutex;
}

uint64_t sdapi::SdapiUtil::loadGeneralVoc(uint64_t a1, uint64_t a2)
{
  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1) {
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  }
  long long v4 = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  if (*(char *)(a1 + 23) >= 0) {
    long long v5 = (const char *)a1;
  }
  else {
    long long v5 = *(const char **)a1;
  }
  if (*(char *)(a2 + 23) >= 0) {
    long long v6 = (const char *)a2;
  }
  else {
    long long v6 = *(const char **)a2;
  }
  uint64_t v7 = SDVoc_New();
  if (v7 == -1)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Loading of general voc failed for voc=", 38);
      size_t v15 = strlen(v5);
      long long v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v5, v15);
      long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", svc=", 6);
      size_t v18 = strlen(v6);
      long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v6, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" with value=", 12);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v22);
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Loading succeeded for voc=", 26);
    size_t v9 = strlen(v5);
    long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v5, v9);
    long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" and svc=", 9);
    size_t v12 = strlen(v6);
    long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" with value=", 12);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v22);
  }
  sdapi::SdapiUtil::allowCollation();
  SDVoc_GetInfo();
  if (v21 == 1)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Loaded CP1252 voc\n", 18);
      goto LABEL_20;
    }
  }
  else if (v21 == 2 && quasar::gLogLevel >= 4)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Loaded UTF8 voc\n", 16);
LABEL_20:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v22);
  }
  std::recursive_mutex::unlock(v4);
  return v7;
}

void sub_1B1EB88DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  std::recursive_mutex::unlock(v17);
  _Unwind_Resume(a1);
}

void sdapi::SdapiUtil::allowCollation()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1) {
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  }
  v0 = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  memset(v7, 0, sizeof(v7));
  unsigned int Colls = SDVoc_GetColls();
  if (!Colls) {
    goto LABEL_11;
  }
  uint64_t v2 = 0;
  uint64_t v3 = 8 * Colls;
  while (1)
  {
    if (*(void *)((char *)v7 + v2) != -2)
    {
      SDVoc_GetCollationName();
      if (*(void *)&v6[0] == 0x6C6F636E656B6F74 && WORD4(v6[0]) == 108) {
        break;
      }
    }
    v2 += 8;
    if (v3 == v2) {
      goto LABEL_11;
    }
  }
  uint64_t v5 = *(void *)((char *)v7 + v2);
  if (v5 == -1)
  {
LABEL_11:
    memset(v6, 0, 272);
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Error: Voc does not contain the tokencoll collation table", 57);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  SDVoc_SetAllowedWordCollations();
  std::recursive_mutex::unlock(v0);
}

void sub_1B1EB8AE8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1EB8B08);
}

void sub_1B1EB8AF8(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sdapi::SdapiUtil::readConfig()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1) {
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  }
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  quasar::PTree::PTree((quasar::PTree *)v0);
  quasar::PTree::readJsonFromFile();
}

void sub_1B1EB9FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::recursive_mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::destroy(a25, *(void **)(a25 + 8));
  if (*(char *)(v25 - 185) < 0) {
    operator delete(*(void **)(v25 - 208));
  }
  quasar::PTree::~PTree((quasar::PTree *)(v25 - 184));
  std::recursive_mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiUtil::fetchLexiconHandle(uint64_t a1, uint64_t a2)
{
  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1) {
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  }
  uint64_t v3 = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(void *)a2;
  }
  uint64_t v29 = 1;
  uint64_t v30 = v4;
  uint64_t v28 = -1;
  if (TPLexicon_Open())
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
      long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"oh no:", 6);
      int v7 = *(char *)(a2 + 23);
      if (v7 >= 0) {
        uint64_t v8 = a2;
      }
      else {
        uint64_t v8 = *(void *)a2;
      }
      if (v7 >= 0) {
        uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v9 = *(void *)(a2 + 8);
      }
      long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" gave us ", 9);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v11);
    }
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Could not open lexicon", 22);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v11);
  }
  std::recursive_mutex::unlock(v3);
  return v28;
}

void sub_1B1EBA3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  std::recursive_mutex::unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiUtil::fetchItnHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1) {
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  }
  uint64_t v4 = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = *(void *)a3;
  }
  uint64_t v30 = 1;
  uint64_t v31 = v5;
  uint64_t v29 = -1;
  if (TPItn_Open())
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"oh no:", 6);
      int v8 = *(char *)(a3 + 23);
      if (v8 >= 0) {
        uint64_t v9 = a3;
      }
      else {
        uint64_t v9 = *(void *)a3;
      }
      if (v8 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v10 = *(void *)(a3 + 8);
      }
      long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" gave us ", 9);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v12);
    }
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Could not open ITN", 18);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v12);
  }
  std::recursive_mutex::unlock(v4);
  return v29;
}

void sub_1B1EBA5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  std::recursive_mutex::unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t sdapi::SdapiUtil::fetchTokenHandle(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (sdapi::SdapiUtil::getSharedMutex(void)::onceToken != -1) {
    dispatch_once(&sdapi::SdapiUtil::getSharedMutex(void)::onceToken, &__block_literal_global_1);
  }
  uint64_t v4 = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex;
  std::recursive_mutex::lock((std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(void)::mutex);
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = (uint64_t *)*a3;
  }
  uint64_t v9 = 1;
  uint64_t v10 = v5;
  uint64_t v8 = -1;
  if (TPToken_Open())
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Could not do TPToken_Open", 25);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  std::recursive_mutex::unlock(v4);
  return v8;
}

void sub_1B1EBA6F8(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN5sdapi9SdapiUtil14getSharedMutexEv_block_invoke()
{
}

void sub_1B1EBA754(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1000C40FA0F61DDLL);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x150uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  double result = 0.0;
  *(_OWORD *)(v6 + 56) = 0u;
  uint64_t v11 = v6 + 56;
  *((void *)v11 + 34) = 0;
  *((_OWORD *)v11 + 15) = 0u;
  *((_OWORD *)v11 + 16) = 0u;
  *((_OWORD *)v11 + 11) = 0u;
  *((_OWORD *)v11 + 12) = 0u;
  *((_OWORD *)v11 + 9) = 0u;
  *((_OWORD *)v11 + 10) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  *((_OWORD *)v11 + 8) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 14) = 0u;
  *((_OWORD *)v11 + 13) = 0u;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1EBA8D0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_1B1EBA974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1EBAA38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1EBAD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1EBAFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1B1EBB248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B1EBB54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AudioConverterFillComplexBuffer_BlockInvoke(OpaqueAudioConverter *a1, unsigned int *a2, AudioBufferList *a3, AudioStreamPacketDescription **a4, void *a5)
{
  uint64_t v8 = (uint64_t (**)(void, void, void, void))MEMORY[0x1B3EA9B60](a5);
  uint64_t v9 = ((uint64_t (**)(void, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **))v8)[2](v8, a2, a3, a4);

  return v9;
}

void sub_1B1EBB600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void quasar::BitmapLoaderImpl::~BitmapLoaderImpl(quasar::BitmapLoaderImpl *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::BitmapLoaderImpl::loadPgm()
{
}

void LM::LM(LM *this, Vocab *a2)
{
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 2) = MEMORY[0x1E4FBA240];
  *((void *)this + 3) = a2;
  *(void *)this = &unk_1F0A34518;
  SubVocab::SubVocab((LM *)((char *)this + 32), a2, 0);
  *((_DWORD *)this + 36) = 65792;
  *((void *)this + 17) = defaultStateTag;
  *((unsigned char *)this + 148) = 0;
  (*(void (**)(LM *, void))(*(void *)this + 16))(this, LM::initialDebugLevel);
}

void sub_1B1EBB738(_Unwind_Exception *a1)
{
  Vocab::~Vocab(v1);
  _Unwind_Resume(a1);
}

void LM::~LM(LM *this)
{
  *(void *)this = &unk_1F0A34518;
  Vocab::~Vocab((LM *)((char *)this + 32));
}

float LM::wordProb(LM *this, const char *const *a2, const char *const *a3)
{
  int v6 = Vocab::length((uint64_t)a3, a2);
  uint64_t v7 = (v6 + 1);
  if (v6 != -1) {
    Array<unsigned int>::alloc();
  }
  int v8 = (*(uint64_t (**)(LM *))(*(void *)this + 224))(this);
  uint64_t v9 = *((void *)this + 3);
  if (v8)
  {
    (*(void (**)(void, const char *const *, void, uint64_t))(*(void *)v9 + 256))(*((void *)this + 3), a3, HIDWORD(v7), v7);
  }
  else
  {
    uint64_t v10 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v9 + 88))(*((void *)this + 3));
    (*(void (**)(uint64_t, const char *const *, void, uint64_t, void))(*(void *)v9 + 272))(v9, a3, HIDWORD(v7), v7, *v10);
  }
  uint64_t v11 = *((void *)this + 3);
  long long v12 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *const *, void))(*(void *)v11 + 40))(v11, a2, *v12);
  return (*(float (**)(LM *, uint64_t, void))(*(void *)this + 48))(this, v13, HIDWORD(v7));
}

void sub_1B1EBB9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    MEMORY[0x1B3EA8630](a11, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LM::wordProbRecompute(LM *this, uint64_t a2, const unsigned int *a3)
{
  return (*(uint64_t (**)(LM *, uint64_t, const unsigned int *))(*(void *)this + 48))(this, a2, a3);
}

uint64_t LM::addUnkWords(LM *this)
{
  return 0;
}

uint64_t LM::isNonWord(LM *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 176))();
}

uint64_t LM::updateRanks(const Vocab **this, float a2, const unsigned int *a3, double *a4, double *a5, double *a6, double a7)
{
  double v13 = 0.0;
  if (a2 != -INFINITY) {
    double v13 = exp(a2 * 2.30258509);
  }
  uint64_t v14 = (*((uint64_t (**)(const Vocab **, void))*this + 34))(this, 0);
  VocabIter::VocabIter((VocabIter *)v25, this[3], 0);
  int v15 = 0;
  unsigned int v16 = 0;
  char v17 = 0;
  unsigned int v24 = 0;
  while (VocabIter::next((VocabIter *)v25, &v24))
  {
    if (!(*((unsigned int (**)(const Vocab **, void))*this + 29))(this, v24))
    {
      long long v18 = *this;
      if (v17) {
        long long v19 = (const Vocab *)((char *)v18 + 64);
      }
      else {
        long long v19 = (const Vocab *)((char *)v18 + 48);
      }
      float v20 = (*(float (**)(const Vocab **, void, const unsigned int *))v19)(this, v24, a3);
      double v21 = 0.0;
      if (v20 != -INFINITY) {
        double v21 = exp(v20 * 2.30258509);
      }
      if (vabdd_f64(v21, v13) >= 0.000003)
      {
        if (v21 > v13) {
          ++v15;
        }
      }
      else
      {
        ++v16;
      }
      char v17 = 1;
      if (v15 + (v16 >> 1) >= 0xB) {
        break;
      }
    }
  }
  unsigned int v22 = (v16 >> 1) + v15;
  if (v22 <= 9)
  {
    *a6 = *a6 + a7;
    if (v22 <= 4)
    {
      *a5 = *a5 + a7;
      if (!v22) {
        *a4 = *a4 + a7;
      }
    }
  }
  (*((void (**)(const Vocab **, uint64_t))*this + 34))(this, v14);
  return LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)v25);
}

void sub_1B1EBBC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

double LM::wordProbSum(const Vocab **this, const unsigned int *a2)
{
  VocabIter::VocabIter((VocabIter *)v13, this[3], 0);
  unsigned int v12 = 0;
  uint64_t v4 = (*((uint64_t (**)(const Vocab **, void))*this + 34))(this, 0);
  char v5 = 0;
  double v6 = 0.0;
  while (VocabIter::next((VocabIter *)v13, &v12))
  {
    if (!(*((unsigned int (**)(const Vocab **, void))*this + 29))(this, v12))
    {
      uint64_t v7 = *this;
      if (v5) {
        int v8 = (const Vocab *)((char *)v7 + 64);
      }
      else {
        int v8 = (const Vocab *)((char *)v7 + 48);
      }
      float v9 = (*(float (**)(const Vocab **, void, const unsigned int *))v8)(this, v12, a2);
      double v10 = 0.0;
      if (v9 != -INFINITY) {
        double v10 = exp(v9 * 2.30258509);
      }
      double v6 = v6 + v10;
      char v5 = 1;
    }
  }
  (*((void (**)(const Vocab **, uint64_t))*this + 34))(this, v4);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)v13);
  return v6;
}

void sub_1B1EBBE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

float LM::sentenceProb(void *a1, const char *const *this, uint64_t a3, uint64_t a4)
{
  int v8 = Vocab::length((uint64_t)this, this);
  uint64_t v9 = (v8 + 1);
  if (v8 != -1) {
    Array<unsigned int>::alloc();
  }
  int v10 = (*(uint64_t (**)(void *))(*a1 + 224))(a1);
  uint64_t v11 = a1[3];
  if (v10)
  {
    (*(void (**)(void, const char *const *, void, uint64_t))(*(void *)v11 + 256))(a1[3], this, HIDWORD(v9), v9);
  }
  else
  {
    unsigned int v12 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v11 + 88))(a1[3]);
    (*(void (**)(uint64_t, const char *const *, void, uint64_t, void))(*(void *)v11 + 272))(v11, this, HIDWORD(v9), v9, *v12);
  }
  return (*(float (**)(void *, void, uint64_t, uint64_t))(*a1 + 72))(a1, HIDWORD(v9), a3, a4);
}

void sub_1B1EBC03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    MEMORY[0x1B3EA8630](a11, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LM::prepareSentence(LM *this, const unsigned int *a2, unsigned int *a3, unsigned int a4)
{
  if (!*((unsigned char *)this + 146)
    || *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 120))(*((void *)this + 3)) == -1)
  {
    int v10 = 0;
    if (a4) {
      goto LABEL_12;
    }
LABEL_24:
    if (*((unsigned char *)this + 145)) {
      unsigned int v17 = *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
    }
    else {
      unsigned int v17 = -1;
    }
    a3[v10++] = v17;
    goto LABEL_28;
  }
  if (!a4
    || (*((unsigned char *)this + 144) ? (uint64_t v8 = 0) : (uint64_t v8 = a4 - 1),
        unsigned int v9 = a2[v8],
        v9 != *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 120))(*((void *)this + 3))))
  {
    *a3 = *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 120))(*((void *)this + 3));
    int v10 = 1;
    if (a4) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
  int v10 = 0;
LABEL_12:
  unsigned int v11 = 1;
  unsigned int v12 = a4 - 1;
  do
  {
    if (*((unsigned char *)this + 144)) {
      unsigned int v13 = v11 - 1;
    }
    else {
      unsigned int v13 = v12;
    }
    unsigned int v14 = a2[v13];
    if (v14 != *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 136))(*((void *)this + 3))
      && !Vocab::getWord((LM *)((char *)this + 32), v14))
    {
      a3[v10++] = v14;
    }
    ++v11;
    --v12;
  }
  while (v11 <= a4);
  if (*((unsigned char *)this + 144)) {
    uint64_t v15 = a4 - 1;
  }
  else {
    uint64_t v15 = 0;
  }
  unsigned int v16 = a2[v15];
  if (v16 != *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3))) {
    goto LABEL_24;
  }
LABEL_28:
  a3[v10] = -1;
  return (v10 - 2);
}

unsigned int *LM::removeNoise(LM *this, unsigned int *a2)
{
  unsigned int v3 = *a2;
  if (*a2 == -1)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    double v6 = (LM *)((char *)this + 32);
    int v7 = 1;
    uint64_t v8 = a2;
    do
    {
      if (v3 != *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 136))(*((void *)this + 3))
        && !Vocab::getWord(v6, *v8))
      {
        a2[v5++] = *v8;
      }
      uint64_t v8 = &a2[v7];
      unsigned int v3 = *v8;
      ++v7;
    }
    while (*v8 != -1);
  }
  a2[v5] = -1;
  return a2;
}

float LM::sentenceProb(uint64_t a1, Vocab *this, uint64_t a3, uint64_t *a4)
{
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v80 = 0u;
  int v8 = Vocab::length((uint64_t)this, (const unsigned int *)this);
  *(_DWORD *)&v78[8] = 0;
  int v79 = 0;
  int v77 = 0;
  *(void *)float v78 = (v8 + 3);
  if (v8 != -3) {
    Array<unsigned int>::alloc();
  }
  unsigned int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 272))(a1, 1);
  unsigned int v10 = LM::prepareSentence((LM *)a1, (const unsigned int *)this, (unsigned int *)(*(void *)&v78[4] - 4 * v77), 0xFFFFFFFD);
  unsigned int v70 = v9;
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296))(a1);
  if (v11)
  {
    NgramCounts<unsigned long>::NgramCounts((LMStats *)v74, *(Vocab **)(a1 + 24), v11);
    v74[0] = &unk_1F0A32DA8;
    Vocab::reverse(*(void *)&v78[4] - 4 * v77, v12);
    uint64_t v13 = *(void *)&v78[4];
    int v14 = v77;
    if (*(_DWORD *)(*(void *)&v78[4] + 4 * -v77) != -1)
    {
      unsigned int v15 = 0;
      unsigned int v16 = v10;
      do
      {
        if (v16 >= v11) {
          unsigned int v17 = v11;
        }
        else {
          unsigned int v17 = v16;
        }
        if (v15) {
          unsigned int v18 = v17;
        }
        else {
          unsigned int v18 = 1;
        }
        NgramCounts<unsigned long>::incrementCounts((uint64_t)v74, v13 - 4 * v14 + 4 * v15++, v18, 1);
        uint64_t v13 = *(void *)&v78[4];
        int v14 = v77;
        --v16;
      }
      while (*(_DWORD *)(*(void *)&v78[4] + 4 * (int)(v15 - v77)) != -1);
    }
    (*(void (**)(uint64_t, void **))(*(void *)a1 + 304))(a1, v74);
    Vocab::reverse(*(void *)&v78[4] - 4 * v77, v19);
    v74[0] = &unk_1F0A32FE0;
    Trie<unsigned int,unsigned long>::~Trie(&v76);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v74);
  }
  uint64_t v69 = a3;
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v20 = 0;
    int v21 = v10 + 1;
    unsigned int v22 = v10;
    uint64_t v23 = 4 * (int)v10;
    unsigned int v71 = v10;
    do
    {
      unsigned int v24 = (char *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), *(unsigned int *)(*(void *)&v78[4] - 4 * v77 + v23 + 4 * v20));
      std::string::basic_string[abi:ne180100]<0>(v74, v24);
      long long v25 = (char *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), *(unsigned int *)(*(void *)&v78[4] + 4 * (int)(v22 + v20 - v77 + 1)));
      std::string::basic_string[abi:ne180100]<0>(&__p, v25);
      double v26 = 0.0;
      if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
      {
        long long v27 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\tp( ", 4);
        if ((v75 & 0x80u) == 0) {
          uint64_t v29 = v74;
        }
        else {
          uint64_t v29 = (void **)v74[0];
        }
        if ((v75 & 0x80u) == 0) {
          uint64_t v30 = v75;
        }
        else {
          uint64_t v30 = (uint64_t)v74[1];
        }
        uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
        long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" | ", 3);
        if (*(_DWORD *)(*(void *)&v78[4] + 4 * (int)(v22 + v20 - v77 + 1)) == -1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v72, "");
        }
        else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v72, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          std::string v72 = __p;
        }
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v33 = &v72;
        }
        else {
          long long v33 = (std::string *)v72.__r_.__value_.__r.__words[0];
        }
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v72.__r_.__value_.__l.__size_;
        }
        long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, size);
        if (v22 + v20 >= v10) {
          long long v36 = " ";
        }
        else {
          long long v36 = " ...";
        }
        if (v22 + v20 >= v10) {
          uint64_t v37 = 1;
        }
        else {
          uint64_t v37 = 4;
        }
        long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)") \t= ", 5);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
        if (!*(unsigned char *)(a1 + 8))
        {
          if (Debug::debugAll > 2)
          {
            if (Debug::debugAll != 3) {
              goto LABEL_45;
            }
            unsigned int v58 = *(_DWORD *)(a1 + 12);
          }
          else
          {
            unsigned int v58 = *(_DWORD *)(a1 + 12);
            if (v58 < 3) {
              goto LABEL_45;
            }
          }
          if (v58 <= 3) {
            double v26 = (*(double (**)(uint64_t, uint64_t))(*(void *)a1 + 160))(a1, *(void *)&v78[4] + 4 * (int)(v22 + v20 - v77 + 1));
          }
        }
      }
LABEL_45:
      std::allocate_shared[abi:ne180100]<WordInfo,std::allocator<WordInfo>,std::string &,std::string &,void>((long long *)v74, (long long *)&__p, &v72);
      float v39 = (*(float (**)(uint64_t, void, uint64_t, std::string *))(*(void *)a1 + 40))(a1, *(unsigned int *)(*(void *)&v78[4] - 4 * v77 + v23 + 4 * v20), *(void *)&v78[4] + 4 * (int)(v22 + v20 - v77 + 1), &v72);
      if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll > 3 || *(_DWORD *)(a1 + 12) >= 4u))
      {
        int v40 = *(_DWORD *)(*(void *)&v78[4] - 4 * v77 + v23 + 4 * v20);
        float v41 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24));
        if (v40 == *v41) {
          BOOL v42 = (double *)&v84;
        }
        else {
          BOOL v42 = (double *)&v82 + 1;
        }
        if (v40 == *v41) {
          int v43 = (double *)&v84 + 1;
        }
        else {
          int v43 = (double *)&v83;
        }
        if (v40 == *v41) {
          float v44 = (double *)&v85;
        }
        else {
          float v44 = (double *)&v83 + 1;
        }
        LM::updateRanks((const Vocab **)a1, v39, (const unsigned int *)(*(void *)&v78[4] + 4 * (int)(v22 + v20 - v77 + 1)), v42, v43, v44, 1.0);
        *((double *)&v85 + 1) = *((double *)&v85 + 1) + 1.0;
      }
      double v45 = v39;
      long double v46 = 0.0;
      if (v39 != -INFINITY) {
        long double v46 = exp(v45 * 2.30258509);
      }
      std::string::size_type v47 = v72.__r_.__value_.__r.__words[0];
      *(float *)(v72.__r_.__value_.__r.__words[0] + 52) = v39;
      *(long double *)(v47 + 56) = v46;
      std::vector<std::shared_ptr<WordInfo>>::push_back[abi:ne180100](a4, (long long *)&v72);
      if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
      {
        BOOL v48 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" ", 1);
        unint64_t v49 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" [ ", 3);
        int v50 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" ]", 2);
        if (*(unsigned char *)(a1 + 8))
        {
LABEL_64:
          BOOL v51 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
          std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
          BOOL v52 = std::locale::use_facet(&v87, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
          std::locale::~locale(&v87);
          std::ostream::put();
          unsigned int v10 = v71;
          std::ostream::flush();
          goto LABEL_65;
        }
        if (Debug::debugAll > 2)
        {
          if (Debug::debugAll != 3) {
            goto LABEL_64;
          }
          unsigned int v59 = *(_DWORD *)(a1 + 12);
        }
        else
        {
          unsigned int v59 = *(_DWORD *)(a1 + 12);
          if (v59 < 3) {
            goto LABEL_64;
          }
        }
        if (v59 <= 3)
        {
          BOOL v60 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" / ", 3);
          std::ostream::operator<<();
          if (fabs(v26 + -1.0) > 0.0001)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"\nwarning: word probs for this context sum to ", 45);
            BOOL v61 = (void *)std::ostream::operator<<();
            uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" != 1 : ", 8);
            (*(void (**)(void))(**(void **)(a1 + 24) + 328))(*(void *)(a1 + 24));
            int v63 = operator<<(v62, (_DWORD *)(*(void *)&v78[4] + 4 * (int)(v22 + v20 - v77 + 1)));
            std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(void *)(*v63 - 24)));
            int v64 = std::locale::use_facet(&v87, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
            std::locale::~locale(&v87);
            std::ostream::put();
            std::ostream::flush();
          }
        }
        goto LABEL_64;
      }
LABEL_65:
      if (v39 != -INFINITY)
      {
        *(double *)&long long v80 = *(double *)&v80 + v45;
        double v55 = 1.0 - exp(v45 * 2.30258509);
        if (v55 < 0.0) {
          double v55 = 0.0;
        }
        double v57 = *(double *)&v86 + v55 * v55;
        goto LABEL_71;
      }
      int v53 = *(_DWORD *)(*(void *)&v78[4] - 4 * v77 + v23 + 4 * v20);
      int v54 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24));
      double v55 = 1.0;
      BOOL v56 = (double *)&v82;
      if (v53 != *v54)
      {
        *((double *)&v80 + 1) = *((double *)&v80 + 1) + 1.0;
        double v57 = *(double *)&v86 + 1.0;
LABEL_71:
        *(double *)&long long v86 = v57;
        BOOL v56 = (double *)&v86 + 1;
      }
      *BOOL v56 = v55 + *v56;
      if (v72.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v72.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((char)v75 < 0) {
        operator delete(v74[0]);
      }
      --v21;
      --v20;
    }
    while (v21 > 0);
  }
  (*(void (**)(uint64_t, void))(*(void *)a1 + 272))(a1, v70);
  int v65 = *(_DWORD *)(*(void *)&v78[4] - 4 * v77);
  if (v65 == *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24))) {
    *(void *)&long long v81 = 0x3FF0000000000000;
  }
  else {
    ++v10;
  }
  *((double *)&v81 + 1) = *((double *)&v81 + 1) + (double)v10;
  double v66 = TextStats::increment(v69, (uint64_t)&v80);
  double v67 = *(double *)&v80;
  if (*(void *)&v78[4]) {
    MEMORY[0x1B3EA8630](*(void *)&v78[4], 0x1000C8052888210, v66);
  }
  return v67;
}

void sub_1B1EBCE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,std::__shared_weak_count *a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  std::locale::~locale((std::locale *)(v60 - 160));
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a60) {
    MEMORY[0x1B3EA8630](a60, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

void NgramStats::~NgramStats(NgramStats *this)
{
  *(void *)this = &unk_1F0A32FE0;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A32FE0;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

void **std::vector<std::shared_ptr<WordInfo>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    unsigned int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unsigned int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18[2] = v15 + 16;
    std::vector<std::shared_ptr<WordInfo>>::__swap_out_circular_buffer(a1, v18);
    unsigned int v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *int v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1EBD0B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

float LM::contextProb(LM *this, Vocab *a2, unsigned int a3)
{
  unsigned int v6 = Vocab::length((uint64_t)a2, (const unsigned int *)a2);
  float v7 = 0.0;
  if (v6 >= a3) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = v6;
  }
  if (v8)
  {
    unsigned int v9 = v6;
    uint64_t v10 = (*(uint64_t (**)(LM *, void))(*(void *)this + 272))(this, 0);
    uint64_t v11 = 0;
    int v12 = *((_DWORD *)a2 + v8);
    *((_DWORD *)a2 + v8) = -1;
    if (v9 >= a3) {
      unsigned int v13 = a3;
    }
    else {
      unsigned int v13 = v9;
    }
    int v14 = (char *)a2 + 4 * v13;
    unsigned int v15 = (char *)a2 + 4 * v13 - 4;
    int v16 = v8;
    do
    {
      uint64_t v17 = *(unsigned int *)&v15[v11];
      if (!v11
        && v17 == *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3)))
      {
        uint64_t v17 = *(unsigned int *)(*(uint64_t (**)(void))(**((void **)this + 3) + 120))(*((void *)this + 3));
      }
      float v18 = (*(float (**)(LM *, uint64_t, char *))(*(void *)this + 48))(this, v17, &v14[v11]);
      if (v18 != -INFINITY
        || !(*(unsigned int (**)(void, uint64_t))(**((void **)this + 3) + 176))(*((void *)this + 3), v17))
      {
        float v7 = v7 + v18;
      }
      v11 -= 4;
      --v16;
    }
    while (v16);
    (*(void (**)(LM *, uint64_t))(*(void *)this + 272))(this, v10);
    *((_DWORD *)a2 + v8) = v12;
  }
  return v7;
}

void sub_1B1EBD2D4(_Unwind_Exception *a1)
{
  *(_DWORD *)(v1 + 4 * v2) = v3;
  _Unwind_Resume(a1);
}

void LM::countsProb<unsigned long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 296))(a1)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 304))(a1, a2);
  }
  *(_DWORD *)&v70[8] = 0;
  int v71 = 0;
  int v69 = 0;
  *(void *)unsigned int v70 = (a4 + 1);
  if (a4 != -1) {
    Array<unsigned int>::alloc();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 272))(a1, 1);
  uint64_t v60 = a2 + 160;
  float v10 = 0.0;
  uint64_t v11 = 1;
LABEL_6:
  uint64_t v12 = *(void *)&v70[4];
  uint64_t v13 = v69;
  if (*(unsigned char *)(a1 + 8) || Debug::debugAll <= 1 && *(_DWORD *)(a1 + 12) < 2u)
  {
    int v14 = 0;
  }
  else
  {
    uint64_t v15 = v11;
    int v14 = Vocab::compareIndex(*(Vocab **)(a1 + 24));
    uint64_t v11 = v15;
  }
  int v61 = v11;
  TrieIter2<unsigned int,unsigned long>::TrieIter2(v68, v60, v12 - 4 * v13, v11, v14);
  while (1)
  {
    do
    {
      uint64_t v16 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v68);
      uint64_t v18 = v16;
      if (!v16)
      {
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(v68);
        uint64_t v11 = (v61 + 1);
        goto LABEL_6;
      }
      long long v66 = 0u;
      *(_OWORD *)double v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v63 = 0u;
      memset(v62, 0, sizeof(v62));
    }
    while (!*(void *)(v16 + 8));
    Vocab::reverse(*(void *)&v70[4] - 4 * v69, v17);
    if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
    {
      long long v19 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\tp( ", 4);
      int v21 = (const char *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), *(unsigned int *)(*(void *)&v70[4] - 4 * v69));
      size_t v22 = strlen(v21);
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
      unsigned int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" | ", 3);
      (*(void (**)(void))(**(void **)(a1 + 24) + 328))(*(void *)(a1 + 24));
      long long v25 = operator<<(v24, (_DWORD *)(*(void *)&v70[4] + 4 * (1 - v69)));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") \t= ", 6);
    }
    float v26 = (*(float (**)(uint64_t, void, uint64_t))(*(void *)a1 + 48))(a1, *(unsigned int *)(*(void *)&v70[4] + 4 * -v69), *(void *)&v70[4] + 4 * (1 - v69));
    float v27 = 0.0;
    if (a5) {
      float v27 = (*(float (**)(uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 104))(a1, *(void *)&v70[4] - 4 * v69, a4, 0.0);
    }
    unint64_t v28 = *(void *)(v18 + 8);
    double v29 = 0.0;
    if (v27 != -INFINITY) {
      double v29 = exp(v27 * 2.30258509);
    }
    double v30 = v29 * (double)v28;
    if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u)) {
      break;
    }
LABEL_52:
    int v50 = *(_DWORD *)(*(void *)&v70[4] - 4 * v69);
    BOOL v51 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24));
    double v52 = (double)*(unint64_t *)(v18 + 8);
    if (v50 == *v51) {
      uint64_t v53 = 16;
    }
    else {
      uint64_t v53 = 24;
    }
    *(double *)((char *)v62 + v53) = v52;
    if (v26 == -INFINITY)
    {
      int v54 = *(_DWORD *)(*(void *)&v70[4] - 4 * v69);
      double v55 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24));
      double v56 = (double)*(unint64_t *)(v18 + 8);
      if (v54 == *v55)
      {
        *(double *)&long long v63 = (double)*(unint64_t *)(v18 + 8);
        goto LABEL_63;
      }
      *((double *)v62 + 1) = (double)*(unint64_t *)(v18 + 8);
      v67[0] = v56;
    }
    else
    {
      *(double *)uint64_t v62 = v30 * v26;
      float v10 = *(double *)v62 + v10;
      double v57 = 1.0 - exp(v26 * 2.30258509);
      if (v57 < 0.0) {
        double v57 = 0.0;
      }
      double v58 = v57 * v57 * v52;
      double v56 = v57 * v52;
      v67[0] = v58;
    }
    v67[1] = v56;
LABEL_63:
    TextStats::increment(a3, (uint64_t)v62);
    Vocab::reverse(*(void *)&v70[4] - 4 * v69, v59);
  }
  uint64_t v31 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" ", 1);
  if (v26 != -INFINITY) {
    exp(v26 * 2.30258509);
  }
  long long v32 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" [ ", 3);
  std::ostream::operator<<();
  if (v30 != 1.0)
  {
    long long v33 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" *", 2);
    std::ostream::operator<<();
  }
  long long v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" ]", 2);
  if (!*(unsigned char *)(a1 + 8))
  {
    unsigned int v35 = Debug::debugAll;
    if (Debug::debugAll > 3 || *(_DWORD *)(a1 + 12) >= 4u)
    {
      int v36 = *(_DWORD *)(*(void *)&v70[4] - 4 * v69);
      uint64_t v37 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24));
      if (v36 == *v37) {
        long long v38 = (double *)&v65;
      }
      else {
        long long v38 = (double *)&v63 + 1;
      }
      if (v36 == *v37) {
        float v39 = (double *)&v65 + 1;
      }
      else {
        float v39 = (double *)&v64;
      }
      if (v36 == *v37) {
        int v40 = (double *)&v66;
      }
      else {
        int v40 = (double *)&v64 + 1;
      }
      LM::updateRanks((const Vocab **)a1, v26, (const unsigned int *)(*(void *)&v70[4] + 4 * (1 - v69)), v38, v39, v40, (double)*(unint64_t *)(v18 + 8));
      *((double *)&v66 + 1) = (double)*(unint64_t *)(v18 + 8);
      if (*(unsigned char *)(a1 + 8)) {
        goto LABEL_51;
      }
      unsigned int v35 = Debug::debugAll;
    }
    if (v35 <= 2)
    {
      unsigned int v41 = *(_DWORD *)(a1 + 12);
      if (v41 < 3) {
        goto LABEL_51;
      }
LABEL_48:
      if (v41 <= 3)
      {
        double v42 = (*(double (**)(uint64_t, uint64_t))(*(void *)a1 + 160))(a1, *(void *)&v70[4] + 4 * (1 - v69));
        int v43 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" / ", 3);
        std::ostream::operator<<();
        if (fabs(v42 + -1.0) > 0.0001)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"\nwarning: word probs for this context sum to ", 45);
          float v44 = (void *)std::ostream::operator<<();
          double v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" != 1 : ", 8);
          (*(void (**)(void))(**(void **)(a1 + 24) + 328))(*(void *)(a1 + 24));
          long double v46 = operator<<(v45, (_DWORD *)(*(void *)&v70[4] + 4 * (1 - v69)));
          std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
          std::string::size_type v47 = std::locale::use_facet(&v72, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
          std::locale::~locale(&v72);
          std::ostream::put();
          std::ostream::flush();
        }
      }
      goto LABEL_51;
    }
    if (v35 == 3)
    {
      unsigned int v41 = *(_DWORD *)(a1 + 12);
      goto LABEL_48;
    }
  }
LABEL_51:
  BOOL v48 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(void *)(*v48 - 24)));
  unint64_t v49 = std::locale::use_facet(&v72, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
  std::locale::~locale(&v72);
  std::ostream::put();
  std::ostream::flush();
  goto LABEL_52;
}

void sub_1B1EBDCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v36 = *(void *)(v34 - 176);
  if (v36) {
    MEMORY[0x1B3EA8630](v36, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void LM::countsProb<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 296))(a1)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 320))(a1, a2);
  }
  *(_DWORD *)&v65[8] = 0;
  int v66 = 0;
  int v64 = 0;
  *(void *)long long v65 = (a4 + 1);
  if (a4 != -1) {
    Array<unsigned int>::alloc();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 272))(a1, 1);
  uint64_t v56 = a2 + 160;
  float v10 = 0.0;
  uint64_t v11 = 1;
LABEL_6:
  uint64_t v12 = *(void *)&v65[4];
  uint64_t v13 = v64;
  if (*(unsigned char *)(a1 + 8) || Debug::debugAll <= 1 && *(_DWORD *)(a1 + 12) < 2u) {
    int v14 = 0;
  }
  else {
    int v14 = Vocab::compareIndex(*(Vocab **)(a1 + 24));
  }
  TrieIter2<unsigned int,double>::TrieIter2(v63, v56, v12 - 4 * v13, v11, v14);
  while (1)
  {
    do
    {
      uint64_t v15 = TrieIter2<unsigned int,double>::next((uint64_t)v63);
      uint64_t v17 = v15;
      if (!v15)
      {
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(v63);
        uint64_t v11 = (v11 + 1);
        goto LABEL_6;
      }
      long long v61 = 0u;
      *(_OWORD *)uint64_t v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v58 = 0u;
      memset(v57, 0, sizeof(v57));
    }
    while (*(double *)(v15 + 8) == 0.0);
    Vocab::reverse(*(void *)&v65[4] - 4 * v64, v16);
    if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
    {
      uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\tp( ", 4);
      uint64_t v20 = (const char *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), *(unsigned int *)(*(void *)&v65[4] - 4 * v64));
      size_t v21 = strlen(v20);
      size_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" | ", 3);
      (*(void (**)(void))(**(void **)(a1 + 24) + 328))(*(void *)(a1 + 24));
      unsigned int v24 = operator<<(v23, (_DWORD *)(*(void *)&v65[4] + 4 * (1 - v64)));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") \t= ", 6);
    }
    float v25 = (*(float (**)(uint64_t, void, uint64_t))(*(void *)a1 + 48))(a1, *(unsigned int *)(*(void *)&v65[4] + 4 * -v64), *(void *)&v65[4] + 4 * (1 - v64));
    float v26 = 0.0;
    if (a5) {
      float v26 = (*(float (**)(uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 104))(a1, *(void *)&v65[4] - 4 * v64, a4, 0.0);
    }
    double v27 = *(double *)(v17 + 8);
    double v28 = 0.0;
    if (v26 != -INFINITY) {
      double v28 = exp(v26 * 2.30258509);
    }
    double v29 = v27 * v28;
    if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u)) {
      break;
    }
LABEL_52:
    int v49 = *(_DWORD *)(*(void *)&v65[4] - 4 * v64);
    int v50 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24));
    uint64_t v51 = 24;
    if (v49 == *v50) {
      uint64_t v51 = 16;
    }
    *(void *)((char *)v57 + v51) = *(void *)(v17 + 8);
    if (v25 == -INFINITY)
    {
      int v52 = *(_DWORD *)(*(void *)&v65[4] - 4 * v64);
      if (v52 == *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24)))
      {
        *(void *)&long long v58 = *(void *)(v17 + 8);
        goto LABEL_62;
      }
      *((void *)&v57[0] + 1) = *(void *)(v17 + 8);
      v62[0] = *(double *)(v17 + 8);
      double v54 = *(double *)(v17 + 8);
    }
    else
    {
      *(double *)double v57 = v29 * v25;
      float v10 = *(double *)v57 + v10;
      double v53 = 1.0 - exp(v25 * 2.30258509);
      if (v53 < 0.0) {
        double v53 = 0.0;
      }
      v62[0] = v53 * v53 * *(double *)(v17 + 8);
      double v54 = v53 * *(double *)(v17 + 8);
    }
    v62[1] = v54;
LABEL_62:
    TextStats::increment(a3, (uint64_t)v57);
    Vocab::reverse(*(void *)&v65[4] - 4 * v64, v55);
  }
  double v30 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" ", 1);
  if (v25 != -INFINITY) {
    exp(v25 * 2.30258509);
  }
  uint64_t v31 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" [ ", 3);
  std::ostream::operator<<();
  if (v29 != 1.0)
  {
    long long v32 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" *", 2);
    std::ostream::operator<<();
  }
  long long v33 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" ]", 2);
  if (!*(unsigned char *)(a1 + 8))
  {
    unsigned int v34 = Debug::debugAll;
    if (Debug::debugAll > 3 || *(_DWORD *)(a1 + 12) >= 4u)
    {
      int v35 = *(_DWORD *)(*(void *)&v65[4] - 4 * v64);
      uint64_t v36 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24));
      if (v35 == *v36) {
        uint64_t v37 = (double *)&v60;
      }
      else {
        uint64_t v37 = (double *)&v58 + 1;
      }
      if (v35 == *v36) {
        long long v38 = (double *)&v60 + 1;
      }
      else {
        long long v38 = (double *)&v59;
      }
      if (v35 == *v36) {
        float v39 = (double *)&v61;
      }
      else {
        float v39 = (double *)&v59 + 1;
      }
      LM::updateRanks((const Vocab **)a1, v25, (const unsigned int *)(*(void *)&v65[4] + 4 * (1 - v64)), v37, v38, v39, *(double *)(v17 + 8));
      *((void *)&v61 + 1) = *(void *)(v17 + 8);
      if (*(unsigned char *)(a1 + 8)) {
        goto LABEL_51;
      }
      unsigned int v34 = Debug::debugAll;
    }
    if (v34 <= 2)
    {
      unsigned int v40 = *(_DWORD *)(a1 + 12);
      if (v40 < 3) {
        goto LABEL_51;
      }
LABEL_48:
      if (v40 <= 3)
      {
        double v41 = (*(double (**)(uint64_t, uint64_t))(*(void *)a1 + 160))(a1, *(void *)&v65[4] + 4 * (1 - v64));
        double v42 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" / ", 3);
        std::ostream::operator<<();
        if (fabs(v41 + -1.0) > 0.0001)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"\nwarning: word probs for this context sum to ", 45);
          int v43 = (void *)std::ostream::operator<<();
          float v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" != 1 : ", 8);
          (*(void (**)(void))(**(void **)(a1 + 24) + 328))(*(void *)(a1 + 24));
          double v45 = operator<<(v44, (_DWORD *)(*(void *)&v65[4] + 4 * (1 - v64)));
          std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
          long double v46 = std::locale::use_facet(&v67, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
          std::locale::~locale(&v67);
          std::ostream::put();
          std::ostream::flush();
        }
      }
      goto LABEL_51;
    }
    if (v34 == 3)
    {
      unsigned int v40 = *(_DWORD *)(a1 + 12);
      goto LABEL_48;
    }
  }
LABEL_51:
  std::string::size_type v47 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(void *)(*v47 - 24)));
  BOOL v48 = std::locale::use_facet(&v67, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
  std::locale::~locale(&v67);
  std::ostream::put();
  std::ostream::flush();
  goto LABEL_52;
}

void sub_1B1EBE74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v36 = *(void *)(v34 - 176);
  if (v36) {
    MEMORY[0x1B3EA8630](v36, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

unint64_t LM::pplCountsFile<unsigned long>(uint64_t a1, File *a2, uint64_t a3, uint64_t a4, char *__s, int a6, uint64_t a7)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (__s) {
    unsigned int v13 = strlen(__s);
  }
  else {
    unsigned int v13 = 0;
  }
  int v14 = *(const char **)(a1 + 136);
  if (v14) {
    size_t v15 = strlen(v14);
  }
  else {
    size_t v15 = 0;
  }
  memset(v59, 0, 512);
  *(_DWORD *)&v55[8] = 0;
  int v56 = 0;
  int v54 = 0;
  *(void *)double v55 = (a3 + 1);
  unsigned int v42 = a3 + 1;
  if (a3 != -1) {
    Array<unsigned int>::alloc();
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v16 = a7;
  long long v47 = 0u;
  uint64_t v44 = a7;
  if (!a7) {
    operator new();
  }
  uint64_t v45 = a4;
  size_t v17 = v13;
LABEL_12:
  int v18 = 0;
  long double v46 = (void *)(v16 + 160);
  while (1)
  {
    long long v19 = File::getline(a2);
    size_t v21 = v19;
    if (!v19) {
      break;
    }
    if (__s && !strncmp(v19, __s, v17))
    {
      if (v18)
      {
        LM::countsProb<unsigned long>(a1, v16, (uint64_t)&v47, a3, a6);
        if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
        {
          long long v32 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
          long long v33 = operator<<(v32, (double *)&v47);
          std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
          uint64_t v34 = std::locale::use_facet(&v58, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
          std::locale::~locale(&v58);
          std::ostream::put();
          std::ostream::flush();
        }
        TextStats::increment(v45, (uint64_t)&v47);
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v47 = 0u;
        if (!v44)
        {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          operator new();
        }
        LHash<unsigned int,Trie<unsigned int,unsigned long>>::clear(v46, 0);
      }
      int v35 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      size_t v36 = strlen(v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v21, v36);
      goto LABEL_12;
    }
    size_t v22 = *(const char **)(a1 + 136);
    if (v22 && !strncmp(v21, v22, v15))
    {
      (*(void (**)(uint64_t, char *))(*(void *)a1 + 152))(a1, &v21[v15]);
    }
    else
    {
      v58.__locale_ = 0;
      if (NgramCounts<unsigned long>::parseNgram((Vocab *)v21, (char *)v59, (const char **)0x65, (char **)&v58))
      {
        int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
        uint64_t v24 = *(void *)(a1 + 24);
        uint64_t v25 = *(void *)&v55[4];
        uint64_t v26 = v54;
        if (v23)
        {
          (*(void (**)(void, _OWORD *, uint64_t, void))(*(void *)v24 + 256))(*(void *)(a1 + 24), v59, *(void *)&v55[4] - 4 * v54, v42);
        }
        else
        {
          double v29 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v24 + 88))(*(void *)(a1 + 24));
          (*(void (**)(uint64_t, _OWORD *, uint64_t, void, void))(*(void *)v24 + 272))(v24, v59, v25 - 4 * v26, v42, *v29);
        }
        locale = v58.__locale_;
        char v57 = 0;
        inserted = Trie<unsigned int,unsigned long>::insertTrie(v46, (unsigned int *)(*(void *)&v55[4] - 4 * v54), &v57);
        inserted[1] += locale;
        int v18 = 1;
      }
      else
      {
        double v27 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"malformed N-gram count or more than ", 36);
        double v28 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" words per line\n", 16);
      }
    }
  }
  if (v18)
  {
    LM::countsProb<unsigned long>(a1, v16, (uint64_t)&v47, a3, a6);
    if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
    {
      uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      long long v38 = operator<<(v37, (double *)&v47);
      std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
      float v39 = std::locale::use_facet(&v58, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
      std::locale::~locale(&v58);
      std::ostream::put();
      std::ostream::flush();
    }
    v20.n128_f64[0] = TextStats::increment(v45, (uint64_t)&v47);
  }
  double v40 = *(double *)(v45 + 24);
  if (*(void *)&v55[4]) {
    MEMORY[0x1B3EA8630](*(void *)&v55[4], 0x1000C8052888210, v20);
  }
  return (unint64_t)v40;
}

void sub_1B1EBEE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::locale a32)
{
  MEMORY[0x1B3EA8670](v32, 0x10A1C40C5E9EE53);
  if (a29) {
    MEMORY[0x1B3EA8630](a29, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

double LM::pplCountsFile<double>(uint64_t a1, File *a2, uint64_t a3, uint64_t a4, char *__s, int a6, uint64_t a7)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (__s) {
    unsigned int v13 = strlen(__s);
  }
  else {
    unsigned int v13 = 0;
  }
  int v14 = *(const char **)(a1 + 136);
  if (v14) {
    size_t v15 = strlen(v14);
  }
  else {
    size_t v15 = 0;
  }
  memset(v59, 0, 512);
  *(_DWORD *)&v55[8] = 0;
  int v56 = 0;
  int v54 = 0;
  *(void *)double v55 = (a3 + 1);
  unsigned int v42 = a3 + 1;
  if (a3 != -1) {
    Array<unsigned int>::alloc();
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v16 = a7;
  long long v47 = 0u;
  uint64_t v44 = a7;
  if (!a7) {
    operator new();
  }
  uint64_t v45 = a4;
  size_t v17 = v13;
LABEL_12:
  int v18 = 0;
  long double v46 = (void *)(v16 + 160);
  while (1)
  {
    long long v19 = File::getline(a2);
    size_t v21 = v19;
    if (!v19) {
      break;
    }
    if (__s && !strncmp(v19, __s, v17))
    {
      if (v18)
      {
        LM::countsProb<double>(a1, v16, (uint64_t)&v47, a3, a6);
        if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
        {
          uint64_t v32 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
          long long v33 = operator<<(v32, (double *)&v47);
          std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
          uint64_t v34 = std::locale::use_facet(&v58, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
          std::locale::~locale(&v58);
          std::ostream::put();
          std::ostream::flush();
        }
        TextStats::increment(v45, (uint64_t)&v47);
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v47 = 0u;
        if (!v44)
        {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          operator new();
        }
        LHash<unsigned int,Trie<unsigned int,unsigned long>>::clear(v46, 0);
      }
      int v35 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      size_t v36 = strlen(v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v21, v36);
      goto LABEL_12;
    }
    size_t v22 = *(const char **)(a1 + 136);
    if (v22 && !strncmp(v21, v22, v15))
    {
      (*(void (**)(uint64_t, char *))(*(void *)a1 + 152))(a1, &v21[v15]);
    }
    else
    {
      *(double *)&v58.__locale_ = 0.0;
      if (NgramCounts<double>::parseNgram((Vocab *)v21, (char *)v59, (const char **)0x65, (char **)&v58))
      {
        int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
        uint64_t v24 = *(void *)(a1 + 24);
        uint64_t v25 = *(void *)&v55[4];
        uint64_t v26 = v54;
        if (v23)
        {
          (*(void (**)(void, _OWORD *, uint64_t, void))(*(void *)v24 + 256))(*(void *)(a1 + 24), v59, *(void *)&v55[4] - 4 * v54, v42);
        }
        else
        {
          double v29 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v24 + 88))(*(void *)(a1 + 24));
          (*(void (**)(uint64_t, _OWORD *, uint64_t, void, void))(*(void *)v24 + 272))(v24, v59, v25 - 4 * v26, v42, *v29);
        }
        locale = v58.__locale_;
        char v57 = 0;
        inserted = (double *)Trie<unsigned int,unsigned long>::insertTrie(v46, (unsigned int *)(*(void *)&v55[4] - 4 * v54), &v57);
        inserted[1] = *(double *)&locale + inserted[1];
        int v18 = 1;
      }
      else
      {
        double v27 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"malformed N-gram count or more than ", 36);
        double v28 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" words per line\n", 16);
      }
    }
  }
  if (v18)
  {
    LM::countsProb<double>(a1, v16, (uint64_t)&v47, a3, a6);
    if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
    {
      uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      long long v38 = operator<<(v37, (double *)&v47);
      std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
      float v39 = std::locale::use_facet(&v58, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
      std::locale::~locale(&v58);
      std::ostream::put();
      std::ostream::flush();
    }
    v20.n128_f64[0] = TextStats::increment(v45, (uint64_t)&v47);
  }
  double v40 = *(double *)(v45 + 24);
  if (*(void *)&v55[4]) {
    MEMORY[0x1B3EA8630](*(void *)&v55[4], 0x1000C8052888210, v20);
  }
  return v40;
}

void sub_1B1EBF514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::locale a32)
{
  MEMORY[0x1B3EA8670](v32, 0x10A1C40C5E9EE53);
  if (a29) {
    MEMORY[0x1B3EA8630](a29, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

uint64_t LM::pplFile(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v4 = v3;
  unsigned int v6 = v5;
  uint64_t v8 = v7;
  float v10 = v9;
  uint64_t v11 = v2;
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  if (v3) {
    size_t v12 = strlen(v3);
  }
  else {
    size_t v12 = 0;
  }
  unsigned int v13 = *(const char **)(v11 + 136);
  if (v13) {
    size_t v14 = strlen(v13);
  }
  else {
    size_t v14 = 0;
  }
  uint64_t v58 = 0;
  int v15 = 0;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  *(_OWORD *)float v78 = 0u;
  long long v79 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  char v57 = v6;
  int v56 = v6 + 2;
  long long v70 = 0u;
  memset(&__p, 0, sizeof(__p));
  uint64_t v16 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    size_t v17 = File::getline(v10);
    long long v19 = v17;
    if (!v17) {
      break;
    }
    if (v4 && !strncmp(v17, v4, v12))
    {
      if (v15 && !*(_DWORD *)(v11 + 12))
      {
        int v23 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
        uint64_t v24 = operator<<(v23, (double *)&v70);
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
        uint64_t v25 = std::locale::use_facet(v62, v16);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale(v62);
        std::ostream::put();
        std::ostream::flush();
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        HIDWORD(v58) = 1;
        long long v70 = 0u;
      }
      uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
      size_t v27 = strlen(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v19, v27);
      std::string::basic_string[abi:ne180100]<0>(v62, &v19[v12]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[2] = v63;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v62[0].__locale_;
      p_p = (std::locale::__imp *)&__p;
      if ((SBYTE7(v63) & 0x80u) == 0)
      {
        uint64_t locale = BYTE7(v63);
      }
      else
      {
        p_p = v62[0].__locale_;
        uint64_t locale = (uint64_t)v62[1].__locale_;
      }
      double v30 = (char *)p_p - 1;
      while (locale)
      {
        if (!memchr(" \n\r\t", v30[locale--], 4uLL)) {
          goto LABEL_29;
        }
      }
      uint64_t locale = -1;
LABEL_29:
      std::string::erase(&__p, locale + 1, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      __n128 v20 = *(const char **)(v11 + 136);
      if (v20 && !strncmp(v19, v20, v14))
      {
        (*(void (**)(uint64_t, char *))(*(void *)v11 + 152))(v11, &v19[v14]);
      }
      else
      {
        int v21 = Vocab::parseWords((Vocab *)v19, v78, (const char **)0xC351, v18);
        ++v15;
        if (v21 == 50001)
        {
          size_t v22 = File::position((const char **)v10, MEMORY[0x1E4FBA240]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"too many words per sentence\n", 28);
        }
        else
        {
          long long v67 = 0u;
          long long v68 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          *(_OWORD *)&v62[0].__locale_ = 0u;
          if (!*(unsigned char *)(v11 + 8) && (Debug::debugAll || *(_DWORD *)(v11 + 12)))
          {
            uint64_t v32 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
            long long v33 = operator<<(v32, (const char **)v78);
            std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
            uint64_t v34 = std::locale::use_facet((const std::locale *)&v59, v16);
            ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
            std::locale::~locale((std::locale *)&v59);
            std::ostream::put();
            std::ostream::flush();
          }
          uint64_t v55 = v8;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v59, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v59 = __p;
          }
          long long v60 = 0uLL;
          uint64_t v61 = 0;
          int v35 = v57;
          unint64_t v36 = v57[1];
          unint64_t v37 = v57[2];
          if (v36 >= v37)
          {
            unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *v57) >> 4);
            unint64_t v41 = v40 + 1;
            if (v40 + 1 > 0x555555555555555) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v57) >> 4);
            if (2 * v42 > v41) {
              unint64_t v41 = 2 * v42;
            }
            if (v42 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v43 = 0x555555555555555;
            }
            else {
              unint64_t v43 = v41;
            }
            v77[4] = v56;
            uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)v56, v43);
            uint64_t v45 = &v44[48 * v40];
            v77[0] = v44;
            v77[1] = v45;
            v77[3] = &v44[48 * v46];
            long long v47 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
            *((void *)v45 + 2) = *((void *)&v59.__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v45 = v47;
            memset(&v59, 0, sizeof(v59));
            *((void *)v45 + 3) = 0;
            *((void *)v45 + 4) = 0;
            *((void *)v45 + 5) = 0;
            *(_OWORD *)(v45 + 24) = v60;
            *((void *)v45 + 5) = v61;
            int v35 = v57;
            long long v60 = 0uLL;
            uint64_t v61 = 0;
            v77[2] = v45 + 48;
            std::vector<SentenceInfo>::__swap_out_circular_buffer(v57, v77);
            uint64_t v39 = v57[1];
            std::__split_buffer<SentenceInfo>::~__split_buffer(v77);
          }
          else
          {
            long long v38 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
            *(void *)(v36 + 16) = *((void *)&v59.__r_.__value_.__l + 2);
            *(void *)(v36 + 24) = 0;
            *(_OWORD *)unint64_t v36 = v38;
            memset(&v59, 0, sizeof(v59));
            *(void *)(v36 + 32) = 0;
            *(void *)(v36 + 40) = 0;
            *(_OWORD *)(v36 + 24) = v60;
            *(void *)(v36 + 40) = v61;
            long long v60 = 0uLL;
            uint64_t v61 = 0;
            uint64_t v39 = v36 + 48;
          }
          v35[1] = v39;
          v77[0] = &v60;
          std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          uint64_t v8 = v55;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            *__p.__r_.__value_.__l.__data_ = 0;
            __p.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
          }
          (*(void (**)(uint64_t, char *, std::locale *, uint64_t))(*(void *)v11 + 88))(v11, v78, v62, v57[1] - 24);
          if (!*(unsigned char *)(v11 + 8) && (Debug::debugAll || *(_DWORD *)(v11 + 12)))
          {
            long long v48 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
            long long v49 = operator<<(v48, (double *)v62);
            std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(*v49 - 24)));
            long long v50 = std::locale::use_facet((const std::locale *)&v59, v16);
            ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
            std::locale::~locale((std::locale *)&v59);
            std::ostream::put();
            std::ostream::flush();
          }
          TextStats::increment(v55, (uint64_t)v62);
          TextStats::increment((uint64_t)&v70, (uint64_t)v62);
          LODWORD(v58) = v21 + v58;
        }
      }
    }
  }
  if (HIDWORD(v58))
  {
    long long v51 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
    long long v52 = operator<<(v51, (double *)&v70);
    std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24)));
    long long v53 = std::locale::use_facet(v62, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
    std::locale::~locale(v62);
    std::ostream::put();
    std::ostream::flush();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v58;
}

void sub_1B1EBFDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SentenceInfo::~SentenceInfo(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t LM::rescoreFile(LM *this, File *a2, double a3, double a4, LM *a5, double a6, double a7, const char *a8)
{
  if (a8) {
    size_t v16 = strlen(a8);
  }
  else {
    size_t v16 = 0;
  }
  size_t v17 = (const char *)*((void *)this + 17);
  if (v17) {
    size_t v18 = strlen(v17);
  }
  else {
    size_t v18 = 0;
  }
  long long v19 = File::getline(a2);
  if (!v19) {
    return 0;
  }
  __n128 v20 = v19;
  uint64_t v21 = 0;
  size_t v22 = (FILE **)MEMORY[0x1E4F143D8];
  do
  {
    if (a8 && !strncmp(v20, a8, v16))
    {
      fputs(v20, *v22);
    }
    else
    {
      int v23 = (const char *)*((void *)this + 17);
      if (v23 && !strncmp(v20, v23, v18))
      {
        (*(void (**)(LM *, char *))(*(void *)this + 152))(this, &v20[v18]);
      }
      else
      {
        NBestHyp::NBestHyp((NBestHyp *)v31);
        if (NBestHyp::parse((NBestHyp *)v31, (Vocab *)v20, *((Vocab **)this + 3), 0, 0.0, 0, 0))
        {
          NBestHyp::decipherFix((NBestHyp *)v31, a5, a6, a7);
          NBestHyp::rescore((NBestHyp *)v31, this, a3, a4);
          double v30 = a5;
          fprintf(*v22, "%g %g %lu", *(double *)&v31[2], *(double *)&v31[3], v31[4]);
          if (*(_DWORD *)v31[0] != -1)
          {
            unsigned int v24 = 1;
            do
            {
              uint64_t v25 = *v22;
              uint64_t v26 = (const char *)(*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
              fprintf(v25, " %s", v26);
              int v27 = *(_DWORD *)(v31[0] + 4 * v24++);
            }
            while (v27 != -1);
          }
          fputc(10, *v22);
          a5 = v30;
        }
        else
        {
          double v28 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"bad n-best hyp format\n", 22);
        }
        uint64_t v21 = (v21 + 1);
        NBestHyp::~NBestHyp((NBestHyp *)v31);
      }
    }
    __n128 v20 = File::getline(a2);
  }
  while (v20);
  return v21;
}

void sub_1B1EC00F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  NBestHyp::~NBestHyp((NBestHyp *)va);
  _Unwind_Resume(a1);
}

uint64_t LM::probServer(LM *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this, a2);
  int v105 = v3;
  unsigned int v5 = v4;
  uint64_t v6 = v2;
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  int v7 = socket(2, 1, 0);
  if (v7 == -1)
  {
    long long v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"could not create socket: ", 25);
    long long v65 = __error();
    long long v66 = srilm_ts_strerror(*v65);
    size_t v67 = strlen(v66);
    long long v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v66, v67);
    std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(void *)(*v68 - 24)));
    int v69 = std::locale::use_facet(v114, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
    std::locale::~locale(v114);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  *(void *)&v117.sa_len = 512;
  *(void *)&v117.sa_data[6] = 0;
  *(_DWORD *)v117.sa_data = bswap32(v5) >> 16;
  int v104 = v7;
  if (bind(v7, &v117, 0x10u) == -1 || (v105 ? (int v8 = 10 * v105) : (int v8 = 1000), listen(v104, v8) == -1))
  {
    long long v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"could not bind socket: ", 23);
    long long v71 = __error();
    long long v72 = srilm_ts_strerror(*v71);
    size_t v73 = strlen(v72);
    long long v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v72, v73);
    std::ios_base::getloc((const std::ios_base *)((char *)v74 + *(void *)(*v74 - 24)));
    long long v75 = std::locale::use_facet(v114, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
    std::locale::~locale(v114);
    std::ostream::put();
    std::ostream::flush();
    close(v104);
    return 0;
  }
  for (unsigned int i = 0; ; ++i)
  {
    while (1)
    {
      while (1)
      {
        while (waitpid(-1, 0, 1) >= 1)
          --i;
        if (v105 - 1 >= i) {
          break;
        }
        sleep(5u);
      }
      socklen_t v111 = 16;
      int v106 = accept(v104, &v116, &v111);
      if (v106 == -1)
      {
        long long v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"could not accept connection: ", 29);
        int v77 = __error();
        float v78 = srilm_ts_strerror(*v77);
        size_t v79 = strlen(v78);
        long long v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v78, v79);
        goto LABEL_77;
      }
      if (v105 != 1) {
        break;
      }
LABEL_17:
      v10.s_addr = *(_DWORD *)&v116.sa_data[2];
      uint64_t v11 = inet_ntoa(v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"client ", 7);
      size_t v12 = (void *)std::ostream::operator<<();
      unsigned int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"@", 1);
      size_t v14 = strlen(v11);
      int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v11, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": connection accepted\n", 22);
      unsigned int v103 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 272))(v6, 1);
      if (send(v106, "probserver ready\n", 0x11uLL, 0) == -1)
      {
        std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x1E4FBA240], "client ");
        long long v96 = (void *)std::ostream::operator<<();
        long long v97 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v96, "@");
        long long v98 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v97, v11);
        long long v99 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v98, ": send: ");
        long long v100 = __error();
        long long v101 = srilm_ts_strerror(*v100);
        long long v102 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v99, v101);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v102);
        exit(-1);
      }
      int v16 = recv(v106, v115, 0x1388uLL, 0);
      if ((v16 + 1) >= 2)
      {
        int v17 = 0;
        unsigned int v18 = 1;
        do
        {
          v115[v16] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v110, "");
          *(void *)long long v109 = 0;
          for (uint64_t j = MStringTokUtil::strtok_r((MStringTokUtil *)v115, "\n", v109, v19);
                j;
                uint64_t j = MStringTokUtil::strtok_r(0, "\n", v109, v31))
          {
            if (!*(unsigned char *)(v6 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v6 + 12) >= 2u))
            {
              size_t v22 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"client ", 7);
              int v23 = (void *)std::ostream::operator<<();
              unsigned int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"@", 1);
              size_t v25 = strlen(v11);
              uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v11, v25);
              int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
              size_t v28 = strlen((const char *)j);
              double v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)j, v28);
              std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
              double v30 = std::locale::use_facet(v114, MEMORY[0x1E4FBA258]);
              ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
              std::locale::~locale(v114);
              std::ostream::put();
              std::ostream::flush();
            }
            memset(v114, 0, 512);
            int v32 = Vocab::parseWords(j, (char *)v114, (const char **)0xC352, v20);
            if (v32)
            {
              if (!*(unsigned char *)(v6 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v6 + 12) >= 2u))
              {
                long long v33 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"client ", 7);
                uint64_t v34 = (void *)std::ostream::operator<<();
                int v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"@", 1);
                size_t v36 = strlen(v11);
                unint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v11, v36);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
              }
              uint64_t locale = v114[0].__locale_;
              if (!strcmp((const char *)v114[0].__locale_, "_R_E_M_O_T_E_L_M_V=2"))
              {
                snprintf(v113, 0x100uLL, "%s\n");
                goto LABEL_46;
              }
              if (v18 != 1 && strcmp((const char *)locale, "W"))
              {
                if (!strcmp((const char *)locale, "C1"))
                {
                  uint64_t v43 = *(void *)(v6 + 24);
                  uint64_t v44 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v43 + 88))(v43);
                  (*(void (**)(uint64_t, std::locale *, _DWORD *, uint64_t, void))(*(void *)v43 + 272))(v43, &v114[1], v112, 50000, *v44);
                  Vocab::reverse((uint64_t)v112, v45);
                  unsigned int v108 = 0;
                  (*(void (**)(uint64_t, _DWORD *, unsigned int *))(*(void *)v6 + 200))(v6, v112, &v108);
                }
                else
                {
                  if (strcmp((const char *)locale, "C2"))
                  {
                    if (!strcmp((const char *)locale, "B"))
                    {
                      unsigned int v108 = 0;
                      sscanf((const char *)v114[v32 - 1].__locale_, "%u", &v108);
                      v114[v32 - 1].__locale_ = 0;
                      uint64_t v51 = *(void *)(v6 + 24);
                      long long v52 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v51 + 88))(v51);
                      (*(void (**)(uint64_t, std::locale *, _DWORD *, uint64_t, void))(*(void *)v51 + 272))(v51, &v114[1], v112, 50000, *v52);
                      Vocab::reverse((uint64_t)v112, v53);
                      (*(float (**)(uint64_t, _DWORD *, void))(*(void *)v6 + 216))(v6, v112, v108);
                      snprintf(v113, 0x100uLL, "%s %g\n");
                    }
                    else
                    {
                      snprintf(v113, 0x100uLL, "%s command unknown\n");
                    }
LABEL_46:
                    unsigned int v18 = 2;
LABEL_47:
                    std::string::append(&v110, v113);
                    continue;
                  }
                  uint64_t v46 = *(void *)(v6 + 24);
                  long long v47 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v46 + 88))(v46);
                  (*(void (**)(uint64_t, std::locale *, _DWORD *, uint64_t, void))(*(void *)v46 + 272))(v46, &v114[1], v112, 50000, *v47);
                  int v48 = v32 - 1;
                  uint64_t v49 = v112[v32 - 1];
                  v112[v48] = -1;
                  Vocab::reverse((uint64_t)v112, v50);
                  unsigned int v108 = 0;
                  (*(void (**)(uint64_t, uint64_t, _DWORD *, unsigned int *))(*(void *)v6 + 208))(v6, v49, v112, &v108);
                }
                snprintf(v113, 0x100uLL, "%s %llu %u\n");
                goto LABEL_46;
              }
              int v40 = v32 - 1;
              unint64_t v41 = v114[v32 - 1].__locale_;
              v114[v40].__locale_ = 0;
              unint64_t v42 = (unint64_t)v114 | (8 * (v18 > 1));
              Vocab::reverse(v42, v39);
              (*(float (**)(uint64_t, std::locale::__imp *, unint64_t))(*(void *)v6 + 56))(v6, v41, v42);
              if (v18 == 1) {
                snprintf(v113, 0x100uLL, "%g\n");
              }
              else {
                snprintf(v113, 0x100uLL, "%s %g\n");
              }
              ++v17;
              goto LABEL_47;
            }
          }
          if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v54 = &v110;
          }
          else {
            int v54 = (std::string *)v110.__r_.__value_.__r.__words[0];
          }
          if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v110.__r_.__value_.__l.__size_;
          }
          if (send(v106, v54, size, 0) == -1)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"client ", 7);
            long long v87 = (void *)std::ostream::operator<<();
            long long v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"@", 1);
            size_t v89 = strlen(v11);
            long long v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v11, v89);
            long long v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)": send: ", 8);
            long long v92 = __error();
            long long v93 = srilm_ts_strerror(*v92);
            size_t v94 = strlen(v93);
            long long v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)v93, v94);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v95);
            exit(-1);
          }
          if (!*(unsigned char *)(v6 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v6 + 12) >= 2u))
          {
            int v56 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v57 = &v110;
            }
            else {
              char v57 = (std::string *)v110.__r_.__value_.__r.__words[0];
            }
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v58 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v58 = v110.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
          }
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          int v16 = recv(v106, v115, 0x1388uLL, 0);
        }
        while ((v16 + 1) >= 2);
      }
      close(v106);
      (*(void (**)(uint64_t, void))(*(void *)v6 + 272))(v6, v103);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"client ", 7);
      std::string v59 = (void *)std::ostream::operator<<();
      long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"@", 1);
      size_t v61 = strlen(v11);
      uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v11, v61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)": ", 2);
      long long v63 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" probabilities served\n", 22);
      if (v105 != 1) {
        exit(0);
      }
    }
    pid_t v9 = fork();
    if (v9 < 0) {
      break;
    }
    if (!v9) {
      goto LABEL_17;
    }
    close(v106);
  }
  long long v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"fork failed: ", 13);
  long long v82 = __error();
  long long v83 = srilm_ts_strerror(*v82);
  size_t v84 = strlen(v83);
  long long v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v83, v84);
  int v104 = v106;
LABEL_77:
  std::ios_base::getloc((const std::ios_base *)((char *)v80 + *(void *)(*v80 - 24)));
  long long v85 = std::locale::use_facet(v114, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
  std::locale::~locale(v114);
  std::ostream::put();
  std::ostream::flush();
  close(v104);
  return 0;
}

void sub_1B1EC10BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

uint64_t LM::generateWord(const Vocab **this, const unsigned int *a2)
{
  unsigned int v21 = -1;
  unsigned int v4 = (std::locale::id *)MEMORY[0x1E4FBA258];
  do
  {
    double v5 = drand48();
    VocabIter::VocabIter((VocabIter *)v20, this[3], 0);
    double v6 = 0.0;
    if (v5 >= 0.0)
    {
      char v7 = 0;
      double v8 = 0.0;
      do
      {
        if (!VocabIter::next((VocabIter *)v20, &v21)) {
          break;
        }
        pid_t v9 = *this;
        if (v7) {
          in_addr v10 = (const Vocab *)((char *)v9 + 64);
        }
        else {
          in_addr v10 = (const Vocab *)((char *)v9 + 48);
        }
        float v11 = (*(float (**)(const Vocab **, void, const unsigned int *))v10)(this, v21, a2);
        double v6 = 0.0;
        if (v11 != -INFINITY) {
          double v6 = exp(v11 * 2.30258509);
        }
        double v8 = v8 + v6;
        char v7 = 1;
      }
      while (v8 <= v5);
    }
    if ((*((unsigned int (**)(const Vocab **, void))*this + 29))(this, v21))
    {
      if (v6 > 0.0 && !*((unsigned char *)this + 8) && (Debug::debugAll > 1 || *((_DWORD *)this + 3) >= 2u))
      {
        size_t v12 = (void *)(*((uint64_t (**)(const Vocab **))*this + 3))(this);
        unsigned int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"nonword ", 8);
        size_t v14 = (const char *)(*(uint64_t (**)(const Vocab *, void))(*(void *)this[3] + 32))(this[3], v21);
        size_t v15 = strlen(v14);
        int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" has nonzero probability ", 25);
        int v17 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
        unsigned int v18 = std::locale::use_facet(&v22, v4);
        ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale(&v22);
        std::ostream::put();
        std::ostream::flush();
      }
      unsigned int v21 = -1;
    }
    LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)v20);
    uint64_t result = v21;
  }
  while (v21 == -1);
  return result;
}

void sub_1B1EC141C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
}

unsigned int *LM::generateSentence(LM *this, signed int a2, unsigned int *a3, unsigned int *a4)
{
  double v8 = (_DWORD **)viDefaultResultSize();
  pid_t v9 = *v8;
  if (!*v8)
  {
    in_addr v10 = v8;
    pid_t v9 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *in_addr v10 = v9;
  }
  float v11 = (unsigned int ***)viDefaultResult();
  unsigned int v13 = *v11;
  if (*v11)
  {
    if (a3) {
      goto LABEL_11;
    }
  }
  else
  {
    size_t v14 = v11;
    unsigned int v13 = (unsigned int **)malloc_type_calloc(1uLL, 8uLL, 0x10040436913F5uLL);
    *size_t v14 = v13;
    if (a3) {
      goto LABEL_11;
    }
  }
  a3 = *v13;
  if ((a2 + 1) > *v9)
  {
    *pid_t v9 = a2 + 1;
    if (a3) {
      MEMORY[0x1B3EA8630](a3, 0x1000C8052888210);
    }
    operator new[]();
  }
LABEL_11:
  if (a4) {
    unsigned int v15 = Vocab::length((uint64_t)a4, v12);
  }
  else {
    unsigned int v15 = *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3)) != -1;
  }
  signed int v16 = v15 + a2;
  *(_DWORD *)&v27[8] = 0;
  *(void *)int v27 = v15 + a2 + 1;
  if (v15 + a2 != -1) {
    Array<unsigned int>::alloc();
  }
  uint64_t v17 = 0;
  MEMORY[0xFFFFFFFFFFFFFFFC] = -1;
  if (a4)
  {
    if (v15)
    {
      uint64_t v18 = v15;
      do
      {
        int v19 = *a4++;
        *(_DWORD *)(4 * (a2 - 1 + (int)v18--)) = v19;
      }
      while (v18);
      signed int v16 = a2;
    }
  }
  else if (v15 == 1)
  {
    int v20 = *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3));
    signed int v16 = -2;
    uint64_t v17 = *(void *)&v27[4];
    *(_DWORD *)(*(void *)&v27[4] - 8) = v20;
  }
  for (; v16; *(_DWORD *)(*(void *)&v27[4] + 4 * --v16) = v23)
  {
    int v21 = *(_DWORD *)(v17 + 4 * v16);
    int v22 = *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 120))(*((void *)this + 3));
    uint64_t v17 = *(void *)&v27[4];
    if (v21 == v22) {
      break;
    }
    int v23 = (*(uint64_t (**)(LM *, uint64_t))(*(void *)this + 168))(this, *(void *)&v27[4] + 4 * v16);
    uint64_t v17 = *(void *)&v27[4];
  }
  int v24 = a2 - 1;
  if (a2 - 1 <= v16)
  {
    *a3 = -1;
  }
  else
  {
    size_t v25 = a3;
    do
      *v25++ = *(_DWORD *)(v17 + 4 * v24--);
    while (v16 != v24);
    a3[a2 - 1 - v16] = -1;
    MEMORY[0x1B3EA8630]();
  }
  return a3;
}

void sub_1B1EC1774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    MEMORY[0x1B3EA8630](a11, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

const char **LM::generateSentence(LM *this, uint64_t a2, const char **a3, const char **a4)
{
  double v8 = (_DWORD **)vsDefaultResultSize();
  pid_t v9 = *v8;
  if (!*v8)
  {
    in_addr v10 = v8;
    pid_t v9 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *in_addr v10 = v9;
  }
  float v11 = (const char ****)vsDefaultResult();
  unsigned int v13 = *v11;
  if (*v11)
  {
    if (a3) {
      goto LABEL_11;
    }
  }
  else
  {
    size_t v14 = v11;
    unsigned int v13 = (const char ***)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    *size_t v14 = v13;
    if (a3) {
      goto LABEL_11;
    }
  }
  a3 = *v13;
  if ((a2 + 1) > *v9)
  {
    *pid_t v9 = a2 + 1;
    if (a3) {
      MEMORY[0x1B3EA8630](a3, 0x50C80EE9192B6);
    }
    operator new[]();
  }
LABEL_11:
  if (a4)
  {
    int v15 = Vocab::length((uint64_t)a4, v12);
    uint64_t v16 = (v15 + 1);
    if (v15 != -1) {
      Array<unsigned int>::alloc();
    }
    uint64_t v17 = *((void *)this + 3);
    uint64_t v18 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 88))(v17);
    (*(void (**)(uint64_t, const char **, void, uint64_t, void))(*(void *)v17 + 272))(v17, a4, 0, v16, *v18);
    uint64_t v19 = (*(uint64_t (**)(LM *, uint64_t, void, void))(*(void *)this + 176))(this, a2, 0, HIDWORD(v16));
  }
  else
  {
    uint64_t v19 = (*(uint64_t (**)(LM *, uint64_t, void, void))(*(void *)this + 176))(this, a2, 0, 0);
  }
  (*(void (**)(void, uint64_t, const char **, void))(**((void **)this + 3) + 248))(*((void *)this + 3), v19, a3, (a2 + 1));
  return a3;
}

void sub_1B1EC1A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    MEMORY[0x1B3EA8630](a11, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void LM::freeThread(LM *this)
{
  uint64_t v1 = (void **)viDefaultResult();
  uint64_t v2 = (uint64_t *)*v1;
  if (!*v1)
  {
    uint64_t v2 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x10040436913F5uLL);
    Vocab *v1 = v2;
  }
  uint64_t v3 = *v2;
  unsigned int v4 = (void **)vsDefaultResult();
  double v5 = (uint64_t *)*v4;
  if (!*v4)
  {
    double v5 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    *unsigned int v4 = v5;
  }
  uint64_t v6 = *v5;
  if (v3) {
    MEMORY[0x1B3EA8630](v3, 0x1000C8052888210);
  }
  if (v6) {
    MEMORY[0x1B3EA8630](v6, 0x50C80EE9192B6);
  }
  char v7 = (void **)viDefaultResultSize();
  if (*v7)
  {
    free(*v7);
    *char v7 = 0;
  }
  if (*v1)
  {
    free(*v1);
    Vocab *v1 = 0;
  }
  double v8 = (void **)vsDefaultResultSize();
  if (*v8)
  {
    free(*v8);
    *double v8 = 0;
  }
  if (*v4)
  {
    free(*v4);
    *unsigned int v4 = 0;
  }
}

uint64_t LM::contextID(LM *this, const unsigned int *a2, Vocab *a3, unsigned int *a4)
{
  *a4 = Vocab::length((uint64_t)a3, a2);
  return 0;
}

float LM::contextBOW(LM *this, const unsigned int *a2)
{
  return 0.0;
}

uint64_t LM::read(LM *this, File *a2)
{
  return 0;
}

uint64_t LM::write(LM *this, File *a2)
{
  return 0;
}

uint64_t LM::writeBinary(unsigned char *a1)
{
  char v2 = a1[148];
  a1[148] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 248))(a1);
  a1[148] = v2;
  return result;
}

void LM::memStats(uint64_t a1, void *a2)
{
  *a2 += 152;
}

void _LM_FollowIter::_LM_FollowIter(_LM_FollowIter *this, const Vocab **a2, const unsigned int *a3)
{
  *(void *)this = &unk_1F0A33C10;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a3;
  VocabIter::VocabIter((_LM_FollowIter *)((char *)this + 24), a2[3], 0);
}

uint64_t _LM_FollowIter::init(_LM_FollowIter *this)
{
  return VocabIter::init((_LM_FollowIter *)((char *)this + 24));
}

uint64_t _LM_FollowIter::next(_LM_FollowIter *this)
{
  unsigned int v2 = -1;
  VocabIter::next((_LM_FollowIter *)((char *)this + 24), &v2);
  return v2;
}

uint64_t _LM_FollowIter::next(_LM_FollowIter *this, float *a2)
{
  uint64_t v4 = 0xFFFFFFFFLL;
  unsigned int v6 = -1;
  VocabIter::next((_LM_FollowIter *)((char *)this + 24), &v6);
  if (v6 != -1)
  {
    *a2 = (*(float (**)(void))(**((void **)this + 1) + 48))(*((void *)this + 1));
    return v6;
  }
  return v4;
}

void _LM_FollowIter::~_LM_FollowIter(_LM_FollowIter *this)
{
  *(void *)this = &unk_1F0A33C10;
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)this + 24);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A33C10;
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)this + 24);
  JUMPOUT(0x1B3EA8670);
}

std::string *std::allocate_shared[abi:ne180100]<WordInfo,std::allocator<WordInfo>,std::string &,std::string &,void>@<X0>(long long *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  unsigned int v6 = (std::string *)operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<WordInfo>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::allocator<WordInfo>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_1B1EC1F3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<WordInfo>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::allocator<WordInfo>,0>(std::string *a1, long long *a2, long long *a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5DEA8;
  WordInfo::WordInfo(a1 + 1, a2, a3);
  return a1;
}

void sub_1B1EC1F98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<WordInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DEA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WordInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DEA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<WordInfo>::__on_zero_shared(uint64_t a1)
{
  std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void WordInfo::WordInfo(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  unsigned int v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1B1EC20C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<WordInfo>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<WordInfo>>,std::reverse_iterator<std::shared_ptr<WordInfo>*>,std::reverse_iterator<std::shared_ptr<WordInfo>*>,std::reverse_iterator<std::shared_ptr<WordInfo>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<WordInfo>>,std::reverse_iterator<std::shared_ptr<WordInfo>*>,std::reverse_iterator<std::shared_ptr<WordInfo>*>,std::reverse_iterator<std::shared_ptr<WordInfo>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<WordInfo>>,std::reverse_iterator<std::shared_ptr<WordInfo>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<WordInfo>>,std::reverse_iterator<std::shared_ptr<WordInfo>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<SentenceInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SentenceInfo>,std::reverse_iterator<SentenceInfo*>,std::reverse_iterator<SentenceInfo*>,std::reverse_iterator<SentenceInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SentenceInfo>,std::reverse_iterator<SentenceInfo*>,std::reverse_iterator<SentenceInfo*>,std::reverse_iterator<SentenceInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SentenceInfo>,std::reverse_iterator<SentenceInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SentenceInfo>,std::reverse_iterator<SentenceInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<SentenceInfo>,std::reverse_iterator<SentenceInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SentenceInfo>,std::reverse_iterator<SentenceInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<SentenceInfo>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::allocator<SentenceInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void **std::__split_buffer<SentenceInfo>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<SentenceInfo>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<SentenceInfo>::destroy[abi:ne180100](v4, i - 48);
  }
}

quasar::PdecPhraseBookOptions *quasar::PdecPhraseBookOptions::PdecPhraseBookOptions(quasar::PdecPhraseBookOptions *this)
{
  *(void *)quasar::PDecOptions::PDecOptions(this) = &unk_1F0A55CB8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "phrase_book_only");
  std::string::basic_string[abi:ne180100]<0>(&__p, "<default>");
  std::string::operator=((std::string *)((char *)this + 424), &__str);
  std::string::operator=((std::string *)((char *)this + 352), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1B1EC2558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  quasar::PDecOptions::~PDecOptions(v20);
  _Unwind_Resume(a1);
}

void quasar::PDecPhraseBookBlock::~PDecPhraseBookBlock(quasar::PDecPhraseBookBlock *this, uint64_t a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 377);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 373, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 372, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 371, 0);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 370);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)this = v6;
  *(void *)((char *)this + *(void *)(v6 - 24)) = *(void *)(a2 + 16);
  quasar::PDecOptions::~PDecOptions((quasar::PDecPhraseBookBlock *)((char *)this + 8));
}

void quasar::PDecPhraseBookBlock::~PDecPhraseBookBlock(quasar::PDecPhraseBookBlock *this)
{
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 3024));
}

{
  uint64_t v1;
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 3024));
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::PDecPhraseBookBlock::~PDecPhraseBookBlock(quasar::PDecPhraseBookBlock *this)
{
  uint64_t v2 = (char **)(v1 + 3024);
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  quasar::PDecPhraseBookBlock::~PDecPhraseBookBlock((quasar::PDecPhraseBookBlock *)((char *)this
                                                                                  + *(void *)(*(void *)this - 24)));
}

void quasar::PDecPhraseBookBlock::process(void *a1, uint64_t a2, void *a3)
{
  if (*a3 == a3[1])
  {
    if (quasar::gLogLevel >= 1)
    {
      memset(v10, 0, sizeof(v10));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Empty token received", 20);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v10);
    }
    quasar::ProcessingBlock::send((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)a3, 0);
  }
  else if (*(unsigned char *)(*a3 + 128))
  {
    uint64_t v5 = (char *)quasar::OptionValue<BOOL>::value(a1 + 195);
    quasar::PDecEngineBlockMixin::processImplementation(a1 + 369, (uint64_t)a3, *v5, (uint64_t *)v10);
    uint64_t v6 = *(void *)(*a1 - 24);
    if (*(void *)&v10[0] == *((void *)&v10[0] + 1))
    {
      quasar::ProcessingBlock::send((uint64_t)a1 + v6, (uint64_t)a3, 0);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "final");
      quasar::ProcessingBlock::send((uint64_t)a1 + v6, (const void **)__p, (uint64_t)v10, 0);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    __p[0] = v10;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    uint64_t v7 = (uint64_t)a1 + *(void *)(*a1 - 24);
    quasar::ProcessingBlock::send(v7, (uint64_t)a3, 0);
  }
}

void sub_1B1EC2940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::string __p = &a16;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void virtual thunk to'quasar::PDecPhraseBookBlock::process(void *a1, uint64_t a2, void *a3)
{
}

void quasar::PDecPhraseBookBlock::init(quasar::PDecPhraseBookBlock *this)
{
}

void sub_1B1EC2B44(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1032C40806CDC9ALL);
  _Unwind_Resume(a1);
}

void quasar::PDecPhraseBookBlock::createDecoder(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  long long v8 = a3 + 40;
  char v9 = (uint64_t **)quasar::OptionValue<std::string>::value(a3 + 40);
  if ((quasar::PDecEngineBlockMixin::getPhraseBookMode(v9) & 0xFFFFFFFD) != 1 && quasar::gLogLevel >= 1)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    *(_OWORD *)int v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    float v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Illegal value for 'phrase-book-mode' in 'PDecPhraseBookBlock': ", 63);
    uint64_t v12 = quasar::OptionValue<std::string>::value(v8);
    int v13 = *(char *)(v12 + 23);
    if (v13 >= 0) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = *(void *)v12;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      uint64_t v15 = *(void *)(v12 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v14, v15);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v20);
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "");
  std::string::basic_string[abi:ne180100]<0>(v18, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::PDecEngineBlockMixin::createDecoder(a1 + 2952, a2, a3, (long long *)v20, (uint64_t)v18, 50, 0, 0, a4, -1.0, 0.5, 0, (uint64_t)__p, 0);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
}

void sub_1B1EC2D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'quasar::PDecPhraseBookBlock::init(quasar::PDecPhraseBookBlock *this)
{
}

uint64_t quasar::PDecPhraseBookBlock::minConfigVersion(quasar::PDecPhraseBookBlock *this)
{
  return 35;
}

uint64_t virtual thunk to'quasar::PDecPhraseBookBlock::minConfigVersion(quasar::PDecPhraseBookBlock *this)
{
  return 35;
}

void quasar::ConfiguredProcessingBlock<quasar::PdecPhraseBookOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  uint64_t v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      long long v8 = *a2;
      char v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v10;
  }
  if (v4)
  {
    float v11 = v4;
    operator delete(v4);
  }
}

void sub_1B1EC2E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::PdecPhraseBookOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PdecPhraseBookOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PdecPhraseBookOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

const char *quasar::PDecPhraseBookBlock::blockType(quasar::PDecPhraseBookBlock *this)
{
  return "PDecPhraseBookBlock";
}

const char *virtual thunk to'quasar::PDecPhraseBookBlock::blockType(quasar::PDecPhraseBookBlock *this)
{
  return "PDecPhraseBookBlock";
}

uint64_t kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeOptions(uint64_t a1, int a2, int a3, float a4)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = a2;
  *(void *)(a1 + 164) = 0x4F0000004F000000;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(void *)(a1 + 184) = 1;
  *(_DWORD *)(a1 + 192) = 1;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = a3;
  *(void *)(a1 + 220) = 0x40A000003F800000;
  *(float *)(a1 + 228) = a4;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 260) = 0;
  *(void *)(a1 + 236) = 0;
  *(void *)(a1 + 244) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 264), "");
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0x10000;
  *(unsigned char *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(void *)(a1 + 316) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  return a1;
}

void sub_1B1EC2FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 240);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 159) < 0) {
    operator delete(*(void **)(v10 + 136));
  }
  if (*(char *)(v10 + 135) < 0) {
    operator delete(*(void **)(v10 + 112));
  }
  if (*(char *)(v10 + 111) < 0) {
    operator delete(*(void **)(v10 + 88));
  }
  if (*(char *)(v10 + 87) < 0) {
    operator delete(*(void **)(v10 + 64));
  }
  if (*(char *)(v10 + 63) < 0) {
    operator delete(*(void **)(v10 + 40));
  }
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*v11);
  }
  _Unwind_Resume(a1);
}

__CFString *hexString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 length];
  if (v2)
  {
    unint64_t v3 = v2;
    uint64_t v4 = [v1 bytes];
    uint64_t v5 = malloc_type_malloc((2 * v3) | 1, 0x100004077774924uLL);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = 0;
      long long v8 = v5;
      do
      {
        char v9 = v8;
        *long long v8 = a0123456789abcd[(unint64_t)*(unsigned __int8 *)(v4 + v7) >> 4];
        v8[1] = a0123456789abcd[*(unsigned char *)(v4 + v7++) & 0xF];
        v8 += 2;
      }
      while (v3 > v7);
      v9[2] = 0;
      uint64_t v10 = [NSString stringWithUTF8String:v5];
      free(v6);
    }
    else
    {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Failed to allocate memory" arguments:0];
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = &stru_1F0A64AB0;
  }

  return v10;
}

id sha256Data(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = (const void *)[v1 bytes];
  CC_LONG v3 = [v1 length];

  CC_SHA256(v2, v3, md);
  uint64_t v4 = [MEMORY[0x1E4F1C9B8] dataWithBytes:md length:32];
  return v4;
}

uint64_t quasar::corrective_reranking::TargetIndexFilter::TargetIndexFilter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v85[19] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v55 = (int32x2_t *)(a1 + 32);
  *(void *)(a1 + 32) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 72) = 0;
  uint64_t v7 = (void *)(a1 + 80);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 80) = &unk_1F0A517C0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 28);
  std::ifstream::basic_ifstream(v83);
  uint64_t v8 = v83[0];
  int v56 = v7;
  if ((v84[*(void *)(v83[0] - 24) + 16] & 5) != 0)
  {
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v66 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Could not open filter file ", 27);
    int v52 = *(char *)(a2 + 23);
    if (v52 >= 0) {
      uint64_t v53 = a2;
    }
    else {
      uint64_t v53 = *(void *)a2;
    }
    if (v52 >= 0) {
      uint64_t v54 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v54 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v53, v54);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v66);
  }
  memset(&__str, 0, sizeof(__str));
  char v9 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(void *)(v8 - 24)));
    uint64_t v10 = std::locale::use_facet((const std::locale *)&v66, v9);
    unsigned __int8 v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)&v66);
    uint64_t v12 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v83, (uint64_t)&__str, v11);
    if ((*((unsigned char *)v12 + *(void *)(*v12 - 24) + 32) & 5) != 0) {
      break;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = __str.__r_.__value_.__l.__size_;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (size < 1) {
      goto LABEL_37;
    }
    uint64_t v15 = (char *)p_str + size;
    uint64_t v16 = p_str;
    while (1)
    {
      char v17 = memchr(v16, 32, size);
      if (!v17) {
        goto LABEL_37;
      }
      if (*v17 == 32) {
        break;
      }
      uint64_t v16 = (std::string *)(v17 + 1);
      int64_t size = v15 - (unsigned char *)v16;
      if (v15 - (unsigned char *)v16 < 1) {
        goto LABEL_37;
      }
    }
    if (v17 == v15 || (std::string::size_type v18 = v17 - (unsigned char *)p_str, v17 - (unsigned char *)p_str == -1))
    {
LABEL_37:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"end != std::string::npos", 24);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v66);
    }
    std::string::basic_string(&v59, &__str, 0, v18, (std::allocator<char> *)&v66);
    std::string::basic_string(&v57, &__str, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v66);
    quasar::trim(&v59);
    quasar::trim(&v57);
    int v19 = std::stoi(&v59, 0, 10);
    if (v19)
    {
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v62, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
      }
      else {
        std::string v62 = v57;
      }
      int v63 = v19;
      unint64_t v20 = *(void *)(a1 + 16);
      unint64_t v21 = *(void *)(a1 + 24);
      if (v20 >= v21)
      {
        uint64_t v23 = (uint64_t)(v20 - *v6) >> 5;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v25 = v21 - *v6;
        if (v25 >> 4 > v24) {
          unint64_t v24 = v25 >> 4;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        *(void *)&long long v68 = a1 + 24;
        long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 24, v26);
        long long v28 = &v27[32 * v23];
        *(void *)&long long v66 = v27;
        *((void *)&v66 + 1) = v28;
        *((void *)&v67 + 1) = &v27[32 * v29];
        long long v30 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
        *((void *)v28 + 2) = *((void *)&v62.__r_.__value_.__l + 2);
        *(_OWORD *)long long v28 = v30;
        memset(&v62, 0, sizeof(v62));
        *((_DWORD *)v28 + 6) = v63;
        *(void *)&long long v67 = v28 + 32;
        std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer(v6, &v66);
        uint64_t v31 = *(void *)(a1 + 16);
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v66);
        int v32 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
        *(void *)(a1 + 16) = v31;
        if (v32 < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v22 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
        *(void *)(v20 + 16) = *((void *)&v62.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v20 = v22;
        memset(&v62, 0, sizeof(v62));
        *(_DWORD *)(v20 + 24) = v63;
        *(void *)(a1 + 16) = v20 + 32;
      }
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    uint64_t v8 = v83[0];
  }
  uint64_t v33 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v33)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"embeddingTargetIndexUtterance.size() > 0", 40);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v66);
  }
  quasar::corrective_reranking::PhoneticMatcher::computeEmbedding(*a3, v33, (uint64_t)&v62);
  if (!v64)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"textEmbedding.has_value() == true", 33);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v66);
  }
  unint64_t v34 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
  uint64_t v35 = LODWORD(v62.__r_.__value_.__r.__words[2]);
  kaldi::CuMatrix<float>::Resize(v55, v34 >> 5, LODWORD(v62.__r_.__value_.__r.__words[2]), 1, 0);
  if ((int)(v34 >> 5) >= 1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = (v34 >> 5);
    uint64_t v38 = 23;
    do
    {
      quasar::corrective_reranking::PhoneticMatcher::computeEmbedding(*a3, *v6 + v38 - 23, (uint64_t)&v59);
      if (!v64)
      {
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
        unint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Could not compute embedding for ", 32);
        uint64_t v43 = (unsigned __int8 *)(*v6 + v38);
        uint64_t v44 = *v43;
        uint64_t v45 = *(void *)(v43 - 15);
        uint64_t v48 = *(void *)(v43 - 23);
        uint64_t v46 = v43 - 23;
        uint64_t v47 = v48;
        if ((v44 & 0x80u) == 0) {
          uint64_t v49 = (uint64_t)v46;
        }
        else {
          uint64_t v49 = v47;
        }
        if ((v44 & 0x80u) == 0) {
          uint64_t v50 = v44;
        }
        else {
          uint64_t v50 = v45;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v49, v50);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v66);
      }
      unsigned int v39 = *(_DWORD *)(a1 + 48);
      uint64_t v40 = *(void *)(a1 + 64);
      *((void *)&v66 + 1) = *(void *)(a1 + 40) + 4 * *(_DWORD *)(a1 + 56) * (int)v36;
      *(void *)&long long v66 = &unk_1F0A472D0;
      *(void *)&long long v67 = v39;
      *((void *)&v67 + 1) = v40;
      *(_OWORD *)&v57.__r_.__value_.__r.__words[1] = 0uLL;
      uint64_t v58 = 0;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A517C0;
      kaldi::CuVector<float>::Resize((uint64_t)&v57, v35, 0);
      if (!v61) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      kaldi::CuVectorBase<float>::CopyFromVec(&v57, (uint64_t)&v59);
      kaldi::CuVectorBase<float>::CopyFromVec(&v66, (uint64_t)&v57);
      kaldi::CuVector<float>::~CuVector(&v57);
      if (v61) {
        kaldi::CuVector<float>::~CuVector(&v59);
      }
      ++v36;
      v38 += 32;
    }
    while (v37 != v36);
  }
  kaldi::CuMatrix<float>::CuMatrix(&v66, v55, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v66, (uint64_t)&v66);
  uint64_t v60 = 0;
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A517C0;
  *(_OWORD *)&v59.__r_.__value_.__r.__words[1] = 0uLL;
  kaldi::CuVector<float>::Resize((uint64_t)&v59, DWORD1(v67), 0);
  kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)&v59, (uint64_t)&v66, 1.0, 0.0);
  kaldi::CuVector<float>::Resize((uint64_t)v56, LODWORD(v59.__r_.__value_.__r.__words[2]), 1);
  kaldi::CuVectorBase<float>::CopyFromVec(v56, (uint64_t)&v59);
  kaldi::CuVector<float>::~CuVector(&v59);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v66);
  if (v64) {
    kaldi::CuVector<float>::~CuVector(&v62);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  v83[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v83 + *(void *)(v83[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v84);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v85);
  return a1;
}

void sub_1B1EC3C2C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1EC3C74);
}

unint64_t quasar::corrective_reranking::TargetIndexFilter::filterStringForTargetIndex(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)(a1 + 112) >= a3) {
    int v5 = a3;
  }
  else {
    int v5 = *(_DWORD *)(a1 + 112);
  }
  quasar::corrective_reranking::PhoneticMatcher::computeEmbedding(**(void **)a1, a2, (uint64_t)v25);
  if (v27)
  {
    long long v23 = 0u;
    long long v22 = 0u;
    int32x2_t v21 = (int32x2_t)&unk_1F0A51768;
    char v24 = 0;
    kaldi::CuMatrix<float>::Resize(&v21, 1, v26, 1, 0);
    if (!v27) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)&v21, (uint64_t)v25);
    quasar::computeL2Dist(a1 + 32, a1 + 80, (uint64_t)&v21, &v17);
    if (v20 != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"dist.NumRows() == 1", 19);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    if (v19 != (v7 - v6) >> 5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"dist.NumCols() == embeddingTargetIndexUtterance.size()", 54);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    if (v7 == v6)
    {
      uint64_t v12 = 0x7FFFFFFFLL;
      float v11 = 2147500000.0;
    }
    else
    {
      uint64_t v8 = 0;
      if ((unint64_t)v19 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v19;
      }
      int v10 = 0x7FFFFFFF;
      float v11 = 2147500000.0;
      do
      {
        if (v11 > *(float *)(v18 + 4 * v8))
        {
          float v11 = *(float *)(v18 + 4 * v8);
          int v10 = v8;
        }
        ++v8;
      }
      while (v9 != v8);
      uint64_t v12 = v10;
    }
    uint64_t v14 = *(unsigned int *)(v6 + 32 * v12 + 24);
    if ((int)v14 <= v5 && v11 <= *(float *)(a1 + 116))
    {
      unint64_t v3 = (v14 | ((unint64_t)LODWORD(v11) << 32)) >> 8;
      unsigned __int8 v13 = v14;
    }
    else
    {
      unsigned __int8 v13 = 0;
    }
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v17);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v21);
    if (v27) {
      kaldi::CuVector<float>::~CuVector(v25);
    }
  }
  else
  {
    unsigned __int8 v13 = 0;
  }
  return v13 | (v3 << 8);
}

void sub_1B1EC3E9C()
{
  kaldi::CuMatrix<float>::~CuMatrix(v0 - 168);
  JUMPOUT(0x1B1EC3EACLL);
}

unint64_t quasar::corrective_reranking::TargetIndexFilter::filterAsrCandidatesForTargetIndex(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4 == *a2) {
    goto LABEL_7;
  }
  int v7 = 0x7FFFFFFF;
  float v8 = 2147500000.0;
  do
  {
    unint64_t v9 = quasar::corrective_reranking::TargetIndexFilter::filterStringForTargetIndex(a1, v3, a3);
    if (v10 != 0 && v8 > *((float *)&v9 + 1))
    {
      int v7 = v9;
      float v8 = *((float *)&v9 + 1);
    }
    v3 += 32;
  }
  while (v3 != v4);
  if (v7 == 0x7FFFFFFF)
  {
LABEL_7:
    uint64_t v11 = 0;
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v12 = v7 & 0xFFFFFF00 | ((unint64_t)LODWORD(v8) << 32);
    uint64_t v11 = v7;
  }
  return v12 | v11;
}

uint64_t std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>,std::reverse_iterator<std::pair<std::string,int>*>,std::reverse_iterator<std::pair<std::string,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>,std::reverse_iterator<std::pair<std::string,int>*>,std::reverse_iterator<std::pair<std::string,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void quasar::OnlineLatticeBiglmFasterDecoder::latticeGenerationRun(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = (uint64_t *)(*a1 + 8);
  uint64_t v3 = *v4;
  uint64_t v5 = (quasar::DecoderChainOutput **)(v2 + 24);
  uint64_t v6 = (uint64_t *)(v2 + 40);
  *(unsigned char *)(v3 + 561) = 0;
  int v7 = quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(v3, v2 + 24, v2 + 40, *(void *)(v2 + 56), *(unsigned int *)(v2 + 64), a2);
  *(unsigned char *)(*v4 + 561) = 1;
  uint64_t v8 = *(void *)(v2 + 72);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v2;
  *(_DWORD *)(v8 + 4) = v7;
  long long v9 = *(std::__shared_weak_count **)(v8 + 16);
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *(void *)(v2 + 72);
  uint64_t v11 = *(std::__shared_weak_count **)(v10 + 32);
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v7 == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(*(void *)(v2 + 72) + 40), (uint64_t)"CANCEL ", 7);
    unint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
  }
  else
  {
    quasar::Decoder::calculateNBest(*v4, (uint64_t *)(v2 + 24), *(_DWORD *)(*v6 + 16));
    quasar::SpeechRequestData::getRecogRequestTimer(*v6, &v66);
    double Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v13);
    long long v15 = *v5;
    *((double *)*v5 + 58) = Seconds;
    if (v67)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      long long v15 = *v5;
    }
    BOOL v16 = quasar::DecoderChainOutput::nonEmptyTopChoice(v15);
    int32x2_t v17 = (void *)(*(void *)(v2 + 72) + 40);
    if (v16)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"WRITE ", 6);
      uint64_t v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      int v19 = (*(uint64_t (**)(void))(**(void **)(*(void *)*v4 + 16) + 24))(*(void *)(*(void *)*v4 + 16));
      double Snr = quasar::SpeechRecognizer::getSnr(*((void *)*v5 + 44), *(std::mutex **)(*v4 + 48), *(_DWORD *)(*v6 + 8));
      uint64_t v21 = *(void *)(*v6 + 24);
      if (!*(unsigned char *)(v21 + 49))
      {
        double v22 = Snr;
        long long v23 = *(uint64_t **)(*v4 + 64);
        char v24 = (uint64_t **)(v21 + 344);
        uint64_t v25 = (uint64_t *)*v5;
        unsigned int v26 = (std::__shared_weak_count *)*((void *)*v5 + 45);
        long long v72 = (uint64_t *)*((void *)*v5 + 44);
        long long v73 = v26;
        if (v26)
        {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v25 = (uint64_t *)*v5;
        }
        char v27 = (std::__shared_weak_count *)v25[50];
        long long v70 = (void **)v25[49];
        long long v71 = v27;
        if (v27)
        {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v25 = (uint64_t *)*v5;
        }
        quasar::MuxHelper::finalizeResult(v23, v24, &v72, &v70, v25 + 46);
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
        if (v73) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v73);
        }
        float v28 = (float)v19;
        if (*((unsigned char *)*v5 + 1088))
        {
          uint64_t v29 = *(void *)(v2 + 8);
          long long v30 = *(std::__shared_weak_count **)(v2 + 48);
          long long v68 = *(quasar::SpeechRequestData **)(v2 + 40);
          long long v69 = v30;
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          quasar::SpeechRecognizer::splitComposedLmeTokens(v29, v2 + 24, &v68);
          if (v69) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v69);
          }
        }
        quasar::RecogResult::RecogResult((quasar::RecogResult *)&v66);
        uint64_t v31 = *(std::__shared_weak_count **)(*v6 + 32);
        uint64_t v64 = *(void *)(*v6 + 24);
        long long v65 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v32 = quasar::RecogResult::setParams((uint64_t)&v66, &v64);
        uint64_t v33 = quasar::Token::resetSpacing(*((uint64_t ***)*v5 + 44));
        uint64_t v34 = quasar::RecogResult::setResultChoices(v32, (uint64_t)v33);
        uint64_t v35 = quasar::RecogResult::setResultMuxIds(v34, (uint64_t)*v5 + 368);
        uint64_t v36 = (void *)quasar::RecogResult::setResultCosts(v35, *((void *)*v5 + 49));
        uint64_t v37 = quasar::RecogResult::setLmeStatus(v36, (uint64_t *)*v5 + 73);
        uint64_t started = quasar::RunAsyncParams::setEndpointStartMs((uint64_t)v37, (uint64_t)*v5 + 656);
        uint64_t v39 = quasar::RecogResult::setAudioAnalytics(started, (quasar::DecoderChainOutput *)((char *)*v5 + 696));
        uint64_t v40 = quasar::RecogResult::setUtteranceStartMillis(v39, (float)(v28 * (float)*(unsigned int *)(*v6 + 8)));
        uint64_t v41 = quasar::RecogResult::setUtteranceDurationMillis(v40, (float)(v28 * (float)*((unsigned int *)*v5 + 144)));
        uint64_t v42 = quasar::RecogResult::setSNR(v41, v22);
        uint64_t IsFinal = quasar::RecogResult::setIsFinal(v42, 0);
        uint64_t v44 = quasar::RecogResult::setFingerprintDetected(IsFinal, *((_DWORD *)*v5 + 170));
        uint64_t v45 = quasar::RecogResult::setWatermarkPeakAvg(v44, *((double *)*v5 + 86));
        uint64_t v46 = quasar::RecogResult::setWatermarkDetected(v45, *((_DWORD *)*v5 + 171));
        uint64_t v47 = (std::string *)quasar::RecogResult::setLatnnMitigatorResult(v46, (uint64_t)*v5 + 872);
        uint64_t v48 = quasar::RecogResult::setSecondaryLatnnMitigatorResult(v47, (uint64_t)*v5 + 928);
        uint64_t v49 = quasar::RecogResult::setLeftContextForItn((uint64_t)v48, *v4 + 768);
        uint64_t v50 = quasar::RecogResult::setRightContextForItn(v49, *v4 + 792);
        uint64_t UtteranceAfterResume = quasar::RecogResult::setFirstUtteranceAfterResume(v50, *(unsigned char *)(*v4 + 816));
        uint64_t v52 = quasar::RecogResult::setEosLikelihood(UtteranceAfterResume, *((double *)*v5 + 135));
        quasar::RecogResult::setNumTokensExcludingTriggerPhrase(v52, *((_DWORD *)*v5 + 273));
        if (v65) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v65);
        }
        uint64_t v53 = *v6;
        if (*(unsigned char *)(*(void *)(*v6 + 24) + 625))
        {
          quasar::RecogResult::setIsVoiceCommandCandidatePackage((uint64_t)&v66, 1);
          uint64_t v53 = *v6;
        }
        if (*(unsigned char *)(v53 + 216))
        {
          if (!*(unsigned char *)(*v4 + 852))
          {
            quasar::DecoderChainOutput::getWordHypLattice(*v5, (const quasar::DecoderPassData *)*v4, &v62);
            quasar::RecogResult::setWordHypLattice((uint64_t)&v66, &v62);
            if (v63) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v63);
            }
          }
        }
        (*(void (**)(void, uint64_t *, uint64_t))(**((void **)*v5 + 70) + 40))(*((void *)*v5 + 70), &v66, 1);
        quasar::RecogResult::~RecogResult((quasar::RecogResult *)&v66);
      }
      uint64_t v54 = *(void *)(v2 + 72);
      long long v55 = *(_OWORD *)(v2 + 8);
      *uint64_t v4 = 0;
      v4[1] = 0;
      int v56 = *(std::__shared_weak_count **)(v54 + 16);
      *(_OWORD *)(v54 + 8) = v55;
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      uint64_t v57 = *(void *)(v2 + 72);
      uint64_t v59 = *(void *)(v2 + 24);
      uint64_t v58 = *(void *)(v2 + 32);
      if (v58) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v60 = *(std::__shared_weak_count **)(v57 + 32);
      *(void *)(v57 + 24) = v59;
      *(void *)(v57 + 32) = v58;
      if (v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"EMPTY ", 6);
      char v61 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" ", 1);
    }
  }
}

void sub_1B1EC4648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  unsigned __int8 v6 = atomic_load(a6);
  if ((v6 & 1) == 0) {
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  return 1;
}

void sub_1B1EC4D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst((void *)(v30 - 224));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst((void *)(v30 - 208));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((void *)(v30 - 192));
  _Unwind_Resume(a1);
}

void quasar::MuxHelper::finalizeResult(uint64_t *a1, uint64_t **a2, uint64_t **a3, void ***a4, uint64_t *a5)
{
  unsigned __int8 v6 = *a3;
  if (v6)
  {
    std::string __p = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    if (*a4) {
      p_p = *a4;
    }
    else {
      p_p = &__p;
    }
    quasar::MuxHelper::finalizeResult(a1, a2, v6, (uint64_t)p_p, a5);
    if (__p)
    {
      unint64_t v12 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v9 = *a5;
    uint64_t v8 = a5[1];
    if (v8 != *a5)
    {
      do
      {
        uint64_t v10 = v8 - 24;
        std::__tree<std::string>::destroy(v8 - 24, *(char **)(v8 - 16));
        uint64_t v8 = v10;
      }
      while (v10 != v9);
    }
    a5[1] = v9;
  }
}

void sub_1B1EC4F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ScaleLattice<fst::LatticeWeightTpl<float>,double>(double ***a1, uint64_t a2)
{
  std::vector<std::vector<double>>::vector(&v23, 2uLL);
  unsigned int v26 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize(v23, 2uLL, &v26);
  unsigned int v26 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize(v23 + 24, 2uLL, &v26);
  uint64_t v4 = v23;
  *(void *)(*(void *)(v23 + 24) + 8) = 0x3FF0000000000000;
  **(void **)uint64_t v4 = 0x3FF0000000000000;
  unsigned __int8 v6 = *a1;
  uint64_t v5 = a1[1];
  if ((char *)v5 - (char *)*a1 == v24 - v4)
  {
    while (v6 != v5)
    {
      uint64_t v8 = *v6;
      int v7 = v6[1];
      uint64_t v9 = *(double **)v4;
      if ((char *)v7 - (char *)*v6 != *(void *)(v4 + 8) - *(void *)v4) {
        goto LABEL_8;
      }
      while (v8 != v7)
      {
        if (*v8 != *v9) {
          goto LABEL_8;
        }
        ++v8;
        ++v9;
      }
      v6 += 3;
      v4 += 24;
    }
    unsigned int v26 = (void **)&v23;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v26);
  }
  else
  {
LABEL_8:
    unsigned int v26 = (void **)&v23;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v26);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
    if (v10 >= 1)
    {
      int v11 = v10;
      uint64_t v12 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, void ***))(*(void *)a2 + 296))(a2, v12, &v26);
        while (!(*((unsigned int (**)(void **))*v26 + 3))(v26))
        {
          uint64_t v13 = (*((uint64_t (**)(void **))*v26 + 4))(v26);
          uint64_t v23 = *(void *)v13;
          float v15 = *(float *)(v13 + 8);
          float v14 = *(float *)(v13 + 12);
          int v25 = *(_DWORD *)(v13 + 16);
          float v16 = INFINITY;
          float v17 = INFINITY;
          if (v15 != INFINITY)
          {
            double v18 = v15;
            double v19 = v14;
            float v16 = (**a1)[1] * v19 + ***a1 * v18;
            float v17 = (*a1)[3][1] * v19 + *(*a1)[3] * v18;
          }
          unint64_t v24 = __PAIR64__(LODWORD(v17), LODWORD(v16));
          (*((void (**)(void **, uint64_t *))*v26 + 11))(v26, &v23);
          (*((void (**)(void **))*v26 + 5))(v26);
        }
        if (v26) {
          (*((void (**)(void **))*v26 + 1))(v26);
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v23, a2, v12);
        float v29 = *((float *)&v23 + 1);
        LODWORD(v26) = v23;
        int v28 = 2139095040;
        float v27 = INFINITY;
        if (*(float *)&v23 != INFINITY || v29 != v27)
        {
          float v20 = INFINITY;
          float v21 = INFINITY;
          if (*(float *)&v23 != INFINITY)
          {
            float v20 = (**a1)[1] * *((float *)&v23 + 1) + ***a1 * *(float *)&v23;
            float v21 = (*a1)[3][1] * *((float *)&v23 + 1) + *(*a1)[3] * *(float *)&v23;
          }
          *(float *)double v22 = v20;
          *(float *)&v22[1] = v21;
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 184))(a2, v12, v22);
        }
        uint64_t v12 = (v12 + 1);
      }
      while (v12 != v11);
    }
  }
}

void sub_1B1EC5344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void quasar::writeRecordedStateAccessForFst(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v37[19] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    uint64_t v5 = *(const void **)a1;
    if (v5)
    {
      if (v8)
      {
        uint64_t v9 = v8;
        int v10 = *(std::__shared_weak_count **)(a1 + 8);
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (quasar::gLogLevel >= 4)
        {
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          long long v20 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
          int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Write accessed states for ", 26);
          int v12 = *(char *)(a2 + 23);
          if (v12 >= 0) {
            uint64_t v13 = a2;
          }
          else {
            uint64_t v13 = *(void *)a2;
          }
          if (v12 >= 0) {
            uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            uint64_t v14 = *(void *)(a2 + 8);
          }
          float v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
          float v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" to ", 4);
          int v17 = *(char *)(a3 + 23);
          if (v17 >= 0) {
            uint64_t v18 = a3;
          }
          else {
            uint64_t v18 = *(void *)a3;
          }
          if (v17 >= 0) {
            uint64_t v19 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v19 = *(void *)(a3 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v20);
        }
        std::ofstream::basic_ofstream((uint64_t *)&v20);
        quasar::StateAccessRecordingFst::WriteRecordedStateAccesses(v9);
        if (!std::filebuf::close()) {
          std::ios_base::clear((std::ios_base *)((char *)&v20 + *(void *)(v20 - 24)), *(_DWORD *)((char *)&v22 + *(void *)(v20 - 24)) | 4);
        }
        *(void *)&long long v20 = *MEMORY[0x1E4FBA400];
        *(void *)((char *)&v20 + *(void *)(v20 - 24)) = *(void *)(MEMORY[0x1E4FBA400] + 24);
        MEMORY[0x1B3EA7CF0]((char *)&v20 + 8);
        std::ostream::~ostream();
        MEMORY[0x1B3EA8520](v37);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
    }
  }
  else if (quasar::gLogLevel >= 5)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"FST File empty", 14);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
  }
}

void sub_1B1EC56B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmFasterDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::Register((uint64_t)(this + 57), (uint64_t)a2);
  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)(this + 160), (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[272], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(&v7, "endpoint.");
  quasar::EndPointDecoderConfig::registerParams((uint64_t)(this + 184), a2, (const void **)&v7);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)v7);
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "utt-detect.");
  quasar::UttDetectConfig::registerParams((uint64_t)(this + 202), a2, (const void **)&v7);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)v7);
  }
  quasar::SystemConfig::getPrefix(a2, &v6);
  uint64_t v4 = std::string::append(&v6, "utt-detect");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::hasParam((uint64_t)a2, (uint64_t)&v7);
}

void sub_1B1EC7288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(exception_object);
}

void quasar::NFHatConfig::registerParams(quasar::NFHatConfig *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "same-state-transition-probability");
  std::string::basic_string[abi:ne180100]<0>(__p, "Same state transition probability");
  quasar::SystemConfig::Register<double>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 0, 46, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "acoustic-evidence-deweighting-power");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic evidence deweighting power");
  quasar::SystemConfig::Register<double>((uint64_t)a2, (const void **)v6, (uint64_t)this + 8, (uint64_t)__p, 0, 46, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1EC7708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::supportsEager(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  return *((unsigned __int8 *)this + 1938);
}

BOOL quasar::OnlineLatticeBiglmFasterDecoder::requiresSilencePosteriorForEager(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  return *((unsigned char *)this + 1968) && *((unsigned char *)this + 1969) == 0;
}

void quasar::OnlineLatticeBiglmFasterDecoder::getSpgName(quasar::OnlineLatticeBiglmFasterDecoder *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 2103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 260), *((void *)this + 261));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 130);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 262);
  }
}

void quasar::OnlineLatticeBiglmFasterDecoder::finishInit(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  v208[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned __int8 *)this + 640;
  if (*((char *)this + 663) < 0) {
    uint64_t v3 = *((void *)this + 81);
  }
  else {
    uint64_t v3 = *((unsigned __int8 *)this + 663);
  }
  uint64_t v4 = (_OWORD *)((char *)this + 1016);
  if (!v3)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v203 = 0u;
      long long v204 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      *(_OWORD *)__src = 0u;
      long long v192 = 0u;
      *(_OWORD *)unint64_t v189 = 0u;
      long long v190 = 0u;
      *(_OWORD *)&v188[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
      long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Using regular grammar, need to negate in memory: ", 49);
      int v35 = *((char *)this + 687);
      if (v35 >= 0) {
        long long v36 = (char *)this + 664;
      }
      else {
        long long v36 = (char *)*((void *)this + 83);
      }
      if (v35 >= 0) {
        uint64_t v37 = *((unsigned __int8 *)this + 687);
      }
      else {
        uint64_t v37 = *((void *)this + 84);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v188);
    }
    uint64_t v38 = (void *)fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read((uint64_t)this + 664);
    fst::ApplyProbabilityScale<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)v38, -1.0);
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v38);
    std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>((uint64_t)this + 1032, (uint64_t)v38);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    *(_OWORD *)__src = 0u;
    long long v192 = 0u;
    *(_OWORD *)unint64_t v189 = 0u;
    long long v190 = 0u;
    *(_OWORD *)&v188[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
    char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Using pre-inverted grammar: ", 28);
    int v6 = *((char *)this + 663);
    if (v6 >= 0) {
      uint64_t v7 = (uint64_t)v2;
    }
    else {
      uint64_t v7 = *((void *)this + 80);
    }
    if (v6 >= 0) {
      uint64_t v8 = *((unsigned __int8 *)this + 663);
    }
    else {
      uint64_t v8 = *((void *)this + 81);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v188);
  }
  quasar::ModelLoader::requestEmbeddedMlock(*((std::string **)this + 46), v2, v188, 1.0);
  uint64_t locale = v188[1].__locale_;
  uint64_t v10 = *((void *)this + 46);
  v186 = v188[0].__locale_;
  v187 = (std::__shared_weak_count *)v188[1].__locale_;
  if (v188[1].__locale_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v188[1].__locale_ + 1, 1uLL, memory_order_relaxed);
  }
  quasar::ModelLoader::readFstNetwork(v10, (uint64_t)v2, (unsigned __int8 **)&v186, v188);
  long long v11 = *(_OWORD *)&v188[0].__locale_;
  v188[1].__locale_ = 0;
  v188[0].__locale_ = 0;
  int v12 = (std::__shared_weak_count *)*((void *)this + 130);
  *(_OWORD *)((char *)this + 1032) = v11;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (v188[1].__locale_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v188[1].__locale_);
    }
  }
  if (v187) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v187);
  }
  v188[0].__locale_ = (std::locale::__imp *)v2;
  uint64_t v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 131, (const void **)v2, (uint64_t)&std::piecewise_construct, (long long **)v188);
  uint64_t v14 = *((void *)this + 129);
  uint64_t v15 = *((void *)this + 130);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  float v16 = (std::__shared_weak_count *)v13[8];
  v13[7] = v14;
  v13[8] = v15;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
  }
  if ((*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 129) + 64))(*((void *)this + 129), 0x10000000, 0) != 0x10000000)
  {
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    *(_OWORD *)__src = 0u;
    long long v192 = 0u;
    *(_OWORD *)unint64_t v189 = 0u;
    long long v190 = 0u;
    *(_OWORD *)&v188[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v188, "gInvFst: input label is not sorted!");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
  }
  quasar::ModelLoader::requestEmbeddedMlock(*((std::string **)this + 46), (unsigned __int8 *)this + 616, v188, 1.0);
  int v17 = v188[1].__locale_;
  uint64_t v18 = *((void *)this + 46);
  long long v184 = v188[0].__locale_;
  long long v185 = (std::__shared_weak_count *)v188[1].__locale_;
  if (v188[1].__locale_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v188[1].__locale_ + 1, 1uLL, memory_order_relaxed);
  }
  BOOL v163 = v17;
  quasar::ModelLoader::readFstNetwork(v18, (uint64_t)this + 616, (unsigned __int8 **)&v184, v188);
  long long v19 = *(_OWORD *)&v188[0].__locale_;
  v188[1].__locale_ = 0;
  v188[0].__locale_ = 0;
  long long v20 = (std::__shared_weak_count *)*((void *)this + 128);
  *uint64_t v4 = v19;
  if (v20)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    if (v188[1].__locale_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v188[1].__locale_);
    }
  }
  if (v185) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v185);
  }
  v188[0].__locale_ = (quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 616);
  long long v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 131, (const void **)this + 77, (uint64_t)&std::piecewise_construct, (long long **)v188);
  uint64_t v22 = *((void *)this + 127);
  uint64_t v23 = *((void *)this + 128);
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  long long v24 = (std::__shared_weak_count *)v21[8];
  v21[7] = v22;
  v21[8] = v23;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (*((unsigned char *)this + 2300) || *((unsigned char *)this + 440))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v203 = 0u;
      long long v204 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      *(_OWORD *)__src = 0u;
      long long v192 = 0u;
      *(_OWORD *)unint64_t v189 = 0u;
      long long v190 = 0u;
      *(_OWORD *)&v188[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"State access recording is enabled. This will slow decoding, so disregard performance.", 85);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v188);
    }
    std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(v188);
    long long v25 = *(_OWORD *)&v188[0].__locale_;
    v188[0].__locale_ = 0;
    v188[1].__locale_ = 0;
    long long v26 = (std::__shared_weak_count *)*((void *)this + 128);
    *uint64_t v4 = v25;
    if (v26)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      if (v188[1].__locale_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v188[1].__locale_);
      }
    }
    v188[0].__locale_ = (quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 616);
    uint64_t v27 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 131, (const void **)this + 77, (uint64_t)&std::piecewise_construct, (long long **)v188);
    uint64_t v28 = *((void *)this + 127);
    uint64_t v29 = *((void *)this + 128);
    if (v29) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
    }
    long long v30 = (std::__shared_weak_count *)v27[8];
    v27[7] = v28;
    v27[8] = v29;
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(v188);
    long long v31 = *(_OWORD *)&v188[0].__locale_;
    v188[0].__locale_ = 0;
    v188[1].__locale_ = 0;
    long long v32 = (std::__shared_weak_count *)*((void *)this + 130);
    *(_OWORD *)((char *)this + 1032) = v31;
    if (v32)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      if (v188[1].__locale_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v188[1].__locale_);
      }
    }
    if (*((char *)this + 663) < 0)
    {
      if (*((void *)this + 81)) {
        goto LABEL_54;
      }
    }
    else if (*((unsigned char *)this + 663))
    {
LABEL_54:
      v188[0].__locale_ = (std::locale::__imp *)v2;
      long long v33 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 131, (const void **)v2, (uint64_t)&std::piecewise_construct, (long long **)v188);
LABEL_66:
      uint64_t v39 = *((void *)this + 129);
      uint64_t v40 = *((void *)this + 130);
      if (v40) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v41 = (std::__shared_weak_count *)v33[8];
      v33[7] = v39;
      v33[8] = v40;
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      goto LABEL_70;
    }
    v188[0].__locale_ = (quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 664);
    long long v33 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 131, (const void **)this + 83, (uint64_t)&std::piecewise_construct, (long long **)v188);
    goto LABEL_66;
  }
LABEL_70:
  if (*((char *)this + 711) < 0)
  {
    if (*((void *)this + 87)) {
      goto LABEL_76;
    }
  }
  else if (*((unsigned char *)this + 711))
  {
    goto LABEL_76;
  }
  if ((*((char *)this + 735) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 735)) {
      goto LABEL_76;
    }
LABEL_182:
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    *(_OWORD *)__src = 0u;
    long long v192 = 0u;
    *(_OWORD *)unint64_t v189 = 0u;
    long long v190 = 0u;
    *(_OWORD *)&v188[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"No BigG FST or NNLM specified. Hint: This is a BigLm decoder.", 61);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
  }
  if (!*((void *)this + 90)) {
    goto LABEL_182;
  }
LABEL_76:
  uint64_t v181 = 0;
  uint64_t v182 = 0;
  uint64_t v183 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 688), ",", 1, (uint64_t)&v181);
  char v180 = 1;
  v208[0] = &unk_1F0A5BC50;
  v208[1] = this;
  v208[2] = &v180;
  v208[3] = v208;
  uint64_t v43 = v181;
  uint64_t v42 = v182;
  if (v181 != v182)
  {
    uint64_t v44 = (void *)((char *)this + 2224);
    uint64_t v45 = (void **)((char *)this + 2248);
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      MultiChainMultiAudioBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v207, (uint64_t)v208);
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::loadMasterLmOrCreatePlaceholder(v43, (uint64_t)&__p, MultiChainMultiAudioBuffer, (uint64_t)v207, &v178);
      uint64_t v47 = (_OWORD *)*((void *)this + 279);
      unint64_t v48 = *((void *)this + 280);
      if ((unint64_t)v47 >= v48)
      {
        uint64_t v49 = ((uint64_t)v47 - *v44) >> 4;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v51 = v48 - *v44;
        if (v51 >> 3 > v50) {
          unint64_t v50 = v51 >> 3;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v50;
        }
        *(void *)&long long v190 = (char *)this + 2240;
        uint64_t v53 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 2240, v52);
        uint64_t v54 = (char *)v53 + 16 * v49;
        v188[0].__locale_ = v53;
        v188[1].__locale_ = (std::locale::__imp *)v54;
        v189[1] = (char *)v53 + 16 * v55;
        *(_OWORD *)uint64_t v54 = v178;
        long long v178 = 0uLL;
        v189[0] = v54 + 16;
        std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__swap_out_circular_buffer((uint64_t *)this + 278, v188);
        uint64_t v56 = *((void *)this + 279);
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v188[0].__locale_);
        uint64_t v57 = (std::__shared_weak_count *)*((void *)&v178 + 1);
        *((void *)this + 279) = v56;
        if (v57) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
        }
      }
      else
      {
        *uint64_t v47 = v178;
        long long v178 = 0uLL;
        *((void *)this + 279) = v47 + 1;
      }
      std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__value_func[abi:ne180100](v207);
      if (SHIBYTE(v169[0]) < 0) {
        operator delete(__p);
      }
      uint64_t v58 = (char *)*((void *)this + 282);
      unint64_t v59 = *((void *)this + 283);
      if ((unint64_t)v58 >= v59)
      {
        char v61 = (char *)*v45;
        uint64_t v62 = (v58 - (unsigned char *)*v45) >> 2;
        unint64_t v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v64 = v59 - (void)v61;
        if (v64 >> 1 > v63) {
          unint64_t v63 = v64 >> 1;
        }
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v63;
        }
        if (v65)
        {
          uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 2264, v65);
          uint64_t v58 = (char *)*((void *)this + 282);
          char v61 = (char *)*((void *)this + 281);
        }
        else
        {
          uint64_t v66 = 0;
        }
        long long v67 = &v66[4 * v62];
        *(_DWORD *)long long v67 = 4;
        uint64_t v60 = v67 + 4;
        while (v58 != v61)
        {
          int v68 = *((_DWORD *)v58 - 1);
          v58 -= 4;
          *((_DWORD *)v67 - 1) = v68;
          v67 -= 4;
        }
        *((void *)this + 281) = v67;
        *((void *)this + 282) = v60;
        *((void *)this + 283) = &v66[4 * v65];
        if (v61) {
          operator delete(v61);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v58 = 4;
        uint64_t v60 = v58 + 4;
      }
      *((void *)this + 282) = v60;
      v43 += 24;
    }
    while (v43 != v42);
  }
  long long v178 = 0uLL;
  uint64_t v179 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 712), ",", 1, (uint64_t)&v178);
  if (*((char *)this + 807) < 0) {
    uint64_t v69 = *((void *)this + 99);
  }
  else {
    uint64_t v69 = *((unsigned __int8 *)this + 807);
  }
  if (v69)
  {
    if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 784, ",", 1, (void *)this + 137) & 1) == 0)
    {
      long long v203 = 0u;
      long long v204 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      *(_OWORD *)__src = 0u;
      long long v192 = 0u;
      *(_OWORD *)unint64_t v189 = 0u;
      long long v190 = 0u;
      *(_OWORD *)&v188[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Could not read the NNLM normalization factor info", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
    }
    uint64_t v70 = *((void *)&v178 + 1);
    uint64_t v71 = v178;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v178 + 1) - v178) >> 3) != (uint64_t)(*((void *)this + 138)
                                                                                           - *((void *)this + 137)) >> 2)
    {
      long long v203 = 0u;
      long long v204 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      *(_OWORD *)__src = 0u;
      long long v192 = 0u;
      *(_OWORD *)unint64_t v189 = 0u;
      long long v190 = 0u;
      *(_OWORD *)&v188[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"the number of NNLM files and the number of NNLM norm factors do not match", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
    }
  }
  else
  {
    LODWORD(v188[0].__locale_) = 0;
    std::vector<float>::assign((char **)this + 137, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v178 + 1) - v178) >> 3), v188);
    uint64_t v70 = *((void *)&v178 + 1);
    uint64_t v71 = v178;
  }
  if (v70 != v71)
  {
    uint64_t v72 = 0;
    unint64_t v73 = 0;
    long long v74 = (void *)((char *)this + 2272);
    do
    {
      uint64_t v75 = *(unsigned int *)(*((void *)this + 137) + 4 * v73);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      long long v76 = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v206[0] = &unk_1F0A5BCA8;
      v206[1] = this;
      v206[2] = v75;
      v206[3] = v206;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder(v71 + v72, (uint64_t)&__p, v76, (uint64_t)v206, v176);
      long long v77 = (_OWORD *)*((void *)this + 285);
      unint64_t v78 = *((void *)this + 286);
      if ((unint64_t)v77 >= v78)
      {
        uint64_t v79 = ((uint64_t)v77 - *v74) >> 4;
        unint64_t v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v81 = v78 - *v74;
        if (v81 >> 3 > v80) {
          unint64_t v80 = v81 >> 3;
        }
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v82 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v82 = v80;
        }
        *(void *)&long long v190 = (char *)this + 2288;
        long long v83 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 2288, v82);
        size_t v84 = (char *)v83 + 16 * v79;
        v188[0].__locale_ = v83;
        v188[1].__locale_ = (std::locale::__imp *)v84;
        v189[1] = (char *)v83 + 16 * v85;
        *(_OWORD *)size_t v84 = *(_OWORD *)v176;
        v176[0] = 0;
        v176[1] = 0;
        v189[0] = v84 + 16;
        std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__swap_out_circular_buffer((uint64_t *)this + 284, v188);
        uint64_t v86 = *((void *)this + 285);
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v188[0].__locale_);
        long long v87 = (std::__shared_weak_count *)v176[1];
        *((void *)this + 285) = v86;
        if (v87) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v87);
        }
      }
      else
      {
        *long long v77 = *(_OWORD *)v176;
        v176[0] = 0;
        v176[1] = 0;
        *((void *)this + 285) = v77 + 1;
      }
      std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__value_func[abi:ne180100](v206);
      if (SHIBYTE(v169[0]) < 0) {
        operator delete(__p);
      }
      ++v73;
      uint64_t v71 = v178;
      v72 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v178 + 1) - v178) >> 3) > v73);
  }
  v176[0] = 0;
  v176[1] = 0;
  uint64_t v177 = 0;
  long long v173 = 0;
  long long v174 = 0;
  uint64_t v175 = 0;
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 736, ",", 1, v176) & 1) == 0)
  {
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    *(_OWORD *)__src = 0u;
    long long v192 = 0u;
    *(_OWORD *)unint64_t v189 = 0u;
    long long v190 = 0u;
    *(_OWORD *)&v188[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Could not read FST LM interpolation weight info", 47);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
  }
  if ((uint64_t)(*((void *)this + 279) - *((void *)this + 278)) >> 4 != ((char *)v176[1] - (char *)v176[0]) >> 2)
  {
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    *(_OWORD *)__src = 0u;
    long long v192 = 0u;
    *(_OWORD *)unint64_t v189 = 0u;
    long long v190 = 0u;
    *(_OWORD *)&v188[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"The number of big FST LMs and the number of weights mismatch", 60);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
  }
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 760, ",", 1, &v173) & 1) == 0)
  {
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    *(_OWORD *)__src = 0u;
    long long v192 = 0u;
    *(_OWORD *)unint64_t v189 = 0u;
    long long v190 = 0u;
    *(_OWORD *)&v188[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Could not read NN LM interpolation weight info", 46);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
  }
  if ((uint64_t)(*((void *)this + 285) - *((void *)this + 284)) >> 4 != (v174 - (unsigned char *)v173) >> 2)
  {
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    *(_OWORD *)__src = 0u;
    long long v192 = 0u;
    *(_OWORD *)unint64_t v189 = 0u;
    long long v190 = 0u;
    *(_OWORD *)&v188[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"The number of big NN LMs and the number of weights mismatch", 59);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
  }
  uint64_t v88 = *((void *)this + 134);
  *((void *)this + 135) = v88;
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 1072, v88, (char *)v176[0], (char *)v176[1], ((char *)v176[1] - (char *)v176[0]) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 1072, *((void *)this + 135), (char *)v173, v174, (v174 - (unsigned char *)v173) >> 2);
  size_t v89 = (float *)*((void *)this + 134);
  long long v90 = (float *)*((void *)this + 135);
  if (v89 == v90)
  {
    unint64_t v91 = *((void *)this + 136);
    if ((unint64_t)v89 >= v91)
    {
      uint64_t v92 = v91 - (void)v89;
      uint64_t v93 = v92 >> 1;
      if ((unint64_t)(v92 >> 1) <= 1) {
        uint64_t v93 = 1;
      }
      if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v93;
      }
      long long v95 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 1088, v94);
      long long v96 = (char *)*((void *)this + 135);
      long long v97 = (char *)*((void *)this + 134);
      long long v99 = &v95[v98];
      *long long v95 = 1065353216;
      long long v90 = (float *)(v95 + 1);
      while (v96 != v97)
      {
        int v100 = *((_DWORD *)v96 - 1);
        v96 -= 4;
        *--long long v95 = v100;
      }
      *((void *)this + 134) = v95;
      *((void *)this + 135) = v90;
      *((void *)this + 136) = v99;
      if (v97) {
        operator delete(v97);
      }
    }
    else
    {
      *size_t v89 = 1.0;
      long long v90 = v89 + 1;
    }
    *((void *)this + 135) = v90;
    size_t v89 = (float *)*((void *)this + 134);
  }
  if ((char *)v90 - (char *)v89 == 4 && *v89 != 1.0)
  {
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    *(_OWORD *)__src = 0u;
    long long v192 = 0u;
    *(_OWORD *)unint64_t v189 = 0u;
    long long v190 = 0u;
    *(_OWORD *)&v188[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Language model weight must be 1 when using a single LM", 54);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
  }
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 272), (quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  uint64_t v101 = quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 272), "<?>");
  int v102 = v101;
  if (v101 != -1)
  {
    *((_DWORD *)this + 133) = v101;
    uint64_t v103 = *((int *)this + 320);
    if (v103 && v101 != v103 && quasar::gLogLevel >= 5)
    {
      long long v203 = 0u;
      long long v204 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      *(_OWORD *)__src = 0u;
      long long v192 = 0u;
      *(_OWORD *)unint64_t v189 = 0u;
      long long v190 = 0u;
      *(_OWORD *)&v188[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Silence label is set to ", 24);
      int v104 = (void *)std::ostream::operator<<();
      int v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)" but does not match ", 20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"the auto-determined silence label ", 34);
      int v106 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)". Will use latter.", 18);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v188);
    }
    *((_DWORD *)this + 320) = v102;
  }
  if (*((char *)this + 1143) < 0)
  {
    if (!*((void *)this + 141)) {
      goto LABEL_185;
    }
  }
  else if (!*((unsigned char *)this + 1143))
  {
    goto LABEL_185;
  }
  quasar::ModelLoader::readSymbolTable(*((void *)this + 46), (uint64_t)this + 1120, 4, 0, v188);
  long long v107 = *(_OWORD *)&v188[0].__locale_;
  v188[1].__locale_ = 0;
  v188[0].__locale_ = 0;
  unsigned int v108 = (std::__shared_weak_count *)*((void *)this + 144);
  *(_OWORD *)((char *)this + 1144) = v107;
  if (v108)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v108);
    if (v188[1].__locale_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v188[1].__locale_);
    }
  }
  if ((*((_DWORD *)this + 538) & 0x80000000) == 0)
  {
    (*(void (**)(std::locale *__return_ptr))(**((void **)this + 143) + 88))(v188);
    if (SHIBYTE(v189[0]) < 0)
    {
      if (v188[1].__locale_ != (std::locale::__imp *)7)
      {
        operator delete(v188[0].__locale_);
LABEL_184:
        *((_DWORD *)this + 538) = -1;
        goto LABEL_185;
      }
      BOOL v111 = *(_DWORD *)v188[0].__locale_ != 1634492988 || *(_DWORD *)((char *)v188[0].__locale_ + 3) != 1047228001;
      operator delete(v188[0].__locale_);
      if (v111) {
        goto LABEL_184;
      }
    }
    else
    {
      if (SHIBYTE(v189[0]) != 7) {
        goto LABEL_184;
      }
      if (LODWORD(v188[0].__locale_) != 1634492988 || *(_DWORD *)((char *)&v188[0].__locale_ + 3) != 1047228001) {
        goto LABEL_184;
      }
    }
  }
LABEL_185:
  memset(&v172, 0, sizeof(v172));
  if (*((char *)this + 1207) < 0)
  {
    if (*((void *)this + 149)) {
      goto LABEL_187;
    }
  }
  else if (*((unsigned char *)this + 1207))
  {
LABEL_187:
    char v205 = 0;
    kaldi::Input::Input(&v164, (char *)this + 1184, &v205);
    std::string __p = 0;
    int v168 = 0;
    v169[0] = 0;
    unint64_t v112 = (void *)kaldi::Input::Stream((kaldi::Input *)&v164);
    std::ios_base::getloc((const std::ios_base *)((char *)v112 + *(void *)(*v112 - 24)));
    uint64_t v113 = std::locale::use_facet(v188, MEMORY[0x1E4FBA258]);
    unsigned __int8 v114 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v113->__vftable[2].~facet_0)(v113, 10);
    std::locale::~locale(v188);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v112, (uint64_t)&__p, v114);
    if ((kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ":", 1, &v172) & 1) == 0)
    {
      long long v203 = 0u;
      long long v204 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      *(_OWORD *)__src = 0u;
      long long v192 = 0u;
      *(_OWORD *)unint64_t v189 = 0u;
      long long v190 = 0u;
      *(_OWORD *)&v188[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
      unint64_t v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Invalid silence-phones string ", 30);
      if (v169[0] >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v169[0] >= 0) {
        uint64_t v155 = HIBYTE(v169[0]);
      }
      else {
        uint64_t v155 = (uint64_t)v168;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)p_p, v155);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
    }
    if (SHIBYTE(v169[0]) < 0) {
      operator delete(__p);
    }
    kaldi::Input::~Input((kaldi::Input *)&v164);
    goto LABEL_193;
  }
  if ((kaldi::SplitStringToIntegers<int>((uint64_t)this + 1160, ",", 0, &v172) & 1) == 0)
  {
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    *(_OWORD *)__src = 0u;
    long long v192 = 0u;
    *(_OWORD *)unint64_t v189 = 0u;
    long long v190 = 0u;
    *(_OWORD *)&v188[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
    BOOL v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Invalid silence-phones string ", 30);
    int v157 = *((char *)this + 1183);
    if (v157 >= 0) {
      long long v158 = (char *)this + 1160;
    }
    else {
      long long v158 = (char *)*((void *)this + 145);
    }
    if (v157 >= 0) {
      uint64_t v159 = *((unsigned __int8 *)this + 1183);
    }
    else {
      uint64_t v159 = *((void *)this + 146);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v158, v159);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
  }
LABEL_193:
  if (v172.__begin_ == v172.__end_)
  {
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    *(_OWORD *)__src = 0u;
    long long v192 = 0u;
    *(_OWORD *)unint64_t v189 = 0u;
    long long v190 = 0u;
    *(_OWORD *)&v188[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"No silence phones given!", 24);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
  }
  kaldi::SilencePhoneSet::SilencePhoneSet(v188, &v172);
  *((_DWORD *)this + 302) = v188[0].__locale_;
  *((std::locale *)this + 152) = v188[1];
  *((_WORD *)this + 612) = v189[0];
  std::vector<BOOL>::operator=((void **)this + 154, (uint64_t)&v189[1]);
  if ((std::locale *)((char *)this + 1208) != v188) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 1256, (char *)__src[0], (uint64_t)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 2);
  }
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  if (v189[1]) {
    operator delete(v189[1]);
  }
  if (*((char *)this + 1319) < 0)
  {
    if (!*((void *)this + 163)) {
      goto LABEL_207;
    }
  }
  else if (!*((unsigned char *)this + 1319))
  {
    goto LABEL_207;
  }
  quasar::ModelLoader::readWordBoundaryInfo(*((void **)this + 46), (unsigned int *)this + 320, (uint64_t)this + 1296, (uint64_t)this + 1320, (uint64_t *)v188);
  long long v115 = *(_OWORD *)&v188[0].__locale_;
  v188[1].__locale_ = 0;
  v188[0].__locale_ = 0;
  sockaddr v116 = (std::__shared_weak_count *)*((void *)this + 169);
  *((_OWORD *)this + 84) = v115;
  if (v116)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v116);
    if (v188[1].__locale_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v188[1].__locale_);
    }
  }
LABEL_207:
  if (*((char *)this + 1391) < 0)
  {
    if (!*((void *)this + 172)) {
      goto LABEL_218;
    }
  }
  else if (!*((unsigned char *)this + 1391))
  {
    goto LABEL_218;
  }
  if (*((char *)this + 1415) < 0)
  {
    if (!*((void *)this + 175)) {
      goto LABEL_218;
    }
  }
  else if (!*((unsigned char *)this + 1415))
  {
    goto LABEL_218;
  }
  std::allocate_shared[abi:ne180100]<quasar::LRStreamingConfidence,std::allocator<quasar::LRStreamingConfidence>,std::string &,std::string &,void>(v188);
  long long v117 = *(_OWORD *)&v188[0].__locale_;
  v188[0].__locale_ = 0;
  v188[1].__locale_ = 0;
  uint64_t v118 = (std::__shared_weak_count *)*((void *)this + 178);
  *(_OWORD *)((char *)this + 1416) = v117;
  if (v118)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v118);
    if (v188[1].__locale_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v188[1].__locale_);
    }
  }
LABEL_218:
  quasar::SystemConfig::Version::Version(v188, 31, 0);
  if (quasar::SystemConfig::Version::operator<((_DWORD *)this + 8, v188))
  {
    if (*((char *)this + 1319) < 0) {
      uint64_t v119 = *((void *)this + 163);
    }
    else {
      uint64_t v119 = *((unsigned __int8 *)this + 1319);
    }
    *((unsigned char *)this + 1360) = v119 == 0;
  }
  if (*((char *)this + 1455) < 0)
  {
    if (!*((void *)this + 180)) {
      goto LABEL_228;
    }
LABEL_227:
    operator new();
  }
  if (*((unsigned char *)this + 1455)) {
    goto LABEL_227;
  }
LABEL_228:
  quasar::EndPointDecoderConfig::init((uint64_t)this + 1472);
  quasar::EndPointDecoderConfig::init((uint64_t)this + 1776);
  if (*((char *)this + 1511) < 0)
  {
    if (*((void *)this + 187)) {
      goto LABEL_230;
    }
  }
  else if (*((unsigned char *)this + 1511))
  {
LABEL_230:
    BOOL v120 = 1;
    goto LABEL_236;
  }
  if (*((char *)this + 1815) < 0) {
    uint64_t v121 = *((void *)this + 225);
  }
  else {
    uint64_t v121 = *((unsigned __int8 *)this + 1815);
  }
  BOOL v120 = v121 != 0;
LABEL_236:
  if (!*((void *)this + 168))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    if (v120)
    {
      BOOL v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"ERROR 1: Cannot compute pause counts - word boundary info is missing", 68);
      std::ios_base::getloc((const std::ios_base *)((char *)v122 + *(void *)(*v122 - 24)));
      BOOL v123 = std::locale::use_facet(v188, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v123->__vftable[2].~facet_0)(v123, 10);
      std::locale::~locale(v188);
      std::ostream::put();
      std::ostream::flush();
    }
    if (!*((unsigned char *)this + 1360))
    {
      int v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"ERROR 2: autocomplete-partial-result is false (default), but word-boundary-int-file is missing.\nOption 1: Set autocomplete-partial-result=true. This is *usually* done only for 'srch' and 'srch'-variant (WebSearch) decoder chains. This is required if the model doesn't have word-boundary-int-file.\nOption 2: Keep using autocomplete-partial-result=false, but add a word-boundary-int-file. This is *usually* done for all other tasks.", 430);
      std::ios_base::getloc((const std::ios_base *)((char *)v124 + *(void *)(*v124 - 24)));
      BOOL v125 = std::locale::use_facet(v188, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v125->__vftable[2].~facet_0)(v125, 10);
      std::locale::~locale(v188);
      std::ostream::put();
      std::ostream::flush();
    }
    std::stringbuf::str();
    if ((char)v166 < 0)
    {
      if (v165) {
        goto LABEL_342;
      }
      operator delete(v164);
    }
    else if (v166)
    {
LABEL_342:
      long long v203 = 0u;
      long long v204 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      *(_OWORD *)__src = 0u;
      long long v192 = 0u;
      *(_OWORD *)unint64_t v189 = 0u;
      long long v190 = 0u;
      *(_OWORD *)&v188[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
      if ((v166 & 0x80u) == 0) {
        int v160 = &v164;
      }
      else {
        int v160 = v164;
      }
      if ((v166 & 0x80u) == 0) {
        uint64_t v161 = v166;
      }
      else {
        uint64_t v161 = (uint64_t)v165;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)v160, v161);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
    }
    std::string __p = (void *)*MEMORY[0x1E4FBA418];
    *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
    int v168 = (_DWORD *)(MEMORY[0x1E4FBA470] + 16);
    if (v170 < 0) {
      operator delete((void *)v169[7]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B3EA8520](&v171);
  }
  quasar::SystemConfig::Version::Version(v188, 31, 0);
  if (quasar::SystemConfig::Version::operator>=((_DWORD *)this + 8, v188) && v120)
  {
    int64_t v127 = (std::__shared_weak_count *)v163;
    if (*((unsigned char *)this + 1360))
    {
      long long v203 = 0u;
      long long v204 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      *(_OWORD *)__src = 0u;
      long long v192 = 0u;
      *(_OWORD *)unint64_t v189 = 0u;
      long long v190 = 0u;
      *(_OWORD *)&v188[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"needPauseCounts=true and autocomplete-partial-result=true is not supported yet.", 79);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
    }
  }
  else
  {
    int64_t v127 = (std::__shared_weak_count *)v163;
  }
  if (*((unsigned char *)this + 1938))
  {
    if (!*((void *)this + 168))
    {
      *((unsigned char *)this + 1938) = 0;
      if (quasar::gLogLevel >= 4)
      {
        long long v203 = 0u;
        long long v204 = 0u;
        long long v201 = 0u;
        long long v202 = 0u;
        long long v199 = 0u;
        long long v200 = 0u;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        long long v193 = 0u;
        long long v194 = 0u;
        *(_OWORD *)__src = 0u;
        long long v192 = 0u;
        *(_OWORD *)unint64_t v189 = 0u;
        long long v190 = 0u;
        *(_OWORD *)&v188[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Eager disabled because word-boundary-int-file is missing.", 57);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v188);
      }
    }
  }
  if (*((unsigned char *)this + 1464))
  {
    uint64_t v128 = *((void *)this + 53);
    unint64_t v130 = *(const std::string **)(v128 + 64);
    uint64_t v129 = *(const std::string **)(v128 + 72);
    if (v130 == v129)
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v203 = 0u;
        long long v204 = 0u;
        long long v201 = 0u;
        long long v202 = 0u;
        long long v199 = 0u;
        long long v200 = 0u;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        long long v193 = 0u;
        long long v194 = 0u;
        *(_OWORD *)__src = 0u;
        long long v192 = 0u;
        *(_OWORD *)unint64_t v189 = 0u;
        long long v190 = 0u;
        *(_OWORD *)&v188[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"VoiceTriggerPhrase not set. This could lead to wrong endpointing that clips any payload after \"Hey Siri\"", 104);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v188);
      }
    }
    else
    {
      float v162 = (uint64_t *)((char *)this + 2472);
      do
      {
        std::string __p = 0;
        int v168 = 0;
        v169[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v188, " ");
        quasar::splitAndTrimNoEmpty(v130, (char *)v188, &v164);
        if (SHIBYTE(v189[0]) < 0) {
          operator delete(v188[0].__locale_);
        }
        unint64_t v132 = (uint64_t *)v164;
        uint64_t v131 = v165;
        if (v164 == v165)
        {
          int v136 = v168;
        }
        else
        {
          do
          {
            int v133 = quasar::QsrTextSymbolTable::Find(*((void *)this + 272), (uint64_t)v132);
            int v134 = v133;
            if (v133 == -1)
            {
              long long v203 = 0u;
              long long v204 = 0u;
              long long v201 = 0u;
              long long v202 = 0u;
              long long v199 = 0u;
              long long v200 = 0u;
              long long v197 = 0u;
              long long v198 = 0u;
              long long v195 = 0u;
              long long v196 = 0u;
              long long v193 = 0u;
              long long v194 = 0u;
              *(_OWORD *)__src = 0u;
              long long v192 = 0u;
              *(_OWORD *)unint64_t v189 = 0u;
              long long v190 = 0u;
              *(_OWORD *)&v188[0].__locale_ = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
              BOOL v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"VoiceTrigger phrase word \"", 26);
              int v149 = *((char *)v132 + 23);
              if (v149 >= 0) {
                uint64_t v150 = (uint64_t)v132;
              }
              else {
                uint64_t v150 = *v132;
              }
              if (v149 >= 0) {
                uint64_t v151 = *((unsigned __int8 *)v132 + 23);
              }
              else {
                uint64_t v151 = v132[1];
              }
              unint64_t v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, v150, v151);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)"\" not found in symbol table.", 28);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v188);
            }
            unint64_t v135 = v168;
            if ((unint64_t)v168 >= v169[0])
            {
              int v137 = __p;
              uint64_t v138 = ((char *)v168 - (unsigned char *)__p) >> 2;
              unint64_t v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v140 = v169[0] - (void)__p;
              if ((uint64_t)(v169[0] - (void)__p) >> 1 > v139) {
                unint64_t v139 = v140 >> 1;
              }
              if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v141 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v141 = v139;
              }
              if (v141)
              {
                unint64_t v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v169, v141);
                int v137 = __p;
                unint64_t v135 = v168;
              }
              else
              {
                unint64_t v142 = 0;
              }
              unint64_t v143 = &v142[4 * v138];
              *(_DWORD *)unint64_t v143 = v134;
              int v136 = v143 + 4;
              while (v135 != v137)
              {
                int v144 = *--v135;
                *((_DWORD *)v143 - 1) = v144;
                v143 -= 4;
              }
              std::string __p = v143;
              int v168 = v136;
              v169[0] = &v142[4 * v141];
              if (v137) {
                operator delete(v137);
              }
            }
            else
            {
              *int v168 = v133;
              int v136 = v135 + 1;
            }
            int v168 = v136;
            v132 += 3;
          }
          while (v132 != v131);
        }
        int64_t v127 = (std::__shared_weak_count *)v163;
        if (v136 != __p)
        {
          unint64_t v145 = *((void *)this + 310);
          if (v145 >= *((void *)this + 311))
          {
            uint64_t v146 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v162, (uint64_t)&__p);
          }
          else
          {
            std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v162, (uint64_t)&__p);
            uint64_t v146 = v145 + 24;
          }
          *((void *)this + 310) = v146;
        }
        v188[0].__locale_ = (std::locale::__imp *)&v164;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v188);
        if (__p)
        {
          int v168 = __p;
          operator delete(__p);
        }
        ++v130;
      }
      while (v130 != v129);
    }
  }
  if (*((unsigned char *)this + 808)) {
    quasar::OnlineLatticeBiglmFasterDecoder::loadDynamicClassTagDict(this, v126);
  }
  int v147 = quasar::gLogLevel;
  if (quasar::gLogLevel > 4)
  {
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    *(_OWORD *)__src = 0u;
    long long v192 = 0u;
    *(_OWORD *)unint64_t v189 = 0u;
    long long v190 = 0u;
    *(_OWORD *)&v188[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Decoding beam: ", 15);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v188);
    int v147 = quasar::gLogLevel;
  }
  if (v147 >= 4)
  {
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v193 = 0u;
    long long v194 = 0u;
    *(_OWORD *)__src = 0u;
    long long v192 = 0u;
    *(_OWORD *)unint64_t v189 = 0u;
    long long v190 = 0u;
    *(_OWORD *)&v188[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v188);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Finished initializing OnlineLatticeBiglmFasterDecoder.", 54);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v188);
  }
  if (v172.__begin_)
  {
    v172.__end_ = v172.__begin_;
    operator delete(v172.__begin_);
  }
  if (v173)
  {
    long long v174 = (char *)v173;
    operator delete(v173);
  }
  if (v176[0])
  {
    v176[1] = v176[0];
    operator delete(v176[0]);
  }
  v188[0].__locale_ = (std::locale::__imp *)&v178;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v188);
  std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__value_func[abi:ne180100](v208);
  v188[0].__locale_ = (std::locale::__imp *)&v181;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v188);
  if (v127) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v127);
  }
}

void sub_1B1EC98E8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1EC99A8);
}

void sub_1B1EC991C()
{
}

uint64_t fst::ApplyProbabilityScale<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t result, float a2)
{
  if (a2 == 1.0) {
    return result;
  }
  uint64_t v3 = result;
  unsigned int v11 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)result + 128))(result, &v9);
  while (1)
  {
    uint64_t result = v9;
    if (!v9)
    {
      if ((int)v11 >= v10) {
        return result;
      }
LABEL_9:
      uint64_t v5 = v11;
      goto LABEL_10;
    }
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t result = v9;
    if (v4) {
      break;
    }
    if (!v9) {
      goto LABEL_9;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
LABEL_10:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 296))(v3, v5, &v8);
    while (!(*(unsigned int (**)(uint64_t))(*(void *)v8 + 24))(v8))
    {
      long long v7 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
      *((float *)&v7 + 2) = *((float *)&v7 + 2) * a2;
      (*(void (**)(uint64_t, long long *))(*(void *)v8 + 88))(v8, &v7);
      (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    }
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    LODWORD(v7) = (*(float (**)(uint64_t, uint64_t))(*(void *)v3 + 32))(v3, v5);
    LODWORD(v8) = 2139095040;
    if (*(float *)&v7 != INFINITY)
    {
      float v6 = (*(float (**)(uint64_t, uint64_t))(*(void *)v3 + 32))(v3, v5);
      (*(void (**)(uint64_t, uint64_t, float))(*(void *)v3 + 184))(v3, v5, v6 * a2);
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 32))(v9);
    }
    else {
      ++v11;
    }
  }
  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return result;
}

void sub_1B1EC9CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::shared_ptr[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>(&v2, a2);
}

uint64_t kaldi::ReadVectorVectorSimple<int>(uint64_t a1, uint64_t *a2)
{
  v34[0] = 0;
  if (kaldi::Input::OpenInternal(v34, a1, 0, 0))
  {
    uint64_t v3 = (void *)kaldi::Input::Stream((kaldi::Input *)v34);
    std::vector<std::vector<int>>::__clear[abi:ne180100](a2);
    memset(&v33, 0, sizeof(v33));
    uint64_t v22 = *(std::locale::__imp **)(MEMORY[0x1E4FBA410] + 24);
    uint64_t v23 = (std::locale::__imp *)*MEMORY[0x1E4FBA410];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
      int v4 = std::locale::use_facet(&v25, MEMORY[0x1E4FBA258]);
      unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
      std::locale::~locale(&v25);
      float v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, (uint64_t)&v33, v5);
      if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
        break;
      }
      long long v30 = 0;
      long long v31 = 0;
      long long v32 = 0;
      std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v25, &v33, 8);
      int v24 = 0;
      while (1)
      {
        long long v7 = (void *)MEMORY[0x1B3EA7DD0](&v25, &v24);
        if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0) {
          break;
        }
        uint64_t v8 = v31;
        if (v31 >= v32)
        {
          int v10 = v30;
          uint64_t v11 = (v31 - v30) >> 2;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v32 - v30;
          if ((v32 - v30) >> 1 > v12) {
            unint64_t v12 = v13 >> 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v32, v14);
            int v10 = v30;
            uint64_t v8 = v31;
          }
          else
          {
            uint64_t v15 = 0;
          }
          float v16 = &v15[4 * v11];
          *(_DWORD *)float v16 = v24;
          uint64_t v9 = v16 + 4;
          while (v8 != v10)
          {
            int v17 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v16 - 1) = v17;
            v16 -= 4;
          }
          long long v30 = v16;
          long long v31 = v9;
          long long v32 = &v15[4 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(_DWORD *)long long v31 = v24;
          uint64_t v9 = v8 + 4;
        }
        long long v31 = v9;
      }
      unint64_t v18 = a2[1];
      if (v18 >= a2[2])
      {
        uint64_t v19 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(a2, (uint64_t)&v30);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)a2, (uint64_t)&v30);
        uint64_t v19 = v18 + 24;
      }
      a2[1] = v19;
      v25.__locale_ = v23;
      *(std::locale::__imp **)((char *)&v25.__locale_ + *((void *)v23 - 3)) = v22;
      uint64_t v26 = MEMORY[0x1E4FBA470] + 16;
      if (v28 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x1B3EA8520](&v29);
      if (v30)
      {
        long long v31 = v30;
        operator delete(v30);
      }
    }
    uint64_t v20 = (*((unsigned __int8 *)v3 + *(void *)(*v3 - 24) + 32) >> 1) & 1;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  kaldi::Input::~Input((kaldi::Input *)v34);
  return v20;
}

void sub_1B1ECA154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
  kaldi::Input::~Input((kaldi::Input *)(v13 - 96));
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::loadDynamicClassTagDict(quasar::OnlineLatticeBiglmFasterDecoder *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this, a2);
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  memset(v105, 0, sizeof(v105));
  int v106 = 1065353216;
  memset(v103, 0, sizeof(v103));
  int v104 = 1065353216;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  kaldi::SplitStringToVector((const std::string *)(v2 + 816), ",", 1, (uint64_t)&v100);
  kaldi::SplitStringToVector((const std::string *)(v2 + 848), ",", 1, (uint64_t)&v97);
  memset(v95, 0, sizeof(v95));
  int v96 = 1065353216;
  if (*(char *)(v2 + 895) < 0)
  {
    if (*(void *)(v2 + 880)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(v2 + 895))
  {
LABEL_3:
    kaldi::Input::Input(v94, v2 + 872, 0);
    uint64_t v3 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v94);
    uint64_t v4 = *v3;
    if (*(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32))
    {
      long long v122 = 0u;
      long long v123 = 0u;
      long long v120 = 0u;
      long long v121 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long __s = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
      long long v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"SymbolTable::ReadText: Can't open dyanamic classlm tag file ", 60);
      int v68 = *(char *)(v2 + 895);
      if (v68 >= 0) {
        uint64_t v69 = v2 + 872;
      }
      else {
        uint64_t v69 = *(void *)(v2 + 872);
      }
      if (v68 >= 0) {
        uint64_t v70 = *(unsigned __int8 *)(v2 + 895);
      }
      else {
        uint64_t v70 = *(void *)(v2 + 880);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__s);
    }
    unsigned __int8 v5 = (std::locale::__imp *)*MEMORY[0x1E4FBA410];
    float v6 = *(std::locale::__imp **)(MEMORY[0x1E4FBA410] + 24);
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(v4 - 24)));
      long long v7 = std::locale::use_facet(v77, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      std::locale::~locale(v77);
      uint64_t v8 = (void *)std::istream::getline();
      if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
        break;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&__s);
      std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)v77, &__p, 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      memset(&__p, 0, sizeof(__p));
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v77, (uint64_t)&__p);
      int v9 = quasar::QsrTextSymbolTable::Find(*(void *)(v2 + 2176), (uint64_t)&__p);
      int v75 = 0;
      MEMORY[0x1B3EA7DC0](v77, &v75);
      int v10 = v75;
      int v74 = v9;
      uint64_t v71 = &v74;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v95, &v74, (uint64_t)&std::piecewise_construct, (_DWORD **)&v71)+ 5) = v10;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v77[0].__locale_ = v5;
      *(std::locale::__imp **)((char *)&v77[0].__locale_ + *((void *)v5 - 3)) = v6;
      *(void *)&long long v78 = MEMORY[0x1E4FBA470] + 16;
      if (SBYTE7(v83) < 0) {
        operator delete((void *)v82);
      }
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x1B3EA8520]((char *)&v84 + 8);
      uint64_t v4 = *v3;
    }
    if (v101 == v100)
    {
LABEL_91:
      if (v98 != v97)
      {
        uint64_t v45 = 0;
        if ((unint64_t)((v98 - v97) / 24) <= 1) {
          uint64_t v46 = 1;
        }
        else {
          uint64_t v46 = (v98 - v97) / 24;
        }
        do
        {
          uint64_t v47 = quasar::QsrTextSymbolTable::Find(*(void *)(v2 + 2176), v97 + v45);
          if (v47 == -1)
          {
            long long v92 = 0u;
            long long v93 = 0u;
            long long v90 = 0u;
            long long v91 = 0u;
            long long v88 = 0u;
            long long v89 = 0u;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            *(_OWORD *)unint64_t v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            *(_OWORD *)&v77[0].__locale_ = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
            unint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Could not find \"", 16);
            int v49 = *(char *)(v100 + v45 + 23);
            if (v49 >= 0) {
              uint64_t v50 = v100 + v45;
            }
            else {
              uint64_t v50 = *(void *)(v100 + v45);
            }
            if (v49 >= 0) {
              uint64_t v51 = *(unsigned __int8 *)(v100 + v45 + 23);
            }
            else {
              uint64_t v51 = *(void *)(v100 + v45 + 8);
            }
            unint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"\" in base symbol table", 22);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
          }
          LODWORD(v77[0].__locale_) = v47;
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v103, (int *)v77, v77);
          v45 += 24;
          --v46;
        }
        while (v46);
      }
      kaldi::quasar::DynamicClassTagDict::DynamicClassTagDict((uint64_t)v77, (uint64_t)v105, (uint64_t)v95, (uint64_t)v103);
    }
    uint64_t v11 = 0;
    if ((unint64_t)((v101 - v100) / 24) <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = (v101 - v100) / 24;
    }
    while (1)
    {
      uint64_t v13 = quasar::QsrTextSymbolTable::Find(*(void *)(v2 + 2176), v100 + 24 * v11);
      if (v13 == -1)
      {
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        *(_OWORD *)unint64_t v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        *(_OWORD *)&v77[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Could not find \"", 16);
        uint64_t v54 = v100 + 24 * v11;
        int v55 = *(char *)(v54 + 23);
        if (v55 >= 0) {
          uint64_t v56 = v100 + 24 * v11;
        }
        else {
          uint64_t v56 = *(void *)v54;
        }
        if (v55 >= 0) {
          uint64_t v57 = *(unsigned __int8 *)(v54 + 23);
        }
        else {
          uint64_t v57 = *(void *)(v54 + 8);
        }
        uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v56, v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
      }
      unint64_t v14 = (const void **)(v100 + 24 * v11);
      if (*((char *)v14 + 23) >= 0) {
        size_t v15 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v15 = (size_t)v14[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v15 + 6);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v15)
      {
        if (*((char *)v14 + 23) >= 0) {
          int v17 = v14;
        }
        else {
          int v17 = *v14;
        }
        memmove(p_p, v17, v15);
      }
      strcpy((char *)p_p + v15, "-start");
      unint64_t v18 = (const void **)(v100 + 24 * v11);
      if (*((char *)v18 + 23) >= 0) {
        size_t v19 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v19 = (size_t)v18[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v71, v19 + 4);
      if ((v73 & 0x80u) == 0) {
        uint64_t v20 = &v71;
      }
      else {
        uint64_t v20 = v71;
      }
      if (v19)
      {
        if (*((char *)v18 + 23) >= 0) {
          long long v21 = v18;
        }
        else {
          long long v21 = *v18;
        }
        memmove(v20, v21, v19);
      }
      strcpy((char *)v20 + v19, "-end");
      int v22 = v13 + 1;
      quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(v2 + 2176), v77);
      if ((SBYTE7(v78) & 0x80u) == 0) {
        uint64_t locale = (std::locale::__imp *)BYTE7(v78);
      }
      else {
        uint64_t locale = v77[1].__locale_;
      }
      uint64_t v24 = v73;
      if ((v73 & 0x80u) != 0) {
        uint64_t v24 = v72;
      }
      if (locale == (std::locale::__imp *)v24)
      {
        if ((v73 & 0x80u) == 0) {
          std::locale v25 = (unsigned __int8 *)&v71;
        }
        else {
          std::locale v25 = (unsigned __int8 *)v71;
        }
        if ((BYTE7(v78) & 0x80) != 0)
        {
          long long v30 = v77[0].__locale_;
          int v31 = memcmp(v77[0].__locale_, v25, (size_t)v77[1].__locale_);
          operator delete(v30);
          if (!v31) {
            goto LABEL_63;
          }
        }
        else
        {
          if (!BYTE7(v78)) {
            goto LABEL_63;
          }
          uint64_t v26 = 0;
          do
          {
            int v27 = *((unsigned __int8 *)&v77[0].__locale_ + v26);
            int v28 = v25[v26];
          }
          while (v27 == v28 && BYTE7(v78) - 1 != v26++);
          if (v27 == v28) {
            goto LABEL_63;
          }
        }
      }
      else if ((BYTE7(v78) & 0x80) != 0)
      {
        operator delete(v77[0].__locale_);
      }
      uint64_t v32 = quasar::QsrTextSymbolTable::Find(*(void *)(v2 + 2176), (uint64_t)&v71);
      int v22 = v32;
      if (v32 == -1)
      {
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        *(_OWORD *)unint64_t v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        *(_OWORD *)&v77[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        unint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Could not find \"", 16);
        if ((v73 & 0x80u) == 0) {
          uint64_t v64 = &v71;
        }
        else {
          uint64_t v64 = v71;
        }
        if ((v73 & 0x80u) == 0) {
          uint64_t v65 = v73;
        }
        else {
          uint64_t v65 = v72;
        }
        uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
      }
LABEL_63:
      int v33 = v13 + 2;
      quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(v2 + 2176), v77);
      if ((SBYTE7(v78) & 0x80u) == 0) {
        long long v34 = (std::locale::__imp *)BYTE7(v78);
      }
      else {
        long long v34 = v77[1].__locale_;
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (v34 != (std::locale::__imp *)size)
      {
        if ((BYTE7(v78) & 0x80) != 0) {
          operator delete(v77[0].__locale_);
        }
LABEL_85:
        uint64_t v43 = quasar::QsrTextSymbolTable::Find(*(void *)(v2 + 2176), (uint64_t)&__p);
        int v33 = v43;
        if (v43 == -1)
        {
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          *(_OWORD *)unint64_t v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          *(_OWORD *)&v77[0].__locale_ = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
          unint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Could not find \"", 16);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v60 = &__p;
          }
          else {
            uint64_t v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v61 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v61 = __p.__r_.__value_.__l.__size_;
          }
          uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\" in base symbol table", 22);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
        }
        goto LABEL_86;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v36 = &__p;
      }
      else {
        long long v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((BYTE7(v78) & 0x80) != 0)
      {
        uint64_t v41 = v77[0].__locale_;
        int v42 = memcmp(v77[0].__locale_, v36, (size_t)v77[1].__locale_);
        operator delete(v41);
        if (v42) {
          goto LABEL_85;
        }
      }
      else if (BYTE7(v78))
      {
        uint64_t v37 = 0;
        do
        {
          int v38 = *((unsigned __int8 *)&v77[0].__locale_ + v37);
          int v39 = v36->__r_.__value_.__s.__data_[v37];
        }
        while (v38 == v39 && BYTE7(v78) - 1 != v37++);
        if (v38 != v39) {
          goto LABEL_85;
        }
      }
LABEL_86:
      int v75 = v13;
      v77[0].__locale_ = (std::locale::__imp *)&v75;
      uint64_t v44 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v105, &v75, (uint64_t)&std::piecewise_construct, v77);
      *((_DWORD *)v44 + 5) = v33;
      *((_DWORD *)v44 + 6) = v22;
      if ((char)v73 < 0) {
        operator delete(v71);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (++v11 == v12) {
        goto LABEL_91;
      }
    }
  }
  long long v122 = 0uLL;
  long long v123 = 0uLL;
  long long v120 = 0uLL;
  long long v121 = 0uLL;
  long long v118 = 0uLL;
  long long v119 = 0uLL;
  long long v116 = 0uLL;
  long long v117 = 0uLL;
  long long v114 = 0uLL;
  long long v115 = 0uLL;
  long long v112 = 0uLL;
  long long v113 = 0uLL;
  long long v110 = 0uLL;
  long long v111 = 0uLL;
  long long v108 = 0uLL;
  long long v109 = 0uLL;
  long long __s = 0uLL;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"The dyanamic classlm tag prior file name is empty", 49);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__s);
}

void sub_1B1ECAD5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  JUMPOUT(0x1B1ECADE8);
}

void sub_1B1ECAD7C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1ECAE28);
}

void sub_1B1ECAD90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::istringstream::~istringstream((uint64_t)&a20);
  JUMPOUT(0x1B1ECADE8);
}

void sub_1B1ECADD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17)
{
}

void sub_1B1ECADE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,int a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  kaldi::Input::~Input((kaldi::Input *)&a52);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a54);
  STACK[0x220] = (unint64_t)&a60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a66);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::writeRecordedStateAccesses(uint64_t a1, uint64_t a2)
{
  v63[2] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 2300) || *(unsigned char *)(a1 + 440))
  {
    uint64_t v3 = *(long long **)(a1 + 1048);
    uint64_t v4 = (long long *)(a1 + 1056);
    if (v3 != (long long *)(a1 + 1056))
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](&__str, v3 + 2);
        if (!v61
        {
          goto LABEL_76;
        }
        unsigned __int8 v5 = v62;
        if (v62) {
          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v57, "");
        if (*(char *)(a2 + 23) < 0)
        {
          if (*(void *)(a2 + 8))
          {
LABEL_10:
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = __str.__r_.__value_.__l.__size_;
            }
            else {
              p_str = &__str;
            }
            uint64_t v8 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
            while (size)
            {
              int v9 = v8[size--];
              if (v9 == 47) {
                goto LABEL_44;
              }
            }
            std::string::size_type size = -1;
LABEL_44:
            std::string::basic_string((std::string *)v39, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v56);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 47, (uint64_t)&v55);
            if (v39[23] >= 0) {
              int v22 = v39;
            }
            else {
              int v22 = *(const std::string::value_type **)v39;
            }
            if (v39[23] >= 0) {
              std::string::size_type v23 = v39[23];
            }
            else {
              std::string::size_type v23 = *(void *)&v39[8];
            }
            uint64_t v24 = std::string::append(&v55, v22, v23);
            long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            uint64_t v26 = std::string::append(&v56, ".recorded_state_accesses");
            int v27 = (void *)v26->__r_.__value_.__r.__words[0];
            v63[0] = v26->__r_.__value_.__l.__size_;
            *(void *)((char *)v63 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
            unsigned __int8 v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            if ((char)v59 < 0) {
              operator delete(v57);
            }
            uint64_t v57 = v27;
            *(void *)uint64_t v58 = v63[0];
            *(void *)&v58[7] = *(void *)((char *)v63 + 7);
            unsigned __int8 v59 = v28;
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v56.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v55.__r_.__value_.__l.__data_);
            }
            if ((v39[23] & 0x80000000) != 0)
            {
              long long v21 = *(void **)v39;
              goto LABEL_58;
            }
            goto LABEL_59;
          }
        }
        else if (*(unsigned char *)(a2 + 23))
        {
          goto LABEL_10;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v10 = __str.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v56, v10 + 1);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v11 = &v56;
        }
        else {
          uint64_t v11 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if (v10)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v12 = &__str;
          }
          else {
            uint64_t v12 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          memmove(v11, v12, v10);
        }
        *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 46;
        pid_t v13 = getpid();
        std::to_string(&v55, v13);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v14 = &v55;
        }
        else {
          unint64_t v14 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v15 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v15 = v55.__r_.__value_.__l.__size_;
        }
        float v16 = std::string::append(&v56, (const std::string::value_type *)v14, v15);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        *(void *)&v39[16] = *((void *)&v16->__r_.__value_.__l + 2);
        *(_OWORD *)int v39 = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        unint64_t v18 = std::string::append((std::string *)v39, ".recorded_state_accesses");
        size_t v19 = (void *)v18->__r_.__value_.__r.__words[0];
        v63[0] = v18->__r_.__value_.__l.__size_;
        *(void *)((char *)v63 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if ((char)v59 < 0) {
          operator delete(v57);
        }
        uint64_t v57 = v19;
        *(void *)uint64_t v58 = v63[0];
        *(void *)&v58[7] = *(void *)((char *)v63 + 7);
        unsigned __int8 v59 = v20;
        if ((v39[23] & 0x80000000) != 0) {
          operator delete(*(void **)v39);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        {
          long long v21 = (void *)v56.__r_.__value_.__r.__words[0];
LABEL_58:
          operator delete(v21);
        }
LABEL_59:
        if (quasar::filesystem::exists((char *)&v57))
        {
          if (quasar::gLogLevel >= 1)
          {
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v40 = 0u;
            memset(v39, 0, sizeof(v39));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
            uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"State access file [", 19);
            if ((v59 & 0x80u) == 0) {
              long long v30 = &v57;
            }
            else {
              long long v30 = (void **)v57;
            }
            if ((v59 & 0x80u) == 0) {
              uint64_t v31 = v59;
            }
            else {
              uint64_t v31 = *(void *)v58;
            }
            uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"] exists", 8);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v39);
          }
          std::runtime_error::runtime_error(&v38, "State access file exists - not overwriting");
          std::runtime_error::~runtime_error(&v38);
        }
        int v33 = v62;
        v37[0] = v61;
        v37[1] = v62;
        if (v62) {
          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        quasar::writeRecordedStateAccessForFst((uint64_t)v37, (uint64_t)&__str, (uint64_t)&v57);
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        if ((char)v59 < 0)
        {
          operator delete(v57);
          if (!v5) {
            goto LABEL_76;
          }
LABEL_75:
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          goto LABEL_76;
        }
        if (v5) {
          goto LABEL_75;
        }
LABEL_76:
        if (v62) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v62);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        long long v34 = (long long *)*((void *)v3 + 1);
        if (v34)
        {
          do
          {
            int v35 = v34;
            long long v34 = *(long long **)v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            int v35 = (long long *)*((void *)v3 + 2);
            BOOL v36 = *(void *)v35 == (void)v3;
            uint64_t v3 = v35;
          }
          while (!v36);
        }
        uint64_t v3 = v35;
      }
      while (v35 != v4);
    }
  }
}

void sub_1B1ECB320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 209) < 0) {
    operator delete(*(void **)(v19 - 232));
  }
  if (*(char *)(v19 - 185) < 0) {
    operator delete(*(void **)(v19 - 208));
  }
  if (*(char *)(v19 - 161) < 0) {
    operator delete(*(void **)(v19 - 184));
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair(v19 - 160);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::resetAccessedStates(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  if (*((unsigned char *)this + 2300) || *((unsigned char *)this + 440))
  {
    id v1 = (long long *)*((void *)this + 131);
    uint64_t v2 = (char *)this + 1056;
    if (v1 != (long long *)((char *)this + 1056))
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](&__p, v1 + 2);
        if (lpsrc)
        {
          if (v3)
          {
            uint64_t v4 = v10;
            if (v10) {
              atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            quasar::StateAccessRecordingFst::ResetAccessedStates(v3);
            if (v4) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v4);
            }
          }
        }
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        unsigned __int8 v5 = (long long *)*((void *)v1 + 1);
        if (v5)
        {
          do
          {
            float v6 = v5;
            unsigned __int8 v5 = *(long long **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            float v6 = (long long *)*((void *)v1 + 2);
            BOOL v7 = *(void *)v6 == (void)v1;
            id v1 = v6;
          }
          while (!v7);
        }
        id v1 = v6;
      }
      while (v6 != (long long *)v2);
    }
  }
}

void sub_1B1ECB558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::resetAccessedStatesCounts(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  if (*((unsigned char *)this + 2300) || *((unsigned char *)this + 440))
  {
    id v1 = (long long *)*((void *)this + 131);
    uint64_t v2 = (char *)this + 1056;
    if (v1 != (long long *)((char *)this + 1056))
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](&__p, v1 + 2);
        if (lpsrc)
        {
          if (v3)
          {
            uint64_t v4 = v10;
            if (v10) {
              atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            quasar::StateAccessRecordingFst::ResetAccessedStatesCounts(v3);
            if (v4) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v4);
            }
          }
        }
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        unsigned __int8 v5 = (long long *)*((void *)v1 + 1);
        if (v5)
        {
          do
          {
            float v6 = v5;
            unsigned __int8 v5 = *(long long **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            float v6 = (long long *)*((void *)v1 + 2);
            BOOL v7 = *(void *)v6 == (void)v1;
            id v1 = v6;
          }
          while (!v7);
        }
        id v1 = v6;
      }
      while (v6 != (long long *)v2);
    }
  }
}

void sub_1B1ECB6A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::setUpDecoderPassData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 1208;
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a1 + 1208);
  uint64_t v6 = a2 + 96;
  uint64_t v7 = *(void *)(a1 + 1216);
  *(_WORD *)(a2 + 112) = *(_WORD *)(a1 + 1224);
  *(void *)(a2 + 104) = v7;
  std::vector<BOOL>::operator=((void **)(a2 + 120), a1 + 1232);
  if (v6 != v5) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 144), *(char **)(a1 + 1256), *(void *)(a1 + 1264), (uint64_t)(*(void *)(a1 + 1264) - *(void *)(a1 + 1256)) >> 2);
  }
  uint64_t v8 = *(void *)(a1 + 1144);
  uint64_t v9 = *(void *)(a1 + 1152);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a2 + 176);
  *(void *)(a2 + 168) = v8;
  *(void *)(a2 + 176) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = *(void *)(a1 + 1144);
  uint64_t v12 = *(void *)(a1 + 1152);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  pid_t v13 = *(std::__shared_weak_count **)(a2 + 192);
  *(void *)(a2 + 184) = v11;
  *(void *)(a2 + 192) = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *(_DWORD *)(a2 + 848) = *(_DWORD *)(a1 + 2152);
  uint64_t v14 = *(void *)(a1 + 1344);
  uint64_t v15 = *(void *)(a1 + 1352);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  float v16 = *(std::__shared_weak_count **)(a2 + 224);
  *(void *)(a2 + 216) = v14;
  *(void *)(a2 + 224) = v15;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v17 = *(void *)(a1 + 1280);
  *(unsigned char *)(a2 + 208) = *(unsigned char *)(a1 + 1288);
  *(void *)(a2 + 200) = v17;
  uint64_t v18 = *(void *)(a1 + 2176);
  uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(v18 + 96) + 112))(*(void *)(v18 + 96));
  if ((v19 & 0x8000000000000000) == 0) {
    v19 += *(void *)(v18 + 120);
  }
  *(_DWORD *)(a2 + 448) = v19;
  *(void *)(a2 + 688) = *(unsigned int *)(a1 + 2144);
  if (a2 + 696 != a1 + 2104)
  {
    *(_DWORD *)(a2 + 728) = *(_DWORD *)(a1 + 2136);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((void *)(a2 + 696), *(uint64_t **)(a1 + 2120), 0);
  }
  *(_WORD *)(a2 + 664) = *(_WORD *)(a1 + 2149);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100]((uint64_t *)(a2 + 248));
  unsigned __int8 v20 = *(uint64_t **)(a1 + 2224);
  long long v21 = *(uint64_t **)(a1 + 2232);
  while (v20 != v21)
  {
    *(void *)&long long v53 = *v20;
    uint64_t v22 = v20[1];
    *((void *)&v53 + 1) = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    if (!*(unsigned char *)(a1 + 2300) && !*(unsigned char *)(a1 + 440)) {
      goto LABEL_42;
    }
    uint64_t v23 = *v20;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v23, (uint64_t)&__p, &lpsrc);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (lpsrc)
    {
      if (v24)
      {
        uint64_t v25 = (uint64_t)v24;
        uint64_t v26 = v52;
        if (v52) {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPath(*v20, &__p);
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(*v20, &v48);
        quasar::StateAccessRecordingFst::getWrappedFst(v25, &v46);
        std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>((long long *)&__p, (uint64_t)&v48, &v46, &v49);
        long long v27 = v49;
        long long v49 = 0uLL;
        unsigned __int8 v28 = (std::__shared_weak_count *)*((void *)&v53 + 1);
        long long v53 = v27;
        if (v28)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          if (*((void *)&v49 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v49 + 1));
          }
        }
        if (v47) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        }
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (!v26) {
            goto LABEL_40;
          }
LABEL_39:
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          goto LABEL_40;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v26) {
          goto LABEL_39;
        }
      }
    }
LABEL_40:
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
LABEL_42:
    std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::push_back[abi:ne180100]((uint64_t *)(a2 + 248), &v53);
    if (*((void *)&v53 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53 + 1));
    }
    v20 += 2;
  }
  if (a2 + 272 != a1 + 2272) {
    std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>(a2 + 272, *(uint64_t **)(a1 + 2272), *(uint64_t **)(a1 + 2280), (uint64_t)(*(void *)(a1 + 2280) - *(void *)(a1 + 2272)) >> 4);
  }
  uint64_t v29 = (void **)(a2 + 296);
  if (a2 + 296 != a1 + 1072) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 296), *(char **)(a1 + 1072), *(void *)(a1 + 1080), (uint64_t)(*(void *)(a1 + 1080) - *(void *)(a1 + 1072)) >> 2);
  }
  if (*(float *)(a1 + 2296) > 0.0)
  {
    uint64_t v30 = *(void *)(*(void *)a3 + 24);
    uint64_t v31 = *(void *)(v30 + 272);
    uint64_t v32 = *(void *)(v30 + 280);
    if (v31 != v32)
    {
      int v33 = (void *)(a2 + 312);
      long long v34 = *(char **)(a2 + 304);
      do
      {
        int v35 = *(_DWORD *)(*(void *)v31 + 12);
        if ((unint64_t)v34 >= *v33)
        {
          uint64_t v37 = (char *)*v29;
          uint64_t v38 = (v34 - (unsigned char *)*v29) >> 2;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v40 = *v33 - (void)v37;
          if (v40 >> 1 > v39) {
            unint64_t v39 = v40 >> 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            long long v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 312, v41);
            uint64_t v37 = *(char **)(a2 + 296);
            long long v34 = *(char **)(a2 + 304);
          }
          else
          {
            long long v42 = 0;
          }
          long long v43 = &v42[4 * v38];
          *(_DWORD *)long long v43 = v35;
          BOOL v36 = v43 + 4;
          while (v34 != v37)
          {
            int v44 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *((_DWORD *)v43 - 1) = v44;
            v43 -= 4;
          }
          *(void *)(a2 + 296) = v43;
          *(void *)(a2 + 304) = v36;
          *(void *)(a2 + 312) = &v42[4 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *(_DWORD *)long long v34 = v35;
          BOOL v36 = v34 + 4;
        }
        *(void *)(a2 + 304) = v36;
        v31 += 16;
        long long v34 = v36;
      }
      while (v31 != v32);
    }
  }
}

void sub_1B1ECBB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  _Unwind_Resume(exception_object);
}

void quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPath(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (quasar::isPlaceholder((unsigned __int8 *)a1))
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(const std::string::value_type **)a1;
    std::string::size_type v5 = *(void *)(a1 + 8);
    std::string::__init_copy_ctor_external(a2, v4, v5);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void **std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18[2] = v15 + 16;
    std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1ECBD94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::setUpDecoding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 224))(a1, a2, a4);
  quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*(void *)a3 + 472));
  uint64_t v7 = *(uint64_t **)(*(void *)a3 + 472);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 2184);
  uint64_t v56 = *(void *)(a1 + 2176);
  uint64_t v57 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SymbolTableList::addSymbolTable(v7, &v56, 0, -1);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  uint64_t v9 = (char *)operator new(0x48uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)uint64_t v9 = &unk_1F0A5F418;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 2416);
  *(void *)(a1 + 2416) = v9;
  *(_OWORD *)(v9 + 24) = 0u;
  *(void *)(a1 + 2408) = v9 + 24;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v33 = a3;
  unint64_t v11 = *(uint64_t **)(a1 + 2224);
  uint64_t v12 = *(uint64_t **)(a1 + 2232);
  if (v11 != v12)
  {
    int v13 = *(_DWORD *)(a1 + 48);
    if (!v13) {
      int v13 = 0x20000;
    }
    uint64_t v14 = v13;
    do
    {
      uint64_t v15 = *(void *)(a1 + 2408);
      int v16 = *(_DWORD *)(a2 + 448);
      uint64_t v17 = *v11;
      std::string::basic_string[abi:ne180100]<0>(__p, "location-specific component not supported in OnlineLatticeBiglmFasterDecoder");
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v17, (uint64_t)__p, &v54);
      LODWORD(v43) = v16;
      *((void *)&v43 + 1) = v54;
      *(void *)&long long v44 = v55;
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      DWORD2(v44) = -1;
      long long v51 = 0;
      long long v52 = 0;
      uint64_t v53 = 0;
      uint64_t v18 = *(void *)(a2 + 216);
      if (v18)
      {
        std::set<int>::set[abi:ne180100]((uint64_t *)&v48, v18 + 32);
      }
      else
      {
        long long v49 = 0;
        uint64_t v50 = 0;
        std::string v48 = (void **)&v49;
      }
      kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v15, (unsigned int *)&v43, (uint64_t *)&v51, 0, 0, 0x40000000, v14, (uint64_t)&v48);
      std::__tree<int>::destroy((uint64_t)&v48, v49);
      std::string v48 = (void **)&v51;
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&v48);
      if ((void)v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v44);
      }
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      if (SBYTE7(v36) < 0) {
        operator delete(__p[0]);
      }
      v11 += 2;
    }
    while (v11 != v12);
  }
  uint64_t v19 = *(uint64_t **)(a1 + 2272);
  for (uint64_t i = *(uint64_t **)(a1 + 2280); v19 != i; v19 += 2)
  {
    uint64_t v21 = *(void *)(a1 + 2408);
    uint64_t v22 = *v19;
    std::string::basic_string[abi:ne180100]<0>(&v51, "location-specific component not supported in OnlineLatticeBiglmFasterDecoder");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v22, (uint64_t)&v51, &v46);
    std::string v48 = 0;
    long long v49 = 0;
    uint64_t v50 = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    int v45 = 1065353216;
    uint64_t v40 = 0;
    unint64_t v41 = 0;
    uint64_t v42 = 0;
    v39[0] = 0;
    v39[1] = 0;
    uint64_t v38 = v39;
    uint64_t v23 = (unint64_t)*(float *)(a1 + 2304);
    *(_OWORD *)std::string __p = 0u;
    long long v36 = 0u;
    int v37 = 1065353216;
    uint64_t v32 = __p;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(v21, v46, (unsigned int **)&v48, (uint64_t)&v43, (__int32 **)&v40, (uint64_t)&v38, 0, 0, 0, v23);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__p);
    std::__tree<int>::destroy((uint64_t)&v38, v39[0]);
    if (v40)
    {
      unint64_t v41 = v40;
      operator delete(v40);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v43);
    *(void *)&long long v43 = &v48;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    if (SHIBYTE(v53) < 0) {
      operator delete(v51);
    }
  }
  if (*(float *)(a1 + 2296) > 0.0)
  {
    uint64_t v24 = *(void *)(*(void *)a4 + 24);
    uint64_t v25 = *(uint64_t **)(v24 + 272);
    for (uint64_t j = *(uint64_t **)(v24 + 280); v25 != j; v25 += 2)
    {
      uint64_t v27 = *v25;
      uint64_t v28 = *(void *)(a1 + 2408);
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v36 = 0;
      uint64_t v29 = *(unsigned int *)(a2 + 448);
      uint64_t v30 = *(void *)(a2 + 216);
      if (v30)
      {
        std::set<int>::set[abi:ne180100]((uint64_t *)&v51, v30 + 32);
      }
      else
      {
        long long v52 = 0;
        uint64_t v53 = 0;
        long long v51 = &v52;
      }
      long long v43 = 0u;
      long long v44 = 0u;
      int v45 = 1065353216;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, uint64_t, void ***, long long *, uint64_t, void **))(*(void *)v27 + 16))(v27, v28, __p, v29, 0, 0, 0x40000000, &v51, &v43, 0x20000, v32);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v43);
      std::__tree<int>::destroy((uint64_t)&v51, v52);
      *(void *)&long long v43 = __p;
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, a2, v33, a4);
}

void sub_1B1ECC20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v38 = *(std::__shared_weak_count **)(v36 - 96);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmFasterDecoder::clearEagerData(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  uint64_t v2 = (char *)this + 2760;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 346);
  *(_OWORD *)uint64_t v2 = 0u;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 348);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::runImpl(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 216))(a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 184))(a1, a2, a3, a4);
  for (uint64_t i = 3;
        i == 3;
        uint64_t i = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 200))(a1, a2, a3, a4, a5))
  {
    ;
  }
  if (i == 4) {
    uint64_t i = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 208))(a1, a2, a3, a4);
  }
  if (a1[440])
  {
    uint64_t v11 = *(void *)(*(void *)a4 + 24);
    if (*(char *)(v11 + 535) < 0)
    {
      if (!*(void *)(v11 + 520)) {
        goto LABEL_21;
      }
    }
    else if (!*(unsigned char *)(v11 + 535))
    {
      goto LABEL_21;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v11 + 512), 47, (uint64_t)&v22);
    uint64_t v12 = *(void *)(*(void *)a4 + 24);
    uint64_t v15 = *(const std::string::value_type **)(v12 + 128);
    uint64_t v13 = v12 + 128;
    uint64_t v14 = v15;
    int v16 = *(char *)(v13 + 23);
    if (v16 >= 0) {
      uint64_t v17 = (const std::string::value_type *)v13;
    }
    else {
      uint64_t v17 = v14;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(v13 + 8);
    }
    uint64_t v19 = std::string::append(&v22, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    quasar::filesystem::create_directories((char *)__p);
    (*(void (**)(unsigned char *, void **))(*(void *)a1 + 40))(a1, __p);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_21:
  (*(void (**)(unsigned char *))(*(void *)a1 + 216))(a1);
  return i;
}

void sub_1B1ECC5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a2 == 2)
  {
    std::string::size_type v24 = (const std::runtime_error *)__cxa_begin_catch(exception_object);
    (*(void (**)(uint64_t))(*(void *)v21 + 216))(v21);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v26 = std::runtime_error::runtime_error(exception, v24);
    v26->__vftable = (std::runtime_error_vtbl *)&unk_1F0A50CA0;
  }
  if (a2 == 1)
  {
    uint64_t v27 = (const std::runtime_error *)__cxa_begin_catch(exception_object);
    (*(void (**)(uint64_t))(*(void *)v21 + 216))(v21);
    uint64_t v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v29 = std::runtime_error::runtime_error(v28, v27);
    v29->__vftable = (std::runtime_error_vtbl *)&unk_1F0A513A0;
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmFasterDecoder::decoderObjectSetup(quasar::OnlineLatticeBiglmFasterDecoder *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *((void *)this + 316) = *((void *)this + 315);
  *((void *)this + 321) = 0x4110000000000000;
  *((void *)this + 322) = 0;
  *((void *)this + 324) = *((void *)this + 323);
  *((void *)this + 326) = 0;
  unint64_t v6 = *(unsigned char **)(*(void *)a4 + 24);
  if (v6[48])
  {
    uint64_t v7 = (long long *)((char *)this + 1940);
    if (*((void *)this + 48) && v6[624] && !v6[738]) {
      uint64_t v7 = (long long *)*((void *)this + 48);
    }
    uint64_t v8 = (_OWORD *)((char *)this + 2696);
    long long v9 = v7[1];
    long long v45 = *v7;
    long long v46 = v9;
    if (v6[625]) {
      DWORD2(v46) = -1;
    }
    LOBYTE(v28) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 56))(*(void *)(a2 + 16));
    std::allocate_shared[abi:ne180100]<quasar::EagerDecision,std::allocator<quasar::EagerDecision>,quasar::EagerConfig &,BOOL,void>((const quasar::EagerConfig *)&v45, (BOOL *)&v28, v30);
    long long v10 = *(_OWORD *)v30;
    v30[0] = 0;
    v30[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 346);
    *(_OWORD *)((char *)this + 2760) = v10;
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      if (v30[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v30[1]);
      }
    }
    long long v31 = 0u;
    v32[0] = 0u;
    memset(v30, 0, sizeof(v30));
    *(void *)&v32[1] = 1;
    *((_DWORD *)this + 672) = 0;
    *((unsigned char *)this + 2692) = 0;
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)this + 2696));
    *uint64_t v8 = *(_OWORD *)&v30[1];
    *((void **)this + 339) = v30[3];
    memset(&v30[1], 0, 24);
    uint64_t v12 = (void *)*((void *)this + 340);
    if (v12)
    {
      *((void *)this + 341) = v12;
      operator delete(v12);
      *((void *)this + 340) = 0;
      *((void *)this + 341) = 0;
      *((void *)this + 342) = 0;
    }
    *((_OWORD *)this + 170) = v31;
    uint64_t v13 = *((void *)&v32[0] + 1);
    *((void *)this + 342) = *(void *)&v32[0];
    *(void *)&v32[0] = 0;
    long long v31 = 0uLL;
    *((void *)this + 343) = v13;
    *(_DWORD *)((char *)this + 2751) = *(_DWORD *)((char *)v32 + 15);
    std::string __p = &v30[1];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar23LatticeGenerationOutputENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v30);
    long long v14 = *(_OWORD *)v30;
    v30[0] = 0;
    v30[1] = 0;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 348);
    *(_OWORD *)((char *)this + 2776) = v14;
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      if (v30[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v30[1]);
      }
    }
    uint64_t v16 = a4;
  }
  else
  {
    uint64_t v16 = a4;
    quasar::OnlineLatticeBiglmFasterDecoder::clearEagerData(this);
  }
  if ((*(unsigned int (**)(void))(**(void **)(a2 + 16) + 72))(*(void *)(a2 + 16))) {
    quasar::MovingAverage::init((quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 1992), *((int *)this + 516));
  }
  *((_DWORD *)this + 518) = 0;
  *((unsigned char *)this + 2076) = 0;
  uint64_t v17 = *(void *)(*(void *)v16 + 24);
  float v18 = *((float *)this + 574);
  if (v18 <= 0.0)
  {
    uint64_t v19 = *(char **)(v17 + 272);
    long long v20 = *(char **)(v17 + 280);
  }
  else
  {
    uint64_t v19 = *(char **)(v17 + 272);
    long long v20 = *(char **)(v17 + 280);
    float v21 = 0.0;
    if (v19 != v20)
    {
      std::string v22 = *(char **)(v17 + 272);
      do
      {
        uint64_t v23 = *(void *)v22;
        v22 += 16;
        float v21 = v21 + *(float *)(v23 + 12);
      }
      while (v22 != v20);
    }
    if (v21 >= v18)
    {
      float v24 = v18 / v21;
      if (quasar::gLogLevel >= 5)
      {
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        memset(v32, 0, sizeof(v32));
        long long v31 = 0u;
        memset(v30, 0, sizeof(v30));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Extra LM weight exceeds max-total-extra-weight, rescaling with ", 63);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v30);
        uint64_t v19 = *(char **)(v17 + 272);
        long long v20 = *(char **)(v17 + 280);
      }
      if (v19 != v20)
      {
        uint64_t v25 = v19;
        do
        {
          uint64_t v26 = *(void *)v25;
          v25 += 16;
          *(float *)(v26 + 12) = v24 * *(float *)(v26 + 12);
        }
        while (v25 != v20);
      }
    }
  }
  if (((v20 - v19) >> 4) + ((uint64_t)(*((void *)this + 135) - *((void *)this + 134)) >> 2) == (uint64_t)(*(void *)(*((void *)this + 301) + 8) - **((void **)this + 301)) >> 4) {
    std::allocate_shared[abi:ne180100]<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,void>((uint64_t)&v45, *((void *)this + 129));
  }
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  memset(v32, 0, sizeof(v32));
  long long v31 = 0u;
  memset(v30, 0, sizeof(v30));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, "some FST/NN LMs failed to load");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v30);
}

void sub_1B1ECDB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  MEMORY[0x1B3EA8670](v36, 0x1032C40FE2AB2A7);
  JUMPOUT(0x1B1ECDCBCLL);
}

void sub_1B1ECDB7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
  }
  if (!v36)
  {
    if (a20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a20);
    }
    a25 = &a28;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
    JUMPOUT(0x1B1ECDCA8);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  JUMPOUT(0x1B1ECDC68);
}

void sub_1B1ECDBD0()
{
}

void sub_1B1ECDBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a35);
  long long v38 = *(void **)(v36 - 144);
  if (v38)
  {
    *(void *)(v36 - 136) = v38;
    operator delete(v38);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(a1);
}

void sub_1B1ECDBF0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v2 - 144);
  if (v4)
  {
    *(void *)(v2 - 136) = v4;
    operator delete(v4);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1ECDBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
}

void sub_1B1ECDC20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  std::string __p = &a34;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x1B1ECDCBCLL);
}

void sub_1B1ECDC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (!a36) {
    JUMPOUT(0x1B1ECDCD8);
  }
  JUMPOUT(0x1B1ECDCD4);
}

void sub_1B1ECDC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void ***a25,uint64_t a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,char a31)
{
  a25 = &a28;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a28 = (void **)&a31;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a28);
  JUMPOUT(0x1B1ECDCBCLL);
}

void sub_1B1ECDC64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  a28 = (void **)&a31;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a28);
  JUMPOUT(0x1B1ECDCA8);
}

void sub_1B1ECDC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t *a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  a28 = &a31;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a28);
  JUMPOUT(0x1B1ECDCBCLL);
}

double kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ResetDecoder(uint64_t a1)
{
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != -1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    do
    {
      unint64_t v5 = (uint64_t *)(v4 + 16 * v3);
      v5[1] = 0;
      uint64_t v3 = *v5;
    }
    while (v3 != -1);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = -1;
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    do
    {
      uint64_t v8 = v6;
      uint64_t v6 = *(void *)(v6 + 16);
      *(void *)(v8 + 16) = v7;
      uint64_t v7 = v8;
    }
    while (v6);
    *(void *)(a1 + 56) = v8;
  }
  kaldi::quasar::TokenHeap::Clear((kaldi::quasar::TokenHeap *)(a1 + 328));
  uint64_t v9 = *(void *)(a1 + 88);
  *(void *)(a1 + 384) = *(void *)(a1 + 376);
  *(void *)(a1 + 408) = *(void *)(a1 + 400);
  *(void *)(a1 + 96) = v9;
  *(unsigned char *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 291) = 0;
  std::__tree<int>::destroy(a1 + 304, *(void **)(a1 + 312));
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = a1 + 312;
  *(_DWORD *)(a1 + 288) = 0;
  int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160));
  unint64_t v11 = ((***(uint64_t (****)(void))(a1 + 168))() << 32) + v10;
  std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(a1 + 88, 1uLL);
  int v12 = kaldi::quasar::TokenHeap::NewToken((kaldi::quasar::TokenHeap *)(a1 + 328), 0.0, 0.0, 0, 0, 0);
  **(_DWORD **)(a1 + 88) = v12;
  unint64_t v13 = v11 % *(void *)(a1 + 24);
  long long v14 = (void *)(*(void *)(a1 + 32) + 16 * v13);
  uint64_t v15 = kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::New((uint64_t)v2);
  *(void *)uint64_t v15 = v11;
  *(_DWORD *)(v15 + 8) = v12;
  uint64_t v17 = v14 + 1;
  uint64_t v18 = v14[1];
  if (v18)
  {
    *(void *)(v15 + 16) = *(void *)(v18 + 16);
    *(void *)(v18 + 16) = v15;
    uint64_t *v17 = v15;
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 16);
    if (v19 != -1) {
      uint64_t v2 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 16 * v19 + 8) + 16);
    }
    *uint64_t v2 = v15;
    *(void *)(v15 + 16) = 0;
    uint64_t *v17 = v15;
    *long long v14 = v19;
    *(void *)(a1 + 16) = v13;
  }
  ++*(_DWORD *)(a1 + 288);
  *(_WORD *)(a1 + 424) = 0;
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(void *)(a1 + 384) = *(void *)(a1 + 376);
  *(void *)(a1 + 408) = *(void *)(a1 + 400);
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 848), v16);
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessNonemitting(a1, 0, *(float *)(a1 + 536));
  kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UpdateTime(a1, (clockid_t)1u);
  double result = 0.0;
  *(_OWORD *)(a1 + 804) = 0u;
  return result;
}

void quasar::OnlineLatticeBiglmFasterDecoder::resetPrevEpFeatures(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  if (!*((void *)this + 305))
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v4 = 0u;
    long long v5 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "This should only be called if endPointer exists");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  *((void *)this + 327) = 0;
  *((_DWORD *)this + 656) = 1091567616;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 329);
  uint64_t v2 = *((void *)this + 305);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v4 = 0;
  (*(void (**)(uint64_t, void **, char *))(*(void *)v2 + 48))(v2, __p, (char *)this + 2656);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *((_DWORD *)this + 670) = 0;
}

void sub_1B1ECE01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmFasterDecoder::addTimestampsToPartials(uint64_t a1, clockid_t a2)
{
  char v3 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v2, a2);
  uint64_t v4 = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
}

void sub_1B1ECE318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unint64_t **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 0;
  float v6 = INFINITY;
  do
  {
    unint64_t v7 = *v2;
    float v8 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 160) + 32))(*(void *)(a1 + 160), *v2);
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 328) + 32 * *((unsigned int *)v2 + 2);
      float v10 = v8 + *(float *)(v9 + 12);
      float v11 = v10
          + (*(float (**)(void, unint64_t))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168), HIDWORD(v7));
      if (v6 > v11)
      {
        float v6 = v11;
        uint64_t v5 = v9;
      }
    }
    uint64_t v2 = (unint64_t *)v2[2];
  }
  while (v2);
  BOOL v12 = 0;
  if (v5 && v6 != INFINITY)
  {
    std::string __p = 0;
    uint64_t v66 = 0;
    long long v67 = 0;
    uint64_t v62 = 0;
    unint64_t v63 = 0;
    uint64_t v64 = 0;
    do
    {
      uint64_t v13 = *(void *)v5;
      uint64_t v14 = *(void *)v5 >> 33;
      if (v14)
      {
        long long v15 = v66;
        if (v66 >= v67)
        {
          long long v17 = (char *)__p;
          uint64_t v18 = (v66 - (unsigned char *)__p) >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v67 - (unsigned char *)__p;
          if ((v67 - (unsigned char *)__p) >> 1 > v19) {
            unint64_t v19 = v20 >> 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            std::string v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67, v21);
            long long v17 = (char *)__p;
            long long v15 = v66;
          }
          else
          {
            std::string v22 = 0;
          }
          uint64_t v23 = &v22[4 * v18];
          *(_DWORD *)uint64_t v23 = v14;
          long long v16 = v23 + 4;
          while (v15 != v17)
          {
            int v24 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          std::string __p = v23;
          uint64_t v66 = v16;
          long long v67 = &v22[4 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v66 = v14;
          long long v16 = v15 + 4;
        }
        uint64_t v66 = v16;
        uint64_t v13 = *(void *)v5;
      }
      unsigned int v25 = *(_DWORD *)(v5 + 8);
      if (v13 >= 2)
      {
        unsigned int v26 = v13 >> 1;
        uint64_t v27 = v63;
        if (v63 >= v64)
        {
          uint64_t v29 = (unsigned int *)v62;
          uint64_t v30 = ((char *)v63 - (unsigned char *)v62) >> 2;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v32 = (char *)v64 - (unsigned char *)v62;
          if (((char *)v64 - (unsigned char *)v62) >> 1 > v31) {
            unint64_t v31 = v32 >> 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v64, v33);
            uint64_t v29 = (unsigned int *)v62;
            uint64_t v27 = v63;
          }
          else
          {
            long long v34 = 0;
          }
          long long v35 = (unsigned int *)&v34[4 * v30];
          *long long v35 = v26;
          uint64_t v28 = v35 + 1;
          while (v27 != v29)
          {
            unsigned int v36 = *--v27;
            *--long long v35 = v36;
          }
          uint64_t v62 = v35;
          unint64_t v63 = v28;
          uint64_t v64 = (unsigned int *)&v34[4 * v33];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *unint64_t v63 = v26;
          uint64_t v28 = v27 + 1;
        }
        unint64_t v63 = v28;
        unsigned int v25 = *(_DWORD *)(v5 + 8);
      }
      if (!(v25 >> 6)) {
        break;
      }
      uint64_t v37 = *(void *)(a1 + 328);
      uint64_t v5 = v37 + ((unint64_t)(v25 & 0xFFFFFFC0) >> 1);
    }
    while (v37);
    long long v38 = __p;
    long long v39 = v66;
    long long v40 = v66 - 4;
    if (__p != v66 && v40 > __p)
    {
      long long v42 = (char *)__p + 4;
      do
      {
        int v43 = *((_DWORD *)v42 - 1);
        *((_DWORD *)v42 - 1) = *(_DWORD *)v40;
        *(_DWORD *)long long v40 = v43;
        v40 -= 4;
        BOOL v44 = v42 >= v40;
        v42 += 4;
      }
      while (!v44);
    }
    long long v45 = v62;
    long long v46 = v63;
    long long v47 = (char *)(v63 - 1);
    if (v62 != v63 && v47 > v62)
    {
      long long v49 = (char *)v62 + 4;
      do
      {
        int v50 = *((_DWORD *)v49 - 1);
        *((_DWORD *)v49 - 1) = *(_DWORD *)v47;
        *(_DWORD *)long long v47 = v50;
        v47 -= 4;
        BOOL v44 = v49 >= v47;
        v49 += 4;
      }
      while (!v44);
    }
    unint64_t v51 = (char *)v46 - v45;
    unint64_t v52 = v39 - v38;
    BOOL v12 = v51 >= v52;
    if (v51 >= v52)
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
      uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v53);
      if (v63 == v62)
      {
        uint64_t v57 = v53;
      }
      else
      {
        unint64_t v54 = 0;
        unsigned int v55 = 1;
        do
        {
          uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
          uint64_t v57 = v56;
          if (v54 >= (v66 - (unsigned char *)__p) >> 2) {
            int v58 = 0;
          }
          else {
            int v58 = *((_DWORD *)__p + v54);
          }
          v61[1] = v58;
          v61[0] = *((_DWORD *)v62 + v54);
          v61[2] = 0;
          v61[3] = 0;
          v61[4] = v56;
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 208))(a2, v53, v61);
          unint64_t v54 = v55++;
          uint64_t v53 = v57;
        }
        while (v54 < ((char *)v63 - (unsigned char *)v62) >> 2);
      }
      uint64_t v60 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v57, &v60);
    }
    if (v62)
    {
      unint64_t v63 = (unsigned int *)v62;
      operator delete(v62);
    }
    if (__p)
    {
      uint64_t v66 = (char *)__p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_1B1ECE858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v71[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 2424);
  int v9 = *(_DWORD *)(v8 + 808);
  int v10 = *(_DWORD *)(v8 + 812);
  uint64_t v11 = *a3;
  uint64_t v13 = *(void *)(*a3 + 424);
  BOOL v12 = *(std::__shared_weak_count **)(*a3 + 432);
  long long v49 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v11 = *a3;
  }
  int v14 = v10 + v9;
  if (*(unsigned char *)(v11 + 1073)) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = *(unsigned char *)(v11 + 1072) != 0;
  }
  long long v16 = *(const void ***)(a1 + 2760);
  if (v16)
  {
    if (quasar::EagerDecision::matches(v16, **(_DWORD **)(a1 + 2776))
      && (uint64_t v17 = *(void *)(a1 + 2776), v50 = *(_DWORD *)(v17 + 4), v50 != 1)
      && (uint64_t v18 = *(void *)(v17 + 24)) != 0
      && *(unsigned char *)(v18 + 440))
    {
      uint64_t v19 = *a3;
      *(unsigned char *)(v18 + 580) = *(unsigned char *)(*a3 + 580);
      *(unsigned char *)(v18 + 581) = 1;
      *(_DWORD *)(v18 + 576) = v14;
      *(_WORD *)(v18 + 1072) = *(_WORD *)(v19 + 1072);
      quasar::DecoderPassData::operator=(a2, *(long long **)(v17 + 8));
      quasar::DecoderChainOutput::operator=(*a3, *(void *)(*(void *)(a1 + 2776) + 24));
      int v20 = 1;
    }
    else
    {
      int v20 = 0;
      unsigned int v50 = 2;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "eagerDecisionLog");
    quasar::EagerDecision::getLog((uint64_t *)&v68, *(quasar::EagerDecision **)(a1 + 2760));
    unint64_t v21 = std::string::insert(&v68, 0, "\"");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    uint64_t v23 = std::string::append(&v69, "\"");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDump(v13, (long long *)__p, &v70);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v52) < 0) {
      operator delete(__p[0]);
    }
    if (v20) {
      unsigned int v25 = "MATCH";
    }
    else {
      unsigned int v25 = "NOMATCH";
    }
    if (v20) {
      uint64_t v26 = 5;
    }
    else {
      uint64_t v26 = 7;
    }
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(*(void *)(a1 + 2776) + 40), (uint64_t)v25, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
    std::ostream::operator<<();
    std::string::basic_string[abi:ne180100]<0>(__p, "eagerOutputLog");
    std::stringbuf::str();
    uint64_t v28 = std::string::insert(&v68, 0, "\"");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    uint64_t v30 = std::string::append(&v69, "\"");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDump(v13, (long long *)__p, &v70);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v52) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    int v20 = 0;
    unsigned int v50 = 2;
  }
  if (((v15 | v20) & 1) == 0)
  {
    quasar::SpeechRequestData::getRecogRequestTimer(*a4, __p);
    *(double *)(*a3 + 456) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v36);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(*(void *)(a1 + 2424), *(_DWORD *)(*(void *)(a1 + 2424) + 808), 0);
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  if (*(unsigned char *)(a1 + 2800)) {
    char v32 = v15;
  }
  else {
    char v32 = 1;
  }
  if ((v32 & 1) == 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v52 = 0;
    unint64_t v33 = *(std::__shared_weak_count ***)(a2 + 568);
    long long v34 = *(std::__shared_weak_count ***)(a2 + 576);
    if (v33 != v34)
    {
      do
      {
        *(_OWORD *)&v70.__r_.__value_.__l.__data_ = 0uLL;
        long long v35 = v33[1];
        if (v35)
        {
          v70.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v35);
          if (v70.__r_.__value_.__l.__size_)
          {
            long long v35 = *v33;
            v70.__r_.__value_.__r.__words[0] = (std::string::size_type)*v33;
          }
          else
          {
            long long v35 = (std::__shared_weak_count *)v70.__r_.__value_.__r.__words[0];
          }
        }
        if (((unsigned int (*)(std::__shared_weak_count *))v35->__vftable[2].__get_deleter)(v35)) {
          std::vector<std::shared_ptr<quasar::Decoder>>::push_back[abi:ne180100]((uint64_t *)__p, (long long *)&v70);
        }
        if (v70.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v70.__r_.__value_.__l.__size_);
        }
        v33 += 2;
      }
      while (v33 != v34);
      if (__p[0] != __p[1])
      {
        *(unsigned char *)(a2 + 561) = 0;
        v71[0] = &unk_1F0A5BD00;
        v71[3] = v71;
        unsigned int v50 = quasar::Decoder::runChain((uint64_t **)__p, (uint64_t)v71, a2, (uint64_t)a3, a4);
        std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v71);
        *(unsigned char *)(a2 + 561) = 1;
      }
    }
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  }
  if (v15)
  {
    if (*(unsigned char *)(*a3 + 1073)) {
      quasar::OnlineLatticeBiglmFasterDecoder::addTimestampsToPartials(a1, (clockid_t)a2);
    }
    unsigned int v50 = 0;
  }
  double v37 = 0.0;
  if (v14 >= 2) {
    double v37 = (double)*(int *)(a1 + 2512) / (double)(v14 - 1);
  }
  *(double *)&v68.__r_.__value_.__l.__data_ = v37;
  if (quasar::gLogLevel <= 3)
  {
    *(_DWORD *)(*a3 + 576) = v14;
  }
  else
  {
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Average number of active tokens: ", 33);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    int v38 = quasar::gLogLevel;
    uint64_t v39 = *a3;
    *(_DWORD *)(v39 + 576) = v14;
    if (*(unsigned char *)(v39 + 580) && v38 >= 4)
    {
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Last frame processed ", 21);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
  }
  MultiBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer((quasar::SpeechRequestData *)*a4);
  quasar::MultiAudioBuffer::getBuffer(*MultiBuffer, 0, __p);
  if (!quasar::RecogAudioBuffer::serverSideEndPointingEnabled((quasar::RecogAudioBuffer *)__p[0]))
  {
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    goto LABEL_75;
  }
  char EndPointerExtraDelay = quasar::SpeechRequestData::getEndPointerExtraDelay((quasar::SpeechRequestData *)*a4);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (EndPointerExtraDelay)
  {
LABEL_75:
    std::string::basic_string[abi:ne180100]<0>(&v70, "EstimatedEpTruncation");
    std::string::basic_string[abi:ne180100]<0>(&v69, "EstimatedEndPointerTrailingSilence");
    if (*(double *)(a1 + 2504) == 0.0)
    {
      *(_DWORD *)(v13 + 124) = 2;
      __p[0] = (void *)0x4000000000000000;
      quasar::SpeechRequestResultData::addAA(v13, (long long *)&v70, (double *)__p, 0);
      __p[0] = (void *)0x41DFFFFFFFC00000;
      quasar::SpeechRequestResultData::addAA(v13, (long long *)&v69, (double *)__p, 0);
    }
    else
    {
      int v42 = (*(uint64_t (**)(void))(**(void **)(*(void *)a2 + 16) + 24))(*(void *)(*(void *)a2 + 16));
      int v43 = *(_DWORD *)(*a3 + 624);
      if (quasar::gLogLevel >= 4)
      {
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Server side end pointer first triggered frame ", 46);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      int v44 = quasar::SpeechRequestData::getEndPointerExtraDelay((quasar::SpeechRequestData *)*a4);
      int v45 = v43 / v42;
      if (!v44 || (int v46 = *(_DWORD *)(a1 + 452), v46 < 0)) {
        int v46 = *(_DWORD *)(a1 + 448);
      }
      int v47 = v46 - v45;
      if (v46 - v45 < 0)
      {
        *(_DWORD *)(v13 + 124) = 0;
        __p[0] = 0;
      }
      else
      {
        *(_DWORD *)(v13 + 124) = 1;
        __p[0] = (void *)0x3FF0000000000000;
      }
      quasar::SpeechRequestResultData::addAA(v13, (long long *)&v70, (double *)__p, 0);
      *(double *)std::string __p = (double)v47;
      quasar::SpeechRequestResultData::addAA(v13, (long long *)&v69, (double *)__p, 0);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
  }
  *(double *)(v13 + 32) = *(double *)(v13 + 32) + *(double *)(*(void *)(a1 + 2424) + 888) * 1000.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ProcessEmittingWallMs");
  quasar::SpeechRequestResultData::addAA(v13, (long long *)__p, (double *)(v13 + 32), 1);
  if (SBYTE7(v52) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(v13 + 40) = *(double *)(v13 + 40) + *(double *)(*(void *)(a1 + 2424) + 896) * 1000.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ProcessEmittingCpuMs");
  quasar::SpeechRequestResultData::addAA(v13, (long long *)__p, (double *)(v13 + 40), 1);
  if (SBYTE7(v52) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(v13 + 48) = *(double *)(v13 + 48) + *(double *)(*(void *)(a1 + 2424) + 904) * 1000.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ProcessNonemittingWallMs");
  quasar::SpeechRequestResultData::addAA(v13, (long long *)__p, (double *)(v13 + 48), 1);
  if (SBYTE7(v52) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(v13 + 56) = *(double *)(v13 + 56) + *(double *)(*(void *)(a1 + 2424) + 912) * 1000.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ProcessNonemittingCpuMs");
  quasar::SpeechRequestResultData::addAA(v13, (long long *)__p, (double *)(v13 + 56), 1);
  if (SBYTE7(v52) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(v13 + 64) = *(double *)(v13 + 64) + *(double *)(*(void *)(a1 + 2424) + 920) * 1000.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "PruneActiveTokensWallMs");
  quasar::SpeechRequestResultData::addAA(v13, (long long *)__p, (double *)(v13 + 64), 1);
  if (SBYTE7(v52) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(v13 + 72) = *(double *)(v13 + 72) + *(double *)(*(void *)(a1 + 2424) + 928) * 1000.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "PruneActiveTokensCpuMs");
  quasar::SpeechRequestResultData::addAA(v13, (long long *)__p, (double *)(v13 + 72), 1);
  if (SBYTE7(v52) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AverageActiveTokensPerFrame");
  quasar::SpeechRequestResultData::addAA(v13, (long long *)__p, (double *)&v68, 0);
  if (SBYTE7(v52) < 0) {
    operator delete(__p[0]);
  }
  if (!v50) {
    quasar::OnlineLatticeBiglmFasterDecoder::resetAccessedStates((quasar::OnlineLatticeBiglmFasterDecoder *)a1);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  return v50;
}

void sub_1B1ECF3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13)
{
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v13 - 144));
  *(void *)(v13 - 176) = &a13;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 176));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::DecoderPassData::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = a2[1];
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = a2[2];
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  int v9 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  long long v10 = a2[3];
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  long long v12 = a2[4];
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  long long v14 = a2[5];
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  BOOL v15 = *(std::__shared_weak_count **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = v14;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  uint64_t v16 = *((void *)a2 + 13);
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
  *(void *)(a1 + 104) = v16;
  std::vector<BOOL>::operator=((void **)(a1 + 120), (uint64_t)a2 + 120);
  if ((long long *)a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 144), *((char **)a2 + 18), *((void *)a2 + 19), (uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 2);
  }
  long long v17 = *(long long *)((char *)a2 + 168);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v17;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  long long v19 = *(long long *)((char *)a2 + 184);
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 24) = 0;
  int v20 = *(std::__shared_weak_count **)(a1 + 192);
  *(_OWORD *)(a1 + 184) = v19;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  unint64_t v21 = (long long *)((char *)a2 + 392);
  uint64_t v22 = *((void *)a2 + 25);
  *(unsigned char *)(a1 + 208) = *((unsigned char *)a2 + 208);
  *(void *)(a1 + 200) = v22;
  long long v23 = *(long long *)((char *)a2 + 216);
  *((void *)a2 + 27) = 0;
  *((void *)a2 + 28) = 0;
  long long v24 = *(std::__shared_weak_count **)(a1 + 224);
  *(_OWORD *)(a1 + 216) = v23;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)(a1 + 248));
  *(_OWORD *)(a1 + 248) = *(long long *)((char *)a2 + 248);
  *(void *)(a1 + 264) = *((void *)a2 + 33);
  *((void *)a2 + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = 0;
  *((void *)a2 + 32) = 0;
  *((void *)a2 + 33) = 0;
  std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)(a1 + 272));
  *(_OWORD *)(a1 + 272) = a2[17];
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *((void *)a2 + 34) = 0;
  *((void *)a2 + 35) = 0;
  *((void *)a2 + 36) = 0;
  std::vector<int>::__move_assign(a1 + 296, (__n128 *)((char *)a2 + 296));
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__vdeallocate((uint64_t *)(a1 + 320));
  *(_OWORD *)(a1 + 320) = a2[20];
  *(void *)(a1 + 336) = *((void *)a2 + 42);
  *((void *)a2 + 40) = 0;
  *((void *)a2 + 41) = 0;
  *((void *)a2 + 42) = 0;
  std::vector<int>::__move_assign(a1 + 344, (__n128 *)((char *)a2 + 344));
  std::__tree<int>::__move_assign(a1 + 368, (void *)a2 + 46);
  long long v25 = *v21;
  *(void *)unint64_t v21 = 0;
  *((void *)a2 + 50) = 0;
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 400);
  *(_OWORD *)(a1 + 392) = v25;
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign(a1 + 408, (uint64_t *)a2 + 51);
  *(_DWORD *)(a1 + 448) = *((_DWORD *)a2 + 112);
  long long v27 = *(long long *)((char *)a2 + 456);
  *((void *)a2 + 57) = 0;
  *((void *)a2 + 58) = 0;
  uint64_t v28 = *(std::__shared_weak_count **)(a1 + 464);
  *(_OWORD *)(a1 + 456) = v27;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)(a1 + 472));
  uint64_t v29 = *((void *)a2 + 60);
  *(void *)(a1 + 472) = *((void *)a2 + 59);
  *(void *)(a1 + 480) = v29;
  *(void *)(a1 + 488) = *((void *)a2 + 61);
  *((void *)a2 + 59) = 0;
  *((void *)a2 + 60) = 0;
  *((void *)a2 + 61) = 0;
  std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)(a1 + 496));
  *(_OWORD *)(a1 + 496) = a2[31];
  *(void *)(a1 + 512) = *((void *)a2 + 64);
  *((void *)a2 + 62) = 0;
  *((void *)a2 + 63) = 0;
  *((void *)a2 + 64) = 0;
  long long v30 = *(long long *)((char *)a2 + 520);
  *((void *)a2 + 65) = 0;
  *((void *)a2 + 66) = 0;
  long long v31 = *(std::__shared_weak_count **)(a1 + 528);
  *(_OWORD *)(a1 + 520) = v30;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  long long v32 = *(long long *)((char *)a2 + 536);
  *((void *)a2 + 67) = 0;
  *((void *)a2 + 68) = 0;
  unint64_t v33 = *(std::__shared_weak_count **)(a1 + 544);
  *(_OWORD *)(a1 + 536) = v32;
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *((void *)a2 + 69);
  *(_DWORD *)(a1 + 559) = *(_DWORD *)((char *)a2 + 559);
  *(void *)(a1 + 552) = v34;
  std::vector<std::weak_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)(a1 + 568));
  *(void *)(a1 + 568) = *((void *)a2 + 71);
  *(void *)(a1 + 576) = *((void *)a2 + 72);
  *(void *)(a1 + 584) = *((void *)a2 + 73);
  *((void *)a2 + 73) = 0;
  *(long long *)((char *)a2 + 568) = 0u;
  long long v35 = a2[37];
  a2[37] = 0u;
  clockid_t v36 = *(std::__shared_weak_count **)(a1 + 600);
  *(_OWORD *)(a1 + 592) = v35;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  double v37 = (void **)(a1 + 608);
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*v37);
  }
  long long v38 = a2[38];
  *(void *)(a1 + 624) = *((void *)a2 + 78);
  *(_OWORD *)double v37 = v38;
  *((unsigned char *)a2 + 6std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = 0;
  *((unsigned char *)a2 + 608) = 0;
  uint64_t v39 = (void **)(a1 + 632);
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*v39);
  }
  long long v40 = *(long long *)((char *)a2 + 632);
  *(void *)(a1 + 648) = *((void *)a2 + 81);
  *(_OWORD *)uint64_t v39 = v40;
  *((unsigned char *)a2 + 655) = 0;
  *((unsigned char *)a2 + 632) = 0;
  uint64_t v41 = *((void *)a2 + 82);
  *(_WORD *)(a1 + 664) = *((_WORD *)a2 + 332);
  *(void *)(a1 + 656) = v41;
  long long v42 = a2[42];
  a2[42] = 0u;
  int v43 = *(std::__shared_weak_count **)(a1 + 680);
  *(_OWORD *)(a1 + 672) = v42;
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  *(void *)(a1 + 688) = *((void *)a2 + 86);
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign(a1 + 696, (uint64_t *)a2 + 87);
  *(unsigned char *)(a1 + 736) = *((unsigned char *)a2 + 736);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 744));
  *(void *)(a1 + 744) = *((void *)a2 + 93);
  *(void *)(a1 + 752) = *((void *)a2 + 94);
  *(void *)(a1 + 760) = *((void *)a2 + 95);
  *((void *)a2 + 95) = 0;
  *(long long *)((char *)a2 + 744) = 0u;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 768));
  *(_OWORD *)(a1 + 768) = a2[48];
  *(void *)(a1 + 784) = *((void *)a2 + 98);
  *((void *)a2 + 98) = 0;
  a2[48] = 0u;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 792));
  *(void *)(a1 + 792) = *((void *)a2 + 99);
  *(void *)(a1 + 800) = *((void *)a2 + 100);
  *(void *)(a1 + 808) = *((void *)a2 + 101);
  *((void *)a2 + 101) = 0;
  *(long long *)((char *)a2 + 792) = 0u;
  *(_WORD *)(a1 + 816) = *((_WORD *)a2 + 408);
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(a1 + 824));
  *(void *)(a1 + 824) = *((void *)a2 + 103);
  *(void *)(a1 + 832) = *((void *)a2 + 104);
  *(void *)(a1 + 840) = *((void *)a2 + 105);
  *((void *)a2 + 105) = 0;
  *(long long *)((char *)a2 + 824) = 0u;
  int v44 = *((_DWORD *)a2 + 212);
  *(unsigned char *)(a1 + 852) = *((unsigned char *)a2 + 852);
  *(_DWORD *)(a1 + 848) = v44;
  return a1;
}

uint64_t quasar::DecoderChainOutput::operator=(uint64_t a1, uint64_t a2)
{
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 48));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  std::vector<int>::__move_assign(a1 + 72, (__n128 *)(a2 + 72));
  std::vector<quasar::Token>::__vdeallocate((void **)(a1 + 96));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__move_assign(a1 + 120, (void *)(a2 + 120));
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  long long v4 = *(_OWORD *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = *(_OWORD *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::__optional_storage_base<std::shared_ptr<kaldi::WordHypLattice>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::shared_ptr<kaldi::WordHypLattice>,false>>((__n128 *)(a1 + 184), (__n128 *)(a2 + 184));
  long long v8 = *(_OWORD *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  int v9 = *(std::__shared_weak_count **)(a1 + 216);
  *(_OWORD *)(a1 + 208) = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  long long v10 = *(_OWORD *)(a2 + 224);
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 232);
  *(_OWORD *)(a1 + 224) = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  long long v12 = *(_OWORD *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 248);
  *(_OWORD *)(a1 + 240) = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  long long v14 = *(_OWORD *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  BOOL v15 = *(std::__shared_weak_count **)(a1 + 264);
  *(_OWORD *)(a1 + 256) = v14;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  long long v16 = *(_OWORD *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  long long v17 = *(std::__shared_weak_count **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = v16;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  long long v18 = *(_OWORD *)(a2 + 288);
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  long long v19 = *(std::__shared_weak_count **)(a1 + 296);
  *(_OWORD *)(a1 + 288) = v18;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  long long v20 = *(_OWORD *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 312) = 0;
  unint64_t v21 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v20;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  long long v22 = *(_OWORD *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  *(void *)(a2 + 328) = 0;
  long long v23 = *(std::__shared_weak_count **)(a1 + 328);
  *(_OWORD *)(a1 + 320) = v22;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  long long v24 = *(_OWORD *)(a2 + 336);
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 344) = 0;
  long long v25 = *(std::__shared_weak_count **)(a1 + 344);
  *(_OWORD *)(a1 + 336) = v24;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v26 = (long long *)(a2 + 392);
  long long v27 = *(_OWORD *)(a2 + 352);
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  uint64_t v28 = *(std::__shared_weak_count **)(a1 + 360);
  *(_OWORD *)(a1 + 352) = v27;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::vector<std::set<std::string>>::__vdeallocate((void **)(a1 + 368));
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  long long v29 = *v26;
  *(void *)uint64_t v26 = 0;
  *(void *)(a2 + 400) = 0;
  long long v30 = *(std::__shared_weak_count **)(a1 + 400);
  *(_OWORD *)(a1 + 392) = v29;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  long long v31 = *(_OWORD *)(a2 + 408);
  *(void *)(a2 + 408) = 0;
  *(void *)(a2 + 416) = 0;
  long long v32 = *(std::__shared_weak_count **)(a1 + 416);
  *(_OWORD *)(a1 + 408) = v31;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  long long v33 = *(_OWORD *)(a2 + 424);
  *(void *)(a2 + 424) = 0;
  *(void *)(a2 + 432) = 0;
  uint64_t v34 = *(std::__shared_weak_count **)(a1 + 432);
  *(_OWORD *)(a1 + 424) = v33;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  long long v35 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v35;
  long long v36 = *(_OWORD *)(a2 + 472);
  *(void *)(a2 + 472) = 0;
  *(void *)(a2 + 480) = 0;
  double v37 = *(std::__shared_weak_count **)(a1 + 480);
  *(_OWORD *)(a1 + 472) = v36;
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  long long v38 = *(_OWORD *)(a2 + 488);
  *(void *)(a2 + 488) = 0;
  *(void *)(a2 + 496) = 0;
  uint64_t v39 = *(std::__shared_weak_count **)(a1 + 496);
  *(_OWORD *)(a1 + 488) = v38;
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  long long v40 = *(_OWORD *)(a2 + 504);
  long long v41 = *(_OWORD *)(a2 + 520);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(_OWORD *)(a1 + 504) = v40;
  *(_OWORD *)(a1 + 520) = v41;
  long long v42 = *(_OWORD *)(a2 + 544);
  long long v43 = 0uLL;
  *(_OWORD *)(a2 + 544) = 0u;
  int v44 = *(std::__shared_weak_count **)(a1 + 552);
  *(_OWORD *)(a1 + 544) = v42;
  if (v44)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    long long v43 = 0uLL;
  }
  long long v45 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a2 + 560) = v43;
  int v46 = *(std::__shared_weak_count **)(a1 + 568);
  *(_OWORD *)(a1 + 560) = v45;
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  int v47 = *(_DWORD *)(a2 + 576);
  *(_WORD *)(a1 + 580) = *(_WORD *)(a2 + 580);
  *(_DWORD *)(a1 + 576) = v47;
  std::vector<quasar::LmeInfo>::__vdeallocate((uint64_t *)(a1 + 584));
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a2 + 600) = 0;
  long long v48 = 0uLL;
  *(_OWORD *)(a2 + 584) = 0u;
  long long v49 = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a2 + 608) = 0u;
  unsigned int v50 = *(std::__shared_weak_count **)(a1 + 616);
  *(_OWORD *)(a1 + 608) = v49;
  if (v50)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    long long v48 = 0uLL;
  }
  uint64_t v51 = *(void *)(a2 + 624);
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
  *(void *)(a1 + 624) = v51;
  long long v52 = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a2 + 640) = v48;
  long long v53 = *(std::__shared_weak_count **)(a1 + 648);
  *(_OWORD *)(a1 + 640) = v52;
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  std::vector<quasar::ItnOverride>::__vdeallocate((void **)(a1 + 656));
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  *(void *)(a2 + 672) = 0;
  *(_OWORD *)(a2 + 656) = 0u;
  *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
  std::vector<int>::__move_assign(a1 + 696, (__n128 *)(a2 + 696));
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  std::vector<int>::__move_assign(a1 + 728, (__n128 *)(a2 + 728));
  *(void *)(a1 + 752) = *(void *)(a2 + 752);
  std::vector<int>::__move_assign(a1 + 760, (__n128 *)(a2 + 760));
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  std::vector<int>::__move_assign(a1 + 792, (__n128 *)(a2 + 792));
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
  std::vector<std::vector<kaldi::quasar::WordConf>>::__vdeallocate((void ***)(a1 + 840));
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(void *)(a2 + 856) = 0;
  *(_OWORD *)(a2 + 840) = 0u;
  *(unsigned char *)(a1 + 864) = *(unsigned char *)(a2 + 864);
  *(unsigned char *)(a1 + 872) = *(unsigned char *)(a2 + 872);
  long long v54 = (void **)(a1 + 880);
  if (*(char *)(a1 + 903) < 0) {
    operator delete(*v54);
  }
  long long v55 = *(_OWORD *)(a2 + 880);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(_OWORD *)long long v54 = v55;
  *(unsigned char *)(a2 + 903) = 0;
  *(unsigned char *)(a2 + 880) = 0;
  uint64_t v56 = *(void *)(a2 + 920);
  *(_OWORD *)(a1 + 904) = *(_OWORD *)(a2 + 904);
  *(void *)(a1 + 920) = v56;
  *(unsigned char *)(a1 + 928) = *(unsigned char *)(a2 + 928);
  long long v57 = (void **)(a1 + 936);
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*v57);
  }
  long long v58 = *(_OWORD *)(a2 + 936);
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  *(_OWORD *)long long v57 = v58;
  *(unsigned char *)(a2 + 959) = 0;
  *(unsigned char *)(a2 + 936) = 0;
  long long v59 = *(_OWORD *)(a2 + 960);
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  *(_OWORD *)(a1 + 960) = v59;
  std::vector<int>::__move_assign(a1 + 984, (__n128 *)(a2 + 984));
  std::vector<int>::__move_assign(a1 + 1008, (__n128 *)(a2 + 1008));
  long long v60 = (void **)(a1 + 1032);
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*v60);
  }
  long long v61 = *(_OWORD *)(a2 + 1032);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(_OWORD *)long long v60 = v61;
  *(unsigned char *)(a2 + 1055) = 0;
  *(unsigned char *)(a2 + 1032) = 0;
  long long v62 = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a2 + 1056) = 0u;
  long long v63 = *(std::__shared_weak_count **)(a1 + 1064);
  *(_OWORD *)(a1 + 1056) = v62;
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  long long v64 = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1081) = *(_OWORD *)(a2 + 1081);
  *(_OWORD *)(a1 + 1072) = v64;
  *(_DWORD *)(a1 + 1100) = *(_DWORD *)(a2 + 1100);
  *(_DWORD *)(a1 + 1104) = *(_DWORD *)(a2 + 1104);
  std::vector<quasar::Token>::__vdeallocate((void **)(a1 + 1112));
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  *(void *)(a2 + 1128) = 0;
  *(_OWORD *)(a2 + 1112) = 0u;
  *(unsigned char *)(a1 + 1136) = *(unsigned char *)(a2 + 1136);
  long long v65 = (void **)(a1 + 1144);
  if (*(char *)(a1 + 1167) < 0) {
    operator delete(*v65);
  }
  long long v66 = *(_OWORD *)(a2 + 1144);
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  *(_OWORD *)long long v65 = v66;
  *(unsigned char *)(a2 + 1167) = 0;
  *(unsigned char *)(a2 + 1144) = 0;
  return a1;
}

BOOL kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetRawLattice(uint64_t a1, uint64_t a2, kaldi::LatticeScoreCache *a3, kaldi::TransitionModel *a4)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  int v8 = *(_DWORD *)(a1 + 288);
  memset(v50, 0, sizeof(v50));
  int v51 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>((uint64_t)v50, v8 / 2 + 3);
  uint64_t v9 = 0;
  uint64_t v40 = ((unint64_t)(v6 - v7) >> 3) - 1;
  uint64_t v38 = ((unint64_t)(v6 - v7) >> 3);
  while (1)
  {
    long long v10 = (_DWORD *)(*(void *)(a1 + 88) + 8 * v9);
    if (!*v10) {
      break;
    }
    unsigned int v49 = 0;
    for (uint64_t i = *v10; ; LODWORD(i) = *(_DWORD *)(v12 + 32 * i + 24))
    {
      unsigned int v49 = i;
      if (!i) {
        break;
      }
      uint64_t v12 = *(void *)(a1 + 328);
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      v47[0] = &v49;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v50, &v49, (uint64_t)&std::piecewise_construct, v47)+ 5) = v13;
    }
    if (!v9 && (*(int (**)(uint64_t))(*(void *)a2 + 160))(a2) >= 1)
    {
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
      (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, (v14 - 1));
    }
    if (++v9 == v38)
    {
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v47, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"init:", 5);
        BOOL v15 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" buckets:", 9);
        long long v16 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" load:", 6);
        long long v19 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" max:", 5);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v47);
      }
      uint64_t v20 = 0;
      int v39 = 0;
      int v21 = 0;
      unsigned int v43 = 0;
      long long v41 = (uint64_t *)(a1 + 312);
      do
      {
        for (unint64_t j = *(unsigned int *)(*(void *)(a1 + 88) + 8 * v20); j; unint64_t j = *(unsigned int *)(v42 + 32 * j + 24))
        {
          uint64_t v42 = *(void *)(a1 + 328);
          for (uint64_t k = *(unsigned int *)(v42 + 32 * j + 20); k; ++v21)
          {
            uint64_t v24 = *(void *)(a1 + 344);
            uint64_t v25 = v24 + 24 * k;
            LODWORD(v47[0]) = *(_DWORD *)(v25 + 4);
            int v26 = *((_DWORD *)std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v50, (unsigned int *)v47)+ 5);
            int v27 = *(_DWORD *)(v25 + 8);
            LODWORD(v47[0]) = *(_DWORD *)v25 >> 1;
            HIDWORD(v47[0]) = v27;
            v47[1] = *(_DWORD **)(v25 + 12);
            int v48 = v26;
            if (v27 == *(_DWORD *)(a1 + 252)) {
              HIDWORD(v47[0]) = 0;
            }
            (*(void (**)(uint64_t, void, _DWORD **))(*(void *)a2 + 208))(a2, v43, v47);
            if (a4 && a3 && *(_DWORD *)v25 >= 2u)
            {
              int v28 = kaldi::TransitionModel::TransitionIdToTransitionState(a4, *(_DWORD *)v25 >> 1);
              int v29 = kaldi::TransitionModel::TransitionStateToForwardPdf(a4, v28);
              kaldi::LatticeScoreCache::CacheScore(a3, v20, v29, *(float *)(v25 + 16));
            }
            uint64_t k = *(unsigned int *)(v24 + 24 * k + 20);
          }
          if (v20 == v40)
          {
            uint64_t v30 = *v41;
            if (*v41)
            {
              uint64_t v31 = a1 + 312;
              do
              {
                unint64_t v32 = *(unsigned int *)(v30 + 28);
                BOOL v33 = v32 >= j;
                if (v32 >= j) {
                  uint64_t v34 = (uint64_t *)v30;
                }
                else {
                  uint64_t v34 = (uint64_t *)(v30 + 8);
                }
                if (v33) {
                  uint64_t v31 = v30;
                }
                uint64_t v30 = *v34;
              }
              while (*v34);
              if ((uint64_t *)v31 != v41 && j >= *(unsigned int *)(v31 + 28))
              {
                v46[0] = *(_DWORD *)(v31 + 32);
                v46[1] = 0;
                (*(void (**)(uint64_t, void, _DWORD *))(*(void *)a2 + 184))(a2, v43, v46);
              }
            }
            ++v39;
          }
          ++v43;
        }
        ++v20;
      }
      while (v20 != v38);
      (*(void (**)(uint64_t))(*(void *)a2 + 160))(a2);
      if (kaldi::g_kaldi_verbose_level > 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v47, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"GetRawLattice: NumStates ", 25);
        (*(void (**)(uint64_t))(*(void *)a2 + 160))(a2);
        long long v35 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" NumArcs ", 9);
        long long v36 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" NumFinal ", 10);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v47);
      }
      BOOL v18 = v43 != 0;
      goto LABEL_44;
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"GetRawLattice: no tokens active on frame ", 41);
    long long v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": not producing lattice.", 24);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v47);
  }
  BOOL v18 = 0;
LABEL_44:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v50);
  return v18;
}

void sub_1B1ED0568(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1 - 144);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<quasar::Decoder>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    BOOL v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)BOOL v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18[2] = v15 + 16;
    std::vector<std::shared_ptr<quasar::Decoder>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1ED06D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::constructWords(unsigned int **a1, int a2, uint64_t a3)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  memset(&v16, 0, sizeof(v16));
  char v3 = *a1;
  long long v4 = a1[1];
  if (*a1 != v4)
  {
    BOOL v7 = 0;
    unsigned int v8 = 0x80000000;
    do
    {
      BOOL v9 = *v3 == a2;
      if (*v3 != a2)
      {
        BOOL v10 = v7 || *v3 == v8;
        unsigned int v8 = *v3;
        if (!v10)
        {
          (*(void (**)(void **__return_ptr))(**(void **)a3 + 88))(__p);
          if ((v15 & 0x80u) == 0) {
            unint64_t v11 = __p;
          }
          else {
            unint64_t v11 = (void **)__p[0];
          }
          if ((v15 & 0x80u) == 0) {
            std::string::size_type v12 = v15;
          }
          else {
            std::string::size_type v12 = (std::string::size_type)__p[1];
          }
          std::string::append(&v16, (const std::string::value_type *)v11, v12);
          if ((char)v15 < 0) {
            operator delete(__p[0]);
          }
          unsigned int v8 = *v3;
        }
      }
      ++v3;
      BOOL v7 = v9;
    }
    while (v3 != v4);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "▁");
  quasar::splitUnicodeCharSet((uint64_t)&v16, v13);
}

void sub_1B1ED086C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  a22 = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::endUtteranceForPauseResume(uint64_t a1, void *a2, int a3, int a4)
{
  unsigned int v8 = (std::mutex *)(a1 + 2808);
  std::mutex::lock((std::mutex *)(a1 + 2808));
  int v9 = *(unsigned __int8 *)(a1 + 2802);
  if (!*(unsigned char *)(a1 + 2801))
  {
    if ((a3 & a4 & 1) == 0 && !*(unsigned char *)(a1 + 2802))
    {
      uint64_t v12 = 0;
      goto LABEL_18;
    }
    BOOL v10 = (unsigned char *)*a2;
    v10[580] = a4;
    v10[581] = 1;
    if (!v9 || (a3 & 1) == 0)
    {
      *(_WORD *)(a1 + 2801) = 0;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  BOOL v10 = (unsigned char *)*a2;
  v10[580] = a4;
  v10[581] = 1;
  if (v9) {
    BOOL v11 = a3 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
LABEL_13:
    v10[1072] = 1;
    *(unsigned char *)(a1 + 2802) = 0;
    goto LABEL_15;
  }
  v10[1073] = 1;
  *(unsigned char *)(a1 + 2801) = 0;
LABEL_15:
  uint64_t v12 = 1;
  if (a3 && a4) {
    v10[1073] = 1;
  }
LABEL_18:
  std::mutex::unlock(v8);
  return v12;
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::decodeNextFrames(uint64_t a1, unsigned __int8 *a2, std::vector<std::wstring> **a3, quasar::SpeechRequestData **a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 48))(v6))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v167 = 0u;
      long long v168 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      long long v163 = 0u;
      long long v164 = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      long long v159 = 0u;
      long long v160 = 0u;
      long long v157 = 0u;
      long long v158 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Recognition cancelled", 21);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    return 1;
  }
  uint64_t v11 = *(void *)(a1 + 2424);
  MultiBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a4);
  quasar::MultiAudioBuffer::getBuffer(*MultiBuffer, 0, __p);
  if (quasar::RecogAudioBuffer::hasServerEndpointed((quasar::RecogAudioBuffer *)__p[0])) {
    BOOL v13 = *(_DWORD *)(a1 + 2072) < 1;
  }
  else {
    BOOL v13 = 0;
  }
  unint64_t v14 = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeMe(v11, 0, 0, v13, a2[736]);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (*(unsigned char *)(a1 + 2076))
  {
    *(unsigned char *)(a1 + 2076) = 0;
    int v15 = *(_DWORD *)(a1 + 2068);
    *(_DWORD *)(a1 + 2072) = v15;
  }
  else
  {
    int v15 = *(_DWORD *)(a1 + 2072);
  }
  BOOL v16 = __OFSUB__(v15, 1);
  int v17 = v15 - 1;
  if (v17 < 0 == v16) {
    *(_DWORD *)(a1 + 2072) = v17;
  }
  int v18 = (*(uint64_t (**)(void))(**(void **)(*(void *)a2 + 16) + 24))(*(void *)(*(void *)a2 + 16));
  int v19 = *(_DWORD *)(*(void *)(a1 + 2424) + 812) + *(_DWORD *)(*(void *)(a1 + 2424) + 808);
  int v20 = v19 * v18;
  int v21 = *((_DWORD *)*a4 + 2);
  if (quasar::OnlineLatticeBiglmFasterDecoder::endUtteranceForPauseResume(a1, a3, a2[736], v14 == 1))
  {
    if (quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
    {
      uint64_t MultiChainMultiAudioBuffer = quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*a4);
      long long v23 = *(quasar::MultiChainMultiAudioBuffer **)MultiChainMultiAudioBuffer;
      uint64_t v24 = *(std::__shared_weak_count **)(MultiChainMultiAudioBuffer + 8);
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23)
      {
        if (quasar::gLogLevel >= 4)
        {
          long long v171 = 0u;
          long long v172 = 0u;
          long long v169 = 0u;
          long long v170 = 0u;
          long long v167 = 0u;
          long long v168 = 0u;
          long long v165 = 0u;
          long long v166 = 0u;
          long long v163 = 0u;
          long long v164 = 0u;
          long long v161 = 0u;
          long long v162 = 0u;
          long long v159 = 0u;
          long long v160 = 0u;
          long long v157 = 0u;
          long long v158 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Ending audio for secondary audio buffers at utterance boundary", 62);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
        quasar::MultiChainMultiAudioBuffer::endAudioForSecondaryBuffers(v23, v20);
      }
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
    }
    return 4;
  }
  if (a2[736])
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v167 = 0u;
      long long v168 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      long long v163 = 0u;
      long long v164 = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      long long v159 = 0u;
      long long v160 = 0u;
      long long v157 = 0u;
      long long v158 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Recognition Paused", 18);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    return 3;
  }
  int v134 = v18;
  unsigned int v131 = v19;
  int v25 = v21 + v19;
  LODWORD((*a3)[24].__begin_) = *(_DWORD *)(*(void *)(a1 + 2424) + 812)
                              + *(_DWORD *)(*(void *)(a1 + 2424) + 808);
  float Average = 0.0;
  float v27 = 0.0;
  if (v21 + v19 >= 1)
  {
    float v27 = (*(float (**)(void, void))(**((void **)a2 + 2) + 64))(*((void *)a2 + 2), (v25 - 1));
    if ((*(unsigned int (**)(void))(**((void **)a2 + 2) + 72))(*((void *)a2 + 2)))
    {
      float v28 = (*(float (**)(void, void, void))(**((void **)a2 + 2) + 80))(*((void *)a2 + 2), (v25 - 1), *(unsigned int *)(a1 + 2056));
      quasar::MovingAverage::add((quasar::MovingAverage *)(a1 + 1992), v28);
    }
  }
  unint64_t v133 = v14;
  if ((*(unsigned int (**)(void))(**((void **)a2 + 2) + 72))(*((void *)a2 + 2))) {
    float Average = quasar::MovingAverage::getAverage((quasar::MovingAverage *)(a1 + 1992));
  }
  int v29 = (quasar::SilencePosteriorGenerator *)*((void *)a2 + 84);
  uint64_t v30 = (std::__shared_weak_count *)*((void *)a2 + 85);
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v29)
  {
    if (quasar::SilencePosteriorGenerator::hasMoreAudio(v29))
    {
      memset(&v141, 0, sizeof(v141));
      quasar::SilencePosteriorGenerator::estimateSilenceDuration((uint64_t)v29, (uint64_t)&v141);
      if ((std::vector<std::wstring>::pointer)((char *)v141.__end_ - (char *)v141.__begin_) >= (std::vector<std::wstring>::pointer)5)
      {
        long long v171 = 0u;
        long long v172 = 0u;
        long long v169 = 0u;
        long long v170 = 0u;
        long long v167 = 0u;
        long long v168 = 0u;
        long long v165 = 0u;
        long long v166 = 0u;
        long long v163 = 0u;
        long long v164 = 0u;
        long long v161 = 0u;
        long long v162 = 0u;
        long long v159 = 0u;
        long long v160 = 0u;
        long long v157 = 0u;
        long long v158 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"spg batch size > 1 unexpected because spg->config.frameByFrame should be set", 76);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      if (v141.__begin_)
      {
        v141.__end_ = v141.__begin_;
        operator delete(v141.__begin_);
      }
    }
    double SilenceFramesCountMs = quasar::SilencePosteriorGenerator::getSilenceFramesCountMs(v29);
    int v32 = (int)(SilenceFramesCountMs / (double)(int)quasar::SilencePosteriorGenerator::getFrameDurationMs(v29));
    float SilenceProbability = quasar::SilencePosteriorGenerator::getSilenceProbability(v29);
    float SilencePosterior = quasar::SilencePosteriorGenerator::getSilencePosterior(v29);
    if (quasar::gLogLevel >= 6)
    {
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v167 = 0u;
      long long v168 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      long long v163 = 0u;
      long long v164 = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      long long v159 = 0u;
      long long v160 = 0u;
      long long v157 = 0u;
      long long v158 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"spgSilenceFramesCount=", 22);
      long long v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" spgSilencePosterior=", 21);
      long long v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" spgSilenceProbabilityRaw=", 26);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
  }
  else
  {
    int v32 = 0;
    float SilenceProbability = 0.0;
    float SilencePosterior = 0.0;
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  unsigned int v155 = -1;
  unsigned int v154 = -1;
  unsigned int v153 = -1;
  float v152 = NAN;
  memset(&v151, 0, sizeof(v151));
  int v149 = 0;
  __src = 0;
  uint64_t v150 = 0;
  unsigned int v147 = 0;
  uint64_t v37 = *((void *)*a4 + 3);
  if (*(unsigned char *)(v37 + 624)) {
    BOOL v38 = *(unsigned __int8 *)(v37 + 738) == 0;
  }
  else {
    BOOL v38 = 0;
  }
  unint64_t v39 = v14;
  uint64_t v146 = 0;
  if (v38 || BYTE1((*a3)[45].__end_)) {
    operator new();
  }
  uint64_t v40 = (v25 * v134);
  int v132 = v25;
  int v130 = v20;
  if (v133 == 1)
  {
    int v41 = 0;
    goto LABEL_203;
  }
  int v42 = *(_DWORD *)(a1 + 2168);
  BOOL v43 = v42 < 1 || v25 % v42 == 0;
  BOOL v128 = v38;
  unsigned int v129 = v25 * v134;
  if (BYTE4(v39) && v43)
  {
    int v123 = v32;
    int v44 = (void **)(a1 + 2520);
    *(void *)(a1 + 2528) = *(void *)(a1 + 2520);
    *(void *)(a1 + 2568) = 0x4110000000000000;
    *(void *)(a1 + 2576) = 0;
    *(void *)(a1 + 2592) = *(void *)(a1 + 2584);
    *(void *)(a1 + 2608) = 0;
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)&(*a3)[2]);
    (*a3)[3].__end_ = (*a3)[3].__begin_;
    LODWORD(v122) = *(_DWORD *)(a1 + 2152);
    BOOL v126 = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback(*(void *)(a1 + 2424), a1 + 2520, (long long *)(a1 + 2544), (int *)(a1 + 2568), (float *)(a1 + 2572), *(kaldi::WordBoundaryInfo **)(a1 + 1344), (_DWORD *)(a1 + 2576), (_DWORD *)(a1 + 2580), v45, (std::vector<unsigned int> *)(a1 + 2584), (int *)(a1 + 2608), (int *)(a1 + 2464), (_DWORD *)(a1 + 2612), *(unsigned char *)(a1 + 1360), (uint64_t *)(a1 + 2472), *(unsigned char *)(a1 + 2496), *(_WORD *)(a1 + 2157), HIBYTE(*(_WORD *)(a1 + 2157)), *(uint64_t ***)(a1 + 1456),
             v122,
             (uint64_t *)v146);
    if (v146)
    {
      uint64_t v46 = (uint64_t)*v146;
      int v47 = v146[1];
      if (*v146 != v47)
      {
        int v48 = *(char **)(a1 + 2520);
        *(void *)(a1 + 2528) = v48;
        unsigned int v49 = (void *)(a1 + 2536);
        do
        {
          if ((unint64_t)v48 >= *v49)
          {
            int v51 = (char *)*v44;
            uint64_t v52 = (v48 - (unsigned char *)*v44) >> 2;
            unint64_t v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v54 = *v49 - (void)v51;
            if (v54 >> 1 > v53) {
              unint64_t v53 = v54 >> 1;
            }
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v53;
            }
            if (v55)
            {
              uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 2536, v55);
              int v48 = *(char **)(a1 + 2528);
              int v51 = *(char **)(a1 + 2520);
            }
            else
            {
              uint64_t v56 = 0;
            }
            long long v57 = &v56[4 * v52];
            *(_DWORD *)long long v57 = *(_DWORD *)(v46 + 36);
            unsigned int v50 = v57 + 4;
            while (v48 != v51)
            {
              int v58 = *((_DWORD *)v48 - 1);
              v48 -= 4;
              *((_DWORD *)v57 - 1) = v58;
              v57 -= 4;
            }
            *(void *)(a1 + 2520) = v57;
            *(void *)(a1 + 2528) = v50;
            *(void *)(a1 + 2536) = &v56[4 * v55];
            if (v51) {
              operator delete(v51);
            }
          }
          else
          {
            *(_DWORD *)int v48 = *(_DWORD *)(v46 + 36);
            unsigned int v50 = v48 + 4;
          }
          *(void *)(a1 + 2528) = v50;
          v46 += 40;
          int v48 = v50;
        }
        while ((void *)v46 != v47);
      }
    }
    if (*(unsigned char *)(a1 + 1361))
    {
      *(unsigned char *)(a1 + 2692) = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback2(*(void *)(a1 + 2424), (unint64_t *)(a1 + 2720), (_DWORD *)(a1 + 2744));
      long long v59 = *(char **)(a1 + 2720);
      uint64_t v60 = *(void *)(a1 + 2728);
      if (v59 != (char *)v60) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 2520), v59, v60, (v60 - (uint64_t)v59) >> 2);
      }
    }
    if (*(unsigned char *)(a1 + 2148))
    {
      int v61 = *(_DWORD *)(a1 + 2152);
      uint64_t v62 = *((void *)a2 + 22);
      v145[0] = *((void *)a2 + 21);
      v145[1] = v62;
      if (v62) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
      }
      quasar::constructWords((unsigned int **)(a1 + 2544), v61, (uint64_t)v145);
    }
    if (v126) {
      quasar::SymbolTableList::lookup((uint64_t *)(*a3)[19].__end_cap_.__value_, (int **)(a1 + 2520), (uint64_t *)&(*a3)[2], (char **)&(*a3)[3], 1);
    }
    if (LOBYTE((*a3)[45].__end_)) {
      quasar::Decoder::splitLmePartialResult(*a3 + 2, (uint64_t **)(*((void *)*a4 + 3) + 80));
    }
    *(_DWORD *)(a1 + 2512) += *(_DWORD *)(a1 + 2576);
    LODWORD(v39) = v133;
    uint64_t v40 = v129;
    int v32 = v123;
  }
  long long v63 = *(quasar::NFHatTransformer **)(a1 + 2792);
  if (v63)
  {
    quasar::NFHatTransformer::estimateSilenceDuration(v63, v27, v134);
    *(_DWORD *)(a1 + 2568) = *(_DWORD *)(*(void *)(a1 + 2792) + 80);
  }
  if (quasar::gLogLevel >= 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v141);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"Raw pauses = [", 14);
    uint64_t v64 = *(void *)(a1 + 2584);
    for (uint64_t i = *(void *)(a1 + 2592); v64 != i; v64 += 4)
    {
      long long v66 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" ", 1);
    }
    long long v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"], words = [", 12);
    std::string v68 = *a3;
    uint64_t v138 = " ";
    uint64_t v139 = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v68[2], (uint64_t *)&v138);
    if ((SBYTE7(v157) & 0x80u) == 0) {
      std::string v69 = __p;
    }
    else {
      std::string v69 = (void **)__p[0];
    }
    if ((SBYTE7(v157) & 0x80u) == 0) {
      uint64_t v70 = BYTE7(v157);
    }
    else {
      uint64_t v70 = (uint64_t)__p[1];
    }
    uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v69, v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"]", 1);
    if (SBYTE7(v157) < 0) {
      operator delete(__p[0]);
    }
    if (quasar::gLogLevel >= 6)
    {
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v167 = 0u;
      long long v168 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      long long v163 = 0u;
      long long v164 = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      long long v159 = 0u;
      long long v160 = 0u;
      long long v157 = 0u;
      long long v158 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::stringbuf::str();
      if (v140 >= 0) {
        uint64_t v72 = &v138;
      }
      else {
        uint64_t v72 = v138;
      }
      if (v140 >= 0) {
        uint64_t v73 = HIBYTE(v140);
      }
      else {
        uint64_t v73 = v139;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v72, v73);
      if (SHIBYTE(v140) < 0) {
        operator delete(v138);
      }
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
    v141.__begin_ = (std::vector<std::wstring>::pointer)*MEMORY[0x1E4FBA418];
    *(std::vector<std::wstring>::pointer *)((char *)&v141.__begin_ + v141.__begin_[-1].__r_.__value_.__r.__words[0]) = *(std::vector<std::wstring>::pointer *)(MEMORY[0x1E4FBA418] + 24);
    v141.__end_ = (std::vector<std::wstring>::pointer)(MEMORY[0x1E4FBA470] + 16);
    if (v143 < 0) {
      operator delete(v142);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B3EA8520](&v144);
    int v25 = v132;
    uint64_t v40 = v129;
  }
  uint64_t v74 = *(void *)(a1 + 2456);
  if (v74)
  {
    int v75 = *a3;
    v141.__begin_ = (std::vector<std::wstring>::pointer)" ";
    v141.__end_ = (std::vector<std::wstring>::pointer)1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v75[2], (uint64_t *)&v141);
    double v76 = quasar::StreamingConfidenceRunner::compute(v74, (std::string *)__p, *(_DWORD *)(a1 + 2576), *(_DWORD *)(a1 + 2568), *(float *)(a1 + 2580));
    if (SBYTE7(v157) < 0) {
      operator delete(__p[0]);
    }
    long long v77 = (quasar *)(int)(v76 * 100.0);
  }
  else
  {
    long long v77 = 0;
  }
  if (*(float *)(a1 + 2572) == INFINITY) {
    *(_DWORD *)(a1 + 2572) = 1091567616;
  }
  memset(&v141, 0, sizeof(v141));
  if (*(void *)(a1 + 2440) || quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
  {
    unint64_t v78 = *(int *)(a1 + 2612);
    unint64_t v79 = (uint64_t)(*(void *)(a1 + 2528) - *(void *)(a1 + 2520)) >> 2;
    unint64_t v80 = *a3;
    BOOL v81 = v79 >= v78;
    unint64_t v82 = v79 - v78;
    if (v82 != 0 && v81)
    {
      std::vector<std::wstring>::pointer begin = v80[2].__begin_;
      std::vector<std::string>::pointer end = (long long *)v80[2].__end_;
      unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
      if (v82 < v85) {
        unint64_t v85 = v82;
      }
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v141, (std::string *)v141.__end_, (std::string *)&begin[v85], end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)&begin[v85]) >> 3));
    }
    else if (&v141 != &v80[2])
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v141, (std::string *)v80[2].__begin_, (long long *)v80[2].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v80[2].__end_ - (char *)v80[2].__begin_) >> 3));
    }
  }
  *(float *)int v137 = 0.0;
  if (a2[562])
  {
    uint64_t v86 = *(void *)(a1 + 2440);
    if (v86)
    {
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      uint64_t v140 = 0;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v86 + 48))(v86, a1 + 2584, &v138);
      unsigned int v155 = *(_DWORD *)(a1 + 2612);
      unsigned int v154 = *(_DWORD *)(a1 + 2568);
      unsigned int v153 = v131;
      float v152 = *(float *)(a1 + 2572);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v151, (std::string *)v141.__begin_, (long long *)v141.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v141.__end_ - (char *)v141.__begin_) >> 3));
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&__src, (char *)v138, v139, (v139 - (uint64_t)v138) >> 2);
      unsigned int v147 = *(_DWORD *)(a1 + 2608);
      if (quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
      {
        if (*((_DWORD *)*a4 + 1))
        {
          char v87 = (*(uint64_t (**)(void))(**(void **)(a1 + 2440) + 56))(*(void *)(a1 + 2440));
          quasar::OnlineLatticeBiglmFasterDecoder::aggregateEpFeatures(a1, (int *)&v155, (int *)&v154, (int *)&v153, &v152, (long long **)&v151, (char **)&__src, (int *)&v147, v87, *((_DWORD *)*a4 + 2));
        }
        else
        {
          quasar::OnlineLatticeBiglmFasterDecoder::resetPrevEpFeatures((quasar::OnlineLatticeBiglmFasterDecoder *)a1);
        }
      }
      if (!(v25
           % (*(int (**)(void))(**(void **)(*(void *)a2 + 16) + 16))(*(void *)(*(void *)a2 + 16))))
      {
        long long v88 = (quasar *)v154;
        float v89 = v152;
        long long v90 = (quasar *)v147;
        uint64_t v121 = a1 + 452;
        long long v120 = (quasar *)__PAIR64__(v134, v77);
        unsigned int v124 = v155;
        unsigned int v125 = v153;
        if ((***(unsigned int (****)(void, BOOL *, float, float, float, float, float))(a1 + 2440))(*(void *)(a1 + 2440), v137, v152, Average, v27, SilenceProbability, SilencePosterior))
        {
          if (quasar::gLogLevel >= 4)
          {
            long long v171 = 0u;
            long long v172 = 0u;
            long long v169 = 0u;
            long long v170 = 0u;
            long long v167 = 0u;
            long long v168 = 0u;
            long long v165 = 0u;
            long long v166 = 0u;
            long long v163 = 0u;
            long long v164 = 0u;
            long long v161 = 0u;
            long long v162 = 0u;
            long long v159 = 0u;
            long long v160 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            *(_OWORD *)std::string __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Server side end pointer triggered frame ", 40);
            std::ostream::operator<<();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
          }
          *(unsigned char *)(a1 + 2076) = 1;
          if (quasar::SpeechRequestData::isEndPointCandidateEnabled(*a4))
          {
            if (a2[561])
            {
              long long v91 = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a4);
              quasar::MultiAudioBuffer::getBuffer(*v91, 0, __p);
              int v92 = quasar::RecogAudioBuffer::serverSideEndPointingEnabled((quasar::RecogAudioBuffer *)__p[0]);
              if (__p[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
              }
              if (v92) {
                (*((void (**)(std::vector<std::wstring>::pointer, uint64_t))(*a3)[23].__end_->__r_.__value_.__l.__data_
              }
                 + 15))((*a3)[23].__end_, v40);
            }
          }
          else
          {
            long long v93 = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a4);
            quasar::MultiAudioBuffer::getBuffer(*v93, 0, __p);
            (*(void (**)(void *))(*(void *)__p[0] + 48))(__p[0]);
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
            if (*(double *)(a1 + 2504) == 0.0)
            {
              LODWORD(v120) = v32;
              quasar::EndPointer::featuresToJsonString(*(void *)(a1 + 2440), (quasar *)v124, v88, (quasar *)v125, (uint64_t *)&v151, (unsigned int **)&__src, v90, v77, v89, Average, v27, SilenceProbability, SilencePosterior, v120);
            }
          }
        }
      }
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 2440) + 32))(*(void *)(a1 + 2440)))
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v171 = 0u;
          long long v172 = 0u;
          long long v169 = 0u;
          long long v170 = 0u;
          long long v167 = 0u;
          long long v168 = 0u;
          long long v165 = 0u;
          long long v166 = 0u;
          long long v163 = 0u;
          long long v164 = 0u;
          long long v161 = 0u;
          long long v162 = 0u;
          long long v159 = 0u;
          long long v160 = 0u;
          long long v157 = 0u;
          long long v158 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reporting end point status=", 27);
          (*(void (**)(void))(**(void **)(a1 + 2440) + 40))(*(void *)(a1 + 2440));
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        if (a2[561])
        {
          std::vector<std::wstring>::pointer v94 = (*a3)[23].__end_;
          uint64_t v95 = (*(uint64_t (**)(void))(**(void **)(a1 + 2440) + 40))(*(void *)(a1 + 2440));
          (*(void (**)(std::vector<std::wstring>::pointer, uint64_t))(v94->__r_.__value_.__r.__words[0] + 64))(v94, v95);
        }
      }
      if (v138)
      {
        uint64_t v139 = (uint64_t)v138;
        operator delete(v138);
      }
      LODWORD(v39) = v133;
    }
  }
  if (a2[561] && (int)v40 > *(_DWORD *)(a1 + 2464) * v134)
  {
    if (*(void *)(a1 + 2440))
    {
      uint64_t v96 = v155;
      uint64_t v97 = v154;
      float v98 = v152;
      uint64_t v99 = v147;
    }
    else
    {
      uint64_t v96 = *(unsigned int *)(a1 + 2612);
      unsigned int v155 = *(_DWORD *)(a1 + 2612);
      uint64_t v97 = *(unsigned int *)(a1 + 2568);
      unsigned int v154 = *(_DWORD *)(a1 + 2568);
      float v98 = *(float *)(a1 + 2572);
      float v152 = v98;
      uint64_t v99 = *(unsigned int *)(a1 + 2608);
      unsigned int v147 = *(_DWORD *)(a1 + 2608);
    }
    LODWORD(v121) = v32;
    (*((void (**)(std::vector<std::wstring>::pointer, uint64_t, uint64_t, std::vector<std::wstring> *, void **, uint64_t, quasar *, void, double, double, double, double, double, double, unint64_t, uint64_t))(*a3)[23].__end_->__r_.__value_.__l.__data_
     + 13))((*a3)[23].__end_, v96, v97, &v151, &__src, v99, v77, *(unsigned int *)(a1 + 2576), v98, Average, v27, *(float *)v137, SilenceProbability, SilencePosterior, __PAIR64__(v134, v40), v121);
  }
  if (!a2[562] || !quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
  {
    int v100 = 0;
    goto LABEL_182;
  }
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  (*(void (**)(void, uint64_t, void **))(**(void **)(a1 + 2448) + 48))(*(void *)(a1 + 2448), a1 + 2584, &v138);
  LODWORD(v136[0]) = 0;
  if ((***(unsigned int (****)(void, void **, void, void, void, std::vector<std::wstring> *, void **, void, float, double, float, float, float, unint64_t, uint64_t, int))(a1 + 2448))(*(void *)(a1 + 2448), v136, *(unsigned int *)(a1 + 2612), *(unsigned int *)(a1 + 2568), v131, &v141, &v138, *(unsigned int *)(a1 + 2608), *(float *)(a1 + 2572), 0.0, v27, SilenceProbability, SilencePosterior, __PAIR64__(v134, v77), a1 + 452, v32)&& !(v25% (*(int (**)(void))(**(void **)(*(void *)a2 + 16) + 16))(*(void *)(*(void *)a2 + 16))))
  {
    if (!*(unsigned char *)(a1 + 1937)) {
      goto LABEL_250;
    }
    long long v118 = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a4);
    quasar::MultiAudioBuffer::getBuffer(*v118, 0, __p);
    char v119 = quasar::RecogAudioBuffer::serverSideEndPointingEnabled((quasar::RecogAudioBuffer *)__p[0]);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if (v119)
    {
LABEL_250:
      if (quasar::gLogLevel >= 4)
      {
        long long v171 = 0u;
        long long v172 = 0u;
        long long v169 = 0u;
        long long v170 = 0u;
        long long v167 = 0u;
        long long v168 = 0u;
        long long v165 = 0u;
        long long v166 = 0u;
        long long v163 = 0u;
        long long v164 = 0u;
        long long v161 = 0u;
        long long v162 = 0u;
        long long v159 = 0u;
        long long v160 = 0u;
        long long v157 = 0u;
        long long v158 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Utterance detector triggered ", 29);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      int v100 = 1;
      goto LABEL_174;
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v167 = 0u;
      long long v168 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      long long v163 = 0u;
      long long v164 = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      long long v159 = 0u;
      long long v160 = 0u;
      long long v157 = 0u;
      long long v158 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Since endpointer is not enabled ignoring utterance ", 51);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
  }
  int v100 = 0;
LABEL_174:
  int v101 = *(_DWORD *)(a1 + 1924);
  if (v101 >= 1 && v130 > v101)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v167 = 0u;
      long long v168 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      long long v163 = 0u;
      long long v164 = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      long long v159 = 0u;
      long long v160 = 0u;
      long long v157 = 0u;
      long long v158 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Utterance detector force triggered because current utterance has too many frames: ", 82);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    int v100 = 1;
  }
  if (v138)
  {
    uint64_t v139 = (uint64_t)v138;
    operator delete(v138);
  }
LABEL_182:
  int v102 = *(_DWORD *)(a1 + 1008);
  if (v102 && (int)v40 - *(_DWORD *)(a1 + 2516) >= v102)
  {
    *(_DWORD *)(a1 + 2516) = v40;
    if (quasar::gLogLevel >= 4)
    {
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v167 = 0u;
      long long v168 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      long long v163 = 0u;
      long long v164 = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      long long v159 = 0u;
      long long v160 = 0u;
      long long v157 = 0u;
      long long v158 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Sending recognition progress report for frameCount=", 51);
      uint64_t v103 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)" processedAudioDurationMs=", 26);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    if (!a2[561]) {
      goto LABEL_202;
    }
    (*((void (**)(std::vector<std::wstring>::pointer, uint64_t))(*a3)[23].__end_->__r_.__value_.__l.__data_ + 9))((*a3)[23].__end_, v40);
  }
  if (a2[561])
  {
    (*((void (**)(std::vector<std::wstring>::pointer, uint64_t))(*a3)[23].__end_->__r_.__value_.__l.__data_
     + 10))((*a3)[23].__end_, v40);
    unsigned int v127 = v77;
    if (*(unsigned char *)(a1 + 2161))
    {
      int v104 = v134;
      if (v27 >= *(float *)(a1 + 2164)) {
        int v105 = *(_DWORD *)(a1 + 2876) + 1;
      }
      else {
        int v105 = 0;
      }
      *(_DWORD *)(a1 + 2876) = v105;
    }
    else
    {
      int v105 = *(_DWORD *)(a1 + 2568);
      int v104 = v134;
    }
    BOOL v106 = quasar::Decoder::exceedsDoublePartialThreshold((quasar::Decoder *)a1, v105 * v104);
    uint64_t v138 = 0;
    uint64_t v139 = 0;
    uint64_t v140 = 0;
    if (v128 && v146 && *v146 != v146[1])
    {
      quasar::betterTracebackWordsToTokens((uint64_t *)v146, (uint64_t)a2, (uint64_t)a3, (uint64_t *)__p);
      std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>((uint64_t *)&v138, (uint64_t)__p);
      v136[0] = __p;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
    }
    int v135 = v100;
    long long v107 = *a3;
    std::vector<std::wstring>::pointer v108 = (*a3)[23].__end_;
    uint64_t v109 = *((unsigned int *)*a4 + 3);
    BOOL isEnabledDoublePartial = quasar::Decoder::isEnabledDoublePartial((quasar::Decoder *)a1);
    LOBYTE(__p[0]) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p[1], "▁");
    BYTE1(v121) = v106;
    LOBYTE(v121) = isEnabledDoublePartial;
    LODWORD(v40) = v129;
    (*(void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring> *, uint64_t, uint64_t, void, void, void **, unsigned __int8 *, unsigned __int8 *, uint64_t, void **))(v108->__r_.__value_.__r.__words[0] + 24))(v108, v107 + 2, v109, 1, v129, v127, &v138, a2 + 768, a2 + 792, v121, __p);
    LODWORD(v39) = v133;
    int v25 = v132;
    int v100 = v135;
    if (SHIBYTE(v157) < 0) {
      operator delete(__p[1]);
    }
    __p[0] = &v138;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
LABEL_202:
  __p[0] = &v141;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  int v41 = v100 != 0;
LABEL_203:
  if (*(void *)(a1 + 2760)
    && (v25 > *(_DWORD *)(a1 + 2464) || !quasar::SpeechRequestData::isRequestEagerResultDurationEmpty((std::mutex *)*a4)))
  {
    *(_DWORD *)(a1 + 2688) = v131;
    *(unsigned char *)(a1 + 2753) = 0;
    if (BYTE4(v133) && (!*(unsigned char *)(a1 + 1361) || v39 == 1)) {
      *(unsigned char *)(a1 + 2692) = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback2(*(void *)(a1 + 2424), (unint64_t *)(a1 + 2720), (_DWORD *)(a1 + 2744));
    }
    uint64_t v111 = *(void *)(a1 + 2792);
    if (v111) {
      *(_DWORD *)(a1 + 2744) = *(_DWORD *)(v111 + 80);
    }
    *(float *)(a1 + 2748) = v27;
    if (quasar::gLogLevel >= 5)
    {
      __p[1] = 0;
      __p[0] = 0;
      *(void *)&long long v157 = 0;
      quasar::SymbolTableList::lookup((uint64_t *)(*a3)[19].__end_cap_.__value_, (int **)(a1 + 2720), (uint64_t *)(a1 + 2696), (char **)__p, 1);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    *(unsigned char *)(a1 + 2752) = v39 != 1;
    v137[0] = 0;
    LODWORD(v138) = 0;
    if (quasar::SpeechRequestData::processedRequestEagerResultDuration((std::mutex *)*a4, v40)
      && !quasar::EagerDecision::matches(*(const void ***)(a1 + 2760), **(_DWORD **)(a1 + 2776)))
    {
      *(unsigned char *)(a1 + 2753) = 1;
    }
    *(unsigned char *)(a1 + 2754) = v132
                          % (*(int (**)(void))(**(void **)(*(void *)a2 + 16) + 16))(*(void *)(*(void *)a2 + 16)) == 0;
    quasar::EagerDecision::eval(*(quasar::EagerDecision **)(a1 + 2760), (const quasar::EagerFeatures *)(a1 + 2688), v137, (int *)&v138);
    if (v138 || *(unsigned char *)(a1 + 1969))
    {
      quasar::SpeechRequestData::getRecogRequestTimer((uint64_t)*a4, __p);
      kaldi::Timer::GetSeconds((kaldi::Timer *)5, v112);
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(*(void *)(a1 + 2424), *(_DWORD *)(*(void *)(a1 + 2424) + 808), 1);
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
    }
  }
  if (((v39 != 1) & ~v41) != 0)
  {
    uint64_t v10 = 3;
  }
  else
  {
    long long v113 = *a3;
    BYTE4(v113[24].__begin_) = v39 == 1;
    BYTE5(v113[24].__begin_) = 1;
    if (quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
    {
      uint64_t v114 = quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*a4);
      long long v116 = *(quasar::MultiChainMultiAudioBuffer **)v114;
      long long v115 = *(std::__shared_weak_count **)(v114 + 8);
      if (v115) {
        atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v116)
      {
        if (quasar::gLogLevel >= 4)
        {
          long long v171 = 0u;
          long long v172 = 0u;
          long long v169 = 0u;
          long long v170 = 0u;
          long long v167 = 0u;
          long long v168 = 0u;
          long long v165 = 0u;
          long long v166 = 0u;
          long long v163 = 0u;
          long long v164 = 0u;
          long long v161 = 0u;
          long long v162 = 0u;
          long long v159 = 0u;
          long long v160 = 0u;
          long long v157 = 0u;
          long long v158 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Ending audio for secondary audio buffers at utterance boundary", 62);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
        quasar::MultiChainMultiAudioBuffer::endAudioForSecondaryBuffers(v116, v130);
      }
      if (v115) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v115);
      }
      if (a2[562] && *(void *)(a1 + 2440))
      {
        *(_DWORD *)(a1 + 2616) = v155;
        *(_DWORD *)(a1 + 2620) = v154;
        *(float *)(a1 + 2624) = v152;
        if ((std::vector<std::wstring> *)(a1 + 2632) != &v151) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 2632), (std::string *)v151.__begin_, (long long *)v151.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v151.__end_ - (char *)v151.__begin_) >> 3));
        }
        if ((void **)(a1 + 2656) != &__src) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 2656), (char *)__src, (uint64_t)v149, (v149 - (unsigned char *)__src) >> 2);
        }
        *(_DWORD *)(a1 + 2680) = v147;
      }
    }
    uint64_t v10 = 4;
  }
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100](&v146, 0);
  if (__src)
  {
    int v149 = __src;
    operator delete(__src);
  }
  __p[0] = &v151;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v10;
}

void sub_1B1ED27DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&STACK[0x270]);
  if (a43) {
    JUMPOUT(0x1B1ED299CLL);
  }
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100]((void ***)&STACK[0x220], 0);
  int v44 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v44;
    operator delete(v44);
  }
  STACK[0x270] = (unint64_t)&STACK[0x248];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_1B1ED27F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&STACK[0x270]);
  std::ostringstream::~ostringstream((uint64_t)&a45);
  JUMPOUT(0x1B1ED2A38);
}

void sub_1B1ED281C()
{
}

void sub_1B1ED2840()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100]((void ***)&STACK[0x220], 0);
  uint64_t v1 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v1;
    operator delete(v1);
  }
  STACK[0x270] = (unint64_t)&STACK[0x248];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  JUMPOUT(0x1B1ED2A78);
}

void sub_1B1ED2850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  if (a43) {
    JUMPOUT(0x1B1ED299CLL);
  }
  JUMPOUT(0x1B1ED2A38);
}

void sub_1B1ED2890()
{
  uint64_t v0 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v0;
    operator delete(v0);
  }
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100]((void ***)&STACK[0x220], 0);
  uint64_t v1 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v1;
    operator delete(v1);
  }
  STACK[0x270] = (unint64_t)&STACK[0x248];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  JUMPOUT(0x1B1ED2A78);
}

void sub_1B1ED28B4()
{
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  JUMPOUT(0x1B1ED28D4);
}

void sub_1B1ED28CC()
{
  uint64_t v1 = &v0;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1B1ED29E0);
}

void sub_1B1ED28EC()
{
}

void sub_1B1ED28FC()
{
  if (SLOBYTE(STACK[0x287]) < 0) {
    JUMPOUT(0x1B1ED290CLL);
  }
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100](&STACK[0x220], 0);
  uint64_t v0 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v0;
    operator delete(v0);
  }
  STACK[0x270] = (unint64_t)&STACK[0x248];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x270]);
  JUMPOUT(0x1B1ED2A78);
}

void sub_1B1ED2920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  if (__p) {
    operator delete(__p);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  _Unwind_Resume(a1);
}

void sub_1B1ED2944()
{
  if (STACK[0x278]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100](&STACK[0x220], 0);
  uint64_t v0 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v0;
    operator delete(v0);
  }
  STACK[0x270] = (unint64_t)&STACK[0x248];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x270]);
  JUMPOUT(0x1B1ED2A78);
}

void sub_1B1ED2958(_Unwind_Exception *a1)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&STACK[0x270]);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void sub_1B1ED296C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  std::ostringstream::~ostringstream((uint64_t)&a42);
  JUMPOUT(0x1B1ED2A38);
}

void sub_1B1ED29B8()
{
}

void sub_1B1ED29CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,char a42)
{
  if (__p) {
    operator delete(__p);
  }
  STACK[0x270] = (unint64_t)&a42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100](&STACK[0x220], 0);
  int v42 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v42;
    operator delete(v42);
  }
  STACK[0x270] = (unint64_t)&STACK[0x248];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  JUMPOUT(0x1B1ED2A78);
}

void sub_1B1ED29F4()
{
  std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100](&STACK[0x220], 0);
  uint64_t v0 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v0;
    operator delete(v0);
  }
  STACK[0x270] = (unint64_t)&STACK[0x248];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&STACK[0x270]);
  JUMPOUT(0x1B1ED2A78);
}

void sub_1B1ED29FC()
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&STACK[0x270]);
  if (v0) {
    JUMPOUT(0x1B1ED2A74);
  }
  JUMPOUT(0x1B1ED2A78);
}

void sub_1B1ED2A0C(_Unwind_Exception *a1)
{
}

void sub_1B1ED2A68(_Unwind_Exception *a1)
{
  if (STACK[0x278]) {
    JUMPOUT(0x1B1ED2A74);
  }
  _Unwind_Resume(a1);
}

unint64_t kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeMe(uint64_t a1, int a2, int a3, int a4, int a5)
{
  if (a3 && *(_DWORD *)(a1 + 800) == 1) {
    kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ResetDecoder(a1);
  }
  char v8 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 696) + 8))(*(void *)(a1 + 696), (*(_DWORD *)(a1 + 808) + *(_DWORD *)(a1 + 368) - 1));
  unsigned __int8 v9 = 0;
  if (((*(uint64_t (**)(void, void))(**(void **)(a1 + 696) + 16))(*(void *)(a1 + 696), (*(_DWORD *)(a1 + 808) + *(_DWORD *)(a1 + 368) - 1)) & 1) == 0)
  {
    int v10 = -1;
    do
    {
      if (++v10 >= *(_DWORD *)(a1 + 644)) {
        break;
      }
      int v11 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 696) + 32))(*(void *)(a1 + 696), (*(_DWORD *)(a1 + 812)+ *(_DWORD *)(a1 + 808)+ *(_DWORD *)(a1 + 804)+ *(_DWORD *)(a1 + 368)));
      if (((v11 | a5) & 1) == 0)
      {
        std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(a1 + 88, *(int *)(a1 + 808) + 2);
        kaldi::Timer::Reset((kaldi::Timer *)(a1 + 848), v13);
        float v15 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessEmitting<kaldi::DecodableInterface>(a1, *(void *)(a1 + 696), *(_DWORD *)(a1 + 808) + 1, v14);
        kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UpdateTime(a1, _CLOCK_REALTIME);
        kaldi::Timer::Reset((kaldi::Timer *)(a1 + 848), v16);
        kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessNonemitting(a1, *(_DWORD *)(a1 + 808) + 1, v15);
        v12.n128_f64[0] = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UpdateTime(a1, (clockid_t)1u);
      }
      if (((*(uint64_t (**)(void, void, __n128))(**(void **)(a1 + 696) + 16))(*(void *)(a1 + 696), (*(_DWORD *)(a1 + 808) - v11 + *(_DWORD *)(a1 + 368)), v12) & 1) != 0|| a4)
      {
        if (a2) {
          kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(a1, *(_DWORD *)(a1 + 808) + 1, 0);
        }
        char v8 = 1;
        if (!v11)
        {
LABEL_19:
          int v20 = *(_DWORD *)(a1 + 808) + 1;
          *(_DWORD *)(a1 + 808) = v20;
          if (!a5) {
            unsigned __int8 v9 = 1;
          }
          goto LABEL_21;
        }
      }
      else
      {
        if (((v11 | a5) & 1) == 0
          && !((*(_DWORD *)(a1 + 808) + 1) % *(_DWORD *)(a1 + 556)))
        {
          kaldi::Timer::Reset((kaldi::Timer *)(a1 + 848), v17);
          float v19 = *(float *)(a1 + 552) * 0.1;
          kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokens((void *)a1, (clockid_t)(*(_DWORD *)(a1 + 808) + 1), v19);
          v18.n128_f64[0] = kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UpdateTime(a1, (clockid_t)2u);
        }
        if (!v11) {
          goto LABEL_19;
        }
      }
      ++*(_DWORD *)(a1 + 812);
      int v20 = *(_DWORD *)(a1 + 808);
LABEL_21:
      ++*(_DWORD *)(a1 + 816);
    }
    while (!(*(unsigned int (**)(void, void, __n128))(**(void **)(a1 + 696) + 16))(*(void *)(a1 + 696), (v20 + *(_DWORD *)(a1 + 368) - 1), v18));
  }
  if (v8) {
    uint64_t v21 = 1;
  }
  else {
    uint64_t v21 = 2;
  }
  *(_DWORD *)(a1 + 800) = v21;
  return v21 | ((unint64_t)v9 << 32);
}

BOOL kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback(uint64_t a1, uint64_t a2, long long *a3, int *a4, float *a5, kaldi::WordBoundaryInfo *a6, _DWORD *a7, _DWORD *a8, __n128 a9, std::vector<unsigned int> *a10, int *a11, int *a12, _DWORD *a13, char a14, uint64_t *a15, char a16, unsigned __int8 a17, unsigned __int8 a18, uint64_t **a19, uint64_t a20,uint64_t *a21)
{
  uint64_t v21 = *(unint64_t **)(a1 + 8);
  if (!v21) {
    return 0;
  }
  unint64_t v23 = 0;
  unint64_t v24 = 0;
  int v25 = 0;
  *(void *)&long long v187 = a11;
  *((void *)&v187 + 1) = a10;
  do
  {
    uint64_t v26 = *((unsigned int *)v21 + 2);
    if (v26)
    {
      uint64_t v27 = *(void *)(a1 + 328);
      if (a17)
      {
        unint64_t v28 = *v21;
        a9.n128_f32[0] = (*(float (**)(void, unint64_t))(**(void **)(a1 + 160) + 32))(*(void *)(a1 + 160), *v21);
        if ((a9.n128_u32[0] & 0x7FFFFFFF) <= 0x7F7FFFFF)
        {
          if (!v24 || (a9.n128_u32[0] = *(_DWORD *)(v24 + 12), a9.n128_f32[0] > *(float *)(v27 + 32 * v26 + 12)))
          {
            a9.n128_f32[0] = (*(float (**)(void, unint64_t))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168), HIDWORD(v28));
            if ((a9.n128_u32[0] & 0x7FFFFFFF) < 0x7F800000) {
              unint64_t v24 = v27 + 32 * v26;
            }
          }
        }
      }
      if (!v23 || (a9.n128_u32[0] = *(_DWORD *)(v23 + 12), a9.n128_f32[0] > *(float *)(v27 + 32 * v26 + 12))) {
        unint64_t v23 = v27 + 32 * v26;
      }
    }
    uint64_t v21 = (unint64_t *)v21[2];
    ++v25;
  }
  while (v21);
  if (!v23) {
    return 0;
  }
  if (a7) {
    *a7 = v25;
  }
  if ((a18 & (v24 != 0)) != 0) {
    unint64_t v23 = v24;
  }
  if (a8)
  {
    a9.n128_u32[0] = *(_DWORD *)(v23 + 12);
    *a8 = a9.n128_u32[0];
  }
  int v29 = 0;
  int v30 = *(_DWORD *)(a1 + 816);
  if (a4)
  {
    unint64_t v31 = v23;
    if (v30 >= 1)
    {
      int v29 = 0;
      unint64_t v31 = v23;
      while (v31)
      {
        unint64_t v32 = *(void *)v31;
        if (*(void *)v31 > 1)
        {
          int v34 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), v32 >> 1);
          if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a1 + 704), v34)) {
            break;
          }
          unint64_t v32 = *(void *)v31;
          unsigned int v33 = *(_DWORD *)(v31 + 8);
        }
        else
        {
          unsigned int v33 = *(_DWORD *)(v31 + 8);
          if (v32 >> 33 && v32 >> 33 != *(_DWORD *)(a1 + 612)) {
            break;
          }
        }
        if ((v32 & 0xFFFFFFFE) != 0) {
          ++v29;
        }
        if (v33 >> 6) {
          unint64_t v31 = *(void *)(a1 + 328) + ((unint64_t)(v33 & 0xFFFFFFC0) >> 1);
        }
        else {
          unint64_t v31 = 0;
        }
        int v30 = *(_DWORD *)(a1 + 816);
        if (v29 >= v30) {
          goto LABEL_41;
        }
      }
      *a4 = v29;
      int v30 = *(_DWORD *)(a1 + 816);
      goto LABEL_42;
    }
  }
  else
  {
    unint64_t v31 = v23;
  }
LABEL_41:
  if (a4)
  {
LABEL_42:
    if (v29 == v30)
    {
      *a4 = v30;
      int v29 = v30;
    }
  }
  if (!a17 || (a18 & 1) != 0) {
    goto LABEL_82;
  }
  if (!v29 || v29 == *(_DWORD *)(a1 + 816)) {
    goto LABEL_81;
  }
  if (!v24) {
    goto LABEL_82;
  }
  if (v24 == v23) {
    goto LABEL_285;
  }
  if (!v31) {
    goto LABEL_81;
  }
  unint64_t v36 = v24;
  while (1)
  {
    do
    {
      if (*(void *)v36 >= 2)
      {
        int v37 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(void *)v36 >> 1);
        if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a1 + 704), v37)
          && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(a1 + 776), *(void *)v36 >> 1))
        {
          char v40 = 0;
          goto LABEL_58;
        }
      }
      unsigned int v38 = *(_DWORD *)(v36 + 8);
      if (!(v38 >> 6)) {
        break;
      }
      uint64_t v39 = *(void *)(a1 + 328);
      unint64_t v36 = v39 + ((unint64_t)(v38 & 0xFFFFFFC0) >> 1);
    }
    while (v39);
    unint64_t v36 = 0;
    char v40 = 1;
LABEL_58:
    while (1)
    {
      if (*(void *)v31 >= 2)
      {
        int v41 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(void *)v31 >> 1);
        if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a1 + 704), v41)
          && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(a1 + 776), *(void *)v31 >> 1))
        {
          break;
        }
      }
      unsigned int v42 = *(_DWORD *)(v31 + 8);
      if (v42 >> 6)
      {
        uint64_t v43 = *(void *)(a1 + 328);
        unint64_t v31 = v43 + ((unint64_t)(v42 & 0xFFFFFFC0) >> 1);
        if (v43) {
          continue;
        }
      }
      unint64_t v31 = 0;
      goto LABEL_80;
    }
    char v44 = v36 == v31 ? 1 : v40;
    if (v44) {
      break;
    }
    if (!a19
      || (LODWORD(__p[0]) = 0,
          LODWORD(__p[0]) = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v36 >> 1), LODWORD(v202[0]) = 0, LODWORD(v202[0]) = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v31 >> 1), *(void *)&v206 = __p, int v45 = *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a19, (int *)__p, (uint64_t)&std::piecewise_construct, (unsigned int **)&v206)+ 8), *(void *)&v206 = v202, v45 != *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a19, (int *)v202, (uint64_t)&std::piecewise_construct, (unsigned int **)&v206)
                 + 8)))
    {
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 776) + 96) + 4 * (*(void *)v36 >> 1)) != *(_DWORD *)(*(void *)(*(void *)(a1 + 776) + 96) + 4 * (*(void *)v31 >> 1))) {
        break;
      }
    }
    unsigned int v46 = *(_DWORD *)(v31 + 8);
    if (v46 >> 6) {
      unint64_t v31 = *(void *)(a1 + 328) + ((unint64_t)(v46 & 0xFFFFFFC0) >> 1);
    }
    else {
      unint64_t v31 = 0;
    }
    if (!(*(_DWORD *)(v36 + 8) >> 6))
    {
      unint64_t v36 = 0;
      break;
    }
    uint64_t v47 = *(void *)(a1 + 328);
    unint64_t v36 = v47 + (((unint64_t)*(unsigned int *)(v36 + 8) >> 1) & 0x7FFFFFE0);
    if (!v47 || !v31) {
      break;
    }
  }
LABEL_80:
  if (v36 == v31) {
LABEL_285:
  }
    unint64_t v23 = v24;
  else {
LABEL_81:
  }
    unint64_t v24 = 0;
LABEL_82:
  uint64_t v48 = (*(_DWORD *)(a1 + 816) - 1);
  v208 = 0;
  if (a6 && a21) {
    operator new();
  }
  if (!a6)
  {
    unsigned int v49 = 0;
    char v195 = 1;
    goto LABEL_123;
  }
  if (a14)
  {
    char v195 = 0;
    unsigned int v49 = 0;
    goto LABEL_123;
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v206, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v206, (uint64_t)"Move the partial traceback to the end of word phone", 51);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v206);
  }
  if (!v23)
  {
    char v195 = 0;
    unsigned int v49 = 0;
    unint64_t v24 = 0;
    goto LABEL_123;
  }
  unint64_t v24 = 0;
  unsigned int v50 = 0;
  unsigned int v51 = v48;
  uint64_t v52 = (uint64_t *)v23;
  while (1)
  {
    unsigned int v49 = v52;
    if (v208) {
      kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::StepBackward((uint64_t)v208, v52);
    }
    uint64_t v53 = *v49;
    if ((*v49 & 0xFFFFFFFE00000000) != 0) {
      uint64_t v54 = v49;
    }
    else {
      uint64_t v54 = v50;
    }
    if (a17) {
      unsigned int v50 = v54;
    }
    if (v53 < 2) {
      goto LABEL_102;
    }
    unsigned int v55 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), v53 >> 1);
    if (kaldi::WordBoundaryInfo::TypeOfPhone(a6, v55) == 2)
    {
      if (kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v49 >> 1)) {
        goto LABEL_117;
      }
LABEL_102:
      int v56 = 1;
      goto LABEL_103;
    }
    int v56 = a17;
    if (a17)
    {
      BOOL isSilencePhone = kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a1 + 704), v55);
      int v56 = 0;
      if (!isSilencePhone) {
        unsigned int v50 = 0;
      }
    }
LABEL_103:
    v51 -= (*v49 & 0xFFFFFFFELL) != 0;
    if (!(*((_DWORD *)v49 + 2) >> 6)) {
      break;
    }
    uint64_t v57 = *(void *)(a1 + 328);
    uint64_t v52 = (uint64_t *)(v57 + (((unint64_t)*((unsigned int *)v49 + 2) >> 1) & 0x7FFFFFE0));
    if (v56)
    {
      uint64_t v48 = v48;
    }
    else
    {
      unint64_t v23 = v57 + (((unint64_t)*((unsigned int *)v49 + 2) >> 1) & 0x7FFFFFE0);
      uint64_t v48 = v51;
    }
    if (!v56) {
      unint64_t v24 = (unint64_t)v50;
    }
    if (!v57)
    {
LABEL_117:
      char v195 = 0;
      goto LABEL_123;
    }
  }
  char v195 = 0;
  if (v56)
  {
    uint64_t v48 = v48;
  }
  else
  {
    unint64_t v23 = 0;
    uint64_t v48 = v51;
  }
  if (!v56) {
    unint64_t v24 = (unint64_t)v50;
  }
LABEL_123:
  __p[0] = 0;
  __p[1] = 0;
  char v205 = 0;
  v202[0] = 0;
  v202[1] = 0;
  long long v203 = 0;
  if (a5) {
    float v59 = *a5;
  }
  else {
    float v59 = 0.0;
  }
  long long v199 = 0;
  long long v200 = 0;
  long long v201 = 0;
  long long v196 = 0;
  long long v197 = 0;
  long long v198 = 0;
  if (!a12)
  {
    int v60 = 0;
    if (v23) {
      goto LABEL_128;
    }
    goto LABEL_250;
  }
  int v60 = *a12;
  if (!v23)
  {
LABEL_250:
    int v192 = 0;
    int v189 = 0;
    long long v116 = 0;
    long long v115 = 0;
    uint64_t v190 = 0xFFFFFFFFLL;
    long long v118 = a3;
    uint64_t v117 = a2;
    uint64_t v121 = a10;
    char v119 = a15;
    goto LABEL_252;
  }
LABEL_128:
  int v192 = 0;
  int v189 = 0;
  BOOL v61 = 0;
  if ((int)v48 < 0 || v24 == 0) {
    unint64_t v63 = v23;
  }
  else {
    unint64_t v63 = v24;
  }
  uint64_t v190 = 0xFFFFFFFFLL;
  do
  {
    if (v208) {
      BOOL v64 = v49 == 0;
    }
    else {
      BOOL v64 = 0;
    }
    if (v64) {
      kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::StepBackward((uint64_t)v208, (uint64_t *)v23);
    }
    if (v49 == (uint64_t *)v23) {
      unsigned int v49 = 0;
    }
    unint64_t v65 = *(void *)v63;
    if (a5 != 0 && !v61 && (int)v48 >= v60)
    {
      a9.n128_f32[0] = (*(float (**)(void, void, __n128))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168), *(unsigned int *)(v63 + 28), a9);
      BOOL v61 = a9.n128_f32[0] != INFINITY;
      if (a9.n128_f32[0] != INFINITY) {
        float v59 = a9.n128_f32[0];
      }
    }
    unint64_t v66 = v65 >> 33;
    if (v65 >> 33)
    {
      long long v67 = (char *)__p[1];
      if (a5 && __p[1] == __p[0] && (int)v48 >= v60)
      {
        a9.n128_f32[0] = (*(float (**)(void, void, __n128))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168), *(unsigned int *)(v63 + 28), a9);
        if (a9.n128_f32[0] == INFINITY) {
          a9.n128_f32[0] = v59;
        }
        *a5 = a9.n128_f32[0];
        long long v67 = (char *)__p[1];
      }
      if (v67 >= v205)
      {
        std::string v69 = (char *)__p[0];
        uint64_t v70 = (v67 - (char *)__p[0]) >> 2;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v72 = v205 - (char *)__p[0];
        if ((v205 - (char *)__p[0]) >> 1 > v71) {
          unint64_t v71 = v72 >> 1;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        if (v73)
        {
          uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v205, v73);
          std::string v69 = (char *)__p[0];
          long long v67 = (char *)__p[1];
        }
        else
        {
          uint64_t v74 = 0;
        }
        int v75 = &v74[4 * v70];
        *(_DWORD *)int v75 = v66;
        std::string v68 = v75 + 4;
        while (v67 != v69)
        {
          int v76 = *((_DWORD *)v67 - 1);
          v67 -= 4;
          *((_DWORD *)v75 - 1) = v76;
          v75 -= 4;
        }
        __p[0] = v75;
        __p[1] = v68;
        char v205 = &v74[4 * v73];
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        *(_DWORD *)long long v67 = v66;
        std::string v68 = v67 + 4;
      }
      __p[1] = v68;
      if (a16)
      {
        int v77 = v48 + 1;
        unint64_t v78 = v197;
        if (v197 >= v198)
        {
          unint64_t v80 = v196;
          uint64_t v81 = (v197 - v196) >> 2;
          unint64_t v82 = v81 + 1;
          if ((unint64_t)(v81 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v83 = v198 - v196;
          if ((v198 - v196) >> 1 > v82) {
            unint64_t v82 = v83 >> 1;
          }
          if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v84 = v82;
          }
          if (v84)
          {
            unint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v198, v84);
            unint64_t v80 = v196;
            unint64_t v78 = v197;
          }
          else
          {
            unint64_t v85 = 0;
          }
          uint64_t v86 = &v85[4 * v81];
          *(_DWORD *)uint64_t v86 = v77;
          unint64_t v79 = v86 + 4;
          while (v78 != v80)
          {
            int v87 = *((_DWORD *)v78 - 1);
            v78 -= 4;
            *((_DWORD *)v86 - 1) = v87;
            v86 -= 4;
          }
          long long v196 = v86;
          long long v198 = &v85[4 * v84];
          if (v80) {
            operator delete(v80);
          }
        }
        else
        {
          *(_DWORD *)long long v197 = v77;
          unint64_t v79 = v197 + 4;
        }
        long long v197 = v79;
      }
      if (a13 && (int)v48 >= v60) {
        ++*a13;
      }
    }
    if (*(_DWORD *)v23 >= 2u)
    {
      int v88 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v23 >> 1);
      int v89 = v88;
      long long v90 = (char *)v202[1];
      if (v202[1] >= v203)
      {
        int v92 = (char *)v202[0];
        int64_t v93 = ((char *)v202[1] - (char *)v202[0]) >> 2;
        unint64_t v94 = v93 + 1;
        if ((unint64_t)(v93 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v95 = v203 - (char *)v202[0];
        if ((v203 - (char *)v202[0]) >> 1 > v94) {
          unint64_t v94 = v95 >> 1;
        }
        if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v96 = v94;
        }
        if (v96)
        {
          uint64_t v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v203, v96);
          int v92 = (char *)v202[0];
          long long v90 = (char *)v202[1];
        }
        else
        {
          uint64_t v97 = 0;
        }
        float v98 = &v97[4 * v93];
        *(_DWORD *)float v98 = v89;
        long long v91 = v98 + 4;
        while (v90 != v92)
        {
          int v99 = *((_DWORD *)v90 - 1);
          v90 -= 4;
          *((_DWORD *)v98 - 1) = v99;
          v98 -= 4;
        }
        v202[0] = v98;
        v202[1] = v91;
        long long v203 = &v97[4 * v96];
        if (v92) {
          operator delete(v92);
        }
      }
      else
      {
        *(_DWORD *)v202[1] = v88;
        long long v91 = v90 + 4;
      }
      v202[1] = v91;
    }
    char v100 = v195;
    if ((int)v48 < v60) {
      char v100 = 1;
    }
    if (!(v100 & 1 | (v187 == 0)) && *(_DWORD *)v23 >= 2u)
    {
      unsigned int v101 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v23 >> 1);
      int v102 = kaldi::WordBoundaryInfo::TypeOfPhone(a6, v101);
      if ((v102 & 0xFFFFFFFD) == 1) {
        v189 += kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v23 >> 1);
      }
      if ((v192 & 0xFFFFFFFD) == 1 && v102 != v192)
      {
        uint64_t v103 = (v48 + 1);
        int v104 = v200;
        if (v200 >= v201)
        {
          uint64_t v106 = ((char *)v200 - (unsigned char *)v199) >> 3;
          if ((unint64_t)(v106 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v107 = ((char *)v201 - (unsigned char *)v199) >> 2;
          if (v107 <= v106 + 1) {
            unint64_t v107 = v106 + 1;
          }
          if ((unint64_t)((char *)v201 - (unsigned char *)v199) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v108 = v107;
          }
          if (v108) {
            uint64_t v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v201, v108);
          }
          else {
            uint64_t v109 = 0;
          }
          long long v110 = (uint64_t *)&v109[8 * v106];
          *long long v110 = v103 | (v190 << 32);
          int v105 = v110 + 1;
          clockid_t v112 = (char *)v199;
          uint64_t v111 = (char *)v200;
          if (v200 != v199)
          {
            do
            {
              uint64_t v113 = *((void *)v111 - 1);
              v111 -= 8;
              *--long long v110 = v113;
            }
            while (v111 != v112);
            uint64_t v111 = (char *)v199;
          }
          long long v199 = v110;
          long long v200 = v105;
          long long v201 = (uint64_t *)&v109[8 * v108];
          if (v111) {
            operator delete(v111);
          }
        }
        else
        {
          uint64_t *v200 = v103 | (v190 << 32);
          int v105 = v104 + 1;
        }
        long long v200 = v105;
        uint64_t v190 = 0xFFFFFFFFLL;
      }
      if ((v102 & 0xFFFFFFFE) == 2 && v102 != v192)
      {
        if (v190 != -1 && kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v206, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v206, (uint64_t)"Pause error - Consecutive word-end", 34);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v206);
        }
        uint64_t v190 = v48;
      }
      int v192 = v102;
    }
    if (!(*(_DWORD *)(v23 + 8) >> 6)) {
      break;
    }
    uint64_t v48 = v48 - ((*(void *)v23 & 0xFFFFFFFELL) != 0);
    uint64_t v114 = *(void *)(a1 + 328);
    unint64_t v63 = v114 + (((unint64_t)*(unsigned int *)(v23 + 8) >> 1) & 0x7FFFFFE0);
    unint64_t v23 = v63;
  }
  while (v114);
  long long v116 = __p[0];
  long long v115 = __p[1];
  long long v118 = a3;
  uint64_t v117 = a2;
  char v119 = a15;
  if (__p[0] == __p[1])
  {
    uint64_t v121 = a10;
  }
  else
  {
    long long v120 = (char *)__p[1] - 4;
    uint64_t v121 = a10;
    if ((char *)__p[1] - 4 > __p[0])
    {
      uint64_t v122 = (char *)__p[0] + 4;
      do
      {
        int v123 = *((_DWORD *)v122 - 1);
        *((_DWORD *)v122 - 1) = *(_DWORD *)v120;
        *(_DWORD *)long long v120 = v123;
        v120 -= 4;
        BOOL v124 = v122 >= v120;
        v122 += 4;
      }
      while (!v124);
    }
  }
LABEL_252:
  unsigned int v125 = v202[0];
  BOOL v126 = v202[1];
  unsigned int v127 = (char *)v202[1] - 4;
  if (v202[0] != v202[1] && v127 > v202[0])
  {
    unsigned int v129 = (char *)v202[0] + 4;
    do
    {
      int v130 = *((_DWORD *)v129 - 1);
      *((_DWORD *)v129 - 1) = *(_DWORD *)v127;
      *(_DWORD *)unsigned int v127 = v130;
      v127 -= 4;
      BOOL v124 = v129 >= v127;
      v129 += 4;
    }
    while (!v124);
  }
  uint64_t v131 = *v119;
  uint64_t v132 = v119[1];
  if (*v119 != v132)
  {
    while (!a16
         || v115 - v116 != *(void *)(v131 + 8) - *(void *)v131
         || memcmp(v116, *(const void **)v131, v115 - v116))
    {
      v131 += 24;
      if (v131 == v132) {
        goto LABEL_265;
      }
    }
    *a12 = *(_DWORD *)v196;
    if (a13) {
      *a13 = 0;
    }
    if (a5) {
      *a5 = 9.0;
    }
  }
LABEL_265:
  *(_OWORD *)std::string __p = *(_OWORD *)v117;
  *(void *)uint64_t v117 = v116;
  *(void *)(v117 + 8) = v115;
  unint64_t v133 = *(char **)(v117 + 16);
  *(void *)(v117 + 16) = v205;
  char v205 = v133;
  long long v134 = *v118;
  *(void *)long long v118 = v125;
  *((void *)v118 + 1) = v126;
  *(_OWORD *)long long v202 = v134;
  int v135 = (char *)*((void *)v118 + 2);
  *((void *)v118 + 2) = v203;
  long long v203 = v135;
  if (a11) {
    *a11 = v189;
  }
  if (a6 && v121)
  {
    int v136 = v200;
    if (v190 != -1 && (v192 & 0xFFFFFFFD) == 1)
    {
      if (v200 >= v201)
      {
        uint64_t v137 = ((char *)v200 - (unsigned char *)v199) >> 3;
        if ((unint64_t)(v137 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v138 = ((char *)v201 - (unsigned char *)v199) >> 2;
        if (v138 <= v137 + 1) {
          unint64_t v138 = v137 + 1;
        }
        if ((unint64_t)((char *)v201 - (unsigned char *)v199) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v139 = v138;
        }
        if (v139) {
          uint64_t v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v201, v139);
        }
        else {
          uint64_t v140 = 0;
        }
        std::vector<std::wstring> v141 = &v140[8 * v137];
        unint64_t v142 = &v140[8 * v139];
        *(void *)std::vector<std::wstring> v141 = v190 << 32;
        int v136 = (uint64_t *)(v141 + 8);
        uint64_t v144 = (char *)v199;
        char v143 = (char *)v200;
        if (v200 != v199)
        {
          do
          {
            uint64_t v145 = *((void *)v143 - 1);
            v143 -= 8;
            *((void *)v141 - 1) = v145;
            v141 -= 8;
          }
          while (v143 != v144);
          char v143 = (char *)v199;
        }
        long long v199 = v141;
        long long v200 = v136;
        long long v201 = (uint64_t *)v142;
        if (v143) {
          operator delete(v143);
        }
      }
      else
      {
        uint64_t *v200 = v190 << 32;
        ++v136;
      }
      long long v200 = v136;
    }
    uint64_t v146 = (uint64_t *)v199;
    unsigned int v147 = v136 - 1;
    if (v199 != v136 && v147 > v199)
    {
      do
      {
        int v149 = *(_DWORD *)v146;
        *(_DWORD *)uint64_t v146 = *(_DWORD *)v147;
        *(_DWORD *)unsigned int v147 = v149;
        int v150 = *((_DWORD *)v146 + 1);
        *((_DWORD *)v146 + 1) = *((_DWORD *)v147 + 1);
        *((_DWORD *)v147 + 1) = v150;
        ++v146;
        --v147;
      }
      while (v146 < v147);
      uint64_t v146 = (uint64_t *)v199;
    }
    if (v136 != v146)
    {
      uint64_t v151 = 0;
      unint64_t v152 = 0;
      int v136 = v146;
      while (1)
      {
        int v153 = v136[v151];
        if (v153 != -1) {
          break;
        }
        if (kaldi::g_kaldi_verbose_level > 2) {
          goto LABEL_310;
        }
        BOOL v156 = (_DWORD *)&v136[v151] + 1;
LABEL_317:
        ++v152;
        int v136 = (uint64_t *)v199;
        long long v158 = v200;
        unint64_t v159 = ((char *)v200 - (unsigned char *)v199) >> 3;
        if (v159 > v152 && *v156 > *(_DWORD *)((char *)v199 + v151 * 8 + 8) && kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v206, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v206, (uint64_t)"Pause error - Word spans into next word", 39);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v206);
          int v136 = (uint64_t *)v199;
          long long v158 = v200;
          unint64_t v159 = ((char *)v200 - (unsigned char *)v199) >> 3;
        }
        ++v151;
        if (v159 <= v152) {
          goto LABEL_326;
        }
      }
      int v154 = kaldi::g_kaldi_verbose_level;
      if (HIDWORD(v136[v151]) == -1 && kaldi::g_kaldi_verbose_level > 2)
      {
LABEL_310:
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v206, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v206, (uint64_t)"Pause error - Word with missing startframe or endframe", 54);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v206);
        int v153 = v136[v151];
        int v154 = kaldi::g_kaldi_verbose_level;
      }
      BOOL v156 = (_DWORD *)&v136[v152] + 1;
      if (v153 > SHIDWORD(v136[v151]) && v154 >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v206, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v206, (uint64_t)"Pause error - Word-end before word-begin", 40);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v206);
      }
      goto LABEL_317;
    }
    unint64_t v159 = v136 - v146;
    long long v158 = v136;
LABEL_326:
    if (v159 > v189 && kaldi::g_kaldi_verbose_level > 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v206, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v206, (uint64_t)"Pause error - Found more word times than words", 46);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v206);
      int v136 = (uint64_t *)v199;
      long long v158 = v200;
    }
    std::vector<unsigned int>::pointer begin = v121->__begin_;
    v121->__end_ = v121->__begin_;
    if ((unint64_t)((char *)v158 - (char *)v136) >= 9)
    {
      uint64_t v163 = 0;
      p_end_cap = &v121->__end_cap_;
      unint64_t v165 = 1;
      do
      {
        int v166 = v136[v165];
        int v167 = HIDWORD(v136[v163]);
        BOOL v168 = __OFSUB__(v166, v167);
        int v169 = v166 - v167;
        if ((v169 < 0) ^ v168 | (v169 == 0)) {
          int v170 = 0;
        }
        else {
          int v170 = 1;
        }
        int v171 = v169 - v170;
        if (v169 - v170 >= 0)
        {
          if (begin >= p_end_cap->__value_)
          {
            std::vector<unsigned int>::pointer v173 = v121->__begin_;
            uint64_t v174 = begin - v121->__begin_;
            unint64_t v175 = v174 + 1;
            if ((unint64_t)(v174 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v176 = (char *)p_end_cap->__value_ - (char *)v173;
            if (v176 >> 1 > v175) {
              unint64_t v175 = v176 >> 1;
            }
            if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v177 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v177 = v175;
            }
            if (v177)
            {
              long long v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v121->__end_cap_, v177);
              std::vector<unsigned int>::pointer v173 = v121->__begin_;
              std::vector<unsigned int>::pointer begin = v121->__end_;
            }
            else
            {
              long long v178 = 0;
            }
            uint64_t v179 = (unsigned int *)&v178[4 * v174];
            *uint64_t v179 = v171;
            long long v172 = v179 + 1;
            while (begin != v173)
            {
              unsigned int v180 = *--begin;
              *--uint64_t v179 = v180;
            }
            v121->__begin_ = v179;
            v121->__end_ = v172;
            v121->__end_cap_.__value_ = (unsigned int *)&v178[4 * v177];
            if (v173) {
              operator delete(v173);
            }
          }
          else
          {
            std::string *begin = v171;
            long long v172 = begin + 1;
          }
          v121->__end_ = v172;
          std::vector<unsigned int>::pointer begin = v172;
          int v136 = (uint64_t *)v199;
          long long v158 = v200;
        }
        ++v163;
        ++v165;
      }
      while (v165 < v158 - v136);
    }
    if (v189 > 0)
    {
      std::vector<unsigned int>::size_type v181 = (v189 - 1);
      if (v181 > begin - v121->__begin_) {
        std::vector<int>::resize(v121, v181);
      }
    }
  }
  if (v208)
  {
    kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::Finalize((uint64_t)v208);
    kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::GetWords((uint64_t)v208, &v206);
    std::vector<kaldi::quasar::BetterTracebackWord>::__vdeallocate(a21);
    *(_OWORD *)a21 = v206;
    a21[2] = v207;
    uint64_t v207 = 0;
    long long v206 = 0uLL;
    v209 = (void **)&v206;
    std::vector<kaldi::quasar::BetterTracebackWord>::__destroy_vector::operator()[abi:ne180100](&v209);
  }
  BOOL v35 = *(void *)(v117 + 8) != *(void *)v117;
  if (v196) {
    operator delete(v196);
  }
  if (v199)
  {
    long long v200 = (uint64_t *)v199;
    operator delete(v199);
  }
  if (v202[0])
  {
    v202[1] = v202[0];
    operator delete(v202[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v182 = v208;
  v208 = 0;
  if (v182) {
    std::default_delete<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback>::operator()[abi:ne180100]((uint64_t)&v208, v182);
  }
  return v35;
}

void sub_1B1ED4098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a41);
  uint64_t v43 = *(void **)(v41 - 120);
  *(void *)(v41 - 120) = 0;
  if (v43) {
    std::default_delete<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback>::operator()[abi:ne180100](v41 - 120, v43);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PartialTraceback2(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  a2[1] = *a2;
  *a3 = 0;
  char v3 = *(unint64_t **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v7 = 0;
  float v8 = INFINITY;
  do
  {
    unint64_t v9 = *v3;
    float v10 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 160) + 32))(*(void *)(a1 + 160), *v3);
    if (v10 != INFINITY)
    {
      uint64_t v11 = *(void *)(a1 + 328) + 32 * *((unsigned int *)v3 + 2);
      float v12 = v10 + *(float *)(v11 + 12);
      float v13 = v12
          + (*(float (**)(void, unint64_t))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168), HIDWORD(v9));
      if (v8 > v13)
      {
        float v8 = v13;
        uint64_t v7 = v11;
      }
    }
    char v3 = (unint64_t *)v3[2];
  }
  while (v3);
  uint64_t result = 0;
  if (v7 && v8 != INFINITY)
  {
    char v15 = 0;
    *a3 = 0;
    while (1)
    {
      uint64_t v16 = *(void *)v7 >> 33;
      if (v16 && v16 != *(_DWORD *)(a1 + 612))
      {
        __n128 v18 = (_DWORD *)a2[1];
        unint64_t v17 = a2[2];
        if ((unint64_t)v18 >= v17)
        {
          int v20 = (_DWORD *)*a2;
          uint64_t v21 = (uint64_t)((uint64_t)v18 - *a2) >> 2;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v17 - (void)v20;
          if (v23 >> 1 > v22) {
            unint64_t v22 = v23 >> 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v24);
            int v20 = (_DWORD *)*a2;
            __n128 v18 = (_DWORD *)a2[1];
          }
          else
          {
            int v25 = 0;
          }
          uint64_t v26 = &v25[4 * v21];
          *(_DWORD *)uint64_t v26 = v16;
          float v19 = v26 + 4;
          while (v18 != v20)
          {
            int v27 = *--v18;
            *((_DWORD *)v26 - 1) = v27;
            v26 -= 4;
          }
          *a2 = (unint64_t)v26;
          a2[1] = (unint64_t)v19;
          a2[2] = (unint64_t)&v25[4 * v24];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          _DWORD *v18 = v16;
          float v19 = v18 + 1;
        }
        a2[1] = (unint64_t)v19;
      }
      if (v15) {
        goto LABEL_34;
      }
      if (*(_DWORD *)v7 < 2u)
      {
        char v15 = 0;
        goto LABEL_35;
      }
      int v28 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(a1 + 776), *(_DWORD *)v7 >> 1);
      if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a1 + 704), v28))
      {
LABEL_34:
        char v15 = 1;
      }
      else
      {
        char v15 = 0;
        ++*a3;
      }
LABEL_35:
      if (*(_DWORD *)(v7 + 8) >> 6)
      {
        uint64_t v29 = *(void *)(a1 + 328);
        uint64_t v7 = v29 + (((unint64_t)*(unsigned int *)(v7 + 8) >> 1) & 0x7FFFFFE0);
        if (v29) {
          continue;
        }
      }
      unint64_t v30 = *a2;
      unint64_t v31 = a2[1];
      unint64_t v32 = (_DWORD *)(v31 - 4);
      if (*a2 != v31 && (unint64_t)v32 > v30)
      {
        unint64_t v34 = v30 + 4;
        do
        {
          int v35 = *(_DWORD *)(v34 - 4);
          *(_DWORD *)(v34 - 4) = *v32;
          *v32-- = v35;
          BOOL v36 = v34 >= (unint64_t)v32;
          v34 += 4;
        }
        while (!v36);
      }
      return 1;
    }
  }
  return result;
}

void quasar::OnlineLatticeBiglmFasterDecoder::aggregateEpFeatures(uint64_t a1, int *a2, int *a3, int *a4, _DWORD *a5, long long **a6, char **a7, int *a8, char a9, int a10)
{
  if (!*(void *)(a1 + 2440))
  {
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    *(_OWORD *)uint64_t v43 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v43, "This should only be called if endPointer exists");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v43);
  }
  int v14 = *a2;
  int v15 = *a8;
  int v16 = *a3;
  int v17 = *a4;
  *a2 += *(_DWORD *)(a1 + 2616);
  if (v16 == v17) {
    *a3 += *(_DWORD *)(a1 + 2620);
  }
  *a4 += a10;
  if (v14 <= 0) {
    *a5 = *(_DWORD *)(a1 + 2624);
  }
  memset(v43, 0, sizeof(v43));
  *(void *)&long long v44 = 0;
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::vector<std::string> *)v43, 0, *(std::string **)(a1 + 2632), *(long long **)(a1 + 2640), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 2640) - *(void *)(a1 + 2632)) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)v43, *(std::string **)&v43[2], (std::string *)*a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  long long v18 = *(_OWORD *)a6;
  *(_OWORD *)a6 = *(_OWORD *)v43;
  *(_OWORD *)uint64_t v43 = v18;
  float v19 = a6[2];
  a6[2] = (long long *)v44;
  *(void *)&long long v44 = v19;
  char v40 = 0;
  uint64_t v41 = 0;
  unsigned int v42 = 0;
  if (*(int *)(a1 + 2680) >= 1 && v15 >= 1)
  {
    int v20 = *(_DWORD *)(a1 + 2620);
    uint64_t v21 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v42, 1uLL);
    _DWORD *v21 = v20;
    char v40 = v21;
    unsigned int v42 = &v21[v22];
    uint64_t v41 = v21 + 1;
  }
  std::string __p = 0;
  unsigned int v38 = 0;
  uint64_t v39 = 0;
  (*(void (**)(void, void **, void **))(**(void **)(a1 + 2440) + 48))(*(void *)(a1 + 2440), &v40, &__p);
  uint64_t v23 = *a7;
  unint64_t v24 = a7[1];
  if (a9)
  {
    uint64_t v25 = v24 - v23;
    if (v24 != v23)
    {
      uint64_t v26 = 0;
      unint64_t v27 = v25 >> 2;
      int v28 = __p;
      if (v27 <= 1) {
        unint64_t v27 = 1;
      }
      do
      {
        BOOL v29 = *(_DWORD *)&v23[4 * v26] || *(_DWORD *)(*(void *)(a1 + 2656) + 4 * v26) || v28[v26] != 0;
        *(_DWORD *)&v23[4 * v26++] = v29;
      }
      while (v27 != v26);
    }
  }
  else
  {
    uint64_t v30 = v24 - v23;
    if (v30)
    {
      unint64_t v31 = v30 >> 2;
      unint64_t v32 = *(int **)(a1 + 2656);
      unsigned int v33 = (int *)__p;
      if (v31 <= 1) {
        unint64_t v31 = 1;
      }
      do
      {
        int v35 = *v32++;
        int v34 = v35;
        int v36 = *v33++;
        *(_DWORD *)v23 += v36 + v34;
        v23 += 4;
        --v31;
      }
      while (v31);
    }
  }
  *a8 += *(_DWORD *)(a1 + 2680);
  if (__p)
  {
    unsigned int v38 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  char v40 = v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
}

void quasar::betterTracebackWordsToTokens(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(*(void *)a2 + 16) + 24))(*(void *)(*(void *)a2 + 16));
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    float v23 = (float)v6;
    do
    {
      quasar::Token::Token((quasar::Token *)__p);
      quasar::SymbolTableList::lookup(*(quasar::SymbolTableList **)(*(void *)a3 + 472), *(_DWORD *)(v7 + v8 + 36), (uint64_t)&v25);
      if (SHIBYTE(v28) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v25;
      uint64_t v28 = v26;
      int v10 = *(_DWORD *)(v7 + v8 + 28);
      v11.i32[0] = *(_DWORD *)(v7 + v8 + 24);
      v11.i32[1] = v10 + 1;
      *(uint32x2_t *)&v29[4] = vcvt_u32_f32(vmul_n_f32(vcvt_f32_s32(v11), v23));
      int v12 = *(_DWORD *)(v7 + v8 + 32);
      if (v10 == v12) {
        ++v12;
      }
      *(_DWORD *)&v29[12] = (float)(v23 * (float)v12);
      v29[20] = 1;
      unint64_t v13 = a4[1];
      if (v13 >= a4[2])
      {
        uint64_t v21 = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token>(a4, (long long *)__p);
        int v22 = SHIBYTE(v43);
        a4[1] = v21;
        if (v22 < 0) {
          operator delete((void *)v42);
        }
      }
      else
      {
        long long v14 = *(_OWORD *)__p;
        *(void *)(v13 + 16) = v28;
        *(_OWORD *)unint64_t v13 = v14;
        __p[1] = 0;
        uint64_t v28 = 0;
        __p[0] = 0;
        uint64_t v15 = *(void *)&v29[14];
        *(_OWORD *)(v13 + 24) = *(_OWORD *)v29;
        *(void *)(v13 + 38) = v15;
        uint64_t v16 = v31;
        *(_OWORD *)(v13 + 48) = v30;
        *(void *)(v13 + 64) = v16;
        *(void *)(v13 + 72) = 0;
        uint64_t v31 = 0;
        long long v30 = 0uLL;
        *(void *)(v13 + 80) = 0;
        *(void *)(v13 + 88) = 0;
        *(_OWORD *)(v13 + 72) = v32;
        *(void *)(v13 + 88) = v33;
        long long v32 = 0uLL;
        uint64_t v33 = 0;
        long long v17 = v34;
        *(void *)(v13 + 112) = v35;
        *(void *)(v13 + 120) = 0;
        *(_OWORD *)(v13 + 96) = v17;
        uint64_t v35 = 0;
        long long v34 = 0uLL;
        *(void *)(v13 + 128) = 0;
        *(void *)(v13 + 136) = 0;
        *(_OWORD *)(v13 + 120) = v36;
        *(void *)(v13 + 136) = v37;
        long long v36 = 0uLL;
        uint64_t v37 = 0;
        long long v18 = v38;
        *(void *)(v13 + 160) = v39;
        *(_OWORD *)(v13 + 144) = v18;
        uint64_t v39 = 0;
        long long v38 = 0uLL;
        LODWORD(v16) = v40;
        *(_WORD *)(v13 + 172) = v41;
        *(_DWORD *)(v13 + 168) = v16;
        long long v19 = v42;
        *(void *)(v13 + 192) = v43;
        *(_OWORD *)(v13 + 176) = v19;
        uint64_t v43 = 0;
        long long v42 = 0uLL;
        long long v20 = v44;
        *(_DWORD *)(v13 + 216) = v45;
        *(_OWORD *)(v13 + 200) = v20;
        a4[1] = v13 + 224;
      }
      if (SHIBYTE(v39) < 0) {
        operator delete((void *)v38);
      }
      *(void *)&long long v25 = &v36;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      if (SHIBYTE(v35) < 0) {
        operator delete((void *)v34);
      }
      *(void *)&long long v25 = &v32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      if (SHIBYTE(v31) < 0) {
        operator delete((void *)v30);
      }
      if (SHIBYTE(v28) < 0) {
        operator delete(__p[0]);
      }
      ++v9;
      uint64_t v7 = *a1;
      v8 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3) > v9);
  }
}

void sub_1B1ED4A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  quasar::Token::~Token((void **)va);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<quasar::SpeechRequestData>::operator=[abi:ne180100](void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void quasar::OnlineLatticeBiglmFasterDecoder::cleanUpAfterDecoding(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  if (*((unsigned char *)this + 440)) {
    quasar::OnlineLatticeBiglmFasterDecoder::resetAccessedStatesCounts(this);
  }
  quasar::OnlineLatticeBiglmFasterDecoder::DecoderCreationDependencies::clear((quasar::OnlineLatticeBiglmFasterDecoder *)((char *)this + 2312));
  quasar::OnlineLatticeBiglmFasterDecoder::clearEagerData(this);
}

void quasar::OnlineLatticeBiglmFasterDecoder::DecoderCreationDependencies::clear(quasar::OnlineLatticeBiglmFasterDecoder::DecoderCreationDependencies *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 7);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 13);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 15);
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 11);
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void quasar::OnlineLatticeBiglmFasterDecoder::clearCaches(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 284);
  for (uint64_t i = (uint64_t *)*((void *)this + 285); v1 != i; v1 += 2)
  {
    uint64_t v3 = *v1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v3, (uint64_t)__p, &v6);
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1ED4CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmFasterDecoder::endTheUtteranceAfterPauseRecognition(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 2808);
  std::mutex::lock((std::mutex *)((char *)this + 2808));
  *((unsigned char *)this + 2801) = 1;
  std::mutex::unlock(v2);
}

void quasar::OnlineLatticeBiglmFasterDecoder::endTheUtteranceAfterResumeRecognition(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 2808);
  std::mutex::lock((std::mutex *)((char *)this + 2808));
  *((unsigned char *)this + 2802) = 1;
  std::mutex::unlock(v2);
}

void quasar::OnlineLatticeBiglmFasterDecoder::resetPauseResumeState(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 2808);
  std::mutex::lock((std::mutex *)((char *)this + 2808));
  *(_WORD *)((char *)this + 2801) = 0;
  std::mutex::unlock(v2);
}

void quasar::MuxHelper::finalizeResult(uint64_t *a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *a5;
  uint64_t v6 = a5[1];
  if (!a2[2])
  {
    if (v6 != v7)
    {
      do
      {
        uint64_t v27 = v6 - 24;
        std::__tree<std::string>::destroy(v6 - 24, *(char **)(v6 - 16));
        uint64_t v6 = v27;
      }
      while (v27 != v7);
    }
    a5[1] = v7;
    return;
  }
  if (v6 != v7)
  {
    do
    {
      uint64_t v11 = v6 - 24;
      std::__tree<std::string>::destroy(v6 - 24, *(char **)(v6 - 16));
      uint64_t v6 = v11;
    }
    while (v11 != v7);
  }
  a5[1] = v7;
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  std::vector<std::set<std::string>>::resize(a5, v12, (const void ***)&__p);
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  if (*a3 == a3[1]) {
    return;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v63, (const void ***)a2);
  uint64_t v13 = a3[1];
  if (v13 != *a3)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v13 = *a3;
    do
    {
      uint64_t v16 = *a5;
      quasar::MuxHelper::choice2mux(a1, (std::string **)(v13 + v14), (uint64_t)a2, &__p);
      if (v49)
      {
        long long v17 = (uint64_t **)(v16 + v14);
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v17, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
          std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)&v63, (const void **)&__p.__r_.__value_.__l.__data_);
        }
        else
        {
          if (v17 != a2) {
            std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v17, *a2, a2 + 1);
          }
          std::__tree<std::string>::destroy((uint64_t)&v63, (char *)v64);
          BOOL v64 = 0;
          uint64_t v65 = 0;
          unint64_t v63 = (const void **)&v64;
        }
        if (v49 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      ++v15;
      uint64_t v13 = *a3;
      v14 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > v15);
  }
  if (!v65) {
    goto LABEL_75;
  }
  int v60 = 0;
  BOOL v61 = 0;
  unint64_t v62 = 0;
  long long v19 = *(const quasar::Token **)v13;
  long long v20 = *(const quasar::Token **)(v13 + 8);
  if (*(const quasar::Token **)v13 == v20) {
    goto LABEL_49;
  }
  do
  {
    quasar::Token::Token(&__p, v19);
    quasar::MuxHelper::tok2mux(a1, (std::string *)v19, (uint64_t)a2, &v47);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v21 = v47.__r_.__value_.__l.__size_;
      operator delete(v47.__r_.__value_.__l.__data_);
      if (!v21) {
        goto LABEL_28;
      }
    }
    else if (!*((unsigned char *)&v47.__r_.__value_.__s + 23))
    {
      goto LABEL_28;
    }
    quasar::MuxHelper::scrubToken(a1, (uint64_t)v19, &v47);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v47;
LABEL_28:
    int v22 = v61;
    if ((unint64_t)v61 >= v62)
    {
      float v23 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v60, (const quasar::Token *)&__p);
    }
    else
    {
      quasar::Token::Token(v61, (const quasar::Token *)&__p);
      float v23 = (std::string *)((char *)v22 + 224);
    }
    BOOL v61 = v23;
    if (v59 < 0) {
      operator delete(v58);
    }
    if (v57 < 0) {
      operator delete(v56);
    }
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
    if (v54 < 0) {
      operator delete(v53);
    }
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
    if (v51 < 0) {
      operator delete(v50);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    long long v19 = (const quasar::Token *)((char *)v19 + 224);
  }
  while (v19 != v20);
  unint64_t v24 = v60;
  long long v25 = v61;
  uint64_t v26 = *(unsigned __int8 **)*a3;
  if ((char *)v61 - (char *)v60 == *(void *)(*a3 + 8) - (void)v26)
  {
    while (v24 != (unsigned __int8 *)v25)
    {
      if (!quasar::Token::operator==(v24, v26)) {
        goto LABEL_50;
      }
      v24 += 224;
      v26 += 224;
    }
LABEL_49:
    std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)*a5, v63, &v64);
  }
  else
  {
LABEL_50:
    unint64_t v28 = a3[1];
    if (v28 >= a3[2])
    {
      uint64_t v30 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(a3, (uint64_t *)&v60);
      uint64_t v29 = a4;
    }
    else
    {
      std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a3, (uint64_t *)&v60);
      uint64_t v29 = a4;
      uint64_t v30 = v28 + 24;
    }
    a3[1] = v30;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
    unint64_t v31 = a5[1];
    if (v31 >= a5[2])
    {
      uint64_t v32 = std::vector<std::set<std::string>>::__emplace_back_slow_path<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a5, (const void ***)&__p, (const void ****)&v47);
    }
    else
    {
      std::set<std::string>::set[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)a5[1], v63, &v64);
      uint64_t v32 = v31 + 24;
      a5[1] = v31 + 24;
    }
    a5[1] = v32;
    uint64_t v33 = *(char **)v29;
    long long v34 = *(char **)(v29 + 8);
    if (*(char **)v29 != v34)
    {
      unint64_t v35 = *(void *)(v29 + 16);
      if ((unint64_t)v34 >= v35)
      {
        uint64_t v37 = (v34 - v33) >> 3;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v35 - (void)v33;
        if (v39 >> 2 > v38) {
          unint64_t v38 = v39 >> 2;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          __int16 v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v29 + 16, v40);
          uint64_t v33 = *(char **)v29;
          long long v42 = *(char **)(v29 + 8);
        }
        else
        {
          __int16 v41 = 0;
          long long v42 = *(char **)(v29 + 8);
        }
        uint64_t v43 = &v41[8 * v37];
        long long v44 = &v41[8 * v40];
        *(void *)uint64_t v43 = *((void *)v34 - 1);
        long long v36 = v43 + 8;
        while (v42 != v33)
        {
          uint64_t v45 = *((void *)v42 - 1);
          v42 -= 8;
          *((void *)v43 - 1) = v45;
          v43 -= 8;
        }
        *(void *)uint64_t v29 = v43;
        *(void *)(v29 + 8) = v36;
        *(void *)(v29 + 16) = v44;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(void *)long long v34 = *((void *)v34 - 1);
        long long v36 = v34 + 8;
      }
      *(void *)(v29 + 8) = v36;
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_75:
  std::__tree<std::string>::destroy((uint64_t)&v63, (char *)v64);
}

void sub_1B1ED52F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  std::string __p = (void *)(v19 - 144);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::string>::destroy(v19 - 120, *(char **)(v19 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::set<std::string>>::resize(uint64_t *a1, unint64_t a2, const void ***a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::set<std::string>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      do
      {
        uint64_t v9 = v4 - 24;
        std::__tree<std::string>::destroy(v4 - 24, *(char **)(v4 - 16));
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void quasar::MuxHelper::choice2mux(void *a1@<X0>, std::string **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  memset(&__s1, 0, sizeof(__s1));
  unint64_t v5 = *a2;
  BOOL v6 = a2[1];
  if (*a2 == v6)
  {
LABEL_24:
    *a4 = __s1;
    a4[1].__r_.__value_.__s.__data_[0] = 1;
    return;
  }
  while (1)
  {
    quasar::MuxHelper::tok2mux(a1, v5, a3, &__p);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_21;
    }
    char v11 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    std::string::size_type v12 = (__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__s1.__r_.__value_.__r.__words[2])
        : __s1.__r_.__value_.__l.__size_;
    if (v12)
    {
      if (v12 != size) {
        goto LABEL_25;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_)) {
          goto LABEL_25;
        }
        goto LABEL_20;
      }
      if (*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
        break;
      }
    }
LABEL_20:
    std::string::operator=(&__s1, &__p);
    LOBYTE(v10) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
LABEL_21:
    if ((v10 & 0x80) != 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unint64_t v5 = (std::string *)((char *)v5 + 224);
    if (v5 == v6) {
      goto LABEL_24;
    }
  }
  p_s1 = &__s1;
  uint64_t v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  while (p_s1->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
  {
    p_s1 = (std::string *)((char *)p_s1 + 1);
    p_p = (std::string *)((char *)p_p + 1);
    if (!--v15) {
      goto LABEL_20;
    }
  }
LABEL_25:
  a4->__r_.__value_.__s.__data_[0] = 0;
  a4[1].__r_.__value_.__s.__data_[0] = 0;
  if ((v10 & 0x80000000) == 0)
  {
    if ((v11 & 0x80) == 0) {
      return;
    }
LABEL_29:
    operator delete(__s1.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_29;
  }
}

void sub_1B1ED559C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::MuxHelper::tok2mux(void *a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  unint64_t v7 = (unsigned __int8 *)&a2[6];
  if (a3 + 8 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a3, (const void **)&a2[6].__r_.__value_.__l.__data_))goto LABEL_18; {
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  if ((size & 0x80u) == 0) {
    uint64_t v9 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v9 = (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    int v10 = &v9[size];
    char v11 = v9;
    std::string::size_type v12 = v10;
    do
    {
      uint64_t v13 = v11;
      uint64_t v14 = v11;
      while (1)
      {
        int v15 = *v14++;
        if (v15 == 92) {
          break;
        }
        uint64_t v13 = v14;
        if (v14 == v10)
        {
          uint64_t v13 = v12;
          goto LABEL_14;
        }
      }
      char v11 = v13 + 1;
      std::string::size_type v12 = v13;
    }
    while (v14 != v10);
LABEL_14:
    if (v13 != v10 && v13 - v9 != -1)
    {
      std::string::basic_string(&__p, a2, v13 - v9, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
      uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, (unsigned __int8 *)&__p);
      long long v17 = v16;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v17) {
          goto LABEL_18;
        }
      }
      else if (v16)
      {
LABEL_18:
        std::string::basic_string[abi:ne180100]<0>(a4, "");
        return;
      }
    }
  }
  if (SHIBYTE(a2[6].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a4, a2[6].__r_.__value_.__l.__data_, a2[6].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    a4->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
  }
}

void sub_1B1ED5720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::MuxHelper::scrubToken(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  int v6 = (char)v5;
  std::string::size_type v7 = *(void *)(a2 + 8);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5 && a1[8])
  {
    uint64_t v9 = quasar::QsrText::SingletonInstance((quasar::QsrText *)a1);
    std::string::size_type MetadataStartIndex = (int)quasar::QsrText::getMetadataStartIndex(v9, (uint64_t *)a2);
    std::string::basic_string(&v24, (const std::string *)a2, 0, MetadataStartIndex, (std::allocator<char> *)&v23);
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v11 = *(void *)(a2 + 8);
    }
    std::string::size_type v12 = std::string::basic_string(&v23, (const std::string *)a2, MetadataStartIndex, v11, (std::allocator<char> *)v21);
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v22 = 0;
    uint64_t v13 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v12);
    if (quasar::QsrText::decodeQsrText(v13, (uint64_t)&v24, (uint64_t)v21))
    {
      v19[0] = 0;
      v19[1] = 0;
      uint64_t v20 = 0;
      uint64_t v14 = (quasar::QsrText *)quasar::TextSanitizer::sanitize(a1[8], (uint64_t)v21);
      if (v14 == 1)
      {
        if (*(char *)(a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
        }
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v18 = 0;
        uint64_t v16 = quasar::QsrText::SingletonInstance(v14);
        if (quasar::QsrText::encodeTokenQsrText(v16, (uint64_t)v19, (uint64_t)__p))
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (const void **)&v23.__r_.__value_.__l.__data_, (uint64_t)a3);
        }
        else if (*(char *)(a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
        }
        if (SHIBYTE(v18) < 0) {
          operator delete(__p[0]);
        }
      }
      if (SHIBYTE(v20) < 0) {
        operator delete(v19[0]);
      }
    }
    else if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  else if (v6 < 0)
  {
    int v15 = *(const std::string::value_type **)a2;
    std::string::__init_copy_ctor_external(a3, v15, v7);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
}

void sub_1B1ED5964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v33 - 33) < 0) {
    operator delete(*(void **)(v33 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::set<std::string>>::__append(uint64_t *a1, unint64_t a2, const void ***a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = (uint64_t *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      int v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        uint64_t result = std::set<std::string>::set[abi:ne180100](v9, a3);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    std::string v24 = result;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    long long v17 = &v14[24 * v10];
    v21[0] = v14;
    v21[1] = v17;
    uint64_t v22 = v17;
    std::string v23 = &v14[24 * v13];
    uint64_t v18 = 3 * a2;
    char v19 = &v17[24 * a2];
    uint64_t v20 = 8 * v18;
    do
    {
      std::set<std::string>::set[abi:ne180100]((uint64_t *)v17, a3);
      v17 += 24;
      v20 -= 24;
    }
    while (v20);
    uint64_t v22 = v19;
    std::vector<std::set<std::string>>::__swap_out_circular_buffer(a1, v21);
    return (uint64_t *)std::__split_buffer<std::set<std::string>>::~__split_buffer(v21);
  }
  return result;
}

void sub_1B1ED5B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::set<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<std::string>>::__emplace_back_slow_path<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *a1, const void ***a2, const void ****a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  char v19 = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  int v15 = v12;
  uint64_t v16 = (uint64_t *)&v12[24 * v5];
  long long v17 = v16;
  uint64_t v18 = &v12[24 * v11];
  std::set<std::string>::set[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v16, *a2, *a3);
  long long v17 = v16 + 3;
  std::vector<std::set<std::string>>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::set<std::string>>::~__split_buffer(&v15);
  return v13;
}

void sub_1B1ED5C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void kaldi::quasar::DynamicClassTagDict::DynamicClassTagDict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(void *)(a1 + 40) = 0;
  long long v44 = (void *)(a1 + 40);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::unordered_set<int>::unordered_set(a1 + 64, a4);
  *(void *)(a1 + 104) = 0;
  memset(v45, 0, sizeof(v45));
  unint64_t v6 = *(void *)(a1 + 56);
  uint64_t v43 = a1 + 56;
  unint64_t v7 = *(void *)(a1 + 48);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v44) >> 2);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v44) >> 2);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(v43, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[12 * v9];
    int v15 = &v13[12 * v12];
    *(void *)uint64_t v14 = 0;
    *((_DWORD *)v14 + 2) = 0;
    uint64_t v8 = v14 + 12;
    long long v17 = *(_DWORD **)(a1 + 40);
    uint64_t v16 = *(_DWORD **)(a1 + 48);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *(void *)(v16 - 3);
        v16 -= 3;
        int v19 = v16[2];
        *(void *)(v14 - 12) = v18;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v19;
      }
      while (v16 != v17);
      uint64_t v16 = (_DWORD *)*v44;
    }
    *(void *)(a1 + 40) = v14;
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(void *)unint64_t v7 = 0;
    *(_DWORD *)(v7 + 8) = 0;
    uint64_t v8 = (char *)(v7 + 12);
  }
  *(void *)(a1 + 48) = v8;
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v21 = *(uint64_t *)((char *)i + 20);
    *(_DWORD *)uint64_t v45 = *((_DWORD *)i + 4);
    *(void *)&v45[4] = v21;
    uint64_t v22 = *(void *)v45;
    unint64_t v23 = HIDWORD(v21);
    unint64_t v25 = *(void *)(a1 + 48);
    unint64_t v24 = *(void *)(a1 + 56);
    if (v25 >= v24)
    {
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *v44) >> 2);
      unint64_t v28 = v27 + 1;
      if (v27 + 1 > 0x1555555555555555) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *v44) >> 2);
      if (2 * v29 > v28) {
        unint64_t v28 = 2 * v29;
      }
      if (v29 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v30 = 0x1555555555555555;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30) {
        unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(v43, v30);
      }
      else {
        unint64_t v31 = 0;
      }
      uint64_t v32 = &v31[12 * v27];
      *(void *)uint64_t v32 = v22;
      *((_DWORD *)v32 + 2) = v23;
      long long v34 = *(_DWORD **)(a1 + 40);
      uint64_t v33 = *(_DWORD **)(a1 + 48);
      unint64_t v35 = v32;
      if (v33 != v34)
      {
        do
        {
          uint64_t v36 = *(void *)(v33 - 3);
          v33 -= 3;
          int v37 = v33[2];
          *(void *)(v35 - 12) = v36;
          v35 -= 12;
          *((_DWORD *)v35 + 2) = v37;
        }
        while (v33 != v34);
        uint64_t v33 = (_DWORD *)*v44;
      }
      uint64_t v26 = v32 + 12;
      *(void *)(a1 + 40) = v35;
      *(void *)(a1 + 48) = v32 + 12;
      *(void *)(a1 + 56) = &v31[12 * v30];
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *(void *)unint64_t v25 = *(void *)v45;
      *(_DWORD *)(v25 + 8) = v23;
      uint64_t v26 = (char *)(v25 + 12);
    }
    *(void *)(a1 + 48) = v26;
    uint64_t v38 = *(void *)(a1 + 40);
    *(void *)uint64_t v45 = i + 2;
    std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, (int *)i + 4, (uint64_t)&std::piecewise_construct, (_DWORD **)v45)[3] = -1 - 0x5555555555555555 * ((uint64_t)&v26[-v38] >> 2);
    uint64_t v40 = *(void *)(a1 + 40);
    uint64_t v39 = *(void *)(a1 + 48);
    *(void *)uint64_t v45 = (char *)i + 20;
    std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, (int *)i + 5, (uint64_t)&std::piecewise_construct, (_DWORD **)v45)[3] = -1 - 0x5555555555555555 * ((v39 - v40) >> 2);
    uint64_t v42 = *(void *)(a1 + 40);
    uint64_t v41 = *(void *)(a1 + 48);
    *(void *)uint64_t v45 = i + 3;
    std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, (int *)i + 6, (uint64_t)&std::piecewise_construct, (_DWORD **)v45)[3] = -1 - 0x5555555555555555 * ((v41 - v42) >> 2);
  }
  operator new[]();
}

void sub_1B1ED6090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v14 = *(void *)(v12 + 104);
  *(void *)(v12 + 104) = 0;
  if (v14) {
    MEMORY[0x1B3EA8630](v14, 0x1000C8052888210);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a9);
  int v15 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 48) = v15;
    operator delete(v15);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v12);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  unint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *unint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::weak_ptr<quasar::Decoder>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::weak_ptr<quasar::Decoder>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  unint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *unint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

__n128 std::__optional_storage_base<std::shared_ptr<kaldi::WordHypLattice>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::shared_ptr<kaldi::WordHypLattice>,false>>(__n128 *a1, __n128 *a2)
{
  if (a1[1].n128_u8[0] == a2[1].n128_u8[0])
  {
    if (a1[1].n128_u8[0])
    {
      __n128 result = *a2;
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      uint64_t v4 = (std::__shared_weak_count *)a1->n128_u64[1];
      *a1 = result;
      if (v4)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
    }
  }
  else if (a1[1].n128_u8[0])
  {
    unint64_t v5 = (std::__shared_weak_count *)a1->n128_u64[1];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    a1[1].n128_u8[0] = 0;
  }
  else
  {
    __n128 result = *a2;
    *a1 = *a2;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a1[1].n128_u8[0] = 1;
  }
  return result;
}

void std::vector<std::set<std::string>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char **)*a1;
  if (*a1)
  {
    uint64_t v3 = (char **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        unint64_t v5 = v3 - 3;
        std::__tree<std::string>::destroy((uint64_t)(v3 - 3), *(v3 - 2));
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<quasar::LmeInfo>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<quasar::LmeInfo>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::vector<kaldi::quasar::WordConf>>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        unint64_t v5 = v3;
        std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__shared_ptr_emplace<quasar::UttInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::UttInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::UttInfo>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::vector<std::shared_ptr<quasar::Decoder>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::Decoder>>,std::reverse_iterator<std::shared_ptr<quasar::Decoder>*>,std::reverse_iterator<std::shared_ptr<quasar::Decoder>*>,std::reverse_iterator<std::shared_ptr<quasar::Decoder>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::Decoder>>,std::reverse_iterator<std::shared_ptr<quasar::Decoder>*>,std::reverse_iterator<std::shared_ptr<quasar::Decoder>*>,std::reverse_iterator<std::shared_ptr<quasar::Decoder>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::Decoder>>,std::reverse_iterator<std::shared_ptr<quasar::Decoder>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::Decoder>>,std::reverse_iterator<std::shared_ptr<quasar::Decoder>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5BD58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5BD58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load(*(unsigned __int8 **)(a1 + 8));
  return v1 & 1;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,int,std::atomic<BOOL> const&)::$_0>,BOOL ()(void)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::shared_ptr[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1ED67D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::shared_ptr[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::allocator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::allocator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::allocator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<quasar::StateAccessRecordingFst>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1ED68E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<quasar::StateAccessRecordingFst>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61478;
  quasar::StateAccessRecordingFst::StateAccessRecordingFst(a1 + 3);
  return a1;
}

void sub_1B1ED6940(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5BC50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5BC50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (**(unsigned char **)(a1 + 16))
  {
    quasar::ModelLoader::requestEmbeddedMlock(*(std::string **)(v6 + 368), a2, v16, 1.0);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v16[0] + 1);
    uint64_t v8 = *(void *)(v6 + 368);
    long long v17 = v16[0];
    if (*((void *)&v16[0] + 1))
    {
      char v9 = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16[0] + 1) + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      char v9 = 1;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v6 + 368);
    char v9 = 1;
    long long v17 = 0uLL;
  }
  quasar::ModelLoader::readFstNetwork(v8, (uint64_t)a2, (unsigned __int8 **)&v17, a3);
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*a3 + 64))(*a3, 0x10000000, 0) != 0x10000000)
  {
    memset(v16, 0, sizeof(v16));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"bigGFst: input label is not sorted!", 35);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v16);
  }
  if (*(unsigned char *)(v6 + 2300) || *(unsigned char *)(v6 + 440))
  {
    std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(v16);
    long long v10 = v16[0];
    v16[0] = 0uLL;
    unint64_t v11 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v10;
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      if (*((void *)&v16[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16[0] + 1));
      }
    }
  }
  *(void *)&v16[0] = a2;
  unint64_t v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 1048), (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)v16);
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = (std::__shared_weak_count *)v12[8];
  v12[7] = v14;
  v12[8] = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  **(unsigned char **)(a1 + 16) = 0;
  if ((v9 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1B1ED6C80(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5BCA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5BCA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, kaldi::InferenceNetItf **a3@<X8>)
{
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<quasar::LRStreamingConfidence,std::allocator<quasar::LRStreamingConfidence>,std::string &,std::string &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xC8uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::LRStreamingConfidence>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::allocator<quasar::LRStreamingConfidence>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1ED6E58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LRStreamingConfidence>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::allocator<quasar::LRStreamingConfidence>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60DE8;
  quasar::LRStreamingConfidence::LRStreamingConfidence(a1 + 3);
  return a1;
}

void sub_1B1ED6EB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LRStreamingConfidence>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LRStreamingConfidence>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::LRStreamingConfidence>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>@<X0>(long long *a1@<X1>, uint64_t a2@<X2>, std::string::size_type *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = (std::string *)operator new(0x60uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_1B1ED6FC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(std::string *a1, long long *a2, uint64_t a3, std::string::size_type *a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5FE28;
  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((int)&v6, a1 + 1, a2, a3, a4);
  return a1;
}

void sub_1B1ED703C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(int a1, std::string *this, long long *a3, uint64_t a4, std::string::size_type *a5)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v6 = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  char v7 = 1;
  quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RegionalLmPlug(this, a3, (long long *)__p, a5);
  if (v7)
  {
    if (SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B1ED70C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  uint64_t v2 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void *std::allocate_shared[abi:ne180100]<quasar::EagerDecision,std::allocator<quasar::EagerDecision>,quasar::EagerConfig &,BOOL,void>@<X0>(const quasar::EagerConfig *a1@<X1>, BOOL *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x278uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::EagerDecision>::__shared_ptr_emplace[abi:ne180100]<quasar::EagerConfig &,BOOL,std::allocator<quasar::EagerDecision>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1ED71F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::EagerDecision>::__shared_ptr_emplace[abi:ne180100]<quasar::EagerConfig &,BOOL,std::allocator<quasar::EagerDecision>,0>(void *a1, const quasar::EagerConfig *a2, BOOL *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FAE0;
  quasar::EagerDecision::EagerDecision((quasar::EagerDecision *)(a1 + 3), a2, *a3);
  return a1;
}

void sub_1B1ED7254(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::EagerDecision>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FAE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::EagerDecision>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FAE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::EagerDecision>::__on_zero_shared(uint64_t a1)
{
}

void quasar::EagerDecision::~EagerDecision(quasar::EagerDecision *this)
{
  std::deque<int>::~deque[abi:ne180100]((void *)this + 69);
  uint64_t v2 = (void *)*((void *)this + 62);
  if (v2)
  {
    *((void *)this + 63) = v2;
    operator delete(v2);
  }
  char v7 = (void **)((char *)this + 472);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v3 = (void *)*((void *)this + 53);
  if (v3)
  {
    *((void *)this + 54) = v3;
    operator delete(v3);
  }
  char v7 = (void **)((char *)this + 400);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v4 = (void *)*((void *)this + 43);
  if (v4)
  {
    *((void *)this + 44) = v4;
    operator delete(v4);
  }
  char v7 = (void **)((char *)this + 320);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v5 = MEMORY[0x1E4FBA418];
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *((void *)this + 5) = *MEMORY[0x1E4FBA418];
  *(void *)((char *)this + *(void *)(v6 - 24) + 40) = *(void *)(v5 + 24);
  *((void *)this + 6) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 152);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar23LatticeGenerationOutputENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x148uLL);
  __n128 result = _ZNSt3__120__shared_ptr_emplaceIN6quasar23LatticeGenerationOutputENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1ED7498(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar23LatticeGenerationOutputENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A612B8;
  std::allocator<quasar::LatticeGenerationOutput>::construct[abi:ne180100]<quasar::LatticeGenerationOutput>((uint64_t)&v3, (uint64_t)(a1 + 3));
  return a1;
}

void sub_1B1ED7504(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LatticeGenerationOutput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A612B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LatticeGenerationOutput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A612B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::LatticeGenerationOutput>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::LatticeGenerationOutput>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

uint64_t std::allocator<quasar::LatticeGenerationOutput>::construct[abi:ne180100]<quasar::LatticeGenerationOutput>(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 296) = 0;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(void *)a2 = 0x2FFFFFFFFLL;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  return std::ostringstream::basic_ostringstream[abi:ne180100](a2 + 40);
}

void sub_1B1ED7638(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<quasar::LatticeGenerationOutput>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MEMORY[0x1E4FBA418];
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  *(void *)(a2 + 40) = *MEMORY[0x1E4FBA418];
  *(void *)(a2 + 40 + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *(void *)(a2 + 48) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a2 + 135) < 0) {
    operator delete(*(void **)(a2 + 112));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](a2 + 152);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 32);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void std::allocate_shared[abi:ne180100]<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = operator new(0xA8uLL);
  std::__shared_ptr_emplace<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v3, a2);
}

void sub_1B1ED77DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E378;
  std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&>((uint64_t)&v2, (uint64_t)(a1 + 3), a2);
}

void sub_1B1ED784C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

void std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(__p, 0, sizeof(__p));
  fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::BackoffDeterministicOnDemandFst(a2, a3, (uint64_t)__p);
}

void sub_1B1ED794C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x88uLL);
  __n128 result = std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1ED7A5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,0>(void *a1, uint64_t *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E420;
  fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InterpolateDeterministicOnDemandFst((uint64_t)(a1 + 3), a2, *a3, 1);
  return a1;
}

void sub_1B1ED7AC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::vector<int> &,void>@<X0>(uint64_t (****a1)(void)@<X1>, unsigned int **a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x30uLL);
  __n128 result = std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__shared_ptr_emplace[abi:ne180100]<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::vector<int> &,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1ED7B24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__shared_ptr_emplace[abi:ne180100]<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::vector<int> &,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,0>(void *a1, uint64_t (****a2)(void), unsigned int **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E490;
  fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::LeftContextDeterministicOnDemandFst((uint64_t)(a1 + 3), *a2, a3);
  return a1;
}

void sub_1B1ED7B84(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E490;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

uint64_t fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::LeftContextDeterministicOnDemandFst(uint64_t a1, uint64_t (***a2)(void), unsigned int **a3)
{
  *(void *)a1 = &unk_1F0A3F9A8;
  *(void *)(a1 + 8) = a2;
  uint64_t v5 = (**a2)(a2);
  *(_DWORD *)(a1 + 16) = v5;
  uint64_t v6 = *a3;
  char v7 = a3[1];
  if (*a3 != v7)
  {
    uint64_t v8 = v5;
    do
    {
      if ((*(uint64_t (**)(void, uint64_t, void, char *))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v8, *v6, v11))
      {
        uint64_t v8 = v12;
      }
      else
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Invalid word symbol, clipping left context", 42);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
        }
        uint64_t v8 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
      }
      *(_DWORD *)(a1 + 16) = v8;
      ++v6;
    }
    while (v6 != v7);
  }
  return a1;
}

void sub_1B1ED7D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::~LeftContextDeterministicOnDemandFst()
{
}

void *std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x90uLL);
  __n128 result = std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1ED7DFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E3B0;
  std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B1ED7E70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E3B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E3B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

void std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  long long v15 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v12 = *a4;
  uint64_t v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v11 = _D0;
  fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeDeterministicOnDemandFst(a2, &v14, &v12, &v11);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1B1ED7FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeDeterministicOnDemandFst(uint64_t a1, void *a2, void *a3, void *a4)
{
  *(void *)a1 = &unk_1F0A3F818;
  *(void *)(a1 + 8) = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 16) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = *a3;
  uint64_t v6 = a3[1];
  *(void *)(a1 + 32) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0;
  char v7 = (char **)(a1 + 80);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = *a4;
  if ((***(unsigned int (****)(void))(a1 + 8))() == -1
    || (***(unsigned int (****)(void))(a1 + 24))(*(void *)(a1 + 24)) == -1)
  {
    *(void *)(a1 + 104) = 0xFFFFFFFF00000000;
  }
  else
  {
    *(_DWORD *)(a1 + 108) = 0;
    unsigned int v8 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
    unint64_t v24 = __PAIR64__((***(uint64_t (****)(void))(a1 + 24))(*(void *)(a1 + 24)), v8);
    int v9 = *(_DWORD *)(a1 + 108);
    unint64_t v25 = &v24;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::pair<int,int>,int>,std::__unordered_map_hasher<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,true>,std::__unordered_map_equal<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,std::equal_to<std::pair<int,int>>,kaldi::PairHasher<int>,true>,std::allocator<std::__hash_value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(a1 + 40, (int *)&v24, (uint64_t)&std::piecewise_construct, &v25)+ 6) = v9;
    unint64_t v10 = *(void *)(a1 + 96);
    uint64_t v11 = *(unint64_t **)(a1 + 88);
    if ((unint64_t)v11 >= v10)
    {
      uint64_t v13 = ((char *)v11 - *v7) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v10 - (void)*v7;
      uint64_t v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
        uint64_t v15 = v13 + 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16) {
        long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 96, v16);
      }
      else {
        long long v17 = 0;
      }
      uint64_t v18 = (unint64_t *)&v17[8 * v13];
      int v19 = &v17[8 * v16];
      unint64_t *v18 = v24;
      uint64_t v12 = v18 + 1;
      unint64_t v21 = *(char **)(a1 + 80);
      uint64_t v20 = *(char **)(a1 + 88);
      if (v20 != v21)
      {
        do
        {
          unint64_t v22 = *((void *)v20 - 1);
          v20 -= 8;
          *--uint64_t v18 = v22;
        }
        while (v20 != v21);
        uint64_t v20 = *v7;
      }
      *(void *)(a1 + 80) = v18;
      *(void *)(a1 + 88) = v12;
      *(void *)(a1 + 96) = v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *uint64_t v11 = v24;
      uint64_t v12 = v11 + 1;
    }
    *(void *)(a1 + 88) = v12;
    *(_DWORD *)(a1 + 104) = 1;
  }
  return a1;
}

void sub_1B1ED8254(_Unwind_Exception *a1)
{
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[11] = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v3);
  uint64_t v6 = (std::__shared_weak_count *)v1[4];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  char v7 = (std::__shared_weak_count *)v1[2];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

float fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = (unsigned int *)(*(void *)(a1 + 80) + 8 * a2);
  float v6 = (*(float (**)(void, void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8), *v5);
  (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 24) + 8))(*(void *)(a1 + 24), v5[1], a3);
  if (v6 == INFINITY || v7 == INFINITY) {
    return INFINITY;
  }
  float v10 = v6 * *(float *)(a1 + 112);
  float v8 = NAN;
  if (v10 != -INFINITY)
  {
    float v11 = v7 * *(float *)(a1 + 116);
    if (v11 != -INFINITY)
    {
      float v8 = INFINITY;
      BOOL v12 = v11 == INFINITY || v10 == INFINITY;
      float v13 = v10 + v11;
      if (!v12) {
        return v13;
      }
    }
  }
  return v8;
}

uint64_t fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetArc(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v5 = a3;
  float v7 = (char **)(a1 + 80);
  unint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8 * a2);
  if (!(*(unsigned int (**)(void, unint64_t, uint64_t, char *))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v8, a3, v52))return 0; {
  if (v53)
  }
  {
    uint64_t v9 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), HIDWORD(v8));
    if (v9)
    {
      unint64_t v47 = v55 | ((unint64_t)v51 << 32);
      int v48 = *(_DWORD *)(a1 + 104);
      float v10 = std::__hash_table<std::__hash_value_type<std::pair<int,int>,int>,std::__unordered_map_hasher<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,true>,std::__unordered_map_equal<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,std::equal_to<std::pair<int,int>>,kaldi::PairHasher<int>,true>,std::allocator<std::__hash_value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,int> const&>(a1 + 40, (int *)&v47, (uint64_t)&v47);
      int v12 = HIDWORD(v49);
      *(_DWORD *)a4 = v5;
      *(_DWORD *)(a4 + 4) = v12;
      *(_DWORD *)(a4 + 12) = *((_DWORD *)v10 + 6);
      float v13 = v54 * *(float *)(a1 + 112);
      float v14 = NAN;
      if (v13 != -INFINITY)
      {
        float v15 = v50 * *(float *)(a1 + 116);
        if (v15 != -INFINITY)
        {
          float v14 = INFINITY;
          BOOL v16 = v15 == INFINITY || v13 == INFINITY;
          float v17 = v13 + v15;
          if (!v16) {
            float v14 = v17;
          }
        }
      }
      *(float *)(a4 + 8) = v14;
      if (v11)
      {
        unint64_t v18 = *(void *)(a1 + 96);
        ++*(_DWORD *)(a1 + 104);
        int v19 = *(unint64_t **)(a1 + 88);
        if ((unint64_t)v19 < v18)
        {
          unint64_t *v19 = v47;
          uint64_t v20 = v19 + 1;
LABEL_48:
          *(void *)(a1 + 88) = v20;
          return v9;
        }
        uint64_t v31 = ((char *)v19 - *v7) >> 3;
        if (!((unint64_t)(v31 + 1) >> 61))
        {
          uint64_t v32 = v18 - (void)*v7;
          uint64_t v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1)) {
            uint64_t v33 = v31 + 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 96, v34);
          }
          else {
            unint64_t v35 = 0;
          }
          uint64_t v41 = (unint64_t *)&v35[8 * v31];
          uint64_t v42 = &v35[8 * v34];
          *uint64_t v41 = v47;
          uint64_t v20 = v41 + 1;
          long long v44 = *(char **)(a1 + 80);
          uint64_t v43 = *(char **)(a1 + 88);
          if (v43 != v44)
          {
            do
            {
              unint64_t v45 = *((void *)v43 - 1);
              v43 -= 8;
              *--uint64_t v41 = v45;
            }
            while (v43 != v44);
            uint64_t v43 = *v7;
          }
          *(void *)(a1 + 80) = v41;
          *(void *)(a1 + 88) = v20;
          *(void *)(a1 + 96) = v42;
          if (v43) {
            operator delete(v43);
          }
          goto LABEL_48;
        }
LABEL_50:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
    }
  }
  else
  {
    unint64_t v49 = v8 & 0xFFFFFFFF00000000 | v55;
    float v50 = *(float *)(a1 + 104);
    unint64_t v21 = std::__hash_table<std::__hash_value_type<std::pair<int,int>,int>,std::__unordered_map_hasher<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,true>,std::__unordered_map_equal<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,std::equal_to<std::pair<int,int>>,kaldi::PairHasher<int>,true>,std::allocator<std::__hash_value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,int> const&>(a1 + 40, (int *)&v49, (uint64_t)&v49);
    *(_DWORD *)a4 = v5;
    *(_DWORD *)(a4 + 4) = 0;
    *(_DWORD *)(a4 + 12) = *((_DWORD *)v21 + 6);
    *(float *)(a4 + 8) = v54 * *(float *)(a1 + 112);
    if (v22)
    {
      unint64_t v23 = *(void *)(a1 + 96);
      ++*(_DWORD *)(a1 + 104);
      unint64_t v24 = *(unint64_t **)(a1 + 88);
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = ((char *)v24 - *v7) >> 3;
        if ((unint64_t)(v26 + 1) >> 61) {
          goto LABEL_50;
        }
        uint64_t v27 = v23 - (void)*v7;
        uint64_t v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
          uint64_t v28 = v26 + 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 96, v29);
        }
        else {
          unint64_t v30 = 0;
        }
        uint64_t v36 = (unint64_t *)&v30[8 * v26];
        int v37 = &v30[8 * v29];
        *uint64_t v36 = v49;
        unint64_t v25 = v36 + 1;
        uint64_t v39 = *(char **)(a1 + 80);
        uint64_t v38 = *(char **)(a1 + 88);
        if (v38 != v39)
        {
          do
          {
            unint64_t v40 = *((void *)v38 - 1);
            v38 -= 8;
            *--uint64_t v36 = v40;
          }
          while (v38 != v39);
          uint64_t v38 = *v7;
        }
        *(void *)(a1 + 80) = v36;
        *(void *)(a1 + 88) = v25;
        *(void *)(a1 + 96) = v37;
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        *unint64_t v24 = v49;
        unint64_t v25 = v24 + 1;
      }
      *(void *)(a1 + 88) = v25;
    }
    return 1;
  }
  return v9;
}

void *fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ComposeDeterministicOnDemandFst(void *a1)
{
  *a1 = &unk_1F0A3F818;
  char v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 5));
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ComposeDeterministicOnDemandFst(void *a1)
{
  *a1 = &unk_1F0A3F818;
  char v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 5));
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FinalEos(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 56))(*(void *)(a1 + 24), *(unsigned int *)(*(void *)(a1 + 80) + 8 * a2 + 4));
}

void *std::__hash_table<std::__hash_value_type<std::pair<int,int>,int>,std::__unordered_map_hasher<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,true>,std::__unordered_map_equal<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,std::equal_to<std::pair<int,int>>,kaldi::PairHasher<int>,true>,std::allocator<std::__hash_value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  int v8 = a2[1];
  unint64_t v9 = v7 + 7853 * v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v7 + 7853 * v8;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    int v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      float v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v7 && *((_DWORD *)v13 + 5) == v8) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          float v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  float v13 = operator new(0x20uLL);
  *float v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *float v13 = *v23;
LABEL_42:
    void *v23 = v13;
    goto LABEL_43;
  }
  *float v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    unint64_t v24 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1B1ED8A84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::pair<int,int>,int>,std::__unordered_map_hasher<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,true>,std::__unordered_map_equal<std::pair<int,int>,std::__hash_value_type<std::pair<int,int>,int>,std::equal_to<std::pair<int,int>>,kaldi::PairHasher<int>,true>,std::allocator<std::__hash_value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,int> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  int v7 = a2[1];
  unint64_t v8 = v6 + 7853 * v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v6 + 7853 * v7;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      int v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v6 && *((_DWORD *)v12 + 5) == v7) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          int v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  int v12 = operator new(0x20uLL);
  *int v12 = 0;
  v12[1] = v8;
  v12[2] = *(void *)a3;
  *((_DWORD *)v12 + 6) = *(_DWORD *)(a3 + 8);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *int v12 = *v22;
LABEL_42:
    void *v22 = v12;
    goto LABEL_43;
  }
  *int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v23 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1B1ED8CB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,unsigned long const&,void>@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  __n128 result = std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,unsigned long const&,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1ED8D18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,unsigned long const&,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(void *a1, uint64_t *a2, unint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E340;
  std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,unsigned long const&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B1ED8D8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E340;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

void std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,unsigned long const&>(uint64_t a1, void *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = *a3;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(a2, &v5, *a4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B1ED8E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::DecodableInterface *,kaldi::SilencePhoneSet &,kaldi::TransitionModel const&,kaldi::quasar::DynamicClassTagDict *,void>@<X0>(uint64_t a1@<X1>, long long *a2@<X2>, void (****a3)(void)@<X3>, uint64_t *a4@<X4>, _DWORD *a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X7>, void *a8@<X8>)
{
  float v16 = operator new(0x3C0uLL);
  __n128 result = std::__shared_ptr_emplace<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::DecodableInterface *,kaldi::SilencePhoneSet &,kaldi::TransitionModel const&,kaldi::quasar::DynamicClassTagDict *,std::allocator<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B1ED8F3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::DecodableInterface *,kaldi::SilencePhoneSet &,kaldi::TransitionModel const&,kaldi::quasar::DynamicClassTagDict *,std::allocator<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(void *a1, uint64_t a2, long long *a3, void (****a4)(void), uint64_t *a5, _DWORD *a6, uint64_t a7, uint64_t *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F450;
  kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::OnlineLatticeBiglmFasterDecoder((uint64_t)(a1 + 3), a2, a3, *a4, *a5, a6, a7, *a8);
  return a1;
}

void sub_1B1ED8FA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::OnlineLatticeBiglmFasterDecoder(uint64_t a1, uint64_t a2, long long *a3, void (***a4)(void), uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LatticeBiglmFasterTraceBackDecoder(a1, a2, a3, a4, a8);
  *(void *)uint64_t v13 = &unk_1F0A51560;
  long long v14 = a3[1];
  *(_OWORD *)(v13 + 536) = *a3;
  *(_OWORD *)(v13 + 552) = v14;
  long long v15 = a3[2];
  long long v16 = a3[3];
  long long v17 = a3[5];
  *(_OWORD *)(v13 + 600) = a3[4];
  *(_OWORD *)(v13 + 616) = v17;
  *(_OWORD *)(v13 + 568) = v15;
  *(_OWORD *)(v13 + 584) = v16;
  long long v18 = a3[6];
  long long v19 = a3[7];
  long long v20 = a3[9];
  *(_OWORD *)(v13 + 664) = a3[8];
  *(_OWORD *)(v13 + 680) = v20;
  *(_OWORD *)(v13 + 632) = v18;
  *(_OWORD *)(v13 + 648) = v19;
  *(void *)(v13 + 696) = a5;
  *(_DWORD *)(v13 + 704) = *a6;
  kaldi::ConstIntegerSet<int>::ConstIntegerSet(v13 + 712, (uint64_t)(a6 + 2));
  *(void *)(a1 + 776) = a7;
  *(_DWORD *)(a1 + 784) = *(_DWORD *)a3;
  *(void *)(a1 + 792) = a1 + 176;
  *(_DWORD *)(a1 + 800) = 1;
  *(unsigned char *)(a1 + 840) = 0;
  *(unsigned char *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 804) = 0u;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 848), v21);
  *(void *)(a1 + 880) = 0;
  return a1;
}

void sub_1B1ED9140(_Unwind_Exception *a1)
{
  kaldi::SilencePhoneSet::~SilencePhoneSet(v2);
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LatticeBiglmFasterTraceBackDecoder(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LatticeBiglmFasterTraceBackDecoder(uint64_t a1, uint64_t a2, long long *a3, void (***a4)(void), uint64_t a5)
{
  *(void *)a1 = &unk_1F0A51658;
  *(void *)(a1 + 8) = 0;
  uint64_t v9 = a1 + 8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1B2565910;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = a2;
  *(void *)(a1 + 168) = a4;
  long long v10 = *a3;
  long long v11 = a3[2];
  *(_OWORD *)(a1 + 192) = a3[1];
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 176) = v10;
  long long v12 = a3[3];
  long long v13 = a3[4];
  long long v14 = a3[5];
  *(_DWORD *)(a1 + 272) = *((_DWORD *)a3 + 24);
  *(_OWORD *)(a1 + 240) = v13;
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 224) = v12;
  *(void *)(a1 + 280) = a5;
  *(_DWORD *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 295) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x10000000, 0) == 0x10000000;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = a1 + 312;
  kaldi::quasar::TokenHeap::TokenHeap((kaldi::quasar::TokenHeap *)(a1 + 328), *((_DWORD *)a3 + 17), *((_DWORD *)a3 + 18));
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 520) = 1065353216;
  *(void *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  (**a4)(a4);
  uint64_t v15 = *(void *)(a1 + 280);
  if (v15 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v15 + 48) - *(void *)(v15 + 40)) >> 2) >= 0x40)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"dynamic_class_tag_dict_->getNumOfClasses() <= TokenHeap::MAX_CLASS_ID", 69);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(v9, 0x3E8uLL);
  return a1;
}

uint64_t kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LatticeBiglmFasterTraceBackDecoder(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A51658;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != -1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    do
    {
      unint64_t v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      uint64_t v2 = *v4;
    }
    while (v2 != -1);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = -1;
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    do
    {
      uint64_t v7 = v5;
      uint64_t v5 = *(void *)(v5 + 16);
      *(void *)(v7 + 16) = v6;
      uint64_t v6 = v7;
    }
    while (v5);
    *(void *)(a1 + 56) = v7;
  }
  uint64_t v8 = *(void *)(a1 + 528);
  *(void *)(a1 + 528) = 0;
  if (v8) {
    std::default_delete<kaldi::quasar::LazyBuffer<float>>::operator()[abi:ne180100](a1 + 528, v8);
  }
  std::__hash_table<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__hash_table(a1 + 488);
  uint64_t v9 = *(void **)(a1 + 456);
  if (v9)
  {
    free(v9);
    *(void *)(a1 + 456) = 0;
    *(void *)(a1 + 464) = 0;
  }
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  long long v10 = *(void **)(a1 + 432);
  if (v10)
  {
    *(void *)(a1 + 440) = v10;
    operator delete(v10);
  }
  long long v11 = *(void **)(a1 + 400);
  if (v11)
  {
    *(void *)(a1 + 408) = v11;
    operator delete(v11);
  }
  long long v12 = *(void **)(a1 + 376);
  if (v12)
  {
    *(void *)(a1 + 384) = v12;
    operator delete(v12);
  }
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear(a1 + 344);
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::Clear(a1 + 328);
  std::__tree<int>::destroy(a1 + 304, *(void **)(a1 + 312));
  long long v13 = *(void **)(a1 + 136);
  if (v13)
  {
    *(void *)(a1 + 144) = v13;
    operator delete(v13);
  }
  long long v14 = *(void **)(a1 + 112);
  if (v14)
  {
    *(void *)(a1 + 120) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(a1 + 88);
  if (v15)
  {
    *(void *)(a1 + 96) = v15;
    operator delete(v15);
  }
  kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::~HashList((void *)(a1 + 8));
  return a1;
}

void kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~OnlineLatticeBiglmFasterDecoder(void *a1)
{
  kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~OnlineLatticeBiglmFasterDecoder(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetDecodableOffset(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 368) = a2
                        - (*(uint64_t (**)(void))(**(void **)(a1 + 696) + 40))(*(void *)(a1 + 696));
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 696) + 40))(*(void *)(a1 + 696));
  *(_DWORD *)(a1 + 804) = result;
  return result;
}

void kaldi::quasar::TokenHeap::~TokenHeap(kaldi::quasar::TokenHeap *this)
{
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LatticeBiglmFasterTraceBackDecoder(uint64_t a1)
{
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LatticeBiglmFasterTraceBackDecoder(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetDecodableOffset(uint64_t result, int a2)
{
  *(_DWORD *)(result + 368) = a2;
  return result;
}

kaldi::quasar::TokenHeap *kaldi::quasar::TokenHeap::TokenHeap(kaldi::quasar::TokenHeap *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::LazyBuffer((uint64_t)this, a2, 0);
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::LazyBuffer(v6 + 16, a3, 0);
  *((_DWORD *)this + 8) = a2;
  *((_DWORD *)this + 9) = a3;
  if (a2 >> 26)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"max_total_tokens <= MAX_TOK_ID", 30);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return this;
}

void sub_1B1ED97A4()
{
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear(v0);
  JUMPOUT(0x1B1ED97B0);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::LazyBuffer(uint64_t a1, unsigned int a2, int a3)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 12) = 1;
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "count > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (a3) {
    *(_DWORD *)(a1 + 12) = a2;
  }
  vm_address_t address = 0;
  if (vm_allocate(*MEMORY[0x1E4F14960], &address, 32 * a2, 1711276033))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      uint64_t v5 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": Could not vm_allocate ", 24);
      uint64_t v6 = (void *)std::ostream::operator<<();
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" of ", 4);
      size_t v8 = strlen((const char *)(0x80000001B2580E56 & 0x7FFFFFFFFFFFFFFFLL));
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, 0x80000001B2580E56 & 0x7FFFFFFFFFFFFFFFLL, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    long long v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  *(void *)a1 = address;
  return a1;
}

void sub_1B1ED9934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1B1ED9948(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::LazyBuffer(uint64_t a1, unsigned int a2, int a3)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 12) = 1;
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "count > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (a3) {
    *(_DWORD *)(a1 + 12) = a2;
  }
  vm_address_t address = 0;
  if (vm_allocate(*MEMORY[0x1E4F14960], &address, 24 * a2, 1711276033))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      uint64_t v5 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": Could not vm_allocate ", 24);
      uint64_t v6 = (void *)std::ostream::operator<<();
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" of ", 4);
      size_t v8 = strlen((const char *)(0x80000001B2580E76 & 0x7FFFFFFFFFFFFFFFLL));
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, 0x80000001B2580E76 & 0x7FFFFFFFFFFFFFFFLL, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    long long v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  *(void *)a1 = address;
  return a1;
}

void sub_1B1ED9AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1B1ED9ADC(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear(uint64_t result)
{
  if (*(void *)result)
  {
    uint64_t v1 = (void *)result;
    if (*(_DWORD *)(result + 8))
    {
      uint64_t result = MEMORY[0x1B3EAA6A0](*MEMORY[0x1E4F14960]);
      if (result)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        uint64_t v2 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": Could not vm_deallocate ", 26);
        uint64_t v3 = (void *)std::ostream::operator<<();
        unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bytes of ", 10);
        size_t v5 = strlen((const char *)(0x80000001B2580E76 & 0x7FFFFFFFFFFFFFFFLL));
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, 0x80000001B2580E76 & 0x7FFFFFFFFFFFFFFFLL, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
      void *v1 = 0;
      v1[1] = 0;
    }
  }
  return result;
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::Clear(uint64_t result)
{
  if (*(void *)result)
  {
    uint64_t v1 = (void *)result;
    if (*(_DWORD *)(result + 8))
    {
      uint64_t result = MEMORY[0x1B3EAA6A0](*MEMORY[0x1E4F14960]);
      if (result)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        uint64_t v2 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": Could not vm_deallocate ", 26);
        uint64_t v3 = (void *)std::ostream::operator<<();
        unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bytes of ", 10);
        size_t v5 = strlen((const char *)(0x80000001B2580E56 & 0x7FFFFFFFFFFFFFFFLL));
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, 0x80000001B2580E56 & 0x7FFFFFFFFFFFFFFFLL, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
      void *v1 = 0;
      v1[1] = 0;
    }
  }
  return result;
}

void std::default_delete<kaldi::quasar::LazyBuffer<float>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    kaldi::quasar::LazyBuffer<float>::Clear(a2);
    JUMPOUT(0x1B3EA8670);
  }
}

uint64_t kaldi::quasar::LazyBuffer<float>::Clear(uint64_t result)
{
  if (*(void *)result)
  {
    uint64_t v1 = (void *)result;
    if (*(_DWORD *)(result + 8))
    {
      uint64_t result = MEMORY[0x1B3EAA6A0](*MEMORY[0x1E4F14960]);
      if (result)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        uint64_t v2 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": Could not vm_deallocate ", 26);
        uint64_t v3 = (void *)std::ostream::operator<<();
        unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bytes of ", 10);
        size_t v5 = strlen((const char *)(*(void *)(MEMORY[0x1E4FBA398] + 8) & 0x7FFFFFFFFFFFFFFFLL));
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(MEMORY[0x1E4FBA398] + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
      void *v1 = 0;
      v1[1] = 0;
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[3];
      if (v4) {
        free(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~OnlineLatticeBiglmFasterDecoder(void *a1)
{
  *a1 = &unk_1F0A51560;
  uint64_t v2 = (void *)a1[94];
  if (v2)
  {
    a1[95] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[91];
  if (v3) {
    operator delete(v3);
  }
  return kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~LatticeBiglmFasterTraceBackDecoder((uint64_t)a1);
}

void std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::__append((char **)a1, a2 - v2);
  }
}

uint64_t kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessNonemitting(uint64_t a1, int a2, float a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  float v5 = *(float *)(a1 + 272);
  memset(v75, 0, sizeof(v75));
  int v76 = 1065353216;
  if (v5 != INFINITY) {
    kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindBestWeightForEachLmState((uint64_t *)a1, *(void *)(a1 + 8), v75);
  }
  uint64_t v70 = (void **)(a1 + 112);
  for (uint64_t i = *(uint64_t **)(a1 + 8); i; uint64_t i = (uint64_t *)i[2])
  {
    if (v5 != INFINITY)
    {
      uint64_t v7 = *(void *)(a1 + 328) + 32 * *((unsigned int *)i + 2);
      float v8 = *(float *)(v7 + 12);
      int v74 = *(_DWORD *)(v7 + 28);
      int v77 = &v74;
      if (v8 > (float)(*((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v75, &v74, (uint64_t)&std::piecewise_construct, &v77)+ 5)+ *(float *)(a1 + 272)))continue; {
    }
      }
    uint64_t v9 = *i;
    int v10 = *((_DWORD *)i + 2);
    long long v12 = *(char **)(a1 + 120);
    unint64_t v11 = *(void *)(a1 + 128);
    if ((unint64_t)v12 >= v11)
    {
      long long v14 = (char *)*v70;
      uint64_t v15 = (v12 - (unsigned char *)*v70) >> 4;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 3 > v16) {
        unint64_t v16 = v17 >> 3;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 128, v18);
        long long v14 = *(char **)(a1 + 112);
        long long v12 = *(char **)(a1 + 120);
      }
      else
      {
        long long v19 = 0;
      }
      long long v20 = &v19[16 * v15];
      *(void *)long long v20 = v9;
      *((_DWORD *)v20 + 2) = v10;
      clockid_t v21 = v20;
      if (v12 != v14)
      {
        do
        {
          *((_OWORD *)v21 - 1) = *((_OWORD *)v12 - 1);
          v21 -= 16;
          v12 -= 16;
        }
        while (v12 != v14);
        long long v14 = (char *)*v70;
      }
      long long v13 = v20 + 16;
      *(void *)(a1 + 112) = v21;
      *(void *)(a1 + 120) = v20 + 16;
      *(void *)(a1 + 128) = &v19[16 * v18];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(void *)long long v12 = v9;
      *((_DWORD *)v12 + 2) = v10;
      long long v13 = v12 + 16;
    }
    *(void *)(a1 + 120) = v13;
  }
  uint64_t v23 = *(void *)(a1 + 112);
  uint64_t v22 = *(void *)(a1 + 120);
  if (v23 == v22)
  {
    if (*(unsigned char *)(a1 + 292)) {
      return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v75);
    }
    uint64_t v66 = *(void *)(a1 + 112);
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Error in ProcessNonemitting: no surviving tokens: frame is ", 59);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
      uint64_t v66 = *(void *)(a1 + 112);
      uint64_t v23 = *(void *)(a1 + 120);
    }
    *(unsigned char *)(a1 + 292) = 1;
    uint64_t v22 = v23;
    uint64_t v23 = v66;
  }
  if (v23 != v22)
  {
    long long v67 = (kaldi::quasar::TokenHeap *)(a1 + 328);
    do
    {
      unint64_t v26 = *(void *)(v22 - 16);
      uint64_t v24 = v22 - 16;
      unint64_t v25 = v26;
      uint64_t v27 = *(unsigned int *)(v24 + 8);
      *(void *)(a1 + 120) = v24;
      uint64_t v28 = *(void *)(a1 + 328) + 32 * v27;
      float v29 = *(float *)(v28 + 12);
      if (v29 <= a3)
      {
        int v71 = v27;
        *(_DWORD *)(v28 + 20) = 0;
        unint64_t v30 = (int *)(v28 + 20);
        Arcs = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArcs(a1, v25, 0xFFFFFFFF);
        int v69 = v25;
        uint64_t v73 = HIDWORD(v25);
        uint64_t v32 = *((void *)Arcs + 2);
        uint64_t v33 = *((void *)Arcs + 3);
        if (v32 == v33)
        {
          char v68 = 0;
        }
        else
        {
          char v68 = 0;
          do
          {
            if (*(_DWORD *)v32)
            {
              if (*(unsigned char *)(a1 + 295)) {
                break;
              }
            }
            else
            {
              uint64_t v34 = *(unsigned int *)(v32 + 4);
              float v35 = *(float *)(v32 + 8);
              uint64_t v36 = *(int *)(v32 + 12);
              float v37 = v29 + v35;
              if ((int)v34 >= *(_DWORD *)(a1 + 236) && (int)v34 <= *(_DWORD *)(a1 + 240)
                || (float)(v37 - *(float *)(a1 + 232)) <= a3)
              {
                uint64_t v38 = *(void *)(a1 + 280);
                if (!v38
                  || (*(_DWORD *)(v28 + 8) & 0x3FLL) == 0
                  || (LODWORD(v77) = *(_DWORD *)(v32 + 4),
                      !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(v38 + 64), (int *)&v77)))
                {
                  if (v34)
                  {
                    if ((*(unsigned int (**)(void, uint64_t, uint64_t, int **))(**(void **)(a1 + 168)
                                                                                          + 32))(*(void *)(a1 + 168), v73, v34, &v77))
                    {
                      float v39 = NAN;
                      if (v35 != -INFINITY)
                      {
                        float v39 = NAN;
                        if (v78 != -INFINITY)
                        {
                          float v39 = INFINITY;
                          if (v78 != INFINITY && v35 != INFINITY) {
                            float v39 = v35 + v78;
                          }
                        }
                      }
                      uint64_t v34 = HIDWORD(v77);
                      uint64_t v41 = v79;
                    }
                    else
                    {
                      float v39 = INFINITY;
                      uint64_t v41 = v73;
                    }
                    float v37 = v29 + v39;
                    float v35 = v39;
                  }
                  else
                  {
                    uint64_t v41 = v73;
                  }
                  if (v37 < a3)
                  {
                    LOBYTE(v77) = 0;
                    unint64_t v42 = v36 + (v41 << 32);
                    unsigned int v43 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(a1, v42, a2, 0, (char *)&v77, *(_DWORD *)(v28 + 8) & 0x3F, v37);
                    uint64_t v44 = *(void *)v67;
                    int v45 = kaldi::quasar::TokenHeap::NewForwardLink(v67, v43, 0, v34, v35, 0.0, *v30);
                    uint64_t v46 = v44 + 32 * v43;
                    *unint64_t v30 = v45;
                    if ((*(void *)v28 & 0x100000000) != 0) {
                      *(void *)v46 |= 0x100000000uLL;
                    }
                    if ((_BYTE)v77)
                    {
                      int v47 = *(_DWORD *)(v46 + 8) & 0x3F | (v71 << 6);
                      *(void *)uint64_t v46 = *(void *)v46 & 0x100000001 | (v34 << 33);
                      *(_DWORD *)(v46 + 8) = v47;
                      *(_DWORD *)(v44 + 32 * v43 + 28) = v41;
                      unint64_t v49 = *(char **)(a1 + 120);
                      unint64_t v48 = *(void *)(a1 + 128);
                      if ((unint64_t)v49 >= v48)
                      {
                        unsigned int v51 = (char *)*v70;
                        uint64_t v52 = (v49 - (unsigned char *)*v70) >> 4;
                        unint64_t v53 = v52 + 1;
                        if ((unint64_t)(v52 + 1) >> 60) {
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v54 = v48 - (void)v51;
                        if (v54 >> 3 > v53) {
                          unint64_t v53 = v54 >> 3;
                        }
                        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v55 = v53;
                        }
                        if (v55)
                        {
                          long long v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 128, v55);
                          unsigned int v51 = *(char **)(a1 + 112);
                          unint64_t v49 = *(char **)(a1 + 120);
                        }
                        else
                        {
                          long long v56 = 0;
                        }
                        char v57 = &v56[16 * v52];
                        *(void *)char v57 = v42;
                        *((_DWORD *)v57 + 2) = v43;
                        long long v58 = v57;
                        if (v49 != v51)
                        {
                          do
                          {
                            *((_OWORD *)v58 - 1) = *((_OWORD *)v49 - 1);
                            v58 -= 16;
                            v49 -= 16;
                          }
                          while (v49 != v51);
                          unsigned int v51 = (char *)*v70;
                        }
                        float v50 = v57 + 16;
                        *(void *)(a1 + 112) = v58;
                        *(void *)(a1 + 120) = v57 + 16;
                        *(void *)(a1 + 128) = &v56[16 * v55];
                        if (v51) {
                          operator delete(v51);
                        }
                      }
                      else
                      {
                        *(void *)unint64_t v49 = v42;
                        *((_DWORD *)v49 + 2) = v43;
                        float v50 = v49 + 16;
                      }
                      *(void *)(a1 + 120) = v50;
                      char v68 = 1;
                    }
                  }
                }
              }
            }
            v32 += 16;
          }
          while (v32 != v33);
        }
        if (*(void *)(a1 + 280))
        {
          int v59 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160));
          uint64_t v60 = *(void *)v28;
          if (v59 == v69 || a3 != INFINITY && (v60 & 0x100000000) != 0)
          {
            unsigned int v61 = *(_DWORD *)(v28 + 8) & 0x3F;
            if (v61)
            {
              if (!(((v60 & 0xFFFFFFFE00000000) != 0) | v68 & 1))
              {
                LODWORD(v77) = *(_DWORD *)(*(void *)(*(void *)(a1 + 280) + 40) + 12 * v61 + 8);
                kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::emitClassTag(a1, v28, v71, a2, v69, v73, &v77, 1, a3, 0, 0);
              }
            }
            else
            {
              uint64_t v62 = *(void *)(*(void *)(a1 + 280) + 40);
              if (*(void *)(*(void *)(a1 + 280) + 48) - v62 != 12)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 1;
                do
                {
                  int v77 = *(int **)(v62 + v63 + 12);
                  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::emitClassTag(a1, v28, v71, a2, v69, v73, &v77, 2, a3, 1, v64++);
                  uint64_t v62 = *(void *)(*(void *)(a1 + 280) + 40);
                  v63 += 12;
                }
                while (v64 != 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 280) + 48) - v62) >> 2));
              }
            }
          }
        }
      }
      uint64_t v22 = *(void *)(a1 + 120);
    }
    while (*(void *)(a1 + 112) != v22);
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v75);
}

void sub_1B1EDA6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

double kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UpdateTime(uint64_t a1, clockid_t a2)
{
  uint64_t v3 = a1 + 16 * a2;
  *(double *)(v3 + 888) = *(double *)(v3 + 888)
                        + kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2)
                        - *(double *)(a1 + 848);
  double result = *(double *)(v3 + 896) + kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v4) - *(double *)(a1 + 864);
  *(double *)(v3 + 896) = result;
  return result;
}

uint64_t kaldi::quasar::TokenHeap::Clear(kaldi::quasar::TokenHeap *this)
{
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::Clear((uint64_t)this);
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16);
  kaldi::quasar::TokenHeap::TokenHeap((kaldi::quasar::TokenHeap *)v3, *((_DWORD *)this + 8), *((_DWORD *)this + 9));
  kaldi::quasar::TokenHeap::operator=(this, v3);
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)&v4);
  return kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::Clear((uint64_t)v3);
}

void sub_1B1EDA7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::quasar::TokenHeap::~TokenHeap((kaldi::quasar::TokenHeap *)va);
  _Unwind_Resume(a1);
}

void *kaldi::quasar::TokenHeap::operator=(void *a1, void *a2)
{
  if (a1 != a2)
  {
    kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::Clear((uint64_t)a1);
    *a1 = *a2;
    a1[1] = a2[1];
    *a2 = 0;
    a2[1] = 0;
    kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)(a1 + 2));
    a1[2] = a2[2];
    a1[3] = a2[3];
    a2[2] = 0;
    a2[3] = 0;
  }
  a1[4] = a2[4];
  return a1;
}

void std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (uint64_t)&v6[-v7] >> 3)
  {
    if (a2)
    {
      uint64_t v14 = v7 + 8 * a2;
      do
      {
        *(_DWORD *)uint64_t v7 = 0;
        *(_WORD *)(v7 + 4) = 257;
        v7 += 8;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = (char *)v7;
  }
  else
  {
    uint64_t v8 = v7 - (void)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    uint64_t v15 = &v13[8 * v10];
    unint64_t v16 = &v15[8 * a2];
    uint64_t v17 = v15;
    do
    {
      *(_DWORD *)uint64_t v17 = 0;
      *((_WORD *)v17 + 2) = 257;
      v17 += 8;
    }
    while (v17 != v16);
    unint64_t v18 = &v13[8 * v12];
    long long v20 = *a1;
    long long v19 = a1[1];
    if (v19 != *a1)
    {
      do
      {
        int v21 = *((_DWORD *)v19 - 2);
        v19 -= 8;
        __int16 v22 = *((_WORD *)v19 + 2);
        *((_DWORD *)v15 - 2) = v21;
        v15 -= 8;
        *((_WORD *)v15 + 2) = v22;
      }
      while (v19 != v20);
      long long v19 = *a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
}

uint64_t kaldi::quasar::TokenHeap::NewToken(kaldi::quasar::TokenHeap *this, float a2, float a3, int a4, int a5, int a6)
{
  uint64_t v7 = *((void *)this + 1);
  uint64_t result = HIDWORD(v7);
  if (HIDWORD(v7) == v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    kaldi::quasar::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
  }
  *((_DWORD *)this + 3) = HIDWORD(v7) + 1;
  uint64_t v9 = *(void *)this + 32 * HIDWORD(v7);
  *(void *)(v9 + 12) = 0;
  *(void *)(v9 + 20) = 0;
  *(_DWORD *)(v9 + 24) = a5;
  *(_DWORD *)(v9 + 28) = 0;
  *(float *)(v9 + 12) = a2;
  *(float *)(v9 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = a3;
  *(_DWORD *)(v9 + 20) = a4;
  *(_DWORD *)(v9 + 8) = a6;
  *(void *)uint64_t v9 = 0;
  return result;
}

void sub_1B1EDAA34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindBestWeightForEachLmState(uint64_t *result, uint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    float v5 = result;
    do
    {
      uint64_t v6 = *(unsigned int *)(v4 + 8);
      uint64_t v7 = v5[41];
      int v10 = 0;
      uint64_t v8 = v7 + 32 * v6;
      int v10 = *(_DWORD *)(v8 + 28);
      float v9 = *(float *)(v8 + 12);
      uint64_t result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a3, &v10);
      if (!result || *((float *)result + 5) > v9)
      {
        uint64_t v11 = &v10;
        uint64_t result = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a3, &v10, (uint64_t)&std::piecewise_construct, &v11);
        *((float *)result + 5) = v9;
      }
      uint64_t v4 = *(void *)(v4 + 16);
    }
    while (v4);
  }
  return result;
}

char *kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArcs(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v23 = a2;
  float v5 = (char *)(a1 + 456);
  if (*(_DWORD *)(a1 + 256) == 0x7FFFFFFF)
  {
    (*(void (**)(void, uint64_t, char *, void))(**(void **)(a1 + 160) + 80))(*(void *)(a1 + 160), a2, v5, *(unsigned __int8 *)(a1 + 261));
  }
  else
  {
    uint64_t v6 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 488), (int *)&v23);
    if (v6)
    {
      float v5 = (char *)(v6 + 3);
    }
    else
    {
      (*(void (**)(void, void, char *, void))(**(void **)(a1 + 160) + 80))(*(void *)(a1 + 160), v23, v5, *(unsigned __int8 *)(a1 + 261));
      uint64_t v8 = *(void *)(a1 + 472);
      uint64_t v7 = *(void *)(a1 + 480);
      if (*(int *)(a1 + 256) <= (unint64_t)((v7 - v8) >> 4))
      {
        unsigned int v18 = v23;
        uint64_t v9 = *(void *)(a1 + 464);
        long long v19 = *(void **)(a1 + 456);
        uint64_t v20 = v9;
        uint64_t v21 = v8;
        uint64_t v22 = v7;
        *(_OWORD *)float v5 = 0u;
        *((_OWORD *)v5 + 1) = 0u;
        float v5 = std::__hash_table<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::pair<int const,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1 + 488, (int *)&v18, (uint64_t)&v18)+ 24;
        if (v19) {
          free(v19);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 261))
  {
    uint64_t v10 = (*((void *)v5 + 3) - *((void *)v5 + 2)) >> 4;
    unsigned int v11 = v10 - 2;
    unsigned int v12 = v10 - 1;
    unint64_t v13 = (unint64_t)v23 << 32;
    if (a3 - 1 >= 0xFFFFFFFE) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = a3;
    }
    uint64_t v15 = (void *)(*(void *)v5 + 16 * v11);
    *uint64_t v15 = 1;
    v15[1] = v13;
    unint64_t v16 = (uint64_t *)(*(void *)v5 + 16 * v12);
    uint64_t *v16 = v14;
    v16[1] = v13;
  }
  return v5;
}

void sub_1B1EDAC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(uint64_t a1, unint64_t a2, int a3, int a4, char *a5, int a6, float a7)
{
  uint64_t v10 = (uint64_t *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = a2 % *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(v11 + 16 * v12 + 8);
  if (v13)
  {
    uint64_t v14 = *(void *)(v11 + 16 * v12);
    uint64_t v15 = (uint64_t *)(a1 + 8);
    if (v14 != -1) {
      uint64_t v15 = (uint64_t *)(*(void *)(v11 + 16 * v14 + 8) + 16);
    }
    uint64_t v16 = *(void *)(v13 + 16);
    for (uint64_t i = *v15; i != v16; uint64_t i = *(void *)(i + 16))
    {
      if (*(void *)i == a2)
      {
        uint64_t v19 = *(unsigned int *)(i + 8);
        uint64_t v26 = *(void *)(a1 + 328) + 32 * v19;
        float v28 = *(float *)(v26 + 12);
        uint64_t v27 = (float *)(v26 + 12);
        if (v28 > a7)
        {
          *uint64_t v27 = a7;
          if (!a5) {
            return v19;
          }
          goto LABEL_17;
        }
        if (!a5) {
          return v19;
        }
        char v29 = 0;
        goto LABEL_18;
      }
    }
  }
  unsigned int v18 = (int *)(*(void *)(a1 + 88) + 8 * a3);
  uint64_t v19 = kaldi::quasar::TokenHeap::NewToken((kaldi::quasar::TokenHeap *)(a1 + 328), a7, 0.0, 0, *v18, a6);
  int *v18 = v19;
  ++*(_DWORD *)(a1 + 288);
  unint64_t v20 = a2 % *(void *)(a1 + 24);
  uint64_t v21 = (void *)(*(void *)(a1 + 32) + 16 * v20);
  uint64_t v22 = kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::New((uint64_t)v10);
  *(void *)uint64_t v22 = a2;
  *(_DWORD *)(v22 + 8) = v19;
  unsigned int v23 = v21 + 1;
  uint64_t v24 = v21[1];
  if (v24)
  {
    *(void *)(v22 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(void *)(v24 + 16);
    *(void *)(v24 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v22;
    uint64_t *v23 = v22;
    if (!a5) {
      return v19;
    }
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 16);
    if (v25 != -1) {
      uint64_t v10 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 16 * v25 + 8) + 16);
    }
    *uint64_t v10 = v22;
    *(void *)(v22 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
    uint64_t *v23 = v22;
    void *v21 = v25;
    *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v20;
    if (!a5) {
      return v19;
    }
  }
LABEL_17:
  char v29 = 1;
LABEL_18:
  *a5 = v29;
  return v19;
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::emitClassTag(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, _DWORD *a7, int a8, float a9, char a10, int a11)
{
  if (a8)
  {
    float v17 = *(float *)(a2 + 12);
    if (!a10
      || (float)((float)(v17 + *(float *)(*(void *)(*(void *)(a1 + 280) + 104) + 4 * a11)) - *(float *)(a1 + 232)) <= a9)
    {
      int v42 = a8 - 1;
      if (a8 < 1)
      {
        float v19 = 0.0;
      }
      else
      {
        unsigned int v18 = a7;
        float v19 = 0.0;
        uint64_t v20 = a8;
        do
        {
          if (*v18++)
          {
            if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 168) + 32))(*(void *)(a1 + 168), a6))
            {
              float v22 = v46 + 0.0;
              if (v46 == INFINITY) {
                float v22 = INFINITY;
              }
              if (v46 == -INFINITY) {
                float v22 = NAN;
              }
              float v23 = v22;
              a6 = v47;
            }
            else
            {
              float v23 = INFINITY;
            }
          }
          else
          {
            float v23 = 0.0;
          }
          float v17 = v17 + v23;
          float v19 = v19 + v23;
          --v20;
        }
        while (v20);
      }
      if (v17 < a9)
      {
        v45[0] = 0;
        unint64_t v24 = (a6 << 32) + a5;
        unsigned int v25 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(a1, v24, a4, 0, v45, a11, v17);
        uint64_t v26 = *(void *)(a1 + 328);
        *(_DWORD *)(a2 + 20) = kaldi::quasar::TokenHeap::NewForwardLink((kaldi::quasar::TokenHeap *)(a1 + 328), v25, 0, a7[v42], v19, 0.0, *(_DWORD *)(a2 + 20));
        if (v45[0])
        {
          uint64_t v27 = (unint64_t *)(v26 + 32 * v25);
          unint64_t v28 = *v27;
          int v29 = v27[1] & 0x3F | (a3 << 6);
          *v27 &= 0xFFFFFFFF00000001;
          *((_DWORD *)v27 + 2) = v29;
          unint64_t v30 = v28 & 0x100000001 | ((unint64_t)a7[v42] << 33);
          *((_DWORD *)v27 + 2) = v29;
          *uint64_t v27 = v30;
          *((_DWORD *)v27 + 7) = a6;
          unint64_t v31 = *(void *)(a1 + 128);
          uint64_t v32 = *(char **)(a1 + 120);
          if ((unint64_t)v32 >= v31)
          {
            uint64_t v34 = *(char **)(a1 + 112);
            uint64_t v35 = (v32 - v34) >> 4;
            unint64_t v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v37 = v31 - (void)v34;
            if (v37 >> 3 > v36) {
              unint64_t v36 = v37 >> 3;
            }
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v38 = v36;
            }
            if (v38)
            {
              float v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 128, v38);
              uint64_t v34 = *(char **)(a1 + 112);
              uint64_t v32 = *(char **)(a1 + 120);
            }
            else
            {
              float v39 = 0;
            }
            unint64_t v40 = &v39[16 * v35];
            uint64_t v41 = &v39[16 * v38];
            *(void *)unint64_t v40 = v24;
            *((_DWORD *)v40 + 2) = v25;
            uint64_t v33 = v40 + 16;
            if (v32 != v34)
            {
              do
              {
                *((_OWORD *)v40 - 1) = *((_OWORD *)v32 - 1);
                v40 -= 16;
                v32 -= 16;
              }
              while (v32 != v34);
              uint64_t v34 = *(char **)(a1 + 112);
            }
            *(void *)(a1 + 112) = v40;
            *(void *)(a1 + 120) = v33;
            *(void *)(a1 + 128) = v41;
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *(void *)uint64_t v32 = v24;
            *((_DWORD *)v32 + 2) = v25;
            uint64_t v33 = v32 + 16;
          }
          *(void *)(a1 + 120) = v33;
        }
      }
    }
  }
}

char *std::__hash_table<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::pair<int const,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v12 = (void *)(a1 + 16);
  uint64_t v10 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  uint64_t v13 = *(void *)(a3 + 16);
  *((void *)v10 + 3) = *(void *)(a3 + 8);
  *((void *)v10 + 4) = v13;
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)uint64_t v10 = *v21;
LABEL_38:
    void *v21 = v10;
    goto LABEL_39;
  }
  *(void *)uint64_t v10 = *v12;
  *unint64_t v12 = v10;
  *(void *)(v20 + 8 * v3) = v12;
  if (*(void *)v10)
  {
    unint64_t v22 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }
    else
    {
      v22 &= v7 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B1EDB33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (void *)__p[3];
    if (v3) {
      free(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t kaldi::quasar::TokenHeap::NewForwardLink(kaldi::quasar::TokenHeap *this, int a2, int a3, int a4, float a5, float a6, int a7)
{
  uint64_t v8 = *((void *)this + 3);
  uint64_t result = HIDWORD(v8);
  if (HIDWORD(v8) == v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    kaldi::quasar::TooManyForwardLinksError::TooManyForwardLinksError(exception, "Ran out of forward links in storage");
  }
  *((_DWORD *)this + 7) = HIDWORD(v8) + 1;
  uint64_t v10 = *((void *)this + 2) + 24 * HIDWORD(v8);
  *(_DWORD *)(v10 + 4) = a2;
  *(_DWORD *)(v10 + 8) = a4;
  *(float *)(v10 + 12) = a5;
  *(float *)(v10 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = a6;
  *(_DWORD *)(v10 + 20) = a7;
  *(_DWORD *)uint64_t v10 = 2 * a3;
  return result;
}

void sub_1B1EDB448(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 424))
  {
    signed int v4 = a2;
    *(unsigned char *)(a1 + 424) = 1;
    *(unsigned char *)(a1 + 425) = a3;
    kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinksFinal(a1, a2, a3);
    if (v4 >= 1)
    {
      do
      {
        LOBYTE(v12[0]) = 0;
        char v13 = 0;
        kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinks(a1, v4 - 1, v12, &v13, a3, 0.0);
        kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame(a1, v4, a3);
        BOOL v6 = v4-- != 0;
      }
      while (v4 != 0 && v6);
    }
    kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame(a1, 0, a3);
    if (kaldi::g_kaldi_verbose_level > 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"PruneActiveTokensFinal: pruned tokens from ", 43);
      unint64_t v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" to ", 4);
      uint64_t v8 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" links from ", 12);
      uint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" to ", 4);
      uint64_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" pruned_tok_frames_ ", 20);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" pruned_link_toks_ ", 19);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
    }
  }
}

void sub_1B1EDB5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinksFinal(uint64_t a1, int a2, int a3)
{
  if (*(_DWORD *)(*(void *)(a1 + 88) + 8 * a2)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = kaldi::g_kaldi_verbose_level < -1;
  }
  if (!v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"No tokens alive at end of file", 30);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
  }
  int v74 = a2;
  memset(v78, 0, sizeof(v78));
  int v79 = 1065353216;
  BOOL v6 = *(unint64_t **)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = (char **)(a1 + 432);
    float v8 = INFINITY;
    float v9 = INFINITY;
    do
    {
      unint64_t v10 = *v6;
      unsigned int i = *((_DWORD *)v6 + 2);
      uint64_t v11 = i;
      uint64_t v12 = *(void *)(a1 + 328);
      (*(void (**)(void, unint64_t))(**(void **)(a1 + 160) + 32))(*(void *)(a1 + 160), v10);
      float v14 = INFINITY;
      if ((*(_DWORD *)(v12 + 32 * v11 + 8) & 0x3F) != 0) {
        float v15 = INFINITY;
      }
      else {
        float v15 = v13;
      }
      if (v15 != INFINITY) {
        float v14 = v15
      }
            + (*(float (**)(void, unint64_t))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168), HIDWORD(v10));
      v80[0] = &i;
      *((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v78, &i, (uint64_t)&std::piecewise_construct, v80)+ 5) = v14;
      uint64_t v16 = v12 + 32 * v11;
      float v17 = *(float *)(v16 + 12);
      if ((float)(v14 + v17) < v8) {
        float v8 = v14 + v17;
      }
      if (v17 < v9) {
        float v9 = *(float *)(v16 + 12);
      }
      if (a3)
      {
        unint64_t v18 = i | ((unint64_t)*(unsigned int *)(v16 + 16) << 32);
        uint64_t v20 = *(unint64_t **)(a1 + 440);
        unint64_t v19 = *(void *)(a1 + 448);
        if ((unint64_t)v20 >= v19)
        {
          uint64_t v22 = ((char *)v20 - *v7) >> 3;
          if ((unint64_t)(v22 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v19 - (void)*v7;
          uint64_t v24 = v23 >> 2;
          if (v23 >> 2 <= (unint64_t)(v22 + 1)) {
            uint64_t v24 = v22 + 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25) {
            uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 448, v25);
          }
          else {
            uint64_t v26 = 0;
          }
          uint64_t v27 = (unint64_t *)&v26[8 * v22];
          *uint64_t v27 = v18;
          uint64_t v21 = v27 + 1;
          int v29 = *(char **)(a1 + 432);
          unint64_t v28 = *(char **)(a1 + 440);
          if (v28 != v29)
          {
            do
            {
              unint64_t v30 = *((void *)v28 - 1);
              v28 -= 8;
              *--uint64_t v27 = v30;
            }
            while (v28 != v29);
            unint64_t v28 = *v7;
          }
          *(void *)(a1 + 432) = v27;
          *(void *)(a1 + 440) = v21;
          *(void *)(a1 + 448) = &v26[8 * v25];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          unint64_t *v20 = v18;
          uint64_t v21 = v20 + 1;
        }
        *(void *)(a1 + 440) = v21;
      }
      BOOL v6 = (unint64_t *)v6[2];
    }
    while (v6);
  }
  else
  {
    float v9 = INFINITY;
    float v8 = INFINITY;
  }
  uint64_t v31 = v74;
  *(unsigned char *)(a1 + 296) = v8 != INFINITY;
  int v75 = (char **)(a1 + 400);
  uint64_t v70 = 8 * v31;
  do
  {
    unsigned int i = 0;
    uint64_t v32 = *(unsigned int *)(*(void *)(a1 + 88) + v70);
    unsigned int i = v32;
    if (!v32) {
      break;
    }
    char v71 = 0;
    do
    {
      uint64_t v33 = *(void *)(a1 + 328);
      if (*(unsigned char *)(a1 + 296))
      {
        v80[0] = &i;
        float v34 = (float)(*((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v78, &i, (uint64_t)&std::piecewise_construct, v80)+ 5)+ *(float *)(v33 + 32 * v32 + 12))- v8;
      }
      else
      {
        float v34 = *(float *)(v33 + 32 * v32 + 12) - v9;
      }
      uint64_t v35 = v33 + 32 * v32;
      unsigned int v38 = *(_DWORD *)(v35 + 20);
      uint64_t v37 = (_DWORD *)(v35 + 20);
      uint64_t v36 = v38;
      uint64_t v72 = v33 + 32 * v32;
      uint64_t v73 = v33;
      if (v38)
      {
        uint64_t v39 = 0;
        unint64_t v40 = (float *)(v33 + 32 * v32 + 12);
        do
        {
          uint64_t v41 = *(void *)(a1 + 344);
          uint64_t v42 = v41 + 24 * v36;
          uint64_t v43 = *(void *)(a1 + 328) + 32 * *(unsigned int *)(v42 + 4);
          float v45 = *(float *)(v43 + 12);
          float v44 = *(float *)(v43 + 16);
          float v46 = v44 + (float)((float)((float)(*v40 + *(float *)(v42 + 16)) + *(float *)(v42 + 12)) - v45);
          if (v46 <= *(float *)(a1 + 192))
          {
            if (v46 >= 0.0)
            {
              float v53 = v44 + (float)((float)((float)(*v40 + *(float *)(v42 + 16)) + *(float *)(v42 + 12)) - v45);
            }
            else
            {
              float v53 = 0.0;
              if (v46 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Negative extra_cost: ", 21);
                std::ostream::operator<<();
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
              }
            }
            if (v53 < v34) {
              float v34 = v53;
            }
            uint64_t v47 = *(unsigned int *)(v41 + 24 * v36 + 20);
            uint64_t v39 = v36;
          }
          else
          {
            uint64_t v47 = *(unsigned int *)(v41 + 24 * v36 + 20);
            unint64_t v48 = (_DWORD *)(v41 + 24 * v39 + 20);
            if (!v39) {
              unint64_t v48 = v37;
            }
            _DWORD *v48 = v47;
            if (a3)
            {
              uint64_t v49 = i;
              unsigned int v51 = *(unint64_t **)(a1 + 408);
              unint64_t v50 = *(void *)(a1 + 416);
              if ((unint64_t)v51 >= v50)
              {
                uint64_t v55 = ((char *)v51 - *v75) >> 3;
                if ((unint64_t)(v55 + 1) >> 61) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v56 = v50 - (void)*v75;
                uint64_t v57 = v56 >> 2;
                if (v56 >> 2 <= (unint64_t)(v55 + 1)) {
                  uint64_t v57 = v55 + 1;
                }
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v58 = v57;
                }
                if (v58) {
                  int v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 416, v58);
                }
                else {
                  int v59 = 0;
                }
                uint64_t v60 = &v59[8 * v55];
                *(void *)uint64_t v60 = v36 | (v49 << 32);
                uint64_t v52 = v60 + 8;
                uint64_t v62 = *(char **)(a1 + 400);
                unsigned int v61 = *(char **)(a1 + 408);
                if (v61 != v62)
                {
                  do
                  {
                    uint64_t v63 = *((void *)v61 - 1);
                    v61 -= 8;
                    *((void *)v60 - 1) = v63;
                    v60 -= 8;
                  }
                  while (v61 != v62);
                  unsigned int v61 = *v75;
                }
                *(void *)(a1 + 400) = v60;
                *(void *)(a1 + 408) = v52;
                *(void *)(a1 + 4kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = &v59[8 * v58];
                if (v61) {
                  operator delete(v61);
                }
              }
              else
              {
                unint64_t *v51 = v36 | ((unint64_t)i << 32);
                uint64_t v52 = v51 + 1;
              }
              *(void *)(a1 + 408) = v52;
            }
          }
          uint64_t v36 = v47;
        }
        while (v47);
      }
      float v64 = INFINITY;
      if (v34 <= *(float *)(a1 + 192)) {
        float v64 = v34;
      }
      float v65 = *(float *)(v72 + 16);
      if (v65 != v64
        && (COERCE_INT(fabs(v65 - v64)) > 2139095039
         || fabsf(v65 - v64) > (float)((float)(fabsf(v65) + fabsf(v64)) * 0.00001)))
      {
        char v71 = 1;
      }
      *(float *)(v72 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v64;
      uint64_t v32 = *(unsigned int *)(v73 + 32 * v32 + 24);
      unsigned int i = v32;
    }
    while (v32);
  }
  while ((v71 & 1) != 0);
  uint64_t v66 = *(unsigned int *)(*(void *)(a1 + 88) + v70);
  for (unsigned int i = v66; v66; unsigned int i = v66)
  {
    uint64_t v67 = *(void *)(a1 + 328) + 32 * v66;
    if (*(float *)(v67 + 16) != INFINITY)
    {
      if (*(unsigned char *)(a1 + 296))
      {
        v80[0] = &i;
        float v68 = *((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v78, &i, (uint64_t)&std::piecewise_construct, v80)+ 5);
        if (v68 != INFINITY)
        {
          v80[0] = &i;
          *((float *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 304), &i, (uint64_t)&std::piecewise_construct, v80)+ 8) = v68;
        }
      }
      else
      {
        v80[0] = &i;
        *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 304), &i, (uint64_t)&std::piecewise_construct, v80)+ 8) = 0;
      }
    }
    uint64_t v66 = *(unsigned int *)(v67 + 24);
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v78);
}

void sub_1B1EDBC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinks(uint64_t a1, unsigned int a2, unsigned char *a3, unsigned char *a4, int a5, float a6)
{
  *a3 = 0;
  *a4 = 0;
  if (!*(_DWORD *)(*(void *)(a1 + 88) + 8 * a2) && !*(unsigned char *)(a1 + 293))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"No tokens alive [doing pruning].. warning first time only for each utterance", 76);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
    }
    *(unsigned char *)(a1 + 293) = 1;
  }
  uint64_t v53 = 8 * a2;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 88) + v53);
  if (v9)
  {
    uint64_t v55 = (char **)(a1 + 432);
    int v59 = (char **)(a1 + 400);
    char v56 = a5;
    do
    {
      int v10 = 0;
      do
      {
        uint64_t v11 = *(void *)(a1 + 328);
        if (v56)
        {
          unint64_t v12 = v9 | ((unint64_t)*(unsigned int *)(v11 + 32 * v9 + 16) << 32);
          float v14 = *(unint64_t **)(a1 + 440);
          unint64_t v13 = *(void *)(a1 + 448);
          if ((unint64_t)v14 >= v13)
          {
            uint64_t v16 = ((char *)v14 - *v55) >> 3;
            if ((unint64_t)(v16 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v17 = v13 - (void)*v55;
            uint64_t v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
              uint64_t v18 = v16 + 1;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v18;
            }
            if (v19) {
              uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 448, v19);
            }
            else {
              uint64_t v20 = 0;
            }
            uint64_t v21 = (unint64_t *)&v20[8 * v16];
            unint64_t *v21 = v12;
            float v15 = v21 + 1;
            uint64_t v23 = *(char **)(a1 + 432);
            uint64_t v22 = *(char **)(a1 + 440);
            if (v22 != v23)
            {
              do
              {
                unint64_t v24 = *((void *)v22 - 1);
                v22 -= 8;
                *--uint64_t v21 = v24;
              }
              while (v22 != v23);
              uint64_t v22 = *v55;
            }
            *(void *)(a1 + 432) = v21;
            *(void *)(a1 + 440) = v15;
            *(void *)(a1 + 448) = &v20[8 * v19];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *float v14 = v12;
            float v15 = v14 + 1;
          }
          *(void *)(a1 + 440) = v15;
        }
        int v58 = v10;
        uint64_t v25 = v11 + 32 * v9;
        unsigned int v28 = *(_DWORD *)(v25 + 20);
        uint64_t v27 = (_DWORD *)(v25 + 20);
        uint64_t v26 = v28;
        uint64_t v57 = v11 + 32 * v9;
        if (v28)
        {
          uint64_t v29 = 0;
          unint64_t v30 = (float *)(v11 + 32 * v9 + 12);
          uint64_t v31 = v9 << 32;
          float v32 = INFINITY;
          do
          {
            uint64_t v33 = *(void *)(a1 + 344);
            uint64_t v34 = v33 + 24 * v26;
            uint64_t v35 = *(void *)(a1 + 328) + 32 * *(unsigned int *)(v34 + 4);
            float v36 = *(float *)(v35 + 16)
                + (float)((float)((float)(*v30 + *(float *)(v34 + 16)) + *(float *)(v34 + 12)) - *(float *)(v35 + 12));
            if (v36 <= *(float *)(a1 + 192))
            {
              if (v36 >= 0.0)
              {
                float v42 = *(float *)(v35 + 16)
                    + (float)((float)((float)(*v30 + *(float *)(v34 + 16)) + *(float *)(v34 + 12)) - *(float *)(v35 + 12));
              }
              else
              {
                float v42 = 0.0;
                if (v36 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Negative extra_cost: ", 21);
                  std::ostream::operator<<();
                  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v62);
                }
              }
              if (v42 < v32) {
                float v32 = v42;
              }
              uint64_t v38 = *(unsigned int *)(v33 + 24 * v26 + 20);
              uint64_t v29 = v26;
            }
            else
            {
              uint64_t v37 = v27;
              if (v29) {
                uint64_t v37 = (_DWORD *)(*(void *)(a1 + 344) + 24 * v29 + 20);
              }
              uint64_t v38 = *(unsigned int *)(v33 + 24 * v26 + 20);
              *uint64_t v37 = v38;
              if (a5)
              {
                unint64_t v40 = *(uint64_t **)(a1 + 408);
                unint64_t v39 = *(void *)(a1 + 416);
                if ((unint64_t)v40 >= v39)
                {
                  uint64_t v44 = ((char *)v40 - *v59) >> 3;
                  if ((unint64_t)(v44 + 1) >> 61) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v45 = v39 - (void)*v59;
                  uint64_t v46 = v45 >> 2;
                  if (v45 >> 2 <= (unint64_t)(v44 + 1)) {
                    uint64_t v46 = v44 + 1;
                  }
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v47 = v46;
                  }
                  if (v47) {
                    unint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 416, v47);
                  }
                  else {
                    unint64_t v48 = 0;
                  }
                  uint64_t v49 = &v48[8 * v44];
                  *(void *)uint64_t v49 = v31 | v26;
                  uint64_t v41 = v49 + 8;
                  unsigned int v51 = *(char **)(a1 + 400);
                  unint64_t v50 = *(char **)(a1 + 408);
                  if (v50 != v51)
                  {
                    do
                    {
                      uint64_t v52 = *((void *)v50 - 1);
                      v50 -= 8;
                      *((void *)v49 - 1) = v52;
                      v49 -= 8;
                    }
                    while (v50 != v51);
                    unint64_t v50 = *v59;
                  }
                  *(void *)(a1 + 400) = v49;
                  *(void *)(a1 + 408) = v41;
                  *(void *)(a1 + 4kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = &v48[8 * v47];
                  if (v50) {
                    operator delete(v50);
                  }
                }
                else
                {
                  *unint64_t v40 = v31 | v26;
                  uint64_t v41 = v40 + 1;
                }
                *(void *)(a1 + 408) = v41;
              }
              *a4 = 1;
            }
            uint64_t v26 = v38;
          }
          while (v38);
        }
        else
        {
          float v32 = INFINITY;
        }
        int v10 = v58;
        if (vabds_f32(v32, *(float *)(v57 + 16)) > a6) {
          int v10 = 1;
        }
        *(float *)(v57 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v32;
        uint64_t v9 = *(unsigned int *)(v57 + 24);
      }
      while (v9);
      if ((v10 & 1) == 0) {
        break;
      }
      char v56 = 0;
      *a3 = 1;
      uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 88) + v53);
    }
    while (v9);
  }
}

void sub_1B1EDC108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame(uint64_t a1, unsigned int a2, int a3)
{
  BOOL v6 = (unsigned int *)(*(void *)(a1 + 88) + 8 * a2);
  uint64_t v7 = *v6;
  if (!v7)
  {
    if (*(unsigned char *)(a1 + 294)) {
      return;
    }
    if (kaldi::g_kaldi_verbose_level <= -2)
    {
      *(unsigned char *)(a1 + 294) = 1;
      return;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"No tokens alive [doing pruning]", 31);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    uint64_t v7 = *v6;
    *(unsigned char *)(a1 + 294) = 1;
    if (!v7) {
      return;
    }
  }
  uint64_t v8 = 0;
  unsigned int v28 = (char **)(a1 + 376);
  unint64_t v9 = (unint64_t)a2 << 32;
  do
  {
    uint64_t v10 = *(void *)(a1 + 328);
    uint64_t v11 = v10 + 32 * v7;
    unsigned int v14 = *(_DWORD *)(v11 + 24);
    unint64_t v13 = (float *)(v11 + 24);
    uint64_t v12 = v14;
    if (*(v13 - 2) == INFINITY)
    {
      float v15 = (_DWORD *)(v10 + 32 * v8 + 24);
      if (!v8) {
        float v15 = v6;
      }
      *float v15 = v12;
      if (a3)
      {
        uint64_t v17 = *(unint64_t **)(a1 + 384);
        unint64_t v16 = *(void *)(a1 + 392);
        if ((unint64_t)v17 >= v16)
        {
          uint64_t v19 = ((char *)v17 - *v28) >> 3;
          if ((unint64_t)(v19 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v16 - (void)*v28;
          uint64_t v21 = v20 >> 2;
          if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
            uint64_t v21 = v19 + 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 392, v22);
          }
          else {
            uint64_t v23 = 0;
          }
          unint64_t v24 = (unint64_t *)&v23[8 * v19];
          *unint64_t v24 = v9 | v7;
          uint64_t v18 = v24 + 1;
          uint64_t v26 = *(char **)(a1 + 376);
          uint64_t v25 = *(char **)(a1 + 384);
          if (v25 != v26)
          {
            do
            {
              unint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *--unint64_t v24 = v27;
            }
            while (v25 != v26);
            uint64_t v25 = *v28;
          }
          *(void *)(a1 + 376) = v24;
          *(void *)(a1 + 384) = v18;
          *(void *)(a1 + 392) = &v23[8 * v22];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          unint64_t *v17 = v9 | v7;
          uint64_t v18 = v17 + 1;
        }
        *(void *)(a1 + 384) = v18;
      }
      *unint64_t v13 = 0.0;
      --*(_DWORD *)(a1 + 288);
    }
    else
    {
      uint64_t v8 = v7;
    }
    uint64_t v7 = v12;
  }
  while (v12);
}

void sub_1B1EDC330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B1EDC558(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  unint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0>,BOOL ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A5BD00;
  return result;
}

void std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5BD00;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0>,BOOL ()(void)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder::finishDecoding(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&)::$_0>,BOOL ()(void)>::target_type()
{
}

float kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessEmitting<kaldi::DecodableInterface>(uint64_t a1, uint64_t a2, int a3, float a4)
{
  if (*(unsigned char *)(a1 + 424)) {
    kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UndoPruneActiveTokensFinal(a1);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6 != -1)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    do
    {
      unsigned int v8 = (uint64_t *)(v7 + 16 * v6);
      v8[1] = 0;
      uint64_t v6 = *v8;
    }
    while (v6 != -1);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = -1;
  uint64_t v146 = 0;
  float v145 = 0.0;
  unint64_t v144 = 0;
  float v10 = kaldi::GetCutoffHelper<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig,kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::Elem>((void *)a1, a1 + 176, v9, &v144, &v145, &v146, 1, a4);
  unint64_t v11 = (unint64_t)(float)(*(float *)(a1 + 208) * (float)v144);
  if (*(void *)(a1 + 24) < v11) {
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 8, v11);
  }
  uint64_t v131 = v9;
  int v12 = *(_DWORD *)(a1 + 368);
  unint64_t v13 = (int)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2) + 1);
  uint64_t v134 = a1;
  uint64_t v14 = *(void *)(a1 + 528);
  if (!v14 || (unint64_t v15 = *(unsigned int *)(v14 + 8), v15 < v13)) {
    operator new();
  }
  bzero(*(void **)v14, 4 * v15);
  unsigned int v137 = a3 + v12 - 1;
  unint64_t v16 = *(void **)(a1 + 528);
  int v17 = *(unsigned __int8 *)(a1 + 260);
  float v18 = 0.0;
  memset(v142, 0, sizeof(v142));
  int v143 = 1065353216;
  int v136 = v16;
  int v127 = v17;
  if (v17)
  {
    float v19 = *(float *)(a1 + 264);
    if (*(_DWORD *)(a1 + 268) == 0x7FFFFFFF)
    {
      uint64_t v20 = v131;
      goto LABEL_50;
    }
    uint64_t v20 = v131;
    if (v131)
    {
      unint64_t v21 = (unsigned int *)v131;
      do
      {
        Arcs = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArcs(v134, *v21, *(_DWORD *)(*(void *)(v134 + 328) + 32 * v21[2]) >> 1);
        uint64_t v23 = (int *)*((void *)Arcs + 2);
        unint64_t v24 = (int *)*((void *)Arcs + 3);
        if (v23 != v24)
        {
          uint64_t v25 = *v16;
          do
          {
            uint64_t v26 = *v23;
            float v18 = *(float *)(v25 + 4 * v26);
            if (v18 == 0.0)
            {
              float v18 = -(**(float (***)(uint64_t, void, void))a2)(a2, v137, *v23);
              uint64_t v25 = *v16;
              *(float *)(*v16 + 4 * v26) = v18;
            }
            v23 += 4;
          }
          while (v23 != v24);
        }
        unint64_t v21 = (unsigned int *)*((void *)v21 + 2);
      }
      while (v21);
    }
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v140 = 0;
    if (!v13) {
      goto LABEL_50;
    }
    unint64_t v27 = 0;
    for (uint64_t i = 0; i != v13; ++i)
    {
      float v29 = *(float *)(*v16 + 4 * i);
      if (v29 != 0.0)
      {
        if ((unint64_t)v27 >= (unint64_t)v140)
        {
          uint64_t v31 = (float *)__p[0];
          uint64_t v32 = ((char *)v27 - (char *)__p[0]) >> 2;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v34 = v140 - (unint64_t)__p[0];
          if ((uint64_t)(v140 - (unint64_t)__p[0]) >> 1 > v33) {
            unint64_t v33 = v34 >> 1;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            float v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v140, v35);
            uint64_t v31 = (float *)__p[0];
            unint64_t v27 = (float *)__p[1];
          }
          else
          {
            float v36 = 0;
          }
          uint64_t v37 = (float *)&v36[4 * v32];
          *uint64_t v37 = v29;
          unint64_t v30 = v37 + 1;
          while (v27 != v31)
          {
            float v38 = *--v27;
            float v18 = v38;
            *--uint64_t v37 = v38;
          }
          __p[0] = v37;
          __p[1] = v30;
          *(void *)&long long v140 = &v36[4 * v35];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *unint64_t v27 = v29;
          unint64_t v30 = v27 + 1;
        }
        __p[1] = v30;
        unint64_t v27 = (float *)v30;
      }
    }
    unint64_t v39 = (float *)__p[0];
    unint64_t v40 = *(int *)(v134 + 268);
    if (v40 >= ((char *)v27 - (char *)__p[0]) >> 2)
    {
      uint64_t v20 = v131;
      if (!__p[0]) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v41 = (float *)((char *)__p[0] + 4 * v40);
      uint64_t v20 = v131;
      if (v41 != v27)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((float *)__p[0], v41, v27, v18);
        unint64_t v40 = *(int *)(v134 + 268);
        unint64_t v39 = (float *)__p[0];
      }
      if (v39[v40] < v19) {
        float v19 = v39[v40];
      }
    }
    __p[1] = v39;
    operator delete(v39);
LABEL_50:
    if (v20)
    {
      uint64_t v42 = v131;
      do
      {
        unsigned int v147 = *(void *)v42;
        uint64_t v43 = *(unsigned int *)(v42 + 8);
        uint64_t v44 = *(void *)(v134 + 328);
        if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v142, (int *)&v147))
        {
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&long long v140 = 0;
          uint64_t v45 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArcs(v134, v147, *(_DWORD *)(v44 + 32 * v43) >> 1);
          unint64_t v47 = (unsigned int *)*((void *)v45 + 2);
          uint64_t v46 = (unsigned int *)*((void *)v45 + 3);
          while (v47 != v46)
          {
            uint64_t v48 = *v47;
            BOOL v148 = *(unsigned int **)(v47 + 1);
            float v149 = *((float *)v47 + 3);
            if (v48)
            {
              float v49 = *(float *)(*v136 + 4 * (int)v48);
              if (v49 == 0.0)
              {
                float v49 = -(**(float (***)(uint64_t, void, uint64_t))a2)(a2, v137, v48);
                *(float *)(*v136 + 4 * (int)v48) = v49;
              }
              if (v49 <= v19)
              {
                unint64_t v50 = (char *)__p[1];
                if (__p[1] >= (void *)v140)
                {
                  int64_t v52 = ((char *)__p[1] - (char *)__p[0]) >> 4;
                  unint64_t v53 = v52 + 1;
                  if ((unint64_t)(v52 + 1) >> 60) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v54 = v140 - (unint64_t)__p[0];
                  if ((uint64_t)(v140 - (unint64_t)__p[0]) >> 3 > v53) {
                    unint64_t v53 = v54 >> 3;
                  }
                  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v55 = v53;
                  }
                  if (v55) {
                    char v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v140, v55);
                  }
                  else {
                    char v56 = 0;
                  }
                  uint64_t v57 = &v56[16 * v52];
                  *(_DWORD *)uint64_t v57 = v48;
                  *(void *)(v57 + 4) = v148;
                  *((float *)v57 + 3) = v149;
                  int v59 = (char *)__p[0];
                  int v58 = (char *)__p[1];
                  uint64_t v60 = v57;
                  if (__p[1] != __p[0])
                  {
                    do
                    {
                      *((_OWORD *)v60 - 1) = *((_OWORD *)v58 - 1);
                      v60 -= 16;
                      v58 -= 16;
                    }
                    while (v58 != v59);
                    int v58 = (char *)__p[0];
                  }
                  unsigned int v51 = v57 + 16;
                  __p[0] = v60;
                  __p[1] = v57 + 16;
                  *(void *)&long long v140 = &v56[16 * v55];
                  if (v58) {
                    operator delete(v58);
                  }
                }
                else
                {
                  *(_DWORD *)__p[1] = v48;
                  *(void *)(v50 + 4) = v148;
                  *((float *)v50 + 3) = v149;
                  unsigned int v51 = v50 + 16;
                }
                __p[1] = v51;
              }
            }
            v47 += 4;
          }
          BOOL v148 = &v147;
          unsigned int v61 = std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v142, (int *)&v147, (uint64_t)&std::piecewise_construct, &v148);
          uint64_t v62 = (void *)v61[3];
          unint64_t v16 = v136;
          if (v62)
          {
            v61[4] = v62;
            operator delete(v62);
            v61[3] = 0;
            v61[4] = 0;
            _DWORD v61[5] = 0;
          }
          *(_OWORD *)(v61 + 3) = *(_OWORD *)__p;
          _DWORD v61[5] = v140;
        }
        uint64_t v42 = *(void *)(v42 + 16);
      }
      while (v42);
    }
  }
  if (!v146)
  {
LABEL_122:
    float v75 = INFINITY;
    goto LABEL_123;
  }
  uint64_t v63 = *v146;
  uint64_t v64 = v146[1];
  uint64_t v65 = *(void *)(v134 + 328) + 32 * v146[2];
  float v66 = *(float *)(v65 + 12);
  unsigned int v67 = *(_DWORD *)v65;
  int v68 = *(_DWORD *)v65 >> 1;
  LODWORD(v148) = *v146;
  if (v127)
  {
    __p[0] = &v148;
    int v69 = std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v142, (int *)&v148, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    char v71 = (int *)v69[3];
    uint64_t v70 = (int *)v69[4];
    if (v67 >= 2 && *(unsigned char *)(v134 + 261) != 0)
    {
      uint64_t v73 = (int *)v69[3];
      if (v70 == v71) {
        goto LABEL_91;
      }
      *(v70 - 4) = v68;
    }
    uint64_t v73 = v70;
  }
  else
  {
    int v74 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArcs(v134, v63, v67 >> 1);
    char v71 = (int *)*((void *)v74 + 2);
    uint64_t v73 = (int *)*((void *)v74 + 3);
  }
LABEL_91:
  if (v71 == v73) {
    goto LABEL_122;
  }
  float v75 = INFINITY;
  do
  {
    uint64_t v76 = *v71;
    if (v76)
    {
      int v77 = v71[1];
      float v78 = *((float *)v71 + 2);
      if (v77)
      {
        if ((*(unsigned int (**)(void, uint64_t, void, void **))(**(void **)(v134 + 168) + 32))(*(void *)(v134 + 168), v64, v71[1], __p))
        {
          float v79 = NAN;
          if (v78 != -INFINITY)
          {
            float v79 = NAN;
            if (*(float *)&__p[1] != -INFINITY)
            {
              float v79 = INFINITY;
              if (*(float *)&__p[1] != INFINITY && v78 != INFINITY) {
                float v79 = v78 + *(float *)&__p[1];
              }
            }
          }
          int v77 = HIDWORD(__p[0]);
        }
        else
        {
          float v79 = INFINITY;
        }
        float v78 = v79;
      }
      float v81 = *(float *)(*v16 + 4 * v76);
      if (v81 == 0.0)
      {
        float v81 = -(**(float (***)(uint64_t, void, uint64_t))a2)(a2, v137, v76);
        *(float *)(*v16 + 4 * v76) = v81;
      }
      float v82 = NAN;
      if (v78 != -INFINITY && v81 != -INFINITY)
      {
        float v82 = INFINITY;
        BOOL v83 = v81 == INFINITY || v78 == INFINITY;
        float v84 = v78 + v81;
        if (!v83) {
          float v82 = v84;
        }
      }
      if (v77) {
        float v85 = *(float *)(v134 + 212);
      }
      else {
        float v85 = 0.0;
      }
      float v86 = (float)((float)(v66 + v82) + v85) + v145;
      if (v86 < v75) {
        float v75 = v86;
      }
    }
    v71 += 4;
  }
  while (v71 != v73);
LABEL_123:
  uint64_t v87 = v134;
  float v88 = *(float *)(v134 + 272);
  *(_OWORD *)std::string __p = 0u;
  long long v140 = 0u;
  int v141 = 1065353216;
  uint64_t v89 = v131;
  if (v88 != INFINITY) {
    kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindBestWeightForEachLmState((uint64_t *)v134, v131, __p);
  }
  if (v131)
  {
    int v130 = (kaldi::quasar::TokenHeap *)(v134 + 328);
    do
    {
      uint64_t v90 = *(void *)v89;
      unsigned int v138 = HIDWORD(*(void *)v89);
      uint64_t v91 = *(unsigned int *)(v89 + 8);
      uint64_t v92 = *(void *)v130;
      uint64_t v135 = *(void *)v130 + 32 * v91;
      float v93 = *(float *)(v135 + 12);
      uint64_t v132 = v89;
      if (v93 > v10) {
        goto LABEL_182;
      }
      if (v88 != INFINITY)
      {
        BOOL v148 = &v138;
        if (v93 >= (float)(*((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__p, (int *)&v138, (uint64_t)&std::piecewise_construct, &v148)+ 5)+ *(float *)(v87 + 272)))goto LABEL_182; {
      }
        }
      unsigned int v94 = *(_DWORD *)v135;
      int v95 = *(_DWORD *)v135 >> 1;
      unsigned int v147 = v90;
      if (v127)
      {
        BOOL v148 = &v147;
        unint64_t v96 = std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v142, (int *)&v147, (uint64_t)&std::piecewise_construct, &v148);
        float v98 = (int *)v96[3];
        uint64_t v97 = (int *)v96[4];
        if (v94 >= 2 && *(unsigned char *)(v87 + 261) != 0)
        {
          char v100 = (int *)v96[3];
          if (v97 == v98) {
            goto LABEL_139;
          }
          *(v97 - 4) = v95;
        }
        char v100 = v97;
      }
      else
      {
        unsigned int v101 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetArcs(v87, v90, v94 >> 1);
        float v98 = (int *)*((void *)v101 + 2);
        char v100 = (int *)*((void *)v101 + 3);
      }
LABEL_139:
      if (v98 != v100)
      {
        uint64_t v133 = v92 + 32 * v91 + 20;
        int v128 = v91 << 6;
        int v102 = v136;
        while (2)
        {
          uint64_t v103 = *v98;
          if (!v103) {
            goto LABEL_181;
          }
          uint64_t v104 = v98[1];
          float v105 = *((float *)v98 + 2);
          uint64_t v106 = v98[3];
          float v107 = *(float *)(*v102 + 4 * v103);
          if (v107 == 0.0)
          {
            float v107 = -(**(float (***)(uint64_t, void, void))a2)(a2, v137, *v98);
            *(float *)(*v102 + 4 * v103) = v107;
          }
          float v108 = v107 + *(float *)(v135 + 12);
          if (((int)v104 < *(_DWORD *)(v87 + 236) || (int)v104 > *(_DWORD *)(v87 + 240))
            && (float)((float)(v105 + v108) - *(float *)(v87 + 232)) > v75)
          {
            goto LABEL_181;
          }
          uint64_t v109 = *(void *)(v87 + 280);
          if (v109)
          {
            if ((*(_DWORD *)(v135 + 8) & 0x3FLL) != 0)
            {
              LODWORD(v148) = v104;
              if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(v109 + 64), (int *)&v148))
              {
                goto LABEL_181;
              }
            }
          }
          uint64_t v110 = v138;
          float v111 = 0.0;
          if (v104)
          {
            clockid_t v112 = (int *)v133;
            if ((*(uint64_t (**)(void, void, uint64_t, unsigned int **))(**(void **)(v87 + 168) + 32))(*(void *)(v87 + 168), v138, v104, &v148))
            {
              float v113 = NAN;
              if (v105 != -INFINITY)
              {
                float v113 = NAN;
                if (v149 != -INFINITY)
                {
                  float v113 = INFINITY;
                  if (v149 != INFINITY && v105 != INFINITY) {
                    float v113 = v105 + v149;
                  }
                }
              }
              uint64_t v104 = HIDWORD(v148);
              uint64_t v110 = v150;
              if (!HIDWORD(v148))
              {
LABEL_164:
                float v105 = v113;
LABEL_165:
                float v115 = v105 + v111;
                float v116 = v108 + v115;
                if ((float)(v108 + v115) <= v75 && v116 != INFINITY)
                {
                  if ((float)(v116 + v145) < v75) {
                    float v75 = v116 + v145;
                  }
                  LOBYTE(v147) = 0;
                  unsigned int v118 = kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(v87, v106 + (v110 << 32), a3, 1, (char *)&v147, *(_DWORD *)(v135 + 8) & 0x3F, v116);
                  uint64_t v119 = *(void *)v130;
                  int v120 = kaldi::quasar::TokenHeap::NewForwardLink(v130, v118, v103, v104, v115, v107, *v112);
                  uint64_t v121 = v112;
                  uint64_t v122 = v119 + 32 * v118;
                  *uint64_t v121 = v120;
                  uint64_t v123 = *(void *)(v134 + 280);
                  if (v123
                    && v104
                    && (LODWORD(v148) = v104,
                        !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(v123 + 64), (int *)&v148))|| (*(_DWORD *)(v135 + 8) & 0x3FLL) != 0 && (*(void *)v135 & 0x100000000) != 0)
                  {
                    *(void *)v122 |= 0x100000000uLL;
                  }
                  if ((_BYTE)v147)
                  {
                    uint64_t v124 = *(void *)v122 & 0x100000001 | (2 * v103) | (v104 << 33);
                    *(_DWORD *)(v122 + 8) = *(_DWORD *)(v122 + 8) & 0x3F | v128;
                    *(void *)uint64_t v122 = v124;
                    *(_DWORD *)(v119 + 32 * v118 + 28) = v110;
                  }
                  uint64_t v87 = v134;
                }
                int v102 = v136;
LABEL_181:
                v98 += 4;
                if (v98 == v100) {
                  goto LABEL_182;
                }
                continue;
              }
            }
            else
            {
              float v113 = INFINITY;
            }
            float v111 = *(float *)(v87 + 212);
            goto LABEL_164;
          }
          break;
        }
        clockid_t v112 = (int *)v133;
        goto LABEL_165;
      }
LABEL_182:
      uint64_t v125 = *(void *)(v132 + 16);
      *(void *)(v132 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(void *)(v87 + 56);
      *(void *)(v87 + 56) = v132;
      uint64_t v89 = v125;
    }
    while (v125);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__p);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)v142);
  return v75;
}

void sub_1B1EDD38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokens(void *a1, clockid_t a2, float a3)
{
  if ((int)a2 >= 1)
  {
    int64_t v5 = a2;
    uint64_t v6 = a1[11];
    uint64_t v7 = (8 * a2) | 5;
    unint64_t v8 = a2;
    do
    {
      unint64_t v9 = v8 - 1;
      if (*(unsigned char *)(v6 + 8 * (v8 - 1) + 4))
      {
        LOBYTE(v15[0]) = 0;
        char v16 = 0;
        kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinks((uint64_t)a1, v8 - 1, v15, &v16, 0, a3);
        uint64_t v6 = a1[11];
        if (v8 >= 2 && LOBYTE(v15[0])) {
          *(unsigned char *)(v6 + 8 * (v8 - 2) + 4) = 1;
        }
        uint64_t v10 = (v8 - 1);
        if (v16) {
          *(unsigned char *)(v6 + 8 * v10 + 5) = 1;
        }
        *(unsigned char *)(v6 + 8 * v10 + 4) = 0;
      }
      if ((uint64_t)v8 < v5 && *(unsigned char *)(v6 + v7))
      {
        kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame((uint64_t)a1, v8, 0);
        uint64_t v6 = a1[11];
        *(unsigned char *)(v6 + v7) = 0;
      }
      v7 -= 8;
      --v8;
    }
    while (v9 + 1 > 1);
  }
  unint64_t v11 = (void *)a1[57];
  if (v11)
  {
    free(v11);
    a1[57] = 0;
    a1[58] = 0;
  }
  a1[59] = 0;
  a1[60] = 0;
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"PruneActiveTokens: pruned tokens from ", 38);
    int v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" to ", 4);
    unint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" links from ", 12);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15);
  }
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CompactTokensAndLinks((uint64_t)a1, a2);
}

void sub_1B1EDD604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UndoPruneActiveTokensFinal(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 425))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "Cannot undo PruneActiveTokensFinal(undoable=false)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  uint64_t v2 = *(void *)(a1 + 376);
  uint64_t v3 = *(void *)(a1 + 384);
  if (v3 != v2)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    uint64_t v5 = *(void *)(a1 + 328);
    do
    {
      uint64_t v6 = *(void *)(v3 - 8);
      v3 -= 8;
      uint64_t v7 = 8 * (v6 >> 32);
      *(_DWORD *)(v5 + 32 * v6 + 24) = *(_DWORD *)(v4 + v7);
      *(_DWORD *)(v4 + v7) = v6;
      ++*(_DWORD *)(a1 + 288);
    }
    while (v3 != v2);
  }
  *(void *)(a1 + 384) = v2;
  unint64_t v8 = *(unsigned int **)(a1 + 432);
  unint64_t v9 = *(unsigned int **)(a1 + 440);
  if (v8 != v9)
  {
    uint64_t v10 = *(void *)(a1 + 328);
    unint64_t v11 = *(unsigned int **)(a1 + 432);
    do
    {
      *(_DWORD *)(v10 + 32 * *v11 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v11[1];
      v11 += 2;
    }
    while (v11 != v9);
  }
  uint64_t v12 = *(void *)(a1 + 400);
  uint64_t v13 = *(void *)(a1 + 408);
  if (v13 != v12)
  {
    uint64_t v14 = *(void *)(a1 + 328);
    uint64_t v15 = *(void *)(a1 + 344);
    do
    {
      unint64_t v16 = *(void *)(v13 - 8);
      v13 -= 8;
      uint64_t v17 = v14 + 32 * HIDWORD(v16);
      *(_DWORD *)(v15 + 24 * v16 + 20) = *(_DWORD *)(v17 + 20);
      *(_DWORD *)(v17 + 20) = v16;
    }
    while (v13 != v12);
  }
  *(_WORD *)(a1 + 424) = 0;
  *(void *)(a1 + 440) = v8;
  *(void *)(a1 + 384) = v2;
  *(void *)(a1 + 408) = v12;
  *(unsigned char *)(a1 + 296) = 0;
  std::__tree<int>::destroy(a1 + 304, *(void **)(a1 + 312));
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = a1 + 312;
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v21, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"UndoPruneActiveTokensFinal: restored tokens from ", 49);
    float v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" to ", 4);
    float v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" links from ", 12);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v21);
  }
}

void sub_1B1EDD808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

float kaldi::GetCutoffHelper<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig,kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::Elem>(void *a1, uint64_t a2, uint64_t a3, void *a4, float *a5, void *a6, int a7, float a8)
{
  uint64_t v9 = a3;
  int v12 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 12)) {
    int v12 = *(_DWORD *)(a2 + 12);
  }
  if (a7) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  if (*(_DWORD *)(a2 + 4) == 0x7FFFFFFF && v13 == 0)
  {
    uint64_t v32 = 0;
    float v33 = INFINITY;
    if (a3)
    {
      do
      {
        float v34 = *(float *)(a1[41] + 32 * *(unsigned int *)(v9 + 8) + 12);
        if (v34 >= v33)
        {
          BOOL v35 = 1;
        }
        else
        {
          float v33 = *(float *)(a1[41] + 32 * *(unsigned int *)(v9 + 8) + 12);
          BOOL v35 = a6 == 0;
        }
        if (!v35)
        {
          *a6 = v9;
          float v33 = v34;
        }
        uint64_t v9 = *(void *)(v9 + 16);
        ++v32;
      }
      while (v9);
    }
    if (a4) {
      *a4 = v32;
    }
    if (a5) {
      *a5 = *(float *)a2;
    }
    return v33 + *(float *)a2;
  }
  else
  {
    int v48 = v13;
    unint64_t v49 = *(int *)(a2 + 4);
    uint64_t v15 = (void **)(a1 + 17);
    a1[18] = a1[17];
    uint64_t v16 = 0;
    if (a3)
    {
      float v17 = -INFINITY;
      float v18 = INFINITY;
      do
      {
        float v19 = *(float *)(a1[41] + 32 * *(unsigned int *)(v9 + 8) + 12);
        unint64_t v21 = (float *)a1[18];
        unint64_t v20 = a1[19];
        if ((unint64_t)v21 >= v20)
        {
          uint64_t v23 = (float *)*v15;
          uint64_t v24 = ((char *)v21 - (unsigned char *)*v15) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v20 - (void)v23;
          if (v26 >> 1 > v25) {
            unint64_t v25 = v26 >> 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            unsigned int v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 19), v27);
            uint64_t v23 = (float *)a1[17];
            unint64_t v21 = (float *)a1[18];
          }
          else
          {
            unsigned int v28 = 0;
          }
          float v29 = (float *)&v28[4 * v24];
          *float v29 = v19;
          unint64_t v22 = v29 + 1;
          while (v21 != v23)
          {
            float v30 = *--v21;
            a8 = v30;
            *--float v29 = v30;
          }
          a1[17] = v29;
          a1[18] = v22;
          a1[19] = &v28[4 * v27];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          float *v21 = v19;
          unint64_t v22 = v21 + 1;
        }
        a1[18] = v22;
        if (v19 >= v18)
        {
          BOOL v31 = 1;
        }
        else
        {
          float v18 = v19;
          BOOL v31 = a6 == 0;
        }
        if (!v31)
        {
          *a6 = v9;
          float v18 = v19;
        }
        if (v19 > v17) {
          float v17 = v19;
        }
        uint64_t v9 = *(void *)(v9 + 16);
        ++v16;
      }
      while (v9);
    }
    else
    {
      float v18 = INFINITY;
      float v17 = -INFINITY;
    }
    if (a4) {
      *a4 = v16;
    }
    float v37 = *(float *)a2;
    float v36 = INFINITY;
    if (!*(_DWORD *)(a2 + 12)) {
      float v17 = INFINITY;
    }
    float v38 = (float *)a1[17];
    unint64_t v39 = (float *)a1[18];
    unint64_t v40 = v39 - v38;
    if (v40 <= v49)
    {
      int v42 = v48;
    }
    else
    {
      uint64_t v41 = &v38[v49];
      int v42 = v48;
      if (v41 != v39)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v38, v41, v39, a8);
        float v38 = (float *)a1[17];
        unint64_t v39 = (float *)a1[18];
        unint64_t v40 = v39 - v38;
      }
      float v36 = v38[v49];
    }
    float v43 = v18 + v37;
    if (v40 > v42) {
      float v44 = v18;
    }
    else {
      float v44 = v17;
    }
    if (v42 && v40 > v42)
    {
      uint64_t v45 = &v38[v42];
      if (v40 > v49) {
        unint64_t v39 = &v38[v49];
      }
      if (v45 != v39)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v38, v45, v39, v44);
        float v38 = (float *)*v15;
      }
      float v44 = v38[v42];
    }
    if (v36 >= v43)
    {
      if (v44 <= v43)
      {
        *a5 = *(float *)a2;
        return v43;
      }
      else
      {
        if (a5) {
          *a5 = (float)(v44 - v18) + *(float *)(a2 + 28);
        }
        return v44;
      }
    }
    else if (a5)
    {
      *a5 = (float)(v36 - v18) + *(float *)(a2 + 28);
    }
  }
  return v36;
}

uint64_t kaldi::quasar::LazyBuffer<float>::LazyBuffer(uint64_t a1, unsigned int a2, int a3)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 12) = 1;
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "count > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (a3) {
    *(_DWORD *)(a1 + 12) = a2;
  }
  vm_address_t address = 0;
  if (vm_allocate(*MEMORY[0x1E4F14960], &address, 4 * a2, 1711276033))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      uint64_t v5 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": Could not vm_allocate ", 24);
      uint64_t v6 = (void *)std::ostream::operator<<();
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" of ", 4);
      size_t v8 = strlen((const char *)(*(void *)(MEMORY[0x1E4FBA398] + 8) & 0x7FFFFFFFFFFFFFFFLL));
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(void *)(MEMORY[0x1E4FBA398] + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  *(void *)a1 = address;
  return a1;
}

void sub_1B1EDDCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1B1EDDCC4(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void *std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v13 = (void *)(a1 + 16);
  unint64_t v11 = operator new(0x30uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  void v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t v11 = *v21;
LABEL_38:
    void *v21 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *v13;
  *int v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B1EDDF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CompactTokensAndLinks(uint64_t a1, clockid_t a2)
{
  if (*(unsigned char *)(a1 + 424))
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v57, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Skipping compaction final pruning because has been done", 55);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v57);
    }
    return;
  }
  uint64_t v3 = (kaldi::quasar::TokenHeap *)(a1 + 328);
  v55[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v55, a2);
  uint64_t v56 = 0;
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MarkAndTraceLiveTokens((kaldi::quasar::TokenHeap *)a1);
  kaldi::quasar::TokenHeap::RemoveDeadObjects(v3, (uint64_t *)v52);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = v52[0];
    do
    {
      *(_DWORD *)(v4 + 8) = v5[*(unsigned int *)(v4 + 8)];
      uint64_t v4 = *(void *)(v4 + 16);
    }
    while (v4);
  }
  uint64_t v6 = *(_DWORD **)(a1 + 88);
  unint64_t v7 = *(_DWORD **)(a1 + 96);
  if (v6 != v7)
  {
    unint64_t v8 = v52[0];
    do
    {
      *uint64_t v6 = v8[*v6];
      v6 += 2;
    }
    while (v6 != v7);
  }
  uint8x8_t v9 = *(_DWORD **)(a1 + 376);
  uint64_t v10 = *(_DWORD **)(a1 + 384);
  if (v9 != v10)
  {
    uint64_t v11 = v52[0];
    do
    {
      *uint8x8_t v9 = v11[*v9];
      v9 += 2;
    }
    while (v9 != v10);
  }
  unint64_t v12 = *(unsigned int **)(a1 + 400);
  int v13 = *(unsigned int **)(a1 + 408);
  if (v12 != v13)
  {
    float v14 = v53;
    float v15 = v52[0];
    do
    {
      uint64_t v16 = v12[1];
      *unint64_t v12 = v14[*v12];
      v12[1] = v15[v16];
      v12 += 2;
    }
    while (v12 != v13);
  }
  unint64_t v50 = 0;
  uint64_t v51 = 0;
  unint64_t v49 = (uint64_t *)&v50;
  unint64_t v17 = *(void **)(a1 + 304);
  unint64_t v18 = (void *)(a1 + 312);
  if (v17 != (void *)(a1 + 312))
  {
    do
    {
      LODWORD(v57[0]) = *((_DWORD *)v52[0] + *((unsigned int *)v17 + 7));
      HIDWORD(v57[0]) = *((_DWORD *)v17 + 8);
      std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,float>>(&v49, (unsigned int *)v57, v57);
      size_t v19 = (void *)v17[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          size_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (void *)v17[2];
          BOOL v21 = *v20 == (void)v17;
          unint64_t v17 = v20;
        }
        while (!v21);
      }
      unint64_t v17 = v20;
    }
    while (v20 != v18);
  }
  std::__tree<int>::destroy(a1 + 304, *(void **)(a1 + 312));
  unint64_t v22 = v50;
  *(void *)(a1 + 304) = v49;
  *(void *)(a1 + 312) = v22;
  uint64_t v23 = v51;
  *(void *)(a1 + 320) = v51;
  if (v23)
  {
    _DWORD v22[2] = v18;
    unint64_t v49 = (uint64_t *)&v50;
    unint64_t v50 = 0;
    uint64_t v51 = 0;
  }
  else
  {
    *(void *)(a1 + 304) = v18;
  }
  std::string __p = 0;
  unint64_t v47 = 0;
  int v48 = 0;
  uint64_t v24 = (unsigned int **)(a1 + 432);
  unint64_t v25 = *(unsigned int **)(a1 + 432);
  uint64_t v26 = *(unsigned int **)(a1 + 440);
  if (v25 == v26)
  {
    unint64_t v27 = 0;
    if (!v25) {
      goto LABEL_47;
    }
  }
  else
  {
    unint64_t v27 = 0;
    do
    {
      int v28 = *((_DWORD *)v52[0] + *v25);
      unsigned int v29 = v25[1];
      if (v27 >= v48)
      {
        float v30 = __p;
        uint64_t v31 = (v27 - __p) >> 3;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = v48 - __p;
        if ((v48 - __p) >> 2 > v32) {
          unint64_t v32 = v33 >> 2;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34)
        {
          BOOL v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v48, v34);
          float v30 = __p;
          unint64_t v27 = v47;
        }
        else
        {
          BOOL v35 = 0;
        }
        float v36 = &v35[8 * v31];
        *(_DWORD *)float v36 = v28;
        *((_DWORD *)v36 + 1) = v29;
        float v37 = v36;
        if (v27 != v30)
        {
          do
          {
            uint64_t v38 = *((void *)v27 - 1);
            v27 -= 8;
            *((void *)v37 - 1) = v38;
            v37 -= 8;
          }
          while (v27 != v30);
          float v30 = __p;
        }
        unint64_t v27 = v36 + 8;
        std::string __p = v37;
        int v48 = &v35[8 * v34];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v27 = v28;
        *((_DWORD *)v27 + 1) = v29;
        v27 += 8;
      }
      unint64_t v47 = v27;
      v25 += 2;
    }
    while (v25 != v26);
    unint64_t v25 = *v24;
    if (!*v24) {
      goto LABEL_47;
    }
  }
  *(void *)(a1 + 440) = v25;
  operator delete(v25);
  *uint64_t v24 = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  unint64_t v27 = v47;
LABEL_47:
  unint64_t v39 = v48;
  *(void *)(a1 + 432) = __p;
  *(void *)(a1 + 440) = v27;
  *(void *)(a1 + 448) = v39;
  int v48 = 0;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v57, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Compacted in ", 13);
    kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v40);
    uint64_t v41 = (void *)std::ostream::operator<<();
    int v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" ms ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"tokens ", 7);
    float v43 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" -> ", 4);
    float v44 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" and forward links ", 19);
    uint64_t v45 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" -> ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v57);
  }
  std::__tree<int>::destroy((uint64_t)&v49, v50);
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
}

void sub_1B1EDE3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<int>::destroy((uint64_t)&a13, a14);
  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)&a16);
  _Unwind_Resume(a1);
}

kaldi::quasar::TokenHeap *kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MarkAndTraceLiveTokens(kaldi::quasar::TokenHeap *result)
{
  uint64_t v1 = result;
  for (uint64_t i = *((void *)result + 1); i; uint64_t i = *(void *)(i + 16))
    uint64_t result = kaldi::quasar::TokenHeap::MarkAndTraceToken((kaldi::quasar::TokenHeap *)((char *)v1 + 328), *(_DWORD *)(i + 8), 1);
  uint64_t v3 = (unsigned int *)*((void *)v1 + 11);
  for (unint64_t j = (unsigned int *)*((void *)v1 + 12);
        v3 != j;
        uint64_t result = kaldi::quasar::TokenHeap::MarkAndTraceToken((kaldi::quasar::TokenHeap *)((char *)v1 + 328), v5, 1))
  {
    unsigned int v5 = *v3;
    v3 += 2;
  }
  uint64_t v6 = (unsigned int *)*((void *)v1 + 50);
  for (uint64_t k = (unsigned int *)*((void *)v1 + 51); v6 != k; v6 += 2)
  {
    for (uint64_t m = *v6; m; uint64_t m = v9[5])
    {
      uint8x8_t v9 = (_DWORD *)(*((void *)v1 + 43) + 24 * m);
      *v9 |= 1u;
    }
    uint64_t result = kaldi::quasar::TokenHeap::MarkAndTraceToken((kaldi::quasar::TokenHeap *)((char *)v1 + 328), v6[1], 1);
  }
  uint64_t v10 = (unsigned int *)*((void *)v1 + 47);
  for (n = (unsigned int *)*((void *)v1 + 48);
        v10 != n;
        uint64_t result = kaldi::quasar::TokenHeap::MarkAndTraceToken((kaldi::quasar::TokenHeap *)((char *)v1 + 328), v12, 1))
  {
    unsigned int v12 = *v10;
    v10 += 2;
  }
  int v13 = (unsigned int *)*((void *)v1 + 54);
  float v14 = (unsigned int *)*((void *)v1 + 55);
  if (v13 != v14)
  {
    float v15 = (kaldi::quasar::TokenHeap *)((char *)v1 + 328);
    do
    {
      unsigned int v16 = *v13;
      v13 += 2;
      uint64_t result = kaldi::quasar::TokenHeap::MarkAndTraceToken(v15, v16, 1);
    }
    while (v13 != v14);
  }
  return result;
}

uint64_t kaldi::quasar::TokenHeap::RemoveDeadObjects@<X0>(kaldi::quasar::TokenHeap *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = *((unsigned int *)this + 3);
  if (v4 >= 2)
  {
    unint64_t v5 = 1;
    uint64_t v6 = 32;
    do
    {
      uint64_t v7 = *(void *)this + v6;
      if (*(void *)v7)
      {
        unint64_t v8 = (unint64_t)*(unsigned int *)(v7 + 8) >> 6;
        if (v8)
        {
          kaldi::quasar::TokenHeap::MarkAndTraceToken(this, v8, 1);
          unint64_t v4 = *((unsigned int *)this + 3);
        }
      }
      ++v5;
      v6 += 32;
    }
    while (v5 < v4);
  }
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::RemoveDeadElements((uint64_t)this, (std::vector<unsigned int> *)a2);
  uint64_t result = kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::RemoveDeadElements((uint64_t)this + 16, (std::vector<unsigned int> *)a2 + 1);
  if (*((_DWORD *)this + 3) >= 2u)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 1;
    do
    {
      unsigned int v12 = (_DWORD *)(*(void *)this + v10);
      uint64_t v13 = *a2;
      uint64_t v14 = v12[13];
      v12[14] = *(_DWORD *)(*a2 + 4 * v12[14]);
      v12[10] = v12[10] & 0x3F | (*(_DWORD *)(v13 + (((unint64_t)v12[10] >> 4) & 0xFFFFFFC)) << 6);
      v12[13] = *(_DWORD *)(a2[3] + 4 * v14);
      ++v11;
      v10 += 32;
    }
    while (v11 < *((unsigned int *)this + 3));
  }
  uint64_t v15 = *((unsigned int *)this + 7);
  if (v15 >= 2)
  {
    uint64_t v16 = *a2;
    uint64_t v17 = a2[3];
    unint64_t v18 = (_DWORD *)(*((void *)this + 2) + 44);
    uint64_t v19 = v15 - 1;
    do
    {
      *(v18 - 4) = *(_DWORD *)(v16 + 4 * *(v18 - 4));
      _DWORD *v18 = *(_DWORD *)(v17 + 4 * *v18);
      v18 += 6;
      --v19;
    }
    while (v19);
  }
  return result;
}

void sub_1B1EDE678(_Unwind_Exception *a1)
{
  kaldi::LatticeWordAligner::ComputationState::~ComputationState(v1);
  _Unwind_Resume(a1);
}

kaldi::quasar::TokenHeap *kaldi::quasar::TokenHeap::MarkAndTraceToken(kaldi::quasar::TokenHeap *this, unsigned int a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = this;
    uint64_t v4 = a2;
    uint64_t v5 = *(void *)this;
    uint64_t v6 = *(void *)this + 32 * a2;
    if ((*(void *)v6 & 1) == 0)
    {
      int v7 = *(_DWORD *)(v6 + 8);
      *(void *)v6 |= 1uLL;
      *(_DWORD *)(v6 + 8) = v7;
      for (uint64_t i = *(unsigned int *)(v6 + 20); i; uint64_t i = v9[5])
      {
        uint8x8_t v9 = (_DWORD *)(*((void *)this + 2) + 24 * i);
        *v9 |= 1u;
      }
      if (a3)
      {
        while (1)
        {
          uint64_t v10 = v5 + 32 * v4;
          unsigned int v11 = *(_DWORD *)(v10 + 24);
          if (!v11) {
            break;
          }
          this = (kaldi::quasar::TokenHeap *)kaldi::quasar::TokenHeap::MarkAndTraceToken(v3, *(_DWORD *)(v10 + 24), 0);
          uint64_t v4 = v11;
          uint64_t v5 = *(void *)v3;
        }
      }
    }
  }
  return this;
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::RemoveDeadElements(uint64_t a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::size_type v4 = *(unsigned int *)(a1 + 12);
  std::vector<int>::resize(this, v4);
  if (v4 < 2)
  {
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v5 = 1;
    uint64_t v6 = 32;
    uint64_t v7 = 1;
    do
    {
      uint64_t v8 = *(void *)a1;
      uint8x8_t v9 = (_OWORD *)(*(void *)a1 + v6);
      if (*(void *)v9)
      {
        if (v5 != v7)
        {
          uint64_t v10 = (_OWORD *)(v8 + 32 * v7);
          long long v11 = v9[1];
          *uint64_t v10 = *v9;
          v10[1] = v11;
          uint64_t v8 = *(void *)a1;
        }
        *(void *)(v8 + 32 * v7) &= ~1uLL;
        this->__begin_[v5] = v7++;
      }
      else
      {
        this->__begin_[v5] = -1;
      }
      ++v5;
      v6 += 32;
    }
    while (v4 != v5);
  }
  return kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::ShrinkBuffer(a1, v7);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::RemoveDeadElements(uint64_t a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::size_type v4 = *(unsigned int *)(a1 + 12);
  std::vector<int>::resize(this, v4);
  if (v4 < 2)
  {
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v5 = 1;
    uint64_t v6 = 24;
    uint64_t v7 = 1;
    do
    {
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)a1 + v6;
      if (*(unsigned char *)v9)
      {
        if (v5 != v7)
        {
          uint64_t v10 = v8 + 24 * v7;
          long long v11 = *(_OWORD *)v9;
          *(void *)(v10 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(void *)(v9 + 16);
          *(_OWORD *)uint64_t v10 = v11;
          uint64_t v8 = *(void *)a1;
        }
        *(_DWORD *)(v8 + 24 * v7) &= ~1u;
        this->__begin_[v5] = v7++;
      }
      else
      {
        this->__begin_[v5] = -1;
      }
      ++v5;
      v6 += 24;
    }
    while (v4 != v5);
  }
  return kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::ShrinkBuffer(a1, v7);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::Token>::ShrinkBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t result = sysconf(29);
  uint64_t v5 = (result - 1 + 32 * a2) & -result;
  uint64_t v6 = (result - 1 + 32 * *(unsigned int *)(a1 + 12)) & -result;
  if (v6 != v5)
  {
    uint64_t result = madvise((void *)(v5 + *(void *)a1), v6 - v5, 7);
    if (result)
    {
      int v7 = result;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" Could not madvise: ", 20);
      uint64_t v9 = strerror(v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, v9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::ShrinkBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t result = sysconf(29);
  uint64_t v5 = (result - 1 + 24 * a2) & -result;
  uint64_t v6 = (result - 1 + 24 * *(unsigned int *)(a1 + 12)) & -result;
  if (v6 != v5)
  {
    uint64_t result = madvise((void *)(v5 + *(void *)a1), v6 - v5, 7);
    if (result)
    {
      int v7 = result;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" Could not madvise: ", 20);
      uint64_t v9 = strerror(v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, v9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,float>>(uint64_t **a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void ***std::unique_ptr<std::vector<kaldi::quasar::BetterTracebackWord>>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<kaldi::quasar::BetterTracebackWord>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1B3EA8670](v2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<kaldi::quasar::BetterTracebackWord>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::quasar::BetterTracebackWord>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<kaldi::quasar::BetterTracebackWord>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 40);
      v4 -= 40;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 32) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::StepBackward(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = (unint64_t)*a2 >> 33;
  if (v4 && v4 != *(_DWORD *)(*(void *)(a1 + 8) + 24))
  {
    unint64_t v6 = *(void *)(a1 + 152);
    unsigned int v7 = *(char **)(a1 + 144);
    if ((unint64_t)v7 >= v6)
    {
      unsigned int v9 = *(char **)(a1 + 136);
      uint64_t v10 = (v7 - v9) >> 2;
      if ((unint64_t)(v10 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v6 - (void)v9;
      unint64_t v12 = (uint64_t)(v6 - (void)v9) >> 1;
      if (v12 <= v10 + 1) {
        unint64_t v12 = v10 + 1;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 152, v13);
        unsigned int v9 = *(char **)(a1 + 136);
        unsigned int v7 = *(char **)(a1 + 144);
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v15 = &v14[4 * v10];
      uint64_t v16 = &v14[4 * v13];
      *(_DWORD *)uint64_t v15 = v4;
      uint64_t v8 = v15 + 4;
      while (v7 != v9)
      {
        int v17 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v17;
        v15 -= 4;
      }
      *(void *)(a1 + 136) = v15;
      *(void *)(a1 + 144) = v8;
      *(void *)(a1 + 152) = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(_DWORD *)unsigned int v7 = v4;
      uint64_t v8 = v7 + 4;
    }
    *(void *)(a1 + 144) = v8;
    LODWORD(v3) = *(_DWORD *)a2;
  }
  if (v3 >= 2)
  {
    unsigned int v18 = v3 >> 1;
    if ((*(_DWORD *)(a1 + 72) & 0x80000000) != 0) {
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 64);
    }
    int v19 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)a1, v18);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v38, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"BetterTraceback STEP current_frame_: ", 37);
      uint64_t v20 = (void *)std::ostream::operator<<();
      BOOL v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" phone: ", 8);
      uint64_t v22 = *(void *)(a1 + 32);
      if (v22) {
        (*(void (**)(void **__return_ptr))(*(void *)v22 + 88))(v36);
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(v36, "");
      }
      if ((v37 & 0x80u) == 0) {
        uint64_t v23 = v36;
      }
      else {
        uint64_t v23 = (void **)v36[0];
      }
      if ((v37 & 0x80u) == 0) {
        uint64_t v24 = v37;
      }
      else {
        uint64_t v24 = (uint64_t)v36[1];
      }
      unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" final: ", 8);
      kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)a1, v18);
      uint64_t v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" isloop: ", 9);
      kaldi::TransitionModel::IsSelfLoop(*(kaldi::TransitionModel **)a1, v18);
      unint64_t v27 = (void *)std::ostream::operator<<();
      int v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" current_phone_: ", 17);
      kaldi::quasar::BetterTracebackPhone::ToString((uint64_t *)__p, (kaldi::quasar::BetterTracebackPhone *)(a1 + 68), *(const fst::SymbolTable **)(a1 + 32));
      if ((v35 & 0x80u) == 0) {
        unsigned int v29 = __p;
      }
      else {
        unsigned int v29 = (void **)__p[0];
      }
      if ((v35 & 0x80u) == 0) {
        uint64_t v30 = v35;
      }
      else {
        uint64_t v30 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      if ((char)v35 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v37 < 0) {
        operator delete(v36[0]);
      }
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v38);
    }
    int v31 = *(_DWORD *)(a1 + 64);
    if (v31 < 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v38, "current_frame_ >= 0");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
    }
    if (v19 == *(_DWORD *)(a1 + 16))
    {
      ++*(_DWORD *)(a1 + 128);
    }
    else
    {
      if (kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)a1, v18)
        && (*(_DWORD *)(a1 + 68) & 0x80000000) == 0)
      {
        kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::AddPhone(a1);
      }
      BOOL IsSelfLoop = kaldi::TransitionModel::IsSelfLoop(*(kaldi::TransitionModel **)a1, v18);
      int v31 = *(_DWORD *)(a1 + 64);
      if (!IsSelfLoop)
      {
        *(_DWORD *)(a1 + 68) = v31;
        int v33 = *(_DWORD *)(a1 + 80) + *(_DWORD *)(a1 + 128);
        *(_DWORD *)(a1 + 76) = v19;
        *(_DWORD *)(a1 + 80) = v33;
        *(_DWORD *)(a1 + 128) = 0;
      }
    }
    *(_DWORD *)(a1 + 64) = v31 - 1;
  }
}

void sub_1B1EDEF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a22);
  _Unwind_Resume(a1);
}

void sub_1B1EDEFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::Finalize(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 68) & 0x80000000) == 0) {
    kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::AddPhone(a1);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v44, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"BetterTraceback FINALIZE utt_trailing_sil_start_frame_: ", 56);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", utt_speech_start_frame_: ", 27);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v44);
  }
  uint64_t v3 = (long long *)(a1 + 160);
  unint64_t v4 = (__n128 **)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144) - v5;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 >> 2;
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    uint64_t v10 = (void **)(a1 + 168);
    do
    {
      unint64_t v11 = (char *)*v10;
      if (*v10 == v3)
      {
        unint64_t v11 = (char *)operator new(0x38uLL);
        int v24 = *(_DWORD *)(v5 + 4 * v7);
        *((void *)v11 + 3) = 0;
        *((void *)v11 + 4) = 0;
        *((void *)v11 + 1) = v3;
        *((void *)v11 + 2) = 0;
        *((void *)v11 + 5) = -1;
        *((_DWORD *)v11 + 12) = -1;
        *((_DWORD *)v11 + 13) = v24;
        uint64_t v25 = *(void *)(a1 + 160);
        *(void *)unint64_t v11 = v25;
        *(void *)(v25 + 8) = v11;
        *(void *)(a1 + 160) = v11;
        ++*(void *)(a1 + 176);
      }
      else
      {
        uint64_t v12 = *(void *)(a1 + 8);
        uint64_t v15 = *(void *)(v12 + 40);
        uint64_t v13 = v12 + 40;
        uint64_t v14 = v15;
        int v16 = *(_DWORD *)(v5 + 4 * v7);
        if (v15)
        {
          uint64_t v17 = v13;
          do
          {
            int v18 = *(_DWORD *)(v14 + 28);
            BOOL v19 = v18 < v16;
            if (v18 >= v16) {
              uint64_t v20 = (uint64_t *)v14;
            }
            else {
              uint64_t v20 = (uint64_t *)(v14 + 8);
            }
            if (!v19) {
              uint64_t v17 = v14;
            }
            uint64_t v14 = *v20;
          }
          while (*v20);
          if (v17 != v13 && v16 >= *(_DWORD *)(v17 + 28)) {
            goto LABEL_22;
          }
        }
        if (v16 == *(_DWORD *)(*(void *)(a1 + 8) + 24))
        {
LABEL_22:
          BOOL v21 = operator new(0x38uLL);
          int v22 = *(_DWORD *)(v5 + 4 * v7);
          v21[3] = 0;
          v21[4] = 0;
          v21[2] = 0;
          v21[5] = -1;
          *((_DWORD *)v21 + 12) = -1;
          *((_DWORD *)v21 + 13) = v22;
          uint64_t v23 = *(void *)v11;
          *(void *)(v23 + 8) = v21;
          void *v21 = v23;
          *(void *)unint64_t v11 = v21;
          v21[1] = v11;
          ++*(void *)(a1 + 176);
          unint64_t v11 = (char *)v21;
        }
        else
        {
          *((_DWORD *)v11 + 13) = v16;
        }
      }
      uint64_t v10 = (void **)(v11 + 8);
      ++v7;
    }
    while (v7 != v9);
  }
  *(void *)(a1 + 144) = v5;
  uint64_t v26 = (uint64_t *)std::remove_if[abi:ne180100]<std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *>,kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::Finalize(void)::{lambda(std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *> const&)#1}>(*(void *)(a1 + 168), a1 + 160, a1);
  std::list<kaldi::quasar::BetterTracebackWord>::erase(a1 + 160, v26, (uint64_t *)(a1 + 160));
  if (*(void *)(a1 + 176))
  {
    std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *>>(*v4, (__n128 *)(a1 + 160));
    unint64_t v27 = *v4;
    if (*v4 != (__n128 *)v3)
    {
      unsigned __int32 v28 = *(_DWORD *)(a1 + 56);
      do
      {
        unsigned int v29 = (_DWORD *)v27[1].n128_u64[0];
        uint64_t v30 = (_DWORD *)v27[1].n128_u64[1];
        if (v29 == v30)
        {
          v27[2].n128_u32[2] = v28;
          v27[2].n128_u32[3] = v28;
          int v31 = v29;
        }
        else
        {
          v27[2].n128_u32[2] = *(v30 - 4);
          unsigned __int32 v28 = v29[1];
          v27[2].n128_u32[3] = v28;
          if ((*(_DWORD *)(a1 + 16) & 0x80000000) != 0)
          {
            v27[3].n128_u32[0] = v28;
            do
            {
              if (!kaldi::SilencePhoneSet::isSilencePhone(*(kaldi::SilencePhoneSet **)(a1 + 24), v29[2])) {
                break;
              }
              unsigned __int32 v32 = *v29;
              v29 += 4;
              v27[3].n128_u32[0] = v32;
            }
            while (v29 != v30);
            int v31 = (_DWORD *)v27[1].n128_u64[0];
            uint64_t v30 = (_DWORD *)v27[1].n128_u64[1];
          }
          else
          {
            v27[3].n128_u32[0] = v28 - v29[3] + 1;
            int v31 = v29;
          }
          int v33 = v30 - 4;
          if (v31 != v30 && v33 > (_OWORD *)v31)
          {
            unsigned __int8 v35 = v31 + 4;
            do
            {
              long long v44 = *((_OWORD *)v35 - 1);
              *((_OWORD *)v35 - 1) = *v33;
              *v33-- = v44;
              BOOL v36 = v35 >= (_DWORD *)v33;
              v35 += 4;
            }
            while (!v36);
            int v31 = (_DWORD *)v27[1].n128_u64[0];
            unsigned int v29 = (_DWORD *)v27[1].n128_u64[1];
          }
          else
          {
            unsigned int v29 = v30;
          }
        }
        unsigned __int8 v37 = std::remove_if[abi:ne180100]<std::__wrap_iter<kaldi::quasar::BetterTracebackPhone *>,kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::Finalize(void)::{lambda(std::__wrap_iter<kaldi::quasar::BetterTracebackPhone *> const&)#2}>(v31, v29, a1);
        if ((_DWORD *)v27[1].n128_u64[1] != v37) {
          v27[1].n128_u64[1] = (unint64_t)v37;
        }
        unint64_t v27 = (__n128 *)v27->n128_u64[1];
      }
      while (v27 != (__n128 *)v3);
    }
    if (*(unsigned char *)(a1 + 48) && (*(_DWORD *)(a1 + 16) & 0x80000000) == 0)
    {
      *(void *)&long long v44 = &v44;
      *((void *)&v44 + 1) = &v44;
      uint64_t v45 = 0;
      uint64_t v38 = *v4;
      if (*v4 != (__n128 *)v3)
      {
        uint64_t v39 = 0;
        clockid_t v40 = (char *)&v44;
        do
        {
          if (v39
            && v38[3].n128_u32[1] == *((_DWORD *)v40 + 13)
            && (uint64_t v41 = (_DWORD *)v38[1].n128_u64[0], v38[1].n128_u64[1] - (void)v41 == 16)
            && (uint64_t v42 = *((void *)v40 + 3), v42 - *((void *)v40 + 2) == 16)
            && v41[2] == *(_DWORD *)(v42 - 8)
            && !*(_DWORD *)(v42 - 4))
          {
            *(void *)(v40 + 44) = *(unint64_t *)((char *)&v38[2].n128_u64[1] + 4);
            *(_DWORD *)(v42 - 12) = v41[1];
            *(_DWORD *)(v42 - 4) = v41[3];
          }
          else
          {
            clockid_t v40 = std::__list_imp<kaldi::quasar::BetterTracebackWord>::__create_node[abi:ne180100]<kaldi::quasar::BetterTracebackWord const&>((uint64_t)&v44, 0, 0, (uint64_t)&v38[1]);
            uint64_t v43 = v44;
            *(void *)clockid_t v40 = v44;
            *((void *)v40 + 1) = &v44;
            *(void *)(v43 + 8) = v40;
            uint64_t v39 = v45 + 1;
            *(void *)&long long v44 = v40;
            ++v45;
          }
          uint64_t v38 = (__n128 *)v38->n128_u64[1];
        }
        while (v38 != (__n128 *)v3);
      }
      if (v3 != &v44) {
        std::list<kaldi::quasar::BetterTracebackWord>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>>((uint64_t)v3, *((uint64_t *)&v44 + 1), (uint64_t)&v44);
      }
      std::__list_imp<kaldi::quasar::BetterTracebackWord>::clear((uint64_t *)&v44);
    }
  }
}

void sub_1B1EDF40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::GetWords@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = a1 + 160;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4 == a1 + 160)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = v4;
    do
    {
      ++v6;
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7 != v5);
  }
  return std::vector<kaldi::quasar::BetterTracebackWord>::__init_with_size[abi:ne180100]<std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>>(a2, v4, v5, v6);
}

double kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::BetterTraceback(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(void *)(a1 + 40) = a7;
  *(unsigned char *)(a1 + 48) = a9;
  *(_DWORD *)(a1 + 52) = a8;
  *(_DWORD *)(a1 + 56) = a8;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = a8;
  *(_OWORD *)(a1 + 68) = xmmword_1B2565910;
  int v9 = *(_DWORD *)(a3 + 24);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  double result = NAN;
  *(void *)(a1 + 112) = -1;
  *(_DWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 124) = v9;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = a1 + 160;
  *(void *)(a1 + 168) = a1 + 160;
  *(void *)(a1 + 176) = 0;
  if (!*(unsigned char *)(a3 + 56))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"info_->reorder", 14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return result;
}

void sub_1B1EDF560(_Unwind_Exception *a1)
{
  std::__list_imp<kaldi::quasar::BetterTracebackWord>::clear(v2);
  unint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 144) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 96) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void std::__list_imp<kaldi::quasar::BetterTracebackWord>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      uint64_t v5 = (uint64_t *)v2[1];
      std::__list_imp<std::pair<std::vector<int>,float>>::__delete_node[abi:ne180100]<>((int)a1, v2);
      uint64_t v2 = v5;
    }
  }
}

void std::default_delete<kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__list_imp<kaldi::quasar::BetterTracebackWord>::clear(a2 + 20);
    uint64_t v3 = (void *)a2[17];
    if (v3)
    {
      a2[18] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)a2[11];
    if (v4)
    {
      a2[12] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

uint64_t kaldi::quasar::BetterTracebackPhone::ToString(kaldi::quasar::BetterTracebackPhone *this, const fst::SymbolTable *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Phone(start_frame=", 18);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", end_frame=", 12);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", phone_id=", 11);
  unint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", trailing_blanks=", 18);
  uint64_t v7 = (void *)std::ostream::operator<<();
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", phone=", 8);
  if (a2)
  {
    (*(void (**)(void **__return_ptr, const fst::SymbolTable *, void))(*(void *)a2 + 88))(&__p, a2, *((int *)this + 2));
    unsigned int v9 = HIBYTE(v19);
    uint64_t v10 = (void **)__p;
    uint64_t v11 = v18;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    unsigned int v9 = 0;
    std::string __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  if ((v9 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = v10;
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = v11;
  }
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)")", 1);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  v20[0] = *MEMORY[0x1E4FBA408];
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v21[0] = v15;
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v23);
}

void sub_1B1EDF8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

double kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::AddPhone(uint64_t a1)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v29, 3);
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"BetterTraceback ADD current_phone_: ", 36);
    kaldi::quasar::BetterTracebackPhone::ToString((uint64_t *)__p, (kaldi::quasar::BetterTracebackPhone *)(a1 + 68), *(const fst::SymbolTable **)(a1 + 32));
    if ((v28 & 0x80u) == 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    if ((v28 & 0x80u) == 0) {
      uint64_t v4 = v28;
    }
    else {
      uint64_t v4 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v29);
  }
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(_DWORD *)(a1 + 16) & 0x80000000) != 0)
    {
      if (kaldi::SilencePhoneSet::isSilencePhone(*(kaldi::SilencePhoneSet **)(a1 + 24), *(_DWORD *)(a1 + 76)))
      {
        *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 68);
        goto LABEL_17;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 72) - *(_DWORD *)(a1 + 80) + 1;
    }
    *(unsigned char *)(a1 + 60) = 1;
  }
LABEL_17:
  int v5 = kaldi::WordBoundaryInfo::TypeOfPhone(*(kaldi::WordBoundaryInfo **)(a1 + 8), *(_DWORD *)(a1 + 76));
  unint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = (long long *)(a1 + 68);
  unint64_t v8 = (char **)(a1 + 88);
  unsigned int v9 = *(long long **)(a1 + 96);
  if ((unint64_t)v9 >= v6)
  {
    uint64_t v12 = ((char *)v9 - *v8) >> 4;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v6 - (void)*v8;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 104, v15);
    }
    else {
      int v16 = 0;
    }
    uint64_t v17 = &v16[16 * v12];
    uint64_t v18 = &v16[16 * v15];
    long long v10 = *v7;
    *(_OWORD *)uint64_t v17 = *v7;
    uint64_t v11 = v17 + 16;
    uint64_t v20 = *(char **)(a1 + 88);
    uint64_t v19 = *(char **)(a1 + 96);
    if (v19 != v20)
    {
      do
      {
        long long v10 = *((_OWORD *)v19 - 1);
        *((_OWORD *)v17 - 1) = v10;
        v17 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      uint64_t v19 = *v8;
    }
    *(void *)(a1 + 88) = v17;
    *(void *)(a1 + 96) = v11;
    *(void *)(a1 + 104) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    long long v10 = *v7;
    *unsigned int v9 = *v7;
    uint64_t v11 = v9 + 1;
  }
  *(void *)(a1 + 96) = v11;
  int v21 = *(_DWORD *)(a1 + 68) - 1;
  *(_DWORD *)(a1 + 68) = -1;
  *(_DWORD *)(a1 + 72) = v21;
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  if ((v5 & 0xFFFFFFFD) == 1)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 112);
    char v22 = std::__list_imp<kaldi::quasar::BetterTracebackWord>::__create_node[abi:ne180100]<kaldi::quasar::BetterTracebackWord&>(a1 + 160, 0, 0, a1 + 88);
    *((void *)v22 + 1) = a1 + 160;
    uint64_t v23 = *(void *)(a1 + 160);
    *(void *)char v22 = v23;
    *(void *)(v23 + 8) = v22;
    *(void *)(a1 + 160) = v22;
    ++*(void *)(a1 + 176);
    int v24 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
    uint64_t v25 = *(void **)(a1 + 88);
    if (v25)
    {
      *(void *)(a1 + 96) = v25;
      operator delete(v25);
      *unint64_t v8 = 0;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
    }
    *unint64_t v8 = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)&long long v10 = -1;
    *(void *)(a1 + 112) = -1;
    *(_DWORD *)(a1 + 120) = -1;
    *(_DWORD *)(a1 + 124) = v24;
  }
  return *(double *)&v10;
}

void sub_1B1EDFB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a15);
  _Unwind_Resume(a1);
}

char *std::__list_imp<kaldi::quasar::BetterTracebackWord>::__create_node[abi:ne180100]<kaldi::quasar::BetterTracebackWord&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v7 = a2;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 3) = 0;
  *((void *)v7 + 4) = 0;
  *((void *)v7 + 2) = 0;
  std::vector<kaldi::quasar::BetterTracebackPhone>::__init_with_size[abi:ne180100]<kaldi::quasar::BetterTracebackPhone*,kaldi::quasar::BetterTracebackPhone*>((void *)v7 + 2, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a4 + 24);
  return v7;
}

void sub_1B1EDFC28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::quasar::BetterTracebackPhone>::__init_with_size[abi:ne180100]<kaldi::quasar::BetterTracebackPhone*,kaldi::quasar::BetterTracebackPhone*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1EDFC9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<kaldi::quasar::BetterTracebackWord>::erase(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = *a2;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    do
    {
      uint64_t v7 = (uint64_t *)a2[1];
      --*(void *)(a1 + 16);
      std::__list_imp<std::pair<std::vector<int>,float>>::__delete_node[abi:ne180100]<>(a1, a2);
      a2 = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

uint64_t std::remove_if[abi:ne180100]<std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *>,kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::Finalize(void)::{lambda(std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *> const&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v5 = a1;
  while (*(_DWORD *)(v5 + 52) != *(_DWORD *)(*(void *)(a3 + 8) + 24))
  {
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == a2) {
      return a2;
    }
  }
  if (v5 == a2) {
    return a2;
  }
  for (uint64_t i = *(void *)(v5 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)(i + 52) != *(_DWORD *)(*(void *)(a3 + 8) + 24))
    {
      std::vector<int>::__move_assign(v5 + 16, (__n128 *)(i + 16));
      *(_OWORD *)(v5 + 40) = *(_OWORD *)(i + 40);
      uint64_t v5 = *(void *)(v5 + 8);
    }
  }
  return v5;
}

__n128 *std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *>>(__n128 *result, __n128 *a2)
{
  uint64_t v2 = a2;
  for (uint64_t i = result; result != a2; uint64_t i = result)
  {
    uint64_t v2 = (__n128 *)a2->n128_u64[0];
    if (result == v2) {
      break;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *> &,std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *> &>((uint64_t)&i, &v2);
    a2 = v2;
    double result = (__n128 *)i->n128_u64[1];
  }
  return result;
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *> &,std::__list_iterator<kaldi::quasar::BetterTracebackWord,void *> &>(uint64_t a1, __n128 **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 1;
  uint64_t v4 = *(void *)a1 + 16;
  __n128 v5 = *(__n128 *)v4;
  unint64_t v6 = *(void *)(*(void *)a1 + 32);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  __n128 v9 = v5;
  __n128 v10 = *(__n128 *)(v4 + 24);
  std::vector<int>::__move_assign(v4, v3);
  *(__n128 *)(v4 + 24) = *(__n128 *)((char *)v2 + 40);
  uint64_t v7 = (void *)v2[1].n128_u64[0];
  if (v7)
  {
    v2[1].n128_u64[1] = (unint64_t)v7;
    operator delete(v7);
  }
  v2[1] = v9;
  v2[2].n128_u64[0] = v6;
  __n128 result = v10;
  *(__n128 *)((char *)v2 + 40) = v10;
  return result;
}

_DWORD *std::remove_if[abi:ne180100]<std::__wrap_iter<kaldi::quasar::BetterTracebackPhone *>,kaldi::quasar::OnlineLatticeBiglmFasterDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::BetterTraceback::Finalize(void)::{lambda(std::__wrap_iter<kaldi::quasar::BetterTracebackPhone *> const&)#2}>(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  if (result == a2) {
    return a2;
  }
  while (*result < *(_DWORD *)(a3 + 52))
  {
    result += 4;
    if (result == a2) {
      return a2;
    }
  }
  if (result == a2) {
    return a2;
  }
  for (uint64_t i = result + 4; i != (_OWORD *)a2; ++i)
  {
    if (*(_DWORD *)i < *(_DWORD *)(a3 + 52))
    {
      *(_OWORD *)__n128 result = *i;
      result += 4;
    }
  }
  return result;
}

char *std::__list_imp<kaldi::quasar::BetterTracebackWord>::__create_node[abi:ne180100]<kaldi::quasar::BetterTracebackWord const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v7 = a2;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 3) = 0;
  *((void *)v7 + 4) = 0;
  *((void *)v7 + 2) = 0;
  std::vector<kaldi::quasar::BetterTracebackPhone>::__init_with_size[abi:ne180100]<kaldi::quasar::BetterTracebackPhone*,kaldi::quasar::BetterTracebackPhone*>((void *)v7 + 2, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a4 + 24);
  return v7;
}

void sub_1B1EDFF7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::list<kaldi::quasar::BetterTracebackWord>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      if (v6 != v4) {
        std::vector<kaldi::quasar::BetterTracebackPhone>::__assign_with_size[abi:ne180100]<kaldi::quasar::BetterTracebackPhone*,kaldi::quasar::BetterTracebackPhone*>((char *)(v6 + 16), *(char **)(v4 + 16), *(void *)(v4 + 24), (uint64_t)(*(void *)(v4 + 24) - *(void *)(v4 + 16)) >> 4);
      }
      *(_OWORD *)(v6 + 40) = *(_OWORD *)(v4 + 40);
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
  {
    return (uint64_t *)std::list<kaldi::quasar::BetterTracebackWord>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>>(a1, (char **)a1, v4, a3);
  }
  else
  {
    return std::list<kaldi::quasar::BetterTracebackWord>::erase(a1, (uint64_t *)v6, (uint64_t *)a1);
  }
}

char *std::list<kaldi::quasar::BetterTracebackWord>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>>(uint64_t a1, char **a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    size_t v8 = std::__list_imp<kaldi::quasar::BetterTracebackWord>::__create_node[abi:ne180100]<kaldi::quasar::BetterTracebackWord const&>(a1, 0, 0, a3 + 16);
    __n128 v9 = v8;
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = (uint64_t)v8;
      do
      {
        size_t v8 = std::__list_imp<kaldi::quasar::BetterTracebackWord>::__create_node[abi:ne180100]<kaldi::quasar::BetterTracebackWord const&>(a1, v12, 0, v10 + 16);
        *(void *)(v12 + 8) = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    unint64_t v13 = *a2;
    *((void *)v13 + 1) = v9;
    *(void *)__n128 v9 = v13;
    *a2 = v8;
    *((void *)v8 + 1) = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return (char *)a2;
}

void sub_1B1EE012C(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    std::__list_imp<std::pair<std::vector<int>,float>>::__delete_node[abi:ne180100]<>(v1, v3);
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B1EE014C(_Unwind_Exception *a1)
{
}

char *std::vector<kaldi::quasar::BetterTracebackPhone>::__assign_with_size[abi:ne180100]<kaldi::quasar::BetterTracebackPhone*,kaldi::quasar::BetterTracebackPhone*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  __n128 v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    __n128 v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    __n128 v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

void *std::vector<kaldi::quasar::BetterTracebackWord>::__init_with_size[abi:ne180100]<std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::BetterTracebackWord>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,kaldi::quasar::BetterTracebackWord*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1EE02D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::quasar::BetterTracebackWord>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::BetterTracebackWord>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,std::__list_const_iterator<kaldi::quasar::BetterTracebackWord,void *>,kaldi::quasar::BetterTracebackWord*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
      std::vector<kaldi::quasar::BetterTracebackPhone>::__init_with_size[abi:ne180100]<kaldi::quasar::BetterTracebackPhone*,kaldi::quasar::BetterTracebackPhone*>((void *)v4, *(const void **)(v6 + 16), *(void *)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 4);
      *(_OWORD *)(v4 + 24) = *(_OWORD *)(v6 + 40);
      uint64_t v6 = *(void *)(v6 + 8);
      uint64_t v4 = v11 + 40;
      v11 += 40;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::BetterTracebackWord>,kaldi::quasar::BetterTracebackWord*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1EE03A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::BetterTracebackWord>,kaldi::quasar::BetterTracebackWord*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::BetterTracebackWord>,kaldi::quasar::BetterTracebackWord*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::BetterTracebackWord>,kaldi::quasar::BetterTracebackWord*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      __n128 v5 = *(void **)(v3 - 40);
      v3 -= 40;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 32) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::vector<kaldi::quasar::BetterTracebackWord>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<kaldi::quasar::BetterTracebackWord>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__shared_ptr_emplace<quasar::LatticeGenerationContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A614B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LatticeGenerationContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A614B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::LatticeGenerationContext>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::LatticeGenerationContext>::destroy[abi:ne180100]((uint64_t)&v1, (void *)(a1 + 24));
}

void std::allocator<quasar::LatticeGenerationContext>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[10];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[6];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  __n128 v5 = (std::__shared_weak_count *)a2[4];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a2[2];
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::DecoderPassData,std::allocator<quasar::DecoderPassData>,quasar::DecoderPassData&,void>@<X0>(const quasar::DecoderPassData *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x370uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::DecoderPassData>::__shared_ptr_emplace[abi:ne180100]<quasar::DecoderPassData&,std::allocator<quasar::DecoderPassData>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1EE05C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::DecoderPassData>::__shared_ptr_emplace[abi:ne180100]<quasar::DecoderPassData&,std::allocator<quasar::DecoderPassData>,0>(void *a1, const quasar::DecoderPassData *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FFB0;
  quasar::DecoderPassData::DecoderPassData((quasar::DecoderPassData *)(a1 + 3), a2);
  return a1;
}

void sub_1B1EE0624(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::DecoderPassData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FFB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::DecoderPassData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FFB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::DecoderPassData>::__on_zero_shared(uint64_t a1)
{
}

quasar::DecoderPassData *quasar::DecoderPassData::DecoderPassData(quasar::DecoderPassData *this, const quasar::DecoderPassData *a2)
{
  *(void *)this = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 2) = *((void *)a2 + 2);
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)this + 3) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 4) = *((void *)a2 + 4);
  uint64_t v6 = *((void *)a2 + 5);
  *((void *)this + 5) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 6) = *((void *)a2 + 6);
  uint64_t v7 = *((void *)a2 + 7);
  *((void *)this + 7) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 8) = *((void *)a2 + 8);
  uint64_t v8 = *((void *)a2 + 9);
  *((void *)this + 9) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 10) = *((void *)a2 + 10);
  uint64_t v9 = *((void *)a2 + 11);
  *((void *)this + 11) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)this + 104, (uint64_t)a2 + 104);
  *((void *)this + 21) = *((void *)a2 + 21);
  uint64_t v10 = *((void *)a2 + 22);
  *((void *)this + 22) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 23) = *((void *)a2 + 23);
  uint64_t v11 = *((void *)a2 + 24);
  *((void *)this + 24) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *((void *)a2 + 25);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((void *)this + 25) = v12;
  *((void *)this + 27) = *((void *)a2 + 27);
  uint64_t v13 = *((void *)a2 + 28);
  *((void *)this + 28) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v14 = *(_OWORD *)((char *)a2 + 232);
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = 0;
  *(_OWORD *)((char *)this + 232) = v14;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>((void *)this + 31, *((void **)a2 + 31), *((void **)a2 + 32), (uint64_t)(*((void *)a2 + 32) - *((void *)a2 + 31)) >> 4);
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>((void *)this + 34, *((void **)a2 + 34), *((void **)a2 + 35), (uint64_t)(*((void *)a2 + 35) - *((void *)a2 + 34)) >> 4);
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 37, *((const void **)a2 + 37), *((void *)a2 + 38), (uint64_t)(*((void *)a2 + 38) - *((void *)a2 + 37)) >> 2);
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__init_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((void *)this + 40, *((void *)a2 + 40), *((void *)a2 + 41), (uint64_t)(*((void *)a2 + 41) - *((void *)a2 + 40)) >> 5);
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 43, *((const void **)a2 + 43), *((void *)a2 + 44), (uint64_t)(*((void *)a2 + 44) - *((void *)a2 + 43)) >> 2);
  std::map<int,float>::map[abi:ne180100]((uint64_t *)this + 46, (uint64_t)a2 + 368);
  *((void *)this + 49) = *((void *)a2 + 49);
  uint64_t v15 = *((void *)a2 + 50);
  *((void *)this + 50) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  std::unordered_map<int,std::pair<int,int>>::unordered_map((uint64_t)this + 408, (uint64_t)a2 + 408);
  *((_DWORD *)this + 112) = *((_DWORD *)a2 + 112);
  *((void *)this + 57) = *((void *)a2 + 57);
  uint64_t v16 = *((void *)a2 + 58);
  *((void *)this + 58) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>((void *)this + 59, *((void **)a2 + 59), *((void **)a2 + 60), (uint64_t)(*((void *)a2 + 60) - *((void *)a2 + 59)) >> 4);
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>((void *)this + 62, *((void **)a2 + 62), *((void **)a2 + 63), (uint64_t)(*((void *)a2 + 63) - *((void *)a2 + 62)) >> 4);
  *((void *)this + 65) = *((void *)a2 + 65);
  uint64_t v17 = *((void *)a2 + 66);
  *((void *)this + 66) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 67) = *((void *)a2 + 67);
  uint64_t v18 = *((void *)a2 + 68);
  *((void *)this + 68) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = *((void *)a2 + 69);
  *(_DWORD *)((char *)this + 559) = *(_DWORD *)((char *)a2 + 559);
  *((void *)this + 69) = v19;
  *((void *)this + 71) = 0;
  *((void *)this + 73) = 0;
  *((void *)this + 72) = 0;
  std::vector<std::weak_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>((void *)this + 71, *((void **)a2 + 71), *((void **)a2 + 72), (uint64_t)(*((void *)a2 + 72) - *((void *)a2 + 71)) >> 4);
  *((void *)this + 74) = *((void *)a2 + 74);
  uint64_t v20 = *((void *)a2 + 75);
  *((void *)this + 75) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((char *)a2 + 631) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 608), *((const std::string::value_type **)a2 + 76), *((void *)a2 + 77));
  }
  else
  {
    long long v21 = *((_OWORD *)a2 + 38);
    *((void *)this + 78) = *((void *)a2 + 78);
    *((_OWORD *)this + 38) = v21;
  }
  if (*((char *)a2 + 655) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 632), *((const std::string::value_type **)a2 + 79), *((void *)a2 + 80));
  }
  else
  {
    long long v22 = *(_OWORD *)((char *)a2 + 632);
    *((void *)this + 81) = *((void *)a2 + 81);
    *(_OWORD *)((char *)this + 632) = v22;
  }
  uint64_t v23 = *((void *)a2 + 82);
  *((_WORD *)this + 332) = *((_WORD *)a2 + 332);
  *((void *)this + 82) = v23;
  *((void *)this + 84) = *((void *)a2 + 84);
  uint64_t v24 = *((void *)a2 + 85);
  *((void *)this + 85) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 86) = *((void *)a2 + 86);
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 696, (uint64_t)a2 + 696);
  *((unsigned char *)this + 736) = *((unsigned char *)a2 + 736);
  *((void *)this + 93) = 0;
  *((void *)this + 95) = 0;
  *((void *)this + 94) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 31, *((long long **)a2 + 93), *((long long **)a2 + 94), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 94) - *((void *)a2 + 93)) >> 3));
  *((void *)this + 98) = 0;
  *((_OWORD *)this + 48) = 0u;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 32, *((long long **)a2 + 96), *((long long **)a2 + 97), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 97) - *((void *)a2 + 96)) >> 3));
  *((void *)this + 101) = 0;
  *(_OWORD *)((char *)this + 792) = 0u;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 33, *((long long **)a2 + 99), *((long long **)a2 + 100), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 100) - *((void *)a2 + 99)) >> 3));
  *((_WORD *)this + 408) = *((_WORD *)a2 + 408);
  *((void *)this + 103) = 0;
  *((void *)this + 105) = 0;
  *((void *)this + 104) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((void *)this + 103, *((uint64_t **)a2 + 103), *((uint64_t **)a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 104) - *((void *)a2 + 103)) >> 3));
  int v25 = *((_DWORD *)a2 + 212);
  *((unsigned char *)this + 852) = *((unsigned char *)a2 + 852);
  *((_DWORD *)this + 212) = v25;
  return this;
}

void sub_1B1EE0BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, void **a17, uint64_t a18, kaldi::SilencePhoneSet *a19, uint64_t a20)
{
  if (*(char *)(v20 + 631) < 0) {
    operator delete(*v21);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v20 + 600);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  a20 = a10;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  uint64_t v24 = *(std::__shared_weak_count **)(v20 + 544);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  int v25 = *(std::__shared_weak_count **)(v20 + 528);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  a20 = a11;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a20 = a12;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  uint64_t v26 = *(std::__shared_weak_count **)(v20 + 464);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a13);
  unint64_t v27 = *(std::__shared_weak_count **)(v20 + 400);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::__tree<int>::destroy(a14, *(void **)(v20 + 376));
  unsigned __int8 v28 = *a15;
  if (*a15)
  {
    *(void *)(v20 + 352) = v28;
    operator delete(v28);
  }
  a20 = a16;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  unsigned int v29 = *a17;
  if (*a17)
  {
    *(void *)(v20 + 304) = v29;
    operator delete(v29);
  }
  a20 = a18;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  uint64_t v30 = *(std::__shared_weak_count **)(v20 + 224);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  int v31 = *(std::__shared_weak_count **)(v20 + 192);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  unsigned __int32 v32 = *(std::__shared_weak_count **)(v20 + 176);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  kaldi::SilencePhoneSet::~SilencePhoneSet(a19);
  int v33 = *(std::__shared_weak_count **)(v20 + 88);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  unint64_t v34 = *(std::__shared_weak_count **)(v20 + 72);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  unsigned __int8 v35 = *(std::__shared_weak_count **)(v20 + 56);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  BOOL v36 = *(std::__shared_weak_count **)(v20 + 40);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  unsigned __int8 v37 = *(std::__shared_weak_count **)(v20 + 24);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v20 + 8);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(a1);
}

void sub_1B1EE0DB8()
{
}

void sub_1B1EE0DC0()
{
}

void sub_1B1EE0DC8()
{
}

void sub_1B1EE0DD0()
{
}

void sub_1B1EE0DD8()
{
}

void sub_1B1EE0DE0()
{
}

void sub_1B1EE0DE8()
{
}

void sub_1B1EE0DF0()
{
}

void sub_1B1EE0DF8()
{
}

void sub_1B1EE0E00()
{
}

void sub_1B1EE0E08()
{
}

void sub_1B1EE0E10()
{
}

uint64_t *std::map<int,float>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<quasar::PronType,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::PronType,int>,std::__tree_node<std::__value_type<quasar::PronType,int>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1B1EE0E58(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,std::pair<int,int>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::pair<int const,std::pair<int,int>> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_1B1EE0ED0(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::pair<int const,std::pair<int,int>> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x20uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  v10[2] = *(void *)a3;
  *((_DWORD *)v10 + 6) = *(_DWORD *)(a3 + 8);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B1EE10F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,quasar::DecoderChainOutput&,void>@<X0>(const quasar::DecoderChainOutput *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x4A8uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<quasar::DecoderChainOutput&,std::allocator<quasar::DecoderChainOutput>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1EE1154(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<quasar::DecoderChainOutput&,std::allocator<quasar::DecoderChainOutput>,0>(void *a1, const quasar::DecoderChainOutput *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60598;
  quasar::DecoderChainOutput::DecoderChainOutput((quasar::DecoderChainOutput *)(a1 + 3), a2);
  return a1;
}

void sub_1B1EE11B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

quasar::DecoderChainOutput *quasar::DecoderChainOutput::DecoderChainOutput(quasar::DecoderChainOutput *this, const quasar::DecoderChainOutput *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this, *(long long **)a2, *((long long **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((void *)this + 3, *((uint64_t **)a2 + 3), *((uint64_t **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 9, *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((void *)this + 12, *((void *)a2 + 12), *((void *)a2 + 13), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 5));
  std::map<std::string,std::shared_ptr<void>>::map[abi:ne180100]((uint64_t *)this + 15, (const void ***)a2 + 15);
  *((_WORD *)this + 72) = *((_WORD *)a2 + 72);
  *((void *)this + 19) = *((void *)a2 + 19);
  uint64_t v4 = *((void *)a2 + 20);
  *((void *)this + 20) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 21) = *((void *)a2 + 21);
  uint64_t v5 = *((void *)a2 + 22);
  *((void *)this + 22) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *((unsigned char *)this + 184) = 0;
  *((unsigned char *)this + 200) = 0;
  if (*((unsigned char *)a2 + 200))
  {
    *((void *)this + 23) = *((void *)a2 + 23);
    uint64_t v6 = *((void *)a2 + 24);
    *((void *)this + 24) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    *((unsigned char *)this + 200) = 1;
  }
  *((void *)this + 26) = *((void *)a2 + 26);
  uint64_t v7 = *((void *)a2 + 27);
  *((void *)this + 27) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 28) = *((void *)a2 + 28);
  uint64_t v8 = *((void *)a2 + 29);
  *((void *)this + 29) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"read() method not implemented\n", 30) = *((void *)a2 + 30);
  uint64_t v9 = *((void *)a2 + 31);
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 32) = *((void *)a2 + 32);
  uint64_t v10 = *((void *)a2 + 33);
  *((void *)this + 33) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 34) = *((void *)a2 + 34);
  uint64_t v11 = *((void *)a2 + 35);
  *((void *)this + 35) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 36) = *((void *)a2 + 36);
  uint64_t v12 = *((void *)a2 + 37);
  *((void *)this + 37) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 38) = *((void *)a2 + 38);
  uint64_t v13 = *((void *)a2 + 39);
  *((void *)this + 39) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 40) = *((void *)a2 + 40);
  uint64_t v14 = *((void *)a2 + 41);
  *((void *)this + 41) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 42) = *((void *)a2 + 42);
  uint64_t v15 = *((void *)a2 + 43);
  *((void *)this + 43) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 44) = *((void *)a2 + 44);
  uint64_t v16 = *((void *)a2 + 45);
  *((void *)this + 45) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  std::vector<std::set<std::string>>::__init_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>((uint64_t *)this + 46, *((const void ****)a2 + 46), *((const void ****)a2 + 47), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 47) - *((void *)a2 + 46)) >> 3));
  *((void *)this + 49) = *((void *)a2 + 49);
  uint64_t v17 = *((void *)a2 + 50);
  *((void *)this + 50) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 51) = *((void *)a2 + 51);
  uint64_t v18 = *((void *)a2 + 52);
  *((void *)this + 52) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 53) = *((void *)a2 + 53);
  uint64_t v19 = *((void *)a2 + 54);
  *((void *)this + 54) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  long long v20 = *(_OWORD *)((char *)a2 + 456);
  *(_OWORD *)((char *)this + 440) = *(_OWORD *)((char *)a2 + 440);
  *(_OWORD *)((char *)this + 456) = v20;
  *((void *)this + 59) = *((void *)a2 + 59);
  uint64_t v21 = *((void *)a2 + 60);
  *((void *)this + 60) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 61) = *((void *)a2 + 61);
  uint64_t v22 = *((void *)a2 + 62);
  *((void *)this + 62) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  long long v23 = *(_OWORD *)((char *)a2 + 504);
  long long v24 = *(_OWORD *)((char *)a2 + 520);
  *((void *)this + 67) = *((void *)a2 + 67);
  *(_OWORD *)((char *)this + 504) = v23;
  *(_OWORD *)((char *)this + 520) = v24;
  *((void *)this + 68) = *((void *)a2 + 68);
  uint64_t v25 = *((void *)a2 + 69);
  *((void *)this + 69) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 70) = *((void *)a2 + 70);
  uint64_t v26 = *((void *)a2 + 71);
  *((void *)this + 71) = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  int v27 = *((_DWORD *)a2 + 144);
  *((_WORD *)this + 290) = *((_WORD *)a2 + 290);
  *((_DWORD *)this + 144) = v27;
  *((void *)this + 73) = 0;
  *((void *)this + 75) = 0;
  *((void *)this + 74) = 0;
  std::vector<quasar::LmeInfo>::__init_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>((void *)this + 73, *((long long **)a2 + 73), *((long long **)a2 + 74), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 74) - *((void *)a2 + 73)) >> 3));
  *((void *)this + 76) = *((void *)a2 + 76);
  uint64_t v28 = *((void *)a2 + 77);
  *((void *)this + 77) = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = *((void *)a2 + 78);
  *((_DWORD *)this + 158) = *((_DWORD *)a2 + 158);
  *((void *)this + 78) = v29;
  *((void *)this + 80) = *((void *)a2 + 80);
  uint64_t v30 = *((void *)a2 + 81);
  *((void *)this + 81) = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 84) = 0;
  *((_OWORD *)this + 41) = 0u;
  std::vector<quasar::ItnOverride>::__init_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>((std::string *)((char *)this + 656), *((long long **)a2 + 82), *((long long **)a2 + 83), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 83) - *((void *)a2 + 82)) >> 3));
  *(_OWORD *)((char *)this + 680) = *(_OWORD *)((char *)a2 + 680);
  quasar::AudioAnalytics::AudioAnalytics((quasar::DecoderChainOutput *)((char *)this + 696), (const quasar::DecoderChainOutput *)((char *)a2 + 696));
  *((void *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  std::vector<std::vector<kaldi::quasar::WordConf>>::__init_with_size[abi:ne180100]<std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>((void *)this + 105, *((uint64_t **)a2 + 105), *((uint64_t **)a2 + 106), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 106) - *((void *)a2 + 105)) >> 3));
  *((unsigned char *)this + 864) = *((unsigned char *)a2 + 864);
  *((unsigned char *)this + 872) = *((unsigned char *)a2 + 872);
  if (*((char *)a2 + 903) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 880), *((const std::string::value_type **)a2 + 110), *((void *)a2 + 111));
  }
  else
  {
    long long v31 = *((_OWORD *)a2 + 55);
    *((void *)this + 112) = *((void *)a2 + 112);
    *((_OWORD *)this + 55) = v31;
  }
  long long v32 = *(_OWORD *)((char *)a2 + 904);
  *((void *)this + 115) = *((void *)a2 + 115);
  *(_OWORD *)((char *)this + 904) = v32;
  *((unsigned char *)this + 928) = *((unsigned char *)a2 + 928);
  if (*((char *)a2 + 959) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 39, *((const std::string::value_type **)a2 + 117), *((void *)a2 + 118));
  }
  else
  {
    long long v33 = *(_OWORD *)((char *)a2 + 936);
    *((void *)this + 119) = *((void *)a2 + 119);
    *(_OWORD *)((char *)this + 936) = v33;
  }
  long long v34 = *((_OWORD *)a2 + 60);
  *((void *)this + 122) = *((void *)a2 + 122);
  *((_OWORD *)this + 60) = v34;
  *((void *)this + 123) = 0;
  *((void *)this + 125) = 0;
  *((void *)this + 124) = 0;
  std::vector<std::pair<int,BOOL>>::__init_with_size[abi:ne180100]<std::pair<int,BOOL>*,std::pair<int,BOOL>*>((char *)this + 984, *((uint64_t **)a2 + 123), *((uint64_t **)a2 + 124), (uint64_t)(*((void *)a2 + 124) - *((void *)a2 + 123)) >> 3);
  *((void *)this + 128) = 0;
  *((_OWORD *)this + 63) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 126, *((const void **)a2 + 126), *((void *)a2 + 127), (uint64_t)(*((void *)a2 + 127) - *((void *)a2 + 126)) >> 2);
  if (*((char *)a2 + 1055) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 43, *((const std::string::value_type **)a2 + 129), *((void *)a2 + 130));
  }
  else
  {
    long long v35 = *(_OWORD *)((char *)a2 + 1032);
    *((void *)this + 1std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = *((void *)a2 + 131);
    *(_OWORD *)((char *)this + 1032) = v35;
  }
  *((void *)this + 132) = *((void *)a2 + 132);
  uint64_t v36 = *((void *)a2 + 133);
  *((void *)this + 133) = v36;
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  long long v37 = *((_OWORD *)a2 + 67);
  long long v38 = *((_OWORD *)a2 + 68);
  *((_DWORD *)this + 276) = *((_DWORD *)a2 + 276);
  *((_OWORD *)this + 68) = v38;
  *((_OWORD *)this + 67) = v37;
  *((void *)this + 139) = 0;
  *((void *)this + 141) = 0;
  *((void *)this + 140) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((void *)this + 139, *((void *)a2 + 139), *((void *)a2 + 140), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 140) - *((void *)a2 + 139)) >> 5));
  *((unsigned char *)this + 1136) = *((unsigned char *)a2 + 1136);
  uint64_t v39 = (std::string *)((char *)this + 1144);
  if (*((char *)a2 + 1167) < 0)
  {
    std::string::__init_copy_ctor_external(v39, *((const std::string::value_type **)a2 + 143), *((void *)a2 + 144));
  }
  else
  {
    long long v40 = *(_OWORD *)((char *)a2 + 1144);
    *((void *)this + 145) = *((void *)a2 + 145);
    *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
  }
  return this;
}

void sub_1B1EE18F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, quasar::AudioAnalytics *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  uint64_t v25 = *(std::__shared_weak_count **)(v18 + 1064);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (*(char *)(v18 + 1055) < 0) {
    operator delete(*v20);
  }
  uint64_t v26 = *v21;
  if (*v21)
  {
    *(void *)(v18 + 10kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v26;
    operator delete(v26);
  }
  int v27 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 992) = v27;
    operator delete(v27);
  }
  if (*(char *)(v18 + 959) < 0) {
    operator delete(*v23);
  }
  if (*(char *)(v18 + 903) < 0) {
    operator delete(*v22);
  }
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  quasar::AudioAnalytics::~AudioAnalytics(a10);
  a18 = a11;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  uint64_t v28 = *(std::__shared_weak_count **)(v18 + 648);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v29 = *(std::__shared_weak_count **)(v18 + 616);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  a18 = a12;
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  uint64_t v30 = *(std::__shared_weak_count **)(v18 + 568);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  long long v31 = *(std::__shared_weak_count **)(v18 + 552);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  long long v32 = *(std::__shared_weak_count **)(v18 + 496);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  long long v33 = *(std::__shared_weak_count **)(v18 + 480);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  long long v34 = *(std::__shared_weak_count **)(v18 + 432);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  long long v35 = *(std::__shared_weak_count **)(v18 + 416);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(v18 + 400);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  a18 = a13;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  long long v37 = *(std::__shared_weak_count **)(v18 + 360);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  long long v38 = *(std::__shared_weak_count **)(v18 + 344);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  uint64_t v39 = *(std::__shared_weak_count **)(v18 + 328);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  long long v40 = *(std::__shared_weak_count **)(v18 + 312);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  uint64_t v41 = *(std::__shared_weak_count **)(v18 + 296);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v18 + 280);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  uint64_t v43 = *(std::__shared_weak_count **)(v18 + 264);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  long long v44 = *(std::__shared_weak_count **)(v18 + 248);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  uint64_t v45 = *(std::__shared_weak_count **)(v18 + 232);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  uint64_t v46 = *(std::__shared_weak_count **)(v18 + 216);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (*(unsigned char *)(v18 + 200))
  {
    unint64_t v47 = *(std::__shared_weak_count **)(v18 + 192);
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
  }
  int v48 = *(std::__shared_weak_count **)(v18 + 176);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  unint64_t v49 = *(std::__shared_weak_count **)(v18 + 160);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a14, *(void **)(v18 + 128));
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  unint64_t v50 = *a15;
  if (*a15)
  {
    *(void *)(v18 + 80) = v50;
    operator delete(v50);
  }
  a18 = a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a18 = a17;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a18 = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

void sub_1B1EE1B40()
{
}

void sub_1B1EE1B48()
{
}

void sub_1B1EE1B50()
{
}

void sub_1B1EE1B58()
{
}

void sub_1B1EE1B60()
{
}

void sub_1B1EE1B68()
{
}

void sub_1B1EE1B70()
{
}

void sub_1B1EE1B78()
{
}

void sub_1B1EE1B80()
{
}

void sub_1B1EE1B88()
{
}

uint64_t *std::map<std::string,std::shared_ptr<void>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::shared_ptr<void>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<void>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1EE1BD0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::shared_ptr<void>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<void>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void *std::vector<quasar::LmeInfo>::__init_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*,quasar::LmeInfo*,quasar::LmeInfo*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1EE1CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*,quasar::LmeInfo*,quasar::LmeInfo*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  uint64_t v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    do
    {
      uint64_t v8 = v6 - 1;
      uint64_t v7 = *((void *)v6 - 2);
      *(_DWORD *)(v4 + 8) = *((_DWORD *)v6 - 2);
      *(void *)uint64_t v4 = v7;
      uint64_t v9 = (std::string *)(v4 + 16);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v15;
      }
      else
      {
        long long v10 = *v6;
        *(void *)(v4 + 32) = *((void *)v6 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
      v4 += 40;
      uint64_t v15 = v4;
      uint64_t v6 = (long long *)((char *)v6 + 40);
    }
    while ((long long *)((char *)v8 + 40) != a3);
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1B1EE1DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 40;
  }
}

void *std::vector<std::vector<kaldi::quasar::WordConf>>::__init_with_size[abi:ne180100]<std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1EE1EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<kaldi::quasar::WordConf>::__init_with_size[abi:ne180100]<kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(v4, *v6, v6[1], 0xF83E0F83E0F83E1 * ((v6[1] - *v6) >> 3));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1EE1F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<kaldi::quasar::WordConf>::__init_with_size[abi:ne180100]<kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<kaldi::quasar::WordConf>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1EE200C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::quasar::WordConf>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xF83E0F83E0F83FLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[264 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF83E0F83E0F83FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(264 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      kaldi::quasar::WordConf::WordConf((std::string *)(a4 + v7), (const kaldi::quasar::WordConf *)(a2 + v7));
      v7 += 264;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1EE2130(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 264;
    do
    {
      kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)(v4 + v2));
      v2 -= 264;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *kaldi::quasar::WordConf::WordConf(std::string *this, const kaldi::quasar::WordConf *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  long long v10 = *((_OWORD *)a2 + 9);
  std::string::size_type v11 = *((void *)a2 + 20);
  this[7].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__r.__words[2] = v11;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v10;
  this[7].__r_.__value_.__l.__size_ = 0;
  this[7].__r_.__value_.__r.__words[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this[7].__r_.__value_.__r.__words, *((const void **)a2 + 21), *((void *)a2 + 22), (uint64_t)(*((void *)a2 + 22) - *((void *)a2 + 21)) >> 2);
  long long v12 = *((_OWORD *)a2 + 12);
  int v13 = *((_DWORD *)a2 + 52);
  this[9].__r_.__value_.__r.__words[0] = 0;
  LODWORD(this[8].__r_.__value_.__r.__words[2]) = v13;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v12;
  this[9].__r_.__value_.__l.__size_ = 0;
  this[9].__r_.__value_.__r.__words[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(this[9].__r_.__value_.__r.__words, *((const void **)a2 + 27), *((void *)a2 + 28), (uint64_t)(*((void *)a2 + 28) - *((void *)a2 + 27)) >> 2);
  this[10].__r_.__value_.__r.__words[0] = 0;
  this[10].__r_.__value_.__l.__size_ = 0;
  this[10].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 10, *((long long **)a2 + 30), *((long long **)a2 + 31), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 31) - *((void *)a2 + 30)) >> 3));
  return this;
}

void sub_1B1EE233C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    unint64_t v3 = v1;
    std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

char *std::vector<std::pair<int,BOOL>>::__init_with_size[abi:ne180100]<std::pair<int,BOOL>*,std::pair<int,BOOL>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    __n128 result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    long long v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1EE24DC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::SplitRadixComplexFft<float>::SplitRadixComplexFft(uint64_t a1, int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  if (a2 >= 2)
  {
    a3.i32[0] = a2;
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(a3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.i32[0] < 2u)
    {
      int v5 = 0;
      *(_DWORD *)(a1 + 24) = a2;
      do
      {
        ++v5;
        BOOL v6 = v3 >= 3;
        BOOL v7 = v3 == 3;
        v3 >>= 1;
      }
      while (!v7 && v6);
      *(_DWORD *)(a1 + 28) = v5;
      kaldi::SplitRadixComplexFft<float>::ComputeTables();
    }
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"SplitRadixComplexFft called with invalid number of points ", 58);
  std::ostream::operator<<();
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
}

void sub_1B1EE25C0(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::SplitRadixComplexFft<float>::ComputeTables()
{
}

uint64_t kaldi::SplitRadixComplexFft<float>::Compute(uint64_t a1, float *a2, float *a3, int a4)
{
  if (a4) {
    int v5 = a3;
  }
  else {
    int v5 = a2;
  }
  if (a4) {
    BOOL v6 = a2;
  }
  else {
    BOOL v6 = a3;
  }
  uint64_t result = kaldi::SplitRadixComplexFft<float>::ComputeRecursive(a1, v6, v5, *(_DWORD *)(a1 + 28));
  int v8 = *(_DWORD *)(a1 + 28);
  if (v8 >= 2)
  {
    kaldi::SplitRadixComplexFft<float>::BitReversePermute(a1, (uint64_t)v6, v8);
    int v9 = *(_DWORD *)(a1 + 28);
    return kaldi::SplitRadixComplexFft<float>::BitReversePermute(a1, (uint64_t)v5, v9);
  }
  return result;
}

uint64_t kaldi::SplitRadixComplexFft<float>::ComputeRecursive(uint64_t result, float *a2, float *a3, unsigned int a4)
{
  if ((a4 & 0x80000000) != 0)
  {
LABEL_30:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v84, "Error: logn is out of bounds in SRFFT");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v84);
  }
  uint64_t v6 = result;
  uint64_t v7 = a4;
  while ((unint64_t)v7 > 2)
  {
    int v8 = 1 << v7;
    if (1 << v7 >= 0) {
      int v9 = 1 << v7;
    }
    else {
      int v9 = v8 + 1;
    }
    int v10 = v9 >> 1;
    int v11 = v8 / 4;
    uint64_t v12 = (uint64_t)v9 >> 1;
    if (v8 >= 0) {
      int v13 = 1 << v7;
    }
    else {
      int v13 = v8 + 7;
    }
    uint64_t v14 = &a2[v10];
    uint64_t v15 = &a3[v10];
    if (v8 >= 2)
    {
      uint64_t v16 = a3;
      uint64_t v17 = a2;
      do
      {
        float v18 = v17[v12];
        float v19 = *v17 + v18;
        v17[v12] = *v17 - v18;
        *v17++ = v19;
        float v20 = *v16;
        float v21 = v16[v12];
        v16[v12] = *v16 - v21;
        *v16++ = v20 + v21;
        --v10;
      }
      while (v10);
      if (v8 >= 4)
      {
        int v22 = v8 / 4;
        long long v23 = v15;
        long long v24 = v14;
        do
        {
          float v25 = *v24 + v23[v11];
          float v26 = v24[v11];
          float v27 = *v23 + v26;
          float *v23 = *v23 - v26;
          v24[v11] = *v24 - v23[v11];
          *v24++ = v25;
          v23[v11] = v27;
          ++v23;
          --v22;
        }
        while (v22);
      }
    }
    if (v7 < 4)
    {
      uint64_t v28 = 0;
      uint64_t v30 = 0;
      long long v31 = 0;
      long long v32 = 0;
      long long v33 = 0;
      long long v34 = 0;
    }
    else
    {
      uint64_t v28 = *(float **)(*(void *)(v6 + 40) + 8 * (v7 - 4));
      uint64_t v29 = 4 * v11 - 8;
      uint64_t v30 = (float *)((char *)v28 + v29);
      long long v31 = (float *)((char *)v28 + v29 + v29);
      long long v32 = (float *)((char *)v31 + v29);
      long long v33 = (float *)((char *)v31 + v29 + v29);
      long long v34 = (float *)((char *)v33 + v29);
    }
    if (v8 >= 8)
    {
      uint64_t v35 = 0;
      int v36 = v13 >> 3;
      if (v11 <= 2) {
        int v37 = 2;
      }
      else {
        int v37 = v11;
      }
      uint64_t v38 = (uint64_t)&a2[v12 + 1];
      uint64_t v39 = (uint64_t)&v14[v11 + 1];
      uint64_t v40 = (uint64_t)&a3[v12 + 1];
      uint64_t v41 = (uint64_t)&v15[v11 + 1];
      int v42 = v37 - 1;
      int v43 = v36 - 1;
      do
      {
        if (v43 == v35)
        {
          float v44 = *(float *)(v38 + 4 * v35);
          float v45 = *(float *)(v40 + 4 * v35);
          *(float *)(v40 + 4 * v35) = (float)(v45 - v44) * 0.70711;
          *(float *)(v38 + 4 * v35) = (float)(v44 + v45) * 0.70711;
          float v46 = *(float *)(v41 + 4 * v35);
          float v47 = *(float *)(v39 + 4 * v35);
          *(float *)(v41 + 4 * v35) = (float)(v46 + v47) * -0.70711;
          *(float *)(v39 + 4 * v35) = (float)(v46 - v47) * 0.70711;
        }
        else
        {
          float v48 = *v28++;
          float v49 = *(float *)(v38 + 4 * v35);
          float v50 = *(float *)(v40 + 4 * v35);
          float v51 = v48 * (float)(v49 + v50);
          float v52 = *v30++;
          float v53 = v52;
          float v54 = *v31++;
          *(float *)(v38 + 4 * v35) = v51 + (float)(v54 * v50);
          *(float *)(v40 + 4 * v35) = v51 + (float)(v53 * v49);
          float v55 = *v32++;
          float v56 = *(float *)(v39 + 4 * v35);
          float v57 = *(float *)(v41 + 4 * v35);
          float v58 = v55 * (float)(v56 + v57);
          float v59 = *v33++;
          float v60 = v59;
          float v61 = *v34++;
          *(float *)(v39 + 4 * v35) = v58 + (float)(v61 * v57);
          *(float *)(v41 + 4 * v35) = v58 + (float)(v60 * v56);
        }
        ++v35;
      }
      while (v42 != v35);
    }
    kaldi::SplitRadixComplexFft<float>::ComputeRecursive(v6, a2, a3, (v7 - 1));
    uint64_t result = kaldi::SplitRadixComplexFft<float>::ComputeRecursive(v6, v14, v15, v7 - 2);
    a2 += 3 * v11;
    a3 += 3 * v11;
    BOOL v62 = v7 < 2;
    v7 -= 2;
    if (v62) {
      goto LABEL_30;
    }
  }
  if (v7 == 1)
  {
    float v80 = a2[1];
    float v81 = *a2 - v80;
    *a2 = *a2 + v80;
    a2[1] = v81;
    float v82 = a3[1];
    float v83 = *a3 - v82;
    *a3 = *a3 + v82;
    a3[1] = v83;
  }
  else if (v7 == 2)
  {
    float v63 = a2[2];
    float v64 = *a2 + v63;
    a2[2] = *a2 - v63;
    *a2 = v64;
    float v65 = a3[2];
    float v66 = *a3 + v65;
    a3[2] = *a3 - v65;
    *a3 = v66;
    float v67 = a2[1];
    float v68 = a2[3];
    a2[3] = v67 - v68;
    a2[1] = v67 + v68;
    float v69 = a3[1];
    float v70 = a3[3];
    a3[3] = v69 - v70;
    a3[1] = v69 + v70;
    float v71 = a2[1];
    float v72 = *a2 - v71;
    *a2 = *a2 + v71;
    a2[1] = v72;
    float v73 = a3[1];
    float v74 = *a3 - v73;
    *a3 = *a3 + v73;
    a3[1] = v74;
    float v76 = a3[2];
    float v75 = a3[3];
    float v77 = a2[3];
    float v78 = a2[2] + v75;
    a3[2] = v76 - v77;
    float v79 = a2[2] - v75;
    a2[2] = v78;
    a2[3] = v79;
    a3[3] = v76 + v77;
  }
  return result;
}

void sub_1B1EE2CA4(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::SplitRadixComplexFft<float>::BitReversePermute(uint64_t result, uint64_t a2, int a3)
{
  int v3 = a3 >> 1;
  uint64_t v4 = (1 << (a3 >> 1));
  if ((int)v4 >= 2)
  {
    uint64_t v5 = *(void *)(result + 32);
    uint64_t v6 = a2 + 4 * v4 + 4;
    for (uint64_t i = 1; i != v4; ++i)
    {
      int v8 = *(_DWORD *)(v5 + 4 * i);
      int v9 = v8 << v3;
      int v10 = *(_DWORD *)(a2 + 4 * i);
      *(_DWORD *)(a2 + 4 * i) = *(_DWORD *)(a2 + 4 * (v8 << v3));
      *(_DWORD *)(a2 + 4 * (v8 << v3)) = v10;
      if (v8 >= 2)
      {
        int v11 = v8 - 1;
        uint64_t v12 = (int *)(v5 + 4);
        uint64_t result = v6;
        do
        {
          int v13 = *v12++;
          int v14 = *(_DWORD *)result;
          *(_DWORD *)uint64_t result = *(_DWORD *)(a2 + 4 * (v13 + v9));
          *(_DWORD *)(a2 + 4 * (v13 + v9)) = v14;
          result += 4 * (1 << (a3 >> 1));
          --v11;
        }
        while (v11);
      }
      v6 += 4;
    }
  }
  return result;
}

float kaldi::SplitRadixComplexFft<float>::Compute(uint64_t a1, _DWORD *a2, int a3, float **a4)
{
  uint64_t v7 = *a4;
  int v8 = *(_DWORD *)(a1 + 24);
  if (v8 != a4[1] - *a4)
  {
    std::vector<float>::resize((uint64_t)a4, v8);
    uint64_t v7 = *a4;
    int v8 = *(_DWORD *)(a1 + 24);
  }
  if (v8 >= 1)
  {
    int v10 = a2 + 1;
    int v11 = a2;
    uint64_t v12 = v7;
    uint64_t v13 = v8;
    do
    {
      *v11++ = *(v10 - 1);
      int v14 = *v10;
      v10 += 2;
      *(_DWORD *)v12++ = v14;
      --v13;
    }
    while (v13);
  }
  memcpy(&a2[v8], v7, 4 * v8);
  kaldi::SplitRadixComplexFft<float>::Compute(a1, (float *)a2, (float *)&a2[*(int *)(a1 + 24)], a3);
  memcpy(v7, &a2[*(int *)(a1 + 24)], 4 * *(int *)(a1 + 24));
  uint64_t v15 = *(unsigned int *)(a1 + 24);
  if ((int)v15 > 1)
  {
    unint64_t v16 = v15 + 1;
    int v17 = 2 * v15 - 1;
    do
    {
      a2[v17 - 1] = a2[(v16 - 2)];
      a2[v17] = LODWORD(v7[(v16-- - 2)]);
      v17 -= 2;
    }
    while (v16 > 2);
  }
  float result = *v7;
  a2[1] = *(_DWORD *)v7;
  return result;
}

uint64_t kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x1000C8052888210);
  }
  if (*(void *)(a1 + 40))
  {
    int v3 = *(_DWORD *)(a1 + 28);
    if (v3 < 4) {
      goto LABEL_10;
    }
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8 * v4);
      if (v5)
      {
        MEMORY[0x1B3EA8630](v5, 0x1000C8052888210);
        int v3 = *(_DWORD *)(a1 + 28);
      }
      ++v4;
    }
    while (v4 < v3 - 3);
    if (*(void *)(a1 + 40)) {
LABEL_10:
    }
      MEMORY[0x1B3EA8630]();
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

float kaldi::SplitRadixRealFft<float>::Compute(float **a1, float *a2, int a3)
{
  return kaldi::SplitRadixRealFft<float>::Compute((uint64_t)a1, a2, a3, a1);
}

float kaldi::SplitRadixRealFft<float>::Compute(uint64_t a1, float *a2, int a3, float **a4)
{
  char v5 = a3;
  uint64_t v6 = a2;
  uint64_t v8 = *(unsigned int *)(a1 + 48);
  if (a3)
  {
    kaldi::SplitRadixComplexFft<float>::Compute(a1, a2, 1, a4);
    int v9 = -1;
  }
  else
  {
    int v9 = 1;
  }
  float v10 = 6.28318531 / (double)(int)v8 * (double)v9;
  __float2 v11 = __sincosf_stret(v10);
  if ((int)v8 >= 4)
  {
    float v12 = (float)-v9;
    int v13 = ((int)v8 >> 1) - 1;
    int v14 = 2 * ((int)v8 >> 1) - 1;
    int v15 = v8 - 1;
    unint64_t v16 = &v6[v8 - 2];
    int v17 = v6 + 3;
    float v18 = 0.0;
    uint64_t v19 = 2;
    uint64_t v20 = 1;
    do
    {
      float v21 = -(float)(v18 * v11.__sinval);
      float v18 = (float)(v11.__cosval * v18) + (float)(v12 * v11.__sinval);
      float v12 = v21 + (float)(v12 * v11.__cosval);
      float v22 = *(v17 - 1);
      float v23 = (float)(v22 + *v16) * 0.5;
      float v24 = v6[v15];
      float v25 = (float)(*v17 - v24) * 0.5;
      float v26 = (float)(*v17 + v24) * 0.5;
      float v27 = (float)(v22 - *v16) * -0.5;
      float v28 = (float)(v18 * v26) + (float)(v12 * v27);
      *(v17 - 1) = v23 + (float)((float)(v12 * v26) - (float)(v18 * v27));
      float *v17 = v25 + v28;
      if (v20 != v13)
      {
        v6[v14 - 1] = v23 + (float)((float)(v18 * v27) - (float)(v12 * v26));
        v6[v14] = v28 - v25;
      }
      ++v20;
      v19 += 2;
      --v13;
      v14 -= 2;
      v15 -= 2;
      v16 -= 2;
      v17 += 2;
    }
    while (v19 <= (int)v8 >> 1);
  }
  float v29 = v6[1];
  float v30 = *v6 + v29;
  float result = *v6 - v29;
  *uint64_t v6 = v30;
  v6[1] = result;
  if ((v5 & 1) == 0)
  {
    *uint64_t v6 = v30 * 0.5;
    v6[1] = result * 0.5;
    float result = kaldi::SplitRadixComplexFft<float>::Compute(a1, v6, 0, a4);
    if ((int)v8 >= 1)
    {
      do
      {
        float result = *v6 + *v6;
        *v6++ = result;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void *quasar::StateAccessRecordingFst::StateAccessRecordingFst(void *a1, uint64_t *a2)
{
  *a1 = &unk_1F0A56AC8;
  int v3 = a1 + 1;
  std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst::Data,std::allocator<quasar::StateAccessRecordingFst::Data>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,void>(a2, a1 + 1);
  uint64_t v4 = *(const void **)a1[1];
  if (!v4
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"State access recording requires ExpandedFST", 43);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
  }
  unint64_t v6 = (*(int (**)(void *))(*(void *)v5 + 160))(v5);
  std::vector<BOOL>::resize(*v3 + 16, v6, 0);
  std::vector<int>::resize((std::vector<unsigned int> *)(*v3 + 40), v6);
  return a1;
}

void sub_1B1EE3244(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::StateAccessRecordingFst::~StateAccessRecordingFst(quasar::StateAccessRecordingFst *this)
{
  *(void *)this = &unk_1F0A56AC8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0A56AC8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::StateAccessRecordingFst::HasSequentialStates(quasar::StateAccessRecordingFst *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 1) + 16))();
}

uint64_t quasar::StateAccessRecordingFst::Start(quasar::StateAccessRecordingFst *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 1) + 24))();
}

uint64_t quasar::StateAccessRecordingFst::Final(quasar::StateAccessRecordingFst *this, int a2)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  *(void *)(v2[2] + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return (*(uint64_t (**)(void))(*(void *)*v2 + 32))();
}

uint64_t quasar::StateAccessRecordingFst::NumArcs(quasar::StateAccessRecordingFst *this, int a2)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  *(void *)(v2[2] + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return (*(uint64_t (**)(void))(*(void *)*v2 + 40))();
}

uint64_t quasar::StateAccessRecordingFst::NumInputEpsilons(quasar::StateAccessRecordingFst *this, int a2)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  *(void *)(v2[2] + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return (*(uint64_t (**)(void))(*(void *)*v2 + 48))();
}

uint64_t quasar::StateAccessRecordingFst::NumOutputEpsilons(quasar::StateAccessRecordingFst *this, int a2)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  *(void *)(v2[2] + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return (*(uint64_t (**)(void))(*(void *)*v2 + 56))();
}

uint64_t quasar::StateAccessRecordingFst::Properties(quasar::StateAccessRecordingFst *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 1) + 64))();
}

uint64_t quasar::StateAccessRecordingFst::Type(quasar::StateAccessRecordingFst *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 1) + 72))();
}

void quasar::StateAccessRecordingFst::Copy(quasar::StateAccessRecordingFst *this)
{
}

uint64_t quasar::StateAccessRecordingFst::Write(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 96))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 104))();
}

uint64_t quasar::StateAccessRecordingFst::InputSymbols(quasar::StateAccessRecordingFst *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 1) + 112))();
}

uint64_t quasar::StateAccessRecordingFst::OutputSymbols(quasar::StateAccessRecordingFst *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 1) + 120))();
}

uint64_t quasar::StateAccessRecordingFst::InitStateIterator(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 128))();
}

void quasar::StateAccessRecordingFst::InitArcIterator(uint64_t a1, int a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 8) + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  operator new();
}

void sub_1B1EE37AC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C4017EAAA55);
  _Unwind_Resume(a1);
}

uint64_t quasar::StateAccessRecordingFst::InitMatcher(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 144))();
}

uint64_t quasar::StateAccessRecordingFst::GetArcs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  *(void *)(v2[2] + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return (*(uint64_t (**)(void))(*(void *)*v2 + 80))();
}

void quasar::StateAccessRecordingFst::ResetAccessedStates(quasar::StateAccessRecordingFst *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  uint64_t v2 = v1[3];
  if ((int)v1[3] >= 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = v1[2];
    do
    {
      if ((*(void *)(v4 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
        ++*(_DWORD *)(v1[5] + 4 * v3);
      }
      ++v3;
    }
    while (v2 != v3);
  }
  v1[3] = 0;
  std::vector<BOOL>::resize((uint64_t)(v1 + 2), (int)v2, 0);
}

void quasar::StateAccessRecordingFst::ResetAccessedStatesCounts(quasar::StateAccessRecordingFst *this)
{
  uint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *(int *)(v2 + 24);
  char v6 = 0;
  std::vector<BOOL>::assign(v2 + 16, v3, &v6);
  uint64_t v4 = (std::vector<int> *)(*((void *)this + 1) + 40);
  std::vector<int>::value_type __u = 0;
  std::vector<int>::assign(v4, v3, &__u);
}

void std::vector<BOOL>::assign(uint64_t a1, unint64_t a2, unsigned char *a3)
{
  *(void *)(a1 + 8) = 0;
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = v6 << 6;
    if (v6 << 6 >= a2)
    {
      *(void *)(a1 + 8) = a2;
    }
    else
    {
      int v14 = 0;
      long long v15 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = v6 << 7;
      if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v7 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve(&v14, v9);
      __float2 v11 = v14;
      uint64_t v12 = *((void *)&v15 + 1);
      int v14 = *(char **)a1;
      float v10 = v14;
      long long v13 = *(_OWORD *)(a1 + 8);
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = a2;
      *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v12;
      long long v15 = v13;
      if (v10) {
        operator delete(v10);
      }
    }
    if (*a3)
    {
      int v14 = *(char **)a1;
      LODWORD(v15) = 0;
      std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v14, a2);
    }
    else
    {
      int v14 = *(char **)a1;
      LODWORD(v15) = 0;
      std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v14, a2);
    }
  }
}

void sub_1B1EE3A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::StateAccessRecordingFst::WriteRecordedStateAccesses(void *result)
{
  unint64_t v1 = *(void *)(result[1] + 48) - *(void *)(result[1] + 40);
  if ((int)(v1 >> 2) >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = (v1 >> 2);
    do
    {
      if (*(int *)(*(void *)(v2[1] + 40) + 4 * v3) >= 1)
      {
        char v5 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)",", 1);
        uint64_t v6 = (void *)std::ostream::operator<<();
        float result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
      }
      ++v3;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t quasar::StateAccessRecordingFst::getWrappedFst@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(this + 8);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void quasar::StateAccessRecordingFstArcIterator::~StateAccessRecordingFstArcIterator(quasar::StateAccessRecordingFstArcIterator *this)
{
  *(void *)this = &unk_1F0A58898;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0A58898;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Reinit(quasar::StateAccessRecordingFstArcIterator *this, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 5) + 8) + 16);
  *(void *)(v2 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Done_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Value_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Next_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 40))();
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Position_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 48))();
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Reset_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 56))();
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Seek_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 64))();
}

uint64_t quasar::StateAccessRecordingFstArcIterator::Flags_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 72))();
}

uint64_t quasar::StateAccessRecordingFstArcIterator::SetFlags_(quasar::StateAccessRecordingFstArcIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 80))();
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst::Data,std::allocator<quasar::StateAccessRecordingFst::Data>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::StateAccessRecordingFst::Data>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,std::allocator<quasar::StateAccessRecordingFst::Data>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B1EE3DC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::StateAccessRecordingFst::Data>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,std::allocator<quasar::StateAccessRecordingFst::Data>,0>(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *(void *)a1 = &unk_1F0A61440;
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v3;
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    *(void *)(a1 + 24) = v4;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0;
  }
  return a1;
}

void std::__shared_ptr_emplace<quasar::StateAccessRecordingFst::Data>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::StateAccessRecordingFst::Data>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::StateAccessRecordingFst::Data>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::StateAccessRecordingFst::Data>::destroy[abi:ne180100]((uint64_t)&v1, (void *)(a1 + 24));
}

void std::allocator<quasar::StateAccessRecordingFst::Data>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[5];
  if (v3)
  {
    a2[6] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[2];
  if (v4) {
    operator delete(v4);
  }
  char v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::TransducerAutoRegressiveDecodable(uint64_t a1, uint64_t a2, kaldi::quasar::CEAcousticEncoderNet *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long *a9, int a10)
{
  *(void *)a1 = &unk_1F0A515F8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a7;
  *(void *)(a1 + 56) = a8;
  long long v12 = *a9;
  long long v13 = *(long long *)((char *)a9 + 12);
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 76) = v13;
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 96) = 0u;
  int v14 = (void **)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  long long v15 = (uint64_t *)(a1 + 144);
  unint64_t v16 = (uint64_t *)(a1 + 120);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  kaldi::Matrix<float>::Matrix(a1 + 272);
  *(_OWORD *)(a1 + 392) = 0u;
  float v49 = (void **)(a1 + 360);
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = a1 + 392;
  *(_OWORD *)(a1 + 4kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  *(void *)(a1 + 408) = a1 + 416;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(void *)(a1 + 432) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_WORD *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(void *)(a1 + 6kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  kaldi::quasar::CEAcousticEncoderNet::InitialStates(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16), &v50);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(v14);
  *(_OWORD *)(a1 + 96) = v50;
  *(void *)(a1 + 112) = v51;
  float v51 = 0;
  long long v50 = 0uLL;
  float v57 = (void **)&v50;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v57);
  kaldi::quasar::CELabelEncoderNet::InitialStates(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24), &v57);
  int v17 = v57;
  for (uint64_t i = v58; v17 != i; ++v17)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    float v53 = &v56;
    uint64_t v19 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v56, 1uLL);
    *(void *)&long long v50 = v19;
    *((void *)&v50 + 1) = v19;
    float v52 = &v19[v20];
    float v21 = *v17;
    float *v17 = 0;
    void *v19 = v21;
    float v51 = v19 + 1;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(&v54, &v50);
    uint64_t v22 = v55;
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v50);
    uint64_t v55 = v22;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(v16, (uint64_t)&v54);
    *(void *)&long long v50 = &v54;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  }
  *(void *)&long long v50 = &v57;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  float v23 = *(kaldi::quasar::CELabelEncoderNet **)(a1 + 56);
  if (v23 && *(float *)(a1 + 68) != 0.0)
  {
    kaldi::quasar::CELabelEncoderNet::InitialStates(v23, &v57);
    float v24 = v57;
    for (unint64_t j = v58; v24 != j; ++v24)
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      float v53 = &v56;
      float v26 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v56, 1uLL);
      *(void *)&long long v50 = v26;
      *((void *)&v50 + 1) = v26;
      float v52 = &v26[v27];
      float v28 = *v24;
      *float v24 = 0;
      *float v26 = v28;
      float v51 = v26 + 1;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(&v54, &v50);
      uint64_t v29 = v55;
      std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v50);
      uint64_t v55 = v29;
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(v15, (uint64_t)&v54);
      *(void *)&long long v50 = &v54;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    }
    *(void *)&long long v50 = &v57;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  }
  EmbeddingDiuint64_t m = quasar::TextEmbedder::getEmbeddingDim(*(quasar::TextEmbedder **)(a1 + 24));
  int v31 = EmbeddingDim;
  long long v32 = *(char **)(a1 + 368);
  unint64_t v33 = *(void *)(a1 + 376);
  if ((unint64_t)v32 >= v33)
  {
    uint64_t v35 = (char *)*v49;
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (unsigned char *)*v49) >> 2);
    unint64_t v37 = v36 + 1;
    if (v36 + 1 > 0x1555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v35) >> 2);
    if (2 * v38 > v37) {
      unint64_t v37 = 2 * v38;
    }
    if (v38 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v39 = 0x1555555555555555;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(a1 + 376, v39);
      uint64_t v35 = *(char **)(a1 + 360);
      long long v32 = *(char **)(a1 + 368);
    }
    else
    {
      uint64_t v40 = 0;
    }
    uint64_t v41 = &v40[12 * v36];
    int v42 = &v40[12 * v39];
    *(_DWORD *)uint64_t v41 = 0;
    *((_DWORD *)v41 + 1) = v31;
    *((_DWORD *)v41 + 2) = 0;
    long long v34 = v41 + 12;
    if (v32 != v35)
    {
      do
      {
        uint64_t v43 = *(void *)(v32 - 12);
        v32 -= 12;
        int v44 = *((_DWORD *)v32 + 2);
        *(void *)(v41 - 12) = v43;
        v41 -= 12;
        *((_DWORD *)v41 + 2) = v44;
      }
      while (v32 != v35);
      uint64_t v35 = (char *)*v49;
    }
    *(void *)(a1 + 360) = v41;
    *(void *)(a1 + 368) = v34;
    *(void *)(a1 + 376) = v42;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *(_DWORD *)long long v32 = 0;
    *((_DWORD *)v32 + 1) = EmbeddingDim;
    long long v34 = v32 + 12;
    *((_DWORD *)v32 + 2) = 0;
  }
  *(void *)(a1 + 368) = v34;
  if (*(float *)(a1 + 64) <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"opts_.max_label_fraction > 0", 28);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v50);
  }
  if (*(float *)(a1 + 76) <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"opts_.softmax_temperature > 0", 29);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v50);
  }
  if (*(float *)(a1 + 80) <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"opts_.nnlm_softmax_temperature > 0", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v50);
  }
  if (*(float *)(a1 + 84) <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"opts_.ilm_softmax_temperature > 0", 33);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v50);
  }
  if (*(float *)(a1 + 72) != 0.0
    && kaldi::quasar::CEJointPredictorNet::OutputsAreLogProbs(*(kaldi::quasar::CEJointPredictorNet **)(a1 + 32)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"ILM subtraction requires non-softmax output from joint predictor", 64);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v50);
  }
  if (a10 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"chunk_size >= 0", 15);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v50);
  }
  if (a10)
  {
    int v45 = kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(a3);
    int v46 = kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(a3) + v45 * a10;
  }
  else
  {
    int v46 = 0;
  }
  *(_DWORD *)(a1 + 92) = v46;
  if (kaldi::quasar::CEAcousticEncoderNet::IsInputSizeFixed(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16)))
  {
    int v47 = *(_DWORD *)(a1 + 92);
    if (v47 != kaldi::quasar::CEAcousticEncoderNet::InputFrameCount(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16)))
    {
      kaldi::quasar::CEAcousticEncoderNet::InputFrameCount(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
      kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(a3);
      kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(a3);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Acoustic encoder has fixed input size which mismatches decoder; set chunk-size to ",
        82);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v50);
    }
  }
  return a1;
}

{
  return kaldi::quasar::TransducerAutoRegressiveDecodable::TransducerAutoRegressiveDecodable(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1B1EE45F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, void **a14, void **a15, uint64_t a16, void **a17)
{
  float v24 = v17 + 60;
  float v25 = *a12;
  if (*a12)
  {
    v17[70] = v25;
    operator delete(v25);
  }
  float v26 = *v24;
  if (*v24)
  {
    v17[61] = v26;
    operator delete(v26);
  }
  kaldi::CuMatrix<float>::~CuMatrix(a13);
  std::__tree<int>::destroy((uint64_t)(v17 + 51), *a14);
  std::__tree<int>::destroy(a16, *a15);
  uint64_t v27 = *a17;
  if (*a17)
  {
    v17[46] = v27;
    operator delete(v27);
  }
  kaldi::Vector<float>::Destroy((uint64_t)(v17 + 42));
  float v28 = *a9;
  if (*a9)
  {
    v17[40] = v28;
    operator delete(v28);
  }
  kaldi::Matrix<float>::~Matrix(a10);
  uint64_t v29 = v17[33];
  v17[33] = 0;
  if (v29) {
    (*(void (**)(void *))(*(void *)v29 + 8))(v29);
  }
  float v30 = v17[32];
  v17[32] = 0;
  if (v30) {
    (*(void (**)(void *))(*(void *)v30 + 8))(v30);
  }
  int v31 = v17[31];
  v17[31] = 0;
  if (v31) {
    (*(void (**)(void *))(*(void *)v31 + 8))(v31);
  }
  *(void *)(v22 - 144) = v18;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 144));
  *(void *)(v22 - 144) = v18 - 24;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 144));
  *(void *)(v22 - 144) = a11;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 144));
  long long v32 = v17[21];
  v17[21] = 0;
  if (v32) {
    (*(void (**)(void *))(*(void *)v32 + 8))(v32);
  }
  *(void *)(v22 - 144) = v20;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 144));
  *(void *)(v22 - 144) = v19;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 144));
  *(void *)(v22 - 144) = v21;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 144));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    int v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)int v14 = 0;
    *(_OWORD *)int v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v17);
    unint64_t v8 = (void *)a1[1];
    std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v17);
  }
  else
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    uint64_t v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    uint64_t v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
    unint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1B1EE48DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::Encode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v88 = 0;
  if (a3)
  {
    signed int v6 = *(_DWORD *)(a2 + 20);
    int v7 = kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    if (v6 < (int)(kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16))
                  + v7))
    {
      uint64_t v9 = *(void *)(a1 + 248);
      unint64_t v8 = *(void **)(a1 + 256);
      *(void *)(a1 + 248) = 0;
      uint64_t v88 = v9;
      if (v8) {
        *(void *)(a1 + 256) = 0;
      }
      uint64_t v10 = *(void *)(a1 + 264);
      if (v10) {
        *(void *)(a1 + 264) = 0;
      }
      goto LABEL_38;
    }
  }
  char v86 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)&v83, (clockid_t)a2);
  uint64_t v87 = 0;
  uint64_t v75 = 0;
  std::string __p = 0;
  uint64_t v82 = 0;
  kaldi::quasar::CEAcousticEncoderNet::Encode(*(void *)(a1 + 16), (void *)(a1 + 96), a2, a3, a1 + 96, &v75, &__p, &v82);
  *(double *)(a1 + 584) = *(double *)(a1 + 584) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v11) - *(double *)&v83;
  (*(void (**)(uint64_t, void))(*(void *)v75 + 184))(v75, 0);
  if (__p)
  {
    (*(void (**)(uint64_t, void))(*(void *)v75 + 184))(v75, 0);
    (*(void (**)(void *, void))(*(void *)__p + 184))(__p, 0);
  }
  if (v82)
  {
    (*(void (**)(uint64_t, void))(*(void *)v75 + 184))(v75, 0);
    (*(void (**)(uint64_t, void))(*(void *)v82 + 184))(v82, 0);
  }
  if ((a3 & 1) != 0
    || !kaldi::quasar::CEAcousticEncoderNet::NumSpeculativeOutputs(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16)))
  {
    uint64_t v9 = v75;
    uint64_t v75 = 0;
    uint64_t v88 = v9;
    unint64_t v8 = __p;
    if (__p) {
      std::string __p = 0;
    }
    uint64_t v10 = v82;
    if (v82) {
      uint64_t v82 = 0;
    }
    uint64_t v30 = *(void *)(a1 + 248);
    if (v30)
    {
      *(void *)(a1 + 248) = 0;
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
    uint64_t v31 = *(void *)(a1 + 256);
    if (v31)
    {
      *(void *)(a1 + 256) = 0;
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    }
    uint64_t v32 = *(void *)(a1 + 264);
    if (!v32) {
      goto LABEL_32;
    }
    *(void *)(a1 + 264) = 0;
    goto LABEL_31;
  }
  int v12 = (*(uint64_t (**)(uint64_t, void))(*(void *)v75 + 184))(v75, 0);
  if (v12 <= (int)kaldi::quasar::CEAcousticEncoderNet::NumSpeculativeOutputs(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16)))
  {
    uint64_t v61 = v75;
    uint64_t v75 = 0;
    uint64_t v62 = *(void *)(a1 + 248);
    *(void *)(a1 + 248) = v61;
    if (v62) {
      (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
    }
    float v63 = __p;
    if (__p)
    {
      std::string __p = 0;
      uint64_t v64 = *(void *)(a1 + 256);
      *(void *)(a1 + 256) = v63;
      if (v64) {
        (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
      }
    }
    uint64_t v65 = v82;
    if (v82)
    {
      uint64_t v82 = 0;
      uint64_t v66 = *(void *)(a1 + 264);
      *(void *)(a1 + 264) = v65;
      if (v66)
      {
        (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
        uint64_t v9 = 0;
        unint64_t v8 = 0;
        uint64_t v10 = 0;
        goto LABEL_32;
      }
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t, void))(*(void *)v75 + 184))(v75, 0);
    int v14 = kaldi::quasar::CEAcousticEncoderNet::NumSpeculativeOutputs(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    uint64_t v15 = kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    uint64_t v16 = (v13 - v14);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v15 + 112))(&v81);
    uint64_t v9 = v81;
    uint64_t v88 = v81;
    uint64_t v17 = *(void *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    uint64_t v18 = v75;
    uint64_t v19 = (*(uint64_t (**)(uint64_t, void))(*(void *)v75 + 184))(v75, 0);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 112))(&v81, v17, v18, v16, v19);
    uint64_t v20 = v81;
    uint64_t v81 = 0;
    uint64_t v21 = *(void *)(a1 + 248);
    *(void *)(a1 + 248) = v20;
    if (v21)
    {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      uint64_t v22 = v81;
      uint64_t v81 = 0;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
    }
    if (__p)
    {
      uint64_t v23 = kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
      (*(void (**)(uint64_t *__return_ptr))(**(void **)v23 + 112))(&v81);
      unint64_t v8 = (void *)v81;
      uint64_t v24 = *(void *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
      float v25 = __p;
      uint64_t v26 = (*(uint64_t (**)(void *, void))(*(void *)__p + 184))(__p, 0);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, uint64_t))(*(void *)v24 + 112))(&v81, v24, v25, v16, v26);
      uint64_t v27 = v81;
      uint64_t v81 = 0;
      uint64_t v28 = *(void *)(a1 + 256);
      *(void *)(a1 + 256) = v27;
      if (v28)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        uint64_t v29 = v81;
        uint64_t v81 = 0;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
      }
    }
    else
    {
      unint64_t v8 = 0;
    }
    if (v82)
    {
      uint64_t v67 = kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
      (*(void (**)(uint64_t *__return_ptr))(**(void **)v67 + 112))(&v81);
      uint64_t v10 = v81;
      uint64_t v68 = *(void *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
      uint64_t v69 = v82;
      uint64_t v70 = (*(uint64_t (**)(uint64_t, void))(*(void *)v82 + 184))(v82, 0);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v68 + 112))(&v81, v68, v69, v16, v70);
      uint64_t v71 = v81;
      uint64_t v81 = 0;
      uint64_t v72 = *(void *)(a1 + 264);
      *(void *)(a1 + 264) = v71;
      if (!v72 || ((*(void (**)(uint64_t))(*(void *)v72 + 8))(v72), uint64_t v32 = v81, v81 = 0, !v32))
      {
LABEL_32:
        uint64_t v33 = v82;
        uint64_t v82 = 0;
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
        }
        goto LABEL_34;
      }
LABEL_31:
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      goto LABEL_32;
    }
    uint64_t v10 = 0;
  }
LABEL_34:
  long long v34 = __p;
  std::string __p = 0;
  if (v34) {
    (*(void (**)(void *))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = v75;
  uint64_t v75 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
LABEL_38:
  if (v9) {
    unsigned int v36 = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 184))(v9, 0);
  }
  else {
    unsigned int v36 = 0;
  }
  *(int32x2_t *)(a1 + 528) = vadd_s32(*(int32x2_t *)(a1 + 528), vdup_n_s32(v36));
  uint64_t v37 = kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
  kaldi::quasar::TransducerAutoRegressiveDecodable::AppendBuffers(v37, v37, &v88, (uint64_t *)(a1 + 168));
  if (v8)
  {
    std::string __p = 0;
    unint64_t v79 = 0;
    uint64_t v80 = 0;
    float v73 = v8;
    uint64_t v74 = v10;
    (*(void (**)(void *, void **))(*(void *)v8 + 56))(v8, &__p);
    int v38 = kaldi::MatrixBase<float>::NumRows(a1 + 272);
    int v39 = (*(uint64_t (**)(void *, void))(*(void *)v8 + 184))(v8, 0);
    uint64_t v40 = kaldi::quasar::CEAcousticEncoderNet::OutputPhoneDim(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    int v41 = v40;
    kaldi::Matrix<float>::Resize((int32x2_t *)(a1 + 272), (v39 + v38), v40, 2, 0);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v83, a1 + 272, v38, v39, 0, *(_DWORD *)(a1 + 280));
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v75, (uint64_t)__p, v39, v41, v41);
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&v83, (int *)&v75, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
    if (v39 >= 1)
    {
      int v42 = 0;
      uint64_t v43 = (void **)(a1 + 312);
      do
      {
        int v44 = v83;
        int v45 = v85;
        unsigned int v46 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v83);
        uint64_t v77 = 0;
        uint64_t v75 = (uint64_t)v44 + 4 * v45 * v42;
        uint64_t v76 = v46;
        kaldi::VectorBase<float>::ApplySoftMax((uint64_t)&v75);
        kaldi::VectorBase<float>::ApplyLog((uint64_t)&v75);
        LODWORD(v82) = 0;
        kaldi::VectorBase<float>::Max(&v75, (int *)&v82);
        float v48 = *(char **)(a1 + 320);
        unint64_t v47 = *(void *)(a1 + 328);
        if ((unint64_t)v48 >= v47)
        {
          long long v50 = (char *)*v43;
          uint64_t v51 = (v48 - (unsigned char *)*v43) >> 2;
          unint64_t v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v53 = v47 - (void)v50;
          if (v53 >> 1 > v52) {
            unint64_t v52 = v53 >> 1;
          }
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v52;
          }
          if (v54)
          {
            uint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 328, v54);
            long long v50 = *(char **)(a1 + 312);
            float v48 = *(char **)(a1 + 320);
          }
          else
          {
            uint64_t v55 = 0;
          }
          uint64_t v56 = &v55[4 * v51];
          *(_DWORD *)uint64_t v56 = v82;
          float v49 = v56 + 4;
          while (v48 != v50)
          {
            int v57 = *((_DWORD *)v48 - 1);
            v48 -= 4;
            *((_DWORD *)v56 - 1) = v57;
            v56 -= 4;
          }
          *(void *)(a1 + 312) = v56;
          *(void *)(a1 + 320) = v49;
          *(void *)(a1 + 328) = &v55[4 * v54];
          if (v50) {
            operator delete(v50);
          }
        }
        else
        {
          *(_DWORD *)float v48 = v82;
          float v49 = v48 + 4;
        }
        *(void *)(a1 + 320) = v49;
        ++v42;
      }
      while (v42 != v39);
    }
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v83);
    if (__p)
    {
      unint64_t v79 = (unint64_t)__p;
      operator delete(__p);
    }
    unint64_t v8 = v73;
    uint64_t v10 = v74;
  }
  if (v10)
  {
    *(double *)&float v83 = 0.0;
    float v84 = 0;
    uint64_t v85 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v10 + 56))(v10, &v83);
    uint64_t v58 = *(int *)(a1 + 344);
    unsigned int v59 = (*(uint64_t (**)(uint64_t, void))(*(void *)v10 + 184))(v10, 0);
    kaldi::Vector<float>::Resize((void **)(a1 + 336), v59 + v58, 2);
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v75 = *(void *)(a1 + 336) + 4 * v58;
    LODWORD(v76) = v59;
    uint64_t v80 = 0;
    std::string __p = v83;
    unint64_t v79 = v59;
    kaldi::VectorBase<float>::Sigmoid((uint64_t)&v75, (const void **)&__p);
    if (*(double *)&v83 != 0.0)
    {
      float v84 = v83;
      operator delete(v83);
    }
  }
  if (a3) {
    *(unsigned char *)(a1 + 576) = 1;
  }
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v8) {
    (*(void (**)(void *))(*(void *)v8 + 8))(v8);
  }
  uint64_t result = v88;
  if (v88) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v88 + 8))(v88);
  }
  return result;
}

void sub_1B1EE54DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 8))(a20);
  }
  if (a16) {
    (*(void (**)(void *))(*(void *)a16 + 8))(a16);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v25 = *(void *)(v23 - 88);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::~TransducerAutoRegressiveDecodable(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  *(void *)this = &unk_1F0A515F8;
  uint64_t v2 = (void *)*((void *)this + 69);
  if (v2)
  {
    *((void *)this + 70) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 60);
  if (v3)
  {
    *((void *)this + 61) = v3;
    operator delete(v3);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 432);
  std::__tree<int>::destroy((uint64_t)this + 408, *((void **)this + 52));
  std::__tree<int>::destroy((uint64_t)this + 384, *((void **)this + 49));
  uint64_t v4 = (void *)*((void *)this + 45);
  if (v4)
  {
    *((void *)this + 46) = v4;
    operator delete(v4);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 336);
  unint64_t v5 = (void *)*((void *)this + 39);
  if (v5)
  {
    *((void *)this + 40) = v5;
    operator delete(v5);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 272);
  uint64_t v6 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 31);
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v10 = (void **)((char *)this + 224);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 176);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v9 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = (void **)((char *)this + 144);
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 120);
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::quasar::TransducerAutoRegressiveDecodable::~TransducerAutoRegressiveDecodable(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::ComputeLogLikelihoods(uint64_t a1, int a2, void *a3, char *a4)
{
  if (!a2 && (a3[1] - *a3 != 4 || *(_DWORD *)*a3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v137);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v137, "states.size() == 1 && states[0] == 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v137);
  }
  while (!*(unsigned char *)(a1 + 576) && *(_DWORD *)(a1 + 536) == *(_DWORD *)(a1 + 528))
    kaldi::quasar::TransducerAutoRegressiveDecodable::EncodeNextChunk((kaldi::quasar::TransducerAutoRegressiveDecodable *)a1);
  if (*(void *)(a1 + 168))
  {
    float v107 = a4;
    kaldi::quasar::TransducerAutoRegressiveDecodable::LookupStates(a1, (uint64_t)a3, (uint64_t)v137);
    std::string __p = 0;
    uint64_t v135 = 0;
    int v136 = 0;
    uint64_t v131 = 0;
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    if (a3[1] != *a3)
    {
      unint64_t v7 = 0;
      uint64_t v8 = v139[0];
      do
      {
        int v9 = v8[v7];
        if (v9 == kaldi::quasar::CELabelEncoderNet::BlankIndex(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24)))
        {
          uint64_t v10 = v137[0];
          clockid_t v11 = v135;
          if (v135 >= v136)
          {
            uint64_t v15 = (char *)__p;
            uint64_t v16 = (v135 - (unsigned char *)__p) >> 2;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 62) {
              goto LABEL_175;
            }
            uint64_t v18 = v136 - (unsigned char *)__p;
            if ((v136 - (unsigned char *)__p) >> 1 > v17) {
              unint64_t v17 = v18 >> 1;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19)
            {
              uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v136, v19);
              uint64_t v15 = (char *)__p;
              clockid_t v11 = v135;
            }
            else
            {
              uint64_t v20 = 0;
            }
            uint64_t v27 = &v20[4 * v16];
            *(_DWORD *)uint64_t v27 = v10[v7];
            int v12 = v27 + 4;
            while (v11 != v15)
            {
              int v28 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v27 - 1) = v28;
              v27 -= 4;
            }
            std::string __p = v27;
            uint64_t v135 = v12;
            int v136 = &v20[4 * v19];
            if (v15) {
              operator delete(v15);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v135 = *((_DWORD *)v137[0] + v7);
            int v12 = v11 + 4;
          }
          uint64_t v135 = v12;
        }
        else
        {
          int v13 = v132;
          if (v132 >= v133)
          {
            uint64_t v21 = (char *)v131;
            uint64_t v22 = (v132 - (unsigned char *)v131) >> 2;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62) {
LABEL_175:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v24 = v133 - (unsigned char *)v131;
            if ((v133 - (unsigned char *)v131) >> 1 > v23) {
              unint64_t v23 = v24 >> 1;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25)
            {
              uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v133, v25);
              uint64_t v21 = (char *)v131;
              int v13 = v132;
            }
            else
            {
              uint64_t v26 = 0;
            }
            uint64_t v29 = &v26[4 * v22];
            *(_DWORD *)uint64_t v29 = v8[v7];
            int v14 = v29 + 4;
            while (v13 != v21)
            {
              int v30 = *((_DWORD *)v13 - 1);
              v13 -= 4;
              *((_DWORD *)v29 - 1) = v30;
              v29 -= 4;
            }
            uint64_t v131 = v29;
            uint64_t v132 = v14;
            uint64_t v133 = &v26[4 * v25];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v132 = v8[v7];
            int v14 = v13 + 4;
          }
          uint64_t v132 = v14;
        }
        ++v7;
      }
      while (v7 < (uint64_t)(a3[1] - *a3) >> 2);
    }
    Ngram::getTrie(*(Ngram **)(a1 + 24));
    kaldi::quasar::TransducerAutoRegressiveDecodable::GatherStates(a1, (uint64_t **)(a1 + 120), (int **)v137, v139, (uint64_t)v129);
    Ngram::getTrie(*(Ngram **)(a1 + 24));
    kaldi::quasar::TransducerAutoRegressiveDecodable::GatherOutputsBatch((void *)(a1 + 176), (unsigned int **)&__p, 0, v128);
    memset(v127, 0, sizeof(v127));
    if (v132 != v131)
    {
      LOBYTE(v122) = 1;
      kaldi::Timer::Reset((kaldi::Timer *)v120, v31);
      uint64_t v123 = 0;
      kaldi::quasar::CELabelEncoderNet::EncodeBatch(*(void *)(a1 + 24), v130, (int **)&v131, (uint64_t)v130, (uint64_t)v127);
      *(double *)(a1 + 592) = *(double *)(a1 + 592) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v32) - *(double *)v120;
    }
    if (*(float *)(a1 + 72) != 0.0)
    {
      quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*(quasar::SpeechRequestData **)(a1 + 32));
      kaldi::quasar::TransducerAutoRegressiveDecodable::GatherOutputsBatch((void *)(a1 + 200), (unsigned int **)&__p, 0, (uint64_t *)&v116);
      long long v113 = 0uLL;
      uint64_t v114 = 0;
      if (v132 != v131)
      {
        uint64_t v33 = *(void *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*(quasar::SpeechRequestData **)(a1 + 32));
        uint64_t v35 = v131;
        long long v34 = v132;
        int v36 = kaldi::quasar::CEJointPredictorNet::InputDim(*(kaldi::quasar::CEJointPredictorNet **)(a1 + 32));
        uint64_t v37 = operator new(0x10uLL);
        v120[1] = v37 + 2;
        uint64_t v121 = v37 + 2;
        *uint64_t v37 = (v34 - v35) >> 2;
        v37[1] = v36;
        v120[0] = v37;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v33 + 56))(&v126, v33, v120);
        if (v120[0])
        {
          v120[1] = v120[0];
          operator delete(v120[0]);
        }
        Trie = (uint64_t *)Ngram::getTrie(*(Ngram **)(a1 + 24));
        kaldi::quasar::ComputeEngineItf::CreateConcat(*Trie, v127, 0);
        uint64_t v124 = 0;
        LOBYTE(v122) = 1;
        kaldi::Timer::Reset((kaldi::Timer *)v120, v39);
        uint64_t v123 = 0;
        kaldi::quasar::CEJointPredictorNet::Predict(*(void *)(a1 + 32), &v126, &v125, (uint64_t *)&v124);
        *(double *)(a1 + 608) = *(double *)(a1 + 608)
                              + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v40)
                              - *(double *)v120;
        uint64_t MultiChainMultiAudioBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*(quasar::SpeechRequestData **)(a1 + 32));
        kaldi::quasar::ComputeEngineItf::CreateSplitMove(*MultiChainMultiAudioBuffer, &v124, (uint64_t *)&v110);
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)&v113);
        long long v113 = v110;
        uint64_t v114 = v111;
        uint64_t v111 = 0;
        long long v110 = 0uLL;
        v142[0] = (void **)&v110;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v142);
        int v42 = v124;
        uint64_t v124 = 0;
        if (v42) {
          (*((void (**)(void **))*v42 + 1))(v42);
        }
        uint64_t v43 = v125;
        uint64_t v125 = 0;
        if (v43) {
          (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
        }
        uint64_t v44 = v126;
        uint64_t v126 = 0;
        if (v44) {
          (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
        }
      }
      quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*(quasar::SpeechRequestData **)(a1 + 32));
      kaldi::quasar::TransducerAutoRegressiveDecodable::MergeOutputs((void **)a1, (uint64_t *)&v116, (uint64_t *)&v113, (int **)v139, (uint64_t *)v120);
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)(a1 + 200));
      *(_OWORD *)(a1 + 200) = *(_OWORD *)v120;
      *(void *)(a1 + 2kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v121;
      v120[1] = 0;
      uint64_t v121 = 0;
      v120[0] = 0;
      *(void *)&long long v110 = v120;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
      v120[0] = &v113;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
      v120[0] = &v116;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
    }
    Ngram::getTrie(*(Ngram **)(a1 + 24));
    kaldi::quasar::TransducerAutoRegressiveDecodable::MergeStates((void **)a1, v129, v130, (int **)v139, (uint64_t *)v120);
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__vdeallocate((void ***)(a1 + 120));
    *(_OWORD *)(a1 + 120) = *(_OWORD *)v120;
    *(void *)(a1 + 136) = v121;
    v120[1] = 0;
    uint64_t v121 = 0;
    v120[0] = 0;
    *(void *)&long long v116 = v120;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
    Ngram::getTrie(*(Ngram **)(a1 + 24));
    kaldi::quasar::TransducerAutoRegressiveDecodable::MergeOutputs((void **)a1, v128, (uint64_t *)v127, (int **)v139, (uint64_t *)v120);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)(a1 + 176));
    *(_OWORD *)(a1 + 176) = *(_OWORD *)v120;
    *(void *)(a1 + 192) = v121;
    v120[1] = 0;
    uint64_t v121 = 0;
    v120[0] = 0;
    *(void *)&long long v116 = v120;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
    int v45 = *(Ngram **)(a1 + 56);
    if (v45 && *(float *)(a1 + 68) != 0.0)
    {
      Ngram::getTrie(v45);
      kaldi::quasar::TransducerAutoRegressiveDecodable::GatherStates(a1, (uint64_t **)(a1 + 144), (int **)v137, v139, (uint64_t)v120);
      Ngram::getTrie(*(Ngram **)(a1 + 56));
      kaldi::quasar::TransducerAutoRegressiveDecodable::GatherOutputsBatch((void *)(a1 + 224), (unsigned int **)&__p, 0, (uint64_t *)&v113);
      long long v110 = 0uLL;
      uint64_t v111 = 0;
      if (v132 != v131)
      {
        LOBYTE(v118) = 1;
        kaldi::Timer::Reset((kaldi::Timer *)&v116, v46);
        uint64_t v119 = 0;
        kaldi::quasar::CELabelEncoderNet::EncodeBatch(*(void *)(a1 + 56), &v122, (int **)&v131, (uint64_t)&v122, (uint64_t)&v110);
        *(double *)(a1 + 6kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(double *)(a1 + 616)
                              + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v47)
                              - *(double *)&v116;
      }
      Ngram::getTrie(*(Ngram **)(a1 + 56));
      kaldi::quasar::TransducerAutoRegressiveDecodable::MergeStates((void **)a1, (uint64_t *)v120, &v122, (int **)v139, (uint64_t *)&v116);
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__vdeallocate((void ***)(a1 + 144));
      *(_OWORD *)(a1 + 144) = v116;
      *(void *)(a1 + 160) = v117;
      uint64_t v117 = 0;
      long long v116 = 0uLL;
      v142[0] = (void **)&v116;
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](v142);
      Ngram::getTrie(*(Ngram **)(a1 + 56));
      kaldi::quasar::TransducerAutoRegressiveDecodable::MergeOutputs((void **)a1, (uint64_t *)&v113, (uint64_t *)&v110, (int **)v139, (uint64_t *)&v116);
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)(a1 + 224));
      *(_OWORD *)(a1 + 224) = v116;
      *(void *)(a1 + 240) = v117;
      uint64_t v117 = 0;
      long long v116 = 0uLL;
      v142[0] = (void **)&v116;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v142);
      *(void *)&long long v116 = &v110;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
      *(void *)&long long v116 = &v113;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
      *(void *)&long long v116 = &v122;
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
      *(void *)&long long v116 = v120;
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
    }
    float v48 = (uint64_t *)kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    kaldi::quasar::TransducerAutoRegressiveDecodable::GatherOutputs(v48, (void *)(a1 + 168), &v140, 1, v142);
    LOBYTE(v122) = 1;
    kaldi::Timer::Reset((kaldi::Timer *)v120, v49);
    uint64_t v123 = 0;
    uint64_t v126 = 0;
    long long v50 = (uint64_t *)Ngram::getTrie(*(Ngram **)(a1 + 24));
    kaldi::quasar::ComputeEngineItf::CreateConcat(*v50, (uint64_t **)(a1 + 176), 0);
    kaldi::quasar::CEJointPredictorNet::Predict(*(void *)(a1 + 32), (uint64_t *)v142, &v125, &v126);
    *(double *)(a1 + 600) = *(double *)(a1 + 600) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v51) - *(double *)v120;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v126 + 56))(v126, a1 + 480);
    unint64_t v52 = v140;
    if (v141 == v140)
    {
      int v54 = 0;
      float v56 = 0.0;
    }
    else
    {
      unint64_t v53 = 0;
      int v54 = 0;
      unint64_t v55 = v141 - v140;
      float v56 = 0.0;
      do
      {
        int v57 = v52;
        int v58 = v52[v53];
        LODWORD(v124) = 0;
        *((void *)&v116 + 1) = 0;
        uint64_t v117 = 0;
        uint64_t v118 = 0;
        *(void *)&long long v116 = &unk_1F0A517C0;
        if (*(void *)(a1 + 56) && *(float *)(a1 + 68) != 0.0)
        {
          uint64_t v59 = *(void *)(*(void *)(a1 + 224) + 8 * v53);
          (*(void (**)(uint64_t, long long *))(*(void *)v59 + 40))(v59, &v116);
          kaldi::quasar::TransducerAutoRegressiveDecodable::ComputeLogSoftMax(a1, (uint64_t)&v116, 1, *(unsigned __int8 *)(a1 + 88), (float *)&v124, *(float *)(a1 + 80));
        }
        uint64_t v60 = *(void *)(a1 + 480);
        int v61 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
        unsigned int v62 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
        uint64_t v115 = 0;
        *(void *)&long long v113 = &unk_1F0A472D0;
        *((void *)&v113 + 1) = v60 + 4 * v61 * (int)v53;
        uint64_t v114 = v62;
        int v63 = *(_DWORD *)(a1 + 540);
        if (v63 <= 0) {
          int v63 = *(_DWORD *)(a1 + 528);
        }
        unint64_t v52 = v57;
        if (v58 == v63)
        {
          kaldi::CuVectorBase<float>::Set((uint64_t)&v113, -3.4028e38);
          float v64 = 0.0;
          if (*(void *)(a1 + 56))
          {
            float v65 = *(float *)(a1 + 68);
            if (v65 != 0.0) {
              float v64 = v65 * logf(*(float *)&v124);
            }
          }
          int v66 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
          *(float *)(*((void *)&v113 + 1) + 4 * v66) = v64;
        }
        else
        {
          if (!kaldi::quasar::CEJointPredictorNet::OutputsAreLogProbs(*(kaldi::quasar::CEJointPredictorNet **)(a1 + 32))) {
            kaldi::quasar::TransducerAutoRegressiveDecodable::ComputeLogSoftMax(a1, (uint64_t)&v113, 0, 0, 0, *(float *)(a1 + 76));
          }
          if (*(float *)(a1 + 72) != 0.0)
          {
            *((void *)&v110 + 1) = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            *(void *)&long long v110 = &unk_1F0A517C0;
            uint64_t v67 = *(void *)(*(void *)(a1 + 200) + 8 * v53);
            (*(void (**)(uint64_t, long long *))(*(void *)v67 + 40))(v67, &v110);
            kaldi::quasar::TransducerAutoRegressiveDecodable::ComputeLogSoftMax(a1, (uint64_t)&v110, 1, 0, 0, *(float *)(a1 + 84));
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v113, (uint64_t)&v110, -*(float *)(a1 + 72), 1.0);
            kaldi::CuVector<float>::~CuVector(&v110);
          }
          if (*(void *)(a1 + 56))
          {
            float v68 = *(float *)(a1 + 68);
            if (v68 != 0.0) {
              kaldi::CuVectorBase<float>::AddVec((uint64_t)&v113, (uint64_t)&v116, v68, 1.0);
            }
          }
          if (v58 > v54)
          {
            int v54 = v58;
            float v56 = *(float *)&v124;
          }
        }
        kaldi::CuVector<float>::~CuVector(&v116);
        ++v53;
      }
      while (v55 > v53);
    }
    if (v107 && (char *)(a1 + 480) != v107) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v107, *(char **)(a1 + 480), *(void *)(a1 + 488), (uint64_t)(*(void *)(a1 + 488) - *(void *)(a1 + 480)) >> 2);
    }
    uint64_t v72 = *(int *)(a1 + 536);
    if (v54 >= (int)v72)
    {
      *(_DWORD *)(a1 + 536) = v54 + 1;
      if (*(void *)(a1 + 312) != *(void *)(a1 + 320))
      {
        float v73 = (void **)(a1 + 552);
        uint64_t v74 = (void *)(a1 + 568);
        uint64_t v109 = v54;
        do
        {
          int v75 = *(_DWORD *)(*(void *)(a1 + 312) + 4 * v72);
          if (v75 == kaldi::quasar::CEAcousticEncoderNet::SilPhoneIndex(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16)))
          {
            uint64_t v76 = *(int **)(a1 + 560);
            if (v72) {
              int v77 = *(v76 - 1) + 1;
            }
            else {
              int v77 = 1;
            }
            if ((unint64_t)v76 >= *v74)
            {
              uint64_t v88 = (int *)*v73;
              uint64_t v89 = ((char *)v76 - (unsigned char *)*v73) >> 2;
              unint64_t v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v91 = *v74 - (void)v88;
              if (v91 >> 1 > v90) {
                unint64_t v90 = v91 >> 1;
              }
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v92 = v90;
              }
              if (v92)
              {
                float v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 568, v92);
                uint64_t v76 = *(int **)(a1 + 560);
                uint64_t v88 = *(int **)(a1 + 552);
              }
              else
              {
                float v93 = 0;
              }
              unint64_t v96 = (int *)&v93[4 * v89];
              *unint64_t v96 = v77;
              uint64_t v87 = v96 + 1;
              while (v76 != v88)
              {
                int v97 = *--v76;
                *--unint64_t v96 = v97;
              }
              *(void *)(a1 + 552) = v96;
              *(void *)(a1 + 560) = v87;
              *(void *)(a1 + 568) = &v93[4 * v92];
              if (v88) {
                operator delete(v88);
              }
            }
            else
            {
              *uint64_t v76 = v77;
              uint64_t v87 = v76 + 1;
            }
            *(void *)(a1 + 560) = v87;
          }
          else
          {
            float v78 = *(char **)(a1 + 560);
            unint64_t v79 = *(void *)(a1 + 568);
            if ((unint64_t)v78 >= v79)
            {
              uint64_t v81 = (char *)*v73;
              uint64_t v82 = (v78 - (unsigned char *)*v73) >> 2;
              unint64_t v83 = v82 + 1;
              if ((unint64_t)(v82 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v84 = v79 - (void)v81;
              if (v84 >> 1 > v83) {
                unint64_t v83 = v84 >> 1;
              }
              if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v85 = v83;
              }
              if (v85)
              {
                char v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 568, v85);
                float v78 = *(char **)(a1 + 560);
                uint64_t v81 = *(char **)(a1 + 552);
              }
              else
              {
                char v86 = 0;
              }
              unsigned int v94 = &v86[4 * v82];
              *(_DWORD *)unsigned int v94 = 0;
              uint64_t v80 = v94 + 4;
              while (v78 != v81)
              {
                int v95 = *((_DWORD *)v78 - 1);
                v78 -= 4;
                *((_DWORD *)v94 - 1) = v95;
                v94 -= 4;
              }
              *(void *)(a1 + 552) = v94;
              *(void *)(a1 + 560) = v80;
              *(void *)(a1 + 568) = &v86[4 * v85];
              if (v81) {
                operator delete(v81);
              }
            }
            else
            {
              *(_DWORD *)float v78 = 0;
              uint64_t v80 = v78 + 4;
            }
            *(void *)(a1 + 560) = v80;
            ++*(_DWORD *)(a1 + 544);
          }
          ++v72;
        }
        while (v72 < *(int *)(a1 + 536));
        if (kaldi::EndPointer::Enabled(*(kaldi::EndPointer **)(a1 + 40))
          && (!*(unsigned char *)(a1 + 576) || *(_DWORD *)(a1 + 528) != *(_DWORD *)(a1 + 536)))
        {
          float v98 = *(int *)(a1 + 344) < 1 ? 0.0 : *(float *)(*(void *)(a1 + 336) + 4 * v109);
          int v99 = *(_DWORD *)(a1 + 544);
          int v100 = v99 < 1
               ? *(_DWORD *)(*(void *)(a1 + 560) - 4) + *(_DWORD *)(a1 + 524)
               : *(_DWORD *)(*(void *)(a1 + 560) - 4);
          BOOL IsEndPoint = kaldi::EndPointer::IsEndPoint(*(kaldi::EndPointer **)(a1 + 40), v98, v56, *(_DWORD *)(a1 + 536) + *(_DWORD *)(a1 + 516), v99 + *(_DWORD *)(a1 + 520), v100);
          *(unsigned char *)(a1 + 577) = IsEndPoint;
          if (IsEndPoint) {
            *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 536);
          }
        }
        if (kaldi::EndPointer::Enabled(*(kaldi::EndPointer **)(a1 + 48)))
        {
          int v102 = *(_DWORD *)(a1 + 536);
          if ((!*(unsigned char *)(a1 + 576) || *(_DWORD *)(a1 + 528) != v102)
            && kaldi::UtteranceDetector::IsUtteranceBoundary(*(kaldi::UtteranceDetector **)(a1 + 48), v102, *(_DWORD *)(a1 + 544), *(_DWORD *)(*(void *)(a1 + 560) - 4)))
          {
            *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 536);
          }
        }
      }
    }
    std::__tree<int>::destroy(a1 + 408, *(void **)(a1 + 416));
    *(void *)(a1 + 4kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
    *(void *)(a1 + 424) = 0;
    *(void *)(a1 + 408) = a1 + 416;
    ++*(_DWORD *)(a1 + 504);
    uint64_t v103 = v125;
    uint64_t v125 = 0;
    if (v103) {
      (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
    }
    uint64_t v104 = v126;
    uint64_t v126 = 0;
    if (v104) {
      (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
    }
    float v105 = v142[0];
    v142[0] = 0;
    if (v105) {
      (*((void (**)(void **))*v105 + 1))(v105);
    }
    v120[0] = v127;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
    v120[0] = v128;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
    v120[0] = v130;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
    v120[0] = v129;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
    if (v131)
    {
      uint64_t v132 = (char *)v131;
      operator delete(v131);
    }
    if (__p)
    {
      uint64_t v135 = (char *)__p;
      operator delete(__p);
    }
    if (v52) {
      operator delete(v52);
    }
    if (v139[0]) {
      operator delete(v139[0]);
    }
    if (v137[0]) {
      operator delete(v137[0]);
    }
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v137);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"No frames to decode. Force decoding EOS.", 40);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v137);
    }
    LODWORD(v129[0]) = 0;
    v137[0] = v129;
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 384), (int *)v129, (uint64_t)&std::piecewise_construct, (_DWORD **)v137)[4] = 0;
    *(void *)(a1 + 368) = *(void *)(a1 + 360);
    int v69 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    LODWORD(v129[0]) = -8388609;
    std::vector<float>::vector(v137, v69, v129);
    uint64_t v70 = (char *)(a1 + 480);
    uint64_t v71 = *(void **)(a1 + 480);
    if (v71)
    {
      *(void *)(a1 + 488) = v71;
      operator delete(v71);
      *(void *)uint64_t v70 = 0;
      *(void *)(a1 + 488) = 0;
      *(void *)(a1 + 496) = 0;
    }
    float v108 = v137[0];
    *(_OWORD *)(a1 + 480) = *(_OWORD *)v137;
    *(void *)(a1 + 496) = v138;
    v108[(int)kaldi::quasar::CELabelEncoderNet::EOSIndex(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24))] = 0;
    if (a4 && v70 != a4) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)(a1 + 480), *(void *)(a1 + 488), (uint64_t)(*(void *)(a1 + 488) - *(void *)(a1 + 480)) >> 2);
    }
    ++*(_DWORD *)(a1 + 504);
  }
  return 1;
}

void sub_1B1EE69F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v59 = a37;
  a37 = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  uint64_t v60 = a38;
  a38 = 0;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  uint64_t v61 = *(void *)(v57 - 128);
  *(void *)(v57 - 128) = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  a29 = &a39;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = &a42;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  std::pair<std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~pair(&a45);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  std::tuple<std::vector<int>,std::vector<int>,std::vector<int>>::~tuple((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_1B1EE6CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::NumDecodedFrames(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  return *((unsigned int *)this + 134);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::EncodeNextChunk(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  kaldi::CuMatrix<float>::CuMatrix(&v15, *((unsigned int *)this + 23), *(unsigned int *)(*((void *)this + 1) + 24), 0, 0, 0);
  int v2 = *((_DWORD *)this + 113);
  if (v2 < 1)
  {
    uint64_t v3 = 0;
  }
  else
  {
    *((void *)&v13 + 1) = __PAIR64__(v2, v17);
    long long v14 = v18;
    int v12 = &unk_1F0A472A0;
    *(void *)&long long v13 = v16;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v12, (uint64_t)this + 432, 111);
    int v12 = &unk_1F0A472A0;
    long long v13 = 0u;
    long long v14 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v12);
    uint64_t v3 = *((unsigned int *)this + 113);
  }
  if ((int)v3 < *((_DWORD *)this + 23))
  {
    signed int v4 = *((_DWORD *)this + 127);
    do
    {
      if (!kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 1), v4, 1)) {
        break;
      }
      *(void *)&long long v13 = v16 + 4 * (int)v18 * (int)v3;
      int v12 = &unk_1F0A472D0;
      *((void *)&v13 + 1) = v17;
      *(void *)&long long v14 = *((void *)&v18 + 1);
      kaldi::OnlineFeatureMatrix::GetFrame(*((kaldi::OnlineFeatureMatrix **)this + 1), *((_DWORD *)this + 127), v11);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(&v12, (uint64_t)v11);
      uint64_t v3 = (v3 + 1);
      signed int v4 = *((_DWORD *)this + 127) + 1;
      *((_DWORD *)this + 127) = v4;
    }
    while ((int)v3 < *((_DWORD *)this + 23));
  }
  if ((int)v3 >= 1)
  {
    if (!kaldi::quasar::CEAcousticEncoderNet::IsInputSizeFixed(*((kaldi::quasar::CEAcousticEncoderNet **)this + 2))
      && (int)v3 < *((_DWORD *)this + 23))
    {
      kaldi::CuMatrix<float>::Resize(&v15, v3, *(unsigned int *)(*((void *)this + 1) + 24), 2, 0);
    }
    BOOL IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 1), *((_DWORD *)this + 127), 1);
    kaldi::quasar::TransducerAutoRegressiveDecodable::Encode((uint64_t)this, (uint64_t)&v15, !IsValidFrame);
    uint64_t v6 = v3;
    if ((int)v3 >= (int)kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(*((kaldi::quasar::CEAcousticEncoderNet **)this
                                                                           + 2)))
    {
      int v7 = kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(*((kaldi::quasar::CEAcousticEncoderNet **)this + 2));
      int v8 = kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(*((kaldi::quasar::CEAcousticEncoderNet **)this + 2));
      uint64_t v6 = (((int)v3 - v8)
                        % (int)kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(*((kaldi::quasar::CEAcousticEncoderNet **)this
                                                                                           + 2))
                        + v7);
    }
    kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 54, v6, *(unsigned int *)(*((void *)this + 1) + 24), 1, 0);
    int v9 = v18 * (v3 - v6);
    *((void *)&v13 + 1) = __PAIR64__(v6, v17);
    LODWORD(v14) = v18;
    DWORD1(v14) = DWORD1(v18) - v9;
    *((void *)&v14 + 1) = *((void *)&v18 + 1);
    int v12 = &unk_1F0A472A0;
    *(void *)&long long v13 = v16 + 4 * v9;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)this + 108, (uint64_t)&v12, 111);
    int v12 = &unk_1F0A472A0;
    long long v13 = 0u;
    long long v14 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v12);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v15);
}

void sub_1B1EE6F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  *signed int v4 = 0u;
  v4[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::LookupStates(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (uint64_t **)(a1 + 384);
  int v7 = (_OWORD *)(a1 + 392);
  std::__tree<int>::destroy(a1 + 384, *(void **)(a1 + 392));
  *(void *)(a1 + 384) = v7;
  long long v8 = 0uLL;
  *int v7 = 0u;
  uint64_t v59 = 0;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v57 = 0;
  *(_OWORD *)float v56 = 0u;
  unint64_t v55 = 0;
  *(_OWORD *)int v54 = 0u;
  uint64_t v9 = *(_DWORD **)a2;
  uint64_t v10 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 == v10)
  {
    unint64_t v52 = 0;
    long long v50 = 0;
    float v48 = 0;
    long long v49 = 0uLL;
    long long v51 = 0uLL;
  }
  else
  {
    uint64_t v53 = a3;
    do
    {
      uint64_t v11 = *(void *)v7;
      int v12 = *v9;
      if (*(void *)v7)
      {
        do
        {
          if (*(_DWORD *)(v11 + 28) >= v12) {
            long long v13 = (uint64_t *)v11;
          }
          else {
            long long v13 = (uint64_t *)(v11 + 8);
          }
          uint64_t v11 = *v13;
        }
        while (*v13);
      }
      long long v14 = (_DWORD *)(*(void *)(a1 + 360) + 12 * v12);
      int32x2_t v15 = (char *)__p[1];
      if (__p[1] >= v59)
      {
        unsigned int v17 = (char *)__p[0];
        int64_t v18 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          goto LABEL_60;
        }
        uint64_t v20 = v59 - (char *)__p[0];
        if ((v59 - (char *)__p[0]) >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v21);
          unsigned int v17 = (char *)__p[0];
          int32x2_t v15 = (char *)__p[1];
        }
        else
        {
          uint64_t v22 = 0;
        }
        unint64_t v23 = &v22[4 * v18];
        *(_DWORD *)unint64_t v23 = *v14;
        uint64_t v16 = v23 + 4;
        while (v15 != v17)
        {
          int v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        __p[0] = v23;
        __p[1] = v16;
        uint64_t v59 = &v22[4 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_DWORD *)__p[1] = *v14;
        uint64_t v16 = v15 + 4;
      }
      __p[1] = v16;
      unint64_t v25 = (char *)v56[1];
      if (v56[1] >= v57)
      {
        uint64_t v27 = (char *)v56[0];
        int64_t v28 = ((char *)v56[1] - (char *)v56[0]) >> 2;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62) {
          goto LABEL_60;
        }
        uint64_t v30 = v57 - (char *)v56[0];
        if ((v57 - (char *)v56[0]) >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          clockid_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v57, v31);
          uint64_t v27 = (char *)v56[0];
          unint64_t v25 = (char *)v56[1];
        }
        else
        {
          clockid_t v32 = 0;
        }
        uint64_t v33 = &v32[4 * v28];
        *(_DWORD *)uint64_t v33 = v14[1];
        uint64_t v26 = v33 + 4;
        while (v25 != v27)
        {
          int v34 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v33 - 1) = v34;
          v33 -= 4;
        }
        v56[0] = v33;
        v56[1] = v26;
        uint64_t v57 = &v32[4 * v31];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(_DWORD *)v56[1] = v14[1];
        uint64_t v26 = v25 + 4;
      }
      v56[1] = v26;
      uint64_t v35 = (char *)v54[1];
      if (v54[1] >= v55)
      {
        uint64_t v37 = (char *)v54[0];
        uint64_t v38 = ((char *)v54[1] - (char *)v54[0]) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
LABEL_60:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v40 = v55 - (char *)v54[0];
        if ((v55 - (char *)v54[0]) >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          int v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v55, v41);
          uint64_t v35 = (char *)v54[1];
          uint64_t v37 = (char *)v54[0];
        }
        else
        {
          int v42 = 0;
        }
        uint64_t v43 = &v42[4 * v38];
        *(_DWORD *)uint64_t v43 = v14[2];
        uint64_t v36 = (uint64_t)(v43 + 4);
        while (v35 != v37)
        {
          int v44 = *((_DWORD *)v35 - 1);
          v35 -= 4;
          *((_DWORD *)v43 - 1) = v44;
          v43 -= 4;
        }
        v54[0] = v43;
        unint64_t v55 = &v42[4 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *(_DWORD *)v54[1] = v14[2];
        uint64_t v36 = (uint64_t)v54[1] + 4;
      }
      v54[1] = (void *)v36;
      uint64_t v45 = *(void *)(a1 + 400);
      int v46 = v14[2];
      uint64_t v60 = v9;
      clockid_t v47 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v6, v9, (uint64_t)&std::piecewise_construct, &v60);
      *((_DWORD *)v47 + 8) = v45;
      *((_DWORD *)v47 + 9) = v46;
      ++v9;
    }
    while (v9 != v10);
    long long v8 = *(_OWORD *)__p;
    float v48 = v59;
    long long v49 = *(_OWORD *)v56;
    long long v50 = v57;
    long long v51 = *(_OWORD *)v54;
    unint64_t v52 = v55;
    a3 = v53;
  }
  *(void *)(a1 + 368) = *(void *)(a1 + 360);
  *(_OWORD *)a3 = v8;
  *(void *)(a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v48;
  *(_OWORD *)(a3 + 24) = v49;
  *(void *)(a3 + 40) = v50;
  *(_OWORD *)(a3 + 48) = v51;
  *(void *)(a3 + 64) = v52;
}

void sub_1B1EE7364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::GatherStates(uint64_t a1@<X0>, uint64_t **a2@<X2>, int **a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::reserve((uint64_t *)&v19, v10);
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::reserve((uint64_t *)&v17, v10);
  uint64_t v11 = a3[1];
  if ((char *)v11 - (char *)*a3 == 4)
  {
    BOOL v12 = 1;
  }
  else
  {
    std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>((uint64_t)v15, *a3, v11);
    BOOL v12 = v16[0] == a3[1] - *a3;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v15);
  }
  long long v13 = *a2;
  long long v14 = a2[1];
  if (*a2 != v14)
  {
    do
    {
      kaldi::quasar::TransducerAutoRegressiveDecodable::GatherState(a1, v13, (uint64_t *)a3, a4, v12, (uint64_t)v15);
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::push_back[abi:ne180100]((uint64_t *)&v19, (uint64_t)v15);
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::push_back[abi:ne180100]((uint64_t *)&v17, (uint64_t)v16);
      unint64_t v21 = (void ***)v16;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      unint64_t v21 = v15;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      v13 += 3;
    }
    while (v13 != v14);
  }
  *(_OWORD *)a5 = v19;
  *(void *)(a5 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v20;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  *(_OWORD *)(a5 + 24) = v17;
  *(void *)(a5 + 40) = v18;
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  v15[0] = (void **)&v17;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](v15);
  v15[0] = (void **)&v19;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](v15);
}

void sub_1B1EE7538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  a9 = (void **)&a15;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)&a19;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::GatherOutputsBatch(void *a1@<X2>, unsigned int **a2@<X3>, char a3@<W4>, uint64_t *a4@<X8>)
{
  if (*a1 == a1[1])
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    (*(void (**)(void))(**(void **)*a1 + 176))();
    uint64_t v9 = *a2;
    long long v8 = a2[1];
    uint64_t v10 = ((char *)v8 - (char *)*a2) & 0x3FFFFFFFCLL;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    if (v10) {
      BOOL v11 = v9 == v8;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      do
      {
        unint64_t v12 = *v9;
        if (((a3 & 1) == 0 || (v12 & 0x80000000) == 0) && (uint64_t)(a1[1] - *a1) >> 3 > v12)
        {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)(*a1 + 8 * v12) + 16))(&v26);
          long long v14 = (void *)a4[1];
          unint64_t v13 = a4[2];
          if ((unint64_t)v14 >= v13)
          {
            uint64_t v17 = ((uint64_t)v14 - *a4) >> 3;
            if ((unint64_t)(v17 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v18 = v13 - *a4;
            uint64_t v19 = v18 >> 2;
            if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
              uint64_t v19 = v17 + 1;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            v25[4] = a4 + 2;
            if (v20) {
              unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a4 + 2), v20);
            }
            else {
              unint64_t v21 = 0;
            }
            uint64_t v22 = &v21[8 * v17];
            v25[0] = v21;
            v25[1] = v22;
            v25[3] = &v21[8 * v20];
            uint64_t v23 = v26;
            uint64_t v26 = 0;
            *(void *)uint64_t v22 = v23;
            void v25[2] = v22 + 8;
            std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a4, v25);
            uint64_t v16 = (void *)a4[1];
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(v25);
          }
          else
          {
            uint64_t v15 = v26;
            uint64_t v26 = 0;
            *long long v14 = v15;
            uint64_t v16 = v14 + 1;
            a4[1] = (uint64_t)v16;
          }
          a4[1] = (uint64_t)v16;
          uint64_t v24 = v26;
          uint64_t v26 = 0;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
        }
        ++v9;
      }
      while (v9 != v8);
    }
  }
}

void sub_1B1EE7774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    (*((void (**)(void **))*v15 + 1))(v15);
  }
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void **kaldi::quasar::TransducerAutoRegressiveDecodable::MergeOutputs@<X0>(void **result@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, int **a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v6 = a3;
  int v42 = result;
  long long v8 = (void *)*a3;
  uint64_t v9 = (void *)a3[1];
  if (*a2 == a2[1])
  {
    if (v8 != v9)
    {
      uint64_t result = (void **)(*(uint64_t (**)(void))(*(void *)*v8 + 176))();
      if (result != 2) {
        goto LABEL_50;
      }
      uint64_t v40 = *v6;
      unint64_t v39 = (void *)v6[1];
      if (((uint64_t)v39 - *v6) >> 3 != a4[1] - *a4)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v43, "nonblank_outputs.size() == labels.size()");
        goto LABEL_57;
      }
      goto LABEL_45;
    }
    if (a4[1] == *a4) {
      goto LABEL_47;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v43, "labels.size() == 0");
LABEL_57:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v43);
  }
  uint64_t result = (void **)(*(uint64_t (**)(void))(**(void **)*a2 + 176))();
  if (v8 == v9)
  {
    if (result != 2) {
      goto LABEL_49;
    }
    uint64_t v40 = *a2;
    unint64_t v39 = (void *)a2[1];
    if (((uint64_t)v39 - *a2) >> 3 == a4[1] - *a4)
    {
      uint64_t v6 = a2;
LABEL_45:
      *a5 = v40;
      a5[1] = (uint64_t)v39;
      a5[2] = v6[2];
      a5 = v6;
LABEL_47:
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return result;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v43, "blank_outputs.size() == labels.size()");
    goto LABEL_57;
  }
  if (result != 2)
  {
LABEL_49:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v43, "blank_outputs.front()->GetNumDims() == 2");
    goto LABEL_57;
  }
  if ((*(unsigned int (**)(void))(**(void **)*v6 + 176))(*(void *)*v6) != 2)
  {
LABEL_50:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v43, "nonblank_outputs.front()->GetNumDims() == 2");
    goto LABEL_57;
  }
  int v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)*a2 + 184))(*(void *)*a2, 1);
  uint64_t result = (void **)(*(uint64_t (**)(void, uint64_t))(**(void **)*v6 + 184))(*(void *)*v6, 1);
  if (v11 != result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v43, "blank_outputs.front()->GetDimSize(1) == nonblank_outputs.front()->GetDimSize(1)");
    goto LABEL_57;
  }
  unint64_t v13 = *a4;
  unint64_t v12 = a4[1];
  if (((v6[1] - *v6) >> 3) + ((a2[1] - *a2) >> 3) != v12 - *a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v43, "blank_outputs.size() + nonblank_outputs.size() == labels.size()");
    goto LABEL_57;
  }
  unint64_t v41 = a2;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (v13 != v12)
  {
    int v14 = 0;
    int v15 = 0;
    do
    {
      int v16 = *v13;
      uint64_t result = (void **)kaldi::quasar::CELabelEncoderNet::BlankIndex((kaldi::quasar::CELabelEncoderNet *)v42[3]);
      uint64_t v18 = (void *)a5[1];
      unint64_t v17 = a5[2];
      if (v16 == result)
      {
        uint64_t v19 = *v41;
        if ((unint64_t)v18 >= v17)
        {
          uint64_t v25 = ((uint64_t)v18 - *a5) >> 3;
          if ((unint64_t)(v25 + 1) >> 61) {
            goto LABEL_58;
          }
          uint64_t v26 = v17 - *a5;
          uint64_t v27 = v26 >> 2;
          if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
            uint64_t v27 = v25 + 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v27;
          }
          clockid_t v47 = a5 + 2;
          if (v28) {
            unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a5 + 2), v28);
          }
          else {
            unint64_t v29 = 0;
          }
          uint64_t v35 = &v29[8 * v25];
          uint64_t v43 = v29;
          int v44 = v35;
          int v46 = &v29[8 * v28];
          uint64_t v36 = *(void *)(v19 + 8 * v15);
          *(void *)(v19 + 8 * v15) = 0;
          *(void *)uint64_t v35 = v36;
          uint64_t v45 = v35 + 8;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a5, &v43);
          unint64_t v21 = (void *)a5[1];
          uint64_t result = std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&v43);
        }
        else
        {
          uint64_t v20 = *(void *)(v19 + 8 * v15);
          *(void *)(v19 + 8 * v15) = 0;
          void *v18 = v20;
          unint64_t v21 = v18 + 1;
          a5[1] = (uint64_t)v21;
        }
        a5[1] = (uint64_t)v21;
        ++v15;
      }
      else
      {
        uint64_t v22 = *v6;
        if ((unint64_t)v18 >= v17)
        {
          uint64_t v30 = ((uint64_t)v18 - *a5) >> 3;
          if ((unint64_t)(v30 + 1) >> 61) {
LABEL_58:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v31 = v17 - *a5;
          uint64_t v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
            uint64_t v32 = v30 + 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          clockid_t v47 = a5 + 2;
          if (v33) {
            int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a5 + 2), v33);
          }
          else {
            int v34 = 0;
          }
          uint64_t v37 = &v34[8 * v30];
          uint64_t v43 = v34;
          int v44 = v37;
          int v46 = &v34[8 * v33];
          uint64_t v38 = *(void *)(v22 + 8 * v14);
          *(void *)(v22 + 8 * v14) = 0;
          *(void *)uint64_t v37 = v38;
          uint64_t v45 = v37 + 8;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a5, &v43);
          uint64_t v24 = (void *)a5[1];
          uint64_t result = std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&v43);
        }
        else
        {
          uint64_t v23 = *(void *)(v22 + 8 * v14);
          *(void *)(v22 + 8 * v14) = 0;
          void *v18 = v23;
          uint64_t v24 = v18 + 1;
          a5[1] = (uint64_t)v24;
        }
        a5[1] = (uint64_t)v24;
        ++v14;
      }
      ++v13;
    }
    while (v13 != v12);
  }
  return result;
}

void sub_1B1EE7CA8()
{
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::MergeStates(void **a1@<X0>, uint64_t *a2@<X2>, void *a3@<X3>, int **a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v7 - *a2 != a3[1] - *a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "blank_states.size() == nonblank_states.size()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (v7 != v6)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      kaldi::quasar::TransducerAutoRegressiveDecodable::MergeState(a1, (uint64_t *)(v6 + v12), (uint64_t *)(*a3 + v12), a4, v14);
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(a5, (uint64_t)v14);
      int v15 = (void **)v14;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v15);
      ++v13;
      uint64_t v6 = *a2;
      v12 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v13);
  }
}

void sub_1B1EE7E44(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void **std::pair<std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~pair(void **a1)
{
  uint64_t v3 = a1 + 3;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::GatherOutputs(uint64_t *a1@<X1>, void *a2@<X2>, int **a3@<X3>, char a4@<W4>, void *a5@<X8>)
{
  if (*a2
    && ((*(void (**)(void))(*(void *)*a2 + 176))(*a2),
        uint64_t v10 = (char *)a3[1] - (char *)*a3,
        (v10 & 0x3FFFFFFFCLL) != 0))
  {
    int v11 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 184))(*a2, 1);
    uint64_t v12 = *a1;
    unint64_t v13 = operator new(0x10uLL);
    uint64_t v19 = v13 + 2;
    uint64_t v20 = v13 + 2;
    *unint64_t v13 = (int)(v10 >> 2);
    v13[1] = v11;
    std::string __p = v13;
    (*(void (**)(uint64_t, void **))(*(void *)v12 + 56))(v12, &__p);
    if (__p)
    {
      uint64_t v19 = __p;
      operator delete(__p);
    }
    int v14 = *a3;
    int v15 = a3[1];
    if (*a3 != v15)
    {
      uint64_t v16 = 0;
      while (1)
      {
        int v17 = *v14;
        if ((a4 & 1) == 0) {
          break;
        }
        if ((v17 & 0x80000000) == 0) {
          goto LABEL_11;
        }
LABEL_13:
        uint64_t v16 = (v16 + v11);
        if (++v14 == v15) {
          return;
        }
      }
      (*(void (**)(void, void))(*(void *)*a2 + 184))(*a2, 0);
LABEL_11:
      if (v17 < (*(int (**)(void, void))(*(void *)*a2 + 184))(*a2, 0)) {
        (*(void (**)(void, void, void, void, uint64_t))(*(void *)*a5 + 72))(*a5, *a2, (v17 * v11), (v17 * v11 + v11), v16);
      }
      goto LABEL_13;
    }
  }
  else
  {
    *a5 = 0;
  }
}

void sub_1B1EE808C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::ComputeLogSoftMax(uint64_t a1, uint64_t a2, int a3, int a4, float *a5, float a6)
{
  uint64_t v10 = (void *)(a2 + 8);
  if (a6 != 1.0)
  {
    if (a6 <= 0.0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "temperature > 0");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    kaldi::VectorBase<float>::Scale(a2 + 8, 1.0 / a6);
  }
  if (a3) {
    *(_DWORD *)(*v10 + 4 * (*(int (**)(uint64_t))(*(void *)a1 + 48))(a1)) = -8388609;
  }
  if (a4)
  {
    float v11 = *(float *)(*v10 + 4 * (*(int (**)(uint64_t))(*(void *)a1 + 32))(a1));
    *(_DWORD *)(*v10 + 4 * (*(int (**)(uint64_t))(*(void *)a1 + 32))(a1)) = -8388609;
  }
  else
  {
    float v11 = -3.4028e38;
  }
  float v12 = kaldi::VectorBase<float>::ApplySoftMax((uint64_t)v10);
  kaldi::VectorBase<float>::ApplyLog((uint64_t)v10);
  if (a3) {
    *(_DWORD *)(*v10 + 4 * (*(int (**)(uint64_t))(*(void *)a1 + 48))(a1)) = 0;
  }
  if (a5)
  {
    if (a4)
    {
      float v13 = expf(v11);
      float v14 = v13 / (float)(v13 + expf(v12));
    }
    else
    {
      int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      float v14 = expf(*(float *)(*v10 + 4 * v15));
    }
    *a5 = v14;
  }
}

BOOL kaldi::quasar::TransducerAutoRegressiveDecodable::AllFramesDecoded(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  return *((unsigned char *)this + 576) && *((_DWORD *)this + 132) == *((_DWORD *)this + 134);
}

uint64_t std::tuple<std::vector<int>,std::vector<int>,std::vector<int>>::~tuple(uint64_t a1)
{
  int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  signed int v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

unint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::LogLikelihood(kaldi::quasar::TransducerAutoRegressiveDecodable *this, int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v26 = a3;
  uint64_t v27 = &v26;
  uint64_t v6 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 48, (int *)&v26, (uint64_t)&std::piecewise_construct, &v27)[4];
  uint64_t v7 = *(unsigned int *)(*((void *)this + 60)
                       + 4
                       * (int)(a4
                             + (*(uint64_t (**)(kaldi::quasar::TransducerAutoRegressiveDecodable *))(*(void *)this + 16))(this)
                             * v6));
  unint64_t v25 = v26 | (unint64_t)(a4 << 32);
  long long v8 = (unsigned int *)std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::find<std::pair<int,int>>((uint64_t)this + 408, (int *)&v25);
  if ((unsigned int *)((char *)this + 416) == v8)
  {
    if (kaldi::quasar::CELabelEncoderNet::BlankIndex(*((kaldi::quasar::CELabelEncoderNet **)this + 3)) == a4) {
      int v10 = HIDWORD(v6) + 1;
    }
    else {
      int v10 = HIDWORD(v6);
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2);
    uint64_t v27 = (unsigned int *)&v25;
    *((_DWORD *)std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>((uint64_t **)this + 51, (int *)&v25, (uint64_t)&std::piecewise_construct, (void **)&v27)+ 9) = v9;
    float v11 = (char *)*((void *)this + 46);
    unint64_t v12 = *((void *)this + 47);
    if ((unint64_t)v11 >= v12)
    {
      float v14 = (char *)*((void *)this + 45);
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v14) >> 2);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0x1555555555555555) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v14) >> 2);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x1555555555555555;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)this + 376, v18);
        float v14 = (char *)*((void *)this + 45);
        float v11 = (char *)*((void *)this + 46);
      }
      else
      {
        uint64_t v19 = 0;
      }
      uint64_t v20 = &v19[12 * v15];
      unint64_t v21 = &v19[12 * v18];
      *(_DWORD *)uint64_t v20 = v6;
      *((_DWORD *)v20 + 1) = a4;
      *((_DWORD *)v20 + 2) = v10;
      float v13 = v20 + 12;
      if (v11 != v14)
      {
        do
        {
          uint64_t v22 = *(void *)(v11 - 12);
          v11 -= 12;
          int v23 = *((_DWORD *)v11 + 2);
          *(void *)(v20 - 12) = v22;
          v20 -= 12;
          *((_DWORD *)v20 + 2) = v23;
        }
        while (v11 != v14);
        float v14 = (char *)*((void *)this + 45);
      }
      *((void *)this + 45) = v20;
      *((void *)this + 46) = v13;
      *((void *)this + 47) = v21;
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_DWORD *)float v11 = v6;
      *((_DWORD *)v11 + 1) = a4;
      float v13 = v11 + 12;
      *((_DWORD *)v11 + 2) = v10;
    }
    *((void *)this + 46) = v13;
  }
  else
  {
    unint64_t v9 = v8[9];
  }
  return v7 | (v9 << 32);
}

void **std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    uint64_t v7[2] = (char *)v7[0] + v5;
    uint64_t v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B1EE8610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::GatherState(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X4>, int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  v55[0] = 0;
  long long v8 = 0uLL;
  long long v54 = 0u;
  v53[0] = 0;
  long long v52 = 0u;
  if (v6 == v7)
  {
    uint64_t v47 = 0;
    uint64_t v45 = 0;
    long long v46 = 0uLL;
  }
  else
  {
    uint64_t v48 = a6;
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(int *)(v7 + 4 * v11);
      int v13 = *(_DWORD *)(*a4 + 4 * v11);
      int v14 = kaldi::quasar::CELabelEncoderNet::BlankIndex(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24));
      int v15 = v14;
      uint64_t v16 = *a2;
      if (v13 == v14) {
        unint64_t v17 = (uint64_t *)&v54;
      }
      else {
        unint64_t v17 = (uint64_t *)&v52;
      }
      if (a5)
      {
        if (v13 == v14) {
          unint64_t v18 = v55;
        }
        else {
          unint64_t v18 = v53;
        }
        uint64_t v20 = (void *)v17[1];
        unint64_t v19 = v17[2];
        if ((unint64_t)v20 >= v19)
        {
          uint64_t v30 = ((uint64_t)v20 - *v17) >> 3;
          if ((unint64_t)(v30 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v31 = v19 - *v17;
          uint64_t v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
            uint64_t v32 = v30 + 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          uint64_t v60 = v18;
          if (v33) {
            int v34 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v18, v33);
          }
          else {
            int v34 = 0;
          }
          uint64_t v40 = (void *)v34 + v30;
          float v56 = v34;
          uint64_t v57 = v40;
          uint64_t v59 = (char *)v34 + 8 * v33;
          uint64_t v41 = *(void *)(v16 + 8 * v12);
          *(void *)(v16 + 8 * v12) = 0;
          *uint64_t v40 = v41;
          int v58 = v40 + 1;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(v17, &v56);
          uint64_t v22 = (void *)v17[1];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v56);
        }
        else
        {
          uint64_t v21 = *(void *)(v16 + 8 * v12);
          *(void *)(v16 + 8 * v12) = 0;
          void *v20 = v21;
          uint64_t v22 = v20 + 1;
          v17[1] = (uint64_t)v22;
        }
        v17[1] = (uint64_t)v22;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(v16 + 8 * v12) + 16))(&v61);
        BOOL v23 = v13 == v15;
        if (v13 == v15) {
          uint64_t v24 = &v54;
        }
        else {
          uint64_t v24 = &v52;
        }
        if (v23) {
          unint64_t v25 = v55;
        }
        else {
          unint64_t v25 = v53;
        }
        uint64_t v27 = (void *)*((void *)v24 + 1);
        unint64_t v26 = *((void *)v24 + 2);
        if ((unint64_t)v27 >= v26)
        {
          uint64_t v35 = ((uint64_t)v27 - *v17) >> 3;
          if ((unint64_t)(v35 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = v26 - *v17;
          uint64_t v37 = v36 >> 2;
          if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
            uint64_t v37 = v35 + 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v37;
          }
          uint64_t v60 = v25;
          if (v38) {
            unint64_t v39 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v25, v38);
          }
          else {
            unint64_t v39 = 0;
          }
          int v42 = (void *)v39 + v35;
          float v56 = v39;
          uint64_t v57 = v42;
          uint64_t v59 = (char *)v39 + 8 * v38;
          uint64_t v43 = v61;
          uint64_t v61 = 0;
          *int v42 = v43;
          int v58 = v42 + 1;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(v17, &v56);
          unint64_t v29 = (void *)*((void *)v24 + 1);
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v56);
        }
        else
        {
          uint64_t v28 = v61;
          uint64_t v61 = 0;
          *uint64_t v27 = v28;
          unint64_t v29 = v27 + 1;
          *((void *)v24 + 1) = v29;
        }
        *((void *)v24 + 1) = v29;
        uint64_t v44 = v61;
        uint64_t v61 = 0;
        if (v44) {
          (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
        }
      }
      ++v11;
      uint64_t v7 = *a3;
    }
    while (v11 < (a3[1] - *a3) >> 2);
    long long v8 = v54;
    uint64_t v45 = v55[0];
    long long v46 = v52;
    uint64_t v47 = v53[0];
    a6 = v48;
  }
  *(_OWORD *)a6 = v8;
  *(void *)(a6 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v45;
  v55[0] = 0;
  long long v54 = 0uLL;
  *(_OWORD *)(a6 + 24) = v46;
  *(void *)(a6 + 40) = v47;
  v53[0] = 0;
  long long v52 = 0uLL;
  float v56 = &v52;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  float v56 = &v54;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
}

void sub_1B1EE8948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v17 - 88) = &a13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 88));
  a13 = (void **)&a17;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void **std::pair<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~pair(void **a1)
{
  uint64_t v3 = a1 + 3;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void **kaldi::quasar::TransducerAutoRegressiveDecodable::MergeState@<X0>(void **result@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, int **a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v7 = a2[1];
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  if (*a2 == v7)
  {
    if (v8 != v9)
    {
      if ((v9 - v8) >> 3 != a4[1] - *a4)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v45, "nonblank_state.size() == labels.size()");
        goto LABEL_46;
      }
      goto LABEL_39;
    }
    if (a4[1] == *a4) {
      goto LABEL_41;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v45, "labels.size() == 0");
LABEL_46:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v45);
  }
  uint64_t v10 = (v7 - *a2) >> 3;
  if (v8 == v9)
  {
    if (v10 == a4[1] - *a4)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      a3 = a2;
LABEL_39:
      *a5 = v8;
      a5[1] = v9;
      a5[2] = a3[2];
      a5 = a3;
LABEL_41:
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return result;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v45, "blank_state.size() == labels.size()");
    goto LABEL_46;
  }
  unint64_t v11 = v10 + ((v9 - v8) >> 3);
  if (v11 != a4[1] - *a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v45);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v45, "blank_state.size() + nonblank_state.size() == labels.size()");
    goto LABEL_46;
  }
  uint64_t v12 = result;
  uint64_t v43 = a3;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t result = std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::reserve(a5, v11);
  int v13 = *a4;
  int v14 = a4[1];
  if (*a4 != v14)
  {
    int v15 = 0;
    uint64_t v16 = 0;
    do
    {
      int v17 = *v13;
      uint64_t result = (void **)kaldi::quasar::CELabelEncoderNet::BlankIndex((kaldi::quasar::CELabelEncoderNet *)v12[3]);
      unint64_t v19 = (void *)a5[1];
      unint64_t v18 = a5[2];
      if (v17 == result)
      {
        uint64_t v20 = (v16 + 1);
        uint64_t v21 = (int)v16;
        uint64_t v22 = *a2;
        if ((unint64_t)v19 >= v18)
        {
          uint64_t v29 = ((uint64_t)v19 - *a5) >> 3;
          if ((unint64_t)(v29 + 1) >> 61) {
            goto LABEL_47;
          }
          uint64_t v30 = v18 - *a5;
          uint64_t v31 = v30 >> 2;
          if (v30 >> 2 <= (unint64_t)(v29 + 1)) {
            uint64_t v31 = v29 + 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v31;
          }
          long long v49 = a5 + 2;
          if (v32) {
            unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a5 + 2), v32);
          }
          else {
            unint64_t v33 = 0;
          }
          unint64_t v39 = &v33[8 * v29];
          uint64_t v45 = v33;
          long long v46 = v39;
          uint64_t v48 = &v33[8 * v32];
          uint64_t v40 = *(void *)(v22 + 8 * v21);
          *(void *)(v22 + 8 * v21) = 0;
          *(void *)unint64_t v39 = v40;
          uint64_t v47 = v39 + 8;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a5, &v45);
          uint64_t v24 = (void *)a5[1];
          uint64_t result = std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&v45);
        }
        else
        {
          uint64_t v23 = *(void *)(v22 + 8 * v21);
          *(void *)(v22 + 8 * v21) = 0;
          void *v19 = v23;
          uint64_t v24 = v19 + 1;
          a5[1] = (uint64_t)v24;
        }
      }
      else
      {
        int v25 = v15 + 1;
        uint64_t v26 = v15;
        uint64_t v27 = *v43;
        if ((unint64_t)v19 >= v18)
        {
          uint64_t v34 = ((uint64_t)v19 - *a5) >> 3;
          if ((unint64_t)(v34 + 1) >> 61) {
LABEL_47:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v35 = v18 - *a5;
          uint64_t v36 = v35 >> 2;
          if (v35 >> 2 <= (unint64_t)(v34 + 1)) {
            uint64_t v36 = v34 + 1;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v36;
          }
          long long v49 = a5 + 2;
          if (v37) {
            unint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a5 + 2), v37);
          }
          else {
            unint64_t v38 = 0;
          }
          uint64_t v41 = &v38[8 * v34];
          uint64_t v45 = v38;
          long long v46 = v41;
          uint64_t v48 = &v38[8 * v37];
          uint64_t v42 = *(void *)(v27 + 8 * v26);
          *(void *)(v27 + 8 * v26) = 0;
          *(void *)uint64_t v41 = v42;
          uint64_t v47 = v41 + 8;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a5, &v45);
          uint64_t v24 = (void *)a5[1];
          uint64_t result = std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&v45);
        }
        else
        {
          uint64_t v28 = *(void *)(v27 + 8 * v26);
          *(void *)(v27 + 8 * v26) = 0;
          void *v19 = v28;
          uint64_t v24 = v19 + 1;
          a5[1] = (uint64_t)v24;
        }
        uint64_t v20 = v16;
        int v15 = v25;
      }
      a5[1] = (uint64_t)v24;
      ++v13;
      uint64_t v16 = v20;
    }
    while (v13 != v14);
  }
  return result;
}

void sub_1B1EE8D60()
{
}

void **std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    uint64_t v7[2] = (char *)v7[0] + v5;
    uint64_t v7[3] = (char *)v7[0] + 8 * v6;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B1EE8E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::AppendBuffers(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    uint64_t v7 = *a4;
    if (*a4)
    {
      std::string __p = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v37, 1uLL);
      unint64_t v11 = &v10[8 * v9];
      *(void *)uint64_t v10 = v7;
      uint64_t v12 = v10 + 8;
      int v14 = (char *)__p;
      int v13 = v36;
      int v15 = v10;
      if (v36 != __p)
      {
        do
        {
          uint64_t v16 = *((void *)v13 - 1);
          v13 -= 8;
          *((void *)v15 - 1) = v16;
          v15 -= 8;
        }
        while (v13 != v14);
        int v13 = (char *)__p;
      }
      std::string __p = v15;
      uint64_t v36 = v10 + 8;
      unint64_t v37 = &v10[8 * v9];
      if (v13)
      {
        operator delete(v13);
        unint64_t v11 = v37;
      }
      uint64_t v36 = v10 + 8;
      uint64_t v17 = *a3;
      if (v12 >= v11)
      {
        uint64_t v21 = (v12 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v11 - (unsigned char *)__p;
        uint64_t v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
          uint64_t v23 = v21 + 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v37, v24);
        }
        else {
          int v25 = 0;
        }
        uint64_t v26 = &v25[8 * v21];
        uint64_t v27 = &v25[8 * v24];
        *(void *)uint64_t v26 = v17;
        unint64_t v18 = v26 + 8;
        uint64_t v29 = (char *)__p;
        uint64_t v28 = v36;
        if (v36 != __p)
        {
          do
          {
            uint64_t v30 = *((void *)v28 - 1);
            v28 -= 8;
            *((void *)v26 - 1) = v30;
            v26 -= 8;
          }
          while (v28 != v29);
          uint64_t v28 = (char *)__p;
        }
        std::string __p = v26;
        uint64_t v36 = v18;
        unint64_t v37 = v27;
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *((void *)v10 + 1) = v17;
        unint64_t v18 = v10 + 16;
      }
      uint64_t v36 = v18;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 96))(&v34);
      uint64_t v31 = v34;
      uint64_t v34 = 0;
      uint64_t v32 = *a4;
      *a4 = v31;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
        uint64_t v33 = v34;
        uint64_t v34 = 0;
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
        }
      }
      if (__p)
      {
        uint64_t v36 = (char *)__p;
        operator delete(__p);
      }
    }
    else
    {
      *a3 = 0;
      uint64_t v19 = *a4;
      *a4 = v4;
      if (v19)
      {
        uint64_t v20 = *(void (**)(void))(*(void *)v19 + 8);
        v20();
      }
    }
  }
}

void sub_1B1EE90C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TransducerAutoRegressiveDecodable::Reset(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 168))
  {
    uint64_t v4 = kaldi::quasar::CEAcousticEncoderNet::Engine(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 16));
    (*(void (**)(double *__return_ptr))(**(void **)v4 + 112))(&v156);
    double v5 = v156;
    double v156 = 0.0;
    uint64_t v6 = *(void *)(a1 + 168);
    *(double *)(a1 + 168) = v5;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      double v7 = v156;
      double v156 = 0.0;
      if (v7 != 0.0) {
        (*(void (**)(double))(**(void **)&v7 + 8))(COERCE_DOUBLE(*(void *)&v7));
      }
    }
  }
  if ((int)kaldi::MatrixBase<float>::NumRows(a1 + 272) >= 1)
  {
    double v8 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v148, a1 + 272, *(_DWORD *)(a1 + 536), *(_DWORD *)(a1 + 528) - *(_DWORD *)(a1 + 536), 0, *(_DWORD *)(a1 + 280));
    kaldi::Matrix<float>::Matrix(&v156, &v148, 111, v8);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v148);
    kaldi::Matrix<float>::Swap((uint64_t *)(a1 + 272), (uint64_t *)&v156);
    uint64_t v9 = *(int *)(a1 + 536);
    if (v9)
    {
      uint64_t v11 = *(void *)(a1 + 312);
      uint64_t v10 = *(unsigned char **)(a1 + 320);
      uint64_t v12 = (unsigned char *)(v11 + 4 * v9);
      int64_t v13 = v10 - v12;
      if (v10 != v12) {
        memmove(*(void **)(a1 + 312), v12, v10 - v12);
      }
      *(void *)(a1 + 320) = v11 + v13;
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)&v156);
  }
  if (*(int *)(a1 + 344) >= 1)
  {
    uint64_t v14 = *(int *)(a1 + 536);
    uint64_t v15 = (*(_DWORD *)(a1 + 528) - v14);
    float v149 = 0;
    uint64_t v150 = 0;
    *(void *)&double v148 = *(void *)(a1 + 336) + 4 * v14;
    LODWORD(v149) = v15;
    double v157 = 0.0;
    long long v158 = 0;
    double v156 = 0.0;
    kaldi::Vector<float>::Resize((void **)&v156, v15, 1);
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v156, (const void **)&v148);
    kaldi::Vector<float>::Swap((uint64_t *)(a1 + 336), (uint64_t *)&v156);
    kaldi::Vector<float>::Destroy((uint64_t)&v156);
  }
  uint64_t v16 = *(char **)(a1 + 120);
  uint64_t v17 = *(char **)(a1 + 128);
  while (v17 != v16)
  {
    v17 -= 24;
    double v156 = *(double *)&v17;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
  }
  *(void *)(a1 + 128) = v16;
  kaldi::quasar::CELabelEncoderNet::InitialStates(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24), &v148);
  double v18 = v148;
  for (uint64_t i = v149; *(void **)&v18 != i; *(void *)&v18 += 8)
  {
    std::string __p = 0;
    int v154 = 0;
    unint64_t v155 = 0;
    long long v160 = &v155;
    double v20 = COERCE_DOUBLE(std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v155, 1uLL));
    double v156 = v20;
    double v157 = v20;
    unint64_t v159 = (void *)(*(void *)&v20 + 8 * v21);
    uint64_t v22 = **(void **)&v18;
    **(void **)&double v18 = 0;
    **(void **)&double v20 = v22;
    long long v158 = (void *)(*(void *)&v20 + 8);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer((uint64_t *)&__p, &v156);
    uint64_t v23 = v154;
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v156);
    int v154 = v23;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>((uint64_t *)(a1 + 120), (uint64_t)&__p);
    double v156 = COERCE_DOUBLE(&__p);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
  }
  double v156 = COERCE_DOUBLE(&v148);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
  char v151 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)&v148, v24);
  uint64_t v152 = 0;
  std::string __p = 0;
  int v154 = 0;
  unint64_t v155 = 0;
  int v25 = (_DWORD *)a2[1];
  do
  {
    if (v25 == (_DWORD *)*a2) {
      break;
    }
    int v26 = *--v25;
    int v27 = kaldi::quasar::CELabelEncoderNet::BlankIndex(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24));
    uint64_t v28 = v154;
    if (v26 != v27)
    {
      if ((unint64_t)v154 >= v155)
      {
        uint64_t v30 = __p;
        uint64_t v31 = ((char *)v154 - (unsigned char *)__p) >> 2;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = v155 - (void)__p;
        if ((uint64_t)(v155 - (void)__p) >> 1 > v32) {
          unint64_t v32 = v33 >> 1;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34)
        {
          uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v34);
          uint64_t v30 = __p;
          uint64_t v28 = v154;
        }
        else
        {
          uint64_t v35 = 0;
        }
        uint64_t v36 = &v35[4 * v31];
        *(_DWORD *)uint64_t v36 = *v25;
        uint64_t v29 = v36 + 4;
        while (v28 != v30)
        {
          int v37 = *--v28;
          *((_DWORD *)v36 - 1) = v37;
          v36 -= 4;
        }
        std::string __p = v36;
        int v154 = v29;
        unint64_t v155 = (unint64_t)&v35[4 * v34];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        _DWORD *v154 = *v25;
        uint64_t v29 = v28 + 1;
      }
      int v154 = v29;
      uint64_t v28 = v29;
    }
    unint64_t v38 = __p;
  }
  while ((int)kaldi::quasar::CELabelEncoderNet::ContextSize(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24)) != ((char *)v28 - v38) >> 2);
  uint64_t v40 = __p;
  unint64_t v39 = (char *)v154;
  if ((int)kaldi::quasar::CELabelEncoderNet::ContextSize(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24)) == (v39 - v40) >> 2)
  {
    uint64_t v42 = v154;
  }
  else
  {
    EmbeddingDiuint64_t m = quasar::TextEmbedder::getEmbeddingDim(*(quasar::TextEmbedder **)(a1 + 24));
    int v44 = EmbeddingDim;
    uint64_t v45 = v154;
    if ((unint64_t)v154 >= v155)
    {
      long long v46 = __p;
      uint64_t v47 = ((char *)v154 - (unsigned char *)__p) >> 2;
      unint64_t v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v49 = v155 - (void)__p;
      if ((uint64_t)(v155 - (void)__p) >> 1 > v48) {
        unint64_t v48 = v49 >> 1;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v48;
      }
      if (v41)
      {
        long long v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v41);
        long long v46 = __p;
        uint64_t v45 = v154;
      }
      else
      {
        long long v50 = 0;
      }
      long long v51 = &v50[4 * v47];
      long long v52 = &v50[4 * v41];
      *(_DWORD *)long long v51 = v44;
      uint64_t v42 = v51 + 4;
      while (v45 != v46)
      {
        int v53 = *--v45;
        *((_DWORD *)v51 - 1) = v53;
        v51 -= 4;
      }
      std::string __p = v51;
      int v154 = v42;
      unint64_t v155 = (unint64_t)v52;
      if (v46) {
        operator delete(v46);
      }
    }
    else
    {
      _DWORD *v154 = EmbeddingDim;
      uint64_t v42 = v45 + 1;
    }
    int v154 = v42;
  }
  long long v54 = (int *)__p;
  unint64_t v55 = (char *)(v42 - 1);
  if (__p != v42 && v55 > __p)
  {
    uint64_t v57 = (char *)__p + 4;
    do
    {
      int v58 = *((_DWORD *)v57 - 1);
      *((_DWORD *)v57 - 1) = *(_DWORD *)v55;
      *(_DWORD *)unint64_t v55 = v58;
      v55 -= 4;
      BOOL v59 = v57 >= v55;
      v57 += 4;
    }
    while (!v59);
  }
  for (; v54 != v42; ++v54)
  {
    uint64_t v60 = *(void *)(a1 + 24);
    int v61 = *v54;
    double v62 = COERCE_DOUBLE(operator new(4uLL));
    double v156 = v62;
    **(_DWORD **)&double v62 = v61;
    *(void *)&double v157 = *(void *)&v62 + 4;
    long long v158 = (void *)(*(void *)&v62 + 4);
    kaldi::quasar::CELabelEncoderNet::EncodeBatch(v60, (void *)(a1 + 120), (int **)&v156, a1 + 120, a1 + 176);
    if (v156 != 0.0)
    {
      double v157 = v156;
      operator delete(*(void **)&v156);
    }
  }
  *(double *)(a1 + 592) = *(double *)(a1 + 592) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)v41) - v148;
  if (*(float *)(a1 + 72) != 0.0)
  {
    uint64_t v63 = *(void *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*(quasar::SpeechRequestData **)(a1 + 32));
    int v64 = kaldi::quasar::CEJointPredictorNet::InputDim(*(kaldi::quasar::CEJointPredictorNet **)(a1 + 32));
    double v65 = COERCE_DOUBLE(operator new(0x10uLL));
    *(void *)&double v157 = *(void *)&v65 + 16;
    long long v158 = (void *)(*(void *)&v65 + 16);
    **(void **)&double v65 = 1;
    *(void *)(*(void *)&v65 + 8) = v64;
    double v156 = v65;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, double *))(*(void *)v63 + 56))(&v161, v63, &v156);
    if (v156 != 0.0)
    {
      double v157 = v156;
      operator delete(*(void **)&v156);
    }
    Trie = (uint64_t *)Ngram::getTrie(*(Ngram **)(a1 + 24));
    kaldi::quasar::ComputeEngineItf::CreateConcat(*Trie, (uint64_t **)(a1 + 176), 0);
    uint64_t v146 = 0;
    LOBYTE(v159) = 1;
    kaldi::Timer::Reset((kaldi::Timer *)&v156, v67);
    long long v160 = 0;
    kaldi::quasar::CEJointPredictorNet::Predict(*(void *)(a1 + 32), &v161, &v147, (uint64_t *)&v146);
    *(double *)(a1 + 608) = *(double *)(a1 + 608) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v68) - v156;
    uint64_t MultiChainMultiAudioBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*(quasar::SpeechRequestData **)(a1 + 32));
    kaldi::quasar::ComputeEngineItf::CreateSplitMove(*MultiChainMultiAudioBuffer, &v146, (uint64_t *)v144);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)(a1 + 200));
    *(_OWORD *)(a1 + 200) = *(_OWORD *)v144;
    *(void *)(a1 + 2kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v145[0];
    v144[1] = 0;
    v145[0] = 0;
    v144[0] = 0;
    int v141 = v144;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
    uint64_t v70 = v146;
    uint64_t v146 = 0;
    if (v70) {
      (*((void (**)(void **))*v70 + 1))(v70);
    }
    uint64_t v71 = v147;
    uint64_t v147 = 0;
    if (v71) {
      (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
    }
    uint64_t v72 = v161;
    uint64_t v161 = 0;
    if (v72) {
      (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
    }
  }
  float v73 = *(kaldi::quasar::CELabelEncoderNet **)(a1 + 56);
  if (v73 && *(float *)(a1 + 68) != 0.0)
  {
    uint64_t v74 = *(char **)(a1 + 144);
    int v75 = *(char **)(a1 + 152);
    if (v75 != v74)
    {
      do
      {
        v75 -= 24;
        double v156 = *(double *)&v75;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
      }
      while (v75 != v74);
      float v73 = *(kaldi::quasar::CELabelEncoderNet **)(a1 + 56);
    }
    *(void *)(a1 + 152) = v74;
    kaldi::quasar::CELabelEncoderNet::InitialStates(v73, v144);
    uint64_t v76 = (uint64_t *)v144[0];
    for (unint64_t j = (uint64_t *)v144[1]; v76 != j; ++v76)
    {
      int v141 = 0;
      unint64_t v142 = 0;
      int v143 = 0;
      long long v160 = (unint64_t *)&v143;
      double v78 = COERCE_DOUBLE(std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v143, 1uLL));
      double v156 = v78;
      double v157 = v78;
      unint64_t v159 = (void *)(*(void *)&v78 + 8 * v79);
      uint64_t v80 = *v76;
      *uint64_t v76 = 0;
      **(void **)&double v78 = v80;
      long long v158 = (void *)(*(void *)&v78 + 8);
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer((uint64_t *)&v141, &v156);
      uint64_t v81 = v142;
      std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v156);
      unint64_t v142 = v81;
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>((uint64_t *)(a1 + 144), (uint64_t)&v141);
      double v156 = COERCE_DOUBLE(&v141);
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
    }
    double v156 = COERCE_DOUBLE(v144);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
    LOBYTE(v159) = 1;
    kaldi::Timer::Reset((kaldi::Timer *)&v156, v82);
    long long v160 = 0;
    v144[0] = 0;
    v144[1] = 0;
    v145[0] = 0;
    int v83 = kaldi::quasar::CELabelEncoderNet::ContextSize(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24));
    if (v83 == kaldi::quasar::CELabelEncoderNet::ContextSize(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 56)))
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v144, (char *)__p, (uint64_t)v154, ((char *)v154 - (unsigned char *)__p) >> 2);
      unint64_t v85 = (char *)v144[1];
    }
    else
    {
      char v86 = (_DWORD *)a2[1];
      do
      {
        if (v86 == (_DWORD *)*a2) {
          break;
        }
        int v87 = *--v86;
        int v88 = kaldi::quasar::CELabelEncoderNet::BlankIndex(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24));
        uint64_t v89 = (char *)v144[1];
        if (v87 != v88)
        {
          if (v144[1] >= (void *)v145[0])
          {
            uint64_t v91 = (char *)v144[0];
            int64_t v92 = ((char *)v144[1] - (char *)v144[0]) >> 2;
            unint64_t v93 = v92 + 1;
            if ((unint64_t)(v92 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            int64_t v94 = v145[0] - (unint64_t)v144[0];
            if ((uint64_t)(v145[0] - (unint64_t)v144[0]) >> 1 > v93) {
              unint64_t v93 = v94 >> 1;
            }
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v95 = v93;
            }
            if (v95)
            {
              unint64_t v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v145, v95);
              uint64_t v91 = (char *)v144[0];
              uint64_t v89 = (char *)v144[1];
            }
            else
            {
              unint64_t v96 = 0;
            }
            int v97 = &v96[4 * v92];
            *(_DWORD *)int v97 = *v86;
            unint64_t v90 = v97 + 4;
            while (v89 != v91)
            {
              int v98 = *((_DWORD *)v89 - 1);
              v89 -= 4;
              *((_DWORD *)v97 - 1) = v98;
              v97 -= 4;
            }
            v144[0] = v97;
            v144[1] = v90;
            v145[0] = &v96[4 * v95];
            if (v91) {
              operator delete(v91);
            }
          }
          else
          {
            *(_DWORD *)v144[1] = *v86;
            unint64_t v90 = v89 + 4;
          }
          v144[1] = v90;
          uint64_t v89 = v90;
        }
        int v99 = v144[0];
      }
      while ((int)kaldi::quasar::CELabelEncoderNet::ContextSize(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 56)) != (v89 - v99) >> 2);
      unsigned int v101 = v144[0];
      int v100 = v144[1];
      if ((int)kaldi::quasar::CELabelEncoderNet::ContextSize(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 56)) == (v100 - v101) >> 2)
      {
        unint64_t v85 = (char *)v144[1];
      }
      else
      {
        int v102 = quasar::TextEmbedder::getEmbeddingDim(*(quasar::TextEmbedder **)(a1 + 56));
        int v103 = v102;
        uint64_t v104 = (char *)v144[1];
        if (v144[1] >= (void *)v145[0])
        {
          float v105 = (char *)v144[0];
          int64_t v106 = ((char *)v144[1] - (char *)v144[0]) >> 2;
          unint64_t v107 = v106 + 1;
          if ((unint64_t)(v106 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          int64_t v108 = v145[0] - (unint64_t)v144[0];
          if ((uint64_t)(v145[0] - (unint64_t)v144[0]) >> 1 > v107) {
            unint64_t v107 = v108 >> 1;
          }
          if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v84 = v107;
          }
          if (v84)
          {
            uint64_t v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v145, v84);
            float v105 = (char *)v144[0];
            uint64_t v104 = (char *)v144[1];
          }
          else
          {
            uint64_t v109 = 0;
          }
          long long v110 = &v109[4 * v106];
          uint64_t v111 = &v109[4 * v84];
          *(_DWORD *)long long v110 = v103;
          unint64_t v85 = v110 + 4;
          while (v104 != v105)
          {
            int v112 = *((_DWORD *)v104 - 1);
            v104 -= 4;
            *((_DWORD *)v110 - 1) = v112;
            v110 -= 4;
          }
          v144[0] = v110;
          v144[1] = v85;
          v145[0] = v111;
          if (v105) {
            operator delete(v105);
          }
        }
        else
        {
          *(_DWORD *)v144[1] = v102;
          unint64_t v85 = v104 + 4;
        }
        v144[1] = v85;
      }
      long long v113 = v85 - 4;
      if (v144[0] != v85 && v113 > v144[0])
      {
        uint64_t v115 = (char *)v144[0] + 4;
        do
        {
          int v116 = *((_DWORD *)v115 - 1);
          *((_DWORD *)v115 - 1) = *(_DWORD *)v113;
          *(_DWORD *)long long v113 = v116;
          v113 -= 4;
          BOOL v59 = v115 >= v113;
          v115 += 4;
        }
        while (!v59);
      }
    }
    for (uint64_t k = (char *)v144[0]; k != v85; k += 4)
    {
      uint64_t v118 = *(void *)(a1 + 56);
      int v119 = *(_DWORD *)k;
      int v120 = operator new(4uLL);
      int v141 = v120;
      _DWORD *v120 = v119;
      unint64_t v142 = v120 + 1;
      int v143 = v120 + 1;
      kaldi::quasar::CELabelEncoderNet::EncodeBatch(v118, (void *)(a1 + 144), (int **)&v141, a1 + 144, a1 + 224);
      if (v141)
      {
        unint64_t v142 = v141;
        operator delete(v141);
      }
    }
    *(double *)(a1 + 6kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(double *)(a1 + 616) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)v84) - v156;
    if (v144[0])
    {
      v144[1] = v144[0];
      operator delete(v144[0]);
    }
  }
  *(void *)(a1 + 368) = *(void *)(a1 + 360);
  int v121 = kaldi::quasar::CELabelEncoderNet::BlankIndex(*(kaldi::quasar::CELabelEncoderNet **)(a1 + 24));
  int v122 = v121;
  uint64_t v123 = *(char **)(a1 + 368);
  unint64_t v124 = *(void *)(a1 + 376);
  if ((unint64_t)v123 >= v124)
  {
    uint64_t v126 = *(char **)(a1 + 360);
    unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * ((v123 - v126) >> 2);
    unint64_t v128 = v127 + 1;
    if (v127 + 1 > 0x1555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - (void)v126) >> 2);
    if (2 * v129 > v128) {
      unint64_t v128 = 2 * v129;
    }
    if (v129 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v130 = 0x1555555555555555;
    }
    else {
      unint64_t v130 = v128;
    }
    if (v130)
    {
      uint64_t v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(a1 + 376, v130);
      uint64_t v126 = *(char **)(a1 + 360);
      uint64_t v123 = *(char **)(a1 + 368);
    }
    else
    {
      uint64_t v131 = 0;
    }
    uint64_t v132 = &v131[12 * v127];
    uint64_t v133 = &v131[12 * v130];
    *(_DWORD *)uint64_t v132 = 0;
    *((_DWORD *)v132 + 1) = v122;
    *((_DWORD *)v132 + 2) = 0;
    uint64_t v125 = v132 + 12;
    if (v123 != v126)
    {
      do
      {
        uint64_t v134 = *(void *)(v123 - 12);
        v123 -= 12;
        int v135 = *((_DWORD *)v123 + 2);
        *(void *)(v132 - 12) = v134;
        v132 -= 12;
        *((_DWORD *)v132 + 2) = v135;
      }
      while (v123 != v126);
      uint64_t v126 = *(char **)(a1 + 360);
    }
    *(void *)(a1 + 360) = v132;
    *(void *)(a1 + 368) = v125;
    *(void *)(a1 + 376) = v133;
    if (v126) {
      operator delete(v126);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v123 = 0;
    *((_DWORD *)v123 + 1) = v121;
    uint64_t v125 = v123 + 12;
    *((_DWORD *)v123 + 2) = 0;
  }
  *(void *)(a1 + 368) = v125;
  std::__tree<int>::destroy(a1 + 384, *(void **)(a1 + 392));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 384) = a1 + 392;
  std::__tree<int>::destroy(a1 + 408, *(void **)(a1 + 416));
  *(void *)(a1 + 4kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 408) = a1 + 416;
  *(void *)(a1 + 488) = *(void *)(a1 + 480);
  *(_DWORD *)(a1 + 512) += kaldi::quasar::TransducerAutoRegressiveDecodable::NumDecodedInputFrames((kaldi::quasar::TransducerAutoRegressiveDecodable *)a1);
  *(_DWORD *)(a1 + 516) += *(_DWORD *)(a1 + 536);
  int v136 = *(_DWORD *)(a1 + 544);
  *(_DWORD *)(a1 + 520) += v136;
  uint64_t v137 = *(void *)(a1 + 552);
  uint64_t v138 = *(void *)(a1 + 560);
  if (v137 != v138)
  {
    if (v136 <= 0) {
      int v139 = *(_DWORD *)(v138 - 4) + *(_DWORD *)(a1 + 524);
    }
    else {
      int v139 = *(_DWORD *)(v138 - 4);
    }
    *(_DWORD *)(a1 + 524) = v139;
  }
  *(_DWORD *)(a1 + 504) = 0;
  uint64_t v140 = *(void *)(a1 + 168);
  if (v140)
  {
    LODWORD(v140) = (*(uint64_t (**)(uint64_t, void))(*(void *)v140 + 184))(v140, 0);
    uint64_t v137 = *(void *)(a1 + 552);
  }
  *(_DWORD *)(a1 + 528) = v140;
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = v137;
  if (__p)
  {
    int v154 = __p;
    operator delete(__p);
  }
}

void sub_1B1EE9DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::NumDecodedInputFrames(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  if (*((unsigned char *)this + 576))
  {
    int v2 = *((_DWORD *)this + 134);
    if (*((_DWORD *)this + 132) == v2) {
      return (*((_DWORD *)this + 127) - *((_DWORD *)this + 128));
    }
  }
  else
  {
    int v2 = *((_DWORD *)this + 134);
  }
  int v4 = kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(*((kaldi::quasar::CEAcousticEncoderNet **)this + 2));
  return kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(*((kaldi::quasar::CEAcousticEncoderNet **)this
                                                                         + 2))
       + v4 * v2;
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::OutputDim(kaldi::quasar::CEJointPredictorNet **this)
{
  return kaldi::quasar::CEJointPredictorNet::OutputDim(this[4]);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::BOSIndex(quasar::TextEmbedder **this)
{
  return quasar::TextEmbedder::getEmbeddingDim(this[3]);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::EOSIndex(kaldi::quasar::CELabelEncoderNet **this)
{
  return kaldi::quasar::CELabelEncoderNet::EOSIndex(this[3]);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::SilIndex(kaldi::quasar::CELabelEncoderNet **this)
{
  return kaldi::quasar::CELabelEncoderNet::SilIndex(this[3]);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::BlankIndex(kaldi::quasar::CELabelEncoderNet **this)
{
  return kaldi::quasar::CELabelEncoderNet::BlankIndex(this[3]);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::MaxSteps(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  return ((int)(float)((float)(*((float *)this + 16) + 1.0) * (float)*((int *)this + 132)) + 1);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::EndPointed(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  return *((unsigned __int8 *)this + 577);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::NumTotalEncodedFrames(kaldi::quasar::TransducerAutoRegressiveDecodable *this)
{
  return *((unsigned int *)this + 133);
}

uint64_t kaldi::quasar::TransducerAutoRegressiveDecodable::FrameSubsamplingFactor(kaldi::quasar::CEAcousticEncoderNet **this)
{
  return kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(this[2]);
}

void std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  int v2 = (void **)**a1;
  if (v2)
  {
    int v4 = (void **)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__vdeallocate(void ***a1)
{
  char v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    int v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        double v5 = v3;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      int v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::find<std::pair<int,int>>(uint64_t a1, int *a2)
{
  int v4 = *(uint64_t **)(a1 + 8);
  int v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  int v6 = *a2;
  int v5 = a2[1];
  double v7 = v2;
  do
  {
    int v8 = *((_DWORD *)v3 + 7);
    if (v8 >= v6)
    {
      if (v6 >= v8)
      {
        if (*((_DWORD *)v3 + 8) < v5) {
          ++v3;
        }
        else {
          double v7 = v3;
        }
      }
      else
      {
        double v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  int v9 = *((_DWORD *)v7 + 7);
  if (v6 < v9 || v9 >= v6 && v5 < *((_DWORD *)v7 + 8)) {
    return v2;
  }
  return v7;
}

uint64_t std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>(uint64_t a1, int *a2, int *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    int v5 = a2;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1B1EEA288(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void quasar::lm::srilm_ext::IterateTrie(uint64_t a1, int a2, uint64_t a3)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  std::vector<unsigned int>::vector(&__p, a2 + 2, &Vocab_None);
  uint64_t v7[3] = 0;
  int v5 = operator new(0x20uLL);
  *int v5 = &unk_1F0A5BBF8;
  v5[1] = &__p;
  v5[2] = a3;
  v5[3] = v7;
  void v8[3] = v5;
  std::__function::__value_func<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::swap[abi:ne180100](v8, v7);
  std::__function::__value_func<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::~__value_func[abi:ne180100](v8);
  std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::operator()((uint64_t)v7, a1, 0, -1, 0);
  std::__function::__value_func<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::~__value_func[abi:ne180100](v7);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1B1EEA388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::operator()(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10 = a2;
  int v9 = a3;
  int v8 = a4;
  uint64_t v7 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, int *, uint64_t *))(*(void *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t quasar::lm::srilm_ext::GetUnigramContextTrie(_DWORD **a1, unsigned int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v4[0] = a2;
  v4[1] = -1;
  char v3 = 0;
  return Trie<unsigned int,BOnode>::findTrie(a1, v4, &v3);
}

void *std::__function::__value_func<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0,std::allocator<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::~__func()
{
}

__n128 std::__function::__func<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0,std::allocator<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = &unk_1F0A5BBF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0,std::allocator<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5BBF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0,std::allocator<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::operator()(void *a1, uint64_t *a2, unsigned int *a3, int *a4, uint64_t *a5)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  int v8 = *a4;
  uint64_t v9 = *a5;
  uint64_t v10 = (void *)a1[1];
  *(_DWORD *)(*v10 + 4 * v7) = v8;
  std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::operator()(a1[2], v6, v7, (uint64_t)v10, v9);
  LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter(v15, v6, 0);
  LHashIter<unsigned int,Trie<unsigned int,BOnode>>::init((uint64_t)v15);
  int v14 = -1;
  for (int i = v7 + 1;
        ;
        std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::operator()(a1[3], v12, i, v14, v6))
  {
    uint64_t v12 = LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next((uint64_t)v15, &v14);
    if (!v12) {
      break;
    }
  }
  return LHashIter<unsigned int,double>::~LHashIter((uint64_t)v15);
}

void sub_1B1EEA6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  LHashIter<unsigned int,double>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0,std::allocator<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0,std::allocator<quasar::lm::srilm_ext::IterateTrie(Trie<unsigned int,BOnode> const&,int,std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>)::$_0>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::target_type()
{
}

uint64_t std::function<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2;
  int v8 = a3;
  uint64_t v7 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v9, &v8, a4, &v7);
}

void *std::__function::__value_func<void ()(Trie<unsigned int,BOnode> const*,unsigned int,unsigned int,Trie<unsigned int,BOnode> const*)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    char v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B1EEAA0C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1B1EEADC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void *std::shared_ptr<quasar::ContextualData>::operator=[abi:ne180100]<quasar::ContextualData,std::default_delete<quasar::ContextualData>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<quasar::ContextualData>::shared_ptr[abi:ne180100]<quasar::ContextualData,std::default_delete<quasar::ContextualData>,void>((uint64_t *)&v6, a2);
  char v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_1B1EEB294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  quasar::ContextualData::NamedEntity::~NamedEntity(&a9);

  _Unwind_Resume(a1);
}

void sub_1B1EEB334()
{
  JUMPOUT(0x1B1EEB320);
}

void sub_1B1EEB340()
{
  JUMPOUT(0x1B1EEB324);
}

void quasar::ContextualData::NamedEntity::~NamedEntity(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void sub_1B1EEB530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_1B1EEB84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1EEBA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_1B1EEBC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1EEBD58(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  std::unique_ptr<quasar::PTree>::reset[abi:ne180100]((quasar::PTree **)&a9, 0);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (quasar::gLogLevel >= 4)
    {
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"Internal C++ exception: %s", 26);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    a24 = 0u;
    a25 = 0u;
    a22 = 0u;
    a23 = 0u;
    a20 = 0u;
    a21 = 0u;
    a18 = 0u;
    a19 = 0u;
    a16 = 0u;
    a17 = 0u;
    a14 = 0u;
    a15 = 0u;
    a12 = 0u;
    a13 = 0u;
    a10 = 0u;
    a11 = 0u;
    a9 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"Internal unknown exception", 26);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  }
  id v28 = v25;
  __cxa_end_catch();
  JUMPOUT(0x1B1EEBD2CLL);
}

void sub_1B1EEBE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void **std::unique_ptr<quasar::ContextualData>::reset[abi:ne180100](void ***a1, void **a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::ContextualData::~ContextualData(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void quasar::ContextualData::~ContextualData(void **this)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 40));
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy((uint64_t)(this + 33), this[34]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 27));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 22));
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(this + 14));
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)(this + 9));
  std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::~__hash_table((uint64_t)(this + 4));
  int v2 = this[3];
  this[3] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t *std::shared_ptr<quasar::ContextualData>::shared_ptr[abi:ne180100]<quasar::ContextualData,std::default_delete<quasar::ContextualData>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *__n128 result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::ContextualData  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void **std::__shared_ptr_pointer<quasar::ContextualData  *>::__on_zero_shared(uint64_t a1)
{
  __n128 result = *(void ***)(a1 + 24);
  if (result)
  {
    quasar::ContextualData::~ContextualData(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::ContextualData  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void kaldi::TransitionModel::ComputeDerived(std::vector<unsigned int> *this)
{
  uint64_t v2 = this + 5;
  std::vector<int>::resize(this + 5, (((char *)this[3].__end_ - (char *)this[3].__begin_) >> 4) + 2);
  LODWORD(this[10].__begin_) = 0;
  std::vector<unsigned int>::pointer begin = this[3].__begin_;
  std::vector<unsigned int>::pointer end = this[3].__end_;
  unint64_t v5 = ((char *)end - (char *)begin) >> 4;
  if (v5 <= 0x7FFFFFFE)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 1;
    int v6 = 1;
    do
    {
      v2->__begin_[v8] = v6;
      if (v5 >= v8)
      {
        uint64_t v9 = &begin[v7];
        int v10 = begin[v7];
        uint64_t v11 = (int)begin[v7 + 1];
        unsigned int v13 = begin[v7 + 2];
        unsigned int v12 = v9[3];
        if (SLODWORD(this[10].__begin_) <= (signed int)(v13 + 1)) {
          signed int v14 = v13 + 1;
        }
        else {
          signed int v14 = (signed int)this[10].__begin_;
        }
        if (v14 <= (int)(v12 + 1)) {
          int v15 = v12 + 1;
        }
        else {
          int v15 = v14;
        }
        LODWORD(this[10].__begin_) = v15;
        uint64_t v16 = (void *)kaldi::HmmTopology::TopologyForPhone((kaldi::HmmTopology *)this, v10);
        v6 += (*(void *)(*v16 + 32 * v11 + 16) - *(void *)(*v16 + 32 * v11 + 8)) >> 3;
        std::vector<unsigned int>::pointer begin = this[3].__begin_;
        std::vector<unsigned int>::pointer end = this[3].__end_;
      }
      BOOL v17 = v8++ < ((((char *)end - (char *)begin) << 28) + 0x100000000) >> 32;
      unint64_t v5 = ((char *)end - (char *)begin) >> 4;
      v7 += 4;
    }
    while (v17);
  }
  else
  {
    int v6 = 1;
  }
  std::vector<int>::resize(this + 6, v6);
  std::vector<int>::resize(this + 7, v6);
  std::vector<unsigned int>::pointer v18 = this[3].__begin_;
  std::vector<unsigned int>::pointer v19 = this[3].__end_;
  if ((int)((unint64_t)((char *)v19 - (char *)v18) >> 4) < 1)
  {
    int v20 = 0;
  }
  else
  {
    int v20 = 0;
    std::vector<unsigned int>::pointer v21 = v2->__begin_;
    uint64_t v22 = 1;
    do
    {
      uint64_t v23 = v22;
      uint64_t v24 = (int)v21[v22++];
      if ((int)v24 < (int)v21[v22])
      {
        do
        {
          this[6].__begin_[v24] = v23;
          if (v20 <= (int)v24) {
            int v20 = v24;
          }
          BOOL IsSelfLoop = kaldi::TransitionModel::IsSelfLoop((kaldi::TransitionModel *)this, v24);
          std::vector<unsigned int>::pointer v18 = this[3].__begin_;
          if (IsSelfLoop) {
            uint64_t v26 = 3;
          }
          else {
            uint64_t v26 = 2;
          }
          this[7].__begin_[v24++] = v18[4 * v23 - 4 + v26];
          std::vector<unsigned int>::pointer v21 = this[5].__begin_;
        }
        while (v24 < (int)v21[v22]);
        std::vector<unsigned int>::pointer v19 = this[3].__end_;
      }
    }
    while (v23 < (int)((unint64_t)((char *)v19 - (char *)v18) >> 4));
  }
  std::vector<int>::resize(this + 4, v20 + 1);
  std::vector<unsigned int>::pointer v27 = this[3].__begin_;
  unint64_t v28 = (unint64_t)((char *)this[3].__end_ - (char *)v27) >> 4;
  if ((int)v28 >= 1)
  {
    std::vector<unsigned int>::pointer v29 = v2->__begin_;
    uint64_t v30 = (v28 + 1);
    uint64_t v31 = 1;
    do
    {
      uint64_t v32 = v31 + 1;
      uint64_t v33 = (int)v29[v31 + 1];
      uint64_t v34 = (int)v29[v31];
      if ((int)v34 < (int)v33)
      {
        uint64_t v35 = &v27[4 * v31 - 2];
        uint64_t v36 = &this[4].__begin_[v34];
        uint64_t v37 = v33 - v34;
        do
        {
          *v36++ = *v35;
          --v37;
        }
        while (v37);
      }
      uint64_t v31 = v32;
    }
    while (v32 != v30);
  }
}

BOOL kaldi::TransitionModel::IsSelfLoop(kaldi::TransitionModel *this, int a2)
{
  uint64_t v2 = *(int *)(*((void *)this + 18) + 4 * a2);
  unint64_t v3 = a2 - (uint64_t)*(int *)(*((void *)this + 15) + 4 * v2);
  uint64_t v4 = *((void *)this + 9) + 16 * v2;
  uint64_t v5 = *(int *)(v4 - 12);
  int v6 = (void *)kaldi::HmmTopology::TopologyForPhone(this, *(_DWORD *)(v4 - 16));
  uint64_t v7 = *(void *)(*v6 + 32 * v5 + 8);
  return v3 < (*(void *)(*v6 + 32 * v5 + 16) - v7) >> 3 && *(_DWORD *)(v7 + 8 * v3) == v5;
}

void kaldi::TransitionModel::ComputeDerivedOfProbs(void **this)
{
  kaldi::Vector<float>::Resize(this + 27, ((unint64_t)((unsigned char *)this[10] - (unsigned char *)this[9]) >> 4) + 1, 0);
  if ((int)((unint64_t)((unsigned char *)this[10] - (unsigned char *)this[9]) >> 4) >= 1)
  {
    uint64_t v2 = 1;
    do
    {
      int v3 = kaldi::TransitionModel::SelfLoopOf((kaldi::TransitionModel *)this, v2);
      if (v3)
      {
        float v4 = expf(*((float *)this[24] + v3));
        if ((float)(1.0 - v4) <= 0.0)
        {
          float v5 = 1.0e-10;
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ComputeDerivedOfProbs(): non-self-loop prob is ", 47);
            std::ostream::operator<<();
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
            float v5 = 1.0e-10;
          }
        }
        else
        {
          float v5 = 1.0 - v4;
        }
        float v6 = logf(v5);
      }
      else
      {
        float v6 = 0.0;
      }
      *((float *)this[27] + v2) = v6;
    }
    while (v2++ < (int)((unint64_t)((unsigned char *)this[10] - (unsigned char *)this[9]) >> 4));
  }
}

void sub_1B1EEC584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

kaldi::TransitionModel *kaldi::TransitionModel::Check(kaldi::TransitionModel *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 18);
  uint64_t v3 = (*((void *)this + 10) - *((void *)this + 9)) >> 4;
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    int v5 = 0;
    uint64_t v6 = *((void *)this + 15);
    int v7 = *(_DWORD *)(v6 + 4);
    uint64_t v8 = (v3 + 1) - 1;
    uint64_t v9 = v6 + 8;
    do
    {
      int v10 = *(_DWORD *)(v9 + 4 * v4);
      int v5 = v10 + v5 - v7;
      ++v4;
      int v7 = v10;
    }
    while (v8 != v4);
  }
  if ((int)(((unint64_t)(*((void *)this + 19) - v2) >> 2) - 1) >= 1)
  {
    uint64_t v11 = 1;
    do
    {
      unsigned int v12 = (int *)(*((void *)v1 + 9) + 16 * (*(_DWORD *)(v2 + 4 * v11) - 1));
      this = (kaldi::TransitionModel *)kaldi::TransitionModel::TupleToTransitionState(v1, *v12, v12[1], v12[2], v12[3]);
      uint64_t v2 = *((void *)v1 + 18);
    }
    while (v11++ < (((*((void *)v1 + 19) - v2) << 30) - 0x100000000) >> 32);
  }
  return this;
}

uint64_t kaldi::TransitionModel::TransitionIdToTransitionState(kaldi::TransitionModel *this, int a2)
{
  return *(unsigned int *)(*((void *)this + 18) + 4 * a2);
}

uint64_t kaldi::TransitionModel::TransitionIdToTransitionIndex(kaldi::TransitionModel *this, int a2)
{
  return (a2 - *(_DWORD *)(*((void *)this + 15) + 4 * *(int *)(*((void *)this + 18) + 4 * a2)));
}

uint64_t kaldi::TransitionModel::PairToTransitionId(kaldi::TransitionModel *this, int a2, int a3)
{
  return (*(_DWORD *)(*((void *)this + 15) + 4 * a2) + a3);
}

uint64_t kaldi::TransitionModel::TransitionStateToPhone(kaldi::TransitionModel *this, int a2)
{
  return *(unsigned int *)(*((void *)this + 9) + 16 * (a2 - 1));
}

uint64_t kaldi::TransitionModel::TransitionStateToHmmState(kaldi::TransitionModel *this, int a2)
{
  return *(unsigned int *)(*((void *)this + 9) + 16 * a2 - 12);
}

uint64_t kaldi::TransitionModel::TransitionStateToForwardPdf(kaldi::TransitionModel *this, int a2)
{
  return *(unsigned int *)(*((void *)this + 9) + 16 * a2 - 8);
}

uint64_t kaldi::TransitionModel::TupleToTransitionState(kaldi::TransitionModel *this, int a2, int a3, int a4, int a5)
{
  int v5 = (char *)*((void *)this + 9);
  uint64_t v6 = (char *)*((void *)this + 10);
  if (v6 == v5)
  {
    uint64_t v8 = (char *)*((void *)this + 10);
  }
  else
  {
    unint64_t v7 = (v6 - v5) >> 4;
    uint64_t v8 = (char *)*((void *)this + 9);
    do
    {
      unint64_t v9 = v7 >> 1;
      int v10 = &v8[16 * (v7 >> 1)];
      if (*(_DWORD *)v10 < a2
        || *(_DWORD *)v10 <= a2
        && ((int v11 = *(_DWORD *)&v8[16 * v9 + 4], v11 < a3)
         || v11 <= a3
         && ((int v12 = *(_DWORD *)&v8[16 * v9 + 8], v12 < a4) || v12 <= a4 && *(_DWORD *)&v8[16 * v9 + 12] < a5)))
      {
        unint64_t v9 = v7 + ~v9;
        uint64_t v8 = v10 + 16;
      }
      unint64_t v7 = v9;
    }
    while (v9);
  }
  if (v6 == v8
    || *(_DWORD *)v8 != a2
    || *((_DWORD *)v8 + 1) != a3
    || *((_DWORD *)v8 + 2) != a4
    || *((_DWORD *)v8 + 3) != a5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    signed int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"TransitionModel::TupleToTransitionState, tuple not found.", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " (incompatible tree and model?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  return ((unint64_t)(v8 - v5) >> 4) + 1;
}

uint64_t kaldi::TransitionModel::TransitionStateToForwardPdfClass(kaldi::TransitionModel *this, int a2)
{
  uint64_t v2 = *((void *)this + 9) + 16 * a2;
  return *(unsigned int *)(*(void *)kaldi::HmmTopology::TopologyForPhone(this, *(_DWORD *)(v2 - 16))
                         + 32 * *(int *)(v2 - 12));
}

uint64_t kaldi::TransitionModel::TransitionStateToSelfLoopPdfClass(kaldi::TransitionModel *this, int a2)
{
  uint64_t v2 = *((void *)this + 9) + 16 * a2;
  return *(unsigned int *)(*(void *)kaldi::HmmTopology::TopologyForPhone(this, *(_DWORD *)(v2 - 16))
                         + 32 * *(int *)(v2 - 12)
                         + 4);
}

BOOL kaldi::TransitionModel::IsFinal(kaldi::TransitionModel *this, int a2)
{
  uint64_t v2 = *(int *)(*((void *)this + 18) + 4 * a2);
  int v3 = a2 - *(_DWORD *)(*((void *)this + 15) + 4 * v2);
  uint64_t v4 = *((void *)this + 9) + 16 * v2;
  int v5 = (void *)kaldi::HmmTopology::TopologyForPhone(this, *(_DWORD *)(v4 - 16));
  return *(_DWORD *)(*(void *)(*v5 + 32 * *(int *)(v4 - 12) + 8) + 8 * v3) + 1 == ((v5[1] - *v5) >> 5);
}

uint64_t kaldi::TransitionModel::SelfLoopOf(kaldi::TransitionModel *this, int a2)
{
  uint64_t v4 = *((void *)this + 9) + 16 * a2;
  uint64_t v5 = *(int *)(v4 - 12);
  uint64_t v6 = (void *)kaldi::HmmTopology::TopologyForPhone(this, *(_DWORD *)(v4 - 16));
  unint64_t v7 = *(int **)(*v6 + 32 * v5 + 8);
  uint64_t v8 = (*(void *)(*v6 + 32 * v5 + 16) - (void)v7) >> 3;
  if ((int)v8 < 1) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = -(uint64_t)v8;
  while (1)
  {
    int v11 = *v7;
    v7 += 2;
    if (v11 == v5) {
      break;
    }
    if (v10 == --v9) {
      return 0;
    }
  }
  return (*(_DWORD *)(*((void *)this + 15) + 4 * a2) - v9);
}

float kaldi::TransitionModel::GetTransitionLogProb(kaldi::TransitionModel *this, int a2)
{
  return *(float *)(*((void *)this + 24) + 4 * a2);
}

void kaldi::TransitionModel::Read(std::vector<int> *a1, uint64_t *a2, uint64_t a3, int a4)
{
  kaldi::ExpectToken(a2, a3, "<TransitionModel>");
  kaldi::HmmTopology::Read(a1, a2, a3);
  std::vector<unsigned int> __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&__p);
  int v15 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v15);
  uint64_t v8 = a1 + 3;
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::resize((uint64_t)&a1[3], v15);
  if (v15 >= 1)
  {
    uint64_t v9 = 0;
    for (uint64_t i = 0; i < v15; ++i)
    {
      kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v8->__begin_[v9]);
      kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v8->__begin_[v9 + 1]);
      kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v8->__begin_[v9 + 2]);
      if (SHIBYTE(v18) < 0)
      {
        if (v17 == 8 && *(void *)__p == 0x3E73656C7075543CLL)
        {
LABEL_18:
          kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v8->__begin_[v9 + 3]);
          goto LABEL_19;
        }
        if (v17 == 9)
        {
          p_p = (unsigned __int8 *)__p;
LABEL_11:
          uint64_t v12 = *(void *)p_p;
          int v13 = p_p[8];
          if (v12 == 0x73656C706972543CLL && v13 == 62) {
            v8->__begin_[v9 + 3] = v8->__begin_[v9 + 2];
          }
        }
      }
      else if (HIBYTE(v18) == 8)
      {
        if (__p == (void *)0x3E73656C7075543CLL) {
          goto LABEL_18;
        }
      }
      else if (HIBYTE(v18) == 9)
      {
        p_p = (unsigned __int8 *)&__p;
        goto LABEL_11;
      }
LABEL_19:
      v9 += 4;
    }
  }
  kaldi::ReadToken(a2, a3, (uint64_t)&__p);
  kaldi::TransitionModel::ComputeDerived((std::vector<unsigned int> *)a1);
  if (a4)
  {
    kaldi::Vector<float>::Resize((void **)&a1[8].__begin_, (unint64_t)((char *)a1[6].__end_ - (char *)a1[6].__begin_) >> 2, 0);
  }
  else
  {
    kaldi::ExpectToken(a2, a3, "<LogProbs>");
    kaldi::Vector<float>::Read((uint64_t)&a1[8], a2, a3, 0);
    kaldi::ExpectToken(a2, a3, "</LogProbs>");
    kaldi::ExpectToken(a2, a3, "</TransitionModel>");
    kaldi::TransitionModel::ComputeDerivedOfProbs((void **)&a1->__begin_);
  }
  kaldi::TransitionModel::Check((kaldi::TransitionModel *)a1);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
}

void sub_1B1EECC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::TransitionModel::GetNonSelfLoopLogProb(kaldi::TransitionModel *this, int a2)
{
  return *(float *)(*((void *)this + 27) + 4 * a2);
}

float kaldi::TransitionModel::GetTransitionLogProbIgnoringSelfLoops(kaldi::TransitionModel *this, int a2)
{
  return *(float *)(*((void *)this + 24) + 4 * a2)
       - *(float *)(*((void *)this + 27) + 4 * *(int *)(*((void *)this + 18) + 4 * a2));
}

uint64_t kaldi::TransitionModel::TransitionIdToPhone(kaldi::TransitionModel *this, int a2)
{
  return *(unsigned int *)(*((void *)this + 9) + 16 * *(int *)(*((void *)this + 18) + 4 * a2) - 16);
}

uint64_t kaldi::TransitionModel::TransitionIdToHmmState(kaldi::TransitionModel *this, int a2)
{
  return *(unsigned int *)(*((void *)this + 9) + 16 * *(int *)(*((void *)this + 18) + 4 * a2) - 12);
}

BOOL kaldi::GetPdfsForPhones(uint64_t a1, void *a2, int **a3)
{
  uint64_t v6 = (int *)a2[1];
  if ((int *)*a2 != v6)
  {
    unint64_t v7 = (int *)(*a2 + 4);
    do
    {
      if (v7 == v6) {
        break;
      }
      int v9 = *(v7 - 1);
      int v8 = *v7++;
    }
    while (v8 > v9);
  }
  uint64_t v10 = *a3;
  a3[1] = *a3;
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  if ((int)((unint64_t)(v11 - v12) >> 4) >= 1)
  {
    int v13 = a3 + 2;
    uint64_t v14 = 1;
    do
    {
      int v15 = (_DWORD *)*a2;
      uint64_t v16 = (_DWORD *)a2[1];
      if (v16 != (_DWORD *)*a2)
      {
        uint64_t v17 = v14 - 1;
        int v18 = *(_DWORD *)(v12 + 16 * (v14 - 1));
        unint64_t v19 = ((uint64_t)v16 - *a2) >> 2;
        do
        {
          unint64_t v20 = v19 >> 1;
          std::vector<unsigned int>::pointer v21 = &v15[v19 >> 1];
          int v23 = *v21;
          uint64_t v22 = v21 + 1;
          v19 += ~(v19 >> 1);
          if (v23 < v18) {
            int v15 = v22;
          }
          else {
            unint64_t v19 = v20;
          }
        }
        while (v19);
        if (v15 != v16 && v18 >= *v15)
        {
          int v24 = *(_DWORD *)(v12 + 16 * v17 + 8);
          int v25 = *v13;
          if (v10 >= *v13)
          {
            std::vector<unsigned int>::pointer v27 = *a3;
            uint64_t v28 = v10 - *a3;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62) {
              goto LABEL_80;
            }
            uint64_t v30 = (char *)v25 - (char *)v27;
            if (v30 >> 1 > v29) {
              unint64_t v29 = v30 >> 1;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v31);
              std::vector<unsigned int>::pointer v27 = *a3;
              uint64_t v10 = a3[1];
            }
            else
            {
              uint64_t v32 = 0;
            }
            uint64_t v33 = (int *)&v32[4 * v28];
            *uint64_t v33 = v24;
            uint64_t v26 = v33 + 1;
            while (v10 != v27)
            {
              int v34 = *--v10;
              *--uint64_t v33 = v34;
            }
            int v25 = (int *)&v32[4 * v31];
            *a3 = v33;
            a3[1] = v26;
            a3[2] = v25;
            if (v27)
            {
              operator delete(v27);
              int v25 = *v13;
            }
          }
          else
          {
            *uint64_t v10 = v24;
            uint64_t v26 = v10 + 1;
          }
          a3[1] = v26;
          int v35 = *(_DWORD *)(*(void *)(a1 + 72) + 16 * v17 + 12);
          if (v26 >= v25)
          {
            uint64_t v36 = *a3;
            uint64_t v37 = v26 - *a3;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62) {
LABEL_80:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v39 = (char *)v25 - (char *)v36;
            if (v39 >> 1 > v38) {
              unint64_t v38 = v39 >> 1;
            }
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v38;
            }
            if (v40)
            {
              unint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v40);
              uint64_t v36 = *a3;
              uint64_t v26 = a3[1];
            }
            else
            {
              unint64_t v41 = 0;
            }
            uint64_t v42 = &v41[4 * v37];
            *(_DWORD *)uint64_t v42 = v35;
            uint64_t v10 = (int *)(v42 + 4);
            while (v26 != v36)
            {
              int v43 = *--v26;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            *a3 = (int *)v42;
            a3[1] = v10;
            a3[2] = (int *)&v41[4 * v40];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *uint64_t v26 = v35;
            uint64_t v10 = v26 + 1;
          }
          a3[1] = v10;
          uint64_t v12 = *(void *)(a1 + 72);
          uint64_t v11 = *(void *)(a1 + 80);
        }
      }
    }
    while (v14++ < (int)((unint64_t)(v11 - v12) >> 4));
  }
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v45 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>(*a3, a3[1]);
  if (a3[1] != v45) {
    a3[1] = v45;
  }
  uint64_t v46 = *(void *)(a1 + 72);
  uint64_t v47 = *(void *)(a1 + 80) - v46;
  unint64_t v48 = (unint64_t)v47 >> 4;
  if ((int)((unint64_t)v47 >> 4) < 1)
  {
    return 1;
  }
  else
  {
    BOOL v49 = 0;
    long long v50 = (_DWORD *)a2[1];
    uint64_t v51 = (int)(v47 >> 4);
    uint64_t v52 = (v48 + 1);
    uint64_t v53 = 1;
    do
    {
      if (v45 != *a3)
      {
        uint64_t v54 = v53 - 1;
        int v55 = *(_DWORD *)(v46 + 16 * (v53 - 1) + 8);
        float v56 = *a3;
        unint64_t v57 = v45 - *a3;
        do
        {
          unint64_t v58 = v57 >> 1;
          BOOL v59 = &v56[v57 >> 1];
          int v61 = *v59;
          uint64_t v60 = v59 + 1;
          v57 += ~(v57 >> 1);
          if (v61 < v55) {
            float v56 = v60;
          }
          else {
            unint64_t v57 = v58;
          }
        }
        while (v57);
        if (v56 != v45 && v55 >= *v56) {
          goto LABEL_68;
        }
        int v62 = *(_DWORD *)(v46 + 16 * v54 + 12);
        uint64_t v63 = *a3;
        unint64_t v64 = v45 - *a3;
        do
        {
          unint64_t v65 = v64 >> 1;
          int v66 = &v63[v64 >> 1];
          int v68 = *v66;
          clockid_t v67 = v66 + 1;
          v64 += ~(v64 >> 1);
          if (v68 < v62) {
            uint64_t v63 = v67;
          }
          else {
            unint64_t v64 = v65;
          }
        }
        while (v64);
        if (v63 != v45 && v62 >= *v63)
        {
LABEL_68:
          if (v50 == (_DWORD *)*a2) {
            break;
          }
          int v69 = *(_DWORD *)(v46 + 16 * v54);
          uint64_t v70 = (_DWORD *)*a2;
          unint64_t v71 = ((uint64_t)v50 - *a2) >> 2;
          do
          {
            unint64_t v72 = v71 >> 1;
            float v73 = &v70[v71 >> 1];
            int v75 = *v73;
            uint64_t v74 = v73 + 1;
            v71 += ~(v71 >> 1);
            if (v75 < v69) {
              uint64_t v70 = v74;
            }
            else {
              unint64_t v71 = v72;
            }
          }
          while (v71);
          if (v70 == v50 || v69 < *v70) {
            break;
          }
        }
      }
      BOOL v49 = v53++ >= v51;
    }
    while (v53 != v52);
  }
  return v49;
}

BOOL kaldi::HmmTopology::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)a1;
  size_t v6 = *(void *)(a1 + 8) - (void)v4;
  unint64_t v7 = *(const void **)a2;
  if (v6 != *(void *)(a2 + 8) - (void)v7) {
    return 0;
  }
  if (memcmp(v4, v7, v6)) {
    return 0;
  }
  int v9 = *(const void **)(a1 + 24);
  size_t v10 = *(void *)(a1 + 32) - (void)v9;
  uint64_t v11 = *(const void **)(a2 + 24);
  if (v10 != *(void *)(a2 + 32) - (void)v11) {
    return 0;
  }
  if (memcmp(v9, v11, v10)) {
    return 0;
  }
  uint64_t v14 = a1 + 48;
  uint64_t v12 = *(uint64_t **)(a1 + 48);
  int v13 = *(uint64_t **)(v14 + 8);
  uint64_t v16 = a2 + 48;
  int v15 = *(uint64_t **)(a2 + 48);
  if ((char *)v13 - (char *)v12 != *(void *)(v16 + 8) - (void)v15) {
    return 0;
  }
  if (v12 == v13) {
    return 1;
  }
  do
  {
    BOOL result = std::__equal_to::operator()[abi:ne180100]<std::vector<kaldi::HmmTopology::HmmState>,std::vector<kaldi::HmmTopology::HmmState>>((uint64_t)&v18, v12, v15);
    if (!result) {
      break;
    }
    v12 += 3;
    v15 += 3;
  }
  while (v12 != v13);
  return result;
}

void *std::vector<kaldi::HmmTopology::HmmState>::__init_with_size[abi:ne180100]<kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    BOOL result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::HmmTopology::HmmState>,kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1EED22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::HmmTopology::HmmState>,kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = *(void *)v6;
      *(void *)(v4 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 8) = 0;
      std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>((char *)(v4 + 8), *(uint64_t **)(v6 + 8), *(uint64_t **)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::HmmTopology::HmmState>,kaldi::HmmTopology::HmmState*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1EED2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::HmmTopology::HmmState>,kaldi::HmmTopology::HmmState*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::vector<kaldi::HmmTopology::HmmState>,std::vector<kaldi::HmmTopology::HmmState>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = *a3;
  if (v4 - *a2 != a3[1] - *a3) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  do
  {
    BOOL result = kaldi::HmmTopology::HmmState::operator==(v3, v5);
    if (!result) {
      break;
    }
    v3 += 32;
    v5 += 32;
  }
  while (v3 != v4);
  return result;
}

BOOL kaldi::HmmTopology::HmmState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v2 - v3 != *(void *)(a2 + 16) - v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  do
  {
    BOOL result = *(float *)(v3 + 4) == *(float *)(v4 + 4) && *(_DWORD *)v3 == *(_DWORD *)v4;
    v3 += 8;
    v4 += 8;
  }
  while (result && v3 != v2);
  return result;
}

void kaldi::quasar::GetKthNBest(void *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, char **a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a3 >= 1)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = a6 + 2;
    uint64_t v13 = a5;
    uint64_t v14 = a4;
    do
    {
      int v15 = *(_DWORD *)(*a1 + 4 * v13);
      if (v15 < 0 || v15 == a2) {
        break;
      }
      if ((unint64_t)v10 >= *v12)
      {
        uint64_t v17 = *a6;
        uint64_t v18 = (v10 - *a6) >> 2;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = *v12 - (void)v17;
        if (v20 >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        unint64_t v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v19;
        if (v21)
        {
          uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v12, v21);
          uint64_t v17 = *a6;
          uint64_t v10 = a6[1];
        }
        else
        {
          uint64_t v22 = 0;
        }
        int v23 = &v22[4 * v18];
        *(_DWORD *)int v23 = v15;
        uint64_t v16 = v23 + 4;
        while (v10 != v17)
        {
          int v24 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *a6 = v23;
        a6[1] = v16;
        a6[2] = &v22[4 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v10 = v15;
        uint64_t v16 = v10 + 4;
      }
      a6[1] = v16;
      v13 += v14;
      ++v11;
      uint64_t v10 = v16;
    }
    while (v11 != a3);
  }
}

void sub_1B1EED5F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *kaldi::quasar::TooManyTokensError::TooManyTokensError(std::runtime_error *this, const char *a2)
{
  BOOL result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1F0A50CA0;
  return result;
}

void kaldi::quasar::TooManyTokensError::~TooManyTokensError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1B3EA8670);
}

std::runtime_error *kaldi::quasar::TooManyForwardLinksError::TooManyForwardLinksError(std::runtime_error *this, const char *a2)
{
  BOOL result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1F0A513A0;
  return result;
}

void kaldi::quasar::TooManyForwardLinksError::~TooManyForwardLinksError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::LatticeFasterDecoder::LatticeFasterDecoder(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1B2565910;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a2;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  long long v4 = *a3;
  long long v5 = a3[1];
  long long v6 = a3[2];
  *(void *)(a1 + 240) = *((void *)a3 + 6);
  *(_OWORD *)(a1 + 208) = v5;
  *(_OWORD *)(a1 + 224) = v6;
  *(_OWORD *)(a1 + 192) = v4;
  *(_DWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1, 0x3E8uLL);
  return a1;
}

void sub_1B1EED7AC(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  long long v6 = v3;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v5);
  int v8 = *v6;
  if (*v6)
  {
    v1[22] = v8;
    operator delete(v8);
  }
  kaldi::LatticeFasterOnlineDecoder::LatticeFasterOnlineDecoder(v2);
  kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::~HashList(v1);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterDecoder::~LatticeFasterDecoder(kaldi::LatticeFasterDecoder *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 != -1)
  {
    uint64_t v3 = *((void *)this + 3);
    do
    {
      uint64_t v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      uint64_t v2 = *v4;
    }
    while (v2 != -1);
  }
  uint64_t v5 = *(void *)this;
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    do
    {
      uint64_t v7 = v5;
      uint64_t v5 = *(void *)(v5 + 16);
      *(void *)(v7 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v6;
      uint64_t v6 = v7;
    }
    while (v5);
    *((void *)this + 6) = v7;
  }
  kaldi::LatticeFasterDecoder::ClearActiveTokens((uint64_t)this);
  if (*((unsigned char *)this + 160))
  {
    uint64_t v8 = *((void *)this + 19);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 256);
  char v9 = (void *)*((void *)this + 21);
  if (v9)
  {
    *((void *)this + 22) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 16);
  if (v10)
  {
    *((void *)this + 17) = v10;
    operator delete(v10);
  }
  int v11 = (void *)*((void *)this + 13);
  if (v11)
  {
    *((void *)this + 14) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 10);
  if (v12)
  {
    *((void *)this + 11) = v12;
    operator delete(v12);
  }
  kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::~HashList(this);
}

uint64_t kaldi::LatticeFasterDecoder::ClearActiveTokens(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v3 = *(void *)(this + 80);
  uint64_t v2 = *(void *)(this + 88);
  if (v2 == v3)
  {
    uint64_t v3 = *(void *)(this + 88);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 16 * v4);
      if (v5)
      {
        do
        {
          uint64_t v6 = *(void *)(v5 + 8);
          if (v6)
          {
            do
            {
              uint64_t v7 = *(void *)(v6 + 24);
              MEMORY[0x1B3EA8670]();
              uint64_t v6 = v7;
            }
            while (v7);
          }
          *(void *)(v5 + 8) = 0;
          uint64_t v8 = *(void *)(v5 + 16);
          this = MEMORY[0x1B3EA8670](v5, 0x1020C4023CB03E4);
          --*(_DWORD *)(v1 + 248);
          uint64_t v5 = v8;
        }
        while (v8);
        uint64_t v3 = *(void *)(v1 + 80);
        uint64_t v2 = *(void *)(v1 + 88);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 4);
  }
  *(void *)(v1 + 88) = v3;
  return this;
}

void kaldi::LatticeFasterDecoder::InitDecoding(kaldi::LatticeFasterDecoder *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 != -1)
  {
    uint64_t v3 = *((void *)this + 3);
    do
    {
      unint64_t v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      uint64_t v2 = *v4;
    }
    while (v2 != -1);
  }
  uint64_t v5 = *(void *)this;
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    do
    {
      uint64_t v7 = v5;
      uint64_t v5 = *(void *)(v5 + 16);
      *(void *)(v7 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v6;
      uint64_t v6 = v7;
    }
    while (v5);
    *((void *)this + 6) = v7;
  }
  *((void *)this + 22) = *((void *)this + 21);
  kaldi::LatticeFasterDecoder::ClearActiveTokens((uint64_t)this);
  *((_WORD *)this + 126) = 0;
  *((_DWORD *)this + 62) = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)this + 32);
  (*(void (**)(void))(**((void **)this + 19) + 24))(*((void *)this + 19));
  std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::resize((uint64_t)this + 80, 1uLL);
  operator new();
}

void kaldi::LatticeFasterDecoder::ProcessNonemitting(kaldi::LatticeFasterDecoder *this)
{
  uint64_t v2 = (*((void *)this + 11) - *((void *)this + 10)) >> 4;
  unint64_t v4 = (void **)((char *)this + 104);
  uint64_t v3 = (char *)*((void *)this + 13);
  uint64_t v5 = *(void *)this;
  if (!*(void *)this)
  {
    float v7 = INFINITY;
LABEL_26:
    if (*((unsigned char *)this + 252)) {
      return;
    }
    uint64_t v18 = v3;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Error, no surviving tokens: frame is ", 37);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      uint64_t v18 = (char *)*((void *)this + 13);
      uint64_t v3 = (char *)*((void *)this + 14);
    }
    *((unsigned char *)this + 252) = 1;
    goto LABEL_30;
  }
  uint64_t v6 = (void *)((char *)this + 120);
  float v7 = INFINITY;
  do
  {
    if ((unint64_t)v3 >= *v6)
    {
      uint64_t v8 = (char *)*v4;
      uint64_t v9 = (v3 - (unsigned char *)*v4) >> 2;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = *v6 - (void)v8;
      if (v11 >> 1 > v10) {
        unint64_t v10 = v11 >> 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 120, v12);
        uint64_t v8 = (char *)*((void *)this + 13);
        uint64_t v3 = (char *)*((void *)this + 14);
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[4 * v9];
      *(_DWORD *)uint64_t v14 = *(_DWORD *)v5;
      int v15 = v14 + 4;
      while (v3 != v8)
      {
        int v16 = *((_DWORD *)v3 - 1);
        v3 -= 4;
        *((_DWORD *)v14 - 1) = v16;
        v14 -= 4;
      }
      *((void *)this + 13) = v14;
      *((void *)this + 14) = v15;
      *((void *)this + 15) = &v13[4 * v12];
      if (v8) {
        operator delete(v8);
      }
      uint64_t v3 = v15;
    }
    else
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)v5;
      v3 += 4;
    }
    *((void *)this + 14) = v3;
    uint64_t v17 = *(float **)(v5 + 8);
    uint64_t v5 = *(void *)(v5 + 16);
    if (*v17 < v7) {
      float v7 = *v17;
    }
  }
  while (v5);
  uint64_t v18 = (char *)*v4;
  if (*v4 == v3) {
    goto LABEL_26;
  }
LABEL_30:
  if (v18 == v3) {
    return;
  }
  float v19 = v7 + *((float *)this + 48);
  do
  {
    unint64_t v21 = *((int *)v3 - 1);
    v3 -= 4;
    unint64_t v20 = v21;
    *((void *)this + 14) = v3;
    uint64_t v22 = *((void *)this + 3);
    uint64_t v23 = *(void *)(v22 + 16 * (v21 % *((void *)this + 2)));
    int v24 = this;
    if (v23 != -1) {
      int v24 = (kaldi::LatticeFasterDecoder *)(*(void *)(v22 + 16 * v23 + 8) + 16);
    }
    for (uint64_t i = *(void *)v24; *(_DWORD *)i != v20; uint64_t i = *(void *)(i + 16))
      ;
    uint64_t v26 = *(void *)(i + 8);
    float v27 = *(float *)v26;
    if (*(float *)v26 > v19) {
      continue;
    }
    uint64_t v28 = *(void *)(v26 + 8);
    if (v28)
    {
      do
      {
        uint64_t v29 = *(void *)(v28 + 24);
        MEMORY[0x1B3EA8670]();
        uint64_t v28 = v29;
      }
      while (v29);
    }
    *(void *)(v26 + 8) = 0;
    uint64_t v30 = *((void *)this + 19);
    unint64_t v36 = 0;
    (*(void (**)(uint64_t, unint64_t, void *))(*(void *)v30 + 136))(v30, v20, v34);
    while (1)
    {
      if (!v34[0])
      {
        if (v36 >= v34[2]) {
          goto LABEL_55;
        }
LABEL_46:
        uint64_t v31 = v34[1] + 16 * v36;
        goto LABEL_47;
      }
      if ((*(unsigned int (**)(void))(*(void *)v34[0] + 24))(v34[0])) {
        break;
      }
      if (!v34[0]) {
        goto LABEL_46;
      }
      uint64_t v31 = (*(uint64_t (**)(void))(*(void *)v34[0] + 32))();
LABEL_47:
      if (!*(_DWORD *)v31)
      {
        float v32 = v27 + *(float *)(v31 + 8);
        if (v32 < v19)
        {
          BOOL v33 = 0;
          kaldi::LatticeFasterDecoder::FindOrAddToken(this, *(_DWORD *)(v31 + 12), v2 - 1, v32, &v33);
          operator new();
        }
      }
      if (v34[0]) {
        (*(void (**)(void))(*(void *)v34[0] + 40))(v34[0]);
      }
      else {
        ++v36;
      }
    }
    if (v34[0])
    {
      (*(void (**)(void))(*(void *)v34[0] + 8))();
      goto LABEL_57;
    }
LABEL_55:
    if (v35) {
      --*v35;
    }
LABEL_57:
    uint64_t v18 = (char *)*((void *)this + 13);
    uint64_t v3 = (char *)*((void *)this + 14);
  }
  while (v18 != v3);
}

void sub_1B1EEE028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::LatticeFasterDecoder::Decode(kaldi::LatticeFasterDecoder *this, kaldi::DecodableInterface *a2)
{
  if ((*(unsigned int (**)(void))(**((void **)this + 19) + 24))(*((void *)this + 19)) != -1) {
    kaldi::LatticeFasterDecoder::InitDecoding(this);
  }
  return 0;
}

void kaldi::LatticeFasterDecoder::PruneActiveTokens(kaldi::LatticeFasterDecoder *this, float a2)
{
  uint64_t v3 = *((void *)this + 10);
  unint64_t v4 = (unint64_t)(*((void *)this + 11) - v3) >> 4;
  int v5 = v4 - 1;
  if ((int)v4 - 1 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (v4 - 2);
    uint64_t v9 = 16 * (v4 - 1);
    uint64_t v10 = 16 * v8;
    unint64_t v11 = (v4 - 1);
    do
    {
      if (*(unsigned char *)(v3 + v10 + v7 + 8))
      {
        LOBYTE(v14[0]) = 0;
        BOOL v15 = 0;
        kaldi::LatticeFasterDecoder::PruneForwardLinks(this, v8, (BOOL *)v14, &v15, a2);
        uint64_t v3 = *((void *)this + 10);
        if (v11 >= 2 && LOBYTE(v14[0])) {
          *(unsigned char *)(v3 + v9 + v7 - 24) = 1;
        }
        if (v15) {
          *(unsigned char *)(v3 + v10 + v7 + 9) = 1;
        }
        *(unsigned char *)(v3 + v10 + v7 + 8) = 0;
      }
      if (v5 > (int)v11 && *(unsigned char *)(v3 + v9 + v7 + 9))
      {
        kaldi::LatticeFasterDecoder::PruneTokensForFrame(this, v11);
        uint64_t v3 = *((void *)this + 10);
        *(unsigned char *)(v3 + v9 + v7 + 9) = 0;
      }
      v7 -= 16;
      --v11;
    }
    while (v8-- > 0);
  }
  if (kaldi::g_kaldi_verbose_level > 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v14, 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"PruneActiveTokens: pruned tokens from ", 38);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v14);
  }
}

void sub_1B1EEE37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::LatticeFasterDecoder::ProcessEmitting(kaldi::LatticeFasterDecoder *this, kaldi::DecodableInterface *a2)
{
  unint64_t v4 = (char *)this + 80;
  uint64_t v5 = *((void *)this + 11) - *((void *)this + 10);
  uint64_t v6 = v5 >> 4;
  std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::resize((uint64_t)this + 80, (v5 >> 4) + 1);
  uint64_t v8 = *((void *)v4 - 9);
  if (v8 != -1)
  {
    uint64_t v9 = *((void *)this + 3);
    do
    {
      uint64_t v10 = (uint64_t *)(v9 + 16 * v8);
      v10[1] = 0;
      uint64_t v8 = *v10;
    }
    while (v8 != -1);
  }
  unint64_t v11 = *(unsigned int **)this;
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  uint64_t v45 = 0;
  float v44 = 0.0;
  unint64_t v43 = 0;
  float v12 = kaldi::GetCutoffHelper<kaldi::LatticeFasterOnlineDecoder,kaldi::LatticeFasterDecoderConfig,kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::Elem>(this, (uint64_t)this + 192, (uint64_t)v11, &v43, &v44, &v45, 1, v7);
  unint64_t v13 = (unint64_t)(float)(*((float *)this + 56) * (float)v43);
  if (*((void *)this + 2) < v13) {
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize((uint64_t)this, v13);
  }
  if (!v45)
  {
    float v16 = 0.0;
    float v18 = INFINITY;
    goto LABEL_35;
  }
  uint64_t v14 = *v45;
  BOOL v15 = (float *)*((void *)v45 + 1);
  float v16 = -*v15;
  uint64_t v17 = *((void *)this + 19);
  unint64_t v42 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v17 + 136))(v17, v14, &v38);
  float v18 = INFINITY;
  while (1)
  {
    if (!v38)
    {
      if (v42 >= v40) {
        goto LABEL_32;
      }
      goto LABEL_13;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v38 + 24))(v38)) {
      break;
    }
    if (v38)
    {
      uint64_t v19 = (*(uint64_t (**)(void))(*(void *)v38 + 32))();
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v19 = v39 + 16 * v42;
LABEL_14:
    if (*(_DWORD *)v19)
    {
      int v20 = *(_DWORD *)(v19 + 4);
      float v21 = *(float *)(v19 + 8);
      (**(void (***)(kaldi::DecodableInterface *, void))a2)(a2, (v6 - 1));
      float v23 = NAN;
      if (v21 != -INFINITY)
      {
        float v24 = v16 - v22;
        if (v24 != -INFINITY)
        {
          float v23 = INFINITY;
          BOOL v25 = v24 == INFINITY || v21 == INFINITY;
          float v26 = v21 + v24;
          if (!v25) {
            float v23 = v26;
          }
        }
      }
      if (v20) {
        float v27 = *((float *)this + 57);
      }
      else {
        float v27 = 0.0;
      }
      float v28 = (float)((float)(v23 + *v15) + v27) + v44;
      if (v28 < v18) {
        float v18 = v28;
      }
    }
    if (v38) {
      (*(void (**)(uint64_t))(*(void *)v38 + 40))(v38);
    }
    else {
      ++v42;
    }
  }
  if (v38)
  {
    (*(void (**)(void))(*(void *)v38 + 8))();
    goto LABEL_35;
  }
LABEL_32:
  if (v41) {
    --*v41;
  }
LABEL_35:
  LODWORD(v38) = 0;
  std::vector<float>::resize((uint64_t)this + 168, (int)(v5 >> 4), &v38);
  *(float *)(*((void *)this + 21) + 4 * ((int)v6 - 1)) = v16;
  if (!v11) {
    return;
  }
  while (2)
  {
    uint64_t v29 = (float *)*((void *)v11 + 1);
    float v30 = *v29;
    if (*v29 > v12) {
      goto LABEL_57;
    }
    uint64_t v31 = *v11;
    uint64_t v32 = *((void *)this + 19);
    unint64_t v42 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, float))(*(void *)v32 + 136))(v32, v31, &v38, v30);
    while (2)
    {
      if (!v38)
      {
        if (v42 >= v40) {
          goto LABEL_55;
        }
        goto LABEL_43;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v38 + 24))(v38))
      {
        if (v38)
        {
          uint64_t v33 = (*(uint64_t (**)(void))(*(void *)v38 + 32))();
          goto LABEL_44;
        }
LABEL_43:
        uint64_t v33 = v39 + 16 * v42;
LABEL_44:
        if (*(_DWORD *)v33)
        {
          (**(void (***)(kaldi::DecodableInterface *, void))a2)(a2, (v6 - 1));
          float v35 = *(_DWORD *)(v33 + 4) ? *((float *)this + 57) : 0.0;
          float v36 = (float)((float)(v16 - v34) + *v29) + (float)(*(float *)(v33 + 8) + v35);
          if (v36 <= v18)
          {
            kaldi::LatticeFasterDecoder::FindOrAddToken(this, *(_DWORD *)(v33 + 12), v6, v36, 0);
            operator new();
          }
        }
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v38 + 40))(v38);
        }
        else {
          ++v42;
        }
        continue;
      }
      break;
    }
    if (v38)
    {
      (*(void (**)(void))(*(void *)v38 + 8))();
      goto LABEL_57;
    }
LABEL_55:
    if (v41) {
      --*v41;
    }
LABEL_57:
    uint64_t v37 = (unsigned int *)*((void *)v11 + 2);
    *((void *)v11 + 2) = *((void *)this + 6);
    *((void *)this + 6) = v11;
    unint64_t v11 = v37;
    if (v37) {
      continue;
    }
    break;
  }
}

void sub_1B1EEE8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  else if (a12)
  {
    --*a12;
  }
  _Unwind_Resume(exception_object);
}

void kaldi::LatticeFasterDecoder::FinalizeDecoding(kaldi::LatticeFasterDecoder *this)
{
  uint64_t v2 = (*((void *)this + 11) - *((void *)this + 10)) >> 4;
  kaldi::LatticeFasterDecoder::PruneForwardLinksFinal(this);
  if ((int)v2 - 1 >= 1)
  {
    do
    {
      kaldi::LatticeFasterDecoder::PruneForwardLinks(this, v2 - 2, (BOOL *)v4, &v5, 0.0);
      kaldi::LatticeFasterDecoder::PruneTokensForFrame(this, v2 - 1);
      LODWORD(v2) = v2 - 1;
    }
    while (v2 > 1);
  }
  kaldi::LatticeFasterDecoder::PruneTokensForFrame(this, 0);
  if (kaldi::g_kaldi_verbose_level > 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4, 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"pruned tokens from ", 19);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4);
  }
}

void sub_1B1EEEA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL kaldi::LatticeFasterDecoder::GetRawLattice(uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 88)) {
    return 0;
  }
  int v6 = *(unsigned __int8 *)(a1 + 253);
  if (*(unsigned char *)(a1 + 253) && (a3 & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"You cannot call FinalizeDecoding() and then call ", 49);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "GetRawLattice() with use_final_probs == false");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v46);
  }
  long long v55 = 0u;
  long long v56 = 0u;
  int v57 = 1065353216;
  float v7 = (long long *)(a1 + 256);
  if (!v6) {
    float v7 = &v55;
  }
  unint64_t v42 = v7;
  if (v6) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = a3 == 0;
  }
  if (!v8) {
    kaldi::LatticeFasterOnlineDecoder::ComputeFinalCosts((unsigned int **)a1, &v55, 0, 0);
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  int v40 = v6;
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  int v11 = *(_DWORD *)(a1 + 248);
  memset(v53, 0, sizeof(v53));
  int v54 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>((uint64_t)v53, v11 / 2 + 3);
  uint64_t v12 = 0;
  uint64_t v13 = ((unint64_t)(v9 - v10) >> 4) - 1;
  long long v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v14 = ((unint64_t)(v9 - v10) >> 4);
  while (1)
  {
    BOOL v15 = *(char **)(*(void *)(a1 + 80) + 16 * v12);
    if (!v15) {
      break;
    }
    kaldi::LatticeFasterDecoder::TopSortTokens(v15, &v50);
    uint64_t v17 = v50;
    float v16 = v51;
    if (v51 != v50)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      do
      {
        if (*(void *)&v17[8 * v19])
        {
          int v20 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
          uint64_t v46 = &v50[v18];
          *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)v53, &v50[v18], (uint64_t)&std::piecewise_construct, (void **)&v46)+ 6) = v20;
          uint64_t v17 = v50;
          float v16 = v51;
        }
        ++v19;
        v18 += 8;
      }
      while (v19 < (v16 - v17) >> 3);
    }
    if (++v12 == v14)
    {
      (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, 0);
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v46, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"init:", 5);
        float v21 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" buckets:", 9);
        float v22 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" load:", 6);
        BOOL v25 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" max:", 5);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v46);
      }
      uint64_t v41 = v14;
      uint64_t v26 = 0;
      if (v40) {
        float v27 = (void *)(a1 + 280);
      }
      else {
        float v27 = (void *)&v56 + 1;
      }
      do
      {
        uint64_t v45 = 0;
        for (uint64_t i = *(void *)(*(void *)(a1 + 80) + 16 * v26); ; uint64_t i = *(void *)(v45 + 16))
        {
          uint64_t v45 = i;
          if (!i) {
            break;
          }
          uint64_t v46 = (char *)&v45;
          uint64_t v29 = *((unsigned int *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)v53, &v45, (uint64_t)&std::piecewise_construct, (void **)&v46)+ 6);
          for (uint64_t j = *(void *)(v45 + 8); j; uint64_t j = *(void *)(j + 24))
          {
            uint64_t v31 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(v53, (void *)j);
            if (*(_DWORD *)(j + 8)) {
              float v32 = *(float *)(*(void *)(a1 + 168) + 4 * v26);
            }
            else {
              float v32 = 0.0;
            }
            int v33 = *((_DWORD *)v31 + 6);
            int v34 = *(_DWORD *)(j + 12);
            int v35 = *(_DWORD *)(j + 16);
            float v36 = *(float *)(j + 20) - v32;
            LODWORD(v46) = *(_DWORD *)(j + 8);
            HIDWORD(v46) = v34;
            int v47 = v35;
            float v48 = v36;
            int v49 = v33;
            (*(void (**)(uint64_t, uint64_t, char **))(*(void *)a2 + 208))(a2, v29, &v46);
          }
          if (v26 == v13)
          {
            if (a3 && *v27)
            {
              uint64_t v37 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(v42, &v45);
              if (v37)
              {
                v44[0] = *((_DWORD *)v37 + 6);
                v44[1] = 0;
                (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 184))(a2, v29, v44);
              }
            }
            else
            {
              uint64_t v43 = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v29, &v43);
            }
          }
        }
        ++v26;
      }
      while (v26 != v41);
      BOOL v23 = (*(int (**)(uint64_t))(*(void *)a2 + 160))(a2) > 0;
      goto LABEL_44;
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"GetRawLattice: no tokens active on frame ", 41);
    float v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": not producing lattice.\n", 25);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
  }
  BOOL v23 = 0;
LABEL_44:
  if (v50)
  {
    uint64_t v51 = v50;
    operator delete(v50);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v53);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v55);
  return v23;
}

uint64_t kaldi::LatticeFasterDecoder::TopSortTokens(char *a1, void *a2)
{
  long long v37 = 0u;
  long long v38 = 0u;
  int v39 = 1065353216;
  if (a1)
  {
    int v2 = -1;
    uint64_t v3 = a1;
    do
    {
      uint64_t v3 = (char *)*((void *)v3 + 2);
      ++v2;
    }
    while (v3);
    uint64_t v31 = a1;
    int v4 = 0;
    do
    {
      *(void *)&long long v34 = &v31;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)&v37, &v31, (uint64_t)&std::piecewise_construct, (void **)&v34)+ 6) = v2 + v4;
      uint64_t v31 = (char *)*((void *)v31 + 2);
      --v4;
    }
    while (v31);
    BOOL v5 = (uint64_t *)v38;
    long long v34 = 0u;
    long long v35 = 0u;
    int v36 = 1065353216;
    int v6 = -v4;
    if ((void)v38)
    {
      do
      {
        uint64_t v31 = (char *)v5[2];
        uint64_t v7 = *((void *)v31 + 1);
        if (v7)
        {
          int v8 = *((_DWORD *)v5 + 6);
          do
          {
            if (!*(_DWORD *)(v7 + 8))
            {
              uint64_t v9 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(&v37, (void *)v7);
              if (v9)
              {
                if (*((_DWORD *)v9 + 6) < v8)
                {
                  *((_DWORD *)v9 + 6) = v6;
                  std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,kaldi::LatticeFasterOnlineDecoder::Token * const&>((uint64_t)&v34, (void *)v7, (void *)v7);
                  ++v6;
                }
              }
            }
            uint64_t v7 = *(void *)(v7 + 24);
          }
          while (v7);
        }
        std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__erase_unique<kaldi::LatticeFasterOnlineDecoder::Token *>(&v34, &v31);
        BOOL v5 = (uint64_t *)*v5;
      }
      while (v5);
      if (*((void *)&v35 + 1))
      {
        unint64_t v10 = 0;
        do
        {
          uint64_t v31 = 0;
          float v32 = 0;
          int v33 = 0;
          int v11 = (void *)v35;
          if ((void)v35)
          {
            uint64_t v12 = 0;
            do
            {
              if (v12 >= v33)
              {
                uint64_t v13 = (v12 - v31) >> 3;
                if ((unint64_t)(v13 + 1) >> 61) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v14 = (v33 - v31) >> 2;
                if (v14 <= v13 + 1) {
                  unint64_t v14 = v13 + 1;
                }
                if ((unint64_t)(v33 - v31) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v15 = v14;
                }
                if (v15) {
                  float v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v33, v15);
                }
                else {
                  float v16 = 0;
                }
                uint64_t v17 = &v16[8 * v13];
                *(void *)uint64_t v17 = v11[2];
                uint64_t v12 = v17 + 8;
                unint64_t v19 = v31;
                uint64_t v18 = v32;
                if (v32 != v31)
                {
                  do
                  {
                    uint64_t v20 = *((void *)v18 - 1);
                    v18 -= 8;
                    *((void *)v17 - 1) = v20;
                    v17 -= 8;
                  }
                  while (v18 != v19);
                  uint64_t v18 = v31;
                }
                uint64_t v31 = v17;
                float v32 = v12;
                int v33 = &v16[8 * v15];
                if (v18) {
                  operator delete(v18);
                }
              }
              else
              {
                *(void *)uint64_t v12 = v11[2];
                v12 += 8;
              }
              float v32 = v12;
              int v11 = (void *)*v11;
            }
            while (v11);
          }
          std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(&v34);
          float v21 = v31;
          if (v31 != v32)
          {
            do
            {
              uint64_t v30 = 0;
              uint64_t v30 = *(void *)v21;
              int v40 = &v30;
              float v22 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)&v37, &v30, (uint64_t)&std::piecewise_construct, &v40);
              uint64_t v23 = *(void *)(v30 + 8);
              if (v23)
              {
                int v24 = *((_DWORD *)v22 + 6);
                do
                {
                  if (!*(_DWORD *)(v23 + 8))
                  {
                    BOOL v25 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(&v37, (void *)v23);
                    if (v25)
                    {
                      if (*((_DWORD *)v25 + 6) < v24)
                      {
                        *((_DWORD *)v25 + 6) = v6;
                        std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,kaldi::LatticeFasterOnlineDecoder::Token * const&>((uint64_t)&v34, (void *)v23, (void *)v23);
                        ++v6;
                      }
                    }
                  }
                  uint64_t v23 = *(void *)(v23 + 24);
                }
                while (v23);
              }
              v21 += 8;
            }
            while (v21 != v32);
            float v21 = v31;
          }
          if (v21)
          {
            float v32 = v21;
            operator delete(v21);
          }
          if (!*((void *)&v35 + 1)) {
            break;
          }
        }
        while (v10++ < 0xF423F);
      }
    }
  }
  else
  {
    int v6 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    int v36 = 1065353216;
  }
  a2[1] = *a2;
  uint64_t v31 = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)a2, v6, &v31);
  for (uint64_t i = (uint64_t **)v38; i; uint64_t i = (uint64_t **)*i)
    *(void *)(*a2 + 8 * *((int *)i + 6)) = i[2];
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v34);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v37);
}

void sub_1B1EEF3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void kaldi::LatticeFasterDecoder::PruneForwardLinks(kaldi::LatticeFasterDecoder *this, unsigned int a2, BOOL *a3, BOOL *a4, float a5)
{
  *a3 = 0;
  *a4 = 0;
  if (!*(void *)(*((void *)this + 10) + 16 * a2) && !*((unsigned char *)this + 252))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"No tokens alive [doing pruning].. warning first time only for each utterance\n", 77);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    }
    *((unsigned char *)this + 252) = 1;
  }
  uint64_t v21 = 16 * a2;
  uint64_t v9 = *(void *)(*((void *)this + 10) + v21);
  if (v9)
  {
    char v10 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(v9 + 8);
      if (v11)
      {
        uint64_t v12 = 0;
        float v13 = INFINITY;
        do
        {
          float v15 = **(float **)v11;
          float v14 = *(float *)(*(void *)v11 + 4);
          float v16 = v14 + (float)((float)((float)(*(float *)v9 + *(float *)(v11 + 20)) + *(float *)(v11 + 16)) - v15);
          if (v16 <= *((float *)this + 52))
          {
            if (v16 >= 0.0)
            {
              float v19 = v14 + (float)((float)((float)(*(float *)v9 + *(float *)(v11 + 20)) + *(float *)(v11 + 16)) - v15);
            }
            else
            {
              float v19 = 0.0;
              if (v16 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Negative extra_cost: ", 21);
                std::ostream::operator<<();
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
              }
            }
            if (v19 < v13) {
              float v13 = v19;
            }
            uint64_t v17 = *(void *)(v11 + 24);
            uint64_t v12 = v11;
          }
          else
          {
            uint64_t v17 = *(void *)(v11 + 24);
            uint64_t v18 = (void *)(v12 + 24);
            if (!v12) {
              uint64_t v18 = (void *)(v9 + 8);
            }
            void *v18 = v17;
            MEMORY[0x1B3EA8670](v11, 0x1020C40D9E1CEDCLL);
            *a4 = 1;
          }
          uint64_t v11 = v17;
        }
        while (v17);
      }
      else
      {
        float v13 = INFINITY;
      }
      if (vabds_f32(v13, *(float *)(v9 + 4)) > a5) {
        char v10 = 1;
      }
      *(float *)(v9 + 4) = v13;
      uint64_t v9 = *(void *)(v9 + 16);
      if (!v9)
      {
        if ((v10 & 1) == 0) {
          break;
        }
        char v10 = 0;
        *a3 = 1;
        uint64_t v9 = *(void *)(*((void *)this + 10) + v21);
        if (!v9) {
          break;
        }
      }
    }
  }
}

void sub_1B1EEF638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterDecoder::PruneForwardLinksFinal(kaldi::LatticeFasterDecoder *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = ((*((void *)this + 11) - v2) << 28) - 0x100000000;
  if (*(void *)(v2 + (v3 >> 28))) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = kaldi::g_kaldi_verbose_level < -1;
  }
  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"No tokens alive at end of file", 30);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
  }
  kaldi::LatticeFasterOnlineDecoder::ComputeFinalCosts((unsigned int **)this, (void *)this + 32, (float *)this + 74, (float *)this + 75);
  *((unsigned char *)this + 253) = 1;
  uint64_t v5 = *((void *)this + 1);
  if (v5 != -1)
  {
    uint64_t v6 = *((void *)this + 3);
    do
    {
      uint64_t v7 = (uint64_t *)(v6 + 16 * v5);
      v7[1] = 0;
      uint64_t v5 = *v7;
    }
    while (v5 != -1);
  }
  uint64_t v8 = *(void *)this;
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  if (v8)
  {
    uint64_t v9 = *((void *)this + 6);
    do
    {
      uint64_t v10 = v8;
      uint64_t v8 = *(void *)(v8 + 16);
      *(void *)(v10 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v9;
      uint64_t v9 = v10;
    }
    while (v8);
    *((void *)this + 6) = v10;
  }
  do
  {
    uint64_t v27 = 0;
    uint64_t v27 = *(void *)(*((void *)this + 10) + 16 * (v3 >> 32));
    if (!v27) {
      break;
    }
    char v11 = 0;
    do
    {
      if (*((void *)this + 35))
      {
        uint64_t v12 = (float *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>((void *)this + 32, &v27);
        if (v12) {
          float v13 = v12[6];
        }
        else {
          float v13 = INFINITY;
        }
      }
      else
      {
        float v13 = 0.0;
      }
      uint64_t v14 = v27;
      float v15 = (float)(v13 + *(float *)v27) - *((float *)this + 75);
      uint64_t v16 = *(void *)(v27 + 8);
      if (v16)
      {
        uint64_t v17 = 0;
        do
        {
          float v19 = **(float **)v16;
          float v18 = *(float *)(*(void *)v16 + 4);
          float v20 = v18 + (float)((float)((float)(*(float *)v27 + *(float *)(v16 + 20)) + *(float *)(v16 + 16)) - v19);
          if (v20 <= *((float *)this + 52))
          {
            if (v20 >= 0.0)
            {
              float v23 = v18 + (float)((float)((float)(*(float *)v27 + *(float *)(v16 + 20)) + *(float *)(v16 + 16)) - v19);
            }
            else
            {
              float v23 = 0.0;
              if (v20 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Negative extra_cost: ", 21);
                std::ostream::operator<<();
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
              }
            }
            if (v23 < v15) {
              float v15 = v23;
            }
            uint64_t v21 = *(void *)(v16 + 24);
            uint64_t v17 = v16;
          }
          else
          {
            uint64_t v21 = *(void *)(v16 + 24);
            float v22 = (void *)(v27 + 8);
            if (v17) {
              float v22 = (void *)(v17 + 24);
            }
            void *v22 = v21;
            MEMORY[0x1B3EA8670](v16, 0x1020C40D9E1CEDCLL);
          }
          uint64_t v16 = v21;
        }
        while (v21);
        uint64_t v14 = v27;
      }
      float v25 = INFINITY;
      if (v15 <= *((float *)this + 52)) {
        float v25 = v15;
      }
      float v26 = *(float *)(v14 + 4);
      if (v26 != v25
        && (COERCE_INT(fabs(v26 - v25)) > 2139095039
         || fabsf(v26 - v25) > (float)((float)(fabsf(v26) + fabsf(v25)) * 0.00001)))
      {
        char v11 = 1;
      }
      *(float *)(v14 + 4) = v25;
      uint64_t v27 = *(void *)(v14 + 16);
    }
    while (v27);
  }
  while ((v11 & 1) != 0);
}

void sub_1B1EEF954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::LatticeFasterDecoder::PruneTokensForFrame(kaldi::LatticeFasterDecoder *this, unsigned int a2)
{
  uint64_t v3 = (uint64_t *)(*((void *)this + 10) + 16 * a2);
  uint64_t result = *v3;
  if (*v3) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = kaldi::g_kaldi_verbose_level < -1;
  }
  if (!v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"No tokens alive [doing pruning]", 31);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    uint64_t result = *v3;
  }
  if (result)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(result + 16);
      if (*(float *)(result + 4) == INFINITY)
      {
        uint64_t v8 = (uint64_t *)(v6 + 16);
        if (!v6) {
          uint64_t v8 = v3;
        }
        *uint64_t v8 = v7;
        MEMORY[0x1B3EA8670]();
        --*((_DWORD *)this + 62);
      }
      else
      {
        uint64_t v6 = result;
      }
      uint64_t result = v7;
    }
    while (v7);
  }
  return result;
}

void sub_1B1EEFA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float *kaldi::LatticeFasterDecoder::FindOrAddToken(kaldi::LatticeFasterDecoder *this, int a2, int a3, float a4, BOOL *a5)
{
  uint64_t v5 = *((void *)this + 3);
  unint64_t v6 = (unint64_t)a2 % *((void *)this + 2);
  uint64_t v7 = *(void *)(v5 + 16 * v6 + 8);
  if (!v7) {
LABEL_8:
  }
    operator new();
  uint64_t v8 = *(void *)(v5 + 16 * v6);
  uint64_t v9 = this;
  if (v8 != -1) {
    uint64_t v9 = (kaldi::LatticeFasterDecoder *)(*(void *)(v5 + 16 * v8 + 8) + 16);
  }
  uint64_t v10 = *(void *)(v7 + 16);
  for (uint64_t i = *(void *)v9; ; uint64_t i = *(void *)(i + 16))
  {
    if (i == v10) {
      goto LABEL_8;
    }
    if (*(_DWORD *)i == a2) {
      break;
    }
  }
  uint64_t v12 = *(float **)(i + 8);
  if (*v12 <= a4)
  {
    if (!a5) {
      return v12;
    }
    BOOL v13 = 0;
    goto LABEL_12;
  }
  *uint64_t v12 = a4;
  if (a5)
  {
    BOOL v13 = 1;
LABEL_12:
    *a5 = v13;
  }
  return v12;
}

uint64_t kaldi::nnet1::Component::GetComponentTypeMap(kaldi::nnet1::Component *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&kaldi::nnet1::Component::GetComponentTypeMap(void)::flag, memory_order_acquire) != -1)
  {
    BOOL v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&kaldi::nnet1::Component::GetComponentTypeMap(void)::flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetComponentTypeMap(void)::$_0 &&>>);
  }
  return kaldi::nnet1::Component::GetComponentTypeMap(void)::init_map_heap;
}

uint64_t kaldi::nnet1::Component::GetGradientNormTypeMap(kaldi::nnet1::Component *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&kaldi::nnet1::Component::GetGradientNormTypeMap(void)::flag, memory_order_acquire) != -1)
  {
    BOOL v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&kaldi::nnet1::Component::GetGradientNormTypeMap(void)::flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetGradientNormTypeMap(void)::$_0 &&>>);
  }
  return kaldi::nnet1::Component::GetGradientNormTypeMap(void)::init_map_heap;
}

uint64_t kaldi::nnet1::Component::GetMatrixInitTypeMap(kaldi::nnet1::Component *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::flag, memory_order_acquire) != -1)
  {
    BOOL v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::$_0 &&>>);
  }
  return kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::init_map_heap;
}

void kaldi::nnet1::Component::TypeToMarker(kaldi::nnet1::Component *a1@<X0>, std::string *a2@<X8>)
{
  int v2 = (int)a1;
  ComponentTypeMap = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetComponentTypeMap(a1);
  uint64_t v5 = *(void **)ComponentTypeMap;
  unint64_t v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetComponentTypeMap(ComponentTypeMap);
  if (v5 == (void *)((char *)v6 + 8))
  {
LABEL_9:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Unknown component type: ", 24);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  while (*((_DWORD *)v5 + 14) != v2)
  {
    uint64_t v7 = (void *)v5[1];
    if (v7)
    {
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (void *)v5[2];
        BOOL v9 = *v8 == (void)v5;
        uint64_t v5 = v8;
      }
      while (!v9);
    }
    unint64_t v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetComponentTypeMap(v6);
    uint64_t v5 = v8;
    if (v8 == (void *)((char *)v6 + 8)) {
      goto LABEL_9;
    }
  }
  if (*((char *)v5 + 55) < 0)
  {
    char v11 = (const std::string::value_type *)v5[4];
    std::string::size_type v12 = v5[5];
    std::string::__init_copy_ctor_external(a2, v11, v12);
  }
  else
  {
    long long v10 = *((_OWORD *)v5 + 2);
    a2->__r_.__value_.__r.__words[2] = v5[6];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
}

{
  int v2;
  kaldi::nnet1::Component *GradientNormTypeMap;
  void *v5;
  kaldi::nnet1::Component *v6;
  void *v7;
  void *v8;
  BOOL v9;
  long long v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  void v13[34];
  uint64_t vars8;

  int v2 = (int)a1;
  GradientNormTypeMap = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetGradientNormTypeMap(a1);
  uint64_t v5 = *(void **)GradientNormTypeMap;
  unint64_t v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetGradientNormTypeMap(GradientNormTypeMap);
  if (v5 == (void *)((char *)v6 + 8))
  {
LABEL_9:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Unknown gradient normalizaiton type: ", 37);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  while (*((_DWORD *)v5 + 14) != v2)
  {
    uint64_t v7 = (void *)v5[1];
    if (v7)
    {
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (void *)v5[2];
        BOOL v9 = *v8 == (void)v5;
        uint64_t v5 = v8;
      }
      while (!v9);
    }
    unint64_t v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetGradientNormTypeMap(v6);
    uint64_t v5 = v8;
    if (v8 == (void *)((char *)v6 + 8)) {
      goto LABEL_9;
    }
  }
  if (*((char *)v5 + 55) < 0)
  {
    char v11 = (const std::string::value_type *)v5[4];
    std::string::size_type v12 = v5[5];
    std::string::__init_copy_ctor_external(a2, v11, v12);
  }
  else
  {
    long long v10 = *((_OWORD *)v5 + 2);
    a2->__r_.__value_.__r.__words[2] = v5[6];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
}

{
  int v2;
  kaldi::nnet1::Component *MatrixInitTypeMap;
  void *v5;
  kaldi::nnet1::Component *v6;
  void *v7;
  void *v8;
  BOOL v9;
  long long v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  void v13[34];
  uint64_t vars8;

  int v2 = (int)a1;
  MatrixInitTypeMap = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetMatrixInitTypeMap(a1);
  uint64_t v5 = *(void **)MatrixInitTypeMap;
  unint64_t v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetMatrixInitTypeMap(MatrixInitTypeMap);
  if (v5 == (void *)((char *)v6 + 8))
  {
LABEL_9:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Unknown matrix initialization type: ", 36);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  while (*((_DWORD *)v5 + 14) != v2)
  {
    uint64_t v7 = (void *)v5[1];
    if (v7)
    {
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (void *)v5[2];
        BOOL v9 = *v8 == (void)v5;
        uint64_t v5 = v8;
      }
      while (!v9);
    }
    unint64_t v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetMatrixInitTypeMap(v6);
    uint64_t v5 = v8;
    if (v8 == (void *)((char *)v6 + 8)) {
      goto LABEL_9;
    }
  }
  if (*((char *)v5 + 55) < 0)
  {
    char v11 = (const std::string::value_type *)v5[4];
    std::string::size_type v12 = v5[5];
    std::string::__init_copy_ctor_external(a2, v11, v12);
  }
  else
  {
    long long v10 = *((_OWORD *)v5 + 2);
    a2->__r_.__value_.__r.__words[2] = v5[6];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1B1EEFE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B1EEFF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B1EF00B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string::size_type kaldi::nnet1::Component::MarkerToComponentType(std::string::size_type *a1)
{
  uint64_t ComponentTypeMap = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)a1);
  BOOL v4 = (unsigned int *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(ComponentTypeMap, (const void **)a1);
  uint64_t v5 = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)v4);
  if ((unsigned int *)(v5 + 8) != v4) {
    return v4[14];
  }
  int v6 = *((char *)a1 + 23);
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)*a1, a1[1]);
    int v6 = *((char *)a1 + 23);
    if (v6 < 0)
    {
      uint64_t v8 = (char *)*a1;
      std::string::size_type v7 = a1[1];
      if (v7) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    std::string v39 = *(std::string *)a1;
  }
  std::string::size_type v7 = v6;
  uint64_t v8 = (char *)a1;
  if ((_BYTE)v6)
  {
LABEL_7:
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1 = (std::string::size_type)&v39;
    }
    else {
      std::string::size_type v1 = v39.__r_.__value_.__r.__words[0];
    }
    do
    {
      uint64_t v5 = __tolower(*v8);
      *(unsigned char *)v1++ = v5;
      ++v8;
      --v7;
    }
    while (v7);
  }
LABEL_11:
  uint64_t v9 = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)v5);
  long long v10 = *(void **)v9;
  while (1)
  {
    uint64_t v9 = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)v9);
    if (v10 == (void *)(v9 + 8))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
      int v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unknown component type marker: ", 31);
      int v34 = *((char *)a1 + 23);
      if (v34 >= 0) {
        uint64_t v35 = (uint64_t)a1;
      }
      else {
        uint64_t v35 = *a1;
      }
      if (v34 >= 0) {
        uint64_t v36 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        uint64_t v36 = a1[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
    }
    if ((*((char *)v10 + 55) & 0x80000000) == 0)
    {
      uint64_t v11 = *((unsigned __int8 *)v10 + 55);
      std::string v38 = *(std::string *)(v10 + 4);
LABEL_17:
      std::string::size_type v12 = (char *)(v10 + 4);
      goto LABEL_18;
    }
    std::string::__init_copy_ctor_external(&v38, (const std::string::value_type *)v10[4], v10[5]);
    if ((*((char *)v10 + 55) & 0x80000000) == 0)
    {
      uint64_t v11 = *((unsigned __int8 *)v10 + 55);
      goto LABEL_17;
    }
    std::string::size_type v12 = (char *)v10[4];
    uint64_t v11 = v10[5];
LABEL_18:
    std::string::size_type v13 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if (v11)
    {
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v38;
      }
      else {
        uint64_t v14 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      do
      {
        uint64_t v9 = __tolower(*v12);
        v14->__r_.__value_.__s.__data_[0] = v9;
        uint64_t v14 = (std::string *)((char *)v14 + 1);
        ++v12;
        --v11;
      }
      while (v11);
      std::string::size_type v13 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    uint64_t v15 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v39.__r_.__value_.__l.__size_;
    }
    std::string::size_type v17 = v38.__r_.__value_.__l.__size_;
    if ((v13 & 0x80u) == 0) {
      std::string::size_type v17 = v13;
    }
    if (size != v17) {
      goto LABEL_40;
    }
    float v18 = (v13 & 0x80u) == 0 ? &v38 : (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((*((unsigned char *)&v39.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v9 = memcmp(v39.__r_.__value_.__l.__data_, v18, v39.__r_.__value_.__l.__size_);
      if (v9) {
        goto LABEL_40;
      }
    }
    else if (*((unsigned char *)&v39.__r_.__value_.__s + 23))
    {
      float v19 = &v39;
      while (v19->__r_.__value_.__s.__data_[0] == v18->__r_.__value_.__s.__data_[0])
      {
        float v19 = (std::string *)((char *)v19 + 1);
        float v18 = (std::string *)((char *)v18 + 1);
        if (!--v15) {
          goto LABEL_48;
        }
      }
LABEL_40:
      char v20 = 0;
      if ((v13 & 0x80) == 0) {
        goto LABEL_42;
      }
LABEL_41:
      operator delete(v38.__r_.__value_.__l.__data_);
      goto LABEL_42;
    }
LABEL_48:
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
      float v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"please update to formatted name ", 32);
      int v24 = *((char *)v10 + 55);
      if (v24 >= 0) {
        uint64_t v25 = (uint64_t)(v10 + 4);
      }
      else {
        uint64_t v25 = v10[4];
      }
      if (v24 >= 0) {
        uint64_t v26 = *((unsigned __int8 *)v10 + 55);
      }
      else {
        uint64_t v26 = v10[5];
      }
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
      float v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ASAP, you used ", 16);
      int v29 = *((char *)a1 + 23);
      if (v29 >= 0) {
        uint64_t v30 = (uint64_t)a1;
      }
      else {
        uint64_t v30 = *a1;
      }
      if (v29 >= 0) {
        uint64_t v31 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        uint64_t v31 = a1[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v37);
      LOBYTE(v13) = *((unsigned char *)&v38.__r_.__value_.__s + 23);
    }
    std::string::size_type v1 = *((unsigned int *)v10 + 14);
    char v20 = 1;
    if ((v13 & 0x80) != 0) {
      goto LABEL_41;
    }
LABEL_42:
    if (v20) {
      break;
    }
    uint64_t v21 = (void *)v10[1];
    if (v21)
    {
      do
      {
        long long v10 = v21;
        uint64_t v21 = (void *)*v21;
      }
      while (v21);
    }
    else
    {
      do
      {
        float v22 = v10;
        long long v10 = (void *)v10[2];
      }
      while ((void *)*v10 != v22);
    }
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_1B1EF0404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B1EF0414(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Component::MarkerToGradientNormType(kaldi::nnet1::Component *a1)
{
  uint64_t GradientNormTypeMap = kaldi::nnet1::Component::GetGradientNormTypeMap(a1);
  uint64_t v3 = (unsigned int *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(GradientNormTypeMap, (const void **)a1);
  if ((unsigned int *)(kaldi::nnet1::Component::GetGradientNormTypeMap((kaldi::nnet1::Component *)v3) + 8) == v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown gradient normalization marker: ", 39);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)a1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return v3[14];
}

uint64_t kaldi::nnet1::Component::MarkerToMatrixInitType(kaldi::nnet1::Component *a1)
{
  uint64_t MatrixInitTypeMap = kaldi::nnet1::Component::GetMatrixInitTypeMap(a1);
  uint64_t v3 = (unsigned int *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(MatrixInitTypeMap, (const void **)a1);
  if ((unsigned int *)(kaldi::nnet1::Component::GetMatrixInitTypeMap((kaldi::nnet1::Component *)v3) + 8) == v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown matrix initialization marker: ", 38);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)a1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return v3[14];
}

void kaldi::nnet1::Component::NewComponentOfType(kaldi::nnet1::Component *a1)
{
  if ((int)a1 <= 512)
  {
    switch((int)a1)
    {
      case 257:
        operator new();
      case 258:
        operator new();
      case 259:
        operator new();
      case 260:
        operator new();
      case 261:
        operator new();
      case 262:
        operator new();
      case 263:
        operator new();
      case 264:
        operator new();
      case 265:
        operator new();
      case 266:
        operator new();
      case 267:
        operator new();
      case 268:
        operator new();
      case 269:
        operator new();
      case 270:
        operator new();
      case 271:
        operator new();
      case 272:
        operator new();
      case 273:
        operator new();
      case 274:
        operator new();
      case 275:
        operator new();
      case 276:
        operator new();
      case 277:
        operator new();
      case 278:
        operator new();
      case 279:
        operator new();
      case 280:
        operator new();
      case 281:
        operator new();
      case 282:
        operator new();
      case 283:
        operator new();
      case 284:
        operator new();
      case 285:
        operator new();
      case 286:
        operator new();
      case 287:
        operator new();
      case 288:
        operator new();
      case 289:
        operator new();
      case 290:
        operator new();
      default:
        break;
    }
  }
  else
  {
    switch((int)a1)
    {
      case 513:
        operator new();
      case 514:
        operator new();
      case 515:
        operator new();
      case 516:
        operator new();
      case 517:
        operator new();
      case 518:
        operator new();
      case 519:
        operator new();
      case 520:
        operator new();
      case 521:
        operator new();
      case 522:
        operator new();
      case 523:
        operator new();
      case 524:
        operator new();
      case 525:
        operator new();
      default:
        switch((int)a1)
        {
          case 2048:
            operator new();
          case 2049:
            operator new();
          case 2050:
            operator new();
          case 2051:
            operator new();
          case 2052:
            operator new();
          case 2053:
            operator new();
          case 2054:
            operator new();
          case 2055:
            operator new();
          case 2056:
            operator new();
          case 2057:
            operator new();
          case 2058:
            operator new();
          default:
            goto LABEL_63;
        }
    }
  }
LABEL_63:
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
  int v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Missing type: ", 14);
  kaldi::nnet1::Component::TypeToMarker(a1, &v3);
  std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, (uint64_t)&v3);
  std::string::~string(&v3);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_1B1EF1744(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1091C4081AB2DD6);
  _Unwind_Resume(a1);
}

void sub_1B1EF1A18()
{
}

void sub_1B1EF1A44()
{
}

void sub_1B1EF1A60()
{
}

void sub_1B1EF1A7C()
{
}

double kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, int a2, int a3)
{
  *((_DWORD *)this + 224) = a2;
  *((_DWORD *)this + 225) = a3;
  *((_WORD *)this + 452) = 0;
  *((void *)this + 114) = 0;
  *((void *)this + 1kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *((void *)this + 115) = 0;
  *((void *)this + 111) = &unk_1F0A4BA20;
  *((void *)this + 117) = &unk_1F0A4A6D0;
  *((_OWORD *)this + 59) = xmmword_1B255E480;
  *((void *)this + 120) = 0x3BF800000;
  *((_DWORD *)this + 242) = 1;
  *((_WORD *)this + 486) = 0;
  *((unsigned char *)this + 974) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (uint64_t *)&off_1F0A323A0);
  *(void *)uint64_t v3 = off_1F0A4AF48;
  *(void *)(v3 + 888) = off_1F0A4B1B0;
  double result = 0.0;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(void *)(v3 + 160) = &unk_1F0A51768;
  *(unsigned char *)(v3 + 200) = 0;
  *(_OWORD *)(v3 + 2kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(void *)(v3 + 208) = &unk_1F0A51768;
  *(unsigned char *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_OWORD *)(v3 + 280) = 0u;
  *(void *)(v3 + 256) = &unk_1F0A51768;
  *(unsigned char *)(v3 + 296) = 0;
  *(void *)(v3 + 320) = 0;
  *(void *)(v3 + 328) = 0;
  *(void *)(v3 + 304) = &unk_1F0A517C0;
  *(void *)(v3 + 312) = 0;
  *(_WORD *)(v3 + 336) = 0;
  *(void *)(v3 + 600) = 0;
  *(_OWORD *)(v3 + 568) = 0u;
  *(_OWORD *)(v3 + 584) = 0u;
  *(_OWORD *)(v3 + 536) = 0u;
  *(_OWORD *)(v3 + 552) = 0u;
  *(_OWORD *)(v3 + 504) = 0u;
  *(_OWORD *)(v3 + 520) = 0u;
  *(_OWORD *)(v3 + 472) = 0u;
  *(_OWORD *)(v3 + 488) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_OWORD *)(v3 + 456) = 0u;
  *(_OWORD *)(v3 + 408) = 0u;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 376) = 0u;
  *(_OWORD *)(v3 + 392) = 0u;
  *(_OWORD *)(v3 + 344) = 0u;
  *(_OWORD *)(v3 + 360) = 0u;
  *(_DWORD *)(v3 + 608) = 1065353216;
  *(void *)(v3 + 620) = 0;
  *(void *)(v3 + 628) = 0;
  *(void *)(v3 + 612) = 0;
  *(void *)(v3 + 633) = 0;
  *(_OWORD *)(v3 + 648) = 0u;
  *(_OWORD *)(v3 + 664) = 0u;
  *(_OWORD *)(v3 + 680) = 0u;
  *(_OWORD *)(v3 + 696) = 0u;
  *(_OWORD *)(v3 + 712) = 0u;
  *(_OWORD *)(v3 + 728) = 0u;
  *(_OWORD *)(v3 + 744) = 0u;
  *(_OWORD *)(v3 + 760) = 0u;
  *(_OWORD *)(v3 + 776) = 0u;
  *(_OWORD *)(v3 + 792) = 0u;
  *(_OWORD *)(v3 + 808) = 0u;
  *(_OWORD *)(v3 + 824) = 0u;
  *(_OWORD *)(v3 + 840) = 0u;
  *(_OWORD *)(v3 + 856) = 0u;
  *(_OWORD *)(v3 + 872) = 0u;
  return result;
}

void sub_1B1EF1DC8(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::SimplerSimpleRecurrentUnit(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 56) = a2;
  *(_DWORD *)(this + 60) = a3;
  *(_WORD *)(this + 64) = 0;
  *(void *)(this + 80) = 0;
  *(void *)(this + 88) = 0;
  *(void *)(this + 72) = 0;
  *(void *)(this + 120) = 0;
  *(void *)(this + 128) = 0;
  *(void *)(this + 136) = &unk_1F0A49B30;
  *(_DWORD *)(this + 144) = 1;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = off_1F0A4DFA0;
  *(void *)this = off_1F0A4DE50;
  *(void *)(this + 8) = 0;
  *(void *)(this + 96) = off_1F0A4E070;
  *(void *)(this + 104) = off_1F0A4E0F0;
  *(void *)(this + 112) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = &unk_1F0A517C0;
  return this;
}

double kaldi::nnet1::Dropout::Dropout(kaldi::nnet1::Dropout *this, int a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1F0A4F450;
  double result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  *((void *)this + 11) = &unk_1F0A51768;
  *((unsigned char *)this + 128) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = &unk_1F0A51768;
  *((unsigned char *)this + 184) = 0;
  *((_DWORD *)this + 48) = 1056964608;
  return result;
}

kaldi::nnet1::Recurrent *kaldi::nnet1::Recurrent::Recurrent(kaldi::nnet1::Recurrent *this, uint64_t a2, uint64_t a3)
{
  *((_DWORD *)this + 134) = a2;
  *((_DWORD *)this + 135) = a3;
  *((_WORD *)this + 272) = 0;
  *((void *)this + 69) = 0;
  *((void *)this + 71) = 0;
  *((void *)this + 70) = 0;
  *((void *)this + 66) = &unk_1F0A4BA20;
  *((void *)this + 72) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 584) = xmmword_1B255E480;
  *((void *)this + 75) = 0x3BF800000;
  *((_DWORD *)this + 152) = 1;
  *((_WORD *)this + 306) = 0;
  *((unsigned char *)this + 614) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (uint64_t *)&off_1F0A325D8);
  *(void *)this = off_1F0A4FC10;
  *((void *)this + 66) = off_1F0A4FE60;
  kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)this + 20, a3, a2, 1, 0, 0);
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 26) = &unk_1F0A517C0;
  *((void *)this + 29) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 208, a3, 1);
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 96) = 516;
  *((_WORD *)this + 194) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((void *)this + 49) = _D1;
  *((_DWORD *)this + 100) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 51) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((void *)this + 54) = &unk_1F0A51768;
  *((unsigned char *)this + 472) = 0;
  *((_OWORD *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"read() method not implemented\n", 30) = 0u;
  *((_OWORD *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  return this;
}

void sub_1B1EF2124(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v1, (uint64_t *)&off_1F0A325D8);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, int a2, int a3)
{
  *((void *)this + 18) = &unk_1F0A4FA88;
  *((_DWORD *)this + 38) = a2;
  *((_DWORD *)this + 39) = a3;
  *((_WORD *)this + 80) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *(void *)this = &unk_1F0A4E160;
  *((void *)this + 24) = &unk_1F0A4E308;
  uint64_t v3 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)&off_1F0A32420);
  v3[18] = (uint64_t)off_1F0A4B800;
  *uint64_t v3 = (uint64_t)off_1F0A4B6D0;
  v3[24] = (uint64_t)off_1F0A4B8D0;
  double result = 0.0;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  v3[1] = (uint64_t)&unk_1F0A51768;
  *((unsigned char *)v3 + 48) = 0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  v3[7] = (uint64_t)&unk_1F0A51768;
  *((unsigned char *)v3 + 96) = 0;
  *((unsigned char *)v3 + 104) = 0;
  *((_DWORD *)v3 + 27) = 1065353216;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

kaldi::nnet1::MultiHeadAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, int a2, int a3)
{
  *((void *)this + 19) = &unk_1F0A4FA88;
  *((_DWORD *)this + 40) = a2;
  *((_DWORD *)this + 41) = a3;
  *((_WORD *)this + 84) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *(void *)this = &unk_1F0A4E160;
  *((void *)this + 25) = &unk_1F0A4E308;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (uint64_t *)&off_1F0A323C0);
  *((void *)this + 19) = off_1F0A4B430;
  *(void *)this = off_1F0A4B300;
  *((void *)this + 25) = off_1F0A4B500;
  *((_DWORD *)this + 36) = -1;
  return this;
}

void sub_1B1EF23DC(_Unwind_Exception *exception_object)
{
  uint64_t v5 = v3;
  *uint64_t v5 = v2;
  std::string::size_type v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 184) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *kaldi::nnet1::SelfAttention::SelfAttention(kaldi::nnet1::SelfAttention *this, int a2, int a3)
{
  *((void *)this + 10) = &unk_1F0A4FA88;
  *((_DWORD *)this + 22) = a2;
  *((_DWORD *)this + 23) = a3;
  *((_WORD *)this + 48) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F0A4E160;
  *((void *)this + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = &unk_1F0A4E308;
  double result = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)&off_1F0A32300);
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = (uint64_t)&unk_1F0A49B30;
  *((_DWORD *)result + 12) = 1;
  result[9] = 0;
  result[10] = (uint64_t)off_1F0A49A38;
  result[16] = (uint64_t)off_1F0A49B08;
  *double result = (uint64_t)off_1F0A49868;
  result[1] = (uint64_t)&unk_1F0A49920;
  result[7] = 0;
  result[8] = 0;
  return result;
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, int a2, int a3)
{
  *((void *)this + 25) = &unk_1F0A4FA88;
  *((_DWORD *)this + 52) = a2;
  *((_DWORD *)this + 53) = a3;
  *((_WORD *)this + 108) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"read() method not implemented\n", 30) = 0;
  *(void *)this = &unk_1F0A4E160;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = &unk_1F0A4E308;
  kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(this, (uint64_t *)&off_1F0A32538);
  *((void *)this + 25) = off_1F0A4E488;
  *(void *)this = off_1F0A4E358;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = off_1F0A4E558;
  *((_DWORD *)this + 37) = -1;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 19) = &unk_1F0A51768;
  *((unsigned char *)this + 192) = 0;
  return this;
}

void sub_1B1EF2690(_Unwind_Exception *exception_object)
{
  uint64_t v5 = v3;
  *uint64_t v5 = v2;
  std::string::size_type v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 232) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *kaldi::nnet1::AverageAttention::AverageAttention(kaldi::nnet1::AverageAttention *this, int a2, int a3)
{
  *((void *)this + 9) = &unk_1F0A4FA88;
  *((_DWORD *)this + 20) = a2;
  *((_DWORD *)this + 21) = a3;
  *((_WORD *)this + 44) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 12) = 0;
  *(void *)this = &unk_1F0A4E160;
  *((void *)this + 15) = &unk_1F0A4E308;
  double result = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)&off_1F0A32340);
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = (uint64_t)&unk_1F0A49B30;
  *((_DWORD *)result + 12) = 1;
  result[8] = 0;
  result[9] = (uint64_t)off_1F0A4A5D8;
  result[15] = (uint64_t)off_1F0A4A6A8;
  *double result = (uint64_t)off_1F0A4A408;
  result[1] = (uint64_t)&unk_1F0A4A4C0;
  result[7] = 0;
  return result;
}

uint64_t kaldi::nnet1::LayerNorm::LayerNorm(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_WORD *)(this + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 24) = 0;
  *(void *)this = &unk_1F0A4FB48;
  *(_DWORD *)(this + 48) = 730643660;
  *(unsigned char *)(this + 52) = 1;
  *(void *)(this + 72) = 0;
  *(void *)(this + 80) = 0;
  *(void *)(this + 56) = &unk_1F0A517C0;
  *(void *)(this + 64) = 0;
  *(void *)(this + 104) = 0;
  *(void *)(this + 112) = 0;
  *(void *)(this + 88) = &unk_1F0A517C0;
  *(void *)(this + 96) = 0;
  return this;
}

void *kaldi::nnet1::Component::Delete(void *this, kaldi::nnet1::Component *a2)
{
  if (this)
  {
    int v2 = (int)a2;
    uint64_t v3 = this;
    uint64_t v4 = (*(uint64_t (**)(void *))(*(void *)this + 24))(this);
    uint64_t v5 = (kaldi::nnet1::Component *)v4;
    if ((int)v4 <= 512)
    {
      switch((int)v4)
      {
        case 257:
          goto LABEL_88;
        case 258:
          goto LABEL_88;
        case 259:
          goto LABEL_88;
        case 260:
          goto LABEL_88;
        case 261:
          goto LABEL_88;
        case 262:
          goto LABEL_88;
        case 263:
          goto LABEL_88;
        case 264:
          goto LABEL_88;
        case 265:
          goto LABEL_88;
        case 266:
          goto LABEL_88;
        case 267:
          goto LABEL_88;
        case 268:
          goto LABEL_88;
        case 269:
          goto LABEL_88;
        case 270:
          goto LABEL_88;
        case 271:
          goto LABEL_88;
        case 272:
          goto LABEL_88;
        case 273:
          goto LABEL_71;
        case 274:
          goto LABEL_71;
        case 275:
          goto LABEL_71;
        case 276:
          goto LABEL_71;
        case 277:
          goto LABEL_71;
        case 278:
          goto LABEL_53;
        case 279:
          goto LABEL_58;
        case 280:
LABEL_71:
          if (!this) {
            return this;
          }
          std::string::size_type v13 = *(uint64_t (**)(void))(*(void *)this + 8);
          return (void *)v13();
        case 281:
          goto LABEL_58;
        case 282:
          goto LABEL_58;
        case 283:
LABEL_58:
          if (!this) {
            return this;
          }
          std::string::size_type v13 = *(uint64_t (**)(void))(*(void *)this + 8);
          return (void *)v13();
        case 284:
          goto LABEL_88;
        case 285:
          goto LABEL_53;
        case 286:
          goto LABEL_53;
        case 287:
          goto LABEL_53;
        case 288:
          goto LABEL_53;
        case 289:
LABEL_53:
          if (!this) {
            return this;
          }
          std::string::size_type v13 = *(uint64_t (**)(void))(*(void *)this + 8);
          break;
        case 290:
          goto LABEL_88;
        default:
LABEL_9:
          if (!v2)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Missing type: ", 14);
            uint64_t v14 = (void *)std::ostream::operator<<();
            uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
            kaldi::nnet1::Component::TypeToMarker(v5, &__p);
            std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v15, (uint64_t)&__p);
            std::string::~string(&__p);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
          }
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
            std::string::size_type v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Missing type: ", 14);
            kaldi::nnet1::Component::TypeToMarker(v5, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
          }
          return (void *)(*(uint64_t (**)(const void *))(*(void *)v3 + 8))(v3);
      }
      return (void *)v13();
    }
    switch((int)v4)
    {
      case 513:
        break;
      case 514:
        break;
      case 515:
        break;
      case 516:
        break;
      case 517:
        break;
      case 518:
        break;
      case 519:
        break;
      case 520:
        break;
      case 521:
        break;
      case 522:
        break;
      case 523:
        break;
      case 524:
        break;
      case 525:
        break;
      default:
        switch((int)v4)
        {
          case 2048:
            goto LABEL_88;
          case 2049:
            goto LABEL_88;
          case 2050:
            goto LABEL_88;
          case 2051:
            goto LABEL_88;
          case 2052:
            goto LABEL_88;
          case 2053:
            goto LABEL_88;
          case 2054:
            goto LABEL_88;
          case 2055:
            goto LABEL_71;
          case 2056:
            goto LABEL_88;
          case 2057:
            goto LABEL_88;
          case 2058:
            goto LABEL_88;
          default:
            goto LABEL_9;
        }
    }
LABEL_88:
    if (this)
    {
      std::string::size_type v13 = *(uint64_t (**)(void))(*(void *)this + 8);
      return (void *)v13();
    }
  }
  return this;
}

uint64_t kaldi::nnet1::Component::Init(const std::string *a1, uint64_t a2)
{
  std::istringstream::basic_istringstream[abi:ne180100](v15, a1, 8);
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  kaldi::ReadToken(v15, 0, (uint64_t)&__p);
  uint64_t v3 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v10, 3);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Initializing component of type ", 31);
    if (v14 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v14 >= 0) {
      uint64_t v6 = HIBYTE(v14);
    }
    else {
      uint64_t v6 = v13;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v10);
  }
  kaldi::ExpectToken(v15, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(v15, 0, (uint64_t)&v11 + 4);
  kaldi::ExpectToken(v15, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(v15, 0, (uint64_t)&v11);
  kaldi::nnet1::Component::NewComponentOfType(v3);
  uint64_t v8 = v7;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v7 + 96))(v7, v15, a2);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  v15[0] = *MEMORY[0x1E4FBA410];
  *(uint64_t *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  void v15[2] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1B3EA8520](&v17);
  return v8;
}

void sub_1B1EF4124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  std::istringstream::~istringstream((uint64_t)&a52);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Component::Read(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  std::string __p = 0;
  uint64_t v20 = 0;
  if (kaldi::Peek(a1, a2) == -1) {
    return 0;
  }
  kaldi::ReadToken(a1, a2, (uint64_t)&__p);
  int v6 = HIBYTE(v21);
  if (SHIBYTE(v21) < 0)
  {
    if (v20 != 6) {
      goto LABEL_16;
    }
    p_p = (unsigned __int16 *)__p;
  }
  else
  {
    if (HIBYTE(v21) != 6) {
      goto LABEL_13;
    }
    p_p = (unsigned __int16 *)&__p;
  }
  int v9 = *(_DWORD *)p_p;
  int v10 = p_p[2];
  if (v9 == 1701727804 && v10 == 15988)
  {
    kaldi::ReadToken(a1, a2, (uint64_t)&__p);
    int v6 = HIBYTE(v21);
    if ((v21 & 0x8000000000000000) == 0)
    {
LABEL_13:
      if (v6 == 7)
      {
        std::string::size_type v12 = (int *)&__p;
        goto LABEL_18;
      }
      goto LABEL_22;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    goto LABEL_13;
  }
LABEL_16:
  if (v20 == 7)
  {
    std::string::size_type v12 = (int *)__p;
LABEL_18:
    int v13 = *v12;
    int v14 = *(int *)((char *)v12 + 3);
    if (v13 == 1850617660 && v14 == 1047815534)
    {
      uint64_t v8 = 0;
      if ((v6 & 0x80) == 0) {
        return v8;
      }
      goto LABEL_23;
    }
  }
LABEL_22:
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v22 + 4);
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v22);
  char v16 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::nnet1::Component::NewComponentOfType(v16);
  uint64_t v8 = v17;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v17 + 160))(v17, a1, a2, a3);
  if (v21 < 0) {
LABEL_23:
  }
    operator delete(__p);
  return v8;
}

void sub_1B1EF42F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Component::Write(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v8, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2, a3, a4);
}

void sub_1B1EF440C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(uint64_t a1, int *a2, float a3)
{
  if (a3 <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"the L2 Norm clipping value must be greater than 0, you set ", 59);
    std::ostream::operator<<();
    goto LABEL_11;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "either the gradient or the gradient norm data is not initialized");
LABEL_11:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, a1, 111);
  kaldi::CuMatrixBase<float>::ApplyPow((uint64_t)a2, 2.0);
  float v6 = sqrtf(kaldi::CuMatrixBase<float>::Sum((uint64_t)a2));
  if (v6 > a3)
  {
    float v7 = a3 / v6;
    kaldi::CuMatrixBase<float>::Scale(a1, v7);
  }
}

void kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(uint64_t a1, void *a2, float a3)
{
  if (a3 <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"the L2 Norm clipping value must be greater than 0, you set ", 59);
    std::ostream::operator<<();
    goto LABEL_11;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "either the gradient or the gradient norm data is not initialized");
LABEL_11:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  kaldi::CuVectorBase<float>::CopyFromVec(a2, a1);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)a2, 2.0);
  float v6 = sqrtf(COERCE_FLOAT(COERCE_UNSIGNED_INT64(kaldi::CuVectorBase<float>::Sum((uint64_t)a2))));
  if (v6 > a3)
  {
    float v7 = a3 / v6;
    kaldi::CuVectorBase<float>::Scale(a1, v7);
  }
}

uint64_t kaldi::nnet1::UpdatableComponent::ClipGradient(uint64_t a1, float a2)
{
  if (a2 <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"the gradient clipping value must be greater than 0, you set ", 60);
    std::ostream::operator<<();
    goto LABEL_8;
  }
  if (!a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "the gradient data is not initialized");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::CuMatrixBase<float>::ApplyCeiling(a1, a2);
  return kaldi::CuMatrixBase<float>::ApplyFloor(a1, -a2);
}

{
  void v5[34];
  uint64_t vars8;

  if (a2 <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"the gradient clipping value must be greater than 0, you set ", 60);
    std::ostream::operator<<();
    goto LABEL_8;
  }
  if (!a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "the gradient data is not initialized");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::CuVectorBase<float>::ApplyCeiling(a1, a2);
  return kaldi::CuVectorBase<float>::ApplyFloor(a1, -a2);
}

void kaldi::nnet1::UpdatableComponent::RmspropGradient(uint64_t a1, uint64_t a2, float a3)
{
  if (a3 < 0.0 || a3 > 1.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"the factor in RMSPROP must be [0, 1], you set ", 46);
    std::ostream::operator<<();
    goto LABEL_12;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "either the gradient or the gradient norm data is not initialized");
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  kaldi::CuMatrixBase<float>::AddMatEwpMat(a2, a1, 111, a1, 111, 1.0 - a3, a3);
  kaldi::CuMatrixBase<float>::ApplyPow(a2, 0.5);
  kaldi::CuMatrixBase<float>::DivElements(a1, a2);
  kaldi::CuMatrixBase<float>::ApplyPow(a2, 2.0);
}

{
  void v6[34];
  uint64_t vars8;

  if (a3 < 0.0 || a3 > 1.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"the factor in RMSPROP must be [0, 1], you set ", 46);
    std::ostream::operator<<();
    goto LABEL_12;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "either the gradient or the gradient norm data is not initialized");
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  kaldi::CuVectorBase<float>::AddVecVec(a2, a1, a1, 1.0 - a3, a3);
  kaldi::CuVectorBase<float>::ApplyPow(a2, 0.5);
  kaldi::CuVectorBase<float>::DivElements(a1, a2);
  kaldi::CuVectorBase<float>::ApplyPow(a2, 2.0);
}

uint64_t kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(kaldi::nnet1::Quantizable8BitComponentItf *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

uint64_t kaldi::nnet1::Quantizable16BitComponentItf::CopyQuantized(kaldi::nnet1::Quantizable16BitComponentItf *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

void kaldi::nnet1::Component::~Component(kaldi::nnet1::Component *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

void kaldi::nnet1::MaxPooling2DComponent::~MaxPooling2DComponent(kaldi::nnet1::MaxPooling2DComponent *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::AddShift::~AddShift(kaldi::nnet1::AddShift *this)
{
  *(void *)this = &unk_1F0A4F8A0;
  int v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 144);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 120);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  kaldi::CuVector<float>::~CuVector((void *)this + 11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::AddShift::~AddShift(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::UpdatableComponent::~UpdatableComponent(kaldi::nnet1::UpdatableComponent *this)
{
  *(void *)this = &unk_1F0A4BA20;
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::UpdatableComponent *)((char *)this + 48));
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

void kaldi::nnet1::AveragePooling2DComponent::~AveragePooling2DComponent(kaldi::nnet1::AveragePooling2DComponent *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::AveragePoolingComponent::~AveragePoolingComponent(kaldi::nnet1::AveragePoolingComponent *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::BlockSoftmax::~BlockSoftmax(kaldi::nnet1::BlockSoftmax *this)
{
  *(void *)this = &unk_1F0A489A0;
  int v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::BlockSoftmax::~BlockSoftmax(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::CompressedWordVecComponent::~CompressedWordVecComponent(kaldi::nnet1::CompressedWordVecComponent *this)
{
  *(void *)this = &unk_1F0A4DB78;
  kaldi::CompressedMatrix::Destroy((kaldi::nnet1::CompressedWordVecComponent *)((char *)this + 48));
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::CompressedWordVecComponent::~CompressedWordVecComponent(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::ConvolutionalComponent::~ConvolutionalComponent(kaldi::nnet1::ConvolutionalComponent *this)
{
  *(void *)this = &unk_1F0A4C328;
  int v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    *((void *)this + 45) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 264);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 240);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 216);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 192);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  kaldi::CuVector<float>::~CuVector((void *)this + 19);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 104);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalComponent::~ConvolutionalComponent(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::CopyComponent::~CopyComponent(kaldi::nnet1::CopyComponent *this)
{
  *(void *)this = &unk_1F0A48B20;
  int v2 = (void *)((char *)this + 48);
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3) {
    free(v3);
  }
  *int v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::CopyComponent::~CopyComponent(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Desplice::~Desplice(kaldi::nnet1::Desplice *this)
{
  *(void *)this = &unk_1F0A4F9C8;
  int v2 = (void *)((char *)this + 136);
  uint64_t v3 = (void *)*((void *)this + 18);
  if (v3) {
    free(v3);
  }
  *int v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  uint64_t v4 = (void *)*((void *)this + 15);
  if (v4) {
    free(v4);
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  uint64_t v5 = (void *)*((void *)this + 12);
  if (v5) {
    free(v5);
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  float v6 = (void *)*((void *)this + 9);
  if (v6) {
    free(v6);
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *(void *)this = &unk_1F0A4FA88;
  float v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::Desplice::~Desplice(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Dropout::~Dropout(kaldi::nnet1::Dropout *this)
{
  *(void *)this = &unk_1F0A4F450;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 144);
  kaldi::CuRand<float>::~CuRand((uint64_t)this + 48);
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::Dropout::~Dropout(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::DuplicateComponent::~DuplicateComponent(kaldi::nnet1::DuplicateComponent *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent(kaldi::nnet1::FofeWordVecComponent *this)
{
  *(void *)this = &unk_1F0A4BC78;
  *((void *)this + 11) = &unk_1F0A4BDA8;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 440);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 392);
  kaldi::nnet1::WordVecComponent::~WordVecComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::WordVecComponent::~WordVecComponent(kaldi::nnet1::WordVecComponent *this)
{
  *(void *)this = &unk_1F0A4A7B0;
  *((void *)this + 11) = &unk_1F0A4A8E0;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)this + 39);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 192);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 144);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 96);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::WordVecComponent::~WordVecComponent(this);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent(kaldi::nnet1::FofeWordVecComponent *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent((kaldi::nnet1::FofeWordVecComponent *)((char *)this - 88));
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::FramePoolingComponent::~FramePoolingComponent(kaldi::nnet1::FramePoolingComponent *this)
{
  *(void *)this = &unk_1F0A4BE90;
  uint64_t v3 = (void **)((char *)this + 144);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 120);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::FramePoolingComponent::~FramePoolingComponent(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::HistoricalComponent::~HistoricalComponent(kaldi::nnet1::HistoricalComponent *this)
{
  *(void *)this = &unk_1F0A4BB48;
  uint64_t v1 = (void **)((char *)this + 8);
  kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoricalComponent *)((char *)this + 32));
  int v2 = v1;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void kaldi::nnet1::IdentityComponent::~IdentityComponent(kaldi::nnet1::IdentityComponent *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::InterpolationComponent::~InterpolationComponent(kaldi::nnet1::InterpolationComponent *this)
{
  *(void *)this = &unk_1F0A4C450;
  int v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::InterpolationComponent::~InterpolationComponent(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::KlHmm::~KlHmm(kaldi::nnet1::KlHmm *this)
{
  *(void *)this = &unk_1F0A4F2D0;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 88);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 48);
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::KlHmm::~KlHmm(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::LogSoftmax::~LogSoftmax(kaldi::nnet1::LogSoftmax *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::MaxoutComponent::~MaxoutComponent(kaldi::nnet1::MaxoutComponent *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::MaxPoolingComponent::~MaxPoolingComponent(kaldi::nnet1::MaxPoolingComponent *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::MultiSoftmax::~MultiSoftmax(kaldi::nnet1::MultiSoftmax *this)
{
  kaldi::nnet1::BlockSoftmax::~BlockSoftmax(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Nnet1InferenceNet::~Nnet1InferenceNet(kaldi::nnet1::Nnet1InferenceNet *this)
{
  *(void *)this = &unk_1F0A4A9C8;
  int v2 = (void *)*((void *)this + 49);
  if (v2)
  {
    *((void *)this + 50) = v2;
    operator delete(v2);
  }
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet1InferenceNet *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::Nnet1InferenceNet::~Nnet1InferenceNet(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  *((void *)this + 20) = &unk_1F0A4ABF8;
  *((void *)this + 21) = &unk_1F0A4AC20;
  uint64_t v5 = (void **)((char *)this + 184);
  std::vector<kaldi::nnet1::Nnet>::__destroy_vector::operator()[abi:ne180100](&v5);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

void kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(kaldi::nnet1::RecurrentBaseComponent *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[1];
  uint64_t v4 = (void **)((char *)this + 128);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 104);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions((kaldi::nnet1::RecurrentBaseComponent *)((char *)this + 48));
  *(void *)this = &unk_1F0A4BB48;
  kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::RecurrentBaseComponent *)((char *)this + 32));
  uint64_t v4 = (void **)((char *)this + 8);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 208));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 208));
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::ParallelComponent *)((char *)this + 48));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::ParallelComponent *)((char *)this + 40));
}

{
  kaldi::nnet1::ParallelComponent::~ParallelComponent((kaldi::nnet1::ParallelComponent *)((char *)this - 160));
}

{
  kaldi::nnet1::ParallelComponent::~ParallelComponent((kaldi::nnet1::ParallelComponent *)((char *)this - 168));
}

void virtual thunk to'kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this)
{
  int v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 208);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::ParallelComponent::~ParallelComponent((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                        + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::PNormComponent::~PNormComponent(kaldi::nnet1::PNormComponent *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Rbm::~Rbm(kaldi::nnet1::Rbm *this)
{
  *(void *)this = &unk_1F0A4F0B8;
  kaldi::CuVector<float>::~CuVector((void *)this + 33);
  kaldi::CuVector<float>::~CuVector((void *)this + 29);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 184);
  kaldi::CuVector<float>::~CuVector((void *)this + 19);
  kaldi::CuVector<float>::~CuVector((void *)this + 15);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::Rbm::~Rbm(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::RectifiedLinearComponent::~RectifiedLinearComponent(kaldi::nnet1::RectifiedLinearComponent *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::ExponentialLinearComponent::~ExponentialLinearComponent(kaldi::nnet1::ExponentialLinearComponent *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::ScaledExponentialLinearComponent::~ScaledExponentialLinearComponent(kaldi::nnet1::ScaledExponentialLinearComponent *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Recurrent::~Recurrent(kaldi::nnet1::Recurrent *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  float v6 = (void **)((char *)this + 504);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  float v6 = (void **)((char *)this + 480);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 432);
  uint64_t v5 = (void *)*((void *)this + 51);
  if (v5)
  {
    *((void *)this + 52) = v5;
    operator delete(v5);
  }
  float v6 = (void **)((char *)this + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  float v6 = (void **)((char *)this + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  float v6 = (void **)((char *)this + 312);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  float v6 = (void **)((char *)this + 288);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  float v6 = (void **)((char *)this + 264);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  float v6 = (void **)((char *)this + 240);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  kaldi::CuVector<float>::~CuVector((void *)this + 26);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

void kaldi::nnet1::Recurrent::~Recurrent(kaldi::nnet1::Recurrent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 528));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 528));
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'kaldi::nnet1::Recurrent::~Recurrent(kaldi::nnet1::Recurrent *this)
{
  int v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 528);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::Recurrent::~Recurrent((kaldi::nnet1::Recurrent *)((char *)this + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(kaldi::nnet1::RecurrentAttentionBaseComponent *this, uint64_t a2)
{
}

void kaldi::nnet1::RelaxedSoftmax::~RelaxedSoftmax(kaldi::nnet1::RelaxedSoftmax *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Rescale::~Rescale(kaldi::nnet1::Rescale *this)
{
  *(void *)this = &unk_1F0A4F5F8;
  int v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"read() method not implemented\n", 30) = v2;
    operator delete(v2);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  uint64_t v3 = (void **)((char *)this + 144);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 120);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  kaldi::CuVector<float>::~CuVector((void *)this + 11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::Rescale::~Rescale(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::SentenceAveragingComponent::~SentenceAveragingComponent(kaldi::nnet1::SentenceAveragingComponent *this)
{
  *(void *)this = &unk_1F0A4DCF8;
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A4DCF8;
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::SharedNceComponent::~SharedNceComponent(kaldi::nnet1::SharedNceComponent *this)
{
  *(void *)this = &unk_1F0A4B8F8;
  int v2 = (char *)this + 88;
  kaldi::CuVector<float>::~CuVector((void *)this + 47);
  kaldi::CuVector<float>::~CuVector((void *)this + 43);
  kaldi::CuVector<float>::~CuVector((void *)this + 39);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  kaldi::CuVector<float>::~CuVector((void *)this + 17);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::SharedNceComponent::~SharedNceComponent(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Sigmoid::~Sigmoid(kaldi::nnet1::Sigmoid *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Softmax::~Softmax(kaldi::nnet1::Softmax *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Splice::~Splice(kaldi::nnet1::Splice *this)
{
  *(void *)this = &unk_1F0A4F390;
  int v2 = (void *)((char *)this + 48);
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3) {
    free(v3);
  }
  *int v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::Splice::~Splice(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Tanh::~Tanh(kaldi::nnet1::Tanh *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::TemporalMaxPoolingComponent::~TemporalMaxPoolingComponent(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::WordVecComponent::~WordVecComponent(kaldi::nnet1::WordVecComponent *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::WordVecComponent::~WordVecComponent((kaldi::nnet1::WordVecComponent *)((char *)this - 88));
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::CompressedWordTransComponent::~CompressedWordTransComponent(kaldi::nnet1::CompressedWordTransComponent *this)
{
  *(void *)this = &unk_1F0A4E248;
  kaldi::CompressedMatrix::Destroy((kaldi::nnet1::CompressedWordTransComponent *)((char *)this + 80));
  kaldi::CuVector<float>::~CuVector((void *)this + 6);
  *(void *)this = &unk_1F0A4FA88;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::CompressedWordTransComponent::~CompressedWordTransComponent(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::nnet1::HistoricalComponent::GetHistoryOptions(kaldi::nnet1::HistoricalComponent *this)
{
  return (uint64_t)this + 32;
}

uint64_t kaldi::nnet1::HistoricalComponent::SetHistoryOptions(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 8);
  return result;
}

void kaldi::nnet1::RelaxedSoftmax::Copy(kaldi::nnet1::RelaxedSoftmax *this)
{
}

void sub_1B1EF6E6C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C405D9F5A38);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RelaxedSoftmax::GetType(kaldi::nnet1::RelaxedSoftmax *this)
{
  return 523;
}

float kaldi::nnet1::RelaxedSoftmax::InitData(uint64_t a1, uint64_t *a2)
{
  kaldi::ExpectToken(a2, 0, "<RelaxFactor>");
  kaldi::ReadBasicType<float>(a2, 0, (float *)(a1 + 48));
  float result = *(float *)(a1 + 48);
  if (result <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Relaxation factor must be positive; found: ",
      43);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  return result;
}

void *kaldi::nnet1::RelaxedSoftmax::WriteData(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<RelaxFactor>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

uint64_t kaldi::nnet1::RelaxedSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::AddMat(a3, a2, 111, *(float *)(a1 + 48), 0.0);
  return kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, a3);
}

float kaldi::nnet1::RelaxedSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuVectorBase<float>::AddVec(a3, a2, *(float *)(a1 + 48), 0.0);
  return kaldi::CuVectorBase<float>::ApplySoftMax(a3);
}

void kaldi::nnet1::RelaxedSoftmax::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

float kaldi::nnet1::RelaxedSoftmax::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, "<RelaxFactor>");
  kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48));
  float result = *(float *)(a1 + 48);
  if (result <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Relaxation factor must be positive; found: ",
      43);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return result;
}

void kaldi::nnet1::LogSoftmax::Copy(kaldi::nnet1::LogSoftmax *this)
{
}

void sub_1B1EF7190(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LogSoftmax::GetType(kaldi::nnet1::LogSoftmax *this)
{
  return 514;
}

void kaldi::nnet1::LogSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, a2);
  kaldi::CuMatrixBase<float>::ApplyFloor(a3, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog(a3);
}

void kaldi::nnet1::LogSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, void *a3)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2);
  kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)a3);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)a3, 1.0e-20);
  kaldi::CuVectorBase<float>::ApplyLog((uint64_t)a3);
}

int *kaldi::nnet1::LogSoftmax::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
}

void kaldi::nnet1::Softmax::Copy(kaldi::nnet1::Softmax *this)
{
}

void sub_1B1EF7308(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Softmax::GetType(kaldi::nnet1::Softmax *this)
{
  return 513;
}

uint64_t kaldi::nnet1::Softmax::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, a2);
}

float kaldi::nnet1::Softmax::PropagateFnc(uint64_t a1, uint64_t a2, void *a3)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2);
  return kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)a3);
}

int *kaldi::nnet1::Softmax::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
}

void kaldi::nnet1::BlockSoftmax::Copy(kaldi::nnet1::BlockSoftmax *this)
{
}

void sub_1B1EF73D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1091C4033AB46EFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BlockSoftmax::GetType(kaldi::nnet1::BlockSoftmax *this)
{
  return 515;
}

void kaldi::nnet1::BlockSoftmax::InitData(std::vector<int> *this, uint64_t *a2)
{
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  uint64_t v4 = a2 + 4;
  uint64_t v5 = this + 2;
  while (1)
  {
    if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_26;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v18);
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      break;
    }
    if (*((void *)&v18 + 1) != 11
      || (*(void *)v18 == 0x69446B636F6C423CLL ? (BOOL v7 = *(void *)(v18 + 3) == 0x3E736D69446B636FLL) : (BOOL v7 = 0), !v7))
    {
      if (*((void *)&v18 + 1) == 12)
      {
        uint64_t v8 = (long long *)v18;
        goto LABEL_21;
      }
LABEL_29:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::string::size_type v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown token ", 14);
      if (v19 >= 0) {
        int v13 = &v18;
      }
      else {
        int v13 = (long long *)v18;
      }
      if (v19 >= 0) {
        uint64_t v14 = HIBYTE(v19);
      }
      else {
        uint64_t v14 = *((void *)&v18 + 1);
      }
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" (BlockDims)", 12);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
LABEL_16:
    kaldi::ReadIntegerVector<int>(a2, 0, v5, 0, 0, 0, 0);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (HIBYTE(v19) == 11)
  {
    if ((void)v18 != 0x69446B636F6C423CLL || *(void *)((char *)&v18 + 3) != 0x3E736D69446B636FLL) {
      goto LABEL_29;
    }
    goto LABEL_16;
  }
  if (HIBYTE(v19) != 12) {
    goto LABEL_29;
  }
  uint64_t v8 = &v18;
LABEL_21:
  uint64_t v9 = *(void *)v8;
  int v10 = *((_DWORD *)v8 + 2);
  if (v9 != 0x6E6F706D6F432F3CLL || v10 != 1047817829) {
    goto LABEL_29;
  }
LABEL_26:
  kaldi::nnet1::BlockSoftmax::InitOffset(this);
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
}

void sub_1B1EF75F4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BlockSoftmax::WriteData(uint64_t a1, void *a2, int a3)
{
  return kaldi::WriteIntegerByteArray<int>(a2, a3, 0, (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2, *(void *)(a1 + 48));
}

void kaldi::nnet1::BlockSoftmax::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[6];
  if (a1[7] != v3)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = a1[9];
      uint64_t v9 = *(unsigned int *)(v8 + 4 * v7);
      uint64_t v10 = *(void *)(a2 + 8) + 4 * v9;
      LODWORD(v9) = *(_DWORD *)(a2 + 28) - v9;
      uint64_t v11 = *(void *)(a2 + 32);
      LODWORD(v16[2]) = *(_DWORD *)(v3 + 4 * v7);
      *(void *)((char *)&v16[2] + 4) = *(void *)(a2 + 20);
      HIDWORD(v16[3]) = v9;
      v16[4] = v11;
      v16[0] = &unk_1F0A472A0;
      v16[1] = v10;
      uint64_t v12 = *(unsigned int *)(v8 + 4 * v7);
      uint64_t v13 = *(void *)(a3 + 8) + 4 * v12;
      LODWORD(v12) = *(_DWORD *)(a3 + 28) - v12;
      uint64_t v14 = *(void *)(a3 + 32);
      LODWORD(v15[2]) = *(_DWORD *)(v3 + 4 * v7);
      *(void *)((char *)&v15[2] + 4) = *(void *)(a3 + 20);
      HIDWORD(v15[3]) = v12;
      v15[4] = v14;
      v15[0] = &unk_1F0A472A0;
      v15[1] = v13;
      kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow((uint64_t)v15, (uint64_t)v16);
      v15[0] = &unk_1F0A472A0;
      memset(&v15[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v15);
      v16[0] = &unk_1F0A472A0;
      memset(&v16[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
      ++v7;
      uint64_t v3 = a1[6];
    }
    while (v7 < (a1[7] - v3) >> 2);
  }
}

void sub_1B1EF7784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *uint64_t v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::BlockSoftmax::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a5, a4, 111);
  uint64_t v7 = a1[6];
  if (a1[7] != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(unsigned int *)(a1[9] + 4 * v8);
      uint64_t v10 = *(void *)(a5 + 8) + 4 * v9;
      LODWORD(v9) = *(_DWORD *)(a5 + 28) - v9;
      uint64_t v11 = *(void *)(a5 + 32);
      LODWORD(v14[2]) = *(_DWORD *)(v7 + 4 * v8);
      *(void *)((char *)&v14[2] + 4) = *(void *)(a5 + 20);
      HIDWORD(v14[3]) = v9;
      _DWORD v14[4] = v11;
      v14[0] = &unk_1F0A472A0;
      v14[1] = v10;
      memset(&v13[1], 0, 24);
      v13[0] = &unk_1F0A517C0;
      kaldi::CuVector<float>::Resize((uint64_t)v13, HIDWORD(v14[2]), 0);
      kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v13, (uint64_t)v14, 1.0, 0.0);
      kaldi::CuVector<float>::CuVector(v12, (uint64_t)v13);
      kaldi::CuVectorBase<float>::Scale((uint64_t)v12, -1.0);
      kaldi::CuVectorBase<float>::Add((uint64_t)v12, 1.0);
      kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)v14, (uint64_t)v12);
      kaldi::CuVector<float>::~CuVector(v12);
      kaldi::CuVector<float>::~CuVector(v13);
      v14[0] = &unk_1F0A472A0;
      memset(&v14[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v14);
      ++v8;
      uint64_t v7 = a1[6];
    }
    while (v8 < (a1[7] - v7) >> 2);
  }
}

void sub_1B1EF7934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  *float v6 = 0u;
  v6[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::BlockSoftmax::ReadData(std::vector<int> *a1, void *a2, int a3)
{
  kaldi::ReadIntegerVector<int>(a2, a3, a1 + 2, 0, 0, 0, 0);
  kaldi::nnet1::BlockSoftmax::InitOffset(a1);
}

void kaldi::nnet1::Sigmoid::Copy(kaldi::nnet1::Sigmoid *this)
{
}

void sub_1B1EF7A6C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Sigmoid::GetType(kaldi::nnet1::Sigmoid *this)
{
  return 516;
}

void kaldi::nnet1::Sigmoid::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  kaldi::CuVectorBase<float>::Sigmoid(a3, a2);
}

uint64_t *kaldi::nnet1::Sigmoid::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::CuMatrixBase<float>::DiffSigmoid(a5, a3, a4);
}

void kaldi::nnet1::Tanh::Copy(kaldi::nnet1::Tanh *this)
{
}

void sub_1B1EF7B54(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Tanh::GetType(kaldi::nnet1::Tanh *this)
{
  return 517;
}

void kaldi::nnet1::Tanh::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  kaldi::CuVectorBase<float>::Tanh(a3, a2);
}

uint64_t *kaldi::nnet1::Tanh::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::CuMatrixBase<float>::DiffTanh(a5, a3, a4);
}

void kaldi::nnet1::Dropout::Copy(kaldi::nnet1::Dropout *this)
{
}

void sub_1B1EF7C8C(_Unwind_Exception *a1)
{
  kaldi::CuRand<float>::~CuRand(v3);
  void *v1 = v2;
  uint64_t v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  MEMORY[0x1B3EA8670](v1, 0x1091C4081AB2DD6);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Dropout::GetType(kaldi::nnet1::Dropout *this)
{
  return 518;
}

void kaldi::nnet1::Dropout::InitData(uint64_t a1, void *a2)
{
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v4 = (float *)(a1 + 192);
  uint64_t v22 = 0;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0)
    {
      char v5 = HIBYTE(v22);
      goto LABEL_33;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v20);
    char v5 = HIBYTE(v22);
    if ((SHIBYTE(v22) & 0x80000000) == 0) {
      break;
    }
    if (v21 != 18
      || (*v20 == 0x74756F706F72443CLL ? (BOOL v8 = v20[1] == 0x6F69746E65746552) : (BOOL v8 = 0),
          v8 ? (BOOL v9 = *((unsigned __int16 *)v20 + 8) == 15982) : (BOOL v9 = 0),
          !v9))
    {
      if (v21 == 12)
      {
        uint64_t v10 = (void **)v20;
        goto LABEL_28;
      }
LABEL_36:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Unknown token ", 14);
      if (v22 >= 0) {
        uint64_t v15 = &v20;
      }
      else {
        uint64_t v15 = (void **)v20;
      }
      if (v22 >= 0) {
        uint64_t v16 = HIBYTE(v22);
      }
      else {
        uint64_t v16 = v21;
      }
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
      long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" (DropoutRetention)", 19);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
    }
LABEL_22:
    kaldi::ReadBasicType<float>(a2, 0, v4);
  }
  if (HIBYTE(v22) == 18)
  {
    if (v20 != (void *)0x74756F706F72443CLL || v21 != 0x6F69746E65746552 || (unsigned __int16)v22 != 15982) {
      goto LABEL_36;
    }
    goto LABEL_22;
  }
  if (HIBYTE(v22) != 12) {
    goto LABEL_36;
  }
  uint64_t v10 = &v20;
LABEL_28:
  uint64_t v11 = (uint64_t)*v10;
  int v12 = *((_DWORD *)v10 + 2);
  if (v11 != 0x6E6F706D6F432F3CLL || v12 != 1047817829) {
    goto LABEL_36;
  }
LABEL_33:
  if (v5 < 0) {
    operator delete(v20);
  }
}

void sub_1B1EF7ED0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::Dropout::WriteData(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<DropoutRetention>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void kaldi::nnet1::Dropout::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, a2, 111);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 144), *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0);
  kaldi::CuMatrixBase<float>::Set(a1 + 144, *(float *)(a1 + 192));
  kaldi::CuRand<float>::BinarizeProbs(a1 + 48, a1 + 144, a1 + 144);
  kaldi::CuMatrixBase<float>::MulElements(a3, a1 + 144);
  float v5 = 1.0 / *(float *)(a1 + 192);
  kaldi::CuMatrixBase<float>::Scale(a3, v5);
}

void kaldi::nnet1::Dropout::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)a5, a1 + 144);
  float v7 = 1.0 / *(float *)(a1 + 192);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)a5, v7);
}

float kaldi::nnet1::Dropout::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ExpectToken(a2, a3, "<DropoutRetention>");
    return kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 192));
  }
  return result;
}

void kaldi::nnet1::MaxoutComponent::Copy(kaldi::nnet1::MaxoutComponent *this)
{
}

uint64_t kaldi::nnet1::MaxoutComponent::GetType(kaldi::nnet1::MaxoutComponent *this)
{
  return 519;
}

uint64_t *kaldi::nnet1::MaxoutComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::CuMatrixBase<float>::MaxoutForward(a3, a2);
}

void kaldi::nnet1::MaxoutComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::CuMatrixBase<float>::MaxoutDerivative(a5, a2, a3);
  kaldi::CuMatrixBase<float>::MulRowsGroupMat(a5, a4);
}

void kaldi::nnet1::PNormComponent::Copy(kaldi::nnet1::PNormComponent *this)
{
}

uint64_t kaldi::nnet1::PNormComponent::GetType(kaldi::nnet1::PNormComponent *this)
{
  return 521;
}

float kaldi::nnet1::PNormComponent::InitData(uint64_t a1, uint64_t *a2)
{
  kaldi::ExpectToken(a2, 0, "<P>");
  return kaldi::ReadBasicType<float>(a2, 0, (float *)(a1 + 48));
}

void *kaldi::nnet1::PNormComponent::WriteData(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<P>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void kaldi::nnet1::PNormComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::PNormComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::CuMatrixBase<float>::GroupPnormDeriv(a5, a2, a3, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::MulRowsGroupMat(a5, a4);
}

float kaldi::nnet1::PNormComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, "<P>");
  return kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48));
}

void kaldi::nnet1::RectifiedLinearComponent::Copy(kaldi::nnet1::RectifiedLinearComponent *this)
{
}

void sub_1B1EF8404(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::GetType(kaldi::nnet1::RectifiedLinearComponent *this)
{
  return 520;
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, int *a3)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111);
  return kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)a3, 0.0);
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, void *a3)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2);
  return kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)a3, 0.0);
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::CuMatrixBase<float>::DiffRelu(a5, a3, a4);
}

void kaldi::nnet1::ExponentialLinearComponent::Copy(kaldi::nnet1::ExponentialLinearComponent *this)
{
}

void sub_1B1EF8568(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C405D9F5A38);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::GetType(kaldi::nnet1::ExponentialLinearComponent *this)
{
  return 524;
}

float kaldi::nnet1::ExponentialLinearComponent::InitData(uint64_t a1, uint64_t *a2)
{
  kaldi::ExpectToken(a2, 0, "<Alpha>");
  return kaldi::ReadBasicType<float>(a2, 0, (float *)(a1 + 48));
}

void *kaldi::nnet1::ExponentialLinearComponent::WriteData(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<Alpha>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrix<float>::CuMatrix(v7, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v7, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v7, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v7);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v7, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v7, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyFloor(a3, 0.0);
  kaldi::CuMatrixBase<float>::AddMat(a3, (uint64_t)v7, 111, 1.0, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1B1EF8710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::nnet1::ExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a3 + 16);
  v8[0] = &unk_1F0A517C0;
  memset(&v8[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v8, v6, 0);
  kaldi::CuVectorBase<float>::CopyFromVec(v8, a2);
  kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v8, 0.0);
  kaldi::CuVectorBase<float>::ApplyExp((uint64_t)v8);
  kaldi::CuVectorBase<float>::Add((uint64_t)v8, -1.0);
  kaldi::CuVectorBase<float>::Scale((uint64_t)v8, *(float *)(a1 + 48));
  kaldi::CuVectorBase<float>::CopyFromVec((void *)a3, a2);
  kaldi::CuVectorBase<float>::ApplyFloor(a3, 0.0);
  kaldi::CuVectorBase<float>::AddVec(a3, (uint64_t)v8, 1.0, 1.0);
  return kaldi::CuVector<float>::~CuVector(v8);
}

void sub_1B1EF87FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::CuMatrix<float>::CuMatrix(v11, *(unsigned int *)(a5 + 20), *(unsigned int *)(a5 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v10, *(unsigned int *)(a5 + 20), *(unsigned int *)(a5 + 16), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v11, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v11, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v11);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v11, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v11, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v10, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)v10);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v10, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v10, -*(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a5, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyHeaviside(a5);
  kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)v11, 111, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)v10, 111, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::MulElements(a5, a4);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v10);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v11);
}

void sub_1B1EF8950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::ExponentialLinearComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, "<Alpha>");
  return kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48));
}

void kaldi::nnet1::ScaledExponentialLinearComponent::Copy(kaldi::nnet1::ScaledExponentialLinearComponent *this)
{
}

void sub_1B1EF8A78(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4071A33DADLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::GetType(kaldi::nnet1::ScaledExponentialLinearComponent *this)
{
  return 525;
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrix<float>::CuMatrix(v7, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v7, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v7, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v7);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v7, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v7, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyFloor(a3, 0.0);
  kaldi::CuMatrixBase<float>::AddMat(a3, (uint64_t)v7, 111, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::Scale(a3, *(float *)(a1 + 52));
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1B1EF8B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::nnet1::ScaledExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a3 + 16);
  v8[0] = &unk_1F0A517C0;
  memset(&v8[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v8, v6, 0);
  kaldi::CuVectorBase<float>::CopyFromVec(v8, a2);
  kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v8, 0.0);
  kaldi::CuVectorBase<float>::ApplyExp((uint64_t)v8);
  kaldi::CuVectorBase<float>::Add((uint64_t)v8, -1.0);
  kaldi::CuVectorBase<float>::Scale((uint64_t)v8, *(float *)(a1 + 48));
  kaldi::CuVectorBase<float>::CopyFromVec((void *)a3, a2);
  kaldi::CuVectorBase<float>::ApplyFloor(a3, 0.0);
  kaldi::CuVectorBase<float>::AddVec(a3, (uint64_t)v8, 1.0, 1.0);
  kaldi::CuVectorBase<float>::Scale(a3, *(float *)(a1 + 52));
  return kaldi::CuVector<float>::~CuVector(v8);
}

void sub_1B1EF8C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::CuMatrix<float>::CuMatrix(v11, *(unsigned int *)(a5 + 20), *(unsigned int *)(a5 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v10, *(unsigned int *)(a5 + 20), *(unsigned int *)(a5 + 16), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v11, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v11, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v11);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v11, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v11, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v10, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)v10);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v10, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v10, -*(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a5, a2, 111);
  kaldi::CuMatrixBase<float>::ApplyHeaviside(a5);
  kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)v11, 111, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)v10, 111, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::Scale(a5, *(float *)(a1 + 52));
  kaldi::CuMatrixBase<float>::MulElements(a5, a4);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v10);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v11);
}

void sub_1B1EF8DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::InputDim(kaldi::nnet1::Nnet1InferenceNet *this)
{
  return *(unsigned int *)(kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet1InferenceNet *)((char *)this + 8), 0) + 8);
}

void kaldi::nnet1::Nnet1InferenceNet::Feedforward(uint64_t a1, uint64_t a2, int32x2_t *a3, int a4)
{
  if (a4) {
    int v4 = *(_DWORD *)(a1 + 384);
  }
  else {
    int v4 = -1;
  }
  kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), a2, a3, v4, 0);
}

void *kaldi::nnet1::Nnet1InferenceNet::Feedforward(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  if (a4) {
    int v4 = *(_DWORD *)(a1 + 384);
  }
  else {
    int v4 = -1;
  }
  return kaldi::nnet1::Nnet::Feedforward((void *)(a1 + 8), a2, a3, v4);
}

void kaldi::nnet1::Nnet1InferenceNet::MultiIOFeedforward()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implmented! Should not be called!!!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implmented! Should not be called!!!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::GetUnitOutput(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return kaldi::nnet1::Component::GetUnitOutput(*(_DWORD **)(a1 + 416), a2, a3, a4);
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::GetUnitOutput(uint64_t a1, uint64_t a2, int a3)
{
  return kaldi::nnet1::Component::GetUnitOutput(*(_DWORD **)(a1 + 416), a2, a3);
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::GetOutput(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  return kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 416), a2, a3, 0);
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::ResetHistoryState(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 392);
  uint64_t v2 = *(uint64_t **)(this + 400);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
  }
  return this;
}

BOOL kaldi::nnet1::Nnet1InferenceNet::IsRnn(kaldi::nnet1::Nnet1InferenceNet *this)
{
  return *((void *)this + 49) != *((void *)this + 50);
}

BOOL kaldi::nnet1::Nnet1InferenceNet::IsFofeNet(kaldi::nnet1::Nnet1InferenceNet *this)
{
  if ((*(uint64_t (**)(kaldi::nnet1::Nnet1InferenceNet *))(*(void *)this + 160))(this)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  int v4 = (kaldi::nnet1::Nnet1InferenceNet *)((char *)this + 8);
  if ((int)((unint64_t)(v3 - v2) >> 3) < 1) {
    return 0;
  }
  uint64_t Component = kaldi::nnet1::Nnet::GetComponent(v4, 0);
  return (*(unsigned int (**)(uint64_t))(*(void *)Component + 24))(Component) == 269;
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::OutputDim(kaldi::nnet1::Nnet1InferenceNet *this, int a2)
{
  uint64_t v2 = 12;
  if (a2) {
    uint64_t v2 = 8;
  }
  return *(unsigned int *)(*((void *)this + 52) + v2);
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::HasMultiOutputs(kaldi::nnet1::Nnet1InferenceNet *this)
{
  return 0;
}

void kaldi::nnet1::Splice::Copy(kaldi::nnet1::Splice *this)
{
}

void sub_1B1EF90C8(_Unwind_Exception *a1)
{
  void *v1 = v2;
  int v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  MEMORY[0x1B3EA8670](v1, 0x1091C407E7523C3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Splice::GetType(kaldi::nnet1::Splice *this)
{
  return 1026;
}

uint64_t kaldi::nnet1::Splice::Info@<X0>(kaldi::nnet1::Splice *this@<X0>, std::string *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n  frame_offsets ", 17);
  kaldi::operator<<<int>(v4, (int *)this + 12);
  std::stringbuf::str();
  uint64_t v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v6 = (char)v5;
  std::string::size_type v7 = (std::string::size_type)a2 + v5;
  if (v6 >= 0)
  {
    std::string::size_type v8 = (std::string::size_type)a2;
  }
  else
  {
    std::string::size_type v7 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    std::string::size_type v8 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, ~v8 + v7, 1uLL);
  v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v12);
}

void sub_1B1EF9288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Splice::InitData(uint64_t a1, uint64_t *a2)
{
  memset(&v75, 0, sizeof(v75));
  unint64_t v72 = 0;
  float v73 = 0;
  unint64_t v74 = 0;
  uint64_t v3 = a2 + 4;
  long long v70 = 0uLL;
  uint64_t v71 = 0;
  while (1)
  {
    if ((*((unsigned char *)v3 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_57;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v70);
    if (SHIBYTE(v71) < 0) {
      break;
    }
    if (HIBYTE(v71) != 12)
    {
      if (HIBYTE(v71) == 13)
      {
        BOOL v4 = (void)v70 == 0x6556646C6975423CLL && *(void *)((char *)&v70 + 5) == 0x3E726F7463655664;
        if (v4) {
          goto LABEL_22;
        }
      }
      goto LABEL_128;
    }
    if ((void)v70 != 0x636556646165523CLL || DWORD2(v70) != 1047687028)
    {
      uint64_t v16 = &v70;
      goto LABEL_52;
    }
LABEL_48:
    kaldi::ReadIntegerVector<int>(a2, 0, &v75, 0, 0, 0, 0);
LABEL_49:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v5 = *((void *)&v70 + 1);
  if (*((void *)&v70 + 1) == 12 && *(void *)v70 == 0x636556646165523CLL && *(_DWORD *)(v70 + 8) == 1047687028) {
    goto LABEL_48;
  }
  if (*((void *)&v70 + 1) != 13) {
    goto LABEL_50;
  }
  if (*(void *)v70 == 0x6556646C6975423CLL && *(void *)(v70 + 5) == 0x3E726F7463655664)
  {
    while (1)
    {
LABEL_22:
      if ((*((unsigned char *)v3 + *(void *)(*a2 - 24)) & 2) != 0) {
        goto LABEL_49;
      }
      std::string __p = 0;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      kaldi::ReadToken(a2, 0, (uint64_t)&__p);
      if (SHIBYTE(v68) < 0)
      {
        if (v67 != 14) {
          goto LABEL_32;
        }
        p_p = (uint64_t *)__p;
      }
      else
      {
        if (SHIBYTE(v68) != 14) {
          goto LABEL_32;
        }
        p_p = (uint64_t *)&__p;
      }
      uint64_t v9 = *p_p;
      uint64_t v10 = *(uint64_t *)((char *)p_p + 6);
      if (v9 == 0x56646C6975422F3CLL && v10 == 0x3E726F7463655664)
      {
        char v14 = 0;
        if (v68 < 0) {
          goto LABEL_41;
        }
LABEL_38:
        if ((v14 & 1) == 0) {
          goto LABEL_49;
        }
      }
      else
      {
LABEL_32:
        memset(&v69, 0, sizeof(v69));
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ":", 0, &v69);
        uint64_t v12 = v73;
        if ((unint64_t)v73 >= v74)
        {
          uint64_t v13 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v72, (uint64_t)&v69);
        }
        else
        {
          void *v73 = 0;
          v12[1] = 0;
          v12[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v12, v69.__begin_, (uint64_t)v69.__end_, v69.__end_ - v69.__begin_);
          uint64_t v13 = (uint64_t)(v12 + 3);
        }
        float v73 = (void *)v13;
        if (v69.__begin_)
        {
          v69.__end_ = v69.__begin_;
          operator delete(v69.__begin_);
        }
        char v14 = 1;
        if ((v68 & 0x8000000000000000) == 0) {
          goto LABEL_38;
        }
LABEL_41:
        operator delete(__p);
        if ((v14 & 1) == 0) {
          goto LABEL_49;
        }
      }
    }
  }
  uint64_t v5 = *((void *)&v70 + 1);
LABEL_50:
  if (v5 != 12) {
    goto LABEL_128;
  }
  uint64_t v16 = (long long *)v70;
LABEL_52:
  uint64_t v17 = *(void *)v16;
  int v18 = *((_DWORD *)v16 + 2);
  if (v17 != 0x6E6F706D6F432F3CLL || v18 != 1047817829)
  {
LABEL_128:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
    if (v71 >= 0) {
      int v61 = &v70;
    }
    else {
      int v61 = (long long *)v70;
    }
    if (v71 >= 0) {
      uint64_t v62 = HIBYTE(v71);
    }
    else {
      uint64_t v62 = *((void *)&v70 + 1);
    }
    uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
    unint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" (ReadVector|BuildVector)", 25);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
LABEL_57:
  uint64_t v20 = (uint64_t)v72;
  if (v73 != v72)
  {
    unint64_t v21 = 0;
    do
    {
      unint64_t v22 = v20 + 24 * v21;
      float v23 = *(int **)v22;
      uint64_t v24 = (uint64_t)(*(void *)(v22 + 8) - *(void *)v22) >> 2;
      switch(v24)
      {
        case 3:
          int v39 = *v23;
          int v40 = v23[2];
          if (*v23 <= v40)
          {
            int v41 = v23[1];
            std::vector<int>::pointer end = v75.__end_;
            do
            {
              if (end >= v75.__end_cap_.__value_)
              {
                std::vector<int>::pointer begin = v75.__begin_;
                uint64_t v45 = end - v75.__begin_;
                unint64_t v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                int64_t v47 = (char *)v75.__end_cap_.__value_ - (char *)v75.__begin_;
                if (((char *)v75.__end_cap_.__value_ - (char *)v75.__begin_) >> 1 > v46) {
                  unint64_t v46 = v47 >> 1;
                }
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v48 = v46;
                }
                if (v48)
                {
                  int v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75.__end_cap_, v48);
                  std::vector<int>::pointer begin = v75.__begin_;
                  std::vector<int>::pointer end = v75.__end_;
                }
                else
                {
                  int v49 = 0;
                }
                long long v50 = (int *)&v49[4 * v45];
                int *v50 = v39;
                uint64_t v43 = v50 + 1;
                while (end != begin)
                {
                  int v51 = *--end;
                  *--long long v50 = v51;
                }
                v75.__begin_ = v50;
                v75.__end_ = v43;
                v75.__end_cap_.__value_ = (int *)&v49[4 * v48];
                if (begin) {
                  operator delete(begin);
                }
              }
              else
              {
                *std::vector<int>::pointer end = v39;
                uint64_t v43 = end + 1;
              }
              v75.__end_ = v43;
              v39 += v41;
              std::vector<int>::pointer end = v43;
            }
            while (v39 <= v40);
          }
          break;
        case 2:
          int v27 = *v23;
          int v28 = v23[1];
          std::vector<int>::pointer v29 = v75.__end_;
          do
          {
            if (v29 >= v75.__end_cap_.__value_)
            {
              std::vector<int>::pointer v31 = v75.__begin_;
              uint64_t v32 = v29 - v75.__begin_;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              int64_t v34 = (char *)v75.__end_cap_.__value_ - (char *)v75.__begin_;
              if (((char *)v75.__end_cap_.__value_ - (char *)v75.__begin_) >> 1 > v33) {
                unint64_t v33 = v34 >> 1;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75.__end_cap_, v35);
                std::vector<int>::pointer v31 = v75.__begin_;
                std::vector<int>::pointer v29 = v75.__end_;
              }
              else
              {
                uint64_t v36 = 0;
              }
              long long v37 = (int *)&v36[4 * v32];
              *long long v37 = v27;
              uint64_t v30 = v37 + 1;
              while (v29 != v31)
              {
                int v38 = *--v29;
                *--long long v37 = v38;
              }
              v75.__begin_ = v37;
              v75.__end_ = v30;
              v75.__end_cap_.__value_ = (int *)&v36[4 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *std::vector<int>::pointer v29 = v27;
              uint64_t v30 = v29 + 1;
            }
            v75.__end_ = v30;
            std::vector<int>::pointer v29 = v30;
            BOOL v4 = v27++ == v28;
          }
          while (!v4);
          break;
        case 1:
          std::vector<int>::pointer v25 = v75.__end_;
          if (v75.__end_ >= v75.__end_cap_.__value_)
          {
            std::vector<int>::pointer v52 = v75.__begin_;
            int64_t v53 = v75.__end_ - v75.__begin_;
            unint64_t v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            int64_t v55 = (char *)v75.__end_cap_.__value_ - (char *)v75.__begin_;
            if (((char *)v75.__end_cap_.__value_ - (char *)v75.__begin_) >> 1 > v54) {
              unint64_t v54 = v55 >> 1;
            }
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v54;
            }
            if (v56)
            {
              int v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75.__end_cap_, v56);
              std::vector<int>::pointer v52 = v75.__begin_;
              std::vector<int>::pointer v25 = v75.__end_;
            }
            else
            {
              int v57 = 0;
            }
            unint64_t v58 = (int *)&v57[4 * v53];
            int *v58 = *v23;
            uint64_t v26 = v58 + 1;
            while (v25 != v52)
            {
              int v59 = *--v25;
              *--unint64_t v58 = v59;
            }
            v75.__begin_ = v58;
            v75.__end_ = v26;
            v75.__end_cap_.__value_ = (int *)&v57[4 * v56];
            if (v52) {
              operator delete(v52);
            }
          }
          else
          {
            *v75.__end_ = *v23;
            uint64_t v26 = v25 + 1;
          }
          v75.__end_ = v26;
          break;
        default:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error parsing <BuildVector>", 27);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      ++v21;
      uint64_t v20 = (uint64_t)v72;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v73 - v72) > v21);
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)v75.__end_ - (char *)v75.__begin_) >> 2, 1);
  memcpy(*(void **)(a1 + 56), v75.__begin_, (char *)v75.__end_ - (char *)v75.__begin_);
  if (SHIBYTE(v71) < 0) {
    operator delete((void *)v70);
  }
  std::string __p = &v72;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v75.__begin_)
  {
    v75.__end_ = v75.__begin_;
    operator delete(v75.__begin_);
  }
}

void sub_1B1EF9980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v16 - 128) = v15;
  int v18 = *(void **)(v16 - 184);
  if (v18)
  {
    *(void *)(v16 - 176) = v18;
    operator delete(v18);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 137) < 0) {
    operator delete(*(void **)(v16 - 160));
  }
  std::string __p = (void *)(v16 - 136);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v19 = *(void **)(v16 - 112);
  if (v19)
  {
    *(void *)(v16 - 104) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void sub_1B1EF9990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 - 137) < 0) {
    operator delete(*(void **)(v10 - 160));
  }
  a10 = (void **)(v10 - 136);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(void *)(v10 - 104) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_1B1EF9998()
{
}

void kaldi::nnet1::Splice::WriteData(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = (int *)(a1 + 48);
  std::vector<int>::vector(&v6, *(int *)(a1 + 48));
  kaldi::CuArray<int>::CopyToVec(v5, (std::vector<unsigned int> *)&v6);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, v6.__end_ - v6.__begin_, (uint64_t)v6.__begin_);
  if (v6.__begin_)
  {
    v6.__end_ = v6.__begin_;
    operator delete(v6.__begin_);
  }
}

void sub_1B1EF9A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Splice::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::cu::Splice<float>(a2, (unsigned int *)(a1 + 48), a3);
}

void kaldi::nnet1::Splice::BackpropagateFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::Splice::ReadData(uint64_t a1, void *a2, int a3)
{
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2, 1);
  memcpy(*(void **)(a1 + 56), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1B1EF9B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::CopyComponent::Copy(kaldi::nnet1::CopyComponent *this)
{
}

void sub_1B1EF9C54(_Unwind_Exception *a1)
{
  void *v1 = v2;
  BOOL v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  MEMORY[0x1B3EA8670](v1, 0x1091C407E7523C3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CopyComponent::GetType(kaldi::nnet1::CopyComponent *this)
{
  return 1028;
}

void *kaldi::nnet1::CopyComponent::Info@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void kaldi::nnet1::CopyComponent::InitData(uint64_t a1, uint64_t *a2)
{
  memset(&v78, 0, sizeof(v78));
  std::vector<int> v75 = 0;
  uint64_t v76 = 0;
  unint64_t v77 = 0;
  uint64_t v3 = a2 + 4;
  long long v73 = 0uLL;
  uint64_t v74 = 0;
  while (1)
  {
    if ((*((unsigned char *)v3 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_56;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v73);
    if (SHIBYTE(v74) < 0)
    {
      if (*((void *)&v73 + 1) == 12)
      {
        uint64_t v15 = (long long *)v73;
        if (*(void *)v73 != 0x636556646165523CLL || *(_DWORD *)(v73 + 8) != 1047687028) {
          goto LABEL_51;
        }
        goto LABEL_49;
      }
      if (*((void *)&v73 + 1) != 13) {
        goto LABEL_131;
      }
      if (*(void *)v73 != 0x6556646C6975423CLL || *(void *)(v73 + 5) != 0x3E726F7463655664) {
        goto LABEL_131;
      }
      while (1)
      {
LABEL_18:
        if ((*((unsigned char *)v3 + *(void *)(*a2 - 24)) & 2) != 0) {
          goto LABEL_50;
        }
        std::vector<int> __p = 0;
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p);
        if (SHIBYTE(v71) < 0)
        {
          if (v70 != 14) {
            goto LABEL_28;
          }
          p_p = (uint64_t *)__p;
        }
        else
        {
          if (SHIBYTE(v71) != 14) {
            goto LABEL_28;
          }
          p_p = (uint64_t *)&__p;
        }
        uint64_t v7 = *p_p;
        uint64_t v8 = *(uint64_t *)((char *)p_p + 6);
        if (v7 == 0x56646C6975422F3CLL && v8 == 0x3E726F7463655664)
        {
          char v12 = 0;
          if (v71 < 0) {
            goto LABEL_37;
          }
LABEL_34:
          if ((v12 & 1) == 0) {
            goto LABEL_50;
          }
        }
        else
        {
LABEL_28:
          memset(&v72, 0, sizeof(v72));
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ":", 0, &v72);
          uint64_t v10 = v76;
          if ((unint64_t)v76 >= v77)
          {
            uint64_t v11 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v75, (uint64_t)&v72);
          }
          else
          {
            *uint64_t v76 = 0;
            v10[1] = 0;
            v10[2] = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v10, v72.__begin_, (uint64_t)v72.__end_, v72.__end_ - v72.__begin_);
            uint64_t v11 = (uint64_t)(v10 + 3);
          }
          uint64_t v76 = (void *)v11;
          if (v72.__begin_)
          {
            v72.__end_ = v72.__begin_;
            operator delete(v72.__begin_);
          }
          char v12 = 1;
          if ((v71 & 0x8000000000000000) == 0) {
            goto LABEL_34;
          }
LABEL_37:
          operator delete(__p);
          if ((v12 & 1) == 0) {
            goto LABEL_50;
          }
        }
      }
    }
    if (HIBYTE(v74) != 12)
    {
      if (HIBYTE(v74) == 13)
      {
        BOOL v4 = (void)v73 == 0x6556646C6975423CLL && *(void *)((char *)&v73 + 5) == 0x3E726F7463655664;
        if (v4) {
          goto LABEL_18;
        }
      }
      goto LABEL_131;
    }
    if ((void)v73 != 0x636556646165523CLL || DWORD2(v73) != 1047687028) {
      break;
    }
LABEL_49:
    kaldi::ReadIntegerVector<int>(a2, 0, &v78, 0, 0, 0, 0);
LABEL_50:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v15 = &v73;
LABEL_51:
  uint64_t v16 = *(void *)v15;
  int v17 = *((_DWORD *)v15 + 2);
  if (v16 != 0x6E6F706D6F432F3CLL || v17 != 1047817829)
  {
LABEL_131:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
    if (v74 >= 0) {
      unint64_t v64 = &v73;
    }
    else {
      unint64_t v64 = (long long *)v73;
    }
    if (v74 >= 0) {
      uint64_t v65 = HIBYTE(v74);
    }
    else {
      uint64_t v65 = *((void *)&v73 + 1);
    }
    int v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
    uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" (ReadVector|BuildVector)", 25);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
LABEL_56:
  uint64_t v19 = (uint64_t)v75;
  if (v76 != v75)
  {
    unint64_t v20 = 0;
    do
    {
      unint64_t v21 = v19 + 24 * v20;
      unint64_t v22 = *(int **)v21;
      uint64_t v23 = (uint64_t)(*(void *)(v21 + 8) - *(void *)v21) >> 2;
      switch(v23)
      {
        case 3:
          int v38 = *v22;
          int v39 = v22[2];
          if (*v22 <= v39)
          {
            int v40 = v22[1];
            std::vector<int>::pointer end = v78.__end_;
            do
            {
              if (end >= v78.__end_cap_.__value_)
              {
                std::vector<int>::pointer begin = v78.__begin_;
                uint64_t v44 = end - v78.__begin_;
                unint64_t v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                int64_t v46 = (char *)v78.__end_cap_.__value_ - (char *)v78.__begin_;
                if (((char *)v78.__end_cap_.__value_ - (char *)v78.__begin_) >> 1 > v45) {
                  unint64_t v45 = v46 >> 1;
                }
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v47 = v45;
                }
                if (v47)
                {
                  unint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v78.__end_cap_, v47);
                  std::vector<int>::pointer begin = v78.__begin_;
                  std::vector<int>::pointer end = v78.__end_;
                }
                else
                {
                  unint64_t v48 = 0;
                }
                int v49 = (int *)&v48[4 * v44];
                *int v49 = v38;
                unint64_t v42 = v49 + 1;
                while (end != begin)
                {
                  int v50 = *--end;
                  *--int v49 = v50;
                }
                v78.__begin_ = v49;
                v78.__end_ = v42;
                v78.__end_cap_.__value_ = (int *)&v48[4 * v47];
                if (begin) {
                  operator delete(begin);
                }
              }
              else
              {
                *std::vector<int>::pointer end = v38;
                unint64_t v42 = end + 1;
              }
              v78.__end_ = v42;
              v38 += v40;
              std::vector<int>::pointer end = v42;
            }
            while (v38 <= v39);
          }
          break;
        case 2:
          int v26 = *v22;
          int v27 = v22[1];
          std::vector<int>::pointer v28 = v78.__end_;
          do
          {
            if (v28 >= v78.__end_cap_.__value_)
            {
              std::vector<int>::pointer v30 = v78.__begin_;
              uint64_t v31 = v28 - v78.__begin_;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              int64_t v33 = (char *)v78.__end_cap_.__value_ - (char *)v78.__begin_;
              if (((char *)v78.__end_cap_.__value_ - (char *)v78.__begin_) >> 1 > v32) {
                unint64_t v32 = v33 >> 1;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34)
              {
                unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v78.__end_cap_, v34);
                std::vector<int>::pointer v30 = v78.__begin_;
                std::vector<int>::pointer v28 = v78.__end_;
              }
              else
              {
                unint64_t v35 = 0;
              }
              uint64_t v36 = (int *)&v35[4 * v31];
              *uint64_t v36 = v26;
              std::vector<int>::pointer v29 = v36 + 1;
              while (v28 != v30)
              {
                int v37 = *--v28;
                *--uint64_t v36 = v37;
              }
              v78.__begin_ = v36;
              v78.__end_ = v29;
              v78.__end_cap_.__value_ = (int *)&v35[4 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *std::vector<int>::pointer v28 = v26;
              std::vector<int>::pointer v29 = v28 + 1;
            }
            v78.__end_ = v29;
            std::vector<int>::pointer v28 = v29;
            BOOL v4 = v26++ == v27;
          }
          while (!v4);
          break;
        case 1:
          std::vector<int>::pointer v24 = v78.__end_;
          if (v78.__end_ >= v78.__end_cap_.__value_)
          {
            std::vector<int>::pointer v51 = v78.__begin_;
            int64_t v52 = v78.__end_ - v78.__begin_;
            unint64_t v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            int64_t v54 = (char *)v78.__end_cap_.__value_ - (char *)v78.__begin_;
            if (((char *)v78.__end_cap_.__value_ - (char *)v78.__begin_) >> 1 > v53) {
              unint64_t v53 = v54 >> 1;
            }
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v53;
            }
            if (v55)
            {
              unint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v78.__end_cap_, v55);
              std::vector<int>::pointer v51 = v78.__begin_;
              std::vector<int>::pointer v24 = v78.__end_;
            }
            else
            {
              unint64_t v56 = 0;
            }
            int v57 = (int *)&v56[4 * v52];
            int *v57 = *v22;
            std::vector<int>::pointer v25 = v57 + 1;
            while (v24 != v51)
            {
              int v58 = *--v24;
              *--int v57 = v58;
            }
            v78.__begin_ = v57;
            v78.__end_ = v25;
            v78.__end_cap_.__value_ = (int *)&v56[4 * v55];
            if (v51) {
              operator delete(v51);
            }
          }
          else
          {
            *v78.__end_ = *v22;
            std::vector<int>::pointer v25 = v24 + 1;
          }
          v78.__end_ = v25;
          break;
        default:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error parsing <BuildVector>", 27);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      ++v20;
      uint64_t v19 = (uint64_t)v75;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v76 - v75) > v20);
  }
  std::vector<int>::pointer v59 = v78.__begin_;
  std::vector<int>::pointer v60 = v78.__end_;
  if (v78.__begin_ == v78.__end_)
  {
    std::vector<int>::pointer v60 = v78.__begin_;
    uint64_t v62 = a1;
  }
  else
  {
    std::vector<int>::pointer v61 = v78.__begin_;
    uint64_t v62 = a1;
    do
      --*v61++;
    while (v61 != v60);
  }
  kaldi::CuArray<int>::Resize(v62 + 48, (unint64_t)((char *)v60 - (char *)v59) >> 2, 1);
  memcpy(*(void **)(v62 + 56), v78.__begin_, (char *)v78.__end_ - (char *)v78.__begin_);
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)v73);
  }
  std::vector<int> __p = &v75;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v78.__begin_)
  {
    v78.__end_ = v78.__begin_;
    operator delete(v78.__begin_);
  }
}

void sub_1B1EFA390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v16 - 128) = v15;
  int v18 = *(void **)(v16 - 184);
  if (v18)
  {
    *(void *)(v16 - 176) = v18;
    operator delete(v18);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 137) < 0) {
    operator delete(*(void **)(v16 - 160));
  }
  std::vector<int> __p = (void *)(v16 - 136);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v19 = *(void **)(v16 - 112);
  if (v19)
  {
    *(void *)(v16 - 104) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void sub_1B1EFA39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 - 137) < 0) {
    operator delete(*(void **)(v10 - 160));
  }
  a10 = (void **)(v10 - 136);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  char v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(void *)(v10 - 104) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_1B1EFA3A4()
{
}

void kaldi::nnet1::CopyComponent::WriteData(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = (int *)(a1 + 48);
  std::vector<int>::vector(&v10, *(int *)(a1 + 48));
  kaldi::CuArray<int>::CopyToVec(v5, (std::vector<unsigned int> *)&v10);
  std::vector<int>::pointer begin = v10.__begin_;
  std::vector<int>::pointer end = v10.__end_;
  std::vector<int>::pointer v8 = v10.__begin_;
  if (v10.__begin_ != v10.__end_)
  {
    std::vector<int>::pointer v9 = v10.__begin_;
    do
      ++*v9++;
    while (v9 != end);
    std::vector<int>::pointer v8 = end;
  }
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, v8 - begin, (uint64_t)begin);
  if (v10.__begin_)
  {
    v10.__end_ = v10.__begin_;
    operator delete(v10.__begin_);
  }
}

void sub_1B1EFA4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::CopyComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::cu::Copy<float>(a2, (unsigned int *)(a1 + 48), a3);
}

void kaldi::nnet1::CopyComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!kaldi::nnet1::CopyComponent::BackpropagateFnc(kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float>*,int)::warning_displayed)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::vector<int> v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"BackpropagateFnc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not implemented!", 16);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    }
    kaldi::nnet1::CopyComponent::BackpropagateFnc(kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float>*,int)::warning_displayed = 1;
  }
  kaldi::CuMatrixBase<float>::SetZero(a5);
}

void sub_1B1EFA570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::CopyComponent::ReadData(uint64_t a1, void *a2, int a3)
{
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  std::vector<int>::pointer begin = __p.__begin_;
  std::vector<int>::pointer end = __p.__end_;
  if (__p.__begin_ == __p.__end_)
  {
    std::vector<int>::pointer end = __p.__begin_;
  }
  else
  {
    std::vector<int>::pointer v6 = __p.__begin_;
    do
      --*v6++;
    while (v6 != end);
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)end - (char *)begin) >> 2, 1);
  memcpy(*(void **)(a1 + 56), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1B1EFA63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::IdentityComponent::Copy(kaldi::nnet1::IdentityComponent *this)
{
}

void sub_1B1EFA6F8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::IdentityComponent::GetType(kaldi::nnet1::IdentityComponent *this)
{
  return 2057;
}

void *kaldi::nnet1::IdentityComponent::Info@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void *kaldi::nnet1::IdentityComponent::InitData(uint64_t a1, void *a2)
{
  float result = std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Unity component doesn't expect any tokens");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

int *kaldi::nnet1::IdentityComponent::PropagateFnc(uint64_t a1, uint64_t a2, int *a3)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111);
}

int *kaldi::nnet1::IdentityComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
}

float kaldi::nnet1::IdentityComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return kaldi::CuVectorBase<float>::CopyColFromMat(a4, a2, a3);
}

void kaldi::nnet1::DuplicateComponent::Copy(kaldi::nnet1::DuplicateComponent *this)
{
}

void sub_1B1EFA88C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C401AC3E4D5);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::GetType(kaldi::nnet1::DuplicateComponent *this)
{
  return 2056;
}

void *kaldi::nnet1::DuplicateComponent::Info@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void kaldi::nnet1::DuplicateComponent::InitData(_DWORD *a1, uint64_t *a2)
{
  BOOL v4 = &v26;
  a1[14] = 1;
  uint64_t v5 = a1 + 14;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  std::vector<int>::pointer v6 = a2 + 4;
  uint64_t v7 = a1 + 13;
  while (1)
  {
    if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_57;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v26);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
      if (HIBYTE(v27) != 15)
      {
        if (HIBYTE(v27) != 16)
        {
          if (HIBYTE(v27) == 12) {
            goto LABEL_52;
          }
          goto LABEL_40;
        }
        if ((void)v26 != 0x6163696C7075443CLL || *((void *)&v26 + 1) != 0x3E74726174536574) {
          goto LABEL_40;
        }
        goto LABEL_11;
      }
      BOOL v14 = (void)v26 == 0x6163696C7075443CLL && *(void *)((char *)&v26 + 7) == 0x3E657A6953657461;
      uint64_t v12 = (uint64_t)v7;
      if (!v14)
      {
        BOOL v15 = (void)v26 == 0x6C7075446D754E3CLL && *(void *)((char *)&v26 + 7) == 0x3E7365746163696CLL;
        uint64_t v12 = (uint64_t)v5;
        if (!v15) {
          goto LABEL_40;
        }
      }
      goto LABEL_37;
    }
    uint64_t v9 = *((void *)&v26 + 1);
    if (*((void *)&v26 + 1) != 15)
    {
      if (*((void *)&v26 + 1) != 16) {
        goto LABEL_50;
      }
      if (*(void *)v26 != 0x6163696C7075443CLL || *(void *)(v26 + 8) != 0x3E74726174536574) {
        goto LABEL_50;
      }
LABEL_11:
      LODWORD(v25[0]) = 0;
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v25);
      a1[12] = v25[0];
      goto LABEL_38;
    }
    BOOL v11 = *(void *)v26 == 0x6163696C7075443CLL && *(void *)(v26 + 7) == 0x3E657A6953657461;
    uint64_t v12 = (uint64_t)v7;
    if (!v11)
    {
      uint64_t v9 = *((void *)&v26 + 1);
      BOOL v13 = *(void *)v26 == 0x6C7075446D754E3CLL && *(void *)(v26 + 7) == 0x3E7365746163696CLL;
      uint64_t v12 = (uint64_t)v5;
      if (!v13) {
        break;
      }
    }
LABEL_37:
    kaldi::ReadBasicType<int>(a2, 0, v12);
LABEL_38:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if ((v27 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v27) == 12)
    {
      BOOL v4 = &v26;
      goto LABEL_52;
    }
    goto LABEL_40;
  }
LABEL_50:
  if (v9 != 12) {
    goto LABEL_40;
  }
  BOOL v4 = (long long *)v26;
LABEL_52:
  if (*(void *)v4 != 0x6E6F706D6F432F3CLL || *((_DWORD *)v4 + 2) != 1047817829)
  {
LABEL_40:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unknown token ", 14);
    if (v27 >= 0) {
      int v17 = &v26;
    }
    else {
      int v17 = (long long *)v26;
    }
    if (v27 >= 0) {
      uint64_t v18 = HIBYTE(v27);
    }
    else {
      uint64_t v18 = *((void *)&v26 + 1);
    }
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" (DuplicateStart|DuplicateSize|NumDuplicates)", 45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
LABEL_57:
  int v22 = a1[13];
  int v23 = a1[2];
  if (v23 + a1[14] * v22 != a1[3])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Requested duplication doesn't match the output and input sizes", 62);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  if (v22 < 0 || (int v24 = a1[12], v24 < 0) || v24 + v22 > v23)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Duplication parameters out of range", 35);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
}

void sub_1B1EFAC40(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::WriteData(uint64_t a1, void *a2, int a3)
{
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteBasicType<int>(a2, a3);
}

void kaldi::nnet1::DuplicateComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 28);
  uint64_t v8 = *(void *)(a3 + 32);
  LODWORD(v19[2]) = a1[2];
  *(void *)((char *)&v19[2] + 4) = *(void *)(a3 + 20);
  HIDWORD(v19[3]) = v7;
  v19[4] = v8;
  v19[0] = &unk_1F0A472A0;
  v19[1] = v6;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v19, a2, 111);
  if ((int)a1[13] >= 1)
  {
    uint64_t v9 = (int)a1[12];
    uint64_t v10 = *(void *)(a2 + 8) + 4 * v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 28) - v9;
    uint64_t v11 = *(void *)(a2 + 32);
    LODWORD(v18[2]) = a1[13];
    *(void *)((char *)&v18[2] + 4) = *(void *)(a2 + 20);
    HIDWORD(v18[3]) = v9;
    v18[4] = v11;
    v18[0] = &unk_1F0A472A0;
    v18[1] = v10;
    if ((int)a1[14] >= 1)
    {
      int v12 = 0;
      unsigned int v13 = a1[2];
      do
      {
        uint64_t v14 = *(void *)(a3 + 8) + 4 * v13;
        unsigned int v15 = *(_DWORD *)(a3 + 28) - v13;
        uint64_t v16 = *(void *)(a3 + 32);
        LODWORD(v17[2]) = a1[13];
        *(void *)((char *)&v17[2] + 4) = *(void *)(a3 + 20);
        HIDWORD(v17[3]) = v15;
        v17[4] = v16;
        v17[0] = &unk_1F0A472A0;
        v17[1] = v14;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v17, (uint64_t)v18, 111);
        v13 += a1[13];
        v17[0] = &unk_1F0A472A0;
        memset(&v17[1], 0, 32);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
        ++v12;
      }
      while (v12 < a1[14]);
    }
    v18[0] = &unk_1F0A472A0;
    memset(&v18[1], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v18);
  }
  v19[0] = &unk_1F0A472A0;
  memset(&v19[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v19);
}

void sub_1B1EFAEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  *int v12 = 0u;
  v12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::DuplicateComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a4 + 8);
  int v9 = *(_DWORD *)(a4 + 28);
  uint64_t v10 = *(void *)(a4 + 32);
  LODWORD(v21[1]) = a1[2];
  *(void *)((char *)&v21[1] + 4) = *(void *)(a4 + 20);
  HIDWORD(v21[2]) = v9;
  v21[3] = v10;
  unint64_t v20 = &unk_1F0A472A0;
  v21[0] = v8;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a5, (uint64_t)&v20, 111);
  unint64_t v20 = &unk_1F0A472A0;
  memset(v21, 0, sizeof(v21));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v20);
  if ((int)a1[13] >= 1)
  {
    uint64_t v11 = (int)a1[12];
    uint64_t v12 = *(void *)(a5 + 8) + 4 * v11;
    LODWORD(v11) = *(_DWORD *)(a5 + 28) - v11;
    uint64_t v13 = *(void *)(a5 + 32);
    LODWORD(v21[1]) = a1[13];
    *(void *)((char *)&v21[1] + 4) = *(void *)(a5 + 20);
    HIDWORD(v21[2]) = v11;
    v21[3] = v13;
    unint64_t v20 = &unk_1F0A472A0;
    v21[0] = v12;
    if ((int)a1[14] >= 1)
    {
      int v14 = 0;
      unsigned int v15 = a1[2];
      do
      {
        uint64_t v16 = *(void *)(a4 + 8) + 4 * v15;
        unsigned int v17 = *(_DWORD *)(a4 + 28) - v15;
        uint64_t v18 = *(void *)(a4 + 32);
        LODWORD(v19[2]) = a1[13];
        *(void *)((char *)&v19[2] + 4) = *(void *)(a4 + 20);
        HIDWORD(v19[3]) = v17;
        v19[4] = v18;
        v19[0] = &unk_1F0A472A0;
        v19[1] = v16;
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v20, (uint64_t)v19, 111, 1.0, 1.0);
        v15 += a1[13];
        v19[0] = &unk_1F0A472A0;
        memset(&v19[1], 0, 32);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v19);
        ++v14;
      }
      while (v14 < a1[14]);
    }
    unint64_t v20 = &unk_1F0A472A0;
    memset(v21, 0, sizeof(v21));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v20);
  }
}

void sub_1B1EFB0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *uint64_t v6 = 0u;
  v6[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::ReadData(_DWORD *a1, void *a2, int a3)
{
  int v7 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v7);
  a1[12] = v7;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v7);
  a1[13] = v7;
  uint64_t result = kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v7);
  a1[14] = v7;
  return result;
}

void kaldi::nnet1::AddShift::Copy(kaldi::nnet1::AddShift *this)
{
}

void sub_1B1EFB1D4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40582A63A6);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AddShift::GetType(kaldi::nnet1::AddShift *this)
{
  return 1031;
}

uint64_t kaldi::nnet1::AddShift::Info(kaldi::nnet1::AddShift *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(kaldi::nnet1::AddShift *, void *, void))(*(void *)this + 168))(this, v8, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n shift_data", 12);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 88);
  if ((v7 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v10);
}

void sub_1B1EFB3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AddShift::InfoGradient(kaldi::nnet1::AddShift *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, "\n  shift_data_grad");
  kaldi::nnet1::MomentStatistics<float>((void *)this + 15);
  if ((v16 & 0x80u) == 0) {
    uint64_t v4 = v15;
  }
  else {
    uint64_t v4 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v5 = v16;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v15[1];
  }
  uint64_t v6 = std::string::append(&v17, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v18, ", lr-coef ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v14 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v11 = v14;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1B1EFB52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::AddShift::InitData(uint64_t a1, uint64_t *a2)
{
  float v29 = 0.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 168), &v28);
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_67;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v26);
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      break;
    }
    uint64_t v6 = *((void *)&v26 + 1);
    if (*((void *)&v26 + 1) == 11
      && (*(void *)v26 == 0x72615074696E493CLL ? (BOOL v7 = *(void *)(v26 + 3) == 0x3E6D617261507469) : (BOOL v7 = 0), v7))
    {
LABEL_36:
      long long v9 = &v29;
    }
    else
    {
      if (*((void *)&v26 + 1) == 15)
      {
        BOOL v8 = *(void *)v26 == 0x61526E7261654C3CLL && *(void *)(v26 + 7) == 0x3E66656F43657461;
        long long v9 = (float *)(a1 + 176);
        if (v8) {
          goto LABEL_56;
        }
        uint64_t v6 = *((void *)&v26 + 1);
      }
      if (v6 == 18)
      {
        if (*(void *)v26 == 0x6E6569646172473CLL
          && *(void *)(v26 + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v26 + 16) == 15973)
        {
LABEL_45:
          kaldi::ReadToken(a2, 0, (uint64_t)&v28);
          goto LABEL_57;
        }
        uint64_t v6 = *((void *)&v26 + 1);
      }
      if (v6 != 9) {
        goto LABEL_58;
      }
      BOOL v12 = *(void *)v26 == 0x6461724778614D3CLL && *(unsigned char *)(v26 + 8) == 62;
      long long v9 = (float *)(a1 + 172);
      if (!v12)
      {
        uint64_t v6 = *((void *)&v26 + 1);
LABEL_58:
        if (v6 == 12)
        {
          uint64_t v4 = (long long *)v26;
          goto LABEL_62;
        }
LABEL_72:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
        unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unknown token ", 14);
        if (v27 >= 0) {
          unint64_t v21 = &v26;
        }
        else {
          unint64_t v21 = (long long *)v26;
        }
        if (v27 >= 0) {
          uint64_t v22 = HIBYTE(v27);
        }
        else {
          uint64_t v22 = *((void *)&v26 + 1);
        }
        int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
        int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" (InitParam|LearnRateCoef|GradientNormType|MaxGrad)", 51);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
      }
    }
LABEL_56:
    kaldi::ReadBasicType<float>(a2, 0, v9);
LABEL_57:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v4 = &v26;
  switch(HIBYTE(v27))
  {
    case 9:
      goto LABEL_51;
    case 0xB:
      if ((void)v26 != 0x72615074696E493CLL || *(void *)((char *)&v26 + 3) != 0x3E6D617261507469) {
        goto LABEL_72;
      }
      goto LABEL_36;
    case 0xC:
      goto LABEL_62;
    case 0xF:
      BOOL v15 = (void)v26 == 0x61526E7261654C3CLL && *(void *)((char *)&v26 + 7) == 0x3E66656F43657461;
      long long v9 = (float *)(a1 + 176);
      if (!v15) {
        goto LABEL_50;
      }
      goto LABEL_56;
    case 0x12:
      if ((void)v26 == 0x6E6569646172473CLL
        && *((void *)&v26 + 1) == 0x7079546D726F4E74
        && (unsigned __int16)v27 == 15973)
      {
        goto LABEL_45;
      }
LABEL_50:
      if (HIBYTE(v27) == 9)
      {
LABEL_51:
        BOOL v16 = (void)v26 == 0x6461724778614D3CLL && BYTE8(v26) == 62;
        long long v9 = (float *)(a1 + 172);
        if (!v16) {
          goto LABEL_72;
        }
        goto LABEL_56;
      }
      if (HIBYTE(v27) != 12) {
        goto LABEL_72;
      }
      uint64_t v4 = &v26;
LABEL_62:
      uint64_t v17 = *(void *)v4;
      int v18 = *((_DWORD *)v4 + 2);
      if (v17 != 0x6E6F706D6F432F3CLL || v18 != 1047817829) {
        goto LABEL_72;
      }
LABEL_67:
      *(_DWORD *)(a1 + 168) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v28);
      kaldi::CuVector<float>::Resize(a1 + 88, *(unsigned int *)(a1 + 8), 0);
      kaldi::CuVectorBase<float>::Set(a1 + 88, v29);
      if (SHIBYTE(v27) < 0) {
        operator delete((void *)v26);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      return;
    default:
      goto LABEL_72;
  }
}

void sub_1B1EFB988(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AddShift::WriteData(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a1 + 88;
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  kaldi::CuVectorBase<float>::Write(v5, a2, a3);
}

uint64_t *kaldi::nnet1::AddShift::PropagateFnc(uint64_t a1, uint64_t a2, int *a3)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111);
  return kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)a3, a1 + 88, 1.0, 1.0);
}

int *kaldi::nnet1::AddShift::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
}

double kaldi::nnet1::AddShift::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v24 = 0uLL;
    uint64_t v25 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v24);
    if (SHIBYTE(v25) < 0)
    {
      uint64_t v9 = *((void *)&v24 + 1);
      if (*((void *)&v24 + 1) != 15
        || (*(void *)v24 == 0x61526E7261654C3CLL ? (BOOL v10 = *(void *)(v24 + 7) == 0x3E66656F43657461) : (BOOL v10 = 0),
            std::string::size_type v11 = (float *)(a1 + 176),
            !v10))
      {
        if (*((void *)&v24 + 1) == 18)
        {
          if (*(void *)v24 == 0x6E6569646172473CLL
            && *(void *)(v24 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v24 + 16) == 15973)
          {
            goto LABEL_46;
          }
          uint64_t v9 = *((void *)&v24 + 1);
        }
        if (v9 != 9) {
          goto LABEL_49;
        }
        BOOL v8 = (long long *)v24;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v25) == 9)
      {
        BOOL v8 = &v24;
LABEL_31:
        uint64_t v14 = *(void *)v8;
        int v15 = *((unsigned __int8 *)v8 + 8);
        BOOL v16 = v14 == 0x6461724778614D3CLL && v15 == 62;
        std::string::size_type v11 = (float *)(a1 + 172);
        if (!v16)
        {
LABEL_49:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::string v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v25 >= 0) {
            unint64_t v20 = &v24;
          }
          else {
            unint64_t v20 = (long long *)v24;
          }
          if (v25 >= 0) {
            uint64_t v21 = HIBYTE(v25);
          }
          else {
            uint64_t v21 = *((void *)&v24 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v25) != 15)
      {
        if (HIBYTE(v25) != 18) {
          goto LABEL_49;
        }
        BOOL v6 = (void)v24 == 0x6E6569646172473CLL && *((void *)&v24 + 1) == 0x7079546D726F4E74;
        if (!v6 || (unsigned __int16)v25 != 15973) {
          goto LABEL_49;
        }
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v23 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 168) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v23) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_42;
      }
      BOOL v17 = (void)v24 == 0x61526E7261654C3CLL && *(void *)((char *)&v24 + 7) == 0x3E66656F43657461;
      std::string::size_type v11 = (float *)(a1 + 176);
      if (!v17) {
        goto LABEL_49;
      }
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v11);
LABEL_42:
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
  }
  return kaldi::CuVector<float>::Read(a1 + 88, a2, a3);
}

void sub_1B1EFBD74()
{
}

void *kaldi::nnet1::AddShift::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 168), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1B1EFBE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::AddShift::NumParams(kaldi::nnet1::AddShift *this)
{
  return *((unsigned int *)this + 26);
}

const void **kaldi::nnet1::AddShift::GetParams(uint64_t a1, void **a2)
{
  kaldi::Vector<float>::Resize(a2, *(unsigned int *)(a1 + 8), 0);
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 88), (uint64_t)a2);
}

void *kaldi::nnet1::AddShift::SetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 88);
  (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v3, a2);
}

double kaldi::nnet1::AddShift::SumParams(kaldi::nnet1::AddShift *this)
{
  return kaldi::CuVectorBase<float>::Sum((uint64_t)this + 88);
}

void *kaldi::nnet1::AddShift::PerturbParams(kaldi::nnet1::AddShift *this, float a2)
{
  uint64_t v4 = *((unsigned int *)this + 26);
  v6[0] = &unk_1F0A517C0;
  memset(&v6[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v6, v4, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, (uint64_t)v6, a2, 1.0);
  return kaldi::CuVector<float>::~CuVector(v6);
}

void sub_1B1EFBFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::AddShift::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  BOOL v8 = (const void ***)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  ((void (*)(const void ***, uint64_t, uint64_t, void, void))(*v8)[29])(v8, a2, a3, 0, 0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v8[15], (uint64_t)a4);
  BOOL v10 = (uint64_t (*)(const void ***))(*v8)[1];
  return v10(v8);
}

void kaldi::nnet1::AddShift::AccumGradients(kaldi::nnet1::AddShift *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::AddShift::EnsureCorrs(a1);
  *(_DWORD *)(*((void *)a1 + 23) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v10 = *((void *)a1 + 15) + 32 * a5;
  *(void *)(v10 + 24) = a4;
  kaldi::CuVectorBase<float>::AddRowSumMat(v10, a3, 1.0, 0.0);
}

uint64_t kaldi::nnet1::AddShift::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 172) = a3;
  *(_DWORD *)(result + 168) = a2;
  *(unsigned char *)(result + 208) = 0;
  return result;
}

void kaldi::nnet1::AddShift::NormalizeGradients(kaldi::nnet1::AddShift *this, float a2, int a3)
{
  int v3 = *((_DWORD *)this + 42);
  if (v3 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0) {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 15) + 32 * a3, *((void *)this + 18) + 32 * a3, a2);
    }
  }
  else if (v3 == 2)
  {
    if (a2 > 0.0)
    {
      if (*((unsigned char *)this + 84)) {
        a2 = (float)*(int *)(*((void *)this + 23) + 4 * a3) * a2;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 15) + 32 * a3, (void *)(*((void *)this + 18) + 32 * a3), a2);
    }
  }
  else if (v3 == 1 && a2 > 0.0)
  {
    if (*((unsigned char *)this + 84)) {
      a2 = (float)*(int *)(*((void *)this + 23) + 4 * a3) * a2;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 15) + 32 * a3, a2);
  }
}

void kaldi::nnet1::AddShift::UpdateWeights(kaldi::nnet1::AddShift *this, void *a2, int a3)
{
  kaldi::nnet1::AddShift::EnsureCorrs(this);
  float v6 = *((float *)this + 14);
  uint64_t v7 = *((unsigned int *)this + 20);
  if (a3 >= 0) {
    int v8 = a3;
  }
  else {
    int v8 = *((_DWORD *)this + 20);
  }
  if (v7 == 1) {
    int v8 = 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *((void *)this + 15);
  uint64_t v11 = v10 + 32 * v8;
  *(void *)(v11 + 24) = a2;
  *(void *)(*((void *)this + 18) + 32 * v8 + 24) = a2;
  if (v8 == v7)
  {
    kaldi::CuVectorBase<float>::AddVec(v11, v10, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      uint64_t v12 = 1;
      uint64_t v13 = 32;
      do
      {
        kaldi::CuVectorBase<float>::AddVec(*((void *)this + 15) + 32 * v9, *((void *)this + 15) + v13, 1.0, 1.0);
        ++v12;
        v13 += 32;
      }
      while (v12 < *((int *)this + 20));
    }
    uint64_t v14 = (int *)*((void *)this + 23);
    v14[v9] = 0;
    if ((int)v7 >= 1)
    {
      int v15 = 0;
      BOOL v16 = v14;
      do
      {
        int v17 = *v16++;
        v15 += v17;
        v14[v9] = v15;
        --v7;
      }
      while (v7);
    }
  }
  if (*((unsigned char *)this + 84)) {
    float v6 = v6 / (float)*(int *)(*((void *)this + 23) + 4 * v9);
  }
  if (*((float *)this + 43) >= 0.0) {
    (*(void (**)(kaldi::nnet1::AddShift *, uint64_t))(*(void *)this + 248))(this, v9);
  }
  *((void *)this + 14) = a2;
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, *((void *)this + 15) + 32 * v9, -(float)(v6 * *((float *)this + 44)), 1.0);
  int v18 = (unsigned char *)*((void *)this + 23);
  if (v9 == *((_DWORD *)this + 20))
  {
    std::string v19 = (unsigned char *)*((void *)this + 24);
    if (v18 != v19)
    {
      bzero(v18, ((v19 - v18 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v18[4 * v9] = 0;
  }
}

void kaldi::nnet1::Rescale::Copy(kaldi::nnet1::Rescale *this)
{
}

void sub_1B1EFC440(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C404CB9A218);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Rescale::GetType(kaldi::nnet1::Rescale *this)
{
  return 1032;
}

uint64_t kaldi::nnet1::Rescale::Info(kaldi::nnet1::Rescale *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(kaldi::nnet1::Rescale *, void *, void))(*(void *)this + 168))(this, v8, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n scale_data", 12);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 88);
  if ((v7 & 0x80u) == 0) {
    int v3 = __p;
  }
  else {
    int v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v10);
}

void sub_1B1EFC61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Rescale::InfoGradient(kaldi::nnet1::Rescale *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, "\n  scale_data_grad");
  kaldi::nnet1::MomentStatistics<float>((void *)this + 15);
  if ((v16 & 0x80u) == 0) {
    uint64_t v4 = v15;
  }
  else {
    uint64_t v4 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v5 = v16;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v15[1];
  }
  float v6 = std::string::append(&v17, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v18, ", lr-coef ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v14 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v11 = v14;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1B1EFC798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Rescale::InitData(uint64_t a1, uint64_t *a2)
{
  float v29 = 0.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 216), &v28);
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_67;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v26);
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      break;
    }
    uint64_t v6 = *((void *)&v26 + 1);
    if (*((void *)&v26 + 1) == 11
      && (*(void *)v26 == 0x72615074696E493CLL ? (BOOL v7 = *(void *)(v26 + 3) == 0x3E6D617261507469) : (BOOL v7 = 0), v7))
    {
LABEL_36:
      long long v9 = &v29;
    }
    else
    {
      if (*((void *)&v26 + 1) == 15)
      {
        BOOL v8 = *(void *)v26 == 0x61526E7261654C3CLL && *(void *)(v26 + 7) == 0x3E66656F43657461;
        long long v9 = (float *)(a1 + 224);
        if (v8) {
          goto LABEL_56;
        }
        uint64_t v6 = *((void *)&v26 + 1);
      }
      if (v6 == 18)
      {
        if (*(void *)v26 == 0x6E6569646172473CLL
          && *(void *)(v26 + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v26 + 16) == 15973)
        {
LABEL_45:
          kaldi::ReadToken(a2, 0, (uint64_t)&v28);
          goto LABEL_57;
        }
        uint64_t v6 = *((void *)&v26 + 1);
      }
      if (v6 != 9) {
        goto LABEL_58;
      }
      BOOL v12 = *(void *)v26 == 0x6461724778614D3CLL && *(unsigned char *)(v26 + 8) == 62;
      long long v9 = (float *)(a1 + 220);
      if (!v12)
      {
        uint64_t v6 = *((void *)&v26 + 1);
LABEL_58:
        if (v6 == 12)
        {
          uint64_t v4 = (long long *)v26;
          goto LABEL_62;
        }
LABEL_72:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
        unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unknown token ", 14);
        if (v27 >= 0) {
          uint64_t v21 = &v26;
        }
        else {
          uint64_t v21 = (long long *)v26;
        }
        if (v27 >= 0) {
          uint64_t v22 = HIBYTE(v27);
        }
        else {
          uint64_t v22 = *((void *)&v26 + 1);
        }
        uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
        long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" (InitParam)", 12);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
      }
    }
LABEL_56:
    kaldi::ReadBasicType<float>(a2, 0, v9);
LABEL_57:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v4 = &v26;
  switch(HIBYTE(v27))
  {
    case 9:
      goto LABEL_51;
    case 0xB:
      if ((void)v26 != 0x72615074696E493CLL || *(void *)((char *)&v26 + 3) != 0x3E6D617261507469) {
        goto LABEL_72;
      }
      goto LABEL_36;
    case 0xC:
      goto LABEL_62;
    case 0xF:
      BOOL v15 = (void)v26 == 0x61526E7261654C3CLL && *(void *)((char *)&v26 + 7) == 0x3E66656F43657461;
      long long v9 = (float *)(a1 + 224);
      if (!v15) {
        goto LABEL_50;
      }
      goto LABEL_56;
    case 0x12:
      if ((void)v26 == 0x6E6569646172473CLL
        && *((void *)&v26 + 1) == 0x7079546D726F4E74
        && (unsigned __int16)v27 == 15973)
      {
        goto LABEL_45;
      }
LABEL_50:
      if (HIBYTE(v27) == 9)
      {
LABEL_51:
        BOOL v16 = (void)v26 == 0x6461724778614D3CLL && BYTE8(v26) == 62;
        long long v9 = (float *)(a1 + 220);
        if (!v16) {
          goto LABEL_72;
        }
        goto LABEL_56;
      }
      if (HIBYTE(v27) != 12) {
        goto LABEL_72;
      }
      uint64_t v4 = &v26;
LABEL_62:
      uint64_t v17 = *(void *)v4;
      int v18 = *((_DWORD *)v4 + 2);
      if (v17 != 0x6E6F706D6F432F3CLL || v18 != 1047817829) {
        goto LABEL_72;
      }
LABEL_67:
      *(_DWORD *)(a1 + 2kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v28);
      kaldi::CuVector<float>::Resize(a1 + 88, *(unsigned int *)(a1 + 8), 0);
      kaldi::CuVectorBase<float>::Set(a1 + 88, v29);
      if (SHIBYTE(v27) < 0) {
        operator delete((void *)v26);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      return;
    default:
      goto LABEL_72;
  }
}

void sub_1B1EFCBF4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Rescale::WriteData(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a1 + 88;
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  kaldi::CuVectorBase<float>::Write(v5, a2, a3);
}

uint64_t kaldi::nnet1::Rescale::PropagateFnc(uint64_t a1, uint64_t a2, int *a3)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111);
  return kaldi::CuMatrixBase<float>::MulColsVec((uint64_t)a3, a1 + 88);
}

uint64_t kaldi::nnet1::Rescale::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
  return kaldi::CuMatrixBase<float>::MulColsVec((uint64_t)a5, a1 + 88);
}

double kaldi::nnet1::Rescale::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v24 = 0uLL;
    uint64_t v25 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v24);
    if (SHIBYTE(v25) < 0)
    {
      uint64_t v9 = *((void *)&v24 + 1);
      if (*((void *)&v24 + 1) != 15
        || (*(void *)v24 == 0x61526E7261654C3CLL ? (BOOL v10 = *(void *)(v24 + 7) == 0x3E66656F43657461) : (BOOL v10 = 0),
            std::string::size_type v11 = (float *)(a1 + 224),
            !v10))
      {
        if (*((void *)&v24 + 1) == 18)
        {
          if (*(void *)v24 == 0x6E6569646172473CLL
            && *(void *)(v24 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v24 + 16) == 15973)
          {
            goto LABEL_46;
          }
          uint64_t v9 = *((void *)&v24 + 1);
        }
        if (v9 != 9) {
          goto LABEL_49;
        }
        BOOL v8 = (long long *)v24;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v25) == 9)
      {
        BOOL v8 = &v24;
LABEL_31:
        uint64_t v14 = *(void *)v8;
        int v15 = *((unsigned __int8 *)v8 + 8);
        BOOL v16 = v14 == 0x6461724778614D3CLL && v15 == 62;
        std::string::size_type v11 = (float *)(a1 + 220);
        if (!v16)
        {
LABEL_49:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::string v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v25 >= 0) {
            unint64_t v20 = &v24;
          }
          else {
            unint64_t v20 = (long long *)v24;
          }
          if (v25 >= 0) {
            uint64_t v21 = HIBYTE(v25);
          }
          else {
            uint64_t v21 = *((void *)&v24 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v25) != 15)
      {
        if (HIBYTE(v25) != 18) {
          goto LABEL_49;
        }
        BOOL v6 = (void)v24 == 0x6E6569646172473CLL && *((void *)&v24 + 1) == 0x7079546D726F4E74;
        if (!v6 || (unsigned __int16)v25 != 15973) {
          goto LABEL_49;
        }
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v23 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 2kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v23) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_42;
      }
      BOOL v17 = (void)v24 == 0x61526E7261654C3CLL && *(void *)((char *)&v24 + 7) == 0x3E66656F43657461;
      std::string::size_type v11 = (float *)(a1 + 224);
      if (!v17) {
        goto LABEL_49;
      }
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v11);
LABEL_42:
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
  }
  return kaldi::CuVector<float>::Read(a1 + 88, a2, a3);
}

void sub_1B1EFD014()
{
}

void *kaldi::nnet1::Rescale::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 216), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1B1EFD0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Rescale::NumParams(kaldi::nnet1::Rescale *this)
{
  return *((unsigned int *)this + 26);
}

const void **kaldi::nnet1::Rescale::GetParams(uint64_t a1, void **a2)
{
  kaldi::Vector<float>::Resize(a2, *(unsigned int *)(a1 + 8), 0);
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 88), (uint64_t)a2);
}

void *kaldi::nnet1::Rescale::SetParams(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a1 + 88);
  (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v3, a2);
}

double kaldi::nnet1::Rescale::SumParams(kaldi::nnet1::Rescale *this)
{
  return kaldi::CuVectorBase<float>::Sum((uint64_t)this + 88);
}

void *kaldi::nnet1::Rescale::PerturbParams(kaldi::nnet1::Rescale *this, float a2)
{
  uint64_t v4 = *((unsigned int *)this + 26);
  v6[0] = &unk_1F0A517C0;
  memset(&v6[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v6, v4, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, (uint64_t)v6, a2, 1.0);
  return kaldi::CuVector<float>::~CuVector(v6);
}

void sub_1B1EFD258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::Rescale::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  BOOL v8 = (const void ***)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  ((void (*)(const void ***, uint64_t, uint64_t, void, void))(*v8)[29])(v8, a2, a3, 0, 0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v8[15], (uint64_t)a4);
  BOOL v10 = (uint64_t (*)(const void ***))(*v8)[1];
  return v10(v8);
}

void kaldi::nnet1::Rescale::AccumGradients(int32x2_t *a1, uint64_t a2, int32x2_t *a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Rescale::EnsureCorrs((kaldi::nnet1::Rescale *)a1);
  uint64_t v10 = *(void *)&a1[15] + 32 * a5;
  *(void *)(v10 + 24) = a4;
  kaldi::CuVectorBase<float>::SetZero(v10);
  *(_DWORD *)(*(void *)&a1[29] + 4 * a5) = *(_DWORD *)(a2 + 20);
  a1[25] = (int32x2_t)a4;
  kaldi::CuMatrix<float>::operator=(a1 + 21, a3);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)&a1[21], a2);
  uint64_t v11 = *(void *)&a1[15] + 32 * a5;
  kaldi::CuVectorBase<float>::AddRowSumMat(v11, (uint64_t)&a1[21], 1.0, 1.0);
}

uint64_t kaldi::nnet1::Rescale::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 220) = a3;
  *(_DWORD *)(result + 2kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = a2;
  *(unsigned char *)(result + 256) = 0;
  return result;
}

void kaldi::nnet1::Rescale::NormalizeGradients(kaldi::nnet1::Rescale *this, float a2, int a3)
{
  int v3 = *((_DWORD *)this + 54);
  if (v3 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0) {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 15) + 32 * a3, *((void *)this + 18) + 32 * a3, a2);
    }
  }
  else if (v3 == 2)
  {
    if (a2 > 0.0)
    {
      if (*((unsigned char *)this + 84)) {
        a2 = (float)*(int *)(*((void *)this + 29) + 4 * a3) * a2;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 15) + 32 * a3, (void *)(*((void *)this + 18) + 32 * a3), a2);
    }
  }
  else if (v3 == 1 && a2 > 0.0)
  {
    if (*((unsigned char *)this + 84)) {
      a2 = (float)*(int *)(*((void *)this + 29) + 4 * a3) * a2;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 15) + 32 * a3, a2);
  }
}

void kaldi::nnet1::Rescale::UpdateWeights(kaldi::nnet1::Rescale *this, void *a2, int a3)
{
  kaldi::nnet1::Rescale::EnsureCorrs(this);
  float v6 = *((float *)this + 14);
  uint64_t v7 = *((unsigned int *)this + 20);
  if (a3 >= 0) {
    int v8 = a3;
  }
  else {
    int v8 = *((_DWORD *)this + 20);
  }
  if (v7 == 1) {
    int v8 = 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *((void *)this + 15);
  uint64_t v11 = v10 + 32 * v8;
  *(void *)(v11 + 24) = a2;
  *(void *)(*((void *)this + 18) + 32 * v8 + 24) = a2;
  if (v8 == v7)
  {
    kaldi::CuVectorBase<float>::AddVec(v11, v10, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      uint64_t v12 = 1;
      uint64_t v13 = 32;
      do
      {
        kaldi::CuVectorBase<float>::AddVec(*((void *)this + 15) + 32 * v9, *((void *)this + 15) + v13, 1.0, 1.0);
        ++v12;
        v13 += 32;
      }
      while (v12 < *((int *)this + 20));
    }
    uint64_t v14 = (int *)*((void *)this + 29);
    v14[v9] = 0;
    if ((int)v7 >= 1)
    {
      int v15 = 0;
      BOOL v16 = v14;
      do
      {
        int v17 = *v16++;
        v15 += v17;
        v14[v9] = v15;
        --v7;
      }
      while (v7);
    }
  }
  if (*((unsigned char *)this + 84)) {
    float v6 = v6 / (float)*(int *)(*((void *)this + 29) + 4 * v9);
  }
  if (*((float *)this + 55) >= 0.0) {
    (*(void (**)(kaldi::nnet1::Rescale *, uint64_t))(*(void *)this + 248))(this, v9);
  }
  *((void *)this + 14) = a2;
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, *((void *)this + 15) + 32 * v9, -(float)(v6 * *((float *)this + 56)), 1.0);
  int v18 = (unsigned char *)*((void *)this + 29);
  if (v9 == *((_DWORD *)this + 20))
  {
    std::string v19 = (unsigned char *)*((void *)this + 30);
    if (v18 != v19)
    {
      bzero(v18, ((v19 - v18 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v18[4 * v9] = 0;
  }
}

void kaldi::nnet1::KlHmm::Copy(kaldi::nnet1::KlHmm *this)
{
}

void sub_1B1EFD78C(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v3);
  void *v1 = v2;
  uint64_t v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  MEMORY[0x1B3EA8670](v1, 0x1081C404EFE5F1CLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::KlHmm::GetType(kaldi::nnet1::KlHmm *this)
{
  return 2048;
}

void kaldi::nnet1::KlHmm::WriteData(uint64_t a1, void *a2, int a3)
{
}

uint64_t kaldi::nnet1::KlHmm::PropagateFnc(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 11;
  if (!a1[13].i32[1])
  {
    uint64_t v6 = (uint64_t)a1;
    kaldi::Matrix<float>::Matrix((uint64_t)v15, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
    kaldi::CuMatrixBase<float>::CopyToMat<float>(a2, (int *)v15, 111);
    v14[2] = 0;
    v14[0] = v15[0];
    v14[1] = kaldi::MatrixBase<float>::NumCols((uint64_t)v15);
    double v7 = kaldi::VectorBase<float>::Sum((uint64_t)v14);
    v6 += 48;
    kaldi::Matrix<float>::Matrix<double>(v14, v6, 111, v7);
    uint64_t v8 = kaldi::MatrixBase<float>::NumRows(v6);
    memset(v16, 0, 24);
    kaldi::Vector<float>::Resize(v16, v8, 0);
    kaldi::VectorBase<float>::AddColSumMat((uint64_t *)v16, (uint64_t)v14, 1.0, 1.0);
    kaldi::VectorBase<float>::ApplyFloor((uint64_t)v16, 1.0e-20);
    kaldi::VectorBase<float>::InvertElements((uint64_t)v16);
    kaldi::MatrixBase<float>::MulRowsVec((uint64_t)v14, (uint64_t *)v16);
    kaldi::MatrixBase<float>::ApplyFloor((uint64_t)v14, 1.0e-20);
    kaldi::MatrixBase<float>::InvertElements((uint64_t)v14);
    kaldi::MatrixBase<float>::ApplyLog((uint64_t)v14);
    uint64_t v9 = kaldi::MatrixBase<float>::NumRows(v6);
    uint64_t v10 = kaldi::MatrixBase<float>::NumCols(v6);
    kaldi::CuMatrix<float>::Resize(v5, v9, v10, 0, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)v5, (int *)v14, 111);
    kaldi::Vector<float>::Destroy((uint64_t)v16);
    kaldi::Matrix<float>::~Matrix((uint64_t)v14);
    kaldi::Matrix<float>::~Matrix((uint64_t)v15);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v16, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>(a2, (int *)v16, 111);
  kaldi::MatrixBase<float>::ApplyFloor((uint64_t)v16, 1.0e-20);
  kaldi::MatrixBase<float>::ApplyLog((uint64_t)v16);
  kaldi::CuMatrix<float>::CuMatrix(v15, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)v15, (int *)v16, 111);
  kaldi::CuMatrix<float>::CuMatrix(v14, a2, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)v14, (uint64_t)v15);
  uint64_t v11 = *(unsigned int *)(a2 + 20);
  v13[0] = &unk_1F0A517C0;
  memset(&v13[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v13, v11, 0);
  kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v13, (uint64_t)v14, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, (uint64_t)v5, CblasTrans, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddVecToCols(a3, (uint64_t)v13, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::Scale(a3, -1.0);
  kaldi::CuVector<float>::~CuVector(v13);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v16);
}

void sub_1B1EFDAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::KlHmm::BackpropagateFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::KlHmm::ReadData(int32x2_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t)&a1[6];
  kaldi::Matrix<double>::Read(a1 + 6, a2, a3, 0, 0);
  kaldi::MatrixBase<float>::NumRows(v3);
  return kaldi::MatrixBase<float>::NumCols(v3);
}

void kaldi::nnet1::Rbm::Copy(kaldi::nnet1::Rbm *this)
{
}

void sub_1B1EFDC08(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40502BA4E3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Rbm::GetType(kaldi::nnet1::Rbm *this)
{
  return 1025;
}

void kaldi::nnet1::Rbm::InitData(int32x2_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v112 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  int v106 = 1036831949;
  int v105 = -1;
  int v102 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  long long v100 = 0uLL;
  uint64_t v6 = a2 + 4;
  uint64_t v101 = 0;
  while (1)
  {
    if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_138;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v100);
    if ((SHIBYTE(v101) & 0x80000000) == 0) {
      break;
    }
    switch(*((void *)&v100 + 1))
    {
      case 0xCLL:
        int v37 = (long long *)v100;
        if (*(void *)v100 == 0x546E65646469483CLL && *(_DWORD *)(v100 + 8) == 1046835321)
        {
LABEL_93:
          std::string v28 = (void **)&v109;
LABEL_106:
          kaldi::ReadToken(a2, 0, (uint64_t)v28);
        }
        else
        {
          if (*(void *)v100 != 0x536D6F646E61523CLL || *(_DWORD *)(v100 + 8) != 1046766949)
          {
            if (*((void *)&v100 + 1) == 12) {
              goto LABEL_133;
            }
            goto LABEL_244;
          }
LABEL_24:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v105);
        }
LABEL_131:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0xDLL:
        if (*(void *)v100 == 0x656C62697369563CLL && *(void *)(v100 + 5) == 0x3E65707954656C62)
        {
LABEL_92:
          std::string v28 = (void **)&v112;
          goto LABEL_106;
        }
        if (*(void *)v100 != 0x74536D617261503CLL || *(void *)(v100 + 5) != 0x3E7665646474536DLL) {
          goto LABEL_244;
        }
LABEL_91:
        uint64_t v25 = (float *)&v106;
        goto LABEL_130;
      case 0x10:
        if (*(void *)v100 != 0x426E65646469483CLL || *(void *)(v100 + 8) != 0x3E6E61654D736169) {
          goto LABEL_244;
        }
LABEL_112:
        uint64_t v25 = (float *)&v107 + 1;
        goto LABEL_130;
      case 0x11:
        if (*(void *)v100 == 0x656C62697369563CLL
          && *(void *)(v100 + 8) == 0x6E61654D73616942
          && *(unsigned char *)(v100 + 16) == 62)
        {
LABEL_129:
          uint64_t v25 = (float *)&v108 + 1;
        }
        else
        {
          if (*(void *)v100 != 0x426E65646469483CLL
            || *(void *)(v100 + 8) != 0x65676E6152736169
            || *(unsigned char *)(v100 + 16) != 62)
          {
            goto LABEL_244;
          }
LABEL_128:
          uint64_t v25 = (float *)&v107;
        }
LABEL_130:
        kaldi::ReadBasicType<float>(a2, 0, v25);
        goto LABEL_131;
      case 0x12:
        if (*(void *)v100 != 0x656C62697369563CLL
          || *(void *)(v100 + 8) != 0x676E615273616942
          || *(_WORD *)(v100 + 16) != 15973)
        {
          goto LABEL_244;
        }
LABEL_81:
        uint64_t v25 = (float *)&v108;
        goto LABEL_130;
      case 0x19:
        if (*(void *)v100 != 0x656C62697369563CLL
          || *(void *)(v100 + 8) != 0x6E766D4373616942
          || *(void *)(v100 + 16) != 0x656D616E656C6946
          || *(unsigned char *)(v100 + 24) != 62)
        {
          goto LABEL_244;
        }
LABEL_105:
        std::string v28 = (void **)&v102;
        goto LABEL_106;
      default:
        goto LABEL_244;
    }
  }
  switch(HIBYTE(v101))
  {
    case 0xC:
      if ((void)v100 == 0x546E65646469483CLL && DWORD2(v100) == 1046835321) {
        goto LABEL_93;
      }
      if ((void)v100 == 0x536D6F646E61523CLL && DWORD2(v100) == 1046766949) {
        goto LABEL_24;
      }
      int v37 = &v100;
      break;
    case 0xD:
      if ((void)v100 == 0x656C62697369563CLL && *(void *)((char *)&v100 + 5) == 0x3E65707954656C62) {
        goto LABEL_92;
      }
      if ((void)v100 != 0x74536D617261503CLL || *(void *)((char *)&v100 + 5) != 0x3E7665646474536DLL) {
        goto LABEL_244;
      }
      goto LABEL_91;
    case 0x10:
      if ((void)v100 != 0x426E65646469483CLL || *((void *)&v100 + 1) != 0x3E6E61654D736169) {
        goto LABEL_244;
      }
      goto LABEL_112;
    case 0x11:
      if ((void)v100 == 0x656C62697369563CLL
        && *((void *)&v100 + 1) == 0x6E61654D73616942
        && v101 == 62)
      {
        goto LABEL_129;
      }
      if ((void)v100 != 0x426E65646469483CLL
        || *((void *)&v100 + 1) != 0x65676E6152736169
        || v101 != 62)
      {
        goto LABEL_244;
      }
      goto LABEL_128;
    case 0x12:
      if ((void)v100 != 0x656C62697369563CLL
        || *((void *)&v100 + 1) != 0x676E615273616942
        || (unsigned __int16)v101 != 15973)
      {
        goto LABEL_244;
      }
      goto LABEL_81;
    case 0x19:
      if ((void)v100 != 0x656C62697369563CLL
        || *((void *)&v100 + 1) != 0x6E766D4373616942
        || v101 != 0x656D616E656C6946
        || v102 != 62)
      {
        goto LABEL_244;
      }
      goto LABEL_105;
    default:
      goto LABEL_244;
  }
LABEL_133:
  uint64_t v38 = *(void *)v37;
  int v39 = *((_DWORD *)v37 + 2);
  if (v38 != 0x6E6F706D6F432F3CLL || v39 != 1047817829)
  {
LABEL_244:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
    unint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Unknown token ", 14);
    if (v101 >= 0) {
      std::vector<int> v78 = &v100;
    }
    else {
      std::vector<int> v78 = (long long *)v100;
    }
    if (v101 >= 0) {
      uint64_t v79 = HIBYTE(v101);
    }
    else {
      uint64_t v79 = *((void *)&v100 + 1);
    }
    uint64_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
    uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" Typo in config?", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" (VisibleType|HiddenType|VisibleBiasMean|VisibleBiasRange|HiddenBiasMean|HiddenBiasRange|ParamStddev|VisibleBiasCmvnFilename|RandomSeed)", 136);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v88);
  }
LABEL_138:
  if ((SHIBYTE(v114) & 0x80000000) == 0)
  {
    int v41 = &v112;
    switch(HIBYTE(v114))
    {
      case 4:
        int v42 = (int)v112;
        goto LABEL_143;
      case 5:
        if (v112 != 1937072487 || BYTE4(v112) != 115) {
          goto LABEL_251;
        }
        goto LABEL_169;
      case 8:
        goto LABEL_156;
      case 9:
        if (v112 != (unsigned char *)0x6C6C756F6E726542 || v113 != 105) {
          goto LABEL_251;
        }
        goto LABEL_163;
      default:
        goto LABEL_251;
    }
  }
  switch(v113)
  {
    case 4:
      int v42 = *(_DWORD *)v112;
LABEL_143:
      if (v42 != 1852990818) {
        goto LABEL_251;
      }
      goto LABEL_163;
    case 5:
      if (*(_DWORD *)v112 != 1937072487 || v112[4] != 115) {
        goto LABEL_251;
      }
      goto LABEL_169;
    case 8:
      int v41 = v112;
LABEL_156:
      if (*v41 != 0x6E61697373756147) {
        goto LABEL_251;
      }
LABEL_169:
      int v46 = 1;
      goto LABEL_170;
    case 9:
      if (*(void *)v112 != 0x6C6C756F6E726542 || v112[8] != 105) {
        goto LABEL_251;
      }
LABEL_163:
      int v46 = 0;
LABEL_170:
      a1[37].i32[0] = v46;
      if ((v111 & 0x8000000000000000) == 0)
      {
        unint64_t v48 = &v109;
        switch(HIBYTE(v111))
        {
          case 4:
            int v49 = (int)v109;
            goto LABEL_175;
          case 5:
            if (v109 != 1937072487 || BYTE4(v109) != 115) {
              goto LABEL_258;
            }
            goto LABEL_201;
          case 8:
            goto LABEL_188;
          case 9:
            if (v109 != (unsigned char *)0x6C6C756F6E726542 || v110 != 105) {
              goto LABEL_258;
            }
            goto LABEL_195;
          default:
            goto LABEL_258;
        }
      }
      break;
    default:
LABEL_251:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
      clockid_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Wrong <VisibleType>", 19);
      if (v114 >= 0) {
        int v83 = &v112;
      }
      else {
        int v83 = (unsigned char **)v112;
      }
      if (v114 >= 0) {
        uint64_t v84 = HIBYTE(v114);
      }
      else {
        uint64_t v84 = v113;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v88);
  }
  switch(v110)
  {
    case 4:
      int v49 = *(_DWORD *)v109;
LABEL_175:
      if (v49 != 1852990818) {
        goto LABEL_258;
      }
      goto LABEL_195;
    case 5:
      if (*(_DWORD *)v109 != 1937072487 || v109[4] != 115) {
        goto LABEL_258;
      }
      goto LABEL_201;
    case 8:
      unint64_t v48 = v109;
LABEL_188:
      if (*v48 != 0x6E61697373756147) {
        goto LABEL_258;
      }
LABEL_201:
      int v53 = 1;
      goto LABEL_202;
    case 9:
      if (*(void *)v109 != 0x6C6C756F6E726542 || v109[8] != 105) {
        goto LABEL_258;
      }
LABEL_195:
      int v53 = 0;
LABEL_202:
      a1[37].i32[1] = v53;
      if (v105 >= 1) {
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v105);
      }
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v96, a3);
      kaldi::Matrix<float>::Matrix((uint64_t)v94, a1[1].u32[1], a1[1].u32[0], 0, 0);
      int v55 = a1[1].i32[1];
      if (v55 >= 1)
      {
        int v56 = 0;
        LODWORD(v57) = a1[1].i32[0];
        do
        {
          if ((int)v57 >= 1)
          {
            uint64_t v58 = 0;
            do
            {
              float v59 = *(float *)&v106;
              kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v96, 0);
              *(float *)(*(void *)v94 + 4 * v56 * v95 + 4 * v58++) = v59 * v60;
              uint64_t v57 = a1[1].i32[0];
            }
            while (v58 < v57);
            int v55 = a1[1].i32[1];
          }
          ++v56;
        }
        while (v56 < v55);
      }
      kaldi::CuMatrix<float>::operator=(a1 + 9, v94);
      uint64_t v61 = a1[1].u32[1];
      uint64_t v92 = 0;
      uint64_t v93 = 0;
      uint64_t v91 = 0;
      kaldi::Vector<float>::Resize((void **)&v91, v61, 0);
      if (a1[1].i32[1] < 1)
      {
        uint64_t v66 = v92;
      }
      else
      {
        uint64_t v62 = 0;
        do
        {
          float v63 = *((float *)&v107 + 1);
          float v64 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
          float v65 = v63 + (v64 + -0.5) * *(float *)&v107;
          uint64_t v66 = v92;
          v91[v62++] = v65;
        }
        while (v62 < a1[1].i32[1]);
      }
      kaldi::CuVector<float>::Resize((uint64_t)&a1[19], v66, 1);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(&a1[19], (uint64_t)&v91);
      if (SHIBYTE(v104) < 0)
      {
        if (v103)
        {
LABEL_218:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
            uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Initializing from <VisibleBiasCmvnFilename> ", 44);
            if (v104 >= 0) {
              uint64_t v68 = (void **)&v102;
            }
            else {
              uint64_t v68 = v102;
            }
            if (v104 >= 0) {
              uint64_t v69 = HIBYTE(v104);
            }
            else {
              uint64_t v69 = v103;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v88);
          }
          kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)&v88);
        }
      }
      else if (HIBYTE(v104))
      {
        goto LABEL_218;
      }
      uint64_t v70 = a1[1].u32[0];
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      int v88 = 0;
      kaldi::Vector<float>::Resize((void **)&v88, v70, 0);
      if (a1[1].i32[0] < 1)
      {
        uint64_t v75 = v89;
      }
      else
      {
        uint64_t v71 = 0;
        do
        {
          float v72 = *((float *)&v108 + 1);
          float v73 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
          float v74 = v72 + (v73 + -0.5) * *(float *)&v108;
          uint64_t v75 = v89;
          v88[v71++] = v74;
        }
        while (v71 < a1[1].i32[0]);
      }
      uint64_t v76 = a1 + 15;
      kaldi::CuVector<float>::Resize((uint64_t)v76, v75, 1);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(v76, (uint64_t)&v88);
      kaldi::Vector<float>::Destroy((uint64_t)&v88);
      kaldi::Vector<float>::Destroy((uint64_t)&v91);
      kaldi::Matrix<float>::~Matrix((uint64_t)v94);
      if (__p)
      {
        int v99 = __p;
        operator delete(__p);
      }
      int v88 = (float *)&v97;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
      if (SHIBYTE(v101) < 0) {
        operator delete((void *)v100);
      }
      if (SHIBYTE(v104) < 0) {
        operator delete(v102);
      }
      if (SHIBYTE(v111) < 0) {
        operator delete(v109);
      }
      if (SHIBYTE(v114) < 0) {
        operator delete(v112);
      }
      return;
    default:
LABEL_258:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
      unint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Wrong <HiddenType>", 18);
      if (v111 >= 0) {
        char v86 = &v109;
      }
      else {
        char v86 = (unsigned char **)v109;
      }
      if (v111 >= 0) {
        uint64_t v87 = HIBYTE(v111);
      }
      else {
        uint64_t v87 = v110;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)v86, v87);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v88);
  }
}

void sub_1B1EFEA7C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (*(char *)(v1 - 225) < 0) {
    operator delete(*(void **)(v1 - 248));
  }
  if (*(char *)(v1 - 177) < 0) {
    operator delete(*(void **)(v1 - 200));
  }
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Rbm::WriteData(uint64_t a1, void *a2, int a3)
{
  int v6 = *(_DWORD *)(a1 + 296);
  if (v6)
  {
    if (v6 != 1) {
      goto LABEL_12;
    }
    double v7 = "gauss";
  }
  else
  {
    double v7 = "bern";
  }
  kaldi::WriteToken(a2, a3, v7);
  int v8 = *(_DWORD *)(a1 + 300);
  if (v8)
  {
    if (v8 == 1)
    {
      uint64_t v9 = "gauss";
      goto LABEL_9;
    }
LABEL_12:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unknown type ", 13);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  uint64_t v9 = "bern";
LABEL_9:
  kaldi::WriteToken(a2, a3, v9);
  kaldi::CuMatrixBase<float>::Write(a1 + 72, a2, a3, 0);
  kaldi::CuVectorBase<float>::Write(a1 + 120, a2, a3);
  kaldi::CuVectorBase<float>::Write(a1 + 152, a2, a3);
}

void kaldi::nnet1::Rbm::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 152, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, a1 + 72, CblasTrans, 1.0, 1.0);
  if (!*(_DWORD *)(a1 + 300))
  {
    kaldi::CuMatrixBase<float>::Sigmoid(a3, a3);
  }
}

void kaldi::nnet1::Rbm::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&v19);
  kaldi::ReadToken(a2, a3, (uint64_t)&__p);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    if (HIBYTE(v21) != 4)
    {
      if (HIBYTE(v21) != 5) {
        goto LABEL_18;
      }
      int v6 = (unsigned __int8 *)&v19;
      goto LABEL_9;
    }
    if (v19 != 1852990818) {
      goto LABEL_18;
    }
LABEL_16:
    int v10 = 0;
    goto LABEL_17;
  }
  if (v20 == 4 && *(_DWORD *)v19 == 1852990818) {
    goto LABEL_16;
  }
  if (v20 != 5) {
    goto LABEL_18;
  }
  int v6 = (unsigned __int8 *)v19;
LABEL_9:
  int v7 = *(_DWORD *)v6;
  int v8 = v6[4];
  if (v7 == 1937072487 && v8 == 115)
  {
    int v10 = 1;
LABEL_17:
    *(_DWORD *)(a1 + 296) = v10;
  }
LABEL_18:
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if (HIBYTE(v18) != 4)
    {
      if (HIBYTE(v18) != 5) {
        goto LABEL_35;
      }
      p_p = (unsigned __int8 *)&__p;
      goto LABEL_26;
    }
    if (__p != 1852990818) {
      goto LABEL_35;
    }
LABEL_33:
    int v15 = 0;
    goto LABEL_34;
  }
  if (v17 == 4 && *(_DWORD *)__p == 1852990818) {
    goto LABEL_33;
  }
  if (v17 != 5) {
    goto LABEL_35;
  }
  p_p = (unsigned __int8 *)__p;
LABEL_26:
  int v12 = *(_DWORD *)p_p;
  int v13 = p_p[4];
  if (v12 == 1937072487 && v13 == 115)
  {
    int v15 = 1;
LABEL_34:
    *(_DWORD *)(a1 + 300) = v15;
  }
LABEL_35:
  kaldi::CuMatrix<float>::Read(a1 + 72, a2, a3, 0);
  kaldi::CuVector<float>::Read(a1 + 120, a2, a3);
  kaldi::CuVector<float>::Read(a1 + 152, a2, a3);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v19);
  }
}

void sub_1B1EFEF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Rbm::Reconstruct(unsigned int *a1, uint64_t a2, int32x2_t *a3)
{
  if (a1[3] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Nonmatching dims, component:", 28);
    int v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" data:", 6);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  uint64_t v6 = a1[2];
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  if (__PAIR64__(v7, v6) != *(void *)&a3[2]) {
    kaldi::CuMatrix<float>::Resize(a3, v7, v6, 0, 0);
  }
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)a3, (uint64_t)(a1 + 30), 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)a3, a2, CblasNoTrans, (uint64_t)(a1 + 18), CblasNoTrans, 1.0, 1.0);
  if (!a1[74])
  {
    kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)a3, (uint64_t)a3);
  }
}

void kaldi::nnet1::Rbm::RbmUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1 + 184;
  uint64_t v11 = a1 + 72;
  uint64_t v12 = *(unsigned int *)(a1 + 92);
  if (*(_DWORD *)(a1 + 204) == v12)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 88);
    if (*(_DWORD *)(a1 + 200) == v13)
    {
      if (*(_DWORD *)(a1 + 248) == *(_DWORD *)(a1 + 136))
      {
        uint64_t v13 = *(unsigned int *)(a1 + 200);
        if (*(_DWORD *)(a1 + 280) == *(_DWORD *)(a1 + 168)) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v13 = *(unsigned int *)(a1 + 200);
      }
    }
  }
  else
  {
    uint64_t v13 = *(unsigned int *)(a1 + 88);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 184), v12, v13, 0, 0);
  kaldi::CuVector<float>::Resize(a1 + 232, *(unsigned int *)(a1 + 136), 0);
  kaldi::CuVector<float>::Resize(a1 + 264, *(unsigned int *)(a1 + 168), 0);
LABEL_8:
  if (*(_DWORD *)(a1 + 296) == 1
    && (kaldi::nnet1::CheckNanInf<float>(a2, "pos_vis"),
        kaldi::nnet1::CheckNanInf<float>(a3, "pos_hid"),
        kaldi::nnet1::CheckNanInf<float>(a4, "neg_vis"),
        kaldi::nnet1::CheckNanInf<float>(a5, "pos_hid"),
        float v14 = kaldi::nnet1::ComputeStdDev<float>(a2),
        float v15 = kaldi::nnet1::ComputeStdDev<float>(a4),
        (float)(v14 + v14) < v15))
  {
    kaldi::CuMatrixBase<float>::Scale(v11, v14 / v15);
    kaldi::CuVectorBase<float>::Scale(a1 + 120, v14 / v15);
    kaldi::CuVectorBase<float>::Scale(a1 + 152, v14 / v15);
    float v16 = *(float *)(a1 + 48) * 0.9;
    *(float *)(a1 + 48) = v16;
    kaldi::CuMatrixBase<float>::SetZero(v10);
    kaldi::CuVectorBase<float>::SetZero(a1 + 232);
    kaldi::CuVectorBase<float>::SetZero(a1 + 264);
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Mismatch between pos_vis and neg_vis variances, ", 48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"danger of weight explosion. a) Reducing weights with scale ", 59);
      uint64_t v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" b) Lowering learning rate to ", 30);
      std::string v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" [pos_vis_std:", 14);
      uint64_t v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)",neg_vis_std:", 13);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"]", 1);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    }
  }
  else
  {
    float v23 = *(float *)(a1 + 48);
    float v22 = *(float *)(a1 + 52);
    float v24 = *(float *)(a1 + 68);
    float v25 = (float)*(int *)(a2 + 20);
    float v26 = (float)-v23 / v25;
    kaldi::CuMatrixBase<float>::AddMatMat(v10, a5, CblasTrans, a4, CblasNoTrans, v26, v22);
    float v27 = v23 / v25;
    kaldi::CuMatrixBase<float>::AddMatMat(v10, a3, CblasTrans, a2, CblasNoTrans, v27, 1.0);
    kaldi::CuMatrixBase<float>::AddMat(v10, v11, 111, -(float)(v23 * v24), 1.0);
    kaldi::CuMatrixBase<float>::AddMat(v11, v10, 111, 1.0, 1.0);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 232, a4, v26, v22);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 232, a2, v27, 1.0);
    kaldi::CuVectorBase<float>::AddVec(a1 + 120, a1 + 232, 1.0, 1.0);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 264, a5, v26, v22);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 264, a3, v27, 1.0);
    kaldi::CuVectorBase<float>::AddVec(a1 + 152, a1 + 264, 1.0, 1.0);
  }
}

void sub_1B1EFF484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::Rbm::VisType(kaldi::nnet1::Rbm *this)
{
  return *((unsigned int *)this + 74);
}

uint64_t kaldi::nnet1::Rbm::HidType(kaldi::nnet1::Rbm *this)
{
  return *((unsigned int *)this + 75);
}

void *kaldi::nnet1::Rbm::WriteAsNnet(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)0x101, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  kaldi::CuMatrixBase<float>::Write(a1 + 72, a2, a3, 0);
  kaldi::CuVectorBase<float>::Write(a1 + 152, a2, a3);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
  if (result)
  {
    if (a3) {
      return result;
    }
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)0x204, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteBasicType<int>(a2, a3);
  uint64_t result = (void *)kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0) {
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  return result;
}

void sub_1B1EFF604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::MultiSoftmax::Copy(kaldi::nnet1::MultiSoftmax *this)
{
}

void sub_1B1EFF688(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1091C4033AB46EFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MultiSoftmax::GetType(kaldi::nnet1::MultiSoftmax *this)
{
  return 522;
}

void kaldi::nnet1::MultiSoftmax::InitData(std::vector<int> *this, uint64_t *a2)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v4 = a2 + 4;
  uint64_t v5 = this + 2;
  while ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v13);
    if (SHIBYTE(v15) < 0)
    {
      if (v14 != 8) {
        goto LABEL_13;
      }
      uint64_t v6 = v13;
    }
    else
    {
      if (SHIBYTE(v15) != 8) {
        goto LABEL_13;
      }
      uint64_t v6 = (void **)&v13;
    }
    if (*v6 != (void *)0x3E736D6944534D3CLL)
    {
LABEL_13:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unknown token ", 14);
      if (v15 >= 0) {
        int v8 = (void **)&v13;
      }
      else {
        int v8 = v13;
      }
      if (v15 >= 0) {
        uint64_t v9 = HIBYTE(v15);
      }
      else {
        uint64_t v9 = v14;
      }
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (MSDims)", 9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    kaldi::ReadIntegerVector<int>(a2, 0, v5, 0, 0, 0, 0);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  kaldi::nnet1::BlockSoftmax::InitOffset(this);
  if (SHIBYTE(v15) < 0) {
    operator delete(v13);
  }
}

void sub_1B1EFF830(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 49) < 0) {
    operator delete(*(void **)(v1 - 72));
  }
  _Unwind_Resume(a1);
}

int *kaldi::nnet1::MultiSoftmax::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111);
}

uint64_t kaldi::nnet1::Recurrent::HistoryStateSize(kaldi::nnet1::Recurrent *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
}

void kaldi::nnet1::Recurrent::ResetHistoryState(void *a1, void *a2, uint64_t a3, unsigned int a4)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  unint64_t v8 = a2[1];
  *(void *)(a1[1] + 48 * a4 + 32) = a3;
  if (v8)
  {
    for (unint64_t i = 0; i < v8; ++i)
    {
      if ((*(void *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i))
      {
        uint64_t v10 = a1[1] + 48 * a4;
        uint64_t v11 = *(void *)(v10 + 8) + 4 * *(_DWORD *)(v10 + 24) * (int)i;
        unsigned int v12 = *(_DWORD *)(v10 + 16);
        uint64_t v13 = *(void *)(v10 + 32);
        v14[1] = v11;
        v14[0] = &unk_1F0A472D0;
        v14[2] = v12;
        v14[3] = v13;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v14);
        unint64_t v8 = a2[1];
      }
    }
  }
}

void kaldi::nnet1::Recurrent::ResetHistoryState(kaldi::nnet1::Recurrent *this)
{
  (*(void (**)(kaldi::nnet1::Recurrent *))(*(void *)this + 88))(this);
  for (uint64_t i = *((void *)this + 1); i != *((void *)this + 2); i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

int *kaldi::nnet1::Recurrent::GetHistoryState(uint64_t a1, int32x2_t *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1, 0);
  uint64_t v7 = *(void *)(a1 + 8) + 48 * a3;
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, v7, 111);
}

void *kaldi::nnet1::Recurrent::GetHistoryState(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 8) + 48 * a4 + 16), 1);
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a4;
  uint64_t v9 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  unsigned int v10 = *(_DWORD *)(v8 + 16);
  uint64_t v11 = *(void *)(v8 + 32);
  v13[1] = v9;
  v13[0] = &unk_1F0A472D0;
  v13[2] = v10;
  void v13[3] = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v13);
}

int *kaldi::nnet1::Recurrent::SetHistoryState(void *a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v6 = (int *)(a1[1] + 48 * a3);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v6, a2, 111);
}

void *kaldi::nnet1::Recurrent::SetHistoryState(void *a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v8 = a1[1] + 48 * a4;
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  uint64_t v10 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  uint64_t v11 = *(void *)(v8 + 32);
  v13[1] = v10;
  v13[0] = &unk_1F0A472D0;
  v13[2] = v9;
  void v13[3] = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2);
}

void kaldi::nnet1::Recurrent::EnsureBuffers(kaldi::nnet1::Recurrent *this)
{
  if (!*((unsigned char *)this + 388))
  {
    if (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 8) != *(_DWORD *)((char *)this
                                                                                          + *(void *)(*(void *)this - 24)
                                                                                          + 12))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"this implementation only models the strict recurrent component, i.e, it requests the input ", 91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"and output dimensions be the same,  you set input/out dimension to ", 67);
      unsigned int v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" and ", 5);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    int v2 = *((_DWORD *)this + 20);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<unsigned int>::size_type v4 = v3;
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 42, v3);
    if (v3 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (*((_DWORD *)this + 24) + *((_DWORD *)this + 24) * *((_DWORD *)this + 25));
      uint64_t v7 = (char *)this + 12;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 1) + v5), *((unsigned int *)this + 24), *(unsigned int *)&v7[*(void *)(*(void *)this - 24)], 0, 0);
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 42) + v5), v6, *(unsigned int *)&v7[*(void *)(*(void *)this - 24)], 0, 0);
        v5 += 48;
      }
      while (48 * v4 != v5);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)this + 17, v4);
    *((unsigned char *)this + 388) = 1;
  }
}

void *kaldi::nnet1::Recurrent::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (void *)(a1 + 480);
  uint64_t v6 = *(void *)(a1 + 480);
  if (v6 == *(void *)(a1 + 488))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 480), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 504), *(int *)(a1 + 80));
    uint64_t v6 = *(void *)(a1 + 480);
  }
  kaldi::CuVector<float>::Resize(v6 + 32 * a3, *(unsigned int *)(a2 + 16), 1);
  uint64_t v8 = (void *)(*v5 + 32 * a3);
  return kaldi::CuVectorBase<float>::CopyFromVec(v8, a2);
}

void kaldi::nnet1::Recurrent::SetTrainOptions(kaldi::nnet1::Recurrent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  *((_WORD *)this + 194) = 0;
}

void kaldi::nnet1::Recurrent::Copy(kaldi::nnet1::Recurrent *this)
{
}

void sub_1B1EFFF24(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C408B51CE60);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::GetType(kaldi::nnet1::Recurrent *this)
{
  return 273;
}

void kaldi::nnet1::Recurrent::InitData(int32x2_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  float v78 = 2.0;
  int v79 = -1073741824;
  int v77 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v76);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[19].u32[1], &v75);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[48].u32[0], &v74);
  int v73 = -1;
  memset(v72, 0, sizeof(v72));
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_152;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v72);
    if ((SHIBYTE(v72[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v72[2]))
      {
        case 9:
          BOOL v6 = v72[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v72[1]) == 62;
          uint64_t v7 = (float *)&a1[50];
          if (!v6)
          {
            BOOL v8 = v72[0] == (void *)0x6461724778614D3CLL && LOBYTE(v72[1]) == 62;
            uint64_t v7 = (float *)&a1[19];
            if (!v8) {
              goto LABEL_185;
            }
          }
          goto LABEL_109;
        case 0xA:
          if (v72[0] != (void *)0x61654D736169423CLL || LOWORD(v72[1]) != 15982) {
            goto LABEL_185;
          }
          goto LABEL_75;
        case 0xB:
          if (v72[0] != (void *)0x6E6152736169423CLL || *(void **)((char *)v72 + 3) != (void *)0x3E65676E61527361) {
            goto LABEL_185;
          }
          goto LABEL_55;
        case 0xC:
          if (v72[0] == (void *)0x536D6F646E61523CLL && LODWORD(v72[1]) == 1046766949) {
            goto LABEL_143;
          }
          uint64_t v36 = v72;
          goto LABEL_147;
        case 0xD:
          if (v72[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v72 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_185;
          }
          goto LABEL_108;
        case 0xE:
          if (v72[0] != (void *)0x656E696C6E6F4E3CLL || *(void **)((char *)v72 + 6) != (void *)0x3E7974697261656ELL) {
            goto LABEL_185;
          }
          goto LABEL_136;
        case 0xF:
          BOOL v23 = v72[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v72 + 7) == (void *)0x3E66656F43657461;
          uint64_t v7 = (float *)&a1[49];
          if (!v23) {
            goto LABEL_185;
          }
          goto LABEL_109;
        case 0x12:
          if (v72[0] != (void *)0x6E6569646172473CLL
            || v72[1] != (void *)0x7079546D726F4E74
            || LOWORD(v72[2]) != 15973)
          {
            goto LABEL_185;
          }
          goto LABEL_64;
        case 0x13:
          BOOL v12 = v72[0] == (void *)0x61654C736169423CLL
             && v72[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v72[1] + 3) == (void *)0x3E66656F43657461;
          uint64_t v7 = (float *)&a1[49] + 1;
          if (v12) {
            goto LABEL_109;
          }
          if (v72[0] != (void *)0x61725474696E493CLL
            || v72[1] != (void *)0x79546D726F66736ELL
            || *(void **)((char *)&v72[1] + 3) != (void *)0x3E657079546D726FLL)
          {
            goto LABEL_185;
          }
          goto LABEL_96;
        default:
          goto LABEL_185;
      }
    }
    switch((unint64_t)v72[1])
    {
      case 9uLL:
        BOOL v9 = *(void *)v72[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v72[0] + 8) == 62;
        uint64_t v7 = (float *)&a1[50];
        if (!v9)
        {
          BOOL v10 = *(void *)v72[0] == 0x6461724778614D3CLL && *((unsigned char *)v72[0] + 8) == 62;
          uint64_t v7 = (float *)&a1[19];
          if (!v10) {
            goto LABEL_129;
          }
        }
        goto LABEL_109;
      case 0xAuLL:
        if (*(void *)v72[0] != 0x61654D736169423CLL || *((_WORD *)v72[0] + 4) != 15982) {
          goto LABEL_129;
        }
LABEL_75:
        uint64_t v7 = (float *)&v79;
        goto LABEL_109;
      case 0xBuLL:
        if (*(void *)v72[0] != 0x6E6152736169423CLL || *(void *)((char *)v72[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_129;
        }
LABEL_55:
        uint64_t v7 = &v78;
        goto LABEL_109;
      case 0xCuLL:
        goto LABEL_138;
      case 0xDuLL:
        if (*(void *)v72[0] != 0x74536D617261503CLL || *(void *)((char *)v72[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_185;
        }
LABEL_108:
        uint64_t v7 = (float *)&v77;
        goto LABEL_109;
      case 0xEuLL:
        goto LABEL_131;
      case 0xFuLL:
        BOOL v33 = *(void *)v72[0] == 0x61526E7261654C3CLL && *(void *)((char *)v72[0] + 7) == 0x3E66656F43657461;
        uint64_t v7 = (float *)&a1[49];
        if (!v33) {
          goto LABEL_129;
        }
        goto LABEL_109;
      case 0x12uLL:
        if (*(void *)v72[0] == 0x6E6569646172473CLL
          && *((void *)v72[0] + 1) == 0x7079546D726F4E74
          && *((_WORD *)v72[0] + 8) == 15973)
        {
LABEL_64:
          uint64_t v20 = &v75;
          goto LABEL_137;
        }
LABEL_129:
        if (v72[1] == (void *)12)
        {
LABEL_138:
          if (*(void *)v72[0] != 0x536D6F646E61523CLL || *((_DWORD *)v72[0] + 2) != 1046766949) {
            goto LABEL_145;
          }
LABEL_143:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73);
          goto LABEL_144;
        }
        if (v72[1] != (void *)14) {
          goto LABEL_185;
        }
LABEL_131:
        if (*(void *)v72[0] != 0x656E696C6E6F4E3CLL || *(void *)((char *)v72[0] + 6) != 0x3E7974697261656ELL) {
          goto LABEL_185;
        }
LABEL_136:
        uint64_t v20 = &v74;
        goto LABEL_137;
      case 0x13uLL:
        BOOL v25 = *(void *)v72[0] == 0x61654C736169423CLL
           && *((void *)v72[0] + 1) == 0x6F43657461526E72
           && *(void *)((char *)v72[0] + 11) == 0x3E66656F43657461;
        uint64_t v7 = (float *)&a1[49] + 1;
        if (v25)
        {
LABEL_109:
          kaldi::ReadBasicType<float>(a2, 0, v7);
          goto LABEL_144;
        }
        if (*(void *)v72[0] == 0x61725474696E493CLL
          && *((void *)v72[0] + 1) == 0x79546D726F66736ELL
          && *(void *)((char *)v72[0] + 11) == 0x3E657079546D726FLL)
        {
LABEL_96:
          uint64_t v20 = &v76;
LABEL_137:
          kaldi::ReadToken(a2, 0, (uint64_t)v20);
LABEL_144:
          std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
          continue;
        }
LABEL_145:
        if (v72[1] != (void *)12) {
          goto LABEL_185;
        }
        uint64_t v36 = (void **)v72[0];
LABEL_147:
        int v37 = *v36;
        int v38 = *((_DWORD *)v36 + 2);
        if (v37 != (void *)0x6E6F706D6F432F3CLL || v38 != 1047817829)
        {
LABEL_185:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
          uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v72[2]) >= 0) {
            float v59 = v72;
          }
          else {
            float v59 = (void **)v72[0];
          }
          if (SHIBYTE(v72[2]) >= 0) {
            uint64_t v60 = HIBYTE(v72[2]);
          }
          else {
            uint64_t v60 = (uint64_t)v72[1];
          }
          uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
          uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", a typo in config?", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" (Nonlinearity|ParamStddev|BiasMean|BiasRange|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed|MaxGrad|InitTransformType|GradientNormType)", 140);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v68);
        }
LABEL_152:
        a1[48].i32[0] = kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v74);
        int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v76);
        a1[19].i32[1] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v75);
        if (v73 >= 1) {
          kaldi::UniformRandomNumber::SetRandomSeeds(a3, v73);
        }
        kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v68, a3);
        kaldi::Matrix<float>::Matrix((uint64_t)v66, *(unsigned int *)((char *)&a1[1].u32[1] + *(void *)(*(void *)a1 - 24)), *(unsigned int *)((char *)a1[1].u32 + *(void *)(*(void *)a1 - 24)), 0, 0);
        int v42 = (char *)&a1[1] + 4;
        int32x2_t v41 = *a1;
        if (*(int *)((char *)&a1[1].i32[1] + *(void *)(*(void *)a1 - 24)) >= 1)
        {
          uint64_t v43 = 0;
          uint64_t v44 = a1 + 1;
          while (1)
          {
            uint64_t v45 = *(void *)(*(void *)&v41 - 24);
            if (*(int *)((char *)v44->i32 + v45) >= 1) {
              break;
            }
LABEL_168:
            if (++v43 >= *(int *)&v42[v45]) {
              goto LABEL_169;
            }
          }
          uint64_t v46 = 0;
          while (2)
          {
            if (inited)
            {
              if (inited != 2)
              {
                if (inited == 1)
                {
                  float v47 = *(float *)&v77;
                  float v48 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v47 + v47);
                  break;
                }
LABEL_167:
                ++v46;
                uint64_t v45 = *(void *)(*(void *)&v41 - 24);
                if (v46 >= *(int *)((char *)v44->i32 + v45)) {
                  goto LABEL_168;
                }
                continue;
              }
              float v49 = *(float *)&v77;
              kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v68, 0);
              float v48 = v49 * v50;
            }
            else if (v43 == v46)
            {
              float v48 = 1.0;
            }
            else
            {
              float v48 = 0.0;
            }
            break;
          }
          *((float *)v66[0] + (int)v43 * v67 + v46) = v48;
          int32x2_t v41 = *a1;
          goto LABEL_167;
        }
LABEL_169:
        kaldi::CuMatrix<float>::operator=(a1 + 20, (int *)v66);
        uint64_t v51 = *(unsigned int *)((char *)&a1[1].u32[1] + *(void *)(*(void *)a1 - 24));
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        float v63 = 0;
        kaldi::Vector<float>::Resize((void **)&v63, v51, 0);
        if (*(int *)&v42[*(void *)(*(void *)a1 - 24)] < 1)
        {
          uint64_t v56 = v64;
        }
        else
        {
          uint64_t v52 = 0;
          do
          {
            float v53 = *(float *)&v79;
            float v54 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
            float v55 = v53 + (v54 + -0.5) * v78;
            uint64_t v56 = v64;
            v63[v52++] = v55;
          }
          while (v52 < *(int *)&v42[*(void *)(*(void *)a1 - 24)]);
        }
        uint64_t v57 = a1 + 26;
        kaldi::CuVector<float>::Resize((uint64_t)v57, v56, 1);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(v57, (uint64_t)&v63);
        kaldi::Vector<float>::Destroy((uint64_t)&v63);
        kaldi::Matrix<float>::~Matrix((uint64_t)v66);
        if (__p)
        {
          uint64_t v71 = __p;
          operator delete(__p);
        }
        v66[0] = (void **)&v69;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v66);
        if (SHIBYTE(v72[2]) < 0) {
          operator delete(v72[0]);
        }
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        return;
      default:
        goto LABEL_185;
    }
  }
}

void sub_1B1F009A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (*(char *)(v19 - 217) < 0) {
    operator delete(*(void **)(v19 - 240));
  }
  if (*(char *)(v19 - 185) < 0) {
    operator delete(*(void **)(v19 - 208));
  }
  if (*(char *)(v19 - 161) < 0) {
    operator delete(*(void **)(v19 - 184));
  }
  if (*(char *)(v19 - 137) < 0) {
    operator delete(*(void **)(v19 - 160));
  }
  _Unwind_Resume(exception_object);
}

double kaldi::nnet1::Recurrent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v35, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v35);
    if ((SHIBYTE(v35[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v35[2]))
      {
        case 9:
          goto LABEL_58;
        case 0xE:
          goto LABEL_4;
        case 0xF:
          BOOL v26 = v35[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v35 + 7) == (void *)0x3E66656F43657461;
          BOOL v10 = (float *)(a1 + 392);
          if (!v26) {
            goto LABEL_93;
          }
          goto LABEL_83;
        case 0x12:
          goto LABEL_64;
        case 0x13:
          BOOL v19 = v35[0] == (void *)0x61654C736169423CLL
             && v35[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v35[1] + 3) == (void *)0x3E66656F43657461;
          BOOL v10 = (float *)(a1 + 396);
          if (v19) {
            goto LABEL_83;
          }
          switch(HIBYTE(v35[2]))
          {
            case 9u:
              goto LABEL_58;
            case 0x12u:
LABEL_64:
              if (v35[0] == (void *)0x6E6569646172473CLL
                && v35[1] == (void *)0x7079546D726F4E74
                && LOWORD(v35[2]) == 15973)
              {
                goto LABEL_89;
              }
              break;
            case 0xEu:
LABEL_4:
              if (v35[0] == (void *)0x656E696C6E6F4E3CLL && *(void **)((char *)v35 + 6) == (void *)0x3E7974697261656ELL) {
                goto LABEL_88;
              }
              if (HIBYTE(v35[2]) != 9) {
                goto LABEL_93;
              }
LABEL_58:
              BOOL v20 = v35[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v35[1]) == 62;
              BOOL v10 = (float *)(a1 + 400);
              if (v20) {
                goto LABEL_83;
              }
              break;
            default:
              goto LABEL_93;
          }
          if (HIBYTE(v35[2]) != 9) {
            goto LABEL_93;
          }
          uint64_t v17 = v35;
          break;
        default:
          goto LABEL_93;
      }
      goto LABEL_73;
    }
    BOOL v8 = v35[1];
    if (v35[1] != (void *)15
      || (*(void *)v35[0] == 0x61526E7261654C3CLL
        ? (BOOL v9 = *(void *)((char *)v35[0] + 7) == 0x3E66656F43657461)
        : (BOOL v9 = 0),
          BOOL v10 = (float *)(a1 + 392),
          !v9))
    {
      if (v35[1] == (void *)19)
      {
        BOOL v12 = *(void *)v35[0] == 0x61654C736169423CLL
           && *((void *)v35[0] + 1) == 0x6F43657461526E72
           && *(void *)((char *)v35[0] + 11) == 0x3E66656F43657461;
        BOOL v10 = (float *)(a1 + 396);
        if (v12) {
          goto LABEL_83;
        }
        BOOL v8 = v35[1];
      }
      if (v8 == (void *)14)
      {
        if (*(void *)v35[0] == 0x656E696C6E6F4E3CLL && *(void *)((char *)v35[0] + 6) == 0x3E7974697261656ELL)
        {
LABEL_88:
          std::string __p = 0;
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p);
          *(_DWORD *)(a1 + 384) = kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
          goto LABEL_90;
        }
        BOOL v8 = v35[1];
      }
      if (v8 != (void *)9) {
        goto LABEL_36;
      }
      BOOL v14 = *(void *)v35[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v35[0] + 8) == 62;
      BOOL v10 = (float *)(a1 + 400);
      if (!v14)
      {
        BOOL v8 = v35[1];
LABEL_36:
        if (v8 == (void *)18)
        {
          if (*(void *)v35[0] == 0x6E6569646172473CLL
            && *((void *)v35[0] + 1) == 0x7079546D726F4E74
            && *((_WORD *)v35[0] + 8) == 15973)
          {
LABEL_89:
            std::string __p = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
LABEL_90:
            if (SHIBYTE(v34) < 0) {
              operator delete(__p);
            }
            goto LABEL_84;
          }
          BOOL v8 = v35[1];
        }
        if (v8 != (void *)9) {
          goto LABEL_93;
        }
        uint64_t v17 = (void **)v35[0];
LABEL_73:
        BOOL v23 = *v17;
        int v24 = *((unsigned __int8 *)v17 + 8);
        BOOL v25 = v23 == (void *)0x6461724778614D3CLL && v24 == 62;
        BOOL v10 = (float *)(a1 + 152);
        if (!v25)
        {
LABEL_93:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::string v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"unrecognized config token ", 26);
          if (SHIBYTE(v35[2]) >= 0) {
            float v29 = v35;
          }
          else {
            float v29 = (void **)v35[0];
          }
          if (SHIBYTE(v35[2]) >= 0) {
            uint64_t v30 = HIBYTE(v35[2]);
          }
          else {
            uint64_t v30 = (uint64_t)v35[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
      }
    }
LABEL_83:
    kaldi::ReadBasicType<float>(a2, a3, v10);
LABEL_84:
    if (SHIBYTE(v35[2]) < 0) {
      operator delete(v35[0]);
    }
  }
  kaldi::CuMatrix<float>::Read(a1 + 160, a2, a3, a4);
  return kaldi::CuVector<float>::Read(a1 + 208, a2, a3);
}

void sub_1B1F00F30()
{
}

void *kaldi::nnet1::Recurrent::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<Nonlinearity>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1B1F010C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Recurrent::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v8 = a1 + 208;
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write(a1 + 160, a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(v8, a2, a3);
}

uint64_t kaldi::nnet1::Recurrent::NumParams(kaldi::nnet1::Recurrent *this)
{
  return (*((_DWORD *)this + 56) + *((_DWORD *)this + 44) * *((_DWORD *)this + 45));
}

const void **kaldi::nnet1::Recurrent::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  int v5 = *(_DWORD *)(a1 + 176) * *(_DWORD *)(a1 + 180);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = (char *)*a2;
  LODWORD(v9) = v5;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v8, a1 + 160);
  int v6 = *(_DWORD *)(a1 + 224);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = (char *)*a2 + 4 * v5;
  LODWORD(v9) = v6;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 208), (uint64_t)&v8);
}

void *kaldi::nnet1::Recurrent::SetParams(_DWORD *a1, char **a2)
{
  (*(void (**)(_DWORD *))(*(void *)a1 + 184))(a1);
  int v4 = a1[44] * a1[45];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = *a2;
  LODWORD(v8) = v4;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 40), &v7);
  int v5 = a1[56];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = &(*a2)[4 * v4];
  LODWORD(v8) = v5;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 52, (uint64_t)&v7);
}

float kaldi::nnet1::Recurrent::SumParams(kaldi::nnet1::Recurrent *this)
{
  float v2 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 160);
  double v3 = kaldi::CuVectorBase<float>::Sum((uint64_t)this + 208);
  return v2 + *(float *)&v3;
}

uint64_t kaldi::nnet1::Recurrent::PerturbParams(kaldi::nnet1::Recurrent *this, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix(v7, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)v7, 111, a2, 1.0);
  uint64_t v4 = *((unsigned int *)this + 56);
  v6[0] = &unk_1F0A517C0;
  memset(&v6[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v6, v4, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 208, (uint64_t)v6, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1B1F013E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::Info(kaldi::nnet1::Recurrent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  (*(void (**)(kaldi::nnet1::Recurrent *, void *, void))(*(void *)this + 168))(this, v14, 0);
  float v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 160);
  if ((v13 & 0x80u) == 0) {
    double v3 = v12;
  }
  else {
    double v3 = (void **)v12[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v4 = v13;
  }
  else {
    uint64_t v4 = (uint64_t)v12[1];
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 208);
  if ((v11 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v8 = v11;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v13 < 0) {
    operator delete(v12[0]);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v14[1] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v16);
}

void sub_1B1F01618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::InfoGradient(kaldi::nnet1::Recurrent *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 388) && *((unsigned char *)this + 389))
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "\n  linearity_grad");
    kaldi::nnet1::MomentStatistics<float>((void *)this + 30);
    if ((v41 & 0x80u) == 0) {
      uint64_t v4 = v40;
    }
    else {
      uint64_t v4 = (void **)v40[0];
    }
    if ((v41 & 0x80u) == 0) {
      std::string::size_type v5 = v41;
    }
    else {
      std::string::size_type v5 = (std::string::size_type)v40[1];
    }
    int v6 = std::string::append(&v42, (const std::string::value_type *)v4, v5);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v43, ", lr-coef ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v39 & 0x80u) == 0) {
      uint64_t v10 = v38;
    }
    else {
      uint64_t v10 = (void **)v38[0];
    }
    if ((v39 & 0x80u) == 0) {
      std::string::size_type v11 = v39;
    }
    else {
      std::string::size_type v11 = (std::string::size_type)v38[1];
    }
    BOOL v12 = std::string::append(&v44, (const std::string::value_type *)v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    BOOL v14 = std::string::append(&v45, ", max-norm ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v37 & 0x80u) == 0) {
      uint64_t v16 = v36;
    }
    else {
      uint64_t v16 = (void **)v36[0];
    }
    if ((v37 & 0x80u) == 0) {
      std::string::size_type v17 = v37;
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v36[1];
    }
    uint64_t v18 = std::string::append(&v46, (const std::string::value_type *)v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    BOOL v20 = std::string::append(&v47, "\n  bias_grad");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::MomentStatistics<float>((void *)this + 33);
    if ((v35 & 0x80u) == 0) {
      float v22 = v34;
    }
    else {
      float v22 = (void **)v34[0];
    }
    if ((v35 & 0x80u) == 0) {
      std::string::size_type v23 = v35;
    }
    else {
      std::string::size_type v23 = (std::string::size_type)v34[1];
    }
    int v24 = std::string::append(&v48, (const std::string::value_type *)v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    BOOL v26 = std::string::append(&v49, ", lr-coef ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v33 & 0x80u) == 0) {
      std::string v28 = __p;
    }
    else {
      std::string v28 = (void **)__p[0];
    }
    if ((v33 & 0x80u) == 0) {
      std::string::size_type v29 = v33;
    }
    else {
      std::string::size_type v29 = (std::string::size_type)__p[1];
    }
    uint64_t v30 = std::string::append(&v50, (const std::string::value_type *)v28, v29);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v30->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if ((char)v33 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if ((char)v35 < 0) {
      operator delete(v34[0]);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if ((char)v37 < 0) {
      operator delete(v36[0]);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if ((char)v39 < 0) {
      operator delete(v38[0]);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if ((char)v41 < 0) {
      operator delete(v40[0]);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  linearity_grad is uninitialized\n  bias_grad is uninitialized");
  }
}

void sub_1B1F019D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v64 - 41) < 0) {
    operator delete(*(void **)(v64 - 64));
  }
  if (*(char *)(v64 - 73) < 0) {
    operator delete(*(void **)(v64 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v64 - 105) < 0) {
    operator delete(*(void **)(v64 - 128));
  }
  if (*(char *)(v64 - 137) < 0) {
    operator delete(*(void **)(v64 - 160));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v64 - 169) < 0) {
    operator delete(*(void **)(v64 - 192));
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void sub_1B1F01AFC()
{
}

void sub_1B1F01B04()
{
}

void sub_1B1F01B0C()
{
}

void sub_1B1F01B14()
{
}

void sub_1B1F01B1C()
{
}

uint64_t kaldi::nnet1::Recurrent::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 388) = 0;
  return result;
}

void kaldi::nnet1::Recurrent::PropagateFnc(uint64_t a1, uint64_t a2, int32x2_t *a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v8 = *(unsigned int *)(a1 + 96);
  uint64_t v9 = *(unsigned int *)(a1 + 100);
  unsigned int v10 = *(_DWORD *)(a2 + 20);
  int32x2_t v11 = a3[4];
  uint64_t v12 = a4;
  uint64_t v13 = *(void *)(a1 + 336);
  BOOL v14 = (int32x2_t *)(v13 + 48 * a4);
  void v14[4] = v11;
  uint64_t v15 = *(void *)(a1 + 8);
  *(int32x2_t *)(v15 + 48 * a4 + 32) = v11;
  uint64_t v16 = *(void *)(a1 + 480);
  if (*(void *)(a1 + 488) == v16 || *(int *)(v16 + 32 * a4 + 16) < 1)
  {
    int v75 = 0;
  }
  else
  {
    std::string::size_type v17 = (int32x2_t *)(*(void *)(a1 + 504) + 48 * a4);
    v17[4] = v11;
    int v75 = 1;
    kaldi::CuMatrix<float>::Resize(v17, v8, v14[2].u32[0], 1, 0);
    uint64_t v13 = *(void *)(a1 + 336);
    uint64_t v15 = *(void *)(a1 + 8);
  }
  uint64_t v18 = v13 + 48 * a4;
  unsigned int v19 = *(_DWORD *)(v18 + 16);
  uint64_t v20 = *(void *)(v18 + 32);
  *(void *)&long long v78 = *(void *)(v18 + 8);
  *((void *)&v78 + 1) = __PAIR64__(v8, v19);
  *(void *)&long long v79 = *(void *)(v18 + 24);
  *((void *)&v79 + 1) = v20;
  int v77 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v77, v15 + 48 * a4, 111);
  std::string v74 = (int *)a3;
  int v77 = &unk_1F0A472A0;
  long long v78 = 0u;
  long long v79 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v77);
  uint64_t v21 = *(void *)(a1 + 336) + 48 * a4;
  unsigned int v22 = *(_DWORD *)(v21 + 16);
  unsigned int v23 = *(_DWORD *)(v21 + 24);
  uint64_t v24 = *(void *)(v21 + 8) + 4 * (int)(v23 * v8);
  unsigned int v25 = *(_DWORD *)(v21 + 28) - v23 * v8;
  uint64_t v26 = *(void *)(v21 + 32);
  *((void *)&v78 + 1) = __PAIR64__(v10, v22);
  *(void *)&long long v79 = __PAIR64__(v25, v23);
  *((void *)&v79 + 1) = v26;
  int v77 = &unk_1F0A472A0;
  *(void *)&long long v78 = v24;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v77, a2, 111);
  int v77 = &unk_1F0A472A0;
  long long v78 = 0u;
  long long v79 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v77);
  uint64_t v27 = *(void *)(a1 + 336) + 48 * a4;
  unsigned int v28 = *(_DWORD *)(v27 + 16);
  unsigned int v29 = *(_DWORD *)(v27 + 24);
  uint64_t v30 = *(void *)(v27 + 8) + 4 * (int)(v29 * v8);
  unsigned int v31 = *(_DWORD *)(v27 + 28) - v29 * v8;
  uint64_t v32 = *(void *)(v27 + 32);
  *((void *)&v78 + 1) = __PAIR64__(v10, v28);
  unsigned int v73 = v10;
  *(void *)&long long v79 = __PAIR64__(v31, v29);
  *((void *)&v79 + 1) = v32;
  int v77 = &unk_1F0A472A0;
  *(void *)&long long v78 = v30;
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v77, a1 + 208, 1.0, 1.0);
  int v77 = &unk_1F0A472A0;
  long long v78 = 0u;
  long long v79 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v77);
  if ((int)v9 >= 1)
  {
    uint64_t v33 = 0;
    unsigned int v34 = 0;
    unint64_t v35 = 1;
    do
    {
      uint64_t v36 = *(void *)(a1 + 336);
      uint64_t v37 = v36 + 48 * (int)v12;
      unsigned int v38 = *(_DWORD *)(v37 + 16);
      unsigned int v39 = *(_DWORD *)(v37 + 24);
      int v40 = v39 * (v8 + v34);
      uint64_t v41 = *(void *)(v37 + 8) + 4 * v40;
      unsigned int v42 = *(_DWORD *)(v37 + 28) - v40;
      uint64_t v43 = *(void *)(v37 + 32);
      *((void *)&v81 + 1) = __PAIR64__(v8, v38);
      *(void *)&long long v82 = __PAIR64__(v42, v39);
      *((void *)&v82 + 1) = v43;
      uint64_t v80 = &unk_1F0A472A0;
      *(void *)&long long v81 = v41;
      if (v35 > 1) {
        int v44 = v75;
      }
      else {
        int v44 = 0;
      }
      unsigned int v45 = v34;
      if (v44 == 1)
      {
        uint64_t v46 = *(void *)(a1 + 504) + 48 * (int)v12;
        uint64_t v47 = *(void *)(a1 + 480) + 32 * v12;
        *((void *)&v78 + 1) = 0;
        int v77 = &unk_1F0A472D0;
        *(void *)&long long v78 = *(void *)(v47 + 8) + v33;
        DWORD2(v78) = v8;
        *(void *)&long long v79 = *(void *)(v47 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows(v46, (uint64_t)&v80, (uint64_t)&v77, 0);
        unsigned int v45 = (v35 - 1) * v8;
        uint64_t v36 = *(void *)(a1 + 336);
      }
      uint64_t v48 = v36 + 48 * (int)v12;
      unsigned int v49 = *(_DWORD *)(v48 + 16);
      unsigned int v50 = *(_DWORD *)(v48 + 24);
      uint64_t v51 = *(void *)(v48 + 8) + 4 * (int)(v50 * v45);
      int v52 = *(_DWORD *)(v48 + 28) - v50 * v45;
      uint64_t v53 = *(void *)(v48 + 32);
      *((void *)&v78 + 1) = __PAIR64__(v8, v49);
      *(void *)&long long v79 = __PAIR64__(v52, v50);
      *((void *)&v79 + 1) = v53;
      int v77 = &unk_1F0A472A0;
      *(void *)&long long v78 = v51;
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v80, (uint64_t)&v77, CblasNoTrans, a1 + 160, CblasTrans, 1.0, 1.0);
      int v77 = &unk_1F0A472A0;
      long long v78 = 0u;
      long long v79 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v77);
      if (v44)
      {
        uint64_t v54 = *(void *)(a1 + 504) + 48 * (int)v12;
        uint64_t v55 = *(void *)(a1 + 480) + 32 * v12;
        *((void *)&v78 + 1) = 0;
        int v77 = &unk_1F0A472D0;
        *(void *)&long long v78 = *(void *)(v55 + 8) + 4 * v45;
        DWORD2(v78) = v8;
        *(void *)&long long v79 = *(void *)(v55 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v80, v54, (uint64_t)&v77, 0);
      }
      int v56 = *(_DWORD *)(a1 + 384);
      switch(v56)
      {
        case 520:
          kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v80, 0.0);
          break;
        case 517:
          kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v80, (uint64_t)&v80);
          break;
        case 516:
          kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v80, (uint64_t)&v80);
          break;
        default:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
          uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Unknown nonlinearity type: ", 27);
          kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77);
      }
      uint64_t v80 = &unk_1F0A472A0;
      long long v81 = 0u;
      long long v82 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v80);
      ++v35;
      v34 += v8;
      v33 += 4 * v8;
    }
    while (v9 + 1 != v35);
  }
  uint64_t v57 = *(void *)(a1 + 336) + 48 * (int)v12;
  unsigned int v58 = *(_DWORD *)(v57 + 16);
  unsigned int v59 = *(_DWORD *)(v57 + 24);
  uint64_t v60 = *(void *)(v57 + 8) + 4 * (int)(v59 * v8);
  unsigned int v61 = *(_DWORD *)(v57 + 28) - v59 * v8;
  uint64_t v62 = *(void *)(v57 + 32);
  *((void *)&v78 + 1) = __PAIR64__(v73, v58);
  *(void *)&long long v79 = __PAIR64__(v61, v59);
  *((void *)&v79 + 1) = v62;
  int v77 = &unk_1F0A472A0;
  *(void *)&long long v78 = v60;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v74, (uint64_t)&v77, 111);
  int v77 = &unk_1F0A472A0;
  long long v78 = 0u;
  long long v79 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v77);
  float v63 = (int *)(*(void *)(a1 + 8) + 48 * v12);
  uint64_t v64 = *(void *)(a1 + 336) + 48 * v12;
  unsigned int v65 = *(_DWORD *)(v64 + 16);
  int v66 = *(_DWORD *)(v64 + 24);
  int v67 = *(_DWORD *)(v64 + 28);
  uint64_t v68 = *(void *)(v64 + 8) + 4 * (int)(v66 * v73);
  uint64_t v69 = *(void *)(v64 + 32);
  *(void *)&long long v78 = v68;
  *((void *)&v78 + 1) = __PAIR64__(v8, v65);
  LODWORD(v79) = v66;
  DWORD1(v79) = v67 - v66 * v73;
  *((void *)&v79 + 1) = v69;
  int v77 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v63, (uint64_t)&v77, 111);
  int v77 = &unk_1F0A472A0;
  long long v78 = 0u;
  long long v79 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v77);
}

void sub_1B1F02210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _OWORD *a15, uint64_t a16)
{
  *(void *)(v16 - 128) = a16;
  *a15 = 0u;
  a15[1] = 0u;
  JUMPOUT(0x1B1F02254);
}

void kaldi::nnet1::Recurrent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v10 = &unk_1F0A472A0;
  *(void *)&long long v11 = v4;
  *((void *)&v11 + 1) = v3 | 0x100000000;
  LODWORD(v12) = v3;
  DWORD1(v12) = v3;
  *((void *)&v12 + 1) = *(void *)(a2 + 24);
  unsigned int v5 = *(_DWORD *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 8);
  long long v7 = &unk_1F0A472A0;
  *(void *)&long long v8 = v6;
  *((void *)&v8 + 1) = v5 | 0x100000000;
  LODWORD(v9) = v5;
  DWORD1(v9) = v5;
  *((void *)&v9 + 1) = *(void *)(a3 + 24);
  (*(void (**)(uint64_t, void **, void **, void))(*(void *)a1 + 248))(a1, &v10, &v7, 0);
  long long v7 = &unk_1F0A472A0;
  long long v8 = 0u;
  long long v9 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v7);
  unsigned int v10 = &unk_1F0A472A0;
  long long v11 = 0u;
  long long v12 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v10);
}

void sub_1B1F02370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = v14;
  *uint64_t v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _OWORD *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, int a6)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::nnet1::Recurrent::EnsureTrainingBuffers((kaldi::nnet1::Recurrent *)a1);
  if (a5) {
    uint64_t v10 = (uint64_t)a5;
  }
  else {
    uint64_t v10 = a4;
  }
  int32x2_t v11 = *(int32x2_t *)(v10 + 32);
  uint64_t v12 = a6;
  *(int32x2_t *)(*(void *)(a1 + 336) + 48 * a6 + 32) = v11;
  uint64_t v13 = *(void *)(a1 + 360);
  BOOL v14 = (int32x2_t *)(v13 + 48 * a6);
  void v14[4] = v11;
  uint64_t v15 = *(unsigned int *)(a1 + 96);
  uint64_t v63 = *(unsigned int *)(a1 + 100);
  uint64_t v16 = *(void *)(a1 + 480);
  uint64_t v60 = a5;
  if (*(void *)(a1 + 488) == v16 || *(int *)(v16 + 32 * v12 + 16) < 1)
  {
    int v61 = 0;
  }
  else
  {
    std::string::size_type v17 = (int32x2_t *)(*(void *)(a1 + 504) + 48 * v12);
    v17[4] = v11;
    int v61 = 1;
    kaldi::CuMatrix<float>::Resize(v17, v15, v14[2].u32[0], 1, 0);
    uint64_t v13 = *(void *)(a1 + 360);
    int32x2_t v11 = *(int32x2_t *)(v13 + 48 * v12 + 32);
  }
  uint64_t v18 = v13 + 48 * (int)v12;
  int v19 = *(_DWORD *)(v18 + 16);
  *(void *)&long long v66 = *(void *)(v18 + 8);
  DWORD2(v66) = v19;
  HIDWORD(v66) = v15 * v63;
  *(void *)&long long v67 = *(void *)(v18 + 24);
  *((int32x2_t *)&v67 + 1) = v11;
  unsigned int v65 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v65, a4, 111);
  unsigned int v65 = &unk_1F0A472A0;
  long long v66 = 0u;
  long long v67 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v65);
  uint64_t v20 = *(void *)(a1 + 360) + 48 * (int)v12;
  unsigned int v21 = *(_DWORD *)(v20 + 16);
  uint64_t v22 = *(void *)(v20 + 8);
  int v23 = *(_DWORD *)(v20 + 24);
  int v24 = *(_DWORD *)(v20 + 28);
  int v62 = v15 * v63;
  uint64_t v25 = *(void *)(v20 + 32);
  *((void *)&v66 + 1) = __PAIR64__(v15, v21);
  LODWORD(v67) = v23;
  DWORD1(v67) = v24 - v23 * v15 * v63;
  *((void *)&v67 + 1) = v25;
  unsigned int v65 = &unk_1F0A472A0;
  *(void *)&long long v66 = v22 + 4 * v23 * (int)v15 * (int)v63;
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v65);
  unsigned int v65 = &unk_1F0A472A0;
  long long v66 = 0u;
  long long v67 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v65);
  if ((int)v63 >= 1)
  {
    int v26 = 0;
    uint64_t v27 = v63;
    do
    {
      uint64_t v28 = *(void *)(a1 + 336) + 48 * v12;
      unsigned int v29 = v62 + v26;
      unsigned int v30 = *(_DWORD *)(v28 + 16);
      unsigned int v31 = *(_DWORD *)(v28 + 24);
      uint64_t v32 = *(void *)(v28 + 8) + 4 * (int)(v31 * (v62 + v26));
      int v33 = *(_DWORD *)(v28 + 28) - v31 * (v62 + v26);
      uint64_t v34 = *(void *)(v28 + 32);
      *((void *)&v72 + 1) = __PAIR64__(v15, v30);
      *(void *)&long long v73 = __PAIR64__(v33, v31);
      *((void *)&v73 + 1) = v34;
      uint64_t v71 = &unk_1F0A472A0;
      *(void *)&long long v72 = v32;
      uint64_t v35 = *(void *)(a1 + 360);
      uint64_t v36 = v35 + 48 * v12;
      LODWORD(v32) = *(_DWORD *)(v36 + 16);
      unsigned int v37 = *(_DWORD *)(v36 + 24);
      int v38 = v37 * (v15 * (v63 - 1) + v26);
      uint64_t v39 = *(void *)(v36 + 8) + 4 * v38;
      unsigned int v40 = *(_DWORD *)(v36 + 28) - v38;
      uint64_t v41 = *(void *)(v36 + 32);
      *((void *)&v69 + 1) = __PAIR64__(v15, v32);
      *(void *)&long long v70 = __PAIR64__(v40, v37);
      *((void *)&v70 + 1) = v41;
      uint64_t v68 = &unk_1F0A472A0;
      *(void *)&long long v69 = v39;
      if (v27 < v63) {
        int v42 = v61;
      }
      else {
        int v42 = 0;
      }
      if (v42 == 1)
      {
        uint64_t v43 = *(void *)(a1 + 504) + 48 * (int)v12;
        uint64_t v44 = *(void *)(a1 + 480) + 32 * v12;
        *((void *)&v66 + 1) = 0;
        unsigned int v65 = &unk_1F0A472D0;
        *(void *)&long long v66 = *(void *)(v44 + 8) + 4 * v29;
        DWORD2(v66) = v15;
        *(void *)&long long v67 = *(void *)(v44 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows(v43, (uint64_t)&v68, (uint64_t)&v65, 0);
        uint64_t v35 = *(void *)(a1 + 360);
      }
      uint64_t v45 = v35 + 48 * (int)v12;
      unsigned int v46 = *(_DWORD *)(v45 + 16);
      unsigned int v47 = *(_DWORD *)(v45 + 24);
      uint64_t v48 = *(void *)(v45 + 8) + 4 * (int)(v47 * v29);
      int v49 = *(_DWORD *)(v45 + 28) - v47 * v29;
      uint64_t v50 = *(void *)(v45 + 32);
      *((void *)&v66 + 1) = __PAIR64__(v15, v46);
      *(void *)&long long v67 = __PAIR64__(v49, v47);
      *((void *)&v67 + 1) = v50;
      unsigned int v65 = &unk_1F0A472A0;
      *(void *)&long long v66 = v48;
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v68, (uint64_t)&v65, CblasNoTrans, a1 + 160, CblasNoTrans, 1.0, 1.0);
      unsigned int v65 = &unk_1F0A472A0;
      long long v66 = 0u;
      long long v67 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v65);
      if (v42)
      {
        uint64_t v51 = *(void *)(a1 + 504) + 48 * (int)v12;
        uint64_t v52 = *(void *)(a1 + 480) + 32 * v12;
        *((void *)&v66 + 1) = 0;
        unsigned int v65 = &unk_1F0A472D0;
        *(void *)&long long v66 = *(void *)(v52 + 8) + 4 * v29;
        DWORD2(v66) = v15;
        *(void *)&long long v67 = *(void *)(v52 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v68, v51, (uint64_t)&v65, 0);
      }
      int v53 = *(_DWORD *)(a1 + 384);
      switch(v53)
      {
        case 520:
          kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)&v71);
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v68, (uint64_t)&v71);
          break;
        case 517:
          kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v68, (uint64_t)&v71, (uint64_t)&v68);
          break;
        case 516:
          kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v68, (uint64_t)&v71, (uint64_t)&v68);
          break;
        default:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v65);
          uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"Unknown nonlinearity type: ", 27);
          kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v65);
      }
      --v27;
      uint64_t v68 = &unk_1F0A472A0;
      long long v69 = 0u;
      long long v70 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v68);
      uint64_t v71 = &unk_1F0A472A0;
      long long v72 = 0u;
      long long v73 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v71);
      v26 -= v15;
    }
    while ((unint64_t)(v27 + 1) > 1);
  }
  if (v60)
  {
    uint64_t v54 = *(void *)(a1 + 360) + 48 * (int)v12;
    int v55 = *(_DWORD *)(v54 + 16);
    uint64_t v56 = *(void *)(v54 + 32);
    *(void *)&long long v66 = *(void *)(v54 + 8);
    DWORD2(v66) = v55;
    HIDWORD(v66) = v15 * v63;
    *(void *)&long long v67 = *(void *)(v54 + 24);
    *((void *)&v67 + 1) = v56;
    unsigned int v65 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(v60, (uint64_t)&v65, 111);
    unsigned int v65 = &unk_1F0A472A0;
    long long v66 = 0u;
    long long v67 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v65);
  }
}

void sub_1B1F02A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _OWORD *a11, _OWORD *a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v15 - 168) = v14;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v15 - 168));
  *(void *)(v15 - 128) = a14;
  *a12 = 0u;
  a12[1] = 0u;
  JUMPOUT(0x1B1F02A6CLL);
}

void kaldi::nnet1::Recurrent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::nnet1::Recurrent::EnsureTrainingBuffers((kaldi::nnet1::Recurrent *)a1);
  uint64_t v9 = *(void *)(a1 + 240) + 48 * a5;
  *(void *)(v9 + 32) = a4;
  *(void *)(*(void *)(a1 + 264) + 32 * a5 + 24) = a4;
  int v10 = *(_DWORD *)(a1 + 96);
  int v11 = *(_DWORD *)(a1 + 100);
  float v12 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 408) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v13 = *(void *)(a1 + 360) + 48 * a5;
  LODWORD(a2) = v11 * v10;
  unsigned int v14 = *(_DWORD *)(v13 + 16);
  uint64_t v15 = *(void *)(v13 + 32);
  *(void *)&long long v27 = *(void *)(v13 + 8);
  *((void *)&v27 + 1) = __PAIR64__(a2, v14);
  *(void *)&long long v28 = *(void *)(v13 + 24);
  *((void *)&v28 + 1) = v15;
  int v26 = &unk_1F0A472A0;
  uint64_t v16 = *(void *)(a1 + 336) + 48 * a5;
  unsigned int v17 = *(_DWORD *)(v16 + 16);
  uint64_t v18 = *(void *)(v16 + 32);
  *(void *)&long long v24 = *(void *)(v16 + 8);
  *((void *)&v24 + 1) = __PAIR64__(a2, v17);
  *(void *)&long long v25 = *(void *)(v16 + 24);
  *((void *)&v25 + 1) = v18;
  int v23 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::AddMatMat(v9, (uint64_t)&v26, CblasTrans, (uint64_t)&v23, CblasNoTrans, 1.0, v12);
  int v23 = &unk_1F0A472A0;
  long long v24 = 0u;
  long long v25 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  int v26 = &unk_1F0A472A0;
  long long v27 = 0u;
  long long v28 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
  uint64_t v19 = *(void *)(a1 + 264) + 32 * a5;
  uint64_t v20 = *(void *)(a1 + 360) + 48 * a5;
  unsigned int v21 = *(_DWORD *)(v20 + 16);
  uint64_t v22 = *(void *)(v20 + 32);
  *(void *)&long long v27 = *(void *)(v20 + 8);
  *((void *)&v27 + 1) = __PAIR64__(a2, v21);
  *(void *)&long long v28 = *(void *)(v20 + 24);
  *((void *)&v28 + 1) = v22;
  int v26 = &unk_1F0A472A0;
  kaldi::CuVectorBase<float>::AddRowSumMat(v19, (uint64_t)&v26, 1.0, v12);
  int v26 = &unk_1F0A472A0;
  long long v27 = 0u;
  long long v28 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
}

void sub_1B1F02C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *uint64_t v6 = 0u;
  v6[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::NormalizeGradients(kaldi::nnet1::Recurrent *this, float a2, unsigned int a3)
{
  float v3 = a2;
  int v5 = *((_DWORD *)this + 39);
  if (v5 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      uint64_t v8 = a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 30) + 48 * a3, *((void *)this + 36) + 48 * a3, a2);
      uint64_t v9 = *((void *)this + 33) + 32 * v8;
      uint64_t v10 = *((void *)this + 39) + 32 * v8;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, v10, v3);
    }
  }
  else if (v5 == 1)
  {
    if (a2 > 0.0)
    {
      uint64_t v6 = a3;
      if (*((unsigned char *)this + 84)) {
        float v3 = (float)*(int *)(*((void *)this + 51) + 4 * a3) * a2;
      }
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 30) + 48 * a3, v3);
      uint64_t v13 = *((void *)this + 33) + 32 * v6;
      kaldi::nnet1::UpdatableComponent::ClipGradient(v13, v3);
    }
  }
  else if (a2 > 0.0 && v5 == 2)
  {
    uint64_t v12 = a3;
    if (*((unsigned char *)this + 84)) {
      float v3 = (float)*(int *)(*((void *)this + 51) + 4 * a3) * a2;
    }
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 30) + 48 * a3, (int *)(*((void *)this + 36) + 48 * a3), v3);
    uint64_t v14 = *((void *)this + 33) + 32 * v12;
    uint64_t v15 = (void *)(*((void *)this + 39) + 32 * v12);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v14, v15, v3);
  }
}

void kaldi::nnet1::Recurrent::UpdateWeights(kaldi::nnet1::Recurrent *this, void *a2, int a3)
{
  (*(void (**)(kaldi::nnet1::Recurrent *))(*(void *)this + 88))(this);
  kaldi::nnet1::Recurrent::EnsureTrainingBuffers(this);
  float v6 = *(float *)((char *)this + *(void *)(*(void *)this - 24) + 56);
  float v8 = *((float *)this + 16);
  float v7 = *((float *)this + 17);
  *((void *)this + 24) = a2;
  *((void *)this + 29) = a2;
  uint64_t v9 = *((unsigned int *)this + 20);
  if (a3 >= 0) {
    int v10 = a3;
  }
  else {
    int v10 = *((_DWORD *)this + 20);
  }
  if (v9 == 1) {
    int v10 = 0;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *((void *)this + 30);
  uint64_t v13 = v12 + 48 * v10;
  *(void *)(v13 + 32) = a2;
  *(void *)(*((void *)this + 33) + 32 * v10 + 24) = a2;
  *(void *)(*((void *)this + 36) + 48 * v10 + 32) = a2;
  *(void *)(*((void *)this + 39) + 32 * v10 + 24) = a2;
  if (v10 == v9)
  {
    kaldi::CuMatrixBase<float>::AddMat(v13, v12, 111, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*((void *)this + 33) + 32 * v11, *((void *)this + 33), 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      uint64_t v14 = 1;
      uint64_t v15 = 32;
      uint64_t v16 = 48;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 30) + 48 * (int)v11, *((void *)this + 30) + v16, 111, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((void *)this + 33) + 32 * v11, *((void *)this + 33) + v15, 1.0, 1.0);
        ++v14;
        v16 += 48;
        v15 += 32;
      }
      while (v14 < *((int *)this + 20));
    }
    unsigned int v17 = (int *)*((void *)this + 51);
    v17[v11] = 0;
    if ((int)v9 >= 1)
    {
      int v18 = 0;
      uint64_t v19 = v17;
      do
      {
        int v20 = *v19++;
        v18 += v20;
        v17[v11] = v18;
        --v9;
      }
      while (v9);
    }
  }
  if (*((unsigned char *)this + 84)) {
    float v6 = v6 / (float)*(int *)(*((void *)this + 51) + 4 * v11);
  }
  if (*((float *)this + 38) >= 0.0) {
    (*(void (**)(kaldi::nnet1::Recurrent *, uint64_t))(*(void *)this + 280))(this, v11);
  }
  if (v8 != 0.0) {
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)this + 160, 111, (float)-(float)(v6 * v8) * (float)*(int *)(*((void *)this + 51) + 4 * v11), 1.0);
  }
  uint64_t v21 = *((void *)this + 30);
  if (v7 != 0.0)
  {
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 160, v21 + 48 * (int)v11, (float)(v7 * v6) * (float)*(int *)(*((void *)this + 51) + 4 * v11), v6);
    uint64_t v21 = *((void *)this + 30);
  }
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, v21 + 48 * (int)v11, 111, -(float)(v6 * *((float *)this + 98)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 208, *((void *)this + 33) + 32 * v11, -(float)(v6 * *((float *)this + 99)), 1.0);
  if (*((float *)this + 100) > 0.0)
  {
    *((void *)this + 58) = a2;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)this + 108, (uint64_t)this + 160, 111);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)this + 432, (uint64_t)this + 160);
    uint64_t v22 = *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
    v24[2] = 0;
    long long v25 = 0;
    v24[0] = &unk_1F0A517C0;
    v24[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v24, v22, 0);
    long long v25 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v24, (uint64_t)this + 432, 1.0, 0.0);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v24, 0.5);
    kaldi::CuVector<float>::CuVector(v23, (uint64_t)v24);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v23, 1.0 / *((float *)this + 100));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v23, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v23);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)this + 160, (uint64_t)v23);
    kaldi::CuVector<float>::~CuVector(v23);
    kaldi::CuVector<float>::~CuVector(v24);
  }
}

void sub_1B1F03224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  float v8 = (const void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, void, void))(*v9 + 272))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize(a4, v10, 1);
  int v11 = a1[44] * a1[45];
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = (char *)*a4;
  LODWORD(v15) = v11;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v14, v9[30]);
  int v12 = a1[56];
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = (char *)*a4 + 4 * v11;
  LODWORD(v15) = v12;
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v9[33], (uint64_t)&v14);
  return (*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
}

void virtual thunk to'kaldi::nnet1::Recurrent::Copy(kaldi::nnet1::Recurrent *this)
{
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::GetType(kaldi::nnet1::Recurrent *this)
{
  return 273;
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::Info(kaldi::nnet1::Recurrent *this)
{
  return kaldi::nnet1::Recurrent::Info((kaldi::nnet1::Recurrent *)((char *)this + *(void *)(*(void *)this - 80)));
}

void virtual thunk to'kaldi::nnet1::Recurrent::InfoGradient(kaldi::nnet1::Recurrent *this@<X0>, void *a2@<X8>)
{
}

void virtual thunk to'kaldi::nnet1::Recurrent::InitData(void *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
}

void virtual thunk to'kaldi::nnet1::Recurrent::WriteData(void *a1, void *a2, int a3, int a4)
{
}

void virtual thunk to'kaldi::nnet1::Recurrent::PropagateFnc(void *a1, uint64_t a2, int32x2_t *a3, int a4)
{
}

void virtual thunk to'kaldi::nnet1::Recurrent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
}

void virtual thunk to'kaldi::nnet1::Recurrent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, int a6)
{
}

double virtual thunk to'kaldi::nnet1::Recurrent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::Recurrent::ReadData((uint64_t)a1 + *(void *)(*a1 - 176), a2, a3, a4);
}

void *virtual thunk to'kaldi::nnet1::Recurrent::WriteConfig(void *a1, void *a2, uint64_t a3)
{
  return kaldi::nnet1::Recurrent::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3);
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::NumParams(kaldi::nnet1::Recurrent *this)
{
  return (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 192) + 224)
                      + *(_DWORD *)((char *)this + *(void *)(*(void *)this - 192) + 176)
                      * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 192) + 180));
}

const void **virtual thunk to'kaldi::nnet1::Recurrent::GetParams(void *a1, void **a2)
{
  return kaldi::nnet1::Recurrent::GetParams((uint64_t)a1 + *(void *)(*a1 - 200), a2);
}

void *virtual thunk to'kaldi::nnet1::Recurrent::SetParams(void *a1, char **a2)
{
  return kaldi::nnet1::Recurrent::SetParams((void *)((char *)a1 + *(void *)(*a1 - 208)), a2);
}

float virtual thunk to'kaldi::nnet1::Recurrent::SumParams(kaldi::nnet1::Recurrent *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 224);
  float v2 = kaldi::CuMatrixBase<float>::Sum((uint64_t)(v1 + 160));
  double v3 = kaldi::CuVectorBase<float>::Sum((uint64_t)(v1 + 208));
  return v2 + *(float *)&v3;
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::PerturbParams(kaldi::nnet1::Recurrent *this, float a2)
{
  return kaldi::nnet1::Recurrent::PerturbParams((kaldi::nnet1::Recurrent *)((char *)this + *(void *)(*(void *)this - 232)), a2);
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  return kaldi::nnet1::Recurrent::GetGradient((void *)((char *)a1 + *(void *)(*a1 - 240)), a2, a3, a4);
}

void virtual thunk to'kaldi::nnet1::Recurrent::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

void *virtual thunk to'kaldi::nnet1::Recurrent::SetGradientNormalization(void *result, int a2, float a3)
{
  double v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 388) = 0;
  return result;
}

void virtual thunk to'kaldi::nnet1::Recurrent::NormalizeGradients(kaldi::nnet1::Recurrent *this, float a2, unsigned int a3)
{
}

void virtual thunk to'kaldi::nnet1::Recurrent::UpdateWeights(kaldi::nnet1::Recurrent *this, void *a2, int a3)
{
}

void virtual thunk to'kaldi::nnet1::Recurrent::SetTrainOptions(kaldi::nnet1::Recurrent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  float v2 = (kaldi::nnet1::Recurrent *)((char *)this + *(void *)(*(void *)this - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 194) = 0;
}

void kaldi::nnet1::AveragePoolingComponent::Copy(kaldi::nnet1::AveragePoolingComponent *this)
{
}

void sub_1B1F03764(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40E1B45FB4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AveragePoolingComponent::GetType(kaldi::nnet1::AveragePoolingComponent *this)
{
  return 2050;
}

void kaldi::nnet1::AveragePoolingComponent::InitData(uint64_t a1, uint64_t *a2)
{
  unsigned int v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  double v3 = a2 + 4;
  uint64_t v4 = (float *)(a1 + 60);
  uint64_t v5 = a1 + 56;
  uint64_t v6 = a1 + 52;
  uint64_t v7 = a1 + 48;
  while (1)
  {
    if ((*((unsigned char *)v3 + *(void *)(*a2 - 24)) & 2) != 0)
    {
      char v8 = HIBYTE(v31);
      goto LABEL_59;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v29);
    char v8 = HIBYTE(v31);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
      if (HIBYTE(v31) != 7)
      {
        if (HIBYTE(v31) == 10)
        {
          BOOL v16 = v29 == (char *)0x7A69536C6F6F503CLL && (unsigned __int16)v30 == 15973;
          uint64_t v10 = v7;
          if (!v16)
          {
            BOOL v17 = v29 == (char *)0x6574536C6F6F503CLL && (unsigned __int16)v30 == 15984;
            uint64_t v10 = v6;
            if (!v17) {
              goto LABEL_62;
            }
          }
        }
        else
        {
          if (HIBYTE(v31) != 12) {
            goto LABEL_62;
          }
          BOOL v9 = v29 == (char *)0x7274536C6F6F503CLL && v30 == 1046832233;
          uint64_t v10 = v5;
          if (!v9)
          {
            uint64_t v19 = &v29;
            goto LABEL_54;
          }
        }
        goto LABEL_49;
      }
      if (v29 != 1633899324 || *(_DWORD *)((char *)&v29 + 3) != 1046834273) {
        goto LABEL_62;
      }
LABEL_48:
      kaldi::ReadBasicType<float>(a2, 0, v4);
      goto LABEL_50;
    }
    uint64_t v11 = v30;
    if (v30 == 10)
    {
      BOOL v12 = *(void *)v29 == 0x7A69536C6F6F503CLL && *((_WORD *)v29 + 4) == 15973;
      uint64_t v10 = v7;
      if (v12) {
        goto LABEL_49;
      }
      BOOL v13 = *(void *)v29 == 0x6574536C6F6F503CLL && *((_WORD *)v29 + 4) == 15984;
      uint64_t v10 = v6;
      if (v13) {
        goto LABEL_49;
      }
      uint64_t v11 = v30;
    }
    if (v11 != 12) {
      goto LABEL_28;
    }
    BOOL v14 = *(void *)v29 == 0x7274536C6F6F503CLL && *((_DWORD *)v29 + 2) == 1046832233;
    uint64_t v10 = v5;
    if (!v14) {
      break;
    }
LABEL_49:
    kaldi::ReadBasicType<int>(a2, 0, v10);
LABEL_50:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v11 = v30;
LABEL_28:
  if (v11 != 7) {
    goto LABEL_52;
  }
  if (*(_DWORD *)v29 == 1633899324 && *(_DWORD *)(v29 + 3) == 1046834273) {
    goto LABEL_48;
  }
  uint64_t v11 = v30;
LABEL_52:
  if (v11 != 12) {
    goto LABEL_62;
  }
  uint64_t v19 = (char **)v29;
LABEL_54:
  uint64_t v20 = (uint64_t)*v19;
  int v21 = *((_DWORD *)v19 + 2);
  if (v20 != 0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_62:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Unknown token ", 14);
    if (v31 >= 0) {
      long long v24 = &v29;
    }
    else {
      long long v24 = (char **)v29;
    }
    if (v31 >= 0) {
      uint64_t v25 = HIBYTE(v31);
    }
    else {
      uint64_t v25 = v30;
    }
    int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" (PoolSize|PoolStep|PoolStride|Scale)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
LABEL_59:
  if (v8 < 0) {
    operator delete(v29);
  }
}

void sub_1B1F03AC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::AveragePoolingComponent::WriteData(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<PoolSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStride>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<Scale>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void kaldi::nnet1::AveragePoolingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = (*(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 56) - *(_DWORD *)(a1 + 48)) / *(_DWORD *)(a1 + 52);
  if ((v3 & 0x80000000) == 0)
  {
    int v7 = 0;
    do
    {
      int v8 = *(_DWORD *)(a1 + 56);
      uint64_t v9 = *(void *)(a3 + 8) + 4 * (v8 * v7);
      int v10 = *(_DWORD *)(a3 + 28) - v8 * v7;
      uint64_t v11 = *(void *)(a3 + 32);
      LODWORD(v20[2]) = v8;
      *(void *)((char *)&v20[2] + 4) = *(void *)(a3 + 20);
      HIDWORD(v20[3]) = v10;
      v20[4] = v11;
      v20[0] = &unk_1F0A472A0;
      v20[1] = v9;
      kaldi::CuMatrixBase<float>::SetZero((uint64_t)v20);
      int v12 = *(_DWORD *)(a1 + 48);
      if (v12 >= 1)
      {
        for (int i = 0; i < v12; ++i)
        {
          unsigned int v14 = (i + v7 * *(_DWORD *)(a1 + 52)) * *(_DWORD *)(a1 + 56);
          uint64_t v15 = *(void *)(a2 + 8) + 4 * v14;
          unsigned int v16 = *(_DWORD *)(a2 + 28) - v14;
          uint64_t v17 = *(void *)(a2 + 32);
          LODWORD(v19[2]) = *(_DWORD *)(a1 + 56);
          *(void *)((char *)&v19[2] + 4) = *(void *)(a2 + 20);
          HIDWORD(v19[3]) = v16;
          v19[4] = v17;
          v19[0] = &unk_1F0A472A0;
          v19[1] = v15;
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)v20, (uint64_t)v19, 111, 1.0, 1.0);
          v19[0] = &unk_1F0A472A0;
          memset(&v19[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v19);
          int v12 = *(_DWORD *)(a1 + 48);
        }
      }
      kaldi::CuMatrixBase<float>::Scale((uint64_t)v20, *(float *)(a1 + 60) / (float)v12);
      v20[0] = &unk_1F0A472A0;
      memset(&v20[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v20);
    }
    while (v7++ != v3);
  }
}

void sub_1B1F03D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *uint64_t v6 = 0u;
  v6[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePoolingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = (*(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 56));
  int v10 = *(_DWORD *)(a1 + 48);
  __x[0] = 0;
  std::vector<int>::vector(&v35, (int)v9, __x);
  kaldi::CuMatrixBase<float>::SetZero(a5);
  uint64_t v30 = v9;
  int v11 = *(_DWORD *)(a1 + 48);
  int v31 = ((int)v9 - v10) / v8;
  if ((v31 & 0x80000000) == 0)
  {
    int v12 = 0;
    do
    {
      if (v11 >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          int v15 = *(_DWORD *)(a1 + 52);
          int v14 = *(_DWORD *)(a1 + 56);
          unsigned int v16 = (v13 + v12 * v15) * v14;
          uint64_t v17 = *(void *)(a5 + 8) + 4 * v16;
          unsigned int v18 = *(_DWORD *)(a5 + 28) - v16;
          uint64_t v19 = *(void *)(a5 + 32);
          LODWORD(v34[1]) = v14;
          *(void *)((char *)&v34[1] + 4) = *(void *)(a5 + 20);
          HIDWORD(v34[2]) = v18;
          void v34[3] = v19;
          *(void *)float64x2_t __x = &unk_1F0A472A0;
          v34[0] = v17;
          uint64_t v20 = *(void *)(a4 + 8) + 4 * (v14 * v12);
          int v21 = *(_DWORD *)(a4 + 28) - v14 * v12;
          uint64_t v22 = *(void *)(a4 + 32);
          LODWORD(v32[2]) = v14;
          *(void *)((char *)&v32[2] + 4) = *(void *)(a4 + 20);
          HIDWORD(v32[3]) = v21;
          v32[4] = v22;
          v32[0] = &unk_1F0A472A0;
          v32[1] = v20;
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)__x, (uint64_t)v32, 111, 1.0, 1.0);
          ++v35.__begin_[v13 + v12 * v15];
          v32[0] = &unk_1F0A472A0;
          memset(&v32[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v32);
          *(void *)float64x2_t __x = &unk_1F0A472A0;
          memset(v34, 0, sizeof(v34));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)__x);
          int v11 = *(_DWORD *)(a1 + 48);
          ++v13;
        }
        while ((int)v13 < v11);
      }
    }
    while (v12++ != v31);
  }
  kaldi::CuMatrixBase<float>::Scale(a5, *(float *)(a1 + 60) / (float)v11);
  if ((int)v30 >= 1)
  {
    for (uint64_t i = 0; i != v30; ++i)
    {
      int v25 = *(_DWORD *)(a1 + 56);
      uint64_t v26 = *(void *)(a5 + 8) + 4 * (v25 * i);
      int v27 = *(_DWORD *)(a5 + 28) - v25 * i;
      uint64_t v28 = *(void *)(a5 + 32);
      LODWORD(v34[1]) = v25;
      *(void *)((char *)&v34[1] + 4) = *(void *)(a5 + 20);
      HIDWORD(v34[2]) = v27;
      void v34[3] = v28;
      *(void *)float64x2_t __x = &unk_1F0A472A0;
      v34[0] = v26;
      float v29 = 1.0 / (double)v35.__begin_[i];
      kaldi::CuMatrixBase<float>::Scale((uint64_t)__x, v29);
      *(void *)float64x2_t __x = &unk_1F0A472A0;
      memset(v34, 0, sizeof(v34));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)__x);
    }
  }
  if (v35.__begin_)
  {
    v35.__end_ = v35.__begin_;
    operator delete(v35.__begin_);
  }
}

void sub_1B1F0404C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::nnet1::AveragePoolingComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, "<PoolSize>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 48);
  kaldi::ExpectToken(a2, a3, "<PoolStep>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 52);
  kaldi::ExpectToken(a2, a3, "<PoolStride>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 56);
  kaldi::ExpectToken(a2, a3, "<Scale>");
  return kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 60));
}

void kaldi::nnet1::ConvolutionalComponent::Copy(kaldi::nnet1::ConvolutionalComponent *this)
{
}

void sub_1B1F041C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40F3A04191);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::GetType(kaldi::nnet1::ConvolutionalComponent *this)
{
  return 261;
}

uint64_t kaldi::nnet1::ConvolutionalComponent::Info(kaldi::nnet1::ConvolutionalComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  (*(void (**)(kaldi::nnet1::ConvolutionalComponent *, void *, void))(*(void *)this + 168))(this, v14, 0);
  float v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 104);
  if ((v13 & 0x80u) == 0) {
    int v3 = v12;
  }
  else {
    int v3 = (void **)v12[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v4 = v13;
  }
  else {
    uint64_t v4 = (uint64_t)v12[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 152);
  if ((v11 & 0x80u) == 0) {
    int v7 = __p;
  }
  else {
    int v7 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v8 = v11;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v13 < 0) {
    operator delete(v12[0]);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v14[1] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v16);
}

void sub_1B1F043F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalComponent::InfoGradient(kaldi::nnet1::ConvolutionalComponent *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v41, "\n  filters_grad");
  kaldi::nnet1::MomentStatistics<float>((void *)this + 24);
  if ((v40 & 0x80u) == 0) {
    uint64_t v4 = v39;
  }
  else {
    uint64_t v4 = (void **)v39[0];
  }
  if ((v40 & 0x80u) == 0) {
    std::string::size_type v5 = v40;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v39[1];
  }
  uint64_t v6 = std::string::append(&v41, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v42, ", lr-coef ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0) {
    int v10 = v37;
  }
  else {
    int v10 = (void **)v37[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v11 = v38;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v37[1];
  }
  int v12 = std::string::append(&v43, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = std::string::append(&v44, ", max-norm ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v36 & 0x80u) == 0) {
    uint64_t v16 = v35;
  }
  else {
    uint64_t v16 = (void **)v35[0];
  }
  if ((v36 & 0x80u) == 0) {
    std::string::size_type v17 = v36;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v35[1];
  }
  unsigned int v18 = std::string::append(&v45, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  uint64_t v20 = std::string::append(&v46, "\n  bias_grad");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)this + 27);
  if ((v34 & 0x80u) == 0) {
    uint64_t v22 = v33;
  }
  else {
    uint64_t v22 = (void **)v33[0];
  }
  if ((v34 & 0x80u) == 0) {
    std::string::size_type v23 = v34;
  }
  else {
    std::string::size_type v23 = (std::string::size_type)v33[1];
  }
  long long v24 = std::string::append(&v47, (const std::string::value_type *)v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  uint64_t v26 = std::string::append(&v48, ", lr-coef ");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v32 & 0x80u) == 0) {
    uint64_t v28 = __p;
  }
  else {
    uint64_t v28 = (void **)__p[0];
  }
  if ((v32 & 0x80u) == 0) {
    std::string::size_type v29 = v32;
  }
  else {
    std::string::size_type v29 = (std::string::size_type)__p[1];
  }
  uint64_t v30 = std::string::append(&v49, (const std::string::value_type *)v28, v29);
  *a2 = *v30;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if ((char)v32 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if ((char)v34 < 0) {
    operator delete(v33[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if ((char)v36 < 0) {
    operator delete(v35[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if ((char)v38 < 0) {
    operator delete(v37[0]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if ((char)v40 < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
}

void sub_1B1F04770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v64 - 41) < 0) {
    operator delete(*(void **)(v64 - 64));
  }
  if (*(char *)(v64 - 73) < 0) {
    operator delete(*(void **)(v64 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v64 - 105) < 0) {
    operator delete(*(void **)(v64 - 128));
  }
  if (*(char *)(v64 - 137) < 0) {
    operator delete(*(void **)(v64 - 160));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v64 - 169) < 0) {
    operator delete(*(void **)(v64 - 192));
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void sub_1B1F0489C()
{
}

void sub_1B1F048A4()
{
}

void sub_1B1F048AC()
{
}

void sub_1B1F048B4()
{
}

void sub_1B1F048BC()
{
}

void kaldi::nnet1::ConvolutionalComponent::InitData(int32x2_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  float v71 = 2.0;
  int v72 = -1073741824;
  int v70 = 1036831949;
  int v69 = -1;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[23].u32[0], &v68);
  memset(v67, 0, sizeof(v67));
  uint64_t v57 = a1 + 11;
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_139;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v67);
    if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v67[2]))
      {
        case 9:
          BOOL v6 = v67[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v67[1]) == 62;
          long long v7 = (float *)&a1[37];
          if (v6) {
            goto LABEL_128;
          }
          BOOL v8 = v67[0] == (void *)0x6461724778614D3CLL && LOBYTE(v67[1]) == 62;
          long long v7 = (float *)&a1[23] + 1;
          if (v8) {
            goto LABEL_128;
          }
          if ((HIBYTE(v67[2]) & 0x80) != 0) {
            goto LABEL_131;
          }
          goto LABEL_167;
        case 0xA:
          if (v67[0] == (void *)0x61654D736169423CLL && LOWORD(v67[1]) == 15982) {
            goto LABEL_89;
          }
          BOOL v20 = v67[0] == (void *)0x694468637461503CLL && LOWORD(v67[1]) == 15981;
          goto LABEL_87;
        case 0xB:
          if (v67[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v67 + 3) == (void *)0x3E65676E61527361) {
            goto LABEL_79;
          }
          BOOL v15 = v67[0] == (void *)0x745368637461503CLL && *(void **)((char *)v67 + 3) == (void *)0x3E70657453686374;
          goto LABEL_77;
        case 0xC:
          if (v67[0] == (void *)0x536D6F646E61523CLL && LODWORD(v67[1]) == 1046766949) {
            goto LABEL_95;
          }
          unsigned __int8 v32 = v67;
          goto LABEL_134;
        case 0xD:
          if (v67[0] == (void *)0x74536D617261503CLL && *(void **)((char *)v67 + 5) == (void *)0x3E7665646474536DLL) {
            goto LABEL_119;
          }
          BOOL v12 = v67[0] == (void *)0x745368637461503CLL && *(void **)((char *)v67 + 5) == (void *)0x3E65646972745368;
          goto LABEL_116;
        case 0xF:
          BOOL v13 = v67[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v67 + 7) == (void *)0x3E66656F43657461;
          goto LABEL_68;
        case 0x12:
          if (v67[0] != (void *)0x6E6569646172473CLL
            || v67[1] != (void *)0x7079546D726F4E74
            || LOWORD(v67[2]) != 15973)
          {
            goto LABEL_167;
          }
          goto LABEL_64;
        case 0x13:
          BOOL v17 = v67[0] == (void *)0x61654C736169423CLL
             && v67[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v67[1] + 3) == (void *)0x3E66656F43657461;
          goto LABEL_126;
        default:
          goto LABEL_167;
      }
    }
    long long v9 = v67[1];
    switch((unint64_t)v67[1])
    {
      case 9uLL:
        BOOL v10 = *(void *)v67[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v67[0] + 8) == 62;
        long long v7 = (float *)&a1[37];
        if (!v10) {
          goto LABEL_104;
        }
        goto LABEL_128;
      case 0xAuLL:
        if (*(void *)v67[0] == 0x61654D736169423CLL && *((_WORD *)v67[0] + 4) == 15982)
        {
LABEL_89:
          long long v7 = (float *)&v72;
          goto LABEL_128;
        }
        BOOL v20 = *(void *)v67[0] == 0x694468637461503CLL && *((_WORD *)v67[0] + 4) == 15981;
LABEL_87:
        long long v24 = (int *)&a1[11];
        if (!v20) {
          goto LABEL_167;
        }
        goto LABEL_118;
      case 0xBuLL:
        if (*(void *)v67[0] == 0x6E6152736169423CLL && *(void *)((char *)v67[0] + 3) == 0x3E65676E61527361)
        {
LABEL_79:
          long long v7 = &v71;
          goto LABEL_128;
        }
        BOOL v15 = *(void *)v67[0] == 0x745368637461503CLL && *(void *)((char *)v67[0] + 3) == 0x3E70657453686374;
LABEL_77:
        long long v24 = (int *)&a1[11] + 1;
        if (!v15) {
          goto LABEL_167;
        }
        goto LABEL_118;
      case 0xCuLL:
        if (*(void *)v67[0] != 0x536D6F646E61523CLL || *((_DWORD *)v67[0] + 2) != 1046766949) {
          goto LABEL_133;
        }
LABEL_95:
        long long v24 = &v69;
        goto LABEL_118;
      case 0xDuLL:
        if (*(void *)v67[0] == 0x74536D617261503CLL && *(void *)((char *)v67[0] + 5) == 0x3E7665646474536DLL)
        {
LABEL_119:
          long long v7 = (float *)&v70;
          goto LABEL_128;
        }
        BOOL v12 = *(void *)v67[0] == 0x745368637461503CLL && *(void *)((char *)v67[0] + 5) == 0x3E65646972745368;
LABEL_116:
        long long v24 = (int *)&a1[12];
        if (!v12) {
          goto LABEL_167;
        }
LABEL_118:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v24);
        goto LABEL_129;
      case 0xFuLL:
        BOOL v13 = *(void *)v67[0] == 0x61526E7261654C3CLL && *(void *)((char *)v67[0] + 7) == 0x3E66656F43657461;
LABEL_68:
        long long v7 = (float *)&a1[36];
        if (!v13) {
          goto LABEL_167;
        }
        goto LABEL_128;
      case 0x12uLL:
        if (*(void *)v67[0] == 0x6E6569646172473CLL
          && *((void *)v67[0] + 1) == 0x7079546D726F4E74
          && *((_WORD *)v67[0] + 8) == 15973)
        {
LABEL_64:
          kaldi::ReadToken(a2, 0, (uint64_t)&v68);
          goto LABEL_129;
        }
        if (v67[1] != (void *)9) {
          goto LABEL_132;
        }
LABEL_104:
        BOOL v29 = *(void *)v67[0] == 0x6461724778614D3CLL && *((unsigned char *)v67[0] + 8) == 62;
        long long v7 = (float *)&a1[23] + 1;
        if (v29)
        {
LABEL_128:
          kaldi::ReadBasicType<float>(a2, 0, v7);
LABEL_129:
          std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
          continue;
        }
LABEL_131:
        long long v9 = v67[1];
LABEL_132:
        if (v9 != (void *)12)
        {
LABEL_167:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v63);
          uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v67[2]) >= 0) {
            int v53 = v67;
          }
          else {
            int v53 = (void **)v67[0];
          }
          if (SHIBYTE(v67[2]) >= 0) {
            uint64_t v54 = HIBYTE(v67[2]);
          }
          else {
            uint64_t v54 = (uint64_t)v67[1];
          }
          int v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
          uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)", a typo in config?", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" (ParamStddev|BiasMean|BiasRange|PatchDim|PatchStep|PatchStride|MaxNorm|GradientNormType|MaxGrad|RandomSeed)", 108);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63);
        }
LABEL_133:
        unsigned __int8 v32 = (void **)v67[0];
LABEL_134:
        int v33 = *v32;
        int v34 = *((_DWORD *)v32 + 2);
        if (v33 != (void *)0x6E6F706D6F432F3CLL || v34 != 1047817829) {
          goto LABEL_167;
        }
LABEL_139:
        a1[23].i32[0] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v68);
        __int32 v36 = a1[12].i32[0];
        int v37 = kaldi::g_kaldi_verbose_level;
        int v38 = a1[1].i32[0] / v36;
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v63);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"num_splice ", 11);
          std::ostream::operator<<();
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v63);
          __int32 v36 = a1[12].i32[0];
          int v37 = kaldi::g_kaldi_verbose_level;
        }
        int v39 = (v36 - v57->i32[0]) / a1[11].i32[1] + 1;
        if (v37 < 0)
        {
          uint64_t v40 = (v57->i32[0] * v38);
          goto LABEL_146;
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v63);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"num_patches ", 12);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v63);
        uint64_t v40 = (v57->i32[0] * v38);
        if (kaldi::g_kaldi_verbose_level < 0)
        {
LABEL_146:
          uint64_t v41 = (a1[1].i32[1] / v39);
          goto LABEL_147;
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v63);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"filter_dim ", 11);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v63);
        uint64_t v41 = (a1[1].i32[1] / v39);
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v63);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"num_filters ", 12);
          std::ostream::operator<<();
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v63);
        }
LABEL_147:
        if (v69 >= 1) {
          kaldi::UniformRandomNumber::SetRandomSeeds(a3, v69);
        }
        kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v63, a3);
        kaldi::Matrix<float>::Matrix((uint64_t)v61, v41, v40, 0, 0);
        if ((int)v41 >= 1)
        {
          int v42 = 0;
          do
          {
            if ((int)v40 >= 1)
            {
              uint64_t v43 = 0;
              do
              {
                float v44 = *(float *)&v70;
                kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v63, 0);
                *((float *)v61[0] + v42 * v62 + v43++) = v44 * v45;
              }
              while (v40 != v43);
            }
            ++v42;
          }
          while (v42 != v41);
        }
        kaldi::CuMatrix<float>::operator=(a1 + 13, (int *)v61);
        unsigned int v58 = 0;
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        kaldi::Vector<float>::Resize((void **)&v58, v41, 0);
        if ((int)v41 <= 0)
        {
          uint64_t v50 = v59;
        }
        else
        {
          uint64_t v46 = 0;
          do
          {
            float v47 = *(float *)&v72;
            float v48 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
            float v49 = v47 + (v48 + -0.5) * v71;
            uint64_t v50 = v59;
            v58[v46++] = v49;
          }
          while (v41 != v46);
        }
        uint64_t v51 = a1 + 19;
        kaldi::CuVector<float>::Resize((uint64_t)v51, v50, 1);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(v51, (uint64_t)&v58);
        kaldi::Vector<float>::Destroy((uint64_t)&v58);
        kaldi::Matrix<float>::~Matrix((uint64_t)v61);
        if (__p)
        {
          long long v66 = __p;
          operator delete(__p);
        }
        v61[0] = (void **)&v64;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v61);
        if (SHIBYTE(v67[2]) < 0) {
          operator delete(v67[0]);
        }
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
        return;
      case 0x13uLL:
        BOOL v17 = *(void *)v67[0] == 0x61654C736169423CLL
           && *((void *)v67[0] + 1) == 0x6F43657461526E72
           && *(void *)((char *)v67[0] + 11) == 0x3E66656F43657461;
LABEL_126:
        long long v7 = (float *)&a1[36] + 1;
        if (!v17) {
          goto LABEL_167;
        }
        goto LABEL_128;
      default:
        goto LABEL_132;
    }
  }
}

void sub_1B1F05358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (*(char *)(v20 - 145) < 0) {
    operator delete(*(void **)(v20 - 168));
  }
  if (*(char *)(v20 - 121) < 0) {
    operator delete(*(void **)(v20 - 144));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalComponent::WriteData(uint64_t a1, void *a2, int a3)
{
  uint64_t v6 = a1 + 152;
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write(a1 + 104, a2, a3, 0);
  kaldi::CuVectorBase<float>::Write(v6, a2, a3);
}

void kaldi::nnet1::ConvolutionalComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 96);
  int v7 = *(_DWORD *)(a1 + 124);
  unsigned int v36 = *(_DWORD *)(a1 + 120);
  unsigned int v37 = *(_DWORD *)(a2 + 20);
  int v39 = (uint64_t *)(a1 + 304);
  int v8 = (v6 - *(_DWORD *)(a1 + 88)) / *(_DWORD *)(a1 + 92);
  if (*(void *)(a1 + 312) == *(void *)(a1 + 304))
  {
    std::vector<kaldi::CuMatrix<float>>::resize(v39, v8 + 1);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 328), v8 + 1);
    if (v8 < 0) {
      return;
    }
  }
  else if (v8 < 0)
  {
    return;
  }
  int v33 = v7;
  uint64_t v9 = 0;
  uint64_t v32 = a1 + 104;
  int v34 = v7;
  uint64_t v38 = (v8 + 1);
  int v10 = v5 / v6;
  do
  {
    kaldi::CuMatrix<float>::Resize((int32x2_t *)(*v39 + 48 * v9), v37, v36, 0, 0);
    memset(__p, 0, 24);
    if (v10 >= 1)
    {
      std::string::size_type v11 = 0;
      int v12 = 0;
      int v13 = *(_DWORD *)(a1 + 88);
      do
      {
        if (v13 >= 1)
        {
          for (int i = 0; i < v13; ++i)
          {
            int v15 = i + *(_DWORD *)(a1 + 92) * v9 + *(_DWORD *)(a1 + 96) * v12;
            if ((unint64_t)v11 >= *(void *)&__p[16])
            {
              uint64_t v16 = *(_DWORD **)__p;
              uint64_t v17 = ((uint64_t)v11 - *(void *)__p) >> 2;
              unint64_t v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v19 = *(void *)&__p[16] - *(void *)__p;
              if ((uint64_t)(*(void *)&__p[16] - *(void *)__p) >> 1 > v18) {
                unint64_t v18 = v19 >> 1;
              }
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v20 = v18;
              }
              if (v20)
              {
                long long v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[16], v20);
                uint64_t v16 = *(_DWORD **)__p;
                std::string::size_type v11 = *(_DWORD **)&__p[8];
              }
              else
              {
                long long v21 = 0;
              }
              uint64_t v22 = &v21[4 * v17];
              *(_DWORD *)uint64_t v22 = v15;
              std::string::size_type v23 = v22 + 4;
              while (v11 != v16)
              {
                int v24 = *--v11;
                *((_DWORD *)v22 - 1) = v24;
                v22 -= 4;
              }
              *(void *)std::string __p = v22;
              *(void *)&__p[8] = v23;
              *(void *)&__p[16] = &v21[4 * v20];
              if (v16) {
                operator delete(v16);
              }
              std::string::size_type v11 = v23;
            }
            else
            {
              *v11++ = v15;
            }
            *(void *)&__p[8] = v11;
            int v13 = *(_DWORD *)(a1 + 88);
          }
        }
        ++v12;
      }
      while (v12 != v10);
    }
    kaldi::CuMatrixBase<float>::CopyCols(*v39 + 48 * v9, a2, (uint64_t *)__p);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    ++v9;
  }
  while (v9 != v38);
  uint64_t v25 = 0;
  int v26 = 0;
  unsigned int v27 = 0;
  uint64_t v28 = a1 + 152;
  do
  {
    uint64_t v29 = *(void *)(a3 + 8) + 4 * v27;
    int v30 = v26 + *(_DWORD *)(a3 + 28);
    uint64_t v31 = *(void *)(a3 + 32);
    *(_DWORD *)&__p[16] = v33;
    *(void *)&__p[20] = *(void *)(a3 + 20);
    *(_DWORD *)&__p[28] = v30;
    *(void *)&__p[32] = v31;
    *(void *)std::string __p = &unk_1F0A472A0;
    *(void *)&__p[8] = v29;
    kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)__p, v28, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)__p, *v39 + v25, CblasNoTrans, v32, CblasTrans, 1.0, 1.0);
    *(void *)std::string __p = &unk_1F0A472A0;
    memset(&__p[8], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
    v27 += v34;
    v26 -= v33;
    v25 += 48;
  }
  while (48 * v38 != v25);
}

void sub_1B1F05790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(_DWORD *)(a1 + 96);
  int v6 = (v5 - *(_DWORD *)(a1 + 88)) / *(_DWORD *)(a1 + 92);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v30 = a1 + 104;
    int v14 = *(_DWORD *)(a1 + 124);
    unsigned int v29 = *(_DWORD *)(a1 + 120);
    unsigned int v28 = *(_DWORD *)(a2 + 20);
    int v15 = *(_DWORD *)(a1 + 8) / v5;
    uint64_t v27 = (v6 + 1);
    do
    {
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 328) + v10), v28, v29, 0, 0);
      int v16 = v12 + *(_DWORD *)(a4 + 28);
      uint64_t v17 = *(void *)(a4 + 32);
      v33[0] = *(void *)(a4 + 8) + v11;
      LODWORD(v33[1]) = v14;
      *(void *)((char *)&v33[1] + 4) = *(void *)(a4 + 20);
      HIDWORD(v33[2]) = v16;
      v33[3] = v17;
      uint64_t v32 = &unk_1F0A472A0;
      kaldi::CuMatrixBase<float>::AddMatMat(*(void *)(a1 + 328) + v10, (uint64_t)&v32, CblasNoTrans, v30, CblasNoTrans, 1.0, 0.0);
      uint64_t v32 = &unk_1F0A472A0;
      memset(v33, 0, sizeof(v33));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v32);
      v13 += v14;
      v12 -= v14;
      v11 += 4 * v14;
      v10 += 48;
    }
    while (48 * v27 != v10);
    uint64_t v18 = 0;
    do
    {
      if (v15 >= 1)
      {
        for (int i = 0; i != v15; ++i)
        {
          uint64_t v20 = *(void *)(a1 + 328) + 48 * v18;
          int v21 = *(_DWORD *)(a1 + 88);
          int v22 = *(_DWORD *)(a1 + 92);
          int v23 = *(_DWORD *)(v20 + 28) - v21 * i;
          uint64_t v24 = *(void *)(v20 + 32);
          v33[0] = *(void *)(v20 + 8) + 4 * v21 * i;
          LODWORD(v33[1]) = v21;
          *(void *)((char *)&v33[1] + 4) = *(void *)(v20 + 20);
          HIDWORD(v33[2]) = v23;
          v33[3] = v24;
          LODWORD(v20) = v22 * v18 + *(_DWORD *)(a1 + 96) * i;
          uint64_t v25 = *(void *)(a5 + 8) + 4 * v20;
          LODWORD(v20) = *(_DWORD *)(a5 + 28) - v20;
          uint64_t v26 = *(void *)(a5 + 32);
          LODWORD(v31[2]) = v21;
          *(void *)((char *)&v31[2] + 4) = *(void *)(a5 + 20);
          HIDWORD(v31[3]) = v20;
          v31[4] = v26;
          uint64_t v32 = &unk_1F0A472A0;
          v31[0] = &unk_1F0A472A0;
          v31[1] = v25;
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)v31, (uint64_t)&v32, 111, 1.0, 1.0);
          v31[0] = &unk_1F0A472A0;
          memset(&v31[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v31);
          uint64_t v32 = &unk_1F0A472A0;
          memset(v33, 0, sizeof(v33));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v32);
        }
      }
      ++v18;
    }
    while (v18 != v27);
  }
}

void sub_1B1F05A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _OWORD *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  *a8 = 0u;
  a8[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::ConvolutionalComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v37, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v37);
    if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v37[2]))
      {
        case 9:
          goto LABEL_85;
        case 0xA:
          BOOL v6 = v37[0] == (void *)0x694468637461503CLL && LOWORD(v37[1]) == 15981;
          uint64_t v7 = a1 + 88;
          if (!v6) {
            goto LABEL_113;
          }
          goto LABEL_75;
        case 0xB:
          BOOL v21 = v37[0] == (void *)0x745368637461503CLL && *(void **)((char *)v37 + 3) == (void *)0x3E70657453686374;
          uint64_t v7 = a1 + 92;
          if (!v21) {
            goto LABEL_84;
          }
          goto LABEL_75;
        case 0xD:
          BOOL v22 = v37[0] == (void *)0x745368637461503CLL && *(void **)((char *)v37 + 5) == (void *)0x3E65646972745368;
          uint64_t v7 = a1 + 96;
          if (!v22) {
            goto LABEL_84;
          }
          goto LABEL_75;
        case 0xF:
          BOOL v20 = v37[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v37 + 7) == (void *)0x3E66656F43657461;
          uint64_t v13 = (float *)(a1 + 288);
          if (!v20) {
            goto LABEL_84;
          }
          goto LABEL_105;
        case 0x12:
          goto LABEL_91;
        case 0x13:
          BOOL v24 = v37[0] == (void *)0x61654C736169423CLL
             && v37[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v37[1] + 3) == (void *)0x3E66656F43657461;
          uint64_t v13 = (float *)(a1 + 292);
          if (v24) {
            goto LABEL_105;
          }
          if (HIBYTE(v37[2]) == 18)
          {
LABEL_91:
            if (v37[0] == (void *)0x6E6569646172473CLL
              && v37[1] == (void *)0x7079546D726F4E74
              && LOWORD(v37[2]) == 15973)
            {
              goto LABEL_110;
            }
          }
          else
          {
LABEL_84:
            if (HIBYTE(v37[2]) != 9) {
              goto LABEL_113;
            }
LABEL_85:
            BOOL v25 = v37[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v37[1]) == 62;
            uint64_t v13 = (float *)(a1 + 296);
            if (v25) {
              goto LABEL_105;
            }
          }
          if (HIBYTE(v37[2]) != 9) {
            goto LABEL_113;
          }
          uint64_t v19 = v37;
          break;
        default:
          goto LABEL_113;
      }
      goto LABEL_100;
    }
    int v8 = v37[1];
    if (v37[1] != (void *)10
      || (*(void *)v37[0] == 0x694468637461503CLL ? (BOOL v9 = *((unsigned __int16 *)v37[0] + 4) == 15981) : (BOOL v9 = 0),
          uint64_t v7 = a1 + 88,
          !v9))
    {
      if (v37[1] == (void *)11)
      {
        BOOL v10 = *(void *)v37[0] == 0x745368637461503CLL && *(void *)((char *)v37[0] + 3) == 0x3E70657453686374;
        uint64_t v7 = a1 + 92;
        if (v10) {
          goto LABEL_75;
        }
        int v8 = v37[1];
      }
      if (v8 != (void *)13) {
        goto LABEL_26;
      }
      BOOL v11 = *(void *)v37[0] == 0x745368637461503CLL && *(void *)((char *)v37[0] + 5) == 0x3E65646972745368;
      uint64_t v7 = a1 + 96;
      if (!v11)
      {
        int v8 = v37[1];
LABEL_26:
        if (v8 == (void *)15)
        {
          BOOL v12 = *(void *)v37[0] == 0x61526E7261654C3CLL && *(void *)((char *)v37[0] + 7) == 0x3E66656F43657461;
          uint64_t v13 = (float *)(a1 + 288);
          if (!v12)
          {
            int v8 = v37[1];
            goto LABEL_32;
          }
LABEL_105:
          kaldi::ReadBasicType<float>(a2, a3, v13);
          goto LABEL_106;
        }
LABEL_32:
        if (v8 == (void *)19)
        {
          BOOL v15 = *(void *)v37[0] == 0x61654C736169423CLL
             && *((void *)v37[0] + 1) == 0x6F43657461526E72
             && *(void *)((char *)v37[0] + 11) == 0x3E66656F43657461;
          uint64_t v13 = (float *)(a1 + 292);
          if (v15) {
            goto LABEL_105;
          }
          int v8 = v37[1];
        }
        if (v8 == (void *)9)
        {
          BOOL v16 = *(void *)v37[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v37[0] + 8) == 62;
          uint64_t v13 = (float *)(a1 + 296);
          if (v16) {
            goto LABEL_105;
          }
          int v8 = v37[1];
        }
        if (v8 == (void *)18)
        {
          if (*(void *)v37[0] == 0x6E6569646172473CLL
            && *((void *)v37[0] + 1) == 0x7079546D726F4E74
            && *((_WORD *)v37[0] + 8) == 15973)
          {
LABEL_110:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v36 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p);
            *(_DWORD *)(a1 + 184) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v36) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_106;
          }
          int v8 = v37[1];
        }
        if (v8 != (void *)9) {
          goto LABEL_113;
        }
        uint64_t v19 = (void **)v37[0];
LABEL_100:
        unsigned int v28 = *v19;
        int v29 = *((unsigned __int8 *)v19 + 8);
        BOOL v30 = v28 == (void *)0x6461724778614D3CLL && v29 == 62;
        uint64_t v13 = (float *)(a1 + 188);
        if (!v30)
        {
LABEL_113:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (SHIBYTE(v37[2]) >= 0) {
            int v33 = v37;
          }
          else {
            int v33 = (void **)v37[0];
          }
          if (SHIBYTE(v37[2]) >= 0) {
            uint64_t v34 = HIBYTE(v37[2]);
          }
          else {
            uint64_t v34 = (uint64_t)v37[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_105;
      }
    }
LABEL_75:
    kaldi::ReadBasicType<int>(a2, a3, v7);
LABEL_106:
    if (SHIBYTE(v37[2]) < 0) {
      operator delete(v37[0]);
    }
  }
  kaldi::CuMatrix<float>::Read(a1 + 104, a2, a3, 0);
  return kaldi::CuVector<float>::Read(a1 + 152, a2, a3);
}

void sub_1B1F06080()
{
}

void *kaldi::nnet1::ConvolutionalComponent::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<PatchDim>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PatchStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PatchStride>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 184), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1B1F06240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::NumParams(kaldi::nnet1::ConvolutionalComponent *this)
{
  return (*((_DWORD *)this + 42) + *((_DWORD *)this + 30) * *((_DWORD *)this + 31));
}

const void **kaldi::nnet1::ConvolutionalComponent::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  int v5 = *(_DWORD *)(a1 + 120) * *(_DWORD *)(a1 + 124);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = (char *)*a2;
  LODWORD(v9) = v5;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v8, a1 + 104);
  int v6 = *(_DWORD *)(a1 + 168);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = (char *)*a2 + 4 * v5;
  LODWORD(v9) = v6;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 152), (uint64_t)&v8);
}

void *kaldi::nnet1::ConvolutionalComponent::SetParams(_DWORD *a1, char **a2)
{
  (*(void (**)(_DWORD *))(*(void *)a1 + 176))(a1);
  int v4 = a1[30] * a1[31];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = *a2;
  LODWORD(v8) = v4;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 26), &v7);
  int v5 = a1[42];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = &(*a2)[4 * v4];
  LODWORD(v8) = v5;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 38, (uint64_t)&v7);
}

float kaldi::nnet1::ConvolutionalComponent::SumParams(kaldi::nnet1::ConvolutionalComponent *this)
{
  float v2 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 104);
  double v3 = kaldi::CuVectorBase<float>::Sum((uint64_t)this + 152);
  return v2 + *(float *)&v3;
}

uint64_t kaldi::nnet1::ConvolutionalComponent::PerturbParams(kaldi::nnet1::ConvolutionalComponent *this, float a2)
{
  double v3 = this;
  kaldi::CuMatrix<float>::CuMatrix(v6, *((unsigned int *)this + 31), *((unsigned int *)this + 30), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)v3 + 104, (uint64_t)v6, 111, a2, 1.0);
  double v3 = (kaldi::nnet1::ConvolutionalComponent *)((char *)v3 + 152);
  kaldi::CuVector<float>::CuVector(v5, (uint64_t)v3);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v5);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)v3, (uint64_t)v5, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v5);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v6);
}

void sub_1B1F064A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = a1[30] * a1[31];
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = (uint64_t)*a4;
  LODWORD(v12) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v11, *(void *)(v8 + 192));
  int v9 = a1[42];
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = (uint64_t)*a4 + 4 * (int)a3;
  LODWORD(v12) = v9;
  kaldi::CuVectorBase<float>::CopyToVec<float>(*(const void ***)(v8 + 216), (uint64_t)&v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
}

void kaldi::nnet1::ConvolutionalComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::ConvolutionalComponent::EnsureCorrs((kaldi::nnet1::ConvolutionalComponent *)a1);
  int v10 = (*(_DWORD *)(a1 + 96) - *(_DWORD *)(a1 + 88)) / *(_DWORD *)(a1 + 92);
  int v11 = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(*(void *)(a1 + 352) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v12 = *(void *)(a1 + 192) + 48 * a5;
  *(void *)(v12 + 32) = a4;
  *(void *)(*(void *)(a1 + 216) + 32 * a5 + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(v12);
  kaldi::CuVectorBase<float>::SetZero(*(void *)(a1 + 216) + 32 * a5);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v13 = 0;
    int v14 = 0;
    unsigned int v15 = 0;
    uint64_t v16 = 48 * (v10 + 1);
    do
    {
      uint64_t v17 = *(void *)(a3 + 8) + 4 * v15;
      int v18 = v14 + *(_DWORD *)(a3 + 28);
      uint64_t v19 = *(void *)(a3 + 32);
      LODWORD(v20[2]) = v11;
      *(void *)((char *)&v20[2] + 4) = *(void *)(a3 + 20);
      HIDWORD(v20[3]) = v18;
      v20[4] = v19;
      v20[0] = &unk_1F0A472A0;
      v20[1] = v17;
      kaldi::CuMatrixBase<float>::AddMatMat(*(void *)(a1 + 192) + 48 * a5, (uint64_t)v20, CblasTrans, *(void *)(a1 + 304) + v13, CblasNoTrans, 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(void *)(a1 + 216) + 32 * a5, (uint64_t)v20, 1.0, 1.0);
      v20[0] = &unk_1F0A472A0;
      memset(&v20[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v20);
      v15 += v11;
      v14 -= v11;
      v13 += 48;
    }
    while (v16 != v13);
  }
}

void sub_1B1F0676C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *float v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 188) = a3;
  *(_DWORD *)(result + 184) = a2;
  *(unsigned char *)(result + 376) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalComponent::NormalizeGradients(kaldi::nnet1::ConvolutionalComponent *this, float a2, int a3)
{
  float v3 = a2;
  int v5 = *((_DWORD *)this + 46);
  if (v5 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      uint64_t v8 = a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 24) + 48 * a3, *((void *)this + 30) + 48 * a3, a2);
      uint64_t v9 = *((void *)this + 27) + 32 * v8;
      uint64_t v10 = *((void *)this + 33) + 32 * v8;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, v10, v3);
    }
  }
  else if (v5 == 2)
  {
    if (a2 > 0.0)
    {
      uint64_t v11 = a3;
      if (*((unsigned char *)this + 84)) {
        float v3 = (float)*(int *)(*((void *)this + 44) + 4 * a3) * a2;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 24) + 48 * a3, (int *)(*((void *)this + 30) + 48 * a3), v3);
      uint64_t v13 = *((void *)this + 27) + 32 * v11;
      int v14 = (void *)(*((void *)this + 33) + 32 * v11);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v13, v14, v3);
    }
  }
  else if (v5 == 1 && a2 > 0.0)
  {
    uint64_t v6 = a3;
    if (*((unsigned char *)this + 84)) {
      float v3 = (float)*(int *)(*((void *)this + 44) + 4 * a3) * a2;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 24) + 48 * a3, v3);
    uint64_t v12 = *((void *)this + 27) + 32 * v6;
    kaldi::nnet1::UpdatableComponent::ClipGradient(v12, v3);
  }
}

void kaldi::nnet1::ConvolutionalComponent::UpdateWeights(kaldi::nnet1::ConvolutionalComponent *this, void *a2, int a3)
{
  kaldi::nnet1::ConvolutionalComponent::EnsureCorrs(this);
  int v6 = (*((_DWORD *)this + 24) - *((_DWORD *)this + 22)) / *((_DWORD *)this + 23);
  float v7 = *((float *)this + 14);
  uint64_t v8 = *((unsigned int *)this + 20);
  if (a3 >= 0) {
    int v9 = a3;
  }
  else {
    int v9 = *((_DWORD *)this + 20);
  }
  if (v8 == 1) {
    int v9 = 0;
  }
  uint64_t v10 = v9;
  uint64_t v11 = *((void *)this + 24);
  uint64_t v12 = v11 + 48 * v9;
  *(void *)(v12 + 32) = a2;
  *(void *)(*((void *)this + 27) + 32 * v9 + 24) = a2;
  *(void *)(*((void *)this + 30) + 48 * v9 + 32) = a2;
  *(void *)(*((void *)this + 33) + 32 * v9 + 24) = a2;
  if (v9 == v8)
  {
    kaldi::CuMatrixBase<float>::AddMat(v12, v11, 111, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*((void *)this + 27) + 32 * v10, *((void *)this + 27), 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      uint64_t v13 = 1;
      uint64_t v14 = 32;
      uint64_t v15 = 48;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 24) + 48 * (int)v10, *((void *)this + 24) + v15, 111, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((void *)this + 27) + 32 * v10, *((void *)this + 27) + v14, 1.0, 1.0);
        ++v13;
        v15 += 48;
        v14 += 32;
      }
      while (v13 < *((int *)this + 20));
    }
    uint64_t v16 = (int *)*((void *)this + 44);
    v16[v10] = 0;
    if ((int)v8 >= 1)
    {
      int v17 = 0;
      int v18 = v16;
      do
      {
        int v19 = *v18++;
        v17 += v19;
        v16[v10] = v17;
        --v8;
      }
      while (v8);
    }
  }
  if (*((unsigned char *)this + 84)) {
    float v7 = v7 / (float)*(int *)(*((void *)this + 44) + 4 * v10);
  }
  float v20 = 1.0 / (double)(v6 + 1);
  kaldi::CuMatrixBase<float>::Scale(*((void *)this + 24) + 48 * (int)v10, v20);
  kaldi::CuVectorBase<float>::Scale(*((void *)this + 27) + 32 * v10, v20);
  if (*((float *)this + 47) >= 0.0) {
    (*(void (**)(kaldi::nnet1::ConvolutionalComponent *, uint64_t))(*(void *)this + 248))(this, v10);
  }
  *((void *)this + 17) = a2;
  *((void *)this + 22) = a2;
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 104, *((void *)this + 24) + 48 * (int)v10, 111, -(float)(v7 * *((float *)this + 72)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 152, *((void *)this + 27) + 32 * v10, -(float)(v7 * *((float *)this + 73)), 1.0);
  if (*((float *)this + 74) > 0.0)
  {
    kaldi::CuMatrix<float>::CuMatrix(v27, (char *)this + 104, 111);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)v27, (uint64_t)this + 104);
    uint64_t v21 = *((unsigned int *)this + 31);
    void v25[2] = 0;
    uint64_t v26 = 0;
    v25[0] = &unk_1F0A517C0;
    v25[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v25, v21, 0);
    uint64_t v26 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v25, (uint64_t)v27, 1.0, 0.0);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v25, 0.5);
    kaldi::CuVector<float>::CuVector(v24, (uint64_t)v25);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v24, 1.0 / *((float *)this + 74));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v24, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v24);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)this + 104, (uint64_t)v24);
    kaldi::CuVector<float>::~CuVector(v24);
    kaldi::CuVector<float>::~CuVector(v25);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v27);
  }
  BOOL v22 = (unsigned char *)*((void *)this + 44);
  if (v10 == *((_DWORD *)this + 20))
  {
    int v23 = (unsigned char *)*((void *)this + 45);
    if (v22 != v23) {
      bzero(v22, ((v23 - v22 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v22[4 * v10] = 0;
  }
}

void sub_1B1F06CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MaxPoolingComponent::Copy(kaldi::nnet1::MaxPoolingComponent *this)
{
}

void sub_1B1F06D90(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C401AC3E4D5);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::GetType(kaldi::nnet1::MaxPoolingComponent *this)
{
  return 2052;
}

void kaldi::nnet1::MaxPoolingComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  float v3 = a2 + 4;
  uint64_t v4 = a1 + 56;
  uint64_t v5 = a1 + 52;
  uint64_t v6 = a1 + 48;
  while (1)
  {
    if ((*((unsigned char *)v3 + *(void *)(*a2 - 24)) & 2) != 0)
    {
      char v7 = HIBYTE(v28);
      goto LABEL_45;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v26);
    char v7 = HIBYTE(v28);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
      if (HIBYTE(v28) == 10)
      {
        BOOL v14 = v26 == (_WORD *)0x7A69536C6F6F503CLL && (unsigned __int16)v27 == 15973;
        uint64_t v9 = v6;
        if (!v14)
        {
          BOOL v15 = v26 == (_WORD *)0x6574536C6F6F503CLL && (unsigned __int16)v27 == 15984;
          uint64_t v9 = v5;
          if (!v15) {
            goto LABEL_48;
          }
        }
      }
      else
      {
        if (HIBYTE(v28) != 12) {
          goto LABEL_48;
        }
        BOOL v8 = v26 == (_WORD *)0x7274536C6F6F503CLL && v27 == 1046832233;
        uint64_t v9 = v4;
        if (!v8)
        {
          uint64_t v16 = &v26;
          goto LABEL_40;
        }
      }
      goto LABEL_36;
    }
    uint64_t v10 = v27;
    if (v27 == 10)
    {
      BOOL v11 = *(void *)v26 == 0x7A69536C6F6F503CLL && v26[4] == 15973;
      uint64_t v9 = v6;
      if (v11) {
        goto LABEL_36;
      }
      BOOL v12 = *(void *)v26 == 0x6574536C6F6F503CLL && v26[4] == 15984;
      uint64_t v9 = v5;
      if (v12) {
        goto LABEL_36;
      }
      uint64_t v10 = v27;
    }
    if (v10 != 12) {
      goto LABEL_48;
    }
    BOOL v13 = *(void *)v26 == 0x7274536C6F6F503CLL && *((_DWORD *)v26 + 2) == 1046832233;
    uint64_t v9 = v4;
    if (!v13) {
      break;
    }
LABEL_36:
    kaldi::ReadBasicType<int>(a2, 0, v9);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (v27 != 12) {
    goto LABEL_48;
  }
  uint64_t v16 = (_WORD **)v26;
LABEL_40:
  uint64_t v17 = (uint64_t)*v16;
  int v18 = *((_DWORD *)v16 + 2);
  if (v17 != 0x6E6F706D6F432F3CLL || v18 != 1047817829)
  {
LABEL_48:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    float v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unknown token ", 14);
    if (v28 >= 0) {
      uint64_t v21 = &v26;
    }
    else {
      uint64_t v21 = (_WORD **)v26;
    }
    if (v28 >= 0) {
      uint64_t v22 = HIBYTE(v28);
    }
    else {
      uint64_t v22 = v27;
    }
    int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    BOOL v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" (PoolSize|PoolStep|PoolStride)", 31);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
LABEL_45:
  if (v7 < 0) {
    operator delete(v26);
  }
}

void sub_1B1F0705C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::WriteData(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<PoolSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStride>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

void kaldi::nnet1::MaxPoolingComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3 = (a1[2] / a1[14] - a1[12]) / a1[13];
  if ((v3 & 0x80000000) == 0)
  {
    int v7 = 0;
    do
    {
      int v8 = a1[14];
      uint64_t v9 = *(void *)(a3 + 8) + 4 * (v8 * v7);
      int v10 = *(_DWORD *)(a3 + 28) - v8 * v7;
      uint64_t v11 = *(void *)(a3 + 32);
      LODWORD(v19[2]) = v8;
      *(void *)((char *)&v19[2] + 4) = *(void *)(a3 + 20);
      HIDWORD(v19[3]) = v10;
      v19[4] = v11;
      v19[0] = &unk_1F0A472A0;
      v19[1] = v9;
      kaldi::CuMatrixBase<float>::Set((uint64_t)v19, -1.0e20);
      if ((int)a1[12] >= 1)
      {
        int v12 = 0;
        do
        {
          unsigned int v13 = (v12 + v7 * a1[13]) * a1[14];
          uint64_t v14 = *(void *)(a2 + 8) + 4 * v13;
          unsigned int v15 = *(_DWORD *)(a2 + 28) - v13;
          uint64_t v16 = *(void *)(a2 + 32);
          LODWORD(v18[2]) = a1[14];
          *(void *)((char *)&v18[2] + 4) = *(void *)(a2 + 20);
          HIDWORD(v18[3]) = v15;
          v18[4] = v16;
          v18[0] = &unk_1F0A472A0;
          v18[1] = v14;
          kaldi::CuMatrixBase<float>::Max((uint64_t)v19, (uint64_t)v18);
          v18[0] = &unk_1F0A472A0;
          memset(&v18[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v18);
          ++v12;
        }
        while (v12 < a1[12]);
      }
      v19[0] = &unk_1F0A472A0;
      memset(&v19[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v19);
    }
    while (v7++ != v3);
  }
}

void sub_1B1F072CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *uint64_t v6 = 0u;
  v6[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MaxPoolingComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = a1[13];
  uint64_t v8 = (a1[2] / a1[14]);
  int v9 = a1[12];
  __x[0] = 0;
  std::vector<int>::vector(&v51, (int)v8, __x);
  kaldi::CuMatrixBase<float>::SetZero(a5);
  uint64_t v38 = v8;
  int v10 = a1;
  int v39 = ((int)v8 - v9) / v7;
  if ((v39 & 0x80000000) == 0)
  {
    int v11 = 0;
    int v12 = a1[12];
    do
    {
      if (v12 >= 1)
      {
        uint64_t v13 = 0;
        uint64_t v14 = &unk_1F0A472A0;
        unsigned int v15 = &unk_1F0A472A0;
        do
        {
          int v17 = v10[13];
          int v16 = v10[14];
          unsigned int v18 = (v13 + v11 * v17) * v16;
          uint64_t v19 = *(void *)(a2 + 8) + 4 * v18;
          unsigned int v20 = *(_DWORD *)(a2 + 28) - v18;
          uint64_t v21 = *(void *)(a2 + 32);
          *(void *)((char *)&v50[2] + 4) = *(void *)(a2 + 20);
          LODWORD(v50[2]) = v16;
          HIDWORD(v50[3]) = v20;
          void v50[4] = v21;
          v50[0] = v14;
          v50[1] = v19;
          uint64_t v22 = v14;
          uint64_t v23 = *(void *)(a3 + 8) + 4 * (v16 * v11);
          LODWORD(v21) = *(_DWORD *)(a3 + 28) - v16 * v11;
          uint64_t v24 = *(void *)(a3 + 32);
          *(void *)((char *)&v49[2] + 4) = *(void *)(a3 + 20);
          LODWORD(v49[2]) = v16;
          HIDWORD(v49[3]) = v21;
          v49[4] = v24;
          v49[0] = v15;
          v49[1] = v23;
          BOOL v25 = v15;
          uint64_t v26 = *(void *)(a5 + 8) + 4 * v18;
          unsigned int v27 = *(_DWORD *)(a5 + 28) - v18;
          uint64_t v28 = *(void *)(a5 + 32);
          LODWORD(v48[2]) = v16;
          *(void *)((char *)&v48[2] + 4) = *(void *)(a5 + 20);
          HIDWORD(v48[3]) = v27;
          v48[4] = v28;
          v48[0] = &unk_1F0A472A0;
          v48[1] = v26;
          uint64_t v29 = *(void *)(a4 + 8) + 4 * (v16 * v11);
          LODWORD(v19) = *(_DWORD *)(a4 + 28) - v16 * v11;
          uint64_t v30 = *(void *)(a4 + 32);
          LODWORD(v44[1]) = v16;
          *(void *)((char *)&v44[1] + 4) = *(void *)(a4 + 20);
          HIDWORD(v44[2]) = v19;
          void v44[3] = v30;
          int32x2_t v43 = (int32x2_t)&unk_1F0A472A0;
          v44[0] = v29;
          kaldi::CuMatrix<float>::CuMatrix(__x, &v43, 111);
          int32x2_t v43 = (int32x2_t)&unk_1F0A472A0;
          memset(v44, 0, sizeof(v44));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v43);
          memset(v44, 0, sizeof(v44));
          int32x2_t v43 = (int32x2_t)&unk_1F0A51768;
          char v45 = 0;
          kaldi::CuMatrixBase<float>::EqualElementMask((uint64_t)v50, (uint64_t)v49, &v43);
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)__x, (uint64_t)&v43);
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)v48, (uint64_t)__x, 111, 1.0, 1.0);
          ++v51.__begin_[v13 + v11 * v17];
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v43);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__x);
          v48[0] = &unk_1F0A472A0;
          memset(&v48[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v48);
          v49[0] = v25;
          memset(&v49[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v49);
          v50[0] = v22;
          memset(&v50[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v50);
          unsigned int v15 = v25;
          uint64_t v14 = v22;
          int v10 = a1;
          int v12 = a1[12];
          ++v13;
        }
        while ((int)v13 < v12);
      }
    }
    while (v11++ != v39);
  }
  if ((int)v38 >= 1)
  {
    for (uint64_t i = 0; i != v38; ++i)
    {
      int v33 = v10[14];
      uint64_t v34 = *(void *)(a5 + 8) + 4 * (v33 * i);
      int v35 = *(_DWORD *)(a5 + 28) - v33 * i;
      uint64_t v36 = *(void *)(a5 + 32);
      LODWORD(v47[1]) = v33;
      *(void *)((char *)&v47[1] + 4) = *(void *)(a5 + 20);
      HIDWORD(v47[2]) = v35;
      void v47[3] = v36;
      *(void *)float64x2_t __x = &unk_1F0A472A0;
      v47[0] = v34;
      float v37 = 1.0 / (double)v51.__begin_[i];
      kaldi::CuMatrixBase<float>::Scale((uint64_t)__x, v37);
      *(void *)float64x2_t __x = &unk_1F0A472A0;
      memset(v47, 0, sizeof(v47));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)__x);
      int v10 = a1;
    }
  }
  if (v51.__begin_)
  {
    v51.__end_ = v51.__begin_;
    operator delete(v51.__begin_);
  }
}

void sub_1B1F07734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  float v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, "<PoolSize>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 48);
  kaldi::ExpectToken(a2, a3, "<PoolStep>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 52);
  kaldi::ExpectToken(a2, a3, "<PoolStride>");
  return kaldi::ReadBasicType<int>(a2, a3, a1 + 56);
}

void kaldi::nnet1::TemporalMaxPoolingComponent::Copy(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
}

void sub_1B1F07928(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40DBBC96B9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::GetType(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
  return 2058;
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::OutputRowCount(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
  return 1;
}

void kaldi::nnet1::TemporalMaxPoolingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::Set(a3, -1.0e20);
  if (*(int *)(a2 + 20) >= 1)
  {
    int v5 = 0;
    do
    {
      unsigned int v6 = *(_DWORD *)(a2 + 24);
      uint64_t v7 = *(void *)(a2 + 8) + 4 * (int)(v6 * v5);
      int v8 = *(_DWORD *)(a2 + 28) - v6 * v5;
      uint64_t v9 = *(void *)(a2 + 32);
      DWORD2(v11) = *(_DWORD *)(a2 + 16);
      HIDWORD(v11) = 1;
      *(void *)&long long v12 = __PAIR64__(v8, v6);
      *((void *)&v12 + 1) = v9;
      int v10 = &unk_1F0A472A0;
      *(void *)&long long v11 = v7;
      kaldi::CuMatrixBase<float>::Max(a3, (uint64_t)&v10);
      ++v5;
      int v10 = &unk_1F0A472A0;
      long long v11 = 0u;
      long long v12 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v10);
    }
    while (v5 < *(_DWORD *)(a2 + 20));
  }
}

void sub_1B1F07A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *float v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v18 = 0u;
  long long v17 = 0u;
  int32x2_t v16 = (int32x2_t)&unk_1F0A51768;
  char v19 = 0;
  unsigned int v7 = *(_DWORD *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v13 = *(void *)(a3 + 8);
  long long v12 = &unk_1F0A472D0;
  uint64_t v14 = v7;
  uint64_t v15 = v8;
  kaldi::CuMatrixBase<float>::EqualElementColMask(a2, (uint64_t)&v12, &v16);
  unsigned int v9 = *(_DWORD *)(a4 + 16);
  uint64_t v10 = *(void *)(a4 + 32);
  uint64_t v13 = *(void *)(a4 + 8);
  long long v12 = &unk_1F0A472D0;
  uint64_t v14 = v9;
  uint64_t v15 = v10;
  kaldi::CuMatrixBase<float>::MulColsVec((uint64_t)&v16, (uint64_t)&v12);
  kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)&v16, 111, 1.0, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v16);
}

void sub_1B1F07B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePooling2DComponent::Copy(kaldi::nnet1::AveragePooling2DComponent *this)
{
}

void sub_1B1F07C30(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C406EF1CAE1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AveragePooling2DComponent::GetType(kaldi::nnet1::AveragePooling2DComponent *this)
{
  return 2051;
}

void kaldi::nnet1::AveragePooling2DComponent::InitData(uint64_t a1, uint64_t *a2)
{
  long long v35 = 0uLL;
  uint64_t v36 = 0;
  int v3 = a2 + 4;
  uint64_t v4 = a1 + 68;
  uint64_t v5 = a1 + 64;
  uint64_t v32 = a1 + 60;
  uint64_t v33 = a1 + 56;
  uint64_t v6 = a1 + 52;
  uint64_t v7 = a1 + 48;
  while (1)
  {
    if ((*((unsigned char *)v3 + *(void *)(*a2 - 24)) & 2) != 0)
    {
      char v8 = HIBYTE(v36);
      goto LABEL_77;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v35);
    char v8 = HIBYTE(v36);
    if (SHIBYTE(v36) < 0) {
      break;
    }
    if (HIBYTE(v36) == 10)
    {
      BOOL v16 = (void)v35 == 0x654C5870616D463CLL && WORD4(v35) == 15982;
      uint64_t v10 = v7;
      if (v16) {
        goto LABEL_59;
      }
      BOOL v17 = (void)v35 == 0x654C5970616D463CLL && WORD4(v35) == 15982;
      uint64_t v10 = v6;
      if (v17) {
        goto LABEL_59;
      }
      BOOL v18 = (void)v35 == 0x654C586C6F6F503CLL && WORD4(v35) == 15982;
      uint64_t v10 = v33;
      if (v18) {
        goto LABEL_59;
      }
      goto LABEL_43;
    }
    if (HIBYTE(v36) != 11)
    {
      if (HIBYTE(v36) == 12)
      {
        uint64_t v23 = &v35;
        goto LABEL_72;
      }
      goto LABEL_80;
    }
    BOOL v9 = (void)v35 == 0x7453586C6F6F503CLL && *(void *)((char *)&v35 + 3) == 0x3E70657453586C6FLL;
    uint64_t v10 = v5;
    if (!v9)
    {
      BOOL v11 = (void)v35 == 0x7453596C6F6F503CLL && *(void *)((char *)&v35 + 3) == 0x3E70657453596C6FLL;
      uint64_t v10 = v4;
      if (!v11) {
        goto LABEL_80;
      }
    }
LABEL_59:
    kaldi::ReadBasicType<int>(a2, 0, v10);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v12 = *((void *)&v35 + 1);
  if (*((void *)&v35 + 1) != 10) {
    goto LABEL_48;
  }
  BOOL v13 = *(void *)v35 == 0x654C5870616D463CLL && *(_WORD *)(v35 + 8) == 15982;
  uint64_t v10 = v7;
  if (v13) {
    goto LABEL_59;
  }
  BOOL v14 = *(void *)v35 == 0x654C5970616D463CLL && *(_WORD *)(v35 + 8) == 15982;
  uint64_t v10 = v6;
  if (v14) {
    goto LABEL_59;
  }
  BOOL v15 = *(void *)v35 == 0x654C586C6F6F503CLL && *(_WORD *)(v35 + 8) == 15982;
  uint64_t v10 = v33;
  if (v15) {
    goto LABEL_59;
  }
  if ((v36 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v36) != 10) {
      goto LABEL_80;
    }
LABEL_43:
    BOOL v19 = (void)v35 == 0x654C596C6F6F503CLL && WORD4(v35) == 15982;
    uint64_t v10 = v32;
    if (!v19) {
      goto LABEL_80;
    }
    goto LABEL_59;
  }
  BOOL v22 = *(void *)v35 == 0x654C596C6F6F503CLL && *(_WORD *)(v35 + 8) == 15982;
  uint64_t v10 = v32;
  if (v22) {
    goto LABEL_59;
  }
  uint64_t v12 = *((void *)&v35 + 1);
LABEL_48:
  if (v12 != 11) {
    goto LABEL_70;
  }
  BOOL v20 = *(void *)v35 == 0x7453586C6F6F503CLL && *(void *)(v35 + 3) == 0x3E70657453586C6FLL;
  uint64_t v10 = v5;
  if (v20) {
    goto LABEL_59;
  }
  uint64_t v12 = *((void *)&v35 + 1);
  if (*((void *)&v35 + 1) != 11) {
    goto LABEL_70;
  }
  BOOL v21 = *(void *)v35 == 0x7453596C6F6F503CLL && *(void *)(v35 + 3) == 0x3E70657453596C6FLL;
  uint64_t v10 = v4;
  if (v21) {
    goto LABEL_59;
  }
  if ((v36 & 0x8000000000000000) == 0) {
    goto LABEL_80;
  }
LABEL_70:
  if (v12 != 12) {
    goto LABEL_80;
  }
  uint64_t v23 = (long long *)v35;
LABEL_72:
  uint64_t v24 = *(void *)v23;
  int v25 = *((_DWORD *)v23 + 2);
  if (v24 != 0x6E6F706D6F432F3CLL || v25 != 1047817829)
  {
LABEL_80:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    unsigned int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Unknown token ", 14);
    if (v36 >= 0) {
      uint64_t v28 = &v35;
    }
    else {
      uint64_t v28 = (long long *)v35;
    }
    if (v36 >= 0) {
      uint64_t v29 = HIBYTE(v36);
    }
    else {
      uint64_t v29 = *((void *)&v35 + 1);
    }
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" (FmapXLen|FmapYLen|PoolXLen|PoolYLen|PoolXStep|PoolYStep)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v34);
  }
LABEL_77:
  if (v8 < 0) {
    operator delete((void *)v35);
  }
}

void sub_1B1F08054(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::AveragePooling2DComponent::WriteData(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<FmapXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolXStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolYStep>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

float kaldi::nnet1::AveragePooling2DComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6 = a1[12];
  int v5 = a1[13];
  int v7 = a1[2] / (v5 * v6);
  int v8 = a1[16];
  int v28 = a1[15];
  int v29 = a1[14];
  int v9 = a1[17];
  kaldi::CuMatrixBase<float>::SetZero(a3);
  int v30 = v7;
  if (v7 >= 1)
  {
    int v36 = 0;
    int v33 = (v6 - v29) / v8;
    int v31 = (v5 - v28) / v9;
    int v32 = 0;
    uint64_t v40 = (v33 + 1);
    uint64_t v34 = (v31 + 1);
    do
    {
      if ((v31 & 0x80000000) == 0)
      {
        uint64_t v37 = 0;
        int v10 = v32;
        do
        {
          int v35 = v10;
          if ((v33 & 0x80000000) == 0)
          {
            uint64_t v11 = 0;
            uint64_t v39 = ((v36 * v34 + v37) * v40);
            do
            {
              uint64_t v41 = v11;
              uint64_t v12 = *(void *)(a3 + 8) + 4 * (v11 + v39);
              int v13 = *(_DWORD *)(a3 + 28) - (v11 + v39);
              uint64_t v14 = *(void *)(a3 + 32);
              LODWORD(v43[2]) = 1;
              *(void *)((char *)&v43[2] + 4) = *(void *)(a3 + 20);
              HIDWORD(v43[3]) = v13;
              int v43[4] = v14;
              v43[0] = &unk_1F0A472A0;
              v43[1] = v12;
              int v15 = a1[15];
              if (v15 >= 1)
              {
                int v16 = 0;
                int v17 = 0;
                int v18 = a1[14];
                int v19 = a1[12] * (v37 * a1[17] + v36 * a1[13]) + a1[16] * v41;
                do
                {
                  if (v18 >= 1)
                  {
                    int v20 = 0;
                    int v21 = -v19;
                    do
                    {
                      int v22 = a1[12];
                      uint64_t v23 = *(void *)(a2 + 8) + 4 * (v19 + v20 + v17 * v22);
                      int v24 = v21 + *(_DWORD *)(a2 + 28) + v16 * v22;
                      uint64_t v25 = *(void *)(a2 + 32);
                      LODWORD(v42[2]) = 1;
                      *(void *)((char *)&v42[2] + 4) = *(void *)(a2 + 20);
                      HIDWORD(v42[3]) = v24;
                      v42[4] = v25;
                      v42[0] = &unk_1F0A472A0;
                      v42[1] = v23;
                      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v43, (uint64_t)v42, 111, 1.0, 1.0);
                      v42[0] = &unk_1F0A472A0;
                      memset(&v42[1], 0, 32);
                      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v42);
                      ++v20;
                      int v18 = a1[14];
                      --v21;
                    }
                    while (v20 < v18);
                    int v15 = a1[15];
                  }
                  ++v17;
                  --v16;
                }
                while (v17 < v15);
              }
              v43[0] = &unk_1F0A472A0;
              memset(&v43[1], 0, 32);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v43);
              uint64_t v11 = v41 + 1;
            }
            while (v41 + 1 != v40);
          }
          int v10 = v35 + v40;
          ++v37;
        }
        while (v37 != v34);
      }
      v32 += v34 * v40;
      ++v36;
    }
    while (v36 != v30);
  }
  float v26 = 1.0 / (double)(v28 * v29);
  kaldi::CuMatrixBase<float>::Scale(a3, v26);
  return result;
}

void sub_1B1F084A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _OWORD *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  *(void *)(v17 - 128) = a13;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v17 - 128));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePooling2DComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a1[12];
  int v7 = a1[13];
  int v9 = a1[2] / (v7 * v8);
  int v10 = a1[14];
  int v11 = a1[15];
  int v13 = a1[16];
  int v12 = a1[17];
  kaldi::CuMatrixBase<float>::SetZero(a5);
  int v31 = v9;
  if (v9 >= 1)
  {
    int v37 = 0;
    int v34 = (v8 - v10) / v13;
    int v32 = (v7 - v11) / v12;
    int v33 = 0;
    float v14 = 1.0 / (double)(v11 * v10);
    uint64_t v41 = (v34 + 1);
    uint64_t v35 = (v32 + 1);
    do
    {
      if ((v32 & 0x80000000) == 0)
      {
        uint64_t v38 = 0;
        int v15 = v33;
        do
        {
          int v36 = v15;
          if ((v34 & 0x80000000) == 0)
          {
            uint64_t v16 = 0;
            uint64_t v40 = ((v37 * v35 + v38) * v41);
            do
            {
              uint64_t v42 = v16;
              uint64_t v17 = *(void *)(a4 + 8) + 4 * (v16 + v40);
              int v18 = *(_DWORD *)(a4 + 28) - (v16 + v40);
              uint64_t v19 = *(void *)(a4 + 32);
              LODWORD(v44[2]) = 1;
              *(void *)((char *)&v44[2] + 4) = *(void *)(a4 + 20);
              HIDWORD(v44[3]) = v18;
              void v44[4] = v19;
              v44[0] = &unk_1F0A472A0;
              v44[1] = v17;
              int v20 = a1[15];
              if (v20 >= 1)
              {
                int v21 = 0;
                int v22 = 0;
                int v23 = a1[14];
                int v24 = a1[12] * (v38 * a1[17] + v37 * a1[13]) + a1[16] * v42;
                do
                {
                  if (v23 >= 1)
                  {
                    int v25 = 0;
                    int v26 = -v24;
                    do
                    {
                      int v27 = a1[12];
                      uint64_t v28 = *(void *)(a5 + 8) + 4 * (v24 + v25 + v22 * v27);
                      int v29 = v26 + *(_DWORD *)(a5 + 28) + v21 * v27;
                      uint64_t v30 = *(void *)(a5 + 32);
                      LODWORD(v43[2]) = 1;
                      *(void *)((char *)&v43[2] + 4) = *(void *)(a5 + 20);
                      HIDWORD(v43[3]) = v29;
                      int v43[4] = v30;
                      v43[0] = &unk_1F0A472A0;
                      v43[1] = v28;
                      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v43, (uint64_t)v44, 111, v14, 1.0);
                      v43[0] = &unk_1F0A472A0;
                      memset(&v43[1], 0, 32);
                      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v43);
                      ++v25;
                      int v23 = a1[14];
                      --v26;
                    }
                    while (v25 < v23);
                    int v20 = a1[15];
                  }
                  ++v22;
                  --v21;
                }
                while (v22 < v20);
              }
              v44[0] = &unk_1F0A472A0;
              memset(&v44[1], 0, 32);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v44);
              uint64_t v16 = v42 + 1;
            }
            while (v42 + 1 != v41);
          }
          int v15 = v36 + v41;
          ++v38;
        }
        while (v38 != v35);
      }
      v33 += v35 * v41;
      ++v37;
    }
    while (v37 != v31);
  }
}

void sub_1B1F087E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _OWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  *int v27 = 0u;
  v27[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a22);
  a27 = a18;
  *a15 = 0u;
  a15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a27);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePooling2DComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, "<FmapXLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 48);
  kaldi::ExpectToken(a2, a3, "<FmapYLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 52);
  kaldi::ExpectToken(a2, a3, "<PoolXLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 56);
  kaldi::ExpectToken(a2, a3, "<PoolYLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 60);
  kaldi::ExpectToken(a2, a3, "<PoolXStep>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 64);
  kaldi::ExpectToken(a2, a3, "<PoolYStep>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 68);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"num_fmaps ", 10);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v6);
  }
}

void sub_1B1F08974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::MaxPooling2DComponent::Copy(kaldi::nnet1::MaxPooling2DComponent *this)
{
}

void sub_1B1F089D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C406EF1CAE1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPooling2DComponent::GetType(kaldi::nnet1::MaxPooling2DComponent *this)
{
  return 2053;
}

void kaldi::nnet1::MaxPooling2DComponent::InitData(_DWORD *a1, uint64_t *a2)
{
  long long v35 = 0uLL;
  uint64_t v36 = 0;
  uint64_t v4 = a2 + 4;
  int v5 = a1 + 17;
  int v6 = a1 + 16;
  int v32 = a1 + 15;
  int v33 = a1 + 14;
  int v7 = a1 + 13;
  int v8 = a1 + 12;
  while (1)
  {
    if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_76;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v35);
    if (SHIBYTE(v36) < 0) {
      break;
    }
    if (HIBYTE(v36) == 10)
    {
      BOOL v16 = (void)v35 == 0x654C5870616D463CLL && WORD4(v35) == 15982;
      uint64_t v10 = (uint64_t)v8;
      if (v16) {
        goto LABEL_59;
      }
      BOOL v17 = (void)v35 == 0x654C5970616D463CLL && WORD4(v35) == 15982;
      uint64_t v10 = (uint64_t)v7;
      if (v17) {
        goto LABEL_59;
      }
      BOOL v18 = (void)v35 == 0x654C586C6F6F503CLL && WORD4(v35) == 15982;
      uint64_t v10 = (uint64_t)v33;
      if (v18) {
        goto LABEL_59;
      }
      goto LABEL_43;
    }
    if (HIBYTE(v36) != 11)
    {
      if (HIBYTE(v36) == 12)
      {
        int v23 = &v35;
        goto LABEL_71;
      }
      goto LABEL_80;
    }
    BOOL v9 = (void)v35 == 0x7453586C6F6F503CLL && *(void *)((char *)&v35 + 3) == 0x3E70657453586C6FLL;
    uint64_t v10 = (uint64_t)v6;
    if (!v9)
    {
      BOOL v11 = (void)v35 == 0x7453596C6F6F503CLL && *(void *)((char *)&v35 + 3) == 0x3E70657453596C6FLL;
      uint64_t v10 = (uint64_t)v5;
      if (!v11) {
        goto LABEL_80;
      }
    }
LABEL_59:
    kaldi::ReadBasicType<int>(a2, 0, v10);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v12 = *((void *)&v35 + 1);
  if (*((void *)&v35 + 1) != 10) {
    goto LABEL_48;
  }
  BOOL v13 = *(void *)v35 == 0x654C5870616D463CLL && *(_WORD *)(v35 + 8) == 15982;
  uint64_t v10 = (uint64_t)v8;
  if (v13) {
    goto LABEL_59;
  }
  BOOL v14 = *(void *)v35 == 0x654C5970616D463CLL && *(_WORD *)(v35 + 8) == 15982;
  uint64_t v10 = (uint64_t)v7;
  if (v14) {
    goto LABEL_59;
  }
  BOOL v15 = *(void *)v35 == 0x654C586C6F6F503CLL && *(_WORD *)(v35 + 8) == 15982;
  uint64_t v10 = (uint64_t)v33;
  if (v15) {
    goto LABEL_59;
  }
  if ((v36 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v36) != 10) {
      goto LABEL_80;
    }
LABEL_43:
    BOOL v19 = (void)v35 == 0x654C596C6F6F503CLL && WORD4(v35) == 15982;
    uint64_t v10 = (uint64_t)v32;
    if (!v19) {
      goto LABEL_80;
    }
    goto LABEL_59;
  }
  BOOL v22 = *(void *)v35 == 0x654C596C6F6F503CLL && *(_WORD *)(v35 + 8) == 15982;
  uint64_t v10 = (uint64_t)v32;
  if (v22) {
    goto LABEL_59;
  }
  uint64_t v12 = *((void *)&v35 + 1);
LABEL_48:
  if (v12 != 11) {
    goto LABEL_69;
  }
  BOOL v20 = *(void *)v35 == 0x7453586C6F6F503CLL && *(void *)(v35 + 3) == 0x3E70657453586C6FLL;
  uint64_t v10 = (uint64_t)v6;
  if (v20) {
    goto LABEL_59;
  }
  uint64_t v12 = *((void *)&v35 + 1);
  if (*((void *)&v35 + 1) != 11) {
    goto LABEL_69;
  }
  BOOL v21 = *(void *)v35 == 0x7453596C6F6F503CLL && *(void *)(v35 + 3) == 0x3E70657453596C6FLL;
  uint64_t v10 = (uint64_t)v5;
  if (v21) {
    goto LABEL_59;
  }
  if ((v36 & 0x8000000000000000) == 0) {
    goto LABEL_80;
  }
LABEL_69:
  if (v12 != 12) {
    goto LABEL_80;
  }
  int v23 = (long long *)v35;
LABEL_71:
  uint64_t v24 = *(void *)v23;
  int v25 = *((_DWORD *)v23 + 2);
  if (v24 != 0x6E6F706D6F432F3CLL || v25 != 1047817829)
  {
LABEL_80:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Unknown token ", 14);
    if (v36 >= 0) {
      uint64_t v28 = &v35;
    }
    else {
      uint64_t v28 = (long long *)v35;
    }
    if (v36 >= 0) {
      uint64_t v29 = HIBYTE(v36);
    }
    else {
      uint64_t v29 = *((void *)&v35 + 1);
    }
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" (FmapXLen|FmapYLen|PoolXLen|PoolYLen|PoolXStep|PoolYStep)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v34);
  }
LABEL_76:
  if (a1[2] % (a1[13] * a1[12]))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Invalid component parameters", 28);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v34);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete((void *)v35);
  }
}

void sub_1B1F08E4C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPooling2DComponent::WriteData(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<FmapXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolXStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolYStep>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

void kaldi::nnet1::MaxPooling2DComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6 = a1[12];
  int v5 = a1[13];
  int v7 = a1[2] / (v5 * v6);
  int v9 = a1[14];
  int v8 = a1[15];
  int v11 = a1[16];
  int v10 = a1[17];
  kaldi::CuMatrixBase<float>::Set(a3, -1.0e20);
  if (v7 >= 1)
  {
    int v33 = 0;
    int v30 = (v6 - v9) / v11;
    int v28 = (v5 - v8) / v10;
    int v29 = 0;
    uint64_t v37 = (v30 + 1);
    uint64_t v31 = (v28 + 1);
    do
    {
      if ((v28 & 0x80000000) == 0)
      {
        uint64_t v34 = 0;
        int v12 = v29;
        do
        {
          int v32 = v12;
          if ((v30 & 0x80000000) == 0)
          {
            uint64_t v13 = 0;
            uint64_t v36 = ((v33 * v31 + v34) * v37);
            do
            {
              uint64_t v38 = v13;
              uint64_t v14 = *(void *)(a3 + 8) + 4 * (v13 + v36);
              int v15 = *(_DWORD *)(a3 + 28) - (v13 + v36);
              uint64_t v16 = *(void *)(a3 + 32);
              LODWORD(v40[2]) = 1;
              *(void *)((char *)&v40[2] + 4) = *(void *)(a3 + 20);
              HIDWORD(v40[3]) = v15;
              v40[4] = v16;
              v40[0] = &unk_1F0A472A0;
              v40[1] = v14;
              int v17 = a1[15];
              if (v17 >= 1)
              {
                int v18 = 0;
                int v19 = 0;
                int v20 = a1[14];
                int v21 = a1[12] * (v34 * a1[17] + v33 * a1[13]) + a1[16] * v38;
                do
                {
                  if (v20 >= 1)
                  {
                    int v22 = 0;
                    int v23 = -v21;
                    do
                    {
                      int v24 = a1[12];
                      uint64_t v25 = *(void *)(a2 + 8) + 4 * (v21 + v22 + v19 * v24);
                      int v26 = v23 + *(_DWORD *)(a2 + 28) + v18 * v24;
                      uint64_t v27 = *(void *)(a2 + 32);
                      LODWORD(v39[2]) = 1;
                      *(void *)((char *)&v39[2] + 4) = *(void *)(a2 + 20);
                      HIDWORD(v39[3]) = v26;
                      v39[4] = v27;
                      v39[0] = &unk_1F0A472A0;
                      v39[1] = v25;
                      kaldi::CuMatrixBase<float>::Max((uint64_t)v40, (uint64_t)v39);
                      v39[0] = &unk_1F0A472A0;
                      memset(&v39[1], 0, 32);
                      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v39);
                      ++v22;
                      int v20 = a1[14];
                      --v23;
                    }
                    while (v22 < v20);
                    int v17 = a1[15];
                  }
                  ++v19;
                  --v18;
                }
                while (v19 < v17);
              }
              v40[0] = &unk_1F0A472A0;
              memset(&v40[1], 0, 32);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v40);
              uint64_t v13 = v38 + 1;
            }
            while (v38 + 1 != v37);
          }
          int v12 = v32 + v37;
          ++v34;
        }
        while (v34 != v31);
      }
      v29 += v31 * v37;
      ++v33;
    }
    while (v33 != v7);
  }
}

void sub_1B1F09264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _OWORD *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  *(void *)(v15 - 128) = a11;
  *a8 = 0u;
  a8[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v15 - 128));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MaxPooling2DComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = a1[12];
  int v8 = a1[13];
  int v10 = a1[2] / (v8 * v9);
  int v12 = a1[14];
  int v11 = a1[15];
  int v14 = a1[16];
  int v13 = a1[17];
  kaldi::CuMatrixBase<float>::SetZero(a5);
  if (v10 >= 1)
  {
    uint64_t v15 = a1;
    int v45 = 0;
    int v42 = (v9 - v12) / v14;
    int v40 = (v8 - v11) / v13;
    int v41 = 0;
    uint64_t v50 = (v42 + 1);
    uint64_t v43 = (v40 + 1);
    long long v16 = 0uLL;
    do
    {
      if ((v40 & 0x80000000) == 0)
      {
        uint64_t v46 = 0;
        int v17 = v41;
        do
        {
          int v44 = v17;
          if ((v42 & 0x80000000) == 0)
          {
            uint64_t v18 = 0;
            uint64_t v49 = ((v45 * v43 + v46) * v50);
            do
            {
              uint64_t v51 = v18;
              uint64_t v19 = v18 + v49;
              uint64_t v20 = *(void *)(a3 + 8) + 4 * (v18 + v49);
              int v21 = *(_DWORD *)(a3 + 28) - (v18 + v49);
              uint64_t v22 = *(void *)(a3 + 32);
              *(void *)((char *)&v61[2] + 4) = *(void *)(a3 + 20);
              LODWORD(v61[2]) = 1;
              HIDWORD(v61[3]) = v21;
              v61[4] = v22;
              v61[0] = &unk_1F0A472A0;
              v61[1] = v20;
              uint64_t v23 = *(void *)(a4 + 8) + 4 * v19;
              LODWORD(v19) = *(_DWORD *)(a4 + 28) - v19;
              uint64_t v24 = *(void *)(a4 + 32);
              *(void *)&v60[12] = *(void *)(a4 + 20);
              *(_DWORD *)&v60[8] = 1;
              *(_DWORD *)&v60[20] = v19;
              *(void *)&v60[24] = v24;
              uint64_t v59 = &unk_1F0A472A0;
              *(void *)uint64_t v60 = v23;
              int v25 = v15[15];
              if (v25 >= 1)
              {
                int v26 = 0;
                int v27 = 0;
                int v28 = v15[14];
                int v52 = v15[12] * (v46 * v15[17] + v45 * v15[13]) + v15[16] * v51;
                do
                {
                  if (v28 >= 1)
                  {
                    int v29 = 0;
                    int v30 = -v52;
                    do
                    {
                      int v31 = v15[12];
                      unsigned int v32 = v52 + v29 + v27 * v31;
                      uint64_t v33 = *(void *)(a2 + 8) + 4 * v32;
                      uint64_t v34 = *(void *)(a2 + 32);
                      int v35 = v26 * v31;
                      int v36 = v30 + *(_DWORD *)(a2 + 28) + v35;
                      LODWORD(v58[2]) = 1;
                      *(void *)((char *)&v58[2] + 4) = *(void *)(a2 + 20);
                      HIDWORD(v58[3]) = v36;
                      v58[4] = v34;
                      v58[0] = &unk_1F0A472A0;
                      v58[1] = v33;
                      uint64_t v37 = *(void *)(a5 + 8) + 4 * v32;
                      int v38 = v30 + *(_DWORD *)(a5 + 28) + v35;
                      uint64_t v39 = *(void *)(a5 + 32);
                      LODWORD(v57[2]) = 1;
                      *(void *)((char *)&v57[2] + 4) = *(void *)(a5 + 20);
                      HIDWORD(v57[3]) = v38;
                      v57[4] = v39;
                      v57[0] = &unk_1F0A472A0;
                      v57[1] = v37;
                      long long v54 = v16;
                      long long v55 = v16;
                      int32x2_t v53 = (int32x2_t)&unk_1F0A51768;
                      char v56 = 0;
                      kaldi::CuMatrixBase<float>::EqualElementMask((uint64_t)v58, (uint64_t)v61, &v53);
                      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v53, (uint64_t)&v59);
                      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v57, (uint64_t)&v53, 111, 1.0, 1.0);
                      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v53);
                      v57[0] = &unk_1F0A472A0;
                      memset(&v57[1], 0, 32);
                      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v57);
                      v58[0] = &unk_1F0A472A0;
                      memset(&v58[1], 0, 32);
                      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v58);
                      long long v16 = 0uLL;
                      ++v29;
                      uint64_t v15 = a1;
                      int v28 = a1[14];
                      --v30;
                    }
                    while (v29 < v28);
                    int v25 = a1[15];
                  }
                  ++v27;
                  --v26;
                }
                while (v27 < v25);
              }
              uint64_t v59 = &unk_1F0A472A0;
              *(_OWORD *)uint64_t v60 = v16;
              *(_OWORD *)&v60[16] = v16;
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v59);
              v61[0] = &unk_1F0A472A0;
              memset(&v61[1], 0, 32);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v61);
              long long v16 = 0uLL;
              uint64_t v15 = a1;
              uint64_t v18 = v51 + 1;
            }
            while (v51 + 1 != v50);
          }
          int v17 = v44 + v50;
          ++v46;
        }
        while (v46 != v43);
      }
      v41 += v43 * v50;
      ++v45;
    }
    while (v45 != v10);
  }
}

void sub_1B1F09700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _OWORD *a16, _OWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_OWORD *a26,_OWORD *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a30);
  *a26 = 0u;
  a26[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a36);
  *(void *)(v37 - 208) = v36;
  *a27 = 0u;
  a27[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v37 - 208));
  *(void *)(v37 - 168) = a23;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v37 - 168));
  *(void *)(v37 - 128) = a24;
  *a17 = 0u;
  a17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v37 - 128));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPooling2DComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, "<FmapXLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 48);
  kaldi::ExpectToken(a2, a3, "<FmapYLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 52);
  kaldi::ExpectToken(a2, a3, "<PoolXLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 56);
  kaldi::ExpectToken(a2, a3, "<PoolYLen>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 60);
  kaldi::ExpectToken(a2, a3, "<PoolXStep>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 64);
  kaldi::ExpectToken(a2, a3, "<PoolYStep>");
  return kaldi::ReadBasicType<int>(a2, a3, a1 + 68);
}

void kaldi::nnet1::Desplice::Copy(kaldi::nnet1::Desplice *this)
{
}

void sub_1B1F098D8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1091C40A77886BBLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Desplice::GetType(kaldi::nnet1::Desplice *this)
{
  return 1027;
}

uint64_t kaldi::nnet1::Desplice::OutputRowCount(kaldi::nnet1::Desplice *this, int a2)
{
  return (*((_DWORD *)this + 2) / *((_DWORD *)this + 3) * a2);
}

void kaldi::nnet1::Desplice::InitData(kaldi::nnet1::Desplice *a1, uint64_t *a2)
{
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  int v3 = a2 + 4;
  uint64_t v4 = (char *)a1 + 56;
  int v5 = (char *)a1 + 52;
  int v6 = (char *)a1 + 48;
  while (1)
  {
    if ((*((unsigned char *)v3 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_48;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v26);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
      switch(HIBYTE(v27))
      {
        case 0xBu:
          BOOL v14 = (void)v26 == 0x69727453776F523CLL && *(void *)((char *)&v26 + 3) == 0x3E65646972745377;
          uint64_t v8 = (uint64_t)v5;
          if (!v14) {
            goto LABEL_51;
          }
          break;
        case 0xCu:
          BOOL v13 = (void)v26 == 0x6E654C656D69543CLL && DWORD2(v26) == 1047032935;
          uint64_t v8 = (uint64_t)v4;
          if (!v13)
          {
            uint64_t v15 = &v26;
            goto LABEL_43;
          }
          break;
        case 0xEu:
          BOOL v7 = (void)v26 == 0x4C6563696C70533CLL && *(void *)((char *)&v26 + 6) == 0x3E6874676E654C65;
          uint64_t v8 = (uint64_t)v6;
          if (!v7) {
            goto LABEL_51;
          }
          break;
        default:
          goto LABEL_51;
      }
      goto LABEL_40;
    }
    uint64_t v9 = *((void *)&v26 + 1);
    if (*((void *)&v26 + 1) == 11)
    {
      BOOL v11 = *(void *)v26 == 0x69727453776F523CLL && *(void *)(v26 + 3) == 0x3E65646972745377;
      uint64_t v8 = (uint64_t)v5;
      if (v11) {
        goto LABEL_40;
      }
      uint64_t v9 = *((void *)&v26 + 1);
    }
    else if (*((void *)&v26 + 1) == 14)
    {
      BOOL v10 = *(void *)v26 == 0x4C6563696C70533CLL && *(void *)(v26 + 6) == 0x3E6874676E654C65;
      uint64_t v8 = (uint64_t)v6;
      if (v10) {
        goto LABEL_40;
      }
    }
    if (v9 != 12) {
      goto LABEL_51;
    }
    BOOL v12 = *(void *)v26 == 0x6E654C656D69543CLL && *(_DWORD *)(v26 + 8) == 1047032935;
    uint64_t v8 = (uint64_t)v4;
    if (!v12) {
      break;
    }
LABEL_40:
    kaldi::ReadBasicType<int>(a2, 0, v8);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (*((void *)&v26 + 1) != 12) {
    goto LABEL_51;
  }
  uint64_t v15 = (long long *)v26;
LABEL_43:
  uint64_t v16 = *(void *)v15;
  int v17 = *((_DWORD *)v15 + 2);
  if (v16 != 0x6E6F706D6F432F3CLL || v17 != 1047817829)
  {
LABEL_51:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unknown token ", 14);
    if (v27 >= 0) {
      uint64_t v20 = &v26;
    }
    else {
      uint64_t v20 = (long long *)v26;
    }
    if (v27 >= 0) {
      uint64_t v21 = HIBYTE(v27);
    }
    else {
      uint64_t v21 = *((void *)&v26 + 1);
    }
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" (FmapXLen|FmapYLen|PoolXLen|PoolYLen|PoolXStep|PoolYStep)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
LABEL_48:
  kaldi::nnet1::Desplice::Init(a1);
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
}

void sub_1B1F09C0C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Desplice::WriteData(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<SpliceLength>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<RowStride>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<TimeLength>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

unint64_t kaldi::nnet1::Desplice::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::CuMatrixBase<float>::CopyIndexedItems(a3, a2, (int *)(a1 + 64), a1 + 88, *(_DWORD *)(a2 + 24) * *(_DWORD *)(a1 + 52));
}

unint64_t kaldi::nnet1::Desplice::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::CuMatrixBase<float>::CopyIndexedItems(a5, a4, a1 + 28, (uint64_t)(a1 + 34), a1[13] * a1[12] * *(_DWORD *)(a4 + 24));
}

void kaldi::nnet1::Desplice::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6 = a1 + 52;
  *(void *)(a1 + 48) = 0x100000001;
  uint64_t v7 = a1 + 48;
  *(_DWORD *)(a1 + 56) = 1;
  uint64_t v8 = a1 + 56;
  kaldi::ExpectToken(a2, a3, "<SpliceLength>");
  kaldi::ReadBasicType<int>(a2, a3, v7);
  kaldi::ExpectToken(a2, a3, "<RowStride>");
  kaldi::ReadBasicType<int>(a2, a3, v6);
  kaldi::ExpectToken(a2, a3, "<TimeLength>");
  kaldi::ReadBasicType<int>(a2, a3, v8);
  kaldi::nnet1::Desplice::Init((kaldi::nnet1::Desplice *)a1);
}

void kaldi::nnet1::FramePoolingComponent::Copy(kaldi::nnet1::FramePoolingComponent *this)
{
}

void sub_1B1F09E38(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40B638E8C8);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FramePoolingComponent::GetType(kaldi::nnet1::FramePoolingComponent *this)
{
  return 2054;
}

uint64_t kaldi::nnet1::FramePoolingComponent::Info(kaldi::nnet1::FramePoolingComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n  (offset,weights) : ", 22);
  if (*((void *)this + 16) != *((void *)this + 15))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
      uint64_t v4 = (void *)std::ostream::operator<<();
      int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
      kaldi::VectorBase<float>::Write(*((void *)this + 15) + v2, v5, 0);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"), ", 3);
      ++v3;
      v2 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 3) > v3);
  }
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B1F0A05C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FramePoolingComponent::InfoGradient(kaldi::nnet1::FramePoolingComponent *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n  lr-coef ", 11);
  kaldi::nnet1::ToString<float>();
  if ((v15 & 0x80u) == 0) {
    unint64_t v3 = v14;
  }
  else {
    unint64_t v3 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v4 = v15;
  }
  else {
    uint64_t v4 = (uint64_t)v14[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v15 < 0) {
    operator delete(v14[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n  (offset,weights_grad) : ", 27);
  if (*((void *)this + 19) != *((void *)this + 18))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      uint64_t v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
      kaldi::VectorBase<float>::Write(*((void *)this + 18) + v5, v10, 0);
      MEMORY[0x1B3EA7E70](v13, v10);
      char v8 = (char *)v10 + *(void *)(v10[0] - 24);
      if ((v8[32] & 5) == 0)
      {
        (*(void (**)(void **__return_ptr))(**((void **)v8 + 5) + 32))(v14);
        if (v16 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)v10 + *(void *)(v10[0] - 24)), *(_DWORD *)((char *)&v10[4] + *(void *)(v10[0] - 24)) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"), ", 3);
      ++v6;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 3) > v6);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v12);
}

void sub_1B1F0A394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 209) < 0) {
    operator delete(*(void **)(v9 - 232));
  }
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v60 = 0;
  int v61 = 0;
  uint64_t v62 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  int v56 = 1008981770;
  uint64_t v4 = a2 + 4;
  long long v54 = 0uLL;
  uint64_t v5 = (char *)(a1 + 172);
  uint64_t v49 = a1 + 88;
  uint64_t v55 = 0;
  while (1)
  {
    if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_86;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v54);
    if ((SHIBYTE(v55) & 0x80000000) == 0) {
      break;
    }
    uint64_t v7 = *((void *)&v54 + 1);
    if (*((void *)&v54 + 1) == 12 && *(void *)v54 == 0x657275746165463CLL && *(_DWORD *)(v54 + 8) == 1047357764)
    {
LABEL_69:
      kaldi::ReadBasicType<int>(a2, 0, v49);
      goto LABEL_77;
    }
    if (*((void *)&v54 + 1) == 15)
    {
      if (*(void *)v54 == 0x6C6172746E65433CLL && *(void *)(v54 + 7) == 0x3E74657366664F6CLL)
      {
LABEL_67:
        BOOL v14 = (std::vector<int> *)&v60;
        goto LABEL_68;
      }
      uint64_t v7 = *((void *)&v54 + 1);
    }
    if (v7 == 10)
    {
      if (*(void *)v54 == 0x7A69536C6F6F503CLL && *(_WORD *)(v54 + 8) == 15973)
      {
LABEL_45:
        BOOL v14 = (std::vector<int> *)&v63;
LABEL_68:
        kaldi::ReadIntegerVector<int>(a2, 0, v14, 0, 0, 0, 0);
        goto LABEL_77;
      }
      uint64_t v7 = *((void *)&v54 + 1);
    }
    if (v7 == 12)
    {
      if (*(void *)v54 == 0x6965576C6F6F503CLL && *(_DWORD *)(v54 + 8) == 1047816295)
      {
LABEL_70:
        kaldi::Vector<float>::Read((uint64_t)&v57, a2, 0, 0);
        goto LABEL_77;
      }
      uint64_t v7 = *((void *)&v54 + 1);
    }
    if (v7 != 15) {
      goto LABEL_39;
    }
    if (*(void *)v54 != 0x61526E7261654C3CLL || *(void *)(v54 + 7) != 0x3E66656F43657461)
    {
      uint64_t v7 = *((void *)&v54 + 1);
LABEL_39:
      if (v7 != 11) {
        goto LABEL_78;
      }
      if (*(void *)v54 != 0x696C616D726F4E3CLL || *(void *)(v54 + 3) != 0x3E657A696C616D72)
      {
        uint64_t v7 = *((void *)&v54 + 1);
LABEL_78:
        if (v7 == 12)
        {
          uint64_t v20 = (long long *)v54;
          goto LABEL_81;
        }
        goto LABEL_112;
      }
LABEL_66:
      kaldi::ReadBasicType<BOOL>(a2, 0, v5);
      goto LABEL_77;
    }
LABEL_76:
    kaldi::ReadBasicType<float>(a2, 0, (float *)&v56);
LABEL_77:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  switch(HIBYTE(v55))
  {
    case 0xA:
LABEL_5:
      if ((void)v54 != 0x7A69536C6F6F503CLL || WORD4(v54) != 15973) {
        goto LABEL_112;
      }
      goto LABEL_45;
    case 0xB:
      goto LABEL_61;
    case 0xC:
      if ((void)v54 == 0x657275746165463CLL && DWORD2(v54) == 1047357764) {
        goto LABEL_69;
      }
LABEL_50:
      if ((void)v54 == 0x6965576C6F6F503CLL && DWORD2(v54) == 1047816295) {
        goto LABEL_70;
      }
LABEL_54:
      if (HIBYTE(v55) == 11)
      {
LABEL_61:
        if ((void)v54 != 0x696C616D726F4E3CLL || *(void *)((char *)&v54 + 3) != 0x3E657A696C616D72) {
          goto LABEL_112;
        }
        goto LABEL_66;
      }
      uint64_t v20 = &v54;
      if (HIBYTE(v55) != 12) {
        goto LABEL_112;
      }
LABEL_81:
      uint64_t v21 = *(void *)v20;
      uint64_t v22 = *((unsigned int *)v20 + 2);
      if (v21 != 0x6E6F706D6F432F3CLL || v22 != 1047817829)
      {
LABEL_112:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
        int v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Unknown token ", 14);
        if (v55 >= 0) {
          int v45 = &v54;
        }
        else {
          int v45 = (long long *)v54;
        }
        if (v55 >= 0) {
          uint64_t v46 = HIBYTE(v55);
        }
        else {
          uint64_t v46 = *((void *)&v54 + 1);
        }
        float v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
        float v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" (FeatureDim|CentralOffset <vec>|PoolSize <vec>|LearnRateCoef|Normalize)", 72);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v50);
      }
LABEL_86:
      uint64_t v24 = v61 - v60;
      int v25 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 88);
      if (v25 >= 1) {
        int v26 = v25 - 1;
      }
      else {
        int v26 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 88);
      }
      std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 96), (int)(v24 >> 2));
      uint64_t v27 = (uint64_t *)(a1 + 120);
      std::vector<kaldi::Vector<float>>::resize((uint64_t *)(a1 + 120), (int)(v24 >> 2));
      unint64_t v28 = (unint64_t)v24 >> 2;
      uint64_t v29 = ((unint64_t)v24 >> 2);
      if ((int)v28 >= 1)
      {
        uint64_t v30 = 0;
        int v31 = (v26 >> 1) + 1;
        do
        {
          unsigned int v32 = v63;
          int v33 = v63[v30];
          if (v33 >= -1) {
            int v33 = -1;
          }
          *(_DWORD *)(*(void *)(a1 + 96) + 4 * vstd::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"read() method not implemented\n", 30) = v31 + *(_DWORD *)&v60[4 * v30] + v33;
          int v34 = v32[v30];
          if (v34 >= 0) {
            uint64_t v35 = v34;
          }
          else {
            uint64_t v35 = -v34;
          }
          kaldi::Vector<float>::Resize((void **)(*v27 + 24 * v30), v35, 0);
          int v36 = v63[v30];
          if (v36 < 0) {
            int v36 = -v36;
          }
          float v37 = 1.0 / (double)v36;
          kaldi::VectorBase<float>::Set(*v27 + 24 * v30++, v37);
        }
        while (v30 != v29);
      }
      *(_DWORD *)(a1 + 168) = v56;
      if (v58)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Initializing from pool-weight vector", 36);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v50);
        }
        if ((int)v28 >= 1)
        {
          uint64_t v38 = 0;
          int v39 = 0;
          uint64_t v40 = *v27;
          uint64_t v41 = 8 * (2 * v29 + v28);
          do
          {
            uint64_t v42 = v40 + v38;
            int v43 = *(_DWORD *)(v40 + v38 + 8);
            int v52 = 0;
            uint64_t v53 = 0;
            uint64_t v50 = (const void *)(v57 + 4 * v39);
            int v51 = v43;
            kaldi::VectorBase<float>::CopyFromVec(v42, &v50);
            uint64_t v40 = *v27;
            v39 += *(_DWORD *)(*v27 + v38 + 8);
            v38 += 24;
          }
          while (v41 != v38);
        }
      }
      if (SHIBYTE(v55) < 0) {
        operator delete((void *)v54);
      }
      kaldi::Vector<float>::Destroy((uint64_t)&v57);
      if (v60)
      {
        int v61 = v60;
        operator delete(v60);
      }
      if (v63)
      {
        uint64_t v64 = v63;
        operator delete(v63);
      }
      return;
    case 0xF:
      if ((void)v54 != 0x6C6172746E65433CLL || *(void *)((char *)&v54 + 7) != 0x3E74657366664F6CLL)
      {
        switch(HIBYTE(v55))
        {
          case 0xA:
            goto LABEL_5;
          case 0xB:
            goto LABEL_61;
          case 0xC:
            goto LABEL_50;
          case 0xF:
            if ((void)v54 != 0x61526E7261654C3CLL || *(void *)((char *)&v54 + 7) != 0x3E66656F43657461) {
              goto LABEL_54;
            }
            goto LABEL_76;
          default:
            goto LABEL_112;
        }
      }
      goto LABEL_67;
    default:
      goto LABEL_112;
  }
}

void sub_1B1F0AAB4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 193) < 0) {
    operator delete(*(void **)(v1 - 216));
  }
  kaldi::Vector<float>::Destroy(v1 - 184);
  kaldi::nnet1::FramePoolingComponent::InitData(v1 - 184, v1 - 160, v1 - 136);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::WriteData(uint64_t a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<FeatureDim>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<Normalize>");
  kaldi::WriteBasicType<BOOL>(a2, a3, *(unsigned __int8 *)(a1 + 172));
  kaldi::WriteToken(a2, a3, "<FrameOffset>");
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, (uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 2, *(void *)(a1 + 96));
  kaldi::WriteToken(a2, a3, "<FrameWeight>");
  unint64_t v6 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  if ((int)(v6 >> 2) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 24 * (v6 >> 2);
    do
    {
      kaldi::VectorBase<float>::Write(*(void *)(a1 + 120) + v7, a2, a3);
      v7 += 24;
    }
    while (v8 != v7);
  }
}

void kaldi::nnet1::FramePoolingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  if ((int)(v3 >> 2) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v19 = (v3 >> 2);
    do
    {
      int v8 = *(_DWORD *)(a1 + 88);
      uint64_t v9 = *(void *)(a3 + 8) + 4 * (v8 * v7);
      int v10 = *(_DWORD *)(a3 + 28) - v8 * v7;
      uint64_t v11 = *(void *)(a3 + 32);
      LODWORD(v21[2]) = v8;
      *(void *)((char *)&v21[2] + 4) = *(void *)(a3 + 20);
      HIDWORD(v21[3]) = v10;
      void v21[4] = v11;
      v21[0] = &unk_1F0A472A0;
      v21[1] = v9;
      kaldi::CuMatrixBase<float>::SetZero((uint64_t)v21);
      uint64_t v12 = *(void *)(a1 + 120) + 24 * v7;
      if (*(int *)(v12 + 8) >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          float v14 = *(float *)(*(void *)v12 + 4 * v13);
          unsigned int v15 = (v13 + *(_DWORD *)(*(void *)(a1 + 96) + 4 * v7)) * *(_DWORD *)(a1 + 88);
          uint64_t v16 = *(void *)(a2 + 8) + 4 * v15;
          unsigned int v17 = *(_DWORD *)(a2 + 28) - v15;
          uint64_t v18 = *(void *)(a2 + 32);
          LODWORD(v20[2]) = *(_DWORD *)(a1 + 88);
          *(void *)((char *)&v20[2] + 4) = *(void *)(a2 + 20);
          HIDWORD(v20[3]) = v17;
          v20[4] = v18;
          v20[0] = &unk_1F0A472A0;
          v20[1] = v16;
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)v21, (uint64_t)v20, 111, v14, 1.0);
          v20[0] = &unk_1F0A472A0;
          memset(&v20[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v20);
          ++v13;
          uint64_t v12 = *(void *)(a1 + 120) + 24 * v7;
        }
        while (v13 < *(int *)(v12 + 8));
      }
      v21[0] = &unk_1F0A472A0;
      memset(&v21[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v21);
      ++v7;
    }
    while (v7 != v19);
  }
}

void sub_1B1F0AE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  *int v8 = 0u;
  v8[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::BackpropagateFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::FramePoolingComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  kaldi::ExpectToken(a2, a3, "<FeatureDim>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 88);
  kaldi::ExpectToken(a2, a3, "<LearnRateCoef>");
  kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 168));
  kaldi::ExpectToken(a2, a3, "<Normalize>");
  kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 172));
  kaldi::ExpectToken(a2, a3, "<FrameOffset>");
  kaldi::ReadIntegerVector<int>(a2, a3, (std::vector<int> *)(a1 + 96), 0, 0, 0, 0);
  kaldi::ExpectToken(a2, a3, "<FrameWeight>");
  uint64_t v6 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  uint64_t v7 = (uint64_t *)(a1 + 120);
  std::vector<kaldi::Vector<float>>::resize(v7, (int)(v6 >> 2));
  if ((int)((unint64_t)v6 >> 2) >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      kaldi::Vector<float>::Read(*v7 + v8, a2, a3, 0);
      v8 += 24;
    }
    while (24 * ((unint64_t)v6 >> 2) != v8);
  }
}

uint64_t kaldi::nnet1::FramePoolingComponent::NumParams(kaldi::nnet1::FramePoolingComponent *this)
{
  uint64_t v2 = *((void *)this + 15);
  uint64_t v1 = *((void *)this + 16);
  uint64_t result = 0;
  uint64_t v4 = v1 - v2;
  if (v4)
  {
    unint64_t v5 = v4 / 24;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    uint64_t v6 = (int *)(v2 + 8);
    do
    {
      int v7 = *v6;
      v6 += 6;
      uint64_t result = (v7 + result);
      --v5;
    }
    while (v5);
  }
  return result;
}

void kaldi::nnet1::FramePoolingComponent::GetParams(void *a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  uint64_t v5 = a1[15];
  if (a1[16] != v5)
  {
    unint64_t v6 = 0;
    int v7 = 0;
    uint64_t v8 = 8;
    do
    {
      uint64_t v9 = (const void **)(v5 + v8 - 8);
      int v10 = *(_DWORD *)(v5 + v8);
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v11 = (uint64_t)*a2 + 4 * v7;
      LODWORD(v12) = v10;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v11, v9);
      uint64_t v5 = a1[15];
      v7 += *(_DWORD *)(v5 + v8);
      ++v6;
      v8 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[16] - v5) >> 3) > v6);
  }
}

uint64_t kaldi::nnet1::FramePoolingComponent::SetParams(void *a1, void *a2)
{
  (*(void (**)(void *))(*a1 + 176))(a1);
  uint64_t v4 = a1[15];
  if (a1[16] != v4)
  {
    unint64_t v5 = 0;
    int v6 = 0;
    uint64_t v7 = 8;
    do
    {
      uint64_t v8 = v4 + v7 - 8;
      int v9 = *(_DWORD *)(v4 + v7);
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v11 = *a2 + 4 * v6;
      LODWORD(v12) = v9;
      kaldi::VectorBase<float>::CopyFromVec(v8, (const void **)&v11);
      uint64_t v4 = a1[15];
      v6 += *(_DWORD *)(v4 + v7);
      ++v5;
      v7 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[16] - v4) >> 3) > v5);
  }
  return (*(uint64_t (**)(void *))(*a1 + 176))(a1);
}

float kaldi::nnet1::FramePoolingComponent::SumParams(kaldi::nnet1::FramePoolingComponent *this)
{
  uint64_t v1 = *((void *)this + 15);
  if (*((void *)this + 16) == v1) {
    return 0.0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  float v5 = 0.0;
  do
  {
    double v6 = kaldi::VectorBase<float>::Sum(v1 + v3);
    float v5 = v5 + *(float *)&v6;
    ++v4;
    uint64_t v1 = *((void *)this + 15);
    v3 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 16) - v1) >> 3) > v4);
  return v5;
}

void kaldi::nnet1::FramePoolingComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 144);
  uint64_t v7 = (uint64_t *)(a1 + 144);
  unint64_t v9 = *(v7 - 5) - *(v7 - 6);
  if (0xAAAAAAAAAAAAAAABLL * ((v7[1] - v8) >> 3) != (int)(v9 >> 2)) {
    std::vector<kaldi::Vector<float>>::resize(v7, (int)((uint64_t)v9 >> 2));
  }
  if ((int)(v9 >> 2) >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v23 = (v9 >> 2);
    uint64_t v11 = *(void *)(a1 + 120);
    do
    {
      kaldi::Vector<float>::Resize((void **)(*(void *)(a1 + 144) + 24 * v10), *(unsigned int *)(v11 + 24 * v10 + 8), 0);
      uint64_t v11 = *(void *)(a1 + 120);
      if (*(int *)(v11 + 24 * v10 + 8) >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          int v13 = *(_DWORD *)(a1 + 88);
          unsigned int v14 = (v12 + *(_DWORD *)(*(void *)(a1 + 96) + 4 * v10)) * v13;
          uint64_t v15 = *(void *)(a2 + 8) + 4 * v14;
          unsigned int v16 = *(_DWORD *)(a2 + 28) - v14;
          LODWORD(v27[2]) = v13;
          *(void *)((char *)&v27[2] + 4) = *(void *)(a2 + 20);
          HIDWORD(v27[3]) = v16;
          v27[0] = &unk_1F0A472A0;
          v27[1] = v15;
          uint64_t v17 = *(void *)(a3 + 8) + 4 * (v13 * v10);
          int v18 = *(_DWORD *)(a3 + 28);
          LODWORD(v26[2]) = v13;
          *(void *)((char *)&v26[2] + 4) = *(void *)(a3 + 20);
          HIDWORD(v26[3]) = v18 - v13 * v10;
          v26[0] = &unk_1F0A472A0;
          v26[1] = v17;
          v27[4] = a4;
          v26[4] = a4;
          kaldi::CuMatrix<float>::CuMatrix(v25, v27, 111);
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)v25, (uint64_t)v26);
          *(float *)(*(void *)(*(void *)(a1 + 144) + 24 * v10) + 4 * v12) = kaldi::CuMatrixBase<float>::Sum((uint64_t)v25);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v25);
          v26[0] = &unk_1F0A472A0;
          memset(&v26[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v26);
          v27[0] = &unk_1F0A472A0;
          memset(&v27[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
          ++v12;
          uint64_t v11 = *(void *)(a1 + 120);
        }
        while (v12 < *(int *)(v11 + 24 * v10 + 8));
      }
      ++v10;
    }
    while (v10 != v23);
    uint64_t v19 = 0;
    do
    {
      kaldi::VectorBase<float>::AddVec<float>(*(void *)(a1 + 120) + v19, (const float **)(*(void *)(a1 + 144) + v19), -(float)(*(float *)(a1 + 168) * *(float *)(a1 + 56)));
      v19 += 24;
    }
    while (24 * v23 != v19);
    if (*(unsigned char *)(a1 + 172))
    {
      uint64_t v20 = 0;
      do
      {
        kaldi::VectorBase<float>::ApplyFloor(*(void *)(a1 + 120) + v20, 0.0);
        uint64_t v21 = *(void *)(a1 + 120) + v20;
        double v22 = kaldi::VectorBase<float>::Sum(v21);
        kaldi::VectorBase<float>::Scale(v21, 1.0 / *(float *)&v22);
        v20 += 24;
      }
      while (24 * v23 != v20);
    }
  }
}

void sub_1B1F0B54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  *uint64_t v11 = 0u;
  v11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va1);
  _Unwind_Resume(a1);
}

__n128 kaldi::nnet1::FramePoolingComponent::SetTrainOptions(kaldi::nnet1::FramePoolingComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  if (*((_DWORD *)a2 + 8) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "the multi subbatch version for this class is not implemented yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  __n128 result = *(__n128 *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 23);
  *(__n128 *)((char *)this + 56) = result;
  return result;
}

void kaldi::nnet1::InterpolationComponent::Copy(kaldi::nnet1::InterpolationComponent *this)
{
}

void sub_1B1F0B680(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40B9971A7CLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::InterpolationComponent::GetType(kaldi::nnet1::InterpolationComponent *this)
{
  return 1039;
}

void kaldi::nnet1::InterpolationComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t v19 = 0;
  unint64_t v4 = (void **)(a1 + 48);
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  kaldi::ExpectToken(a2, 0, "<NumComponents>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v19);
  if ((int)v19 < 1 || (int v5 = *(_DWORD *)(a1 + 8), v5 % (int)v19))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "The input dimension is not divisible by the number of components");
    goto LABEL_26;
  }
  if (v5 / (int)v19 != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "The output dimension does not match the dimension of individual component");
LABEL_26:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  int v6 = 0;
  do
  {
    kaldi::ExpectToken(a2, 0, "<ComponentWeight>");
    kaldi::ReadBasicType<float>(a2, 0, (float *)&v19 + 1);
    uint64_t v8 = *(char **)(a1 + 56);
    unint64_t v7 = *(void *)(a1 + 64);
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v10 = (char *)*v4;
      uint64_t v11 = (v8 - (unsigned char *)*v4) >> 2;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v7 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 64, v14);
        uint64_t v10 = *(char **)(a1 + 48);
        uint64_t v8 = *(char **)(a1 + 56);
      }
      else
      {
        uint64_t v15 = 0;
      }
      uint64_t v16 = &v15[4 * v11];
      *(_DWORD *)uint64_t v16 = HIDWORD(v19);
      unint64_t v9 = v16 + 4;
      while (v8 != v10)
      {
        int v17 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *((_DWORD *)v16 - 1) = v17;
        v16 -= 4;
      }
      *(void *)(a1 + 48) = v16;
      *(void *)(a1 + 56) = v9;
      *(void *)(a1 + 64) = &v15[4 * v14];
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v8 = HIDWORD(v19);
      unint64_t v9 = v8 + 4;
    }
    *(void *)(a1 + 56) = v9;
    ++v6;
  }
  while (v6 < (int)v19);
  kaldi::ExpectToken(a2, 0, "</InterpolationComponent>");
}

void *kaldi::nnet1::InterpolationComponent::WriteData(uint64_t a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<NumComponents>");
  kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    int v6 = std::locale::use_facet(&v12, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v12);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(void *)(a1 + 56) != *(void *)(a1 + 48))
  {
    unint64_t v7 = 0;
    uint64_t v8 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      kaldi::WriteToken(a2, a3, "<ComponentWeight>");
      kaldi::WriteBasicType<float>((uint64_t)a2, a3);
      if ((a3 & 1) == 0)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
        unint64_t v9 = std::locale::use_facet(&v12, v8);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
      }
      ++v7;
    }
    while (v7 < (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  }
  __n128 result = kaldi::WriteToken(a2, a3, "</InterpolationComponent>");
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    uint64_t v11 = std::locale::use_facet(&v12, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v12);
    std::ostream::put();
    return (void *)std::ostream::flush();
  }
  return result;
}

void sub_1B1F0BAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void kaldi::nnet1::InterpolationComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56) - v3;
  if (v4)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(int *)(a1 + 8) / (unint64_t)(v4 >> 2);
    do
    {
      uint64_t v10 = *(void *)(a2 + 8) + 4 * (v8 * v9);
      int v11 = *(_DWORD *)(a2 + 28) - v8 * v9;
      uint64_t v12 = *(void *)(a2 + 32);
      LODWORD(v14[2]) = v9;
      *(void *)((char *)&v14[2] + 4) = *(void *)(a2 + 20);
      HIDWORD(v14[3]) = v11;
      void v14[4] = v12;
      v14[0] = &unk_1F0A472A0;
      v14[1] = v10;
      if (v8) {
        float v13 = 1.0;
      }
      else {
        float v13 = 0.0;
      }
      kaldi::CuMatrixBase<float>::AddMat(a3, (uint64_t)v14, 111, *(float *)(v3 + 4 * v8), v13);
      v14[0] = &unk_1F0A472A0;
      memset(&v14[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v14);
      ++v8;
      uint64_t v3 = *(void *)(a1 + 48);
    }
    while (v8 < (*(void *)(a1 + 56) - v3) >> 2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  void v14[4];

  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  int v5 = v4 - v3;
  if (v4 != v3)
  {
    unint64_t v9 = 0;
    uint64_t v10 = *(int *)(a1 + 8) / (unint64_t)(v5 >> 2);
    do
    {
      int v11 = v9 + 1;
      uint64_t v12 = *(void *)(a2 + 8);
      v14[0] = &unk_1F0A472D0;
      v14[1] = v12 + 4 * v9 * (int)v10;
      v14[3] = *(void *)(a2 + 24);
      v14[2] = ((v9 + 1) * v10 - 1);
      if (v9) {
        float v13 = 1.0;
      }
      else {
        float v13 = 0.0;
      }
      kaldi::CuVectorBase<float>::AddVec(a3, (uint64_t)v14, *(float *)(v3 + 4 * v9), v13);
      uint64_t v3 = *(void *)(a1 + 48);
      unint64_t v9 = v11;
    }
    while (v11 < (*(void *)(a1 + 56) - v3) >> 2);
  }
}

void sub_1B1F0BC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::InterpolationComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56) - v5;
  if (v6)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(int *)(a1 + 8) / (unint64_t)(v6 >> 2);
    uint64_t v12 = *(void *)(a4 + 32);
    do
    {
      uint64_t v13 = *(void *)(a5 + 8) + 4 * (v10 * v11);
      int v14 = *(_DWORD *)(a5 + 28);
      LODWORD(v15[2]) = v11;
      *(void *)((char *)&v15[2] + 4) = *(void *)(a5 + 20);
      HIDWORD(v15[3]) = v14 - v10 * v11;
      v15[0] = &unk_1F0A472A0;
      v15[1] = v13;
      v15[4] = v12;
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v15, a4, 111, *(float *)(v5 + 4 * v10), 0.0);
      v15[0] = &unk_1F0A472A0;
      memset(&v15[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v15);
      ++v10;
      uint64_t v5 = *(void *)(a1 + 48);
    }
    while (v10 < (*(void *)(a1 + 56) - v5) >> 2);
  }
}

void sub_1B1F0BE38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::InterpolationComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v8 = *(int *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(unsigned int *)(a4 + 16);
  v21[2] = 0;
  uint64_t v22 = 0;
  v21[0] = &unk_1F0A517C0;
  v21[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v21, v12, 0);
  uint64_t v22 = v11;
  if (*(void *)(a1 + 56) != *(void *)(a1 + 48))
  {
    unint64_t v13 = 0;
    int v14 = v8 / ((v9 - v10) >> 2);
    do
    {
      unsigned int v15 = a3 + v13 * v14;
      uint64_t v16 = *(void *)(a2 + 8) + 4 * v15;
      unsigned int v17 = *(_DWORD *)(a2 + 28) - v15;
      LODWORD(v20[2]) = 1;
      *(void *)((char *)&v20[2] + 4) = *(void *)(a2 + 20);
      HIDWORD(v20[3]) = v17;
      v20[0] = &unk_1F0A472A0;
      v20[1] = v16;
      v20[4] = v11;
      kaldi::CuVectorBase<float>::CopyRowsFromMat((uint64_t)v21, (uint64_t)v20);
      if (v13) {
        float v18 = 1.0;
      }
      else {
        float v18 = 0.0;
      }
      kaldi::CuVectorBase<float>::AddVec(a4, (uint64_t)v21, *(float *)(*(void *)(a1 + 48) + 4 * v13), v18);
      v20[0] = &unk_1F0A472A0;
      memset(&v20[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v20);
      ++v13;
    }
    while (v13 < (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  }
  return kaldi::CuVector<float>::~CuVector(v21);
}

void sub_1B1F0BFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::InterpolationComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  *(void *)uint64_t v21 = 0;
  uint64_t v6 = (void **)(a1 + 48);
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  kaldi::ExpectToken(a2, a3, "<NumComponents>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)v21);
  if (v21[0] < 1 || (int v7 = *(_DWORD *)(a1 + 8), v7 % v21[0]))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "The input dimension is not divisible by the number of components");
    goto LABEL_26;
  }
  if (v7 / v21[0] != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "The output dimension does not match the dimension of individual component");
LABEL_26:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  int v8 = 0;
  do
  {
    kaldi::ExpectToken(a2, a3, "<ComponentWeight>");
    kaldi::ReadBasicType<float>(a2, a3, (float *)&v21[1]);
    uint64_t v10 = *(char **)(a1 + 56);
    unint64_t v9 = *(void *)(a1 + 64);
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = (char *)*v6;
      uint64_t v13 = (v10 - (unsigned char *)*v6) >> 2;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 1 > v14) {
        unint64_t v14 = v15 >> 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        unsigned int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 64, v16);
        uint64_t v12 = *(char **)(a1 + 48);
        uint64_t v10 = *(char **)(a1 + 56);
      }
      else
      {
        unsigned int v17 = 0;
      }
      float v18 = &v17[4 * v13];
      *(_DWORD *)float v18 = v21[1];
      uint64_t v11 = v18 + 4;
      while (v10 != v12)
      {
        int v19 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v18 - 1) = v19;
        v18 -= 4;
      }
      *(void *)(a1 + 48) = v18;
      *(void *)(a1 + 56) = v11;
      *(void *)(a1 + 64) = &v17[4 * v16];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v10 = v21[1];
      uint64_t v11 = v10 + 4;
    }
    *(void *)(a1 + 56) = v11;
    ++v8;
  }
  while (v8 < v21[0]);
  kaldi::ExpectToken(a2, a3, "</InterpolationComponent>");
}

char *kaldi::nnet1::InterpolationComponent::SetComponentWeights(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(a1 + 48);
  if (result != (char *)a2) {
    return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::HistoryStateSize(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1 = (kaldi::nnet1::Nnet *)*((void *)this + 23);
  uint64_t v2 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  if (v1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = kaldi::nnet1::Nnet::HistoryStateSize(v1) + v3;
    uint64_t v1 = (kaldi::nnet1::Nnet *)((char *)v1 + 376);
  }
  while (v1 != v2);
  return v3;
}

uint64_t kaldi::nnet1::ParallelComponent::ResetHistoryState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 184);
  for (uint64_t i = *(void *)(result + 192); v4 != i; v4 += 376)
    __n128 result = kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v4, a2, a3, a4);
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::ResetHistoryState(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 184);
  uint64_t v2 = *(void *)(this + 192);
  while (v1 != v2)
  {
    this = kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v1);
    v1 += 376;
  }
  return this;
}

void kaldi::nnet1::ParallelComponent::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 96);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a2, v6, v7, 1, 0);
  int v8 = *(kaldi::nnet1::Nnet **)(a1 + 184);
  unint64_t v9 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  if (v8 != v9)
  {
    int v10 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v8, &v17);
      uint64_t v11 = v17;
      uint64_t v12 = (void *)v18;
      if (v17)
      {
        *(void *)&long long v18 = v17;
        operator delete(v17);
      }
      if (v11 != v12)
      {
        long long v18 = 0u;
        long long v19 = 0u;
        unsigned int v17 = &unk_1F0A51768;
        char v20 = 0;
        kaldi::nnet1::Nnet::GetHistoryState((uint64_t)v8, (uint64_t)&v17, a3);
        uint64_t v13 = *(void *)(a2 + 8) + 4 * v10;
        int v14 = *(_DWORD *)(a2 + 28) - v10;
        uint64_t v15 = *(void *)(a2 + 32);
        LODWORD(v16[2]) = DWORD2(v18);
        *(void *)((char *)&v16[2] + 4) = *(void *)(a2 + 20);
        HIDWORD(v16[3]) = v14;
        v16[4] = v15;
        v16[0] = &unk_1F0A472A0;
        v16[1] = v13;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v16, (uint64_t)&v17, 111);
        v16[0] = &unk_1F0A472A0;
        memset(&v16[1], 0, 32);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
        v10 += DWORD2(v18);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v17);
      }
      int v8 = (kaldi::nnet1::Nnet *)((char *)v8 + 376);
    }
    while (v8 != v9);
  }
}

void sub_1B1F0C4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::GetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  kaldi::CuVector<float>::Resize(a2, v8, 1);
  unint64_t v9 = (kaldi::nnet1::Nnet *)a1[23];
  int v10 = (kaldi::nnet1::Nnet *)a1[24];
  if (v9 != v10)
  {
    int v11 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v9, &v16);
      uint64_t v12 = v16;
      uint64_t v13 = v17;
      if (v16)
      {
        unsigned int v17 = v16;
        operator delete(v16);
      }
      if (v12 != v13)
      {
        unsigned int v17 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        unint64_t v16 = &unk_1F0A517C0;
        kaldi::nnet1::Nnet::GetHistoryState(v9, (uint64_t)&v16, a3, a4);
        uint64_t v14 = *(void *)(a2 + 8) + 4 * v11;
        v15[0] = &unk_1F0A472D0;
        v15[1] = v14;
        void v15[2] = v18;
        v15[3] = *(void *)(a2 + 24);
        kaldi::CuVectorBase<float>::CopyFromVec(v15, (uint64_t)&v16);
        v11 += v18;
        kaldi::CuVector<float>::~CuVector(&v16);
      }
      unint64_t v9 = (kaldi::nnet1::Nnet *)((char *)v9 + 376);
    }
    while (v9 != v10);
  }
}

void sub_1B1F0C648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::SetHistoryState(void *a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 16) != (*(unsigned int (**)(void *))(*a1 + 16))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"the ParallelComponent has history size ", 39);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" , but the input history data has dimension ", 44);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  uint64_t v6 = (kaldi::nnet1::Nnet *)a1[23];
  uint64_t v7 = (kaldi::nnet1::Nnet *)a1[24];
  if (v6 != v7)
  {
    int v8 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v6, v16);
      unint64_t v9 = v16[0];
      int v10 = v16[1];
      if (v16[0])
      {
        v16[1] = v16[0];
        operator delete(v16[0]);
      }
      if (v9 != v10)
      {
        int v11 = kaldi::nnet1::Nnet::HistoryStateSize(v6);
        uint64_t v12 = (void *)(*(void *)(a2 + 8) + 4 * v8);
        int v13 = *(_DWORD *)(a2 + 28) - v8;
        uint64_t v14 = *(void **)(a2 + 32);
        LODWORD(v16[2]) = v11;
        *(void **)((char *)&v16[2] + 4) = *(void **)(a2 + 20);
        HIDWORD(v16[3]) = v13;
        v16[4] = v14;
        v16[0] = &unk_1F0A472A0;
        v16[1] = v12;
        kaldi::nnet1::Nnet::SetHistoryState((uint64_t)v6, (uint64_t)v16, a3);
        v8 += v11;
        v16[0] = &unk_1F0A472A0;
        memset(&v16[1], 0, 32);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
      }
      uint64_t v6 = (kaldi::nnet1::Nnet *)((char *)v6 + 376);
    }
    while (v6 != v7);
  }
}

void sub_1B1F0C800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  *unint64_t v9 = 0u;
  v9[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::SetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a2 + 16) != (*(unsigned int (**)(void *))(*a1 + 16))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"the network has history size ", 29);
    unint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" , but the input history data has dimension ", 44);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v17);
  }
  int v8 = (kaldi::nnet1::Nnet *)a1[23];
  unint64_t v9 = (kaldi::nnet1::Nnet *)a1[24];
  if (v8 != v9)
  {
    int v10 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v8, &v17);
      int v11 = v17;
      uint64_t v12 = (void *)v18;
      if (v17)
      {
        uint64_t v18 = (uint64_t)v17;
        operator delete(v17);
      }
      if (v11 != v12)
      {
        unsigned int v13 = kaldi::nnet1::Nnet::HistoryStateSize(v8);
        int v14 = v13 + v10;
        uint64_t v15 = *(void *)(a2 + 8) + 4 * v10;
        unsigned int v17 = &unk_1F0A472D0;
        uint64_t v18 = v15;
        uint64_t v19 = v13;
        uint64_t v20 = *(void *)(a2 + 24);
        kaldi::nnet1::Nnet::SetHistoryState((uint64_t)v8, (uint64_t)&v17, a3, a4);
        int v10 = v14;
      }
      int v8 = (kaldi::nnet1::Nnet *)((char *)v8 + 376);
    }
    while (v8 != v9);
  }
}

void kaldi::nnet1::ParallelComponent::SetHistoryOptions(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::HistoryOptions *a2)
{
  uint64_t v4 = (const void *)(*(uint64_t (**)(kaldi::nnet1::ParallelComponent *))(*(void *)this + 120))(this);
  if (v5)
  {
    long long v6 = *(_OWORD *)(v5 + 8);
    *(_OWORD *)&v11[15] = *(_OWORD *)(v5 + 23);
    *(_OWORD *)int v11 = v6;
    int v10 = &unk_1F0A4DB38;
    uint64_t v12 = &unk_1F0A4DB58;
    int v7 = *((_DWORD *)v5 + 13);
    int v13 = *((_DWORD *)a2 + 2);
    int v14 = v7;
    (*(void (**)(kaldi::nnet1::ParallelComponent *, void **))(*(void *)this + 104))(this, &v10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 2);
    unint64_t v9 = (kaldi::nnet1::Nnet *)*((void *)this + 23);
    int v8 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
    while (v9 != v8)
    {
      kaldi::nnet1::Nnet::SetHistoryOptions(v9, a2, 1);
      unint64_t v9 = (kaldi::nnet1::Nnet *)((char *)v9 + 376);
    }
    kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions((kaldi::nnet1::RecurrentNnetTrainOptions *)&v10);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
  }
}

void sub_1B1F0CB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::ParallelComponent::SetInternalBoundary(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 184);
  for (uint64_t i = *(void *)(result + 192); v3 != i; v3 += 376)
    __n128 result = kaldi::nnet1::Nnet::SetInternalBoundary(v3, a2, a3);
  return result;
}

void kaldi::nnet1::ParallelComponent::SetTrainOptions(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::NnetTrainOptions *lpsrc)
{
  if (*((_DWORD *)lpsrc + 8) == 1)
  {
    *((unsigned char *)this + 178) = *((unsigned char *)lpsrc + 38);
    {
      operator new();
    }
    operator new();
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "the multi subbatch version for this class is not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void sub_1B1F0CDDC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::Copy(kaldi::nnet1::ParallelComponent *this)
{
}

void sub_1B1F0CE6C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40422ECF24);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::GetType(kaldi::nnet1::ParallelComponent *this)
{
  return 2055;
}

void kaldi::nnet1::ParallelComponent::InitData(kaldi::nnet1::ParallelComponent *this, uint64_t *a2)
{
  uint64_t v50 = 0;
  int v51 = 0;
  unint64_t v52 = 0;
  float v47 = 0;
  float v48 = 0;
  unint64_t v49 = 0;
  uint64_t v4 = a2 + 4;
  int v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
LABEL_2:
  if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v44);
    if ((SHIBYTE(v46) & 0x80000000) == 0)
    {
      if (HIBYTE(v46) != 17)
      {
        if (HIBYTE(v46) == 20)
        {
          BOOL v5 = v44 == (void *)0x4E64657473654E3CLL && v45 == 0x6E656C694674656ELL;
          if (v5 && v46 == 1046834529) {
            goto LABEL_14;
          }
        }
LABEL_97:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s);
        float v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s, (uint64_t)"Unknown token ", 14);
        if (v46 >= 0) {
          uint64_t v38 = &v44;
        }
        else {
          uint64_t v38 = (void **)v44;
        }
        if (v46 >= 0) {
          uint64_t v39 = HIBYTE(v46);
        }
        else {
          uint64_t v39 = v45;
        }
        uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
        uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", typo in config?", 17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" (NestedNnetFilename|NestedNnetProto)", 37);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__s);
      }
      uint64_t v20 = (uint64_t *)&v44;
      goto LABEL_54;
    }
    if (v45 == 17)
    {
      uint64_t v20 = v44;
LABEL_54:
      uint64_t v21 = *v20;
      uint64_t v22 = (void *)v20[1];
      int v23 = *((unsigned __int8 *)v20 + 16);
      if (v21 != 0x4E64657473654E3CLL || v22 != (void *)0x6F746F725074656ELL || v23 != 62) {
        goto LABEL_97;
      }
      while (1)
      {
        if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) != 0) {
          goto LABEL_89;
        }
        __s[0] = 0;
        __s[1] = 0;
        std::string::size_type v43 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)__s);
        if (SHIBYTE(v43) < 0)
        {
          uint64_t v27 = __s[1];
          if (__s[1] != (std::string::value_type *)18)
          {
            int v33 = v51;
            if ((unint64_t)v51 < v52) {
              goto LABEL_81;
            }
            goto LABEL_83;
          }
          int v26 = (std::string::value_type **)__s[0];
        }
        else
        {
          if (SHIBYTE(v43) != 18)
          {
            int v33 = v51;
            if ((unint64_t)v51 < v52) {
              goto LABEL_79;
            }
            goto LABEL_83;
          }
          int v26 = __s;
        }
        unint64_t v28 = *v26;
        uint64_t v29 = v26[1];
        int v30 = *((unsigned __int16 *)v26 + 8);
        if (v28 == (std::string::value_type *)0x64657473654E2F3CLL
          && v29 == (std::string::value_type *)0x746F725074656E4ELL
          && v30 == 15983)
        {
          char v36 = 0;
          if ((v43 & 0x8000000000000000) == 0) {
            goto LABEL_85;
          }
LABEL_88:
          operator delete(__s[0]);
          if ((v36 & 1) == 0) {
            goto LABEL_89;
          }
        }
        else
        {
          int v33 = v51;
          if ((unint64_t)v51 < v52)
          {
            if (SHIBYTE(v43) < 0)
            {
              uint64_t v27 = __s[1];
LABEL_81:
              std::string::__init_copy_ctor_external(v33, __s[0], (std::string::size_type)v27);
            }
            else
            {
LABEL_79:
              long long v34 = *(_OWORD *)__s;
              v33->__r_.__value_.__r.__words[2] = v43;
              *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
            }
            uint64_t v35 = (uint64_t)&v33[1];
            goto LABEL_84;
          }
LABEL_83:
          uint64_t v35 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v50, (long long *)__s);
LABEL_84:
          int v51 = (std::string *)v35;
          char v36 = 1;
          if ((v43 & 0x8000000000000000) != 0) {
            goto LABEL_88;
          }
LABEL_85:
          if ((v36 & 1) == 0) {
            goto LABEL_89;
          }
        }
      }
    }
    if (v45 != 20) {
      goto LABEL_97;
    }
    BOOL v18 = *v44 == 0x4E64657473654E3CLL && v44[1] == 0x6E656C694674656ELL;
    if (!v18 || *((_DWORD *)v44 + 4) != 1046834529) {
      goto LABEL_97;
    }
    while (1)
    {
LABEL_14:
      if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) != 0)
      {
LABEL_89:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        goto LABEL_2;
      }
      __s[0] = 0;
      __s[1] = 0;
      std::string::size_type v43 = 0;
      kaldi::ReadToken(a2, 0, (uint64_t)__s);
      if (SHIBYTE(v43) < 0)
      {
        int v8 = __s[1];
        if (__s[1] != (std::string::value_type *)21)
        {
          int v14 = v48;
          if ((unint64_t)v48 < v49) {
            goto LABEL_33;
          }
          goto LABEL_35;
        }
        int v7 = (std::string::value_type **)__s[0];
      }
      else
      {
        if (SHIBYTE(v43) != 21)
        {
          int v14 = v48;
          if ((unint64_t)v48 < v49) {
            goto LABEL_31;
          }
          goto LABEL_35;
        }
        int v7 = __s;
      }
      unint64_t v9 = *v7;
      int v10 = v7[1];
      uint64_t v11 = *(uint64_t *)((char *)v7 + 13);
      if (v9 == (std::string::value_type *)0x64657473654E2F3CLL
        && v10 == (std::string::value_type *)0x656C694674656E4ELL
        && v11 == 0x3E656D616E656C69)
      {
        char v17 = 0;
        if ((v43 & 0x8000000000000000) == 0) {
          goto LABEL_38;
        }
LABEL_37:
        operator delete(__s[0]);
        goto LABEL_38;
      }
      int v14 = v48;
      if ((unint64_t)v48 < v49)
      {
        if (SHIBYTE(v43) < 0)
        {
          int v8 = __s[1];
LABEL_33:
          std::string::__init_copy_ctor_external(v14, __s[0], (std::string::size_type)v8);
        }
        else
        {
LABEL_31:
          long long v15 = *(_OWORD *)__s;
          v14->__r_.__value_.__r.__words[2] = v43;
          *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        }
        uint64_t v16 = (uint64_t)&v14[1];
        goto LABEL_36;
      }
LABEL_35:
      uint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v47, (long long *)__s);
LABEL_36:
      float v48 = (std::string *)v16;
      char v17 = 1;
      if ((v43 & 0x8000000000000000) != 0) {
        goto LABEL_37;
      }
LABEL_38:
      if ((v17 & 1) == 0) {
        goto LABEL_89;
      }
    }
  }
  if (v48 != v47) {
    kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)__s);
  }
  if (v51 != v50) {
    kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)__s);
  }
  kaldi::nnet1::ParallelComponent::CheckNetworkDimensions((uint64_t *)this);
  if (SHIBYTE(v46) < 0) {
    operator delete(v44);
  }
  __s[0] = (std::string::value_type *)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  __s[0] = (std::string::value_type *)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
}

void sub_1B1F0D468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v16 - 128) = v15;
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 137) < 0) {
    operator delete(*(void **)(v16 - 160));
  }
  std::string __p = (void *)(v16 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v16 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1B1F0D474()
{
}

void sub_1B1F0D488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v16 - 104) = v15;
  if (a15 < 0) {
    operator delete(a10);
  }
  JUMPOUT(0x1B1F0D4B4);
}

void sub_1B1F0D494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 - 137) < 0) {
    operator delete(*(void **)(v10 - 160));
  }
  a10 = (void **)(v10 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1B1F0D49C()
{
}

uint64_t *kaldi::nnet1::ParallelComponent::ReadData(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::ExpectToken(a2, a3, "<NestedNnetCount>");
  int v12 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v12);
  std::vector<kaldi::nnet1::Nnet>::resize(a1 + 23, v12);
  if (v12 >= 1)
  {
    uint64_t v8 = 0;
    for (uint64_t i = 0; i < v12; ++i)
    {
      kaldi::ExpectToken(a2, a3, "<NestedNnet>");
      int v11 = 0;
      kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v11);
      kaldi::nnet1::Nnet::Read((uint64_t **)(a1[23] + v8), a2, a3, a4);
      v8 += 376;
    }
  }
  kaldi::ExpectToken(a2, a3, "</ParallelComponent>");
  return kaldi::nnet1::ParallelComponent::CheckNetworkDimensions(a1);
}

void *kaldi::nnet1::ParallelComponent::WriteData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0x51B3BEA3677D46CFLL * ((uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 3);
  kaldi::WriteToken(a2, a3, "<NestedNnetCount>");
  kaldi::WriteBasicType<int>(a2, a3);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 376 * v8;
    int v11 = 1;
    do
    {
      kaldi::WriteToken(a2, a3, "<NestedNnet>");
      kaldi::WriteBasicType<int>(a2, a3);
      kaldi::nnet1::Nnet::Write((uint64_t *)(*(void *)(a1 + 184) + v9), a2, a3, a4);
      v9 += 376;
      ++v11;
    }
    while (v10 != v9);
  }
  return kaldi::WriteToken(a2, a3, "</ParallelComponent>");
}

uint64_t kaldi::nnet1::ParallelComponent::NumParams(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1 = (kaldi::nnet1::Nnet *)*((void *)this + 23);
  uint64_t v2 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  if (v1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = kaldi::nnet1::Nnet::NumParams(v1) + v3;
    uint64_t v1 = (kaldi::nnet1::Nnet *)((char *)v1 + 376);
  }
  while (v1 != v2);
  return v3;
}

uint64_t kaldi::nnet1::ParallelComponent::CountZeroCorr(uint64_t this, int *a2, int *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v3 = *(kaldi::nnet1::Nnet **)(this + 184);
  for (i = *(kaldi::nnet1::Nnet **)(this + 192); v3 != i; uint64_t v3 = (kaldi::nnet1::Nnet *)((char *)v3 + 376))
  {
    if ((int)((*((void *)v3 + 1) - *(void *)v3) >> 3) >= 1)
    {
      int v7 = 0;
      do
      {
        this = kaldi::nnet1::Nnet::IsComponentFrozen(v3, v7);
        if ((this & 1) == 0)
        {
          uint64_t Component = (const void *)kaldi::nnet1::Nnet::GetComponent(v3, v7);
          this = (*(uint64_t (**)(const void *))(*(void *)Component + 32))(Component);
          if (this)
          {
            uint64_t v10 = 0;
            this = (*(uint64_t (**)(void *, char *, uint64_t *))(*(void *)v9 + 40))(v9, (char *)&v10 + 4, &v10);
            *a2 += HIDWORD(v10);
            *a3 += v10;
          }
        }
        ++v7;
      }
      while (v7 < (int)((*((void *)v3 + 1) - *(void *)v3) >> 3));
    }
  }
  return this;
}

uint64_t kaldi::nnet1::ParallelComponent::VectorizeWeightsCorrs(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(kaldi::nnet1::Nnet **)(result + 184);
  for (i = *(kaldi::nnet1::Nnet **)(result + 192); v4 != i; uint64_t v4 = (kaldi::nnet1::Nnet *)((char *)v4 + 376))
  {
    if ((int)((*((void *)v4 + 1) - *(void *)v4) >> 3) >= 1)
    {
      int v9 = 0;
      do
      {
        uint64_t Component = (const void *)kaldi::nnet1::Nnet::GetComponent(v4, v9);
        __n128 result = (*(uint64_t (**)(const void *))(*(void *)Component + 32))(Component);
        if (result)
        {
          __n128 result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 48))(v11, a2, a3, a4);
        }
        ++v9;
      }
      while (v9 < (int)((*((void *)v4 + 1) - *(void *)v4) >> 3));
    }
  }
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::GetNormalizedLearningRate(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(kaldi::nnet1::Nnet **)(this + 184);
  uint64_t v3 = *(kaldi::nnet1::Nnet **)(this + 192);
  if (v2 != v3)
  {
    char v5 = 0;
    float v6 = NAN;
    while ((int)((*((void *)v2 + 1) - *(void *)v2) >> 3) < 1)
    {
      float v9 = v6;
LABEL_15:
      uint64_t v2 = (kaldi::nnet1::Nnet *)((char *)v2 + 376);
      float v6 = v9;
      if (v2 == v3) {
        return this;
      }
    }
    int v7 = 0;
    while (1)
    {
      uint64_t Component = kaldi::nnet1::Nnet::GetComponent(v2, v7);
      this = (*(uint64_t (**)(uint64_t))(*(void *)Component + 32))(Component);
      if (this)
      {
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)Component + 200))(Component, a2);
        if ((v5 & 1) == 0)
        {
          char v5 = 1;
          goto LABEL_12;
        }
        if (v6 != v9)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Two different learning rates: ", 30);
          uint64_t v10 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
        }
        char v5 = 1;
      }
      float v9 = v6;
LABEL_12:
      ++v7;
      float v6 = v9;
      if (v7 >= (int)((*((void *)v2 + 1) - *(void *)v2) >> 3)) {
        goto LABEL_15;
      }
    }
  }
  return this;
}

uint64_t kaldi::nnet1::ParallelComponent::GetParams(void *a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  char v5 = (kaldi::nnet1::Nnet *)a1[23];
  float v6 = (kaldi::nnet1::Nnet *)a1[24];
  if (v5 != v6)
  {
    int v7 = 0;
    do
    {
      int v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      kaldi::nnet1::Nnet::GetParams(v5, &v13);
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v10 = (uint64_t)*a2 + 4 * v7;
      LODWORD(v11) = v14;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v10, (const void **)&v13);
      int v8 = v14;
      kaldi::Vector<float>::Destroy((uint64_t)&v13);
      v7 += v8;
      char v5 = (kaldi::nnet1::Nnet *)((char *)v5 + 376);
    }
    while (v5 != v6);
  }
  return (*(uint64_t (**)(void *))(*a1 + 176))(a1);
}

void sub_1B1F0DCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::SetParams(void *a1, void *a2)
{
  (*(void (**)(void *))(*a1 + 176))(a1);
  uint64_t v4 = (kaldi::nnet1::Nnet *)a1[23];
  char v5 = (kaldi::nnet1::Nnet *)a1[24];
  if (v4 != v5)
  {
    int v6 = 0;
    do
    {
      int v7 = kaldi::nnet1::Nnet::NumParams(v4);
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      int v8 = v7 + v6;
      uint64_t v10 = *a2 + 4 * v6;
      LODWORD(v11) = v7;
      kaldi::nnet1::Nnet::SetParams(v4, &v10);
      uint64_t v4 = (kaldi::nnet1::Nnet *)((char *)v4 + 376);
      int v6 = v8;
    }
    while (v4 != v5);
  }
  return (*(uint64_t (**)(void *))(*a1 + 176))(a1);
}

float kaldi::nnet1::ParallelComponent::SumParams(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1 = (kaldi::nnet1::Nnet *)*((void *)this + 23);
  uint64_t v2 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  float v3 = 0.0;
  while (v1 != v2)
  {
    float v3 = v3 + kaldi::nnet1::Nnet::SumParams(v1);
    uint64_t v1 = (kaldi::nnet1::Nnet *)((char *)v1 + 376);
  }
  return v3;
}

uint64_t kaldi::nnet1::ParallelComponent::Info@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  if (*((void *)this + 24) != *((void *)this + 23))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"nested_network #", 16);
      ++v5;
      int v6 = (void *)std::ostream::operator<<();
      int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::Info((uint64_t *)__p, (kaldi::nnet1::Nnet *)(*((void *)this + 23) + v4));
      if ((v17 & 0x80u) == 0) {
        int v8 = __p;
      }
      else {
        int v8 = (void **)__p[0];
      }
      if ((v17 & 0x80u) == 0) {
        uint64_t v9 = v17;
      }
      else {
        uint64_t v9 = (uint64_t)__p[1];
      }
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"}\n", 2);
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
      v4 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 3) > v5);
  }
  std::stringbuf::str();
  uint64_t v11 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v12 = (char)v11;
  std::string::size_type v13 = (std::string::size_type)a2 + v11;
  if (v12 >= 0)
  {
    std::string::size_type v14 = (std::string::size_type)a2;
  }
  else
  {
    std::string::size_type v13 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    std::string::size_type v14 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, ~v14 + v13, 1uLL);
  v18[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v20);
}

void sub_1B1F0E060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::InfoGradient@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  if (*((void *)this + 24) != *((void *)this + 23))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"nested_gradient #", 17);
      ++v5;
      int v6 = (void *)std::ostream::operator<<();
      int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::InfoGradient((kaldi::nnet1::Nnet *)(*((void *)this + 23) + v4), __p);
      if ((v17 & 0x80u) == 0) {
        int v8 = __p;
      }
      else {
        int v8 = (void **)__p[0];
      }
      if ((v17 & 0x80u) == 0) {
        uint64_t v9 = v17;
      }
      else {
        uint64_t v9 = (uint64_t)__p[1];
      }
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"}\n", 2);
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
      v4 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 3) > v5);
  }
  std::stringbuf::str();
  uint64_t v11 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v12 = (char)v11;
  std::string::size_type v13 = (std::string::size_type)a2 + v11;
  if (v12 >= 0)
  {
    std::string::size_type v14 = (std::string::size_type)a2;
  }
  else
  {
    std::string::size_type v13 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    std::string::size_type v14 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, ~v14 + v13, 1uLL);
  v18[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v20);
}

void sub_1B1F0E2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::InfoPropagate(kaldi::nnet1::ParallelComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  if (*((void *)this + 24) != *((void *)this + 23))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"nested_propagate #", 18);
      ++v3;
      uint64_t v4 = (void *)std::ostream::operator<<();
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::InfoPropagate((kaldi::nnet1::Nnet *)(*((void *)this + 23) + v2), __p);
      if ((v11 & 0x80u) == 0) {
        int v6 = __p;
      }
      else {
        int v6 = (void **)__p[0];
      }
      if ((v11 & 0x80u) == 0) {
        uint64_t v7 = v11;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"}\n", 2);
      if ((char)v11 < 0) {
        operator delete(__p[0]);
      }
      v2 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 3) > v3);
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v14);
}

void sub_1B1F0E54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t kaldi::nnet1::ParallelComponent::InfoBackPropagate(kaldi::nnet1::ParallelComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  if (*((void *)this + 24) != *((void *)this + 23))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"nested_backpropagate #", 22);
      ++v3;
      uint64_t v4 = (void *)std::ostream::operator<<();
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::InfoBackPropagate((kaldi::nnet1::Nnet *)(*((void *)this + 23) + v2), __p);
      if ((v11 & 0x80u) == 0) {
        int v6 = __p;
      }
      else {
        int v6 = (void **)__p[0];
      }
      if ((v11 & 0x80u) == 0) {
        uint64_t v7 = v11;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"}\n", 2);
      if ((char)v11 < 0) {
        operator delete(__p[0]);
      }
      v2 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 3) > v3);
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v14);
}

void sub_1B1F0E794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void kaldi::nnet1::ParallelComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = *(kaldi::nnet1::Nnet **)(a1 + 184);
  char v19 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  if (v4 != v19)
  {
    int v8 = 0;
    unsigned int v9 = 0;
    int32x2_t v10 = *(int32x2_t *)(a3 + 32);
    do
    {
      __int32 v11 = kaldi::nnet1::Nnet::InputDim(v4);
      uint64_t v12 = *(void *)(a2 + 8) + 4 * v8;
      __int32 v13 = *(_DWORD *)(a2 + 28) - v8;
      int32x2_t v14 = *(int32x2_t *)(a2 + 32);
      v23[2].i32[0] = v11;
      *(int32x2_t *)((char *)&v23[2] + 4) = *(int32x2_t *)(a2 + 20);
      v23[3].i32[1] = v13;
      void v23[4] = v14;
      v23[0] = (int32x2_t)&unk_1F0A472A0;
      v23[1] = (int32x2_t)v12;
      int v15 = kaldi::nnet1::Nnet::OutputDim(v4);
      uint64_t v16 = *(void *)(a3 + 8) + 4 * v9;
      unsigned int v17 = *(_DWORD *)(a3 + 28) - v9;
      LODWORD(v22[2]) = v15;
      *(void *)((char *)&v22[2] + 4) = *(void *)(a3 + 20);
      HIDWORD(v22[3]) = v17;
      void v23[4] = v10;
      v22[0] = &unk_1F0A472A0;
      v22[1] = v16;
      v22[4] = v10;
      memset(&v20[1], 0, 24);
      char v21 = 0;
      v20[0] = (int32x2_t)&unk_1F0A51768;
      v20[4] = v10;
      if (*(unsigned char *)(a1 + 178)) {
        kaldi::nnet1::Nnet::Feedforward((uint64_t *)v4, (uint64_t)v23, v20, -1, 0);
      }
      else {
        kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)v4, v23, v20, a4);
      }
      if (*(unsigned char *)(a1 + 176)) {
        v8 += kaldi::nnet1::Nnet::InputDim(v4);
      }
      if (*(unsigned char *)(a1 + 177))
      {
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)v22, (uint64_t)v20, 111, 1.0, 1.0);
      }
      else
      {
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v22, (uint64_t)v20, 111);
        v9 += kaldi::nnet1::Nnet::OutputDim(v4);
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v20);
      v22[0] = &unk_1F0A472A0;
      memset(&v22[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
      v23[0] = (int32x2_t)&unk_1F0A472A0;
      memset(&v23[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v23);
      uint64_t v4 = (kaldi::nnet1::Nnet *)((char *)v4 + 376);
    }
    while (v4 != v19);
  }
}

void sub_1B1F0EA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  *a5 = 0u;
  a5[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  if (a5) {
    int v6 = (int32x2_t *)a5;
  }
  else {
    int v6 = (int32x2_t *)a4;
  }
  uint64_t v7 = *(kaldi::nnet1::Nnet **)(a1 + 184);
  uint64_t v20 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  if (v7 != v20)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    int32x2_t v13 = v6[4];
    do
    {
      __int32 v14 = kaldi::nnet1::Nnet::OutputDim(v7);
      uint64_t v15 = *(void *)(a4 + 8) + 4 * v12;
      __int32 v16 = *(_DWORD *)(a4 + 28) - v12;
      v25[2].i32[0] = v14;
      *(int32x2_t *)((char *)&v25[2] + 4) = *(int32x2_t *)(a4 + 20);
      v25[3].i32[1] = v16;
      v25[0] = (int32x2_t)&unk_1F0A472A0;
      v25[1] = (int32x2_t)v15;
      v25[4] = v13;
      if (a5)
      {
        int v17 = kaldi::nnet1::Nnet::InputDim(v7);
        uint64_t v18 = *(void *)(a5 + 8) + 4 * v11;
        unsigned int v19 = *(_DWORD *)(a5 + 28) - v11;
        LODWORD(v24[2]) = v17;
        *(void *)((char *)&v24[2] + 4) = *(void *)(a5 + 20);
        HIDWORD(v24[3]) = v19;
        v24[0] = &unk_1F0A472A0;
        v24[1] = v18;
        void v24[4] = v13;
        memset(&v22[1], 0, 24);
        char v23 = 0;
        v22[0] = (int32x2_t)&unk_1F0A51768;
        v22[4] = v13;
        kaldi::nnet1::Nnet::Backpropagate((int32x2_t *)v7, v25, v22, a6);
        if (*(unsigned char *)(a1 + 176)) {
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v24, (uint64_t)v22, 111);
        }
        else {
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)v24, (uint64_t)v22, 111, 1.0, 1.0);
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v22);
        v24[0] = &unk_1F0A472A0;
        memset(&v24[1], 0, 32);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v24);
      }
      else
      {
        kaldi::nnet1::Nnet::Backpropagate((int32x2_t *)v7, v25, 0, a6);
      }
      if (*(unsigned char *)(a1 + 176)) {
        v11 += kaldi::nnet1::Nnet::InputDim(v7);
      }
      if (!*(unsigned char *)(a1 + 177)) {
        v12 += kaldi::nnet1::Nnet::OutputDim(v7);
      }
      v25[0] = (int32x2_t)&unk_1F0A472A0;
      memset(&v25[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v25);
      uint64_t v7 = (kaldi::nnet1::Nnet *)((char *)v7 + 376);
    }
    while (v7 != v20);
  }
}

void sub_1B1F0EC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  *a4 = 0u;
  a4[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::ParallelComponent::SetGradientNormalization(void *result, uint64_t a2, float a3)
{
  unint64_t v3 = (void *)result[23];
  if (v3 != (void *)result[24])
  {
    int v6 = result;
    do
    {
      __n128 result = kaldi::nnet1::Nnet::SetGradientNormalization(v3, a2, 0, 0, a3);
      v3 += 47;
    }
    while (v3 != (void *)v6[24]);
  }
  return result;
}

void kaldi::nnet1::ParallelComponent::UpdateWeights(kaldi::nnet1::ParallelComponent *this, void *a2, uint64_t a3)
{
  for (uint64_t i = (kaldi::nnet1::Nnet *)*((void *)this + 23);
        i != *((kaldi::nnet1::Nnet **)this + 24);
        uint64_t i = (kaldi::nnet1::Nnet *)((char *)i + 376))
  {
    kaldi::nnet1::Nnet::Update(i, a2, a3);
  }
}

void kaldi::nnet1::ParallelComponent::CopyQuantized8Bit(kaldi::nnet1::ParallelComponent *this)
{
}

void sub_1B1F0EE24(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40422ECF24);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::CopyQuantized16Bit(kaldi::nnet1::ParallelComponent *this)
{
}

void sub_1B1F0EEC8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40422ECF24);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::ParallelComponent::CopyQuantized8Bit(kaldi::nnet1::ParallelComponent *this)
{
}

void non-virtual thunk to'kaldi::nnet1::ParallelComponent::CopyQuantized16Bit(kaldi::nnet1::ParallelComponent *this)
{
}

void virtual thunk to'kaldi::nnet1::ParallelComponent::Copy(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::ParallelComponent::Copy((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                          + *(void *)(*(void *)this - 32)));
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::GetType(kaldi::nnet1::ParallelComponent *this)
{
  return 2055;
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::CountZeroCorr(kaldi::nnet1::ParallelComponent *this, int *a2, int *a3)
{
  return kaldi::nnet1::ParallelComponent::CountZeroCorr((uint64_t)this + *(void *)(*(void *)this - 56), a2, a3);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::VectorizeWeightsCorrs(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::ParallelComponent::VectorizeWeightsCorrs((uint64_t)a1 + *(void *)(*a1 - 64), a2, a3, a4);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::Info@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  return kaldi::nnet1::ParallelComponent::Info((kaldi::nnet1::ParallelComponent *)((char *)this + *(void *)(*(void *)this - 80)), a2);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::InfoGradient@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  return kaldi::nnet1::ParallelComponent::InfoGradient((kaldi::nnet1::ParallelComponent *)((char *)this + *(void *)(*(void *)this - 88)), a2);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::InfoPropagate(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::InfoPropagate((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                          + *(void *)(*(void *)this - 96)));
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::InfoBackPropagate(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::InfoBackPropagate((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                              + *(void *)(*(void *)this - 104)));
}

void virtual thunk to'kaldi::nnet1::ParallelComponent::InitData(void *a1, uint64_t *a2)
{
}

void *virtual thunk to'kaldi::nnet1::ParallelComponent::WriteData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::ParallelComponent::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4);
}

void virtual thunk to'kaldi::nnet1::ParallelComponent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
}

void virtual thunk to'kaldi::nnet1::ParallelComponent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
}

uint64_t *virtual thunk to'kaldi::nnet1::ParallelComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::ParallelComponent::ReadData((void *)((char *)a1 + *(void *)(*a1 - 176)), a2, a3, a4);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::NumParams(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 192);
  uint64_t v2 = (kaldi::nnet1::Nnet *)*((void *)v1 + 23);
  unint64_t v3 = (kaldi::nnet1::Nnet *)*((void *)v1 + 24);
  if (v2 == v3) {
    return 0;
  }
  LODWORD(v4) = 0;
  do
  {
    uint64_t v4 = kaldi::nnet1::Nnet::NumParams(v2) + v4;
    uint64_t v2 = (kaldi::nnet1::Nnet *)((char *)v2 + 376);
  }
  while (v2 != v3);
  return v4;
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::GetParams(void *a1, void **a2)
{
  return kaldi::nnet1::ParallelComponent::GetParams((void *)((char *)a1 + *(void *)(*a1 - 200)), a2);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::SetParams(void *a1, void *a2)
{
  return kaldi::nnet1::ParallelComponent::SetParams((void *)((char *)a1 + *(void *)(*a1 - 208)), a2);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::GetNormalizedLearningRate(kaldi::nnet1::ParallelComponent *this, uint64_t a2)
{
  return kaldi::nnet1::ParallelComponent::GetNormalizedLearningRate((uint64_t)this + *(void *)(*(void *)this - 216), a2);
}

float virtual thunk to'kaldi::nnet1::ParallelComponent::SumParams(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 224);
  uint64_t v2 = (kaldi::nnet1::Nnet *)*((void *)v1 + 23);
  unint64_t v3 = (kaldi::nnet1::Nnet *)*((void *)v1 + 24);
  float v4 = 0.0;
  while (v2 != v3)
  {
    float v4 = v4 + kaldi::nnet1::Nnet::SumParams(v2);
    uint64_t v2 = (kaldi::nnet1::Nnet *)((char *)v2 + 376);
  }
  return v4;
}

void *virtual thunk to'kaldi::nnet1::ParallelComponent::SetGradientNormalization(void *result, uint64_t a2, float a3)
{
  unint64_t v3 = (char *)result + *(void *)(*result - 256);
  for (uint64_t i = (void *)*((void *)v3 + 23); i != *((void **)v3 + 24); i += 47)
    __n128 result = kaldi::nnet1::Nnet::SetGradientNormalization(i, a2, 0, 0, a3);
  return result;
}

void virtual thunk to'kaldi::nnet1::ParallelComponent::UpdateWeights(kaldi::nnet1::ParallelComponent *this, void *a2, uint64_t a3)
{
  unint64_t v3 = (char *)this + *(void *)(*(void *)this - 272);
  for (uint64_t i = (kaldi::nnet1::Nnet *)*((void *)v3 + 23);
        i != *((kaldi::nnet1::Nnet **)v3 + 24);
        uint64_t i = (kaldi::nnet1::Nnet *)((char *)i + 376))
  {
    kaldi::nnet1::Nnet::Update(i, a2, a3);
  }
}

void virtual thunk to'kaldi::nnet1::ParallelComponent::SetTrainOptions(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
}

void kaldi::nnet1::SentenceAveragingComponent::Copy(kaldi::nnet1::SentenceAveragingComponent *this)
{
}

void sub_1B1F0F378(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  MEMORY[0x1B3EA8670](v1, 0x10B1C4008F8D91BLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::GetType(kaldi::nnet1::SentenceAveragingComponent *this)
{
  return 2049;
}

void kaldi::nnet1::SentenceAveragingComponent::Info(kaldi::nnet1::SentenceAveragingComponent *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "nested_network {\n");
  kaldi::nnet1::Nnet::Info((uint64_t *)__p, (kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  if ((v10 & 0x80u) == 0) {
    float v4 = __p;
  }
  else {
    float v4 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v5 = v10;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  int v6 = std::string::append(&v11, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v12, "}\n");
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B1F0F490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SentenceAveragingComponent::InfoGradient(kaldi::nnet1::SentenceAveragingComponent *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "nested_gradient {\n");
  kaldi::nnet1::Nnet::InfoGradient((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88), __p);
  if ((v10 & 0x80u) == 0) {
    float v4 = __p;
  }
  else {
    float v4 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v5 = v10;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  int v6 = std::string::append(&v11, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v12, "}\n");
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B1F0F5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SentenceAveragingComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  unsigned int v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  float v4 = a2 + 4;
  std::string::size_type v5 = (float *)(a1 + 464);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  while ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v29);
    if (SHIBYTE(v31) < 0)
    {
      if (v30 != 17)
      {
        if (v30 != 20
          || (*v29 == 0x4E64657473654E3CLL ? (BOOL v9 = v29[1] == 0x6E656C694674656ELL) : (BOOL v9 = 0),
              v9 ? (BOOL v10 = *((unsigned int *)v29 + 4) == 1046834529) : (BOOL v10 = 0),
              !v10))
        {
LABEL_69:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
          uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Unknown token ", 14);
          if (v31 >= 0) {
            char v23 = &v29;
          }
          else {
            char v23 = (void **)v29;
          }
          if (v31 >= 0) {
            uint64_t v24 = HIBYTE(v31);
          }
          else {
            uint64_t v24 = v30;
          }
          int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" Typo in config?", 16);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
        }
        goto LABEL_14;
      }
      if (*v29 == 0x4E64657473654E3CLL && v29[1] == 0x6F746F725074656ELL && *((unsigned char *)v29 + 16) == 62)
      {
LABEL_50:
        int v8 = &v32;
        goto LABEL_51;
      }
      int32x2_t v13 = v29;
    }
    else
    {
      if (HIBYTE(v31) != 17)
      {
        if (HIBYTE(v31) != 20) {
          goto LABEL_69;
        }
        BOOL v6 = v29 == (void *)0x4E64657473654E3CLL && v30 == 0x6E656C694674656ELL;
        if (!v6 || v31 != 1046834529) {
          goto LABEL_69;
        }
LABEL_14:
        int v8 = &v35;
LABEL_51:
        kaldi::ReadToken(a2, 0, (uint64_t)v8);
        goto LABEL_52;
      }
      if (v29 == (void *)0x4E64657473654E3CLL && v30 == 0x6F746F725074656ELL && v31 == 62) {
        goto LABEL_50;
      }
      int32x2_t v13 = (uint64_t *)&v29;
    }
    uint64_t v16 = *v13;
    int v17 = (void *)v13[1];
    int v18 = *((unsigned __int8 *)v13 + 16);
    if (v16 != 0x61526E7261654C3CLL || v17 != (void *)0x726F746361466574 || v18 != 62) {
      goto LABEL_69;
    }
    kaldi::ReadBasicType<float>(a2, 0, v5);
LABEL_52:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  int v21 = HIBYTE(v34);
  if ((SHIBYTE(v37) & 0x80000000) == 0)
  {
    if (!HIBYTE(v37)) {
      goto LABEL_55;
    }
LABEL_59:
    kaldi::nnet1::Nnet::Read(a1 + 88, (uint64_t)&v35);
    int v21 = HIBYTE(v34);
    if (v34 < 0) {
      goto LABEL_60;
    }
LABEL_56:
    if (!v21) {
      goto LABEL_62;
    }
LABEL_61:
    kaldi::nnet1::Nnet::Init((kaldi::nnet1::Nnet *)(a1 + 88), (uint64_t)&v32, a3);
    goto LABEL_62;
  }
  if (v36) {
    goto LABEL_59;
  }
LABEL_55:
  if ((v34 & 0x8000000000000000) == 0) {
    goto LABEL_56;
  }
LABEL_60:
  if (v33) {
    goto LABEL_61;
  }
LABEL_62:
  kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 88));
  kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 88));
  if (SHIBYTE(v31) < 0) {
    operator delete(v29);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v35);
  }
}

void sub_1B1F0F918(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::SentenceAveragingComponent::WriteData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::Nnet::Write((uint64_t *)(a1 + 88), a2, a3, a4);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::PropagateFnc(uint64_t a1, int32x2_t *a2, uint64_t a3, uint64_t a4)
{
  v23[1] = 0;
  uint64_t v24 = 0;
  char v27 = 0;
  uint64_t v6 = *(void *)(a3 + 32);
  v23[0] = (int32x2_t)&unk_1F0A51768;
  uint64_t v25 = 0;
  uint64_t v26 = v6;
  long long v7 = (kaldi::nnet1::Nnet *)(a1 + 88);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)(a1 + 88), a2, v23, a4);
  __int32 v8 = a2[2].i32[0];
  uint64_t v9 = kaldi::nnet1::Nnet::OutputDim(v7);
  LODWORD(v7) = v9;
  int v10 = HIDWORD(v24);
  v21[1] = 0;
  v21[2] = 0;
  v21[0] = &unk_1F0A517C0;
  uint64_t v22 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v21, v9, 0);
  uint64_t v22 = *(void *)(a3 + 32);
  float v11 = 1.0 / (double)v10;
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v21, (uint64_t)v23, v11, 0.0);
  uint64_t v12 = *(void *)(a3 + 8);
  int v13 = *(_DWORD *)(a3 + 28);
  uint64_t v14 = *(void *)(a3 + 32);
  LODWORD(v20[1]) = v7;
  *(void *)((char *)&v20[1] + 4) = *(void *)(a3 + 20);
  HIDWORD(v20[2]) = v13;
  v20[3] = v14;
  unsigned int v19 = &unk_1F0A472A0;
  v20[0] = v12;
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v19, (uint64_t)v21, 1.0, 0.0);
  unsigned int v19 = &unk_1F0A472A0;
  memset(v20, 0, sizeof(v20));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v19);
  uint64_t v15 = *(void *)(a3 + 8) + 4 * (int)v7;
  int v16 = *(_DWORD *)(a3 + 28) - v7;
  uint64_t v17 = *(void *)(a3 + 32);
  LODWORD(v20[1]) = v8;
  *(void *)((char *)&v20[1] + 4) = *(void *)(a3 + 20);
  HIDWORD(v20[2]) = v16;
  v20[3] = v17;
  unsigned int v19 = &unk_1F0A472A0;
  v20[0] = v15;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v19, (uint64_t)a2, 111);
  unsigned int v19 = &unk_1F0A472A0;
  memset(v20, 0, sizeof(v20));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v19);
  kaldi::CuVector<float>::~CuVector(v21);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
}

void sub_1B1F0FB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SentenceAveragingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (a5)
  {
    int v7 = *(_DWORD *)(a2 + 16);
    int v8 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 88));
    uint64_t v9 = *(void *)(a4 + 8) + 4 * v8;
    int v10 = *(_DWORD *)(a4 + 28) - v8;
    uint64_t v11 = *(void *)(a4 + 32);
    LODWORD(v12[2]) = v7;
    *(void *)((char *)&v12[2] + 4) = *(void *)(a4 + 20);
    HIDWORD(v12[3]) = v10;
    void v12[4] = v11;
    v12[0] = &unk_1F0A472A0;
    v12[1] = v9;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, (uint64_t)v12, 111);
    v12[0] = &unk_1F0A472A0;
    memset(&v12[1], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v12);
  }
}

void sub_1B1F0FC58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (kaldi::nnet1::Nnet *)(a1 + 88);
  kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 88), a2, a3, a4);
  kaldi::nnet1::Nnet::InputDim(v4);
  return kaldi::nnet1::Nnet::OutputDim(v4);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::NumParams(kaldi::nnet1::SentenceAveragingComponent *this)
{
  return kaldi::nnet1::Nnet::NumParams((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::GetParams(uint64_t a1, void **a2)
{
  unint64_t v3 = (kaldi::nnet1::Nnet *)(a1 + 88);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  return kaldi::nnet1::Nnet::GetParams(v3, a2);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::SetParams(uint64_t a1, void *a2)
{
  unint64_t v3 = (kaldi::nnet1::Nnet *)(a1 + 88);
  (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  return kaldi::nnet1::Nnet::SetParams(v3, a2);
}

float kaldi::nnet1::SentenceAveragingComponent::SumParams(kaldi::nnet1::SentenceAveragingComponent *this)
{
  return kaldi::nnet1::Nnet::SumParams((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
}

void *kaldi::nnet1::SentenceAveragingComponent::AccumGradients(int32x2_t *a1, uint64_t a2, int32x2_t *a3, uint64_t a4, uint64_t a5)
{
  int v8 = a1 + 11;
  uint64_t v9 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)&a1[11]);
  uint64_t v10 = a3[2].u32[1];
  v17[1] = 0;
  v17[2] = 0;
  v17[0] = &unk_1F0A517C0;
  v17[3] = a4;
  kaldi::CuVector<float>::Resize((uint64_t)v17, v9, 1);
  int32x2_t v11 = a3[1];
  __int32 v12 = a3[3].i32[1];
  int32x2_t v13 = a3[4];
  v16[2].i32[0] = v9;
  *(int32x2_t *)((char *)&v16[2] + 4) = *(int32x2_t *)((char *)a3 + 20);
  v16[3].i32[1] = v12;
  v16[4] = v13;
  v16[0] = (int32x2_t)&unk_1F0A472A0;
  v16[1] = v11;
  float v14 = 1.0 / (double)(int)v10;
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v17, (uint64_t)v16, v14, 0.0);
  v16[0] = (int32x2_t)&unk_1F0A472A0;
  memset(&v16[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
  kaldi::CuMatrix<float>::CuMatrix(v16, v10, v9, 1, a4, 0);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)v16, (uint64_t)v17, 1.0, 0.0);
  kaldi::nnet1::Nnet::Backpropagate(v8, v16, 0, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v16);
  return kaldi::CuVector<float>::~CuVector(v17);
}

void sub_1B1F0FF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SentenceAveragingComponent::UpdateWeights(kaldi::nnet1::SentenceAveragingComponent *this, void *a2, uint64_t a3)
{
}

void kaldi::nnet1::SentenceAveragingComponent::SetTrainOptions(kaldi::nnet1::SentenceAveragingComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  uint64_t v2 = &unk_1F0A4A6D0;
  *(_OWORD *)unint64_t v3 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)&v3[3] + 3) = *(_OWORD *)((char *)a2 + 23);
  v3[0] = *((float *)this + 116) * v3[0];
  kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88), (kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 48), 1);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v2);
}

void sub_1B1F0FFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::CompressedWordTransComponent::Copy(kaldi::nnet1::CompressedWordTransComponent *this)
{
}

void sub_1B1F10038(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10C1C4058E986FFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::GetType(kaldi::nnet1::CompressedWordTransComponent *this)
{
  return 1040;
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::Info(kaldi::nnet1::CompressedWordTransComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(kaldi::nnet1::CompressedWordTransComponent *, void *, void))(*(void *)this + 168))(this, v3, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n CompressedWordTrans table", 27);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v3[1] = MEMORY[0x1E4FBA470] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v5);
}

void sub_1B1F101D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  return kaldi::CompressedMatrix::Write((uint64_t *)(a1 + 80), a2, a3, a4);
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrix<float>::CuMatrix(v6, a2, 111);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)v6, a1 + 48, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  kaldi::CuMatrixBase<float>::SummarizeVec(a3, (uint64_t *)(a1 + 80), (uint64_t)v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v6);
}

void sub_1B1F10258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::CompressedWordTransComponent::ReadData(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  kaldi::CompressedMatrix::Read(a1 + 80, a2, a3, a4);
  uint64_t v5 = *(void *)(a1 + 80);
  if (v5) {
    LODWORD(v5) = *(_DWORD *)(v5 + 8);
  }
  int v6 = *(_DWORD *)(a1 + 8);
  int v7 = (int)v5 / v6;
  *(_DWORD *)(a1 + 96) = v7;
  if (v6 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = v6;
    uint64_t v10 = (v6 + 1) & 0x1FFFFFFFELL;
    uint64x2_t v11 = (uint64x2_t)vdupq_n_s64(v9 - 1);
    __int32 v12 = (float *)(*(void *)(a1 + 56) + 4);
    int64x2_t v13 = (int64x2_t)xmmword_1B255FA20;
    int64x2_t v14 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v15 = vmovn_s64((int64x2_t)vcgeq_u64(v11, (uint64x2_t)v13));
      if (v15.i8[0]) {
        *(v12 - 1) = (float)v8;
      }
      if (v15.i8[4]) {
        *__int32 v12 = (float)(v7 + v8);
      }
      int64x2_t v13 = vaddq_s64(v13, v14);
      v12 += 2;
      v8 += 2 * v7;
      v10 -= 2;
    }
    while (v10);
  }
}

void kaldi::nnet1::CompressedWordVecComponent::Copy(kaldi::nnet1::CompressedWordVecComponent *this)
{
}

void sub_1B1F103E0(_Unwind_Exception *a1)
{
  void *v1 = v2;
  char v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  MEMORY[0x1B3EA8670](v1, 0x10C1C400D8AAF98);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::GetType(kaldi::nnet1::CompressedWordVecComponent *this)
{
  return 271;
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::Info(kaldi::nnet1::CompressedWordVecComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(kaldi::nnet1::CompressedWordVecComponent *, void *, void))(*(void *)this + 168))(this, v3, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n CompressedWordVec table", 25);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v3[1] = MEMORY[0x1E4FBA470] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v5);
}

void sub_1B1F10594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  return kaldi::CompressedMatrix::Write((uint64_t *)(a1 + 48), a2, a3, a4);
}

void kaldi::nnet1::CompressedWordVecComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
}

void kaldi::nnet1::CompressedWordVecComponent::ReadData(uint64_t a1, void *a2, int a3, uint64_t a4)
{
}

void kaldi::nnet1::SharedNceComponent::Copy(kaldi::nnet1::SharedNceComponent *this)
{
}

void sub_1B1F10618(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40AEE11304);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SharedNceComponent::GetType(kaldi::nnet1::SharedNceComponent *this)
{
  return 284;
}

uint64_t kaldi::nnet1::SharedNceComponent::Info(kaldi::nnet1::SharedNceComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  (*(void (**)(kaldi::nnet1::SharedNceComponent *, void *, void))(*(void *)this + 168))(this, v14, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 88);
  if ((v13 & 0x80u) == 0) {
    unint64_t v3 = v12;
  }
  else {
    unint64_t v3 = (void **)v12[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v4 = v13;
  }
  else {
    uint64_t v4 = (uint64_t)v12[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 136);
  if ((v11 & 0x80u) == 0) {
    int v7 = __p;
  }
  else {
    int v7 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v8 = v11;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v13 < 0) {
    operator delete(v12[0]);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v14[1] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v16);
}

void sub_1B1F10850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SharedNceComponent::InfoGradient(kaldi::nnet1::SharedNceComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n  linearity_grad", 17);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 216);
  if ((v15 & 0x80u) == 0) {
    unint64_t v3 = v14;
  }
  else {
    unint64_t v3 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v4 = v15;
  }
  else {
    uint64_t v4 = (uint64_t)v14[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", lr-coef ", 10);
  int v6 = (void *)std::ostream::operator<<();
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 312);
  if ((v13 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v9 = v13;
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", bias-lr-coef ", 15);
  std::ostream::operator<<();
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v15 < 0) {
    operator delete(v14[0]);
  }
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v16[1] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v18);
}

void sub_1B1F10AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SharedNceComponent::InitData(int32x2_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  float v72 = 2.0;
  int v73 = -1073741824;
  int v71 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v70);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[52].u32[0], &v69);
  int v68 = -1;
  memset(v67, 0, sizeof(v67));
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_132;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v67);
    if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v67[2]))
      {
        case 9:
          BOOL v6 = v67[0] == (void *)0x6461724778614D3CLL && LOBYTE(v67[1]) == 62;
          int v7 = (float *)&a1[52] + 1;
          if (!v6) {
            goto LABEL_164;
          }
          goto LABEL_123;
        case 0xA:
          if (v67[0] != (void *)0x61654D736169423CLL || LOWORD(v67[1]) != 15982) {
            goto LABEL_164;
          }
          goto LABEL_59;
        case 0xB:
          if (v67[0] != (void *)0x6E6152736169423CLL || *(void **)((char *)v67 + 3) != (void *)0x3E65676E61527361) {
            goto LABEL_164;
          }
          goto LABEL_32;
        case 0xC:
          if (v67[0] == (void *)0x536D6F646E61523CLL && LODWORD(v67[1]) == 1046766949) {
            goto LABEL_91;
          }
          uint64_t v33 = v67;
          goto LABEL_127;
        case 0xD:
          if (v67[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v67 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_164;
          }
          goto LABEL_73;
        case 0xF:
          BOOL v11 = v67[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v67 + 7) == (void *)0x3E66656F43657461;
          int v7 = (float *)&a1[51];
          if (!v11) {
            goto LABEL_164;
          }
          goto LABEL_123;
        case 0x12:
          if (v67[0] != (void *)0x6E6569646172473CLL
            || v67[1] != (void *)0x7079546D726F4E74
            || LOWORD(v67[2]) != 15973)
          {
            goto LABEL_164;
          }
          goto LABEL_116;
        case 0x13:
          BOOL v14 = v67[0] == (void *)0x61654C736169423CLL
             && v67[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v67[1] + 3) == (void *)0x3E66656F43657461;
          int v7 = (float *)&a1[51] + 1;
          if (v14) {
            goto LABEL_123;
          }
          if (v67[0] != (void *)0x61725474696E493CLL
            || v67[1] != (void *)0x79546D726F66736ELL
            || *(void **)((char *)&v67[1] + 3) != (void *)0x3E657079546D726FLL)
          {
            goto LABEL_164;
          }
          goto LABEL_48;
        default:
          goto LABEL_164;
      }
    }
    uint64_t v8 = v67[1];
    switch((unint64_t)v67[1])
    {
      case 9uLL:
        goto LABEL_118;
      case 0xAuLL:
        if (*(void *)v67[0] != 0x61654D736169423CLL || *((_WORD *)v67[0] + 4) != 15982) {
          goto LABEL_84;
        }
LABEL_59:
        int v7 = (float *)&v73;
        goto LABEL_123;
      case 0xBuLL:
        if (*(void *)v67[0] != 0x6E6152736169423CLL || *(void *)((char *)v67[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_84;
        }
LABEL_32:
        int v7 = &v72;
        goto LABEL_123;
      case 0xCuLL:
        goto LABEL_86;
      case 0xDuLL:
        if (*(void *)v67[0] != 0x74536D617261503CLL || *(void *)((char *)v67[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_164;
        }
LABEL_73:
        int v7 = (float *)&v71;
        goto LABEL_123;
      case 0xFuLL:
        BOOL v23 = *(void *)v67[0] == 0x61526E7261654C3CLL && *(void *)((char *)v67[0] + 7) == 0x3E66656F43657461;
        int v7 = (float *)&a1[51];
        if (v23) {
          goto LABEL_123;
        }
LABEL_84:
        if (v67[1] == (void *)9) {
          goto LABEL_118;
        }
        if (v67[1] != (void *)12) {
          goto LABEL_107;
        }
LABEL_86:
        if (*(void *)v67[0] == 0x536D6F646E61523CLL && *((_DWORD *)v67[0] + 2) == 1046766949)
        {
LABEL_91:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v68);
          goto LABEL_124;
        }
LABEL_106:
        if (v67[1] != (void *)9)
        {
LABEL_107:
          if (v67[1] != (void *)18) {
            goto LABEL_125;
          }
LABEL_108:
          if (*(void *)v67[0] != 0x6E6569646172473CLL
            || *((void *)v67[0] + 1) != 0x7079546D726F4E74
            || *((_WORD *)v67[0] + 8) != 15973)
          {
            goto LABEL_164;
          }
LABEL_116:
          char v17 = &v69;
LABEL_117:
          kaldi::ReadToken(a2, 0, (uint64_t)v17);
LABEL_124:
          std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
          continue;
        }
LABEL_118:
        BOOL v32 = *(void *)v67[0] == 0x6461724778614D3CLL && *((unsigned char *)v67[0] + 8) == 62;
        int v7 = (float *)&a1[52] + 1;
        if (v32)
        {
LABEL_123:
          kaldi::ReadBasicType<float>(a2, 0, v7);
          goto LABEL_124;
        }
        uint64_t v8 = v67[1];
LABEL_125:
        if (v8 != (void *)12) {
          goto LABEL_164;
        }
        uint64_t v33 = (void **)v67[0];
LABEL_127:
        uint64_t v34 = *v33;
        int v35 = *((_DWORD *)v33 + 2);
        if (v34 != (void *)0x6E6F706D6F432F3CLL || v35 != 1047817829)
        {
LABEL_164:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v63);
          uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v67[2]) >= 0) {
            long long v54 = v67;
          }
          else {
            long long v54 = (void **)v67[0];
          }
          if (SHIBYTE(v67[2]) >= 0) {
            uint64_t v55 = HIBYTE(v67[2]);
          }
          else {
            uint64_t v55 = (uint64_t)v67[1];
          }
          int v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
          uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)", a typo in config?", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" (ParamStddev|BiasMean|BiasRange|LearnRateCoef|BiasLearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 119);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63);
        }
LABEL_132:
        int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v70);
        a1[52].i32[0] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v69);
        if (v68 >= 1) {
          kaldi::UniformRandomNumber::SetRandomSeeds(a3, v68);
        }
        kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v63, a3);
        kaldi::Matrix<float>::Matrix((uint64_t)v61, a1[1].u32[1], a1[1].u32[0], 0, 0);
        int v38 = a1[1].i32[1];
        if (v38 < 1) {
          goto LABEL_150;
        }
        uint64_t v39 = 0;
        int v40 = a1[1].i32[0];
        while (2)
        {
          if (v40 < 1) {
            goto LABEL_149;
          }
          uint64_t v41 = 0;
          while (2)
          {
            switch(inited)
            {
              case 0:
                if (v39 == v41) {
                  float v43 = 1.0;
                }
                else {
                  float v43 = 0.0;
                }
                goto LABEL_146;
              case 2:
                float v44 = *(float *)&v71;
                kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v63, 0);
                float v43 = v44 * v45;
LABEL_146:
                *((float *)v61[0] + (int)v39 * v62 + v41) = v43;
                int v40 = a1[1].i32[0];
                break;
              case 1:
                float v42 = *(float *)&v71;
                float v43 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v42 + v42);
                goto LABEL_146;
            }
            if (++v41 < v40) {
              continue;
            }
            break;
          }
          int v38 = a1[1].i32[1];
LABEL_149:
          if (++v39 < v38) {
            continue;
          }
          break;
        }
LABEL_150:
        kaldi::CuMatrix<float>::operator=(a1 + 11, (int *)v61);
        uint64_t v46 = a1[1].u32[1];
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        uint64_t v58 = 0;
        kaldi::Vector<float>::Resize((void **)&v58, v46, 0);
        if (a1[1].i32[1] < 1)
        {
          uint64_t v51 = v59;
        }
        else
        {
          uint64_t v47 = 0;
          do
          {
            float v48 = *(float *)&v73;
            float v49 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
            float v50 = v48 + (v49 + -0.5) * v72;
            uint64_t v51 = v59;
            v58[v47++] = v50;
          }
          while (v47 < a1[1].i32[1]);
        }
        unint64_t v52 = a1 + 17;
        kaldi::CuVector<float>::Resize((uint64_t)v52, v51, 1);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(v52, (uint64_t)&v58);
        kaldi::Vector<float>::Destroy((uint64_t)&v58);
        kaldi::Matrix<float>::~Matrix((uint64_t)v61);
        if (__p)
        {
          long long v66 = __p;
          operator delete(__p);
        }
        v61[0] = (void **)&v64;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v61);
        if (SHIBYTE(v67[2]) < 0) {
          operator delete(v67[0]);
        }
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v69.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        return;
      case 0x12uLL:
        goto LABEL_108;
      case 0x13uLL:
        BOOL v27 = *(void *)v67[0] == 0x61654C736169423CLL
           && *((void *)v67[0] + 1) == 0x6F43657461526E72
           && *(void *)((char *)v67[0] + 11) == 0x3E66656F43657461;
        int v7 = (float *)&a1[51] + 1;
        if (v27) {
          goto LABEL_123;
        }
        if (*(void *)v67[0] != 0x61725474696E493CLL
          || *((void *)v67[0] + 1) != 0x79546D726F66736ELL
          || *(void *)((char *)v67[0] + 11) != 0x3E657079546D726FLL)
        {
          goto LABEL_106;
        }
LABEL_48:
        char v17 = &v70;
        goto LABEL_117;
      default:
        goto LABEL_125;
    }
  }
}

void sub_1B1F113B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (*(char *)(v18 - 193) < 0) {
    operator delete(*(void **)(v18 - 216));
  }
  if (*(char *)(v18 - 161) < 0) {
    operator delete(*(void **)(v18 - 184));
  }
  if (*(char *)(v18 - 137) < 0) {
    operator delete(*(void **)(v18 - 160));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SharedNceComponent::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v8 = a1 + 136;
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write(a1 + 88, a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(v8, a2, a3);
}

void kaldi::nnet1::SharedNceComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 424);
  if (v6 && (int v7 = *(_DWORD *)(v6 + 16), v7 >= 1))
  {
    uint64_t v8 = *(void *)(a3 + 8);
    int v9 = *(_DWORD *)(a3 + 28);
    uint64_t v10 = *(void *)(a3 + 32);
    LODWORD(v11[2]) = v7;
    *(void *)((char *)&v11[2] + 4) = *(void *)(a3 + 20);
    HIDWORD(v11[3]) = v9;
    v11[4] = v10;
    v11[0] = &unk_1F0A472A0;
    v11[1] = v8;
    kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)v11, a1 + 312, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)v11, a2, CblasNoTrans, a1 + 168, CblasTrans, 1.0, 1.0);
    v11[0] = &unk_1F0A472A0;
    memset(&v11[1], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v11);
  }
  else
  {
    kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 136, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, a1 + 88, CblasTrans, 1.0, 1.0);
  }
}

void sub_1B1F11624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SharedNceComponent::PropagateFnc(uint64_t a1, uint64_t a2, void *a3)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a1 + 136);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)a3, a1 + 88, CblasNoTrans, a2, 1.0, 1.0);
}

void kaldi::nnet1::SharedNceComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 424);
  if (v5 && (int v6 = *(_DWORD *)(v5 + 16), v6 >= 1))
  {
    uint64_t v7 = *(void *)(a4 + 8);
    int v8 = *(_DWORD *)(a4 + 28);
    uint64_t v9 = *(void *)(a4 + 32);
    LODWORD(v10[2]) = v6;
    *(void *)((char *)&v10[2] + 4) = *(void *)(a4 + 20);
    HIDWORD(v10[3]) = v8;
    v10[4] = v9;
    v10[0] = &unk_1F0A472A0;
    v10[1] = v7;
    kaldi::CuMatrixBase<float>::AddMatMat(a5, (uint64_t)v10, CblasNoTrans, a1 + 168, CblasNoTrans, 1.0, 0.0);
    v10[0] = &unk_1F0A472A0;
    memset(&v10[1], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v10);
  }
  else
  {
    kaldi::CuMatrixBase<float>::AddMatMat(a5, a4, CblasNoTrans, a1 + 88, CblasNoTrans, 1.0, 0.0);
  }
}

void sub_1B1F1179C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v3 = v2;
  *unint64_t v3 = 0u;
  v3[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SharedNceComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(void *)(a1 + 144) + 4 * a3));
  unsigned int v8 = *(_DWORD *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 120);
  v10[1] = *(void *)(a1 + 96) + 4 * *(_DWORD *)(a1 + 112) * a3;
  v10[0] = &unk_1F0A472D0;
  v10[2] = v8;
  void v10[3] = v9;
  kaldi::CuVectorBase<float>::AddMatVec(a4, a2, CblasNoTrans, (uint64_t)v10, 1.0, 1.0);
}

float kaldi::nnet1::SharedNceComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  float v3 = *(float *)(*(void *)(a1 + 144) + 4 * a3);
  unsigned int v4 = *(_DWORD *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 120);
  v7[1] = *(void *)(a1 + 96) + 4 * *(_DWORD *)(a1 + 112) * a3;
  v7[0] = &unk_1F0A472D0;
  uint64_t v7[2] = v4;
  uint64_t v7[3] = v5;
  return v3 + kaldi::VecVec<float>(a2, (uint64_t)v7);
}

double kaldi::nnet1::SharedNceComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v30, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v30);
    if (SHIBYTE(v30[2]) < 0)
    {
      uint64_t v9 = v30[1];
      if (v30[1] != (void *)15
        || (*(void *)v30[0] == 0x61526E7261654C3CLL
          ? (BOOL v10 = *(void *)((char *)v30[0] + 7) == 0x3E66656F43657461)
          : (BOOL v10 = 0),
            unsigned int v8 = (float *)(a1 + 408),
            !v10))
      {
        if (v30[1] != (void *)19) {
          goto LABEL_25;
        }
        BOOL v11 = *(void *)v30[0] == 0x61654C736169423CLL && *((void *)v30[0] + 1) == 0x6F43657461526E72;
        BOOL v12 = v11 && *(void *)((char *)v30[0] + 11) == 0x3E66656F43657461;
        unsigned int v8 = (float *)(a1 + 412);
        if (!v12)
        {
          uint64_t v9 = v30[1];
LABEL_25:
          if (v9 == (void *)18)
          {
            if (*(void *)v30[0] == 0x6E6569646172473CLL
              && *((void *)v30[0] + 1) == 0x7079546D726F4E74
              && *((_WORD *)v30[0] + 8) == 15973)
            {
              goto LABEL_65;
            }
            uint64_t v9 = v30[1];
          }
          if (v9 != (void *)9) {
            goto LABEL_68;
          }
          unsigned __int8 v15 = (void **)v30[0];
LABEL_55:
          uint64_t v20 = *v15;
          int v21 = *((unsigned __int8 *)v15 + 8);
          BOOL v22 = v20 == (void *)0x6461724778614D3CLL && v21 == 62;
          unsigned int v8 = (float *)(a1 + 420);
          if (!v22) {
            goto LABEL_68;
          }
        }
      }
    }
    else if (HIBYTE(v30[2]) > 0x11u)
    {
      if (HIBYTE(v30[2]) == 18)
      {
        if (v30[0] != (void *)0x6E6569646172473CLL || v30[1] != (void *)0x7079546D726F4E74 || LOWORD(v30[2]) != 15973)
        {
LABEL_68:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (SHIBYTE(v30[2]) >= 0) {
            uint64_t v25 = v30;
          }
          else {
            uint64_t v25 = (void **)v30[0];
          }
          if (SHIBYTE(v30[2]) >= 0) {
            uint64_t v26 = HIBYTE(v30[2]);
          }
          else {
            uint64_t v26 = (uint64_t)v30[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
LABEL_65:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v29 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 4kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v29) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_61;
      }
      if (HIBYTE(v30[2]) != 19) {
        goto LABEL_68;
      }
      BOOL v16 = v30[0] == (void *)0x61654C736169423CLL && v30[1] == (void *)0x6F43657461526E72;
      BOOL v17 = v16 && *(void **)((char *)&v30[1] + 3) == (void *)0x3E66656F43657461;
      unsigned int v8 = (float *)(a1 + 412);
      if (!v17) {
        goto LABEL_68;
      }
    }
    else
    {
      if (HIBYTE(v30[2]) == 9)
      {
        unsigned __int8 v15 = v30;
        goto LABEL_55;
      }
      if (HIBYTE(v30[2]) != 15) {
        goto LABEL_68;
      }
      BOOL v7 = v30[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v30 + 7) == (void *)0x3E66656F43657461;
      unsigned int v8 = (float *)(a1 + 408);
      if (!v7) {
        goto LABEL_68;
      }
    }
    kaldi::ReadBasicType<float>(a2, a3, v8);
LABEL_61:
    if (SHIBYTE(v30[2]) < 0) {
      operator delete(v30[0]);
    }
  }
  kaldi::CuMatrix<float>::Read(a1 + 88, a2, a3, a4);
  return kaldi::CuVector<float>::Read(a1 + 136, a2, a3);
}

void sub_1B1F11C90()
{
}

void *kaldi::nnet1::SharedNceComponent::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 416), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1B1F11D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::SharedNceComponent::NumParams(kaldi::nnet1::SharedNceComponent *this)
{
  return (*((_DWORD *)this + 38) + *((_DWORD *)this + 26) * *((_DWORD *)this + 27));
}

const void **kaldi::nnet1::SharedNceComponent::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4 = a1 + 88;
  int v5 = *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 108);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v6, 0);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = (char *)*a2;
  LODWORD(v10) = v5;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v9, v4);
  int v7 = *(_DWORD *)(a1 + 152);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = (char *)*a2 + 4 * v5;
  LODWORD(v10) = v7;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 136), (uint64_t)&v9);
}

void *kaldi::nnet1::SharedNceComponent::SetParams(_DWORD *a1, char **a2)
{
  (*(void (**)(_DWORD *))(*(void *)a1 + 176))(a1);
  int v4 = a1[26] * a1[27];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v7 = *a2;
  LODWORD(v8) = v4;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 22), &v7);
  int v5 = a1[38];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v7 = &(*a2)[4 * v4];
  LODWORD(v8) = v5;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 34, (uint64_t)&v7);
}

float kaldi::nnet1::SharedNceComponent::SumParams(kaldi::nnet1::SharedNceComponent *this)
{
  float v2 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 88);
  double v3 = kaldi::CuVectorBase<float>::Sum((uint64_t)this + 136);
  return v2 + *(float *)&v3;
}

uint64_t kaldi::nnet1::SharedNceComponent::PerturbParams(kaldi::nnet1::SharedNceComponent *this, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix(v7, *((unsigned int *)this + 27), *((unsigned int *)this + 26), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 88, (uint64_t)v7, 111, a2, 1.0);
  uint64_t v4 = *((unsigned int *)this + 38);
  v6[0] = &unk_1F0A517C0;
  memset(&v6[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v6, v4, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 136, (uint64_t)v6, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1B1F12020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::SharedNceComponent::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v5 = a1 + 216;
  kaldi::Vector<float>::Resize(a4, (*(_DWORD *)(a1 + 232) * *(_DWORD *)(a1 + 236)), 0);
  return kaldi::VectorBase<float>::CopyRowsFromMat(a4, v5);
}

void kaldi::nnet1::SharedNceComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(*(void *)(a1 + 424) + 16);
  int v9 = *(_DWORD *)(a2 + 20);
  uint64_t v10 = a1 + 216;
  *(void *)(a1 + 248) = a4;
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 216), *(unsigned int *)(a1 + 188), *(unsigned int *)(a1 + 184), 3, 0);
  uint64_t v11 = *(void *)(a3 + 8);
  int v12 = *(_DWORD *)(a3 + 28);
  uint64_t v13 = *(void *)(a3 + 32);
  LODWORD(v29[2]) = v8;
  *(void *)((char *)&v29[2] + 4) = *(void *)(a3 + 20);
  HIDWORD(v29[3]) = v12;
  v29[4] = v13;
  v29[0] = &unk_1F0A472A0;
  v29[1] = v11;
  kaldi::CuMatrixBase<float>::AddMatMat(v10, (uint64_t)v29, CblasTrans, a2, CblasNoTrans, 1.0, 0.0);
  *(void *)(a1 + 368) = a4;
  kaldi::CuVector<float>::Resize(a1 + 344, *(unsigned int *)(a1 + 328), 3);
  kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 344, (uint64_t)v29, 1.0, 0.0);
  *(void *)(a1 + 120) = a4;
  *(void *)(a1 + 160) = a4;
  float v14 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v14 = v14 / (float)v9;
  }
  float v15 = *(float *)(a1 + 420);
  if (v15 > 0.0)
  {
    float v16 = (float)v9;
    if (!*(unsigned char *)(a1 + 84)) {
      float v16 = 1.0;
    }
    float v17 = v16 * v15;
    int v18 = *(_DWORD *)(a1 + 416);
    if (v18 == 1)
    {
      kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v16 * v15);
      kaldi::nnet1::UpdatableComponent::ClipGradient(a1 + 344, v17);
    }
    else if (v18 == 2)
    {
      *(void *)(a1 + 296) = a4;
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 264), *(unsigned int *)(a1 + 236), *(unsigned int *)(a1 + 232), 1, 0);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v10, (int *)(a1 + 264), v17);
      *(void *)(a1 + 400) = a4;
      kaldi::CuVector<float>::Resize(a1 + 376, *(unsigned int *)(a1 + 360), 1);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(a1 + 344, (void *)(a1 + 376), v17);
    }
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v26, *(void *)(a1 + 424), v8);
  kaldi::CuMatrixBase<float>::AddIndexedRows(a1 + 88, (uint64_t)&v26, v10, -(float)(v14 * *(float *)(a1 + 408)));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v23, a1 + 136, *(_DWORD *)(a1 + 12));
  float v19 = *(float *)(a1 + 412);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a1 + 344, v8);
  kaldi::CuMatrixBase<float>::AddIndexedRows((uint64_t)&v23, (uint64_t)&v26, (uint64_t)&v20, v19 * (float)-v14);
  uint64_t v20 = &unk_1F0A472A0;
  long long v21 = 0u;
  long long v22 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v20);
  *(void *)(a1 + 424) = 0;
  BOOL v23 = &unk_1F0A472A0;
  long long v24 = 0u;
  long long v25 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  uint64_t v26 = &unk_1F0A472A0;
  long long v27 = 0u;
  long long v28 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
  v29[0] = &unk_1F0A472A0;
  memset(&v29[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v29);
}

void sub_1B1F12384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, long long a10, long long a11, void *a12, long long a13, long long a14, void *a15, long long a16, long long a17, uint64_t a18)
{
  a9 = &unk_1F0A472A0;
  a10 = 0u;
  a11 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a12 = &unk_1F0A472A0;
  a13 = 0u;
  a14 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a12);
  a15 = &unk_1F0A472A0;
  a16 = 0u;
  a17 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a15);
  _OWORD *v18 = 0u;
  v18[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a18);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SharedNceComponent::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  if (a2 == 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "it does not make sense to do RMSPROP in this component");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  *(float *)(result + 420) = a3;
  *(_DWORD *)(result + 4kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = a2;
  return result;
}

void kaldi::nnet1::WordVecComponent::Copy(kaldi::nnet1::WordVecComponent *this)
{
}

void sub_1B1F12510(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40DE627FD4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordVecComponent::GetType(kaldi::nnet1::WordVecComponent *this)
{
  return 268;
}

uint64_t kaldi::nnet1::WordVecComponent::CountZeroCorr(kaldi::nnet1::WordVecComponent *this, int *a2, int *a3)
{
  uint64_t result = (*(uint64_t (**)(kaldi::nnet1::WordVecComponent *))(*(void *)this + 176))(this);
  *a3 = result;
  *a2 = 0;
  if (*((_DWORD *)this + 71))
  {
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros((uint64_t)this + 264);
    *a2 = result;
  }
  return result;
}

uint64_t kaldi::nnet1::WordVecComponent::Info(kaldi::nnet1::WordVecComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(kaldi::nnet1::WordVecComponent *, void *, void))(*(void *)this + 168))(this, v8, 0);
  float v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n WordVec table", 15);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 96);
  if ((v7 & 0x80u) == 0) {
    double v3 = __p;
  }
  else {
    double v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v10);
}

void sub_1B1F1275C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::WordVecComponent::InfoGradient@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\n we don't save intermediate gradient");
}

void kaldi::nnet1::WordVecComponent::InitData(int32x2_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v58 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v57);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[30].u32[0], &v56);
  int v55 = -1;
  memset(v54, 0, sizeof(v54));
  uint64_t v6 = (int *)&a1[31];
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
    {
      kaldi::ReadToken(a2, 0, (uint64_t)v54);
      if (SHIBYTE(v54[2]) < 0)
      {
        switch((unint64_t)v54[1])
        {
          case 9uLL:
            BOOL v7 = *(void *)v54[0] == 0x6461724778614D3CLL && *((unsigned char *)v54[0] + 8) == 62;
LABEL_12:
            int v8 = (float *)&a1[30] + 1;
            if (!v7) {
              goto LABEL_134;
            }
            goto LABEL_82;
          case 0xBuLL:
            BOOL v16 = *(void *)v54[0] == 0x69536261636F563CLL && *(void *)((char *)v54[0] + 3) == 0x3E657A6953626163;
LABEL_86:
            uint64_t v11 = (int *)&a1[31];
            if (!v16) {
              goto LABEL_134;
            }
            goto LABEL_88;
          case 0xCuLL:
            if (*(void *)v54[0] != 0x536D6F646E61523CLL || *((_DWORD *)v54[0] + 2) != 1046766949) {
              goto LABEL_101;
            }
LABEL_66:
            uint64_t v11 = &v55;
LABEL_88:
            kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v11);
            goto LABEL_99;
          case 0xDuLL:
            if (*(void *)v54[0] != 0x74536D617261503CLL || *(void *)((char *)v54[0] + 5) != 0x3E7665646474536DLL) {
              goto LABEL_134;
            }
LABEL_81:
            int v8 = (float *)&v58;
LABEL_82:
            kaldi::ReadBasicType<float>(a2, 0, v8);
            goto LABEL_99;
          case 0xFuLL:
            BOOL v9 = *(void *)v54[0] == 0x61526E7261654C3CLL && *(void *)((char *)v54[0] + 7) == 0x3E66656F43657461;
LABEL_54:
            int v8 = (float *)&a1[32] + 1;
            if (!v9) {
              goto LABEL_134;
            }
            goto LABEL_82;
          case 0x10uLL:
            BOOL v19 = *(void *)v54[0] == 0x5372656C6C69463CLL && *((void *)v54[0] + 1) == 0x3E64496C6F626D79;
            uint64_t v11 = (int *)&a1[31] + 1;
            if (v19) {
              goto LABEL_88;
            }
            if (v54[1] != (void *)12) {
              goto LABEL_134;
            }
LABEL_101:
            long long v27 = (void **)v54[0];
            goto LABEL_102;
          case 0x12uLL:
            if (*(void *)v54[0] != 0x6E6569646172473CLL
              || *((void *)v54[0] + 1) != 0x7079546D726F4E74
              || *((_WORD *)v54[0] + 8) != 15973)
            {
              goto LABEL_134;
            }
LABEL_97:
            BOOL v23 = &v56;
            goto LABEL_98;
          case 0x13uLL:
            if (*(void *)v54[0] != 0x61725474696E493CLL
              || *((void *)v54[0] + 1) != 0x79546D726F66736ELL
              || *(void *)((char *)v54[0] + 11) != 0x3E657079546D726FLL)
            {
              goto LABEL_134;
            }
LABEL_75:
            BOOL v23 = &v57;
LABEL_98:
            kaldi::ReadToken(a2, 0, (uint64_t)v23);
LABEL_99:
            std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
            continue;
          default:
            goto LABEL_134;
        }
      }
      switch(HIBYTE(v54[2]))
      {
        case 9:
          BOOL v7 = v54[0] == (void *)0x6461724778614D3CLL && LOBYTE(v54[1]) == 62;
          goto LABEL_12;
        case 0xB:
          BOOL v16 = v54[0] == (void *)0x69536261636F563CLL && *(void **)((char *)v54 + 3) == (void *)0x3E657A6953626163;
          goto LABEL_86;
        case 0xC:
          if (v54[0] == (void *)0x536D6F646E61523CLL && LODWORD(v54[1]) == 1046766949) {
            goto LABEL_66;
          }
          long long v27 = v54;
          break;
        case 0xD:
          if (v54[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v54 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_134;
          }
          goto LABEL_81;
        case 0xF:
          BOOL v9 = v54[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v54 + 7) == (void *)0x3E66656F43657461;
          goto LABEL_54;
        case 0x10:
          BOOL v10 = v54[0] == (void *)0x5372656C6C69463CLL && v54[1] == (void *)0x3E64496C6F626D79;
          uint64_t v11 = (int *)&a1[31] + 1;
          if (!v10) {
            goto LABEL_134;
          }
          goto LABEL_88;
        case 0x12:
          if (v54[0] != (void *)0x6E6569646172473CLL
            || v54[1] != (void *)0x7079546D726F4E74
            || LOWORD(v54[2]) != 15973)
          {
            goto LABEL_134;
          }
          goto LABEL_97;
        case 0x13:
          if (v54[0] != (void *)0x61725474696E493CLL
            || v54[1] != (void *)0x79546D726F66736ELL
            || *(void **)((char *)&v54[1] + 3) != (void *)0x3E657079546D726FLL)
          {
            goto LABEL_134;
          }
          goto LABEL_75;
        default:
          goto LABEL_134;
      }
LABEL_102:
      long long v28 = *v27;
      int v29 = *((_DWORD *)v27 + 2);
      if (v28 != (void *)0x6E6F706D6F432F3CLL || v29 != 1047817829)
      {
LABEL_134:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
        float v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v54[2]) >= 0) {
          float v43 = v54;
        }
        else {
          float v43 = (void **)v54[0];
        }
        if (SHIBYTE(v54[2]) >= 0) {
          uint64_t v44 = HIBYTE(v54[2]);
        }
        else {
          uint64_t v44 = (uint64_t)v54[1];
        }
        float v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
        uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" (ParamStddev|LearnRateCoef|VocabSize|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 92);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v50);
      }
    }
    break;
  }
  if (*v6 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"invalid vocabulary size ", 24);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v50);
  }
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v57);
  a1[30].i32[0] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v56);
  if (!inited)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"it doesn't make sense to initialize the word vec as an identify matrix", 70);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v50);
  }
  if (v55 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v55);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v50, a3);
  BOOL v32 = a1 + 12;
  kaldi::CuMatrix<float>::Resize(a1 + 12, a1[31].u32[0], a1[32].u32[0], 1, 0);
  kaldi::Matrix<float>::Matrix((uint64_t)v48, a1[31].u32[0], a1[32].u32[0], 0, 0);
  int v33 = *v6;
  if (*v6 < 1) {
    goto LABEL_123;
  }
  int v34 = 0;
  int v35 = a1[32].i32[0];
  do
  {
    if (v35 < 1) {
      goto LABEL_122;
    }
    for (uint64_t i = 0; i < v35; ++i)
    {
      if (inited == 2)
      {
        float v39 = *(float *)&v58;
        kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v50, 0);
        float v38 = v39 * v40;
      }
      else
      {
        if (inited != 1) {
          continue;
        }
        float v37 = *(float *)&v58;
        float v38 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v37 + v37);
      }
      *((float *)v48[0] + v34 * v49 + i) = v38;
      int v35 = a1[32].i32[0];
    }
    int v33 = *v6;
LABEL_122:
    ++v34;
  }
  while (v34 < v33);
LABEL_123:
  __int32 v41 = a1[31].i32[1];
  if ((v41 & 0x80000000) == 0)
  {
    v47[2] = 0;
    v47[0] = (char *)v48[0] + 4 * v49 * v41;
    v47[1] = kaldi::MatrixBase<float>::NumCols((uint64_t)v48);
    kaldi::VectorBase<float>::SetZero((uint64_t)v47);
  }
  kaldi::CuMatrix<float>::operator=(v32, (int *)v48);
  kaldi::Matrix<float>::~Matrix((uint64_t)v48);
  if (__p)
  {
    uint64_t v53 = __p;
    operator delete(__p);
  }
  v48[0] = (void **)&v51;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v48);
  if (SHIBYTE(v54[2]) < 0) {
    operator delete(v54[0]);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
}

void sub_1B1F12FC4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordVecComponent::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v7 = a1 + 96;
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  return kaldi::CuMatrixBase<float>::Write(v7, a2, a3, a4);
}

uint64_t kaldi::nnet1::WordVecComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::CuMatrixBase<float>::ConcatenateVec(a3, a1 + 96, a2);
}

uint64_t kaldi::nnet1::WordVecComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::Peek(a2, a3) == 60)
  {
    while (1)
    {
      long long v31 = 0uLL;
      uint64_t v32 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v31);
      if ((SHIBYTE(v32) & 0x80000000) == 0) {
        break;
      }
      uint64_t v10 = *((void *)&v31 + 1);
      if (*((void *)&v31 + 1) != 11
        || (*(void *)v31 == 0x69536261636F563CLL ? (BOOL v11 = *(void *)(v31 + 3) == 0x3E657A6953626163) : (BOOL v11 = 0),
            uint64_t v9 = a1 + 248,
            !v11))
      {
        if (*((void *)&v31 + 1) == 15)
        {
          BOOL v12 = *(void *)v31 == 0x61526E7261654C3CLL && *(void *)(v31 + 7) == 0x3E66656F43657461;
          uint64_t v13 = (float *)(a1 + 260);
          if (v12) {
            goto LABEL_62;
          }
          uint64_t v10 = *((void *)&v31 + 1);
        }
        if (v10 == 18)
        {
          if (*(void *)v31 == 0x6E6569646172473CLL
            && *(void *)(v31 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v31 + 16) == 15973)
          {
LABEL_67:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v30 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p);
            *(_DWORD *)(a1 + 240) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v30) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_63;
          }
          uint64_t v10 = *((void *)&v31 + 1);
        }
        if (v10 == 9)
        {
          BOOL v16 = *(void *)v31 == 0x6461724778614D3CLL && *(unsigned char *)(v31 + 8) == 62;
          uint64_t v13 = (float *)(a1 + 244);
          if (v16) {
            goto LABEL_62;
          }
          uint64_t v10 = *((void *)&v31 + 1);
        }
        if (v10 != 16) {
          goto LABEL_71;
        }
        uint64_t v7 = (uint64_t *)v31;
LABEL_37:
        uint64_t v17 = *v7;
        uint64_t v18 = v7[1];
        BOOL v19 = v17 == 0x5372656C6C69463CLL && v18 == 0x3E64496C6F626D79;
        uint64_t v9 = a1 + 252;
        if (!v19) {
          goto LABEL_71;
        }
      }
LABEL_42:
      kaldi::ReadBasicType<int>(a2, a3, v9);
LABEL_63:
      if (SHIBYTE(v32) < 0) {
        operator delete((void *)v31);
      }
      if (kaldi::Peek(a2, a3) != 60) {
        goto LABEL_69;
      }
    }
    uint64_t v7 = (uint64_t *)&v31;
    switch(HIBYTE(v32))
    {
      case 9:
        goto LABEL_57;
      case 0xB:
        BOOL v8 = (void)v31 == 0x69536261636F563CLL && *(void *)((char *)&v31 + 3) == 0x3E657A6953626163;
        uint64_t v9 = a1 + 248;
        if (!v8) {
          goto LABEL_71;
        }
        goto LABEL_42;
      case 0xF:
        BOOL v22 = (void)v31 == 0x61526E7261654C3CLL && *(void *)((char *)&v31 + 7) == 0x3E66656F43657461;
        uint64_t v13 = (float *)(a1 + 260);
        if (!v22) {
          goto LABEL_56;
        }
        break;
      case 0x10:
        goto LABEL_37;
      case 0x12:
        if ((void)v31 == 0x6E6569646172473CLL
          && *((void *)&v31 + 1) == 0x7079546D726F4E74
          && (unsigned __int16)v32 == 15973)
        {
          goto LABEL_67;
        }
        if (HIBYTE(v32) == 16)
        {
          uint64_t v7 = (uint64_t *)&v31;
          goto LABEL_37;
        }
LABEL_56:
        if (HIBYTE(v32) != 9) {
          goto LABEL_71;
        }
LABEL_57:
        BOOL v23 = (void)v31 == 0x6461724778614D3CLL && BYTE8(v31) == 62;
        uint64_t v13 = (float *)(a1 + 244);
        if (!v23)
        {
LABEL_71:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v32 >= 0) {
            uint64_t v26 = &v31;
          }
          else {
            uint64_t v26 = (long long *)v31;
          }
          if (v32 >= 0) {
            uint64_t v27 = HIBYTE(v32);
          }
          else {
            uint64_t v27 = *((void *)&v31 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        return result;
      default:
        goto LABEL_71;
    }
LABEL_62:
    kaldi::ReadBasicType<float>(a2, a3, v13);
    goto LABEL_63;
  }
LABEL_69:
  if (*(int *)(a1 + 248) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"invalid vocabulary size ", 24);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  return kaldi::CuMatrix<float>::Read(a1 + 96, a2, a3, a4);
}

void sub_1B1F13558()
{
}

uint64_t kaldi::nnet1::WordVecComponent::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<VocabSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 240), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<FillerSymbolId>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

void sub_1B1F136A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::WordVecComponent::NumParams(kaldi::nnet1::WordVecComponent *this)
{
  return (*((_DWORD *)this + 28) * *((_DWORD *)this + 29));
}

void *kaldi::nnet1::WordVecComponent::GetParams(uint64_t a1, void **a2)
{
  uint64_t v3 = a1 + 96;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 1);
  return kaldi::VectorBase<float>::CopyRowsFromMat(a2, v3);
}

int *kaldi::nnet1::WordVecComponent::SetParams(uint64_t a1, char **a2)
{
  uint64_t v3 = a1 + 96;
  (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  return kaldi::CuMatrixBase<float>::CopyRowsFromVec(v3, a2);
}

float kaldi::nnet1::WordVecComponent::SumParams(kaldi::nnet1::WordVecComponent *this)
{
  return kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 96);
}

uint64_t kaldi::nnet1::WordVecComponent::PerturbParams(kaldi::nnet1::WordVecComponent *this, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix(v5, *((unsigned int *)this + 29), *((unsigned int *)this + 28), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v5);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 96, (uint64_t)v5, 111, a2, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v5);
}

void sub_1B1F1381C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::nnet1::WordVecComponent::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  kaldi::Vector<float>::Resize(a4, (*(_DWORD *)(a3 + 16) * *(_DWORD *)(a3 + 20)), 1);
  return kaldi::VectorBase<float>::CopyRowsFromMat(a4, a3);
}

void kaldi::nnet1::WordVecComponent::AccumGradients(uint64_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a2 + 20);
  float v8 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v8 = v8 / (float)v7;
  }
  float v9 = *(float *)(a1 + 244);
  if (v9 <= 0.0)
  {
    uint64_t v10 = (uint64_t)a3;
  }
  else
  {
    uint64_t v10 = a1 + 144;
    *(void *)(a1 + 176) = a4;
    kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 144), a3);
    int v11 = *(_DWORD *)(a1 + 240);
    if (v11 == 2)
    {
      float v13 = (float)v7;
      if (!*(unsigned char *)(a1 + 84)) {
        float v13 = 1.0;
      }
      float v14 = v9 * v13;
      *(void *)(a1 + 224) = a4;
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 192), *(unsigned int *)(a1 + 164), *(unsigned int *)(a1 + 160), 1, 0);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(a1 + 144, (int *)(a1 + 192), v14);
    }
    else if (v11 == 1)
    {
      float v12 = (float)v7;
      if (!*(unsigned char *)(a1 + 84)) {
        float v12 = 1.0;
      }
      kaldi::nnet1::UpdatableComponent::ClipGradient(a1 + 144, v9 * v12);
    }
  }
  float v15 = *(float *)(a1 + 72);
  if (v15 <= 0.0)
  {
    *(void *)(a1 + 128) = a4;
    kaldi::CuMatrixBase<float>::AddIndexedRows(a1 + 96, a2, v10, -(float)(v8 * *(float *)(a1 + 260)));
  }
  else
  {
    if (*(void *)(a1 + 320) == *(void *)(a1 + 312))
    {
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 264), *(unsigned int *)(a1 + 116), *(unsigned int *)(a1 + 112), 0, 0);
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 312), a1 + 264);
    }
    *(void *)(a1 + 296) = a4;
    kaldi::CuMatrixBase<float>::SetZero(a1 + 264);
    kaldi::CuMatrixBase<float>::AddIndexedRows(a1 + 264, a2, v10, 1.0);
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 312), *(_DWORD *)(a1 + 76), v15);
    *(void *)(a1 + 128) = a4;
    kaldi::CuMatrixBase<float>::AddMat(a1 + 96, a1 + 264, 111, -(float)(v8 * *(float *)(a1 + 260)), 1.0);
  }
  int v16 = *(_DWORD *)(a1 + 252);
  if ((v16 & 0x80000000) == 0)
  {
    unsigned int v17 = *(_DWORD *)(a1 + 112);
    uint64_t v18 = *(void *)(a1 + 128);
    v19[1] = *(void *)(a1 + 104) + 4 * *(_DWORD *)(a1 + 120) * v16;
    v19[0] = &unk_1F0A472D0;
    v19[2] = v17;
    v19[3] = v18;
    kaldi::CuVectorBase<float>::SetZero((uint64_t)v19);
  }
}

void kaldi::nnet1::WordVecComponent::SetGradientNormalization(uint64_t a1, int a2, float a3)
{
  if (a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"RMSPROP is not implemented in word embedding yet", 48);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    }
  }
  else
  {
    *(float *)(a1 + 244) = a3;
    *(_DWORD *)(a1 + 240) = a2;
  }
}

void sub_1B1F13AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::WordVecComponent::CopyCompressed(kaldi::nnet1::WordVecComponent *this)
{
}

void sub_1B1F13BCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::WordVecComponent::CopyCompressed(kaldi::nnet1::WordVecComponent *this)
{
}

void kaldi::nnet1::FofeWordVecComponent::Copy(kaldi::nnet1::FofeWordVecComponent *this)
{
}

void sub_1B1F13CA0(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::nnet1::WordVecComponent::~WordVecComponent(v1);
  MEMORY[0x1B3EA8670](v1, 0x10A1C40E06CE33FLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FofeWordVecComponent::GetType(kaldi::nnet1::FofeWordVecComponent *this)
{
  return 269;
}

uint64_t kaldi::nnet1::FofeWordVecComponent::OutputRowCount(kaldi::nnet1::FofeWordVecComponent *this)
{
  return 1;
}

void kaldi::nnet1::FofeWordVecComponent::PropagateFnc(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a2 + 20);
  kaldi::nnet1::FofeWordVecComponent::Prepare(a1, v6);
  kaldi::CuMatrixBase<float>::ConcatenateVec((uint64_t)&a1[55], (uint64_t)&a1[12], a2);
  unsigned __int32 v7 = a1[51].i32[0] - v6;
  __int32 v8 = a1[52].i32[0];
  uint64_t v9 = *(void *)&a1[50] + 4 * (int)v7;
  unsigned int v10 = a1[52].i32[1] - v7;
  int32x2_t v11 = a1[53];
  *(void *)&long long v13 = v9;
  *((void *)&v13 + 1) = v6 | 0x100000000;
  *(void *)&long long v14 = __PAIR64__(v10, v8);
  *((int32x2_t *)&v14 + 1) = v11;
  float v12 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::AddMatMat(a3, (uint64_t)&v12, CblasNoTrans, (uint64_t)&a1[55], CblasNoTrans, 1.0, 0.0);
  float v12 = &unk_1F0A472A0;
  long long v13 = 0u;
  long long v14 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v12);
}

void sub_1B1F13DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FofeWordVecComponent::AccumGradients()
{
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"not implemented", 15);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  }
}

void sub_1B1F13E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double kaldi::nnet1::ConvolutionalComponent::ConvolutionalComponent(kaldi::nnet1::ConvolutionalComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1B255E480;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = &unk_1F0A4C328;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  double result = 0.0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 13) = &unk_1F0A51768;
  *((unsigned char *)this + 144) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 19) = &unk_1F0A517C0;
  *((void *)this + 20) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 2kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 35) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((void *)this + 36) = _D1;
  *((_DWORD *)this + 74) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 361) = 0u;
  return result;
}

double kaldi::nnet1::FofeWordVecComponent::FofeWordVecComponent(kaldi::nnet1::FofeWordVecComponent *this, int a2, int a3)
{
  kaldi::nnet1::WordVecComponent::WordVecComponent(this, a2, a3);
  *(void *)uint64_t v3 = &unk_1F0A4BC78;
  *(void *)(v3 + 88) = &unk_1F0A4BDA8;
  *(_DWORD *)(v3 + 384) = 1060320051;
  double result = 0.0;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 4kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  *(void *)(v3 + 392) = &unk_1F0A51768;
  *(unsigned char *)(v3 + 432) = 0;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(void *)(v3 + 440) = &unk_1F0A51768;
  *(unsigned char *)(v3 + 480) = 0;
  return result;
}

double kaldi::nnet1::Rbm::Rbm(kaldi::nnet1::Rbm *this, int a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = 0x3F0000003ECCCCCDLL;
  *((_DWORD *)this + 14) = 1063675494;
  *(void *)((char *)this + 60) = 0x7A12000000028;
  *((_DWORD *)this + 17) = 961656599;
  *(void *)this = &unk_1F0A4F0B8;
  double result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 9) = &unk_1F0A51768;
  *((unsigned char *)this + 112) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 15) = &unk_1F0A517C0;
  *((void *)this + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 19) = &unk_1F0A517C0;
  *((void *)this + 20) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((void *)this + 23) = &unk_1F0A51768;
  *((unsigned char *)this + 224) = 0;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 29) = &unk_1F0A517C0;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"read() method not implemented\n", 30) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 33) = &unk_1F0A517C0;
  *((void *)this + 34) = 0;
  return result;
}

kaldi::nnet1::Padding2DComponent *kaldi::nnet1::Padding2DComponent::Padding2DComponent(kaldi::nnet1::Padding2DComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1F0A4B5E8;
  kaldi::nnet1::Padding2DComponent::Init(this);
  return this;
}

void sub_1B1F141D0(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F0A4FA88;
  uint64_t v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::AddShift *kaldi::nnet1::AddShift::AddShift(kaldi::nnet1::AddShift *this, uint64_t a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1B255E480;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = &unk_1F0A4F8A0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = &unk_1F0A517C0;
  *((void *)this + 14) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 88, a2, 1);
  *((void *)this + 21) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 208) = 0;
  return this;
}

void sub_1B1F142F4(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Rescale *kaldi::nnet1::Rescale::Rescale(kaldi::nnet1::Rescale *this, uint64_t a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1B255E480;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = &unk_1F0A4F5F8;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = &unk_1F0A517C0;
  *((void *)this + 14) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 88, a2, 1);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 21) = &unk_1F0A51768;
  *((unsigned char *)this + 208) = 0;
  *((_DWORD *)this + 54) = 0;
  *(void *)((char *)this + 220) = 0x3F80000000000000;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"read() method not implemented\n", 30) = 0;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = 0;
  *((void *)this + 29) = 0;
  *((unsigned char *)this + 256) = 0;
  return this;
}

void sub_1B1F14420(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::KlHmm *kaldi::nnet1::KlHmm::KlHmm(kaldi::nnet1::KlHmm *this, uint64_t a2, uint64_t a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1F0A4F2D0;
  kaldi::Matrix<double>::Matrix((uint64_t)this + 48, a3, a2, 0, 0);
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 11) = &unk_1F0A51768;
  *((unsigned char *)this + 128) = 0;
  return this;
}

void sub_1B1F144C8(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F0A4FA88;
  uint64_t v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SentenceAveragingComponent::SentenceAveragingComponent(kaldi::nnet1::SentenceAveragingComponent *this, int a2, int a3, float a4)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1B255E480;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = &unk_1F0A4DCF8;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
}

void sub_1B1F145AC(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::FramePoolingComponent::FramePoolingComponent(kaldi::nnet1::FramePoolingComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1B255E480;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = &unk_1F0A4BE90;
  *((_DWORD *)this + 22) = 0;
  double result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = 1008981770;
  *((unsigned char *)this + 172) = 0;
  return result;
}

kaldi::nnet1::SharedNceComponent *kaldi::nnet1::SharedNceComponent::SharedNceComponent(kaldi::nnet1::SharedNceComponent *this, uint64_t a2, uint64_t a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1B255E480;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = &unk_1F0A4B8F8;
  kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)this + 11, a3, a2, 0, 0, 0);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 17) = &unk_1F0A517C0;
  *((void *)this + 20) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 136, a3, 0);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 21) = &unk_1F0A51768;
  *((unsigned char *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 27) = &unk_1F0A51768;
  *((unsigned char *)this + 256) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((void *)this + 33) = &unk_1F0A51768;
  *((unsigned char *)this + 304) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *((void *)this + 39) = &unk_1F0A517C0;
  *((void *)this + 40) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 43) = &unk_1F0A517C0;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = &unk_1F0A517C0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 51) = _D0;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  return this;
}

void sub_1B1F1484C(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::InterpolationComponent *kaldi::nnet1::InterpolationComponent::InterpolationComponent(kaldi::nnet1::InterpolationComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  uint64_t v4 = (void **)((char *)this + 48);
  *(void *)this = &unk_1F0A4C450;
  int v5 = a2 / a3;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  if (a2 % a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"The input dimension is not divisible by the output dimension", 60);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  if (v5 >= 1)
  {
    unsigned int v6 = 0;
    int v7 = 0;
    float v8 = 1.0 / (double)v5;
    uint64_t v9 = (void *)((char *)this + 64);
    do
    {
      if ((unint64_t)v6 >= *v9)
      {
        int32x2_t v11 = (float *)*v4;
        uint64_t v12 = ((char *)v6 - (unsigned char *)*v4) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v9 - (void)v11;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 64, v15);
          int32x2_t v11 = (float *)*((void *)this + 6);
          unsigned int v6 = (float *)*((void *)this + 7);
        }
        else
        {
          int v16 = 0;
        }
        unsigned int v17 = (float *)&v16[4 * v12];
        float *v17 = v8;
        unsigned int v10 = v17 + 1;
        while (v6 != v11)
        {
          int v18 = *((_DWORD *)v6-- - 1);
          *((_DWORD *)v17-- - 1) = v18;
        }
        *((void *)this + 6) = v17;
        *((void *)this + 7) = v10;
        *((void *)this + 8) = &v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *unsigned int v6 = v8;
        unsigned int v10 = v6 + 1;
      }
      *((void *)this + 7) = v10;
      ++v7;
      unsigned int v6 = v10;
    }
    while (v7 != v5);
  }
  return this;
}

void sub_1B1F14A40(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  void *v1 = v2;
  unsigned int v6 = (void *)v1[3];
  if (v6)
  {
    v1[4] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::CompressedWordTransComponent *kaldi::nnet1::CompressedWordTransComponent::CompressedWordTransComponent(kaldi::nnet1::CompressedWordTransComponent *this, uint64_t a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1F0A4E248;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 6) = &unk_1F0A517C0;
  *((void *)this + 7) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 48, a2, 0);
  *((void *)this + 10) = 0;
  *((unsigned char *)this + 88) = 0;
  *((_DWORD *)this + 24) = -1;
  return this;
}

void sub_1B1F14B00(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F0A4FA88;
  uint64_t v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent(uint64_t *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *this = *a2;
  *(uint64_t *)((char *)this + *(void *)(v2 - 40)) = a2[1];
  *(uint64_t *)((char *)this + *(void *)(*this - 48)) = a2[2];
  *(uint64_t *)((char *)this + *(void *)(*this - 56)) = a2[3];
  return this;
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, uint64_t *a2)
{
  uint64_t v3 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, a2 + 1);
  uint64_t v4 = *a2;
  *uint64_t v3 = *a2;
  *(uint64_t *)((char *)v3 + *(void *)(v4 - 40)) = a2[5];
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 48)) = a2[6];
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 56)) = a2[7];
  double result = 0.0;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  v3[1] = (uint64_t)&unk_1F0A51768;
  *((unsigned char *)v3 + 48) = 0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  v3[7] = (uint64_t)&unk_1F0A51768;
  *((unsigned char *)v3 + 96) = 0;
  *((unsigned char *)v3 + 104) = 0;
  *((_DWORD *)v3 + 27) = 1065353216;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

void kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, uint64_t *a2)
{
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, a2 + 1);
  uint64_t v3 = *a2;
  *(void *)uint64_t v4 = *a2;
  *(void *)(v4 + *(void *)(v3 - 40)) = a2[9];
  *(void *)(v4 + *(void *)(*(void *)v4 - 48)) = a2[10];
  *(void *)(v4 + *(void *)(*(void *)v4 - 56)) = a2[11];
  *(_DWORD *)(v4 + 144) = -1;
}

uint64_t kaldi::nnet1::RelaxedSoftmax::RelaxedSoftmax(uint64_t this, int a2, int a3, float a4)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_WORD *)(this + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 24) = 0;
  *(void *)this = &unk_1F0A49C10;
  *(float *)(this + 48) = a4;
  if (a4 <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Relaxation factor must be positive; found: ",
      43);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return this;
}

void sub_1B1F15014(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  uint64_t v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::BlockSoftmax *kaldi::nnet1::BlockSoftmax::BlockSoftmax(kaldi::nnet1::BlockSoftmax *this, const kaldi::nnet1::BlockSoftmax *a2)
{
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = &unk_1F0A489A0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 6, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 2);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 9, *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2);
  return this;
}

void sub_1B1F15108(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  void *v1 = v2;
  unsigned int v6 = (void *)v1[3];
  if (v6)
  {
    v1[4] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::BlockSoftmax::InitOffset(std::vector<int> *this)
{
  std::vector<int>::size_type v2 = this[2].__end_ - this[2].__begin_ + 1;
  LODWORD(v12[0]) = 0;
  std::vector<int>::resize(this + 3, v2, (std::vector<int>::const_reference)v12);
  std::vector<int>::pointer begin = this[2].__begin_;
  std::vector<int>::pointer end = this[2].__end_;
  uint64_t v5 = (char *)end - (char *)begin;
  if (end != begin)
  {
    std::vector<int>::pointer v6 = this[3].__begin_;
    unint64_t v7 = v5 >> 2;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    int v10 = *v6;
    float v8 = v6 + 1;
    int v9 = v10;
    do
    {
      int v11 = *begin++;
      v9 += v11;
      *v8++ = v9;
      --v7;
    }
    while (v7);
  }
  if (HIDWORD(this->__end_) != *(this[3].__end_ - 1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Total block dimensions and output dimension mismatch");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
}

uint64_t kaldi::nnet1::Component::GetUnitOutput(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a1[2] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::vector<int>::pointer v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Non-matching dims! ", 19);
    unint64_t v7 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24))(a1);
    kaldi::nnet1::Component::TypeToMarker(v7, &v15);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v8 = &v15;
    }
    else {
      float v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" input-dim : ", 13);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" data : ", 8);
    std::ostream::operator<<();
    std::string::~string(&v15);
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (*(_DWORD *)(a4 + 16) != *(_DWORD *)(a2 + 20))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Non-matching dims! Input batch size: ", 37);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" output dim : ", 14);
    std::ostream::operator<<();
    goto LABEL_16;
  }
  if (a1[3] <= a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Requested output for invalid unit: ", 35);
    unint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; total units = ", 16);
    std::ostream::operator<<();
    goto LABEL_16;
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)a1 + 144);
  return v4();
}

uint64_t kaldi::nnet1::Component::GetUnitOutput(_DWORD *a1, uint64_t a2, int a3)
{
  if (a1[2] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Non-matching dims! ", 19);
    std::vector<int>::pointer v6 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24))(a1);
    kaldi::nnet1::Component::TypeToMarker(v6, &v13);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v7 = &v13;
    }
    else {
      unint64_t v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" input-dim : ", 13);
    int v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" data : ", 8);
    std::ostream::operator<<();
    std::string::~string(&v13);
LABEL_14:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (a1[3] <= a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Requested output for invalid unit: ", 35);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; total units = ", 16);
    std::ostream::operator<<();
    goto LABEL_14;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)a1 + 152);
  return v3();
}

void *kaldi::operator<<<int>(void *a1, int *a2)
{
  memset(&__p, 0, sizeof(__p));
  kaldi::CuArray<int>::CopyToVec(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  if (__p.__end_ != __p.__begin_)
  {
    unint64_t v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      std::ostream::operator<<();
      ++v3;
    }
    while (v3 < __p.__end_ - __p.__begin_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ]\n", 3);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return a1;
}

void sub_1B1F1568C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::AddShift *kaldi::nnet1::AddShift::AddShift(kaldi::nnet1::AddShift *this, const kaldi::nnet1::AddShift *a2)
{
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = &unk_1F0A4BA20;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = &unk_1F0A4F8A0;
  kaldi::CuVector<float>::CuVector((void *)this + 11, (uint64_t)a2 + 88);
  *((void *)this + 15) = 0;
  *((void *)this + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *((void *)this + 17) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 15, *((void *)a2 + 15), *((void *)a2 + 16), (uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 5);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 18, *((void *)a2 + 18), *((void *)a2 + 19), (uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 5);
  uint64_t v6 = *((void *)a2 + 21);
  int v7 = *((_DWORD *)a2 + 44);
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 44) = v7;
  *((void *)this + 21) = v6;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 23, *((const void **)a2 + 23), *((void *)a2 + 24), (uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 2);
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 208);
  return this;
}

void sub_1B1F15820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void sub_1B1F1595C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AddShift::EnsureCorrs(kaldi::nnet1::AddShift *this)
{
  if (!*((unsigned char *)this + 208))
  {
    int v2 = *((_DWORD *)this + 42);
    int v3 = *((_DWORD *)this + 20);
    if (v3 > 1) {
      int v4 = v3 + 1;
    }
    else {
      int v4 = 1;
    }
    std::vector<unsigned int>::size_type v5 = v4;
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 15, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 18, v4);
    if (v4 >= 1)
    {
      uint64_t v6 = 0;
      unsigned int v7 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuVector<float>::Resize(*((void *)this + 15) + v6, *((unsigned int *)this + 26), 0);
        if (v7 == 2)
        {
          kaldi::CuVector<float>::Resize(*((void *)this + 18) + v6, *((unsigned int *)this + 26), 1);
          if (*((_DWORD *)this + 42) == 3) {
            kaldi::CuVectorBase<float>::Set(*((void *)this + 18) + v6, 1.0);
          }
        }
        v6 += 32;
      }
      while (32 * v5 != v6);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 184), v5);
    *((unsigned char *)this + 208) = 1;
  }
}

kaldi::nnet1::Rescale *kaldi::nnet1::Rescale::Rescale(kaldi::nnet1::Rescale *this, const kaldi::nnet1::Rescale *a2)
{
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = &unk_1F0A4BA20;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = &unk_1F0A4F5F8;
  kaldi::CuVector<float>::CuVector((void *)this + 11, (uint64_t)a2 + 88);
  *((void *)this + 15) = 0;
  *((void *)this + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *((void *)this + 17) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 15, *((void *)a2 + 15), *((void *)a2 + 16), (uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 5);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 18, *((void *)a2 + 18), *((void *)a2 + 19), (uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 5);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 168, (char *)a2 + 168, 111);
  uint64_t v6 = *((void *)a2 + 27);
  int v7 = *((_DWORD *)a2 + 56);
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 56) = v7;
  *((void *)this + 27) = v6;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"read() method not implemented\n", 30) = 0;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 29, *((const void **)a2 + 29), *((void *)a2 + 30), (uint64_t)(*((void *)a2 + 30) - *((void *)a2 + 29)) >> 2);
  *((unsigned char *)this + 256) = *((unsigned char *)a2 + 256);
  return this;
}

void sub_1B1F15C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Rescale::EnsureCorrs(kaldi::nnet1::Rescale *this)
{
  if (!*((unsigned char *)this + 256))
  {
    int v2 = *((_DWORD *)this + 54);
    int v3 = *((_DWORD *)this + 20);
    if (v3 > 1) {
      int v4 = v3 + 1;
    }
    else {
      int v4 = 1;
    }
    std::vector<unsigned int>::size_type v5 = v4;
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 15, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 18, v4);
    if (v4 >= 1)
    {
      uint64_t v6 = 0;
      unsigned int v7 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuVector<float>::Resize(*((void *)this + 15) + v6, *((unsigned int *)this + 26), 0);
        if (v7 == 2)
        {
          kaldi::CuVector<float>::Resize(*((void *)this + 18) + v6, *((unsigned int *)this + 26), 1);
          if (*((_DWORD *)this + 54) == 3) {
            kaldi::CuVectorBase<float>::Set(*((void *)this + 18) + v6, 1.0);
          }
        }
        v6 += 32;
      }
      while (32 * v5 != v6);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 232), v5);
    *((unsigned char *)this + 256) = 1;
  }
}

kaldi::nnet1::Rbm *kaldi::nnet1::Rbm::Rbm(kaldi::nnet1::Rbm *this, const kaldi::nnet1::Rbm *a2)
{
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = &unk_1F0A4F510;
  long long v5 = *((_OWORD *)a2 + 3);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((_OWORD *)this + 3) = v5;
  *(void *)this = &unk_1F0A4F0B8;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 72, (char *)a2 + 72, 111);
  kaldi::CuVector<float>::CuVector((void *)this + 15, (uint64_t)a2 + 120);
  kaldi::CuVector<float>::CuVector((void *)this + 19, (uint64_t)a2 + 152);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 184, (char *)a2 + 184, 111);
  kaldi::CuVector<float>::CuVector((void *)this + 29, (uint64_t)a2 + 232);
  kaldi::CuVector<float>::CuVector((void *)this + 33, (uint64_t)a2 + 264);
  *((void *)this + 37) = *((void *)a2 + 37);
  return this;
}

void sub_1B1F15E94(_Unwind_Exception *a1)
{
  kaldi::CuVector<float>::~CuVector(v7);
  kaldi::CuMatrix<float>::~CuMatrix(v6);
  kaldi::CuVector<float>::~CuVector(v5);
  kaldi::CuVector<float>::~CuVector(v4);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  void *v1 = v2;
  int v9 = (void *)v1[3];
  if (v9)
  {
    v1[4] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_1B1F15EFC()
{
}

float kaldi::nnet1::CheckNanInf<float>(uint64_t a1, char *a2)
{
  float result = kaldi::CuMatrixBase<float>::Sum(a1);
  if (fabsf(result) == INFINITY)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"'inf' in ", 9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, a2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  return result;
}

float kaldi::nnet1::ComputeStdDev<float>(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 16);
  int v2 = *(_DWORD *)(a1 + 20);
  float v4 = kaldi::CuMatrixBase<float>::Sum(a1);
  uint64_t v5 = kaldi::CuMatrix<float>::CuMatrix(v14, a1, 111);
  kaldi::CuMatrixBase<float>::MulElements(v5, a1);
  float v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)v14);
  float v7 = (float)(v3 * v2);
  float v8 = v4 / v7;
  float v9 = v6 / v7;
  if ((float)(v9 - (float)(v8 * v8)) >= 0.0)
  {
    float v10 = v9 - (float)(v8 * v8);
  }
  else
  {
    float v10 = 0.0;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Forcing the variance to be non-negative! ", 41);
      int v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"->0.0", 5);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    }
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
  return sqrtf(v10);
}

void sub_1B1F160A0(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v1 - 96);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Recurrent *kaldi::nnet1::Recurrent::Recurrent(kaldi::nnet1::Recurrent *this, const kaldi::nnet1::Recurrent *a2)
{
  float v4 = (char *)a2 + *(void *)(*(void *)a2 - 24);
  *((void *)this + 66) = &unk_1F0A4FA88;
  uint64_t v5 = *((void *)v4 + 1);
  *((_WORD *)this + 272) = *((_WORD *)v4 + 8);
  *((void *)this + 67) = v5;
  *((void *)this + 69) = 0;
  *((void *)this + 71) = 0;
  *((void *)this + 70) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 69, *((const void **)v4 + 3), *((void *)v4 + 4), (uint64_t)(*((void *)v4 + 4) - *((void *)v4 + 3)) >> 3);
  *((void *)this + 66) = &unk_1F0A4BA20;
  *((void *)this + 72) = &unk_1F0A4A6D0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 599) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)((char *)this + 584) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1F0A325D8, (uint64_t)a2);
  *(void *)this = off_1F0A4FC10;
  *((void *)this + 66) = off_1F0A4FE60;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 160, (char *)a2 + 160, 111);
  kaldi::CuVector<float>::CuVector((void *)this + 26, (uint64_t)a2 + 208);
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"read() method not implemented\n", 30) = 0;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = 0;
  *((void *)this + 32) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 30, *((void *)a2 + 30), *((void *)a2 + 31), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 31) - *((void *)a2 + 30)) >> 4));
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 33, *((void *)a2 + 33), *((void *)a2 + 34), (uint64_t)(*((void *)a2 + 34) - *((void *)a2 + 33)) >> 5);
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 36, *((void *)a2 + 36), *((void *)a2 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 37) - *((void *)a2 + 36)) >> 4));
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 39, *((void *)a2 + 39), *((void *)a2 + 40), (uint64_t)(*((void *)a2 + 40) - *((void *)a2 + 39)) >> 5);
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 42, *((void *)a2 + 42), *((void *)a2 + 43), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 43) - *((void *)a2 + 42)) >> 4));
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 45, *((void *)a2 + 45), *((void *)a2 + 46), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 46) - *((void *)a2 + 45)) >> 4));
  long long v7 = *((_OWORD *)a2 + 24);
  *((_DWORD *)this + 100) = *((_DWORD *)a2 + 100);
  *((_OWORD *)this + 24) = v7;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 51) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 51, *((const void **)a2 + 51), *((void *)a2 + 52), (uint64_t)(*((void *)a2 + 52) - *((void *)a2 + 51)) >> 2);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 432, (char *)a2 + 432, 111);
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 62) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 60, *((void *)a2 + 60), *((void *)a2 + 61), (uint64_t)(*((void *)a2 + 61) - *((void *)a2 + 60)) >> 5);
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 65) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 63, *((void *)a2 + 63), *((void *)a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 64) - *((void *)a2 + 63)) >> 4));
  return this;
}

void sub_1B1F163CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void *a12, uint64_t a13, void **a14)
{
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  kaldi::CuMatrix<float>::~CuMatrix(v17);
  BOOL v19 = *v16;
  if (*v16)
  {
    *((void *)v15 + 52) = v19;
    operator delete(v19);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  a14 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  a14 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  kaldi::CuVector<float>::~CuVector(a12);
  kaldi::CuMatrix<float>::~CuMatrix(a13);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v15, (uint64_t *)&off_1F0A325D8);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v14);
  _Unwind_Resume(a1);
}

void sub_1B1F16494()
{
}

void sub_1B1F1649C()
{
}

void sub_1B1F164A4()
{
}

void sub_1B1F164AC()
{
}

void sub_1B1F164B4()
{
}

void sub_1B1F164BC()
{
}

void sub_1B1F164C4()
{
}

void sub_1B1F164CC()
{
}

void sub_1B1F165AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::EnsureTrainingBuffers(kaldi::nnet1::Recurrent *this)
{
  if (!*((unsigned char *)this + 389))
  {
    int v2 = *((_DWORD *)this + 39);
    int v3 = *((_DWORD *)this + 20);
    if (v3 > 1) {
      uint64_t v4 = (v3 + 1);
    }
    else {
      uint64_t v4 = 1;
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 30, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 33, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 45, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 36, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 39, (int)v4);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (*((_DWORD *)this + 24) + *((_DWORD *)this + 24) * *((_DWORD *)this + 25));
      unsigned int v7 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 30) + 48 * v5), *((unsigned int *)this + 45), *((unsigned int *)this + 44), 0, 0);
        kaldi::CuVector<float>::Resize(*((void *)this + 33) + 32 * v5, *((unsigned int *)this + 56), 0);
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 45) + 48 * v5), v6, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
        if (v7 == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 36) + 48 * v5), *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1, 0);
          kaldi::CuVector<float>::Resize(*((void *)this + 39) + 32 * v5, *((unsigned int *)this + 56), 1);
          if (*((_DWORD *)this + 39) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 36) + 48 * v5, 1.0);
            kaldi::CuVectorBase<float>::Set(*((void *)this + 39) + 32 * v5, 1.0);
          }
        }
        ++v5;
      }
      while (v5 != v4);
    }
    if (*((float *)this + 100) > 0.0) {
      kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 54, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1, 0);
    }
    *((unsigned char *)this + 389) = 1;
  }
}

kaldi::nnet1::ConvolutionalComponent *kaldi::nnet1::ConvolutionalComponent::ConvolutionalComponent(kaldi::nnet1::ConvolutionalComponent *this, const kaldi::nnet1::ConvolutionalComponent *a2)
{
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = &unk_1F0A4BA20;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = &unk_1F0A4C328;
  uint64_t v6 = *((void *)a2 + 11);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((void *)this + 11) = v6;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 104, (char *)a2 + 104, 111);
  kaldi::CuVector<float>::CuVector((void *)this + 19, (uint64_t)a2 + 152);
  uint64_t v7 = *((void *)a2 + 23);
  *((void *)this + 24) = 0;
  *((void *)this + 23) = v7;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 24, *((void *)a2 + 24), *((void *)a2 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 25) - *((void *)a2 + 24)) >> 4));
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 27, *((void *)a2 + 27), *((void *)a2 + 28), (uint64_t)(*((void *)a2 + 28) - *((void *)a2 + 27)) >> 5);
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"read() method not implemented\n", 30) = 0;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = 0;
  *((void *)this + 32) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 30, *((void *)a2 + 30), *((void *)a2 + 31), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 31) - *((void *)a2 + 30)) >> 4));
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 33, *((void *)a2 + 33), *((void *)a2 + 34), (uint64_t)(*((void *)a2 + 34) - *((void *)a2 + 33)) >> 5);
  uint64_t v8 = *((void *)a2 + 36);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((void *)this + 36) = v8;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 38, *((void *)a2 + 38), *((void *)a2 + 39), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 39) - *((void *)a2 + 38)) >> 4));
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 41, *((void *)a2 + 41), *((void *)a2 + 42), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 42) - *((void *)a2 + 41)) >> 4));
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 44, *((const void **)a2 + 44), *((void *)a2 + 45), (uint64_t)(*((void *)a2 + 45) - *((void *)a2 + 44)) >> 2);
  *((unsigned char *)this + 376) = *((unsigned char *)a2 + 376);
  return this;
}

void sub_1B1F169E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuMatrix<float>::~CuMatrix(a2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void sub_1B1F16A74()
{
}

void sub_1B1F16A7C()
{
}

void sub_1B1F16A84()
{
}

void sub_1B1F16A8C()
{
}

void kaldi::nnet1::ConvolutionalComponent::EnsureCorrs(kaldi::nnet1::ConvolutionalComponent *this)
{
  if (!*((unsigned char *)this + 376))
  {
    int v2 = *((_DWORD *)this + 46);
    int v3 = *((_DWORD *)this + 20);
    if (v3 > 1) {
      int v4 = v3 + 1;
    }
    else {
      int v4 = 1;
    }
    std::vector<unsigned int>::size_type v5 = v4;
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 24, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 27, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 30, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 33, v4);
    if (v4 >= 1)
    {
      uint64_t v6 = 0;
      unsigned int v7 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 24) + 48 * v6), *((unsigned int *)this + 31), *((unsigned int *)this + 30), 0, 0);
        kaldi::CuVector<float>::Resize(*((void *)this + 27) + 32 * v6, *((unsigned int *)this + 31), 0);
        if (v7 == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 30) + 48 * v6), *((unsigned int *)this + 31), *((unsigned int *)this + 30), 1, 0);
          kaldi::CuVector<float>::Resize(*((void *)this + 33) + 32 * v6, *((unsigned int *)this + 31), 1);
          if (*((_DWORD *)this + 46) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 30) + 48 * v6, 1.0);
            kaldi::CuVectorBase<float>::Set(*((void *)this + 33) + 32 * v6, 1.0);
          }
        }
        ++v6;
      }
      while (v6 != v5);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 352), v5);
    *((unsigned char *)this + 376) = 1;
  }
}

kaldi::nnet1::MaxPooling2DComponent *kaldi::nnet1::MaxPooling2DComponent::MaxPooling2DComponent(kaldi::nnet1::MaxPooling2DComponent *this, const kaldi::nnet1::MaxPooling2DComponent *a2)
{
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = &unk_1F0A4BFB8;
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((void *)this + 8) = *((void *)a2 + 8);
  return this;
}

kaldi::nnet1::Desplice *kaldi::nnet1::Desplice::Desplice(kaldi::nnet1::Desplice *this, const kaldi::nnet1::Desplice *a2)
{
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = &unk_1F0A4F9C8;
  uint64_t v5 = *((void *)a2 + 6);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((void *)this + 6) = v5;
  kaldi::CuArray<int>::CuArray((int *)this + 16, (uint64_t)a2 + 64);
  kaldi::CuArray<int>::CuArray((int *)this + 22, (uint64_t)a2 + 88);
  kaldi::CuArray<int>::CuArray((int *)this + 28, (uint64_t)a2 + 112);
  kaldi::CuArray<int>::CuArray((int *)this + 34, (uint64_t)a2 + 136);
  return this;
}

void sub_1B1F16D74(_Unwind_Exception *exception_object)
{
  unsigned int v7 = (void *)v1[15];
  if (v7) {
    free(v7);
  }
  *uint64_t v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  uint64_t v8 = (void *)v1[12];
  if (v8) {
    free(v8);
  }
  *uint64_t v4 = 0;
  v4[1] = 0;
  unsigned int v4[2] = 0;
  float v9 = (void *)v1[9];
  if (v9) {
    free(v9);
  }
  *int v3 = 0;
  v3[1] = 0;
  void v3[2] = 0;
  void *v1 = v2;
  float v10 = (void *)v1[3];
  if (v10)
  {
    v1[4] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Desplice::Init(kaldi::nnet1::Desplice *this)
{
  int v2 = *((_DWORD *)this + 12);
  uint64_t v3 = *((int *)this + 13) * (uint64_t)v2;
  int v4 = *((_DWORD *)this + 14);
  int v5 = *((_DWORD *)this + 2);
  std::vector<int>::vector(&v27, *((int *)this + 3) * v3);
  std::vector<int>::vector(&v26, *((int *)this + 3) * (uint64_t)(int)v3);
  std::vector<int>::size_type v6 = *((int *)this + 13) * (uint64_t)*((int *)this + 2);
  LODWORD(__x.__begin_) = -1;
  std::vector<int>::vector(&v25, v6, (const std::vector<int>::value_type *)&__x);
  std::vector<int>::size_type v7 = *((int *)this + 13) * (uint64_t)*((int *)this + 2);
  std::vector<int>::value_type v23 = -1;
  std::vector<int>::vector(&__x, v7, &v23);
  if ((int)v3 >= 1)
  {
    int v8 = 0;
    int v9 = v5 / v4;
    int v10 = v4 / v2;
    do
    {
      if (v9 >= 1)
      {
        int v11 = 0;
        int v12 = 0;
        std::vector<int>::pointer begin = v27.__begin_;
        std::vector<int>::pointer v14 = v25.__begin_;
        std::vector<int>::pointer v15 = v26.__begin_;
        std::vector<int>::pointer v16 = __x.__begin_;
        do
        {
          if (v10 >= 1)
          {
            int v17 = 0;
            uint64_t v18 = v11;
            do
            {
              int v19 = *((_DWORD *)this + 13);
              int v20 = v8 / v19;
              int v21 = v8 % v19;
              int v22 = v20 + *((_DWORD *)this + 12) * v17 + *((_DWORD *)this + 14) * v12;
              begin[v18 + *((int *)this + 3) * (uint64_t)v8] = v21;
              v15[v18 + *((int *)this + 3) * (uint64_t)v8] = v22;
              v14[v22 + *((_DWORD *)this + 2) * v21] = v8;
              v16[v22 + *((_DWORD *)this + 2) * v21] = v11 + v17++;
              ++v18;
            }
            while (v10 != v17);
          }
          ++v12;
          v11 += v10;
        }
        while (v12 != v9);
      }
      ++v8;
    }
    while (v8 != v3);
  }
  kaldi::CuArray<int>::Resize((uint64_t)this + 64, (unint64_t)((char *)v27.__end_ - (char *)v27.__begin_) >> 2, 1);
  memcpy(*((void **)this + 9), v27.__begin_, (char *)v27.__end_ - (char *)v27.__begin_);
  kaldi::CuArray<int>::Resize((uint64_t)this + 88, (unint64_t)((char *)v26.__end_ - (char *)v26.__begin_) >> 2, 1);
  memcpy(*((void **)this + 12), v26.__begin_, (char *)v26.__end_ - (char *)v26.__begin_);
  kaldi::CuArray<int>::Resize((uint64_t)this + 112, (unint64_t)((char *)v25.__end_ - (char *)v25.__begin_) >> 2, 1);
  memcpy(*((void **)this + 15), v25.__begin_, (char *)v25.__end_ - (char *)v25.__begin_);
  kaldi::CuArray<int>::Resize((uint64_t)this + 136, (unint64_t)((char *)__x.__end_ - (char *)__x.__begin_) >> 2, 1);
  memcpy(*((void **)this + 18), __x.__begin_, (char *)__x.__end_ - (char *)__x.__begin_);
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v25.__begin_)
  {
    v25.__end_ = v25.__begin_;
    operator delete(v25.__begin_);
  }
  if (v26.__begin_)
  {
    v26.__end_ = v26.__begin_;
    operator delete(v26.__begin_);
  }
  if (v27.__begin_)
  {
    v27.__end_ = v27.__begin_;
    operator delete(v27.__begin_);
  }
}

void sub_1B1F17030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  int v20 = *(void **)(v18 - 72);
  if (v20)
  {
    *(void *)(v18 - 64) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::FramePoolingComponent *kaldi::nnet1::FramePoolingComponent::FramePoolingComponent(kaldi::nnet1::FramePoolingComponent *this, const kaldi::nnet1::FramePoolingComponent *a2)
{
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = &unk_1F0A4BA20;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = &unk_1F0A4BE90;
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 12, *((const void **)a2 + 12), *((void *)a2 + 13), (uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 2);
  *((void *)this + 15) = 0;
  *((void *)this + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *((void *)this + 17) = 0;
  std::vector<kaldi::Vector<float>>::__init_with_size[abi:ne180100]<kaldi::Vector<float>*,kaldi::Vector<float>*>((void *)this + 15, *((void *)a2 + 15), *((void *)a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 3));
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  std::vector<kaldi::Vector<float>>::__init_with_size[abi:ne180100]<kaldi::Vector<float>*,kaldi::Vector<float>*>((void *)this + 18, *((void *)a2 + 18), *((void *)a2 + 19), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 3));
  int v6 = *((_DWORD *)a2 + 42);
  *((unsigned char *)this + 172) = *((unsigned char *)a2 + 172);
  *((_DWORD *)this + 42) = v6;
  return this;
}

void sub_1B1F17208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  long long v5 = *v3;
  if (*v3)
  {
    *((void *)v2 + 13) = v5;
    operator delete(v5);
  }
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::Vector<float>>::__init_with_size[abi:ne180100]<kaldi::Vector<float>*,kaldi::Vector<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    float result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*,kaldi::Vector<float>*,kaldi::Vector<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1F172B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

kaldi::nnet1::ParallelComponent *kaldi::nnet1::ParallelComponent::ParallelComponent(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::ParallelComponent *a2)
{
  uint64_t v4 = (char *)a2 + *(void *)(*(void *)a2 - 24);
  *((void *)this + 26) = &unk_1F0A4FA88;
  uint64_t v5 = *((void *)v4 + 1);
  *((_WORD *)this + 112) = *((_WORD *)v4 + 8);
  *((void *)this + 27) = v5;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"read() method not implemented\n", 30) = 0;
  *((void *)this + std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"write() method not implemented\n", 31) = 0;
  *((void *)this + 29) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 29, *((const void **)v4 + 3), *((void *)v4 + 4), (uint64_t)(*((void *)v4 + 4) - *((void *)v4 + 3)) >> 3);
  *((void *)this + 26) = &unk_1F0A4BA20;
  *((void *)this + 32) = &unk_1F0A4A6D0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 279) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)((char *)this + 264) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1F0A32380, (uint64_t)a2);
  *(void *)this = off_1F0A4AAA0;
  *((void *)this + 26) = off_1F0A4AD58;
  *((void *)this + 20) = &unk_1F0A4ABF8;
  *((void *)this + 21) = &unk_1F0A4AC20;
  __int16 v7 = *((_WORD *)a2 + 88);
  char v8 = *((unsigned char *)a2 + 178);
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 178) = v8;
  *((_WORD *)this + 88) = v7;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  std::vector<kaldi::nnet1::Nnet>::__init_with_size[abi:ne180100]<kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>((void *)this + 23, *((void *)a2 + 23), *((void *)a2 + 24), 0x51B3BEA3677D46CFLL * ((uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 3));
  return this;
}

void sub_1B1F1747C(_Unwind_Exception *a1)
{
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v2, (uint64_t *)&off_1F0A32380);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::nnet1::Nnet>::__init_with_size[abi:ne180100]<kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<kaldi::nnet1::Nnet>::__vallocate[abi:ne180100](result, a4);
    float result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1F17510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::nnet1::Nnet>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::nnet1::Nnet>::__push_back_slow_path<kaldi::nnet1::Nnet const&>(uint64_t *a1, const kaldi::nnet1::Nnet *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xAE4C415C9882B9) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x51B3BEA3677D46CFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x572620AE4C415CLL) {
    unint64_t v9 = 0xAE4C415C9882B9;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::string v13 = v10;
  std::vector<int>::pointer v14 = (kaldi::nnet1::Nnet *)&v10[376 * v4];
  std::vector<int>::pointer v16 = &v10[376 * v9];
  kaldi::nnet1::Nnet::Nnet(v14, a2);
  std::vector<int>::pointer v15 = (char *)v14 + 376;
  std::vector<kaldi::nnet1::Nnet>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1F1763C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

int32x2_t *kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(uint64_t *a1, int32x2_t *a2, int32x2_t *a3, uint64_t a4)
{
  if (((a1[1] - *a1) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v5 = (int32x2_t **)(a1[9] + 24 * (int)a4);
    long long v6 = *v5;
    uint64_t v7 = v5[1];
    while (v6 != v7)
    {
      void v6[4] = a3[4];
      v6 += 6;
    }
    uint64_t v8 = kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(a1, (uint64_t)a2, a4);
    kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1, 0);
    return (int32x2_t *)kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, v8, 111);
  }
  else
  {
    return kaldi::CuMatrix<float>::operator=(a3, a2);
  }
}

uint64_t kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = a3;
  uint64_t v7 = 3 * a3;
  kaldi::CuMatrix<float>::Resize(*(int32x2_t **)(a1[9] + 24 * a3), *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 1, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(*(int **)(a1[9] + 8 * v7), a2, 111);
  uint64_t v8 = *a1;
  uint64_t v9 = (a1[1] - *a1) >> 3;
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      int v12 = *(_DWORD **)(v8 + 8 * v11++);
      std::string v13 = (int32x2_t *)(*(void *)(a1[9] + 24 * v6) + v10);
      kaldi::nnet1::Component::Propagate(v12, (uint64_t)v13, v13 + 6, a3);
      uint64_t v8 = *a1;
      uint64_t v14 = a1[1] - *a1;
      v10 += 48;
    }
    while (v11 < (int)((unint64_t)v14 >> 3));
    uint64_t v9 = v14 >> 3;
  }
  return *(void *)(a1[9] + 24 * v6) + 48 * v9;
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::SetVecTable(kaldi::nnet1::CompressedWordTransComponent *this, const kaldi::CompressedMatrix *a2)
{
  uint64_t v2 = *(void *)a2;
  if (*(void *)a2) {
    LODWORD(v2) = *(_DWORD *)(v2 + 8);
  }
  int v3 = *((_DWORD *)this + 2);
  int v4 = (int)v2 / v3;
  *((_DWORD *)this + 24) = v4;
  if (v3 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = v3;
    uint64_t v7 = (v3 + 1) & 0x1FFFFFFFELL;
    uint64x2_t v8 = (uint64x2_t)vdupq_n_s64(v6 - 1);
    uint64_t v9 = (float *)(*((void *)this + 7) + 4);
    int64x2_t v10 = (int64x2_t)xmmword_1B255FA20;
    int64x2_t v11 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v12 = vmovn_s64((int64x2_t)vcgeq_u64(v8, (uint64x2_t)v10));
      if (v12.i8[0]) {
        *(v9 - 1) = (float)v5;
      }
      if (v12.i8[4]) {
        *uint64_t v9 = (float)(v4 + v5);
      }
      int64x2_t v10 = vaddq_s64(v10, v11);
      v9 += 2;
      v5 += 2 * v4;
      v7 -= 2;
    }
    while (v7);
  }
  return kaldi::CompressedMatrix::operator=((uint64_t)this + 80, a2);
}

kaldi::nnet1::SharedNceComponent *kaldi::nnet1::SharedNceComponent::SharedNceComponent(kaldi::nnet1::SharedNceComponent *this, const kaldi::nnet1::SharedNceComponent *a2)
{
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = &unk_1F0A4BA20;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = &unk_1F0A4B8F8;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 88, (char *)a2 + 88, 111);
  kaldi::CuVector<float>::CuVector((void *)this + 17, (uint64_t)a2 + 136);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 168, (char *)a2 + 168, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 216, (char *)a2 + 216, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 264, (char *)a2 + 264, 111);
  kaldi::CuVector<float>::CuVector((void *)this + 39, (uint64_t)a2 + 312);
  kaldi::CuVector<float>::CuVector((void *)this + 43, (uint64_t)a2 + 344);
  kaldi::CuVector<float>::CuVector((void *)this + 47, (uint64_t)a2 + 376);
  long long v6 = *(_OWORD *)((char *)a2 + 408);
  *((void *)this + 53) = *((void *)a2 + 53);
  *(_OWORD *)((char *)this + 408) = v6;
  return this;
}

void sub_1B1F17A28(_Unwind_Exception *a1)
{
  kaldi::CuVector<float>::~CuVector(v8);
  kaldi::CuVector<float>::~CuVector(v7);
  kaldi::CuMatrix<float>::~CuMatrix(v6);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

void sub_1B1F17A94()
{
}

void sub_1B1F17A9C()
{
}

void sub_1B1F17AA4()
{
}

kaldi::nnet1::WordVecComponent *kaldi::nnet1::WordVecComponent::WordVecComponent(kaldi::nnet1::WordVecComponent *this, const kaldi::nnet1::WordVecComponent *a2)
{
  *(void *)this = &unk_1F0A4FA88;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = &unk_1F0A4BA20;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = &unk_1F0A4A7B0;
  *((void *)this + 11) = &unk_1F0A4A8E0;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 96, (char *)a2 + 96, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 144, (char *)a2 + 144, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 192, (char *)a2 + 192, 111);
  long long v6 = *((_OWORD *)a2 + 15);
  *((void *)this + 32) = *((void *)a2 + 32);
  *((_OWORD *)this + 15) = v6;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 264, (char *)a2 + 264, 111);
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 39, *((void *)a2 + 39), *((void *)a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 40) - *((void *)a2 + 39)) >> 4));
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  std::vector<kaldi::CuSubMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>((void *)this + 42, *((void *)a2 + 42), *((void *)a2 + 43), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 43) - *((void *)a2 + 42)) >> 3));
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  std::vector<kaldi::CuSubMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>((void *)this + 45, *((void *)a2 + 45), *((void *)a2 + 46), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 46) - *((void *)a2 + 45)) >> 3));
  return this;
}

void sub_1B1F17CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuMatrix<float>::~CuMatrix(v6);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void sub_1B1F17D10()
{
}

void sub_1B1F17D18()
{
}

void *std::vector<kaldi::CuSubMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    float result = (void *)std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<kaldi::CuSubMatrix<float>>,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1F17D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<kaldi::CuSubMatrix<float>>,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a4;
  if (a2 != a3)
  {
    uint64_t v5 = a4;
    do
    {
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(result + 8) = *(void *)(a2 + 8);
      *(_OWORD *)(result + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(result + 32) = v6;
      *(void *)uint64_t result = &unk_1F0A472A0;
      result += 40;
      a2 += 40;
      v5 += 40;
    }
    while (a2 != a3);
  }
  return result;
}

void kaldi::nnet1::FofeWordVecComponent::Prepare(int32x2_t *this, uint64_t a2)
{
  if (this[51].i32[0] < (int)a2)
  {
    kaldi::CuMatrix<float>::Resize(this + 49, 1, a2, 1, 0);
    int32x2_t v4 = this[50];
    *(_DWORD *)(*(void *)&v4 + 4 * ((int)a2 - 1)) = 1065353216;
    uint64_t v5 = (a2 - 2);
    if ((int)a2 >= 2)
    {
      float v6 = *(float *)(*(void *)&v4 + 4 * v5 + 4);
      do
      {
        float v6 = v6 * *(float *)this[48].i32;
        *(float *)(*(void *)&v4 + 4 * v5--) = v6;
      }
      while (v5 != -1);
    }
  }
  uint64_t v7 = this[1].u32[1];
  kaldi::CuMatrix<float>::Resize(this + 55, a2, v7, 1, 0);
}

void kaldi::nnet1::Component::GetComponentTypeMap(void)::$_0::operator()()
{
}

void sub_1B1F194F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetGradientNormTypeMap(void)::$_0 &&>>()
{
}

void sub_1B1F197BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::$_0 &&>>()
{
}

void sub_1B1F1991C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F0A4EEC8;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a3, a2);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = &unk_1F0A517C0;
  *(void *)(a1 + 112) = 0;
  kaldi::CuVector<float>::Resize(a1 + 88, a3, 0);
  return a1;
}

void sub_1B1F19A00(_Unwind_Exception *a1)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v3);
  void *v1 = v2;
  uint64_t v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::~VectorwiseQuantizedAffineTransform(void *a1)
{
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::~VectorwiseQuantizedAffineTransform(a1);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::Copy()
{
}

void sub_1B1F19AB4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10D1C40EF2100C4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::GetType()
{
  return 1041;
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "\n  linearity is vectorwise quantized");
  int32x2_t v4 = std::string::append(&v11, "\n  bias");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(a1 + 88);
  if ((v10 & 0x80u) == 0) {
    float v6 = __p;
  }
  else {
    float v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64x2_t v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B1F19BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::WriteData(uint64_t a1, void *a2, int a3)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::Write((int *)(a1 + 48), a2, a3);
  kaldi::CuVectorBase<float>::Write(a1 + 88, a2, a3);
}

uint64_t *kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = 1.0;
  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a3, a2, 111, a1 + 48, 112, a4, 0.0);
  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, 1.0, 1.0);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::BackpropagateFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(void *)(a1 + 96) + 4 * a3));
  kaldi::VectorwiseQuantizedMatrix<signed char>::Row(a1 + 48, a3, (uint64_t)v8);
  kaldi::QuantizedVectorBase<signed char>::AddMatVec((uint64_t)v8, a2 + 8, a4 + 8, 1.0);
}

float kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  float v4 = *(float *)(*(void *)(a1 + 96) + 4 * a3);
  kaldi::VectorwiseQuantizedMatrix<signed char>::Row(a1 + 48, a3, (uint64_t)v6);
  return v4 + kaldi::VecVec<float,signed char>(a2, (uint64_t)v6);
}

double kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::Read((unsigned int *)(a1 + 48), a2, a3, a4);
  return kaldi::CuVector<float>::Read(a1 + 88, a2, a3);
}

void *kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::~VectorwiseQuantizedAffineTransform(void *a1)
{
  *a1 = &unk_1F0A4EEC8;
  kaldi::CuVector<float>::~CuVector(a1 + 11);
  uint64_t v2 = a1[9];
  a1[9] = 0;
  if (v2) {
    MEMORY[0x1B3EA8670](v2, 0x1000C4077774924);
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    MEMORY[0x1B3EA8670](v3, 0x1000C4052888210);
  }
  *a1 = &unk_1F0A4FA88;
  float v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4EEC8;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a2 + 48);
  kaldi::CuVector<float>::CuVector((void *)(a1 + 88), a2 + 88);
  return a1;
}

void sub_1B1F19F90(_Unwind_Exception *a1)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v3);
  void *v1 = v2;
  long long v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::VectorwiseQuantizedAffineTransform(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F0A4EF88;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a3, a2);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = &unk_1F0A517C0;
  *(void *)(a1 + 112) = 0;
  kaldi::CuVector<float>::Resize(a1 + 88, a3, 0);
  return a1;
}

void sub_1B1F1A080(_Unwind_Exception *a1)
{
  kaldi::VectorwiseQuantizedMatrix<short>::~VectorwiseQuantizedMatrix(v3);
  void *v1 = v2;
  long long v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::~VectorwiseQuantizedAffineTransform(void *a1)
{
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::~VectorwiseQuantizedAffineTransform(a1);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::Copy()
{
}

void sub_1B1F1A134(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10D1C40EF2100C4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::GetType()
{
  return 1042;
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "\n  linearity is vectorwise quantized");
  uint64_t v4 = std::string::append(&v11, "\n  bias");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(a1 + 88);
  if ((v10 & 0x80u) == 0) {
    float v6 = __p;
  }
  else {
    float v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64x2_t v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B1F1A23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::WriteData(uint64_t a1, void *a2, int a3)
{
  kaldi::VectorwiseQuantizedMatrix<short>::Write((int *)(a1 + 48), a2, a3);
  kaldi::CuVectorBase<float>::Write(a1 + 88, a2, a3);
}

uint64_t *kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = 1.0;
  kaldi::CuMatrixBase<float>::AddMatMat<short>(a3, a2, 111, a1 + 48, 112, a4, 0.0);
  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, 1.0, 1.0);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::BackpropagateFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(void *)(a1 + 96) + 4 * a3));
  kaldi::VectorwiseQuantizedMatrix<short>::Row(a1 + 48, a3, (uint64_t)v8);
  kaldi::QuantizedVectorBase<short>::AddMatVec((uint64_t)v8, a2 + 8, a4 + 8, 1.0);
}

float kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  float v4 = *(float *)(*(void *)(a1 + 96) + 4 * a3);
  kaldi::VectorwiseQuantizedMatrix<short>::Row(a1 + 48, a3, (uint64_t)v6);
  return v4 + kaldi::VecVec<float,short>(a2, (uint64_t)v6);
}

double kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::VectorwiseQuantizedMatrix<short>::Read((unsigned int *)(a1 + 48), a2, a3, a4);
  return kaldi::CuVector<float>::Read(a1 + 88, a2, a3);
}

void *kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::~VectorwiseQuantizedAffineTransform(void *a1)
{
  *a1 = &unk_1F0A4EF88;
  kaldi::CuVector<float>::~CuVector(a1 + 11);
  uint64_t v2 = a1[9];
  a1[9] = 0;
  if (v2) {
    MEMORY[0x1B3EA8670](v2, 0x1000C40BDFB0063);
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    MEMORY[0x1B3EA8670](v3, 0x1000C4052888210);
  }
  *a1 = &unk_1F0A4FA88;
  float v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::VectorwiseQuantizedAffineTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4EF88;
  kaldi::VectorwiseQuantizedMatrix<short>::VectorwiseQuantizedMatrix(a1 + 48, a2 + 48);
  kaldi::CuVector<float>::CuVector((void *)(a1 + 88), a2 + 88);
  return a1;
}

void sub_1B1F1A610(_Unwind_Exception *a1)
{
  kaldi::VectorwiseQuantizedMatrix<short>::~VectorwiseQuantizedMatrix(v3);
  void *v1 = v2;
  long long v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void NgramEvalStats::NgramEvalStats(NgramEvalStats *this, Vocab *a2, int a3)
{
  NgramCounts<unsigned long>::NgramCounts(this, a2, a3);
  *uint64_t v3 = &unk_1F0A33A50;
}

void *NgramEvalStats::_incrementCounts(NgramEvalStats *this, const unsigned int *a2, unsigned int a3, uint64_t a4)
{
  long long v5 = this;
  uint64_t result = (void *)((char *)this + 160);
  LODWORD(v5) = *((_DWORD *)v5 + 39);
  BOOL v7 = __OFSUB__(a3, v5);
  int v8 = a3 - v5;
  if (v8 < 0 != v7) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = v8 + 1;
  }
  for (; v9 <= a3; ++v9)
  {
    unsigned int v12 = a2[v9];
    char v13 = 0;
    uint64_t result = (void *)LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(result, v12, &v13);
    if (!v13) {
      *(_DWORD *)uint64_t result = 0;
    }
  }
  result[1] += a4;
  return result;
}

uint64_t NgramEvalStats::countSentence(NgramEvalStats *this, const unsigned int *a2, uint64_t a3)
{
  if (*a2 == -1)
  {
    uint64_t v6 = 0;
    unsigned int v7 = -1;
  }
  else
  {
    LODWORD(v6) = 0;
    do
    {
      NgramEvalStats::_incrementCounts(this, a2, v6, a3);
      uint64_t v6 = (v6 + 1);
    }
    while (a2[v6] != -1);
    unsigned int v7 = *a2;
  }
  *((double *)this + 8) = *((double *)this + 8) + (double)v6;
  if (v7 == *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3))) {
    *((double *)this + 8) = *((double *)this + 8) + -1.0;
  }
  if (v6)
  {
    unsigned int v8 = a2[(v6 - 1)];
    if (v8 == *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 120))(*((void *)this + 3))) {
      *((double *)this + 8) = *((double *)this + 8) + -1.0;
    }
  }
  *((double *)this + 7) = *((double *)this + 7) + 1.0;
  return v6;
}

void NgramEvalStats::~NgramEvalStats(NgramEvalStats *this)
{
  *(void *)this = &unk_1F0A32FE0;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A32FE0;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::IndexRuleLmeWordTagger::init(uint64_t a1, quasar::SystemConfig *this, uint64_t a3)
{
  __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(this);
  quasar::SystemConfig::Version::Version(&v43, 90, 0);
  if (!quasar::SystemConfig::Version::operator<(__p, &v43))
  {
    uint64_t v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v42, "lme-word-tagger");
    unsigned int v7 = std::string::insert(v6, 0, ".");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    unsigned int v9 = std::string::append(&v43, ".");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&long long v26 = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)std::vector<unsigned int> __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v44, "index-rule-tagger");
    if ((v45 & 0x80u) == 0) {
      std::string v11 = (const std::string::value_type *)v44;
    }
    else {
      std::string v11 = (const std::string::value_type *)v44[0];
    }
    if ((v45 & 0x80u) == 0) {
      std::string::size_type v12 = v45;
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v44[1];
    }
    char v13 = std::string::append((std::string *)__p, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    int64_t v47 = v13->__r_.__value_.__r.__words[2];
    long long v46 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((char)v45 < 0) {
      operator delete(v44[0]);
    }
    if (SBYTE7(v26) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a3, (const void **)&v46, (uint64_t)__p);
    quasar::IndexRuleLmeWordTagger::registerParams(a1, this, (uint64_t)__p);
    if (SBYTE7(v26) < 0) {
      operator delete(__p[0]);
    }
    quasar::SystemConfig::getPrefix(this, &v42);
    int v15 = *(char *)(a3 + 23);
    if (v15 >= 0) {
      std::vector<int>::pointer v16 = (const std::string::value_type *)a3;
    }
    else {
      std::vector<int>::pointer v16 = *(const std::string::value_type **)a3;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v17 = *(void *)(a3 + 8);
    }
    uint64_t v18 = std::string::append(&v42, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (v47 >= 0) {
      int v20 = (const std::string::value_type *)&v46;
    }
    else {
      int v20 = (const std::string::value_type *)v46;
    }
    if (v47 >= 0) {
      std::string::size_type v21 = HIBYTE(v47);
    }
    else {
      std::string::size_type v21 = *((void *)&v46 + 1);
    }
    int v22 = std::string::append(&v43, v20, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    *(void *)&long long v26 = *((void *)&v22->__r_.__value_.__l + 2);
    *(_OWORD *)std::vector<unsigned int> __p = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    quasar::SystemConfig::readPtree((uint64_t)this, (uint64_t)__p);
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    *(_OWORD *)uint64_t v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)std::vector<unsigned int> __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Config Version is not high enough for index rule denumeration", 61);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  return 0;
}

void sub_1B1F1B030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  if (*(unsigned char *)(v14 - 216) && *(char *)(v14 - 217) < 0) {
    operator delete(*(void **)(v14 - 240));
  }
  quasar::PTree::~PTree((quasar::PTree *)(v14 - 208));
  if (*(char *)(v14 - 89) < 0) {
    operator delete(*(void **)(v14 - 112));
  }
  _Unwind_Resume(a1);
}

void quasar::IndexRuleLmeWordTagger::registerParams(uint64_t a1, quasar::SystemConfig *this, uint64_t a3)
{
  quasar::SystemConfig::getPrefix(this, &v16);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v16.__r_.__value_.__l.__size_;
  }
  unsigned int v7 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, size + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unsigned int v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v8 = &v16;
    }
    else {
      long long v8 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    memmove(v7, v8, size);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + size) = 46;
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    long long v10 = (const std::string::value_type *)a3;
  }
  else {
    long long v10 = *(const std::string::value_type **)a3;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a3 + 8);
  }
  std::string::size_type v12 = std::string::append(&v14, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "default-tag");
  std::string::basic_string[abi:ne180100]<0>(&v14, "The default tag for denumeration");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 32, (uint64_t)&v14, 1, 90, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::SystemConfig::setPrefix((std::string *)this, &v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1B1F1B384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::IndexRuleLmeWordTagger::~IndexRuleLmeWordTagger(void **this)
{
  *this = &unk_1F0A55FE0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  uint64_t v2 = this + 1;
  std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  uint64_t vars8;

  quasar::IndexRuleLmeWordTagger::~IndexRuleLmeWordTagger(this);
  JUMPOUT(0x1B3EA8670);
}

std::string *quasar::IndexRuleLmeWordTagger::addTagsToWord(std::string *result, std::string **a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  long long v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      uint64_t result = std::string::operator=(v4 + 1, (std::string *)((char *)v3 + 32));
      uint64_t v4 = (std::string *)((char *)v4 + 80);
    }
    while (v4 != v5);
  }
  std::string::size_type size = v3->__r_.__value_.__l.__size_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  if (size != v7)
  {
    while (1)
    {
      int v8 = *(_DWORD *)size;
      if ((*(_DWORD *)size & 0x80000000) != 0)
      {
        v8 -= 858993459 * (((char *)a2[1] - (char *)*a2) >> 4);
        if (v8 < 0) {
          goto LABEL_24;
        }
      }
      if (0xCCCCCCCCCCCCCCCDLL * (((char *)a2[1] - (char *)*a2) >> 4) <= v8) {
        goto LABEL_24;
      }
      uint64_t v9 = (uint64_t)*a2 + 80 * v8;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 47);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = *(unsigned __int8 *)(v9 + 47);
      }
      else {
        uint64_t v11 = *(void *)(v9 + 32);
      }
      std::string::size_type v12 = v3[2].__r_.__value_.__s.__data_[7];
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        std::string::size_type v12 = v3[1].__r_.__value_.__r.__words[2];
      }
      if (v11 != v12) {
        goto LABEL_24;
      }
      std::string v14 = (std::string *)(v9 + 24);
      int v15 = v13 >= 0 ? &v3[1].__r_.__value_.__r.__words[1] : (std::string::size_type *)v3[1].__r_.__value_.__l.__size_;
      if ((v10 & 0x80) == 0) {
        break;
      }
      uint64_t result = (std::string *)memcmp(v14->__r_.__value_.__l.__data_, v15, *(void *)(v9 + 32));
      if (!result) {
        goto LABEL_23;
      }
LABEL_24:
      size += 32;
      if (size == v7) {
        return result;
      }
    }
    if (*(unsigned char *)(v9 + 47))
    {
      std::string v16 = (unsigned __int8 *)(v9 + 24);
      while (*v16 == *(unsigned __int8 *)v15)
      {
        ++v16;
        int v15 = (std::string::size_type *)((char *)v15 + 1);
        if (!--v10) {
          goto LABEL_23;
        }
      }
      goto LABEL_24;
    }
LABEL_23:
    uint64_t result = std::string::operator=(v14, (const std::string *)(size + 8));
    goto LABEL_24;
  }
  return result;
}

void quasar::getLmeWordTagger(quasar::SystemConfig *a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(a1);
  quasar::SystemConfig::Version::Version(&v11, 90, 0);
  if (!quasar::SystemConfig::Version::operator<(__p, &v11))
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v6 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v6 = (size_t)a2[1];
    }
    std::string::size_type v7 = &v11;
    std::string::basic_string[abi:ne180100]((uint64_t)&v11, v6 + 1);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    if (v6)
    {
      if (*((char *)a2 + 23) >= 0) {
        int v8 = a2;
      }
      else {
        int v8 = *a2;
      }
      memmove(v7, v8, v6);
    }
    *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 46;
    uint64_t v9 = std::string::append(&v11, "lme-word-tagger");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&long long v13 = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    quasar::SystemConfig::getPtreeOptional((uint64_t)a1, (uint64_t)__p);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Config Version is not high enough for denumeration", 50);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  *a3 = 0;
}

void sub_1B1F1B9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void std::vector<quasar::IndexRuleLmeWordTagger::Rule>::__construct_one_at_end[abi:ne180100]<int &,std::string const&>(uint64_t a1, _DWORD *a2, long long *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v4 = *a2;
  long long v5 = (std::string *)(v4 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(v4 + 24) = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)(a1 + 8) = v4 + 32;
}

void sub_1B1F1BB04(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::IndexRuleLmeWordTagger::Rule>::__emplace_back_slow_path<int &,std::string const&>(uint64_t *a1, _DWORD *a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  long long v21 = a1 + 2;
  if (v11) {
    std::string::size_type v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    std::string::size_type v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  long long v19 = v13;
  long long v20 = &v12[32 * v11];
  *(_DWORD *)long long v13 = *a2;
  long long v14 = (std::string *)(v13 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((void *)a3 + 1));
    long long v13 = v19;
  }
  else
  {
    long long v15 = *a3;
    *((void *)v13 + 3) = *((void *)a3 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  long long v19 = v13 + 32;
  std::vector<quasar::IndexRuleLmeWordTagger::Rule>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_1B1F1BC08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::IndexRuleLmeWordTagger::Rule>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      int v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v8 - 32) = v9;
      v8 -= 32;
      long long v10 = *(_OWORD *)(a3 + 8);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(void *)(a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t ResolveIndexForCollation(void *a1, int a2)
{
  if (a2 == 2)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*a1 + 80);
    return v3();
  }
  else
  {
    if (a2 != 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Function %s has not been implemented.\n", "ResolveIndexForCollation");
      exit(1);
    }
    return quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetNormalizationCollationIndex(a1);
  }
}

uint64_t SDWord_GetHandle(void *a1, const char *a2)
{
  uint64_t v2 = (*(uint64_t (**)(void *, const char *))(*(void *)a1 + 32))(a1, a2);
  if (v2 == -1) {
    return 0;
  }
  else {
    return v2 + 1;
  }
}

uint64_t SDWord_GetName(void *a1, char *a2, char *a3, unint64_t a4)
{
  uint64_t v6 = (const void *)(*(uint64_t (**)(void *, char *))(*(void *)a1 + 48))(a1, a2 - 1);
  uint64_t v8 = v7;
  if (a4)
  {
    if (v7 + 1 < a4) {
      size_t v9 = v7 + 1;
    }
    else {
      size_t v9 = a4;
    }
    memcpy(a3, v6, v9);
  }
  return v8;
}

int *SDWord_GetTagBits(uint64_t a1, uint64_t a2, int a3, _WORD *a4, size_t a5)
{
  uint64_t result = (int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2 - 1);
  long long v10 = result;
  if (a3 != 1)
  {
    if (a3 != 2)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Function %s has not been implemented.\n", "SDWord_GetTagBits");
      exit(1);
    }
    long long v10 = (_WORD *)result + 1;
    uint64_t result = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(a1);
    uint64_t v11 = (unsigned __int16 *)((char *)result - *result);
    if (*v11 >= 0xBu)
    {
      uint64_t v12 = v11[5];
      if (v12)
      {
        if (*(int *)((char *)result + v12) >= 1)
        {
          bzero(a4, a5);
          Metadata = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(a1);
          char v14 = (unsigned __int16 *)((char *)Metadata - *Metadata);
          if (*v14 < 0xBu || (uint64_t v15 = v14[5]) == 0 || (*((unsigned char *)Metadata + v15) & 7) == 0)
          {
            uint64_t result = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(a1);
            long long v16 = (unsigned __int16 *)((char *)result - *result);
            if (*v16 < 0xBu)
            {
              unint64_t v17 = 0;
            }
            else
            {
              unint64_t v17 = v16[5];
              if (v17) {
                unint64_t v17 = (uint64_t)(*(int *)((char *)result + v17) + (*(int *)((char *)result + v17) < 0 ? 7 : 0)) >> 3;
              }
            }
            if (a5 > v17 && a5 - v17 > 1)
            {
              a4 = (_WORD *)((char *)a4 + v17);
              goto LABEL_13;
            }
          }
LABEL_18:
          memset(v18, 0, sizeof(v18));
          quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
        }
      }
    }
  }
  if (a5 != 2) {
    goto LABEL_18;
  }
LABEL_13:
  *a4 = *v10;
  return result;
}

uint64_t SDVoc_GetAllowedWordCollations(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 <= 1)
  {
    memset(v4, 0, sizeof(v4));
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  *a2 = 0x300000002;
  return 2;
}

uint64_t SDVoc_GetCollationName(int a1, int a2, void *__dst, unint64_t a4)
{
  if (a2 != 3)
  {
    if (quasar::gLogLevel >= -1)
    {
      memset(v7, 0, sizeof(v7));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Unknown collation ", 18);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
    }
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 0;
    __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
  }
  if (a4)
  {
    size_t v4 = 10;
    if (a4 < 0xA) {
      size_t v4 = a4;
    }
    memcpy(__dst, "tokencoll", v4);
  }
  return 9;
}

void sub_1B1F1C2B8(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void SDVoc_GetWords(void *a1, int a2, char *a3, char *a4, uint64_t a5, unint64_t a6, unint64_t *a7, void *a8, unint64_t *a9, uint64_t a10, uint64_t a11, unsigned char *a12)
{
  if (a12) {
    *a12 = 0;
  }
  std::string v57 = 0;
  int v58 = 0;
  uint64_t v59 = 0;
  uint64_t v18 = ResolveIndexForCollation(a1, a2);
  if (!*a3)
  {
    if (!*a4)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Function %s has not been implemented.\n", "SDVoc_GetWords");
      exit(1);
    }
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    *(_OWORD *)long long v40 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
  }
  uint64_t v19 = v18;
  std::string::basic_string[abi:ne180100]<0>(v40, a3);
  if (*a4)
  {
    std::string::basic_string[abi:ne180100]<0>(v38, a4);
    long long v20 = (void *)BYTE7(v41);
    long long v21 = v40;
    if (SBYTE7(v41) < 0)
    {
      long long v21 = (void **)v40[0];
      long long v20 = v40[1];
    }
    std::string __p = v21;
    unint64_t v35 = (unint64_t)v20;
    (*(void (**)(uint64_t, void **, void **))(*(void *)v19 + 40))(v19, &__p, &v57);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v40, (const void **)v38, (uint64_t)&__p);
    unint64_t v22 = v36;
    if ((v36 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v36 & 0x80u) != 0) {
      unint64_t v22 = v35;
    }
    v37[0] = p_p;
    v37[1] = v22;
    (*(void (**)(uint64_t, void *, uint64_t, void **))(*(void *)v19 + 24))(v19, v37, 1, &v57);
    if ((char)v36 < 0) {
      operator delete(__p);
    }
    long long v24 = (void *)BYTE7(v41);
    long long v25 = v40;
    if (SBYTE7(v41) < 0)
    {
      long long v25 = (void **)v40[0];
      long long v24 = v40[1];
    }
    std::string __p = v25;
    unint64_t v35 = (unint64_t)v24;
    *a12 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v19 + 56))(v19, &__p);
    if (v39 < 0) {
      operator delete(v38[0]);
    }
  }
  else
  {
    long long v26 = (void *)BYTE7(v41);
    long long v27 = v40;
    if (SBYTE7(v41) < 0)
    {
      long long v27 = (void **)v40[0];
      long long v26 = v40[1];
    }
    v38[0] = v27;
    v38[1] = v26;
    (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)v19 + 24))(v19, v38, 1, &v57);
  }
  if (SBYTE7(v41) < 0) {
    operator delete(v40[0]);
  }
  long long v29 = v57;
  long long v28 = v58;
  if (a6 < v58 - v57)
  {
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    *(_OWORD *)long long v40 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
  }
  *a8 = a5;
  *a9 = a6;
  if (v28 == v29)
  {
    unint64_t v30 = 0;
  }
  else
  {
    unint64_t v30 = 0;
    long long v28 = v29;
    do
    {
      uint64_t v31 = v28[v30];
      BOOL v32 = __CFADD__(v31, 1);
      uint64_t v33 = v31 + 1;
      if (v32) {
        uint64_t v33 = 0;
      }
      *(void *)(*a8 + 8 * v30++) = v33;
      long long v28 = v57;
    }
    while (v30 < v58 - v57);
  }
  *a7 = v30;
  if (v28)
  {
    int v58 = v28;
    operator delete(v28);
  }
}

void sub_1B1F1C610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  BOOL v32 = *(void **)(v30 - 104);
  if (v32)
  {
    *(void *)(v30 - 96) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

int *SDVoc_GetInfo(uint64_t a1, void *a2)
{
  *a2 = 0x200000002;
  Metadata = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(a1);
  uint64_t v5 = (unsigned __int16 *)((char *)Metadata - *Metadata);
  if (*v5 < 7u)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = v5[3];
    if (v6) {
      uint64_t v6 = *(int *)((char *)Metadata + v6);
    }
  }
  a2[1] = v6;
  uint64_t result = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(a1);
  uint64_t v8 = (unsigned __int16 *)((char *)result - *result);
  if (*v8 < 9u)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = v8[4];
    if (v9) {
      uint64_t v9 = *(int *)((char *)result + v9);
    }
  }
  a2[2] = v9;
  return result;
}

uint64_t SDColl_StringCompare(void *a1, int a2, const char *a3, const char *a4)
{
  uint64_t v6 = *(void *)(ResolveIndexForCollation(a1, a2) + 8);
  v10[0] = a3;
  v10[1] = strlen(a3);
  v9[0] = a4;
  v9[1] = strlen(a4);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 16))(v7, v10, v9);
}

void *SDEnv_GetData(uint64_t a1, const char *a2, void *a3, unint64_t a4)
{
  if (*(_DWORD *)a1 != 8 || (uint64_t v4 = *(void *)(a1 + 8)) == 0)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    *(_OWORD *)std::string __s1 = 0u;
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
    goto LABEL_52;
  }
  std::string::basic_string[abi:ne180100]<0>(__s1, "VocVersionID");
  uint64_t v8 = (void *)strlen(a2);
  if ((SBYTE7(v33) & 0x80000000) == 0)
  {
    if (v8 != (void *)BYTE7(v33)) {
      goto LABEL_13;
    }
    if (v8 != (void *)-1)
    {
      if (!memcmp(__s1, a2, (size_t)v8)) {
        goto LABEL_11;
      }
      goto LABEL_13;
    }
LABEL_54:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 != __s1[1])
  {
    operator delete(__s1[0]);
    goto LABEL_13;
  }
  if (v8 == (void *)-1) {
    goto LABEL_54;
  }
  uint64_t v9 = __s1[0];
  int v10 = memcmp(__s1[0], a2, (size_t)v8);
  operator delete(v9);
  if (!v10)
  {
LABEL_11:
    Metadata = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(v4);
    uint64_t v12 = *(unsigned __int16 *)((char *)Metadata - *Metadata + 4);
LABEL_22:
    std::string::basic_string[abi:ne180100](__s1, (char *)Metadata + v12 + *(unsigned int *)((char *)Metadata + v12) + 4, *(unsigned int *)((char *)Metadata + v12 + *(unsigned int *)((char *)Metadata + v12)));
    goto LABEL_37;
  }
LABEL_13:
  std::string::basic_string[abi:ne180100]<0>(__s1, "_LmCategoryStrings");
  long long v13 = (void *)strlen(a2);
  if ((SBYTE7(v33) & 0x80000000) == 0)
  {
    if (v13 != (void *)BYTE7(v33)) {
      goto LABEL_24;
    }
    if (v13 != (void *)-1)
    {
      if (!memcmp(__s1, a2, (size_t)v13)) {
        goto LABEL_21;
      }
      goto LABEL_24;
    }
LABEL_55:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v13 != __s1[1])
  {
    operator delete(__s1[0]);
    goto LABEL_24;
  }
  if (v13 == (void *)-1) {
    goto LABEL_55;
  }
  char v14 = __s1[0];
  int v15 = memcmp(__s1[0], a2, (size_t)v13);
  operator delete(v14);
  if (!v15)
  {
LABEL_21:
    Metadata = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(v4);
    uint64_t v12 = *(unsigned __int16 *)((char *)Metadata - *Metadata + 12);
    goto LABEL_22;
  }
LABEL_24:
  std::string::basic_string[abi:ne180100]<0>(__s1, "CategoryStringSize");
  long long v16 = (void *)strlen(a2);
  if (SBYTE7(v33) < 0)
  {
    if (v16 == __s1[1])
    {
      if (v16 == (void *)-1) {
LABEL_53:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      unint64_t v17 = __s1[0];
      int v18 = memcmp(__s1[0], a2, (size_t)v16);
      operator delete(v17);
      if (!v18) {
        goto LABEL_32;
      }
    }
    else
    {
      operator delete(__s1[0]);
    }
LABEL_57:
    if (quasar::gLogLevel < -1)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 0;
      __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
    }
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    *(_OWORD *)std::string __s1 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
    long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Unknown key '", 13);
    size_t v29 = strlen(a2);
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)a2, v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, "'");
LABEL_52:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
  }
  if (v16 != (void *)BYTE7(v33)) {
    goto LABEL_57;
  }
  if (v16 == (void *)-1) {
    goto LABEL_53;
  }
  if (memcmp(__s1, a2, (size_t)v16)) {
    goto LABEL_57;
  }
LABEL_32:
  uint64_t v19 = (int *)quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>::GetMetadata(v4);
  long long v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 0xFu && (uint64_t v21 = v20[7]) != 0) {
    int v22 = *(int *)((char *)v19 + v21);
  }
  else {
    int v22 = 0;
  }
  std::to_string((std::string *)__s1, v22);
LABEL_37:
  int v23 = SBYTE7(v33);
  if ((SBYTE7(v33) & 0x80u) == 0) {
    long long v24 = (void *)BYTE7(v33);
  }
  else {
    long long v24 = __s1[1];
  }
  if (a4)
  {
    if ((SBYTE7(v33) & 0x80u) == 0) {
      long long v25 = __s1;
    }
    else {
      long long v25 = (void **)__s1[0];
    }
    if ((unint64_t)v24 + 1 < a4) {
      size_t v26 = (size_t)v24 + 1;
    }
    else {
      size_t v26 = a4;
    }
    memcpy(a3, v25, v26);
  }
  if (v23 < 0) {
    operator delete(__s1[0]);
  }
  return v24;
}

void sub_1B1F1CB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B1F1CCD8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1F1CE4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 49) < 0) {
    operator delete(*(void **)(v1 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::MinimizeCompactLattice<fst::LatticeWeightTpl<float>,int>(uint64_t a1, float a2)
{
  uint64_t v4 = a1;
  float v5 = a2;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  uint64_t v2 = fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::Minimize((float *)&v4);
  if (__p[1])
  {
    *(void **)&long long v8 = __p[1];
    operator delete(__p[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  return v2;
}

void sub_1B1F1CEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::Minimize(float *a1)
{
  return 1;
}

void sub_1B1F1CFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::ComputeStateHashValues(void *a1)
{
  uint64_t v2 = a1 + 2;
  int v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))(*a1);
  std::vector<unsigned long>::resize((uint64_t)v2, v3);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 160))();
  if ((int)result < 1) {
    return result;
  }
  uint64_t v5 = result;
  do
  {
    uint64_t v6 = v5--;
    uint64_t v17 = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 32))(&v10);
    fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::InitHashValue((uint64_t)&v10, &v17);
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
    uint64_t v7 = *a1;
    unint64_t v16 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 136))(v7, v5, v14);
    while (1)
    {
      uint64_t result = v14[0];
      if (!v14[0])
      {
        if (v16 >= v14[2]) {
          goto LABEL_21;
        }
        goto LABEL_11;
      }
      int v8 = (*(uint64_t (**)(void))(*(void *)v14[0] + 24))(v14[0]);
      uint64_t result = v14[0];
      if (v8) {
        break;
      }
      if (v14[0])
      {
        uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v14[0] + 32))(v14[0]);
        goto LABEL_12;
      }
LABEL_11:
      uint64_t v9 = v14[1] + 48 * v16;
LABEL_12:
      uint64_t v13 = 0;
      if (v6 <= *(int *)(v9 + 40))
      {
        uint64_t v13 = *(void *)(*v2 + 8 * *(unsigned int *)(v9 + 40));
      }
      else
      {
        uint64_t v13 = 1;
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Minimizing lattice with self-loops (lattices should not have self-loops)", 72);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
        }
      }
      fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::UpdateHashValueForTransition(v9 + 8, *(_DWORD *)v9, &v13, &v17);
      if (v14[0]) {
        (*(void (**)(void))(*(void *)v14[0] + 40))(v14[0]);
      }
      else {
        ++v16;
      }
    }
    if (v14[0])
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v14[0] + 8))(v14[0]);
      goto LABEL_23;
    }
LABEL_21:
    if (v15) {
      --*v15;
    }
LABEL_23:
    *(void *)(*v2 + 8 * v5) = v17;
  }
  while (v6 > 1);
  return result;
}

void sub_1B1F1D2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::ComputeStateMap(float *a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)a1 + 160))(*(void *)a1);
  long long v34 = 0u;
  long long v35 = 0u;
  int v36 = 1065353216;
  uint64_t v3 = v2;
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      v33[0] = (uint64_t *)(*((void *)a1 + 2) + 8 * i);
      uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v34, (unint64_t *)v33[0], (uint64_t)&std::piecewise_construct, v33);
      uint64_t v6 = v5;
      uint64_t v7 = (char *)v5[4];
      uint64_t v8 = (uint64_t)(v5 + 5);
      unint64_t v9 = v5[5];
      if ((unint64_t)v7 >= v9)
      {
        uint64_t v11 = (char *)v5[3];
        uint64_t v12 = (v7 - v11) >> 2;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = v9 - (void)v11;
        unint64_t v14 = (uint64_t)(v9 - (void)v11) >> 1;
        if (v14 <= v12 + 1) {
          unint64_t v14 = v12 + 1;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v15);
          uint64_t v11 = (char *)v6[3];
          uint64_t v7 = (char *)v6[4];
        }
        else
        {
          unint64_t v16 = 0;
        }
        uint64_t v17 = &v16[4 * v12];
        *(_DWORD *)uint64_t v17 = i;
        uint64_t v10 = v17 + 4;
        while (v7 != v11)
        {
          int v18 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        void v6[3] = v17;
        void v6[4] = v10;
        v6[5] = &v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v7 = i;
        uint64_t v10 = v7 + 4;
      }
      void v6[4] = v10;
    }
  }
  uint64_t v19 = (uint64_t *)(a1 + 10);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 10), v2);
  if (v2 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *v19;
    do
    {
      *(_DWORD *)(v21 + 4 * v20) = v20;
      ++v20;
    }
    while (v2 != v20);
  }
  int v22 = (void *)v35;
  if ((void)v35)
  {
    unint64_t v23 = 0;
    do
    {
      if (v23 <= (uint64_t)(v22[4] - v22[3]) >> 2) {
        unint64_t v23 = (uint64_t)(v22[4] - v22[3]) >> 2;
      }
      int v22 = (void *)*v22;
    }
    while (v22);
    BOOL v24 = v23 < 0x3E9 || kaldi::g_kaldi_verbose_level <= -2;
    if (!v24)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Largest equivalence group (using hash) is ", 42);
      long long v25 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", minimization might be slow.", 29);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    }
  }
  if (v2 >= 1)
  {
    do
    {
      unint64_t v32 = 0;
      unint64_t v32 = *(void *)(*((void *)a1 + 2) + 8 * (v3 - 1));
      v33[0] = (uint64_t *)&v32;
      size_t v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v34, &v32, (uint64_t)&std::piecewise_construct, v33);
      uint64_t v27 = 0;
      uint64_t v28 = v26[3];
      uint64_t v29 = v26[4];
      while (1)
      {
        uint64_t v30 = *(int *)(v28 + 4 * v27);
        if (v3 > v30 || *(_DWORD *)(*v19 + 4 * *(unsigned int *)(v28 + 4 * v27)) != *(_DWORD *)(v28 + 4 * v27)) {
          goto LABEL_39;
        }
        if (fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::Equivalent(a1, v3 - 1, *(_DWORD *)(v28 + 4 * v27)))
        {
          break;
        }
        uint64_t v28 = v26[3];
        uint64_t v29 = v26[4];
LABEL_39:
        if (++v27 >= (unint64_t)((v29 - v28) >> 2)) {
          goto LABEL_42;
        }
      }
      *(_DWORD *)(*v19 + 4 * (v3 - 1)) = v30;
LABEL_42:
      BOOL v24 = v3-- <= 1;
    }
    while (!v24);
  }
  return std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&v34);
}

void sub_1B1F1D668(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(v1 - 144);
  _Unwind_Resume(a1);
}

void fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::ModifyModel(uint64_t *a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 160))(*a1);
  int v3 = v2;
  uint64_t v4 = v2;
  if (v2 < 1)
  {
    int v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = 0;
    do
    {
      if (v5 != *(_DWORD *)(a1[5] + 4 * v5)) {
        ++v6;
      }
      ++v5;
    }
    while (v2 != v5);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v14, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Removing ", 9);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" of ", 4);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" states.", 8);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v14);
  }
  if (v6)
  {
    uint64_t v9 = *a1;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 24))(*a1);
    (*(void (**)(uint64_t, void))(*(void *)v9 + 176))(v9, *(unsigned int *)(a1[5] + 4 * v10));
    if (v3 >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        if (v11 == *(_DWORD *)(a1[5] + 4 * v11))
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)*a1 + 296))(*a1, v11, &v13);
          while (!(*(unsigned int (**)(uint64_t))(*(void *)v13 + 24))(v13))
          {
            uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 32))(v13);
            v14[0] = *(void *)v12;
            v14[1] = *(void *)(v12 + 8);
            unint64_t v16 = 0;
            uint64_t v17 = 0;
            std::string __p = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v12 + 16), *(void *)(v12 + 24), (uint64_t)(*(void *)(v12 + 24) - *(void *)(v12 + 16)) >> 2);
            int v18 = *(_DWORD *)(v12 + 40);
            if (*(_DWORD *)(a1[5] + 4 * v18) != v18)
            {
              int v18 = *(_DWORD *)(a1[5] + 4 * v18);
              (*(void (**)(uint64_t, void *))(*(void *)v13 + 88))(v13, v14);
            }
            if (__p)
            {
              unint64_t v16 = __p;
              operator delete(__p);
            }
            (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
          }
          if (v13) {
            (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
          }
        }
        ++v11;
      }
      while (v11 != v4);
    }
    fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(*a1);
  }
}

void sub_1B1F1D9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::InitHashValue(uint64_t result, uint64_t *a2)
{
  if (*(float *)result == INFINITY
    && *(float *)(result + 4) == INFINITY
    && *(void *)(result + 16) == *(void *)(result + 8))
  {
    uint64_t v6 = 33317;
  }
  else
  {
    int v2 = *(int **)(result + 8);
    int v3 = *(int **)(result + 16);
    if (v2 == v3) {
      goto LABEL_8;
    }
    uint64_t v4 = 0;
    do
    {
      int v5 = *v2++;
      uint64_t v4 = 7853 * v4 + v5;
    }
    while (v2 != v3);
    if (!v4) {
LABEL_8:
    }
      uint64_t v4 = 53281;
    uint64_t v6 = 607 * v4;
  }
  *a2 = v6;
  return result;
}

uint64_t fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::UpdateHashValueForTransition(uint64_t result, int a2, void *a3, void *a4)
{
  uint64_t v4 = *(int **)(result + 8);
  int v5 = *(int **)(result + 16);
  if (v4 == v5) {
    goto LABEL_5;
  }
  uint64_t v6 = 0;
  do
  {
    int v7 = *v4++;
    uint64_t v6 = 7853 * v6 + v7;
  }
  while (v4 != v5);
  if (!v6) {
LABEL_5:
  }
    uint64_t v6 = 53281;
  if (a2) {
    int v8 = a2;
  }
  else {
    int v8 = 51907;
  }
  *a4 += 1447 * (v8 * *a3 * v6 + v8);
  return result;
}

BOOL fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::Equivalent(float *a1, unsigned int a2, unsigned int a3)
{
  (*(void (**)(void ***__return_ptr))(**(void **)a1 + 32))(&v51);
  unsigned int v50 = a3;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a1 + 32))(&v57);
  BOOL v5 = *(float *)&v51 == *(float *)&v57 && *((float *)&v51 + 1) == *((float *)&v57 + 1);
  if (!v5 && vabds_f32(*(float *)&v51 + *((float *)&v51 + 1), *(float *)&v57 + *((float *)&v57 + 1)) > a1[2])
  {
    BOOL v6 = 0;
    int v7 = __p;
    if (!__p) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  int v7 = __p;
  if ((unsigned char *)v53 - (unsigned char *)v52 == v59 - (unsigned char *)__p)
  {
    BOOL v6 = memcmp(v52, __p, (unsigned char *)v53 - (unsigned char *)v52) == 0;
    if (!v7) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  BOOL v6 = 0;
  if (__p)
  {
LABEL_12:
    uint64_t v59 = v7;
    operator delete(v7);
  }
LABEL_13:
  if (v52)
  {
    long long v53 = v52;
    operator delete(v52);
  }
  if (!v6) {
    return 0;
  }
  uint64_t v8 = (*(uint64_t (**)(void, void))(**(void **)a1 + 40))(*(void *)a1, a2);
  if (v8 != (*(uint64_t (**)(void, void))(**(void **)a1 + 40))(*(void *)a1, v50)) {
    return 0;
  }
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  char v9 = 1;
  memset(v62, 0, sizeof(v62));
  do
  {
    char v10 = v9;
    if (v9) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = v50;
    }
    if (v9) {
      uint64_t v12 = &v63;
    }
    else {
      uint64_t v12 = v62;
    }
    unint64_t v13 = (*(uint64_t (**)(void))(**(void **)a1 + 40))();
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::reserve(v12, v13);
    uint64_t v14 = *(void *)a1;
    unint64_t v61 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v14 + 136))(v14, v11, &v57);
    if (v10) {
      unint64_t v15 = &v63;
    }
    else {
      unint64_t v15 = v62;
    }
    while (1)
    {
      if (!v57)
      {
        if (v61 >= (unint64_t)v59) {
          goto LABEL_49;
        }
        goto LABEL_32;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v57 + 24))(v57)) {
        break;
      }
      if (v57)
      {
        unint64_t v16 = (char *)(*(uint64_t (**)(void))(*(void *)v57 + 32))();
        goto LABEL_33;
      }
LABEL_32:
      unint64_t v16 = (char *)__p + 48 * v61;
LABEL_33:
      long long v51 = *(void ***)v16;
      long long v52 = (void *)*((void *)v16 + 1);
      long long v54 = 0;
      uint64_t v55 = 0;
      long long v53 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, *((const void **)v16 + 2), *((void *)v16 + 3), (uint64_t)(*((void *)v16 + 3) - *((void *)v16 + 2)) >> 2);
      uint64_t v17 = *((int *)v16 + 10);
      int v56 = v17;
      if (v17 == v11)
      {
        int v56 = -1;
      }
      else
      {
        int v56 = *(_DWORD *)(*((void *)a1 + 5) + 4 * v17);
        unint64_t v18 = v15[1];
        if (v10) {
          uint64_t v19 = &v63;
        }
        else {
          uint64_t v19 = v62;
        }
        if (v18 >= v19[2])
        {
          uint64_t v20 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(v12, (uint64_t)&v51);
        }
        else
        {
          std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)v12, (uint64_t)&v51);
          uint64_t v20 = v18 + 48;
        }
        v15[1] = v20;
      }
      if (v53)
      {
        long long v54 = v53;
        operator delete(v53);
      }
      if (v57) {
        (*(void (**)(uint64_t))(*(void *)v57 + 40))(v57);
      }
      else {
        ++v61;
      }
    }
    if (v57)
    {
      (*(void (**)(void))(*(void *)v57 + 8))();
      goto LABEL_51;
    }
LABEL_49:
    if (v60) {
      --*v60;
    }
LABEL_51:
    uint64_t v21 = *v12;
    if (v10) {
      int v22 = &v63;
    }
    else {
      int v22 = v62;
    }
    unint64_t v23 = (void *)v22[1];
    unint64_t v24 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - v21) >> 4));
    if (v23 == (void *)v21) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v24;
    }
    std::__introsort<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,false>(v21, v23, (uint64_t)&v57, v25, 1);
    char v9 = 0;
  }
  while ((v10 & 1) != 0);
  uint64_t v26 = v63;
  if (v64 == v63)
  {
    BOOL v32 = 1;
  }
  else
  {
    uint64_t v27 = (v64 - v63) >> 4;
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * v27;
    uint64_t v29 = v62[0];
    if (0xAAAAAAAAAAAAAAABLL * v27 <= 1) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * v27;
    }
    if (*(_DWORD *)(v63 + 40) == *(_DWORD *)(v62[0] + 40))
    {
      uint64_t v31 = 0;
      BOOL v32 = 0;
      unint64_t v33 = 1;
      do
      {
        if (*(_DWORD *)(v26 + v31) != *(_DWORD *)(v29 + v31)) {
          break;
        }
        uint64_t v34 = v26 + v31;
        uint64_t v35 = v29 + v31;
        float v36 = *(float *)(v26 + v31 + 8);
        float v37 = *(float *)(v26 + v31 + 12);
        float v38 = *(float *)(v29 + v31 + 8);
        float v39 = *(float *)(v29 + v31 + 12);
        BOOL v40 = v36 == v38 && v37 == v39;
        float v41 = vabds_f32(v36 + v37, v38 + v39);
        if (!v40 && v41 > 0.00097656) {
          break;
        }
        long long v43 = *(const void **)(v34 + 16);
        size_t v44 = *(void *)(v34 + 24) - (void)v43;
        long long v45 = *(const void **)(v35 + 16);
        if (v44 != *(void *)(v35 + 24) - (void)v45) {
          break;
        }
        if (memcmp(v43, v45, v44)) {
          break;
        }
        BOOL v32 = v33 >= v28;
        if (v30 == v33) {
          break;
        }
        int v46 = *(_DWORD *)(v26 + v31 + 88);
        int v47 = *(_DWORD *)(v29 + v31 + 88);
        v31 += 48;
        ++v33;
      }
      while (v46 == v47);
    }
    else
    {
      BOOL v32 = 0;
    }
  }
  long long v51 = (void **)v62;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v51);
  long long v51 = (void **)&v63;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v51);
  return v32;
}

void sub_1B1F1E078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    char v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  int v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *unint64_t v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    int v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1F1E360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,false>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(void *a1, void *a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = a1 + 6;
    if (a1 + 6 != a2)
    {
      uint64_t v5 = 0;
      char v6 = a1;
      do
      {
        unint64_t v7 = v6;
        char v6 = v4;
        int v8 = *((_DWORD *)v7 + 12);
        if (v8 < *(_DWORD *)v7 || v8 <= *(_DWORD *)v7 && *((_DWORD *)v7 + 22) < *((_DWORD *)v7 + 10))
        {
          uint64_t v13 = *v6;
          uint64_t v14 = v7[7];
          unint64_t v16 = 0;
          uint64_t v17 = 0;
          std::string __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v7[8], v7[9], (uint64_t)(v7[9] - v7[8]) >> 2);
          int v18 = *((_DWORD *)v7 + 22);
          for (uint64_t i = v5; ; i -= 48)
          {
            *(void *)((char *)a1 + i + 48) = *(void *)((char *)a1 + i);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)a1 + i + 56, (uint64_t)a1 + i + 8);
            *(_DWORD *)((char *)a1 + i + 88) = *(_DWORD *)((char *)a1 + i + 40);
            if (!i)
            {
              unint64_t v11 = (char *)a1;
              goto LABEL_15;
            }
            int v10 = *(_DWORD *)((char *)a1 + i - 48);
            if ((int)v13 >= v10 && ((int)v13 > v10 || v18 >= *(_DWORD *)((char *)a1 + i - 8))) {
              break;
            }
          }
          unint64_t v11 = (char *)a1 + i;
LABEL_15:
          *(void *)unint64_t v11 = v13;
          int v12 = HIDWORD(v14);
          *(_DWORD *)((char *)a1 + i + 8) = v14;
          *((_DWORD *)v11 + 3) = v12;
          if (v11 != (char *)&v13) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v11 + 16, (char *)__p, (uint64_t)v16, (v16 - (unsigned char *)__p) >> 2);
          }
          *((_DWORD *)v11 + 10) = v18;
          if (__p)
          {
            unint64_t v16 = __p;
            operator delete(__p);
          }
        }
        unint64_t v4 = v6 + 6;
        v5 += 48;
      }
      while (v6 + 6 != a2);
    }
  }
}

void sub_1B1F1E934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(void *a1, void *a2)
{
  if (a1 != a2)
  {
    int v3 = a1;
    unint64_t v4 = a1 + 6;
    if (a1 + 6 != a2)
    {
      uint64_t v5 = a1 + 11;
      do
      {
        char v6 = v3;
        int v3 = v4;
        int v7 = *((_DWORD *)v6 + 12);
        if (v7 < *(_DWORD *)v6 || v7 <= *(_DWORD *)v6 && *((_DWORD *)v6 + 22) < *((_DWORD *)v6 + 10))
        {
          uint64_t v10 = *v3;
          uint64_t v11 = v6[7];
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          std::string __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v6[8], v6[9], (uint64_t)(v6[9] - v6[8]) >> 2);
          int v15 = *((_DWORD *)v6 + 22);
          for (uint64_t i = v5; ; i -= 12)
          {
            *((void *)i - 5) = *((void *)i - 11);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(i - 8), (uint64_t)(i - 20));
            *uint64_t i = *(i - 12);
            int v9 = *(i - 34);
            if ((int)v10 >= v9 && ((int)v10 > v9 || v15 >= *(i - 24))) {
              break;
            }
          }
          *((void *)i - 11) = v10;
          *((void *)i - 10) = v11;
          if (i - 22 != (_DWORD *)&v10) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)i - 72, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
          }
          *(i - 12) = v15;
          if (__p)
          {
            uint64_t v13 = __p;
            operator delete(__p);
          }
        }
        unint64_t v4 = v3 + 6;
        v5 += 12;
      }
      while (v3 + 6 != a2);
    }
  }
}

void sub_1B1F1EAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 < *(_DWORD *)a1 || v6 <= *(_DWORD *)a1 && *((_DWORD *)a2 + 10) < *(_DWORD *)(a1 + 40))
  {
    if (*(_DWORD *)a3 < v6 || *(_DWORD *)a3 <= v6 && *(_DWORD *)(a3 + 40) < *((_DWORD *)a2 + 10))
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a3);
    }
    else
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, a2);
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a3 <= *(_DWORD *)a2 && *(_DWORD *)(a3 + 40) < *((_DWORD *)a2 + 10))
      {
        int v8 = a2;
        int v9 = (uint64_t *)a3;
        goto LABEL_14;
      }
    }
    return 1;
  }
  if (*(_DWORD *)a3 < v6 || *(_DWORD *)a3 <= v6 && *(_DWORD *)(a3 + 40) < *((_DWORD *)a2 + 10))
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2, (uint64_t *)a3);
    if (*(_DWORD *)a2 < *(_DWORD *)a1 || *(_DWORD *)a2 <= *(_DWORD *)a1 && *((_DWORD *)a2 + 10) < *(_DWORD *)(a1 + 40))
    {
      int v8 = (uint64_t *)a1;
      int v9 = a2;
LABEL_14:
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v8, v9);
      return 2;
    }
    return 1;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v17 = *a1;
  uint64_t v4 = (uint64_t)(a1 + 1);
  uint64_t v18 = a1[1];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a1[2], a1[3], (a1[3] - a1[2]) >> 2);
  int v5 = *((_DWORD *)a1 + 10);
  int v22 = v5;
  int v6 = *(_DWORD *)(a2 - 48);
  if ((int)v17 < v6 || (int)v17 <= v6 && v5 < *(_DWORD *)(a2 - 8))
  {
    unint64_t i = (unint64_t)a1;
    do
    {
      int v9 = *(_DWORD *)(i + 48);
      i += 48;
      int v8 = v9;
    }
    while ((int)v17 >= v9 && ((int)v17 > v8 || v5 >= *(_DWORD *)(i + 40)));
  }
  else
  {
    for (unint64_t i = (unint64_t)(a1 + 6);
          i < a2 && (int)v17 >= *(_DWORD *)i && ((int)v17 > *(_DWORD *)i || v5 >= *(_DWORD *)(i + 40));
  }
  if (i < a2)
  {
    for (a2 -= 48; (int)v17 < v6 || (int)v17 <= v6 && v5 < *(_DWORD *)(a2 + 40); a2 -= 48)
    {
      int v10 = *(_DWORD *)(a2 - 48);
      int v6 = v10;
    }
  }
  while (i < a2)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)i, (uint64_t *)a2);
    int v12 = *(_DWORD *)(i + 48);
    i += 48;
    for (int j = v12; (int)v17 >= j && ((int)v17 > j || v22 >= *(_DWORD *)(i + 40)); int j = v13)
    {
      int v13 = *(_DWORD *)(i + 48);
      i += 48;
    }
    do
    {
      do
      {
        int v14 = *(_DWORD *)(a2 - 48);
        a2 -= 48;
        BOOL v15 = (int)v17 <= v14;
      }
      while ((int)v17 < v14);
    }
    while (v15 && v22 < *(_DWORD *)(a2 + 40));
  }
  if ((uint64_t *)(i - 48) != a1)
  {
    *a1 = *(void *)(i - 48);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v4, i - 40);
    *((_DWORD *)a1 + 10) = *(_DWORD *)(i - 8);
  }
  *(void *)(i - 48) = v17;
  *(void *)(i - 40) = v18;
  if ((uint64_t *)(i - 40) != &v18) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(i - 32), (char *)__p, (uint64_t)v20, (v20 - (unsigned char *)__p) >> 2);
  }
  *(_DWORD *)(i - 8) = v22;
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  return i;
}

void sub_1B1F1EDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v21 = *a1;
  uint64_t v4 = (uint64_t)(a1 + 1);
  uint64_t v22 = a1[1];
  char v24 = 0;
  uint64_t v25 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a1[2], a1[3], (a1[3] - a1[2]) >> 2);
  uint64_t v5 = 0;
  int v6 = *((_DWORD *)a1 + 10);
  int v26 = v6;
  while (1)
  {
    int v7 = a1[v5 + 6];
    if (v7 >= (int)v21 && (v7 > (int)v21 || SLODWORD(a1[v5 + 11]) >= v6)) {
      break;
    }
    v5 += 6;
  }
  unint64_t v8 = (unint64_t)&a1[v5 + 6];
  if (v5 * 8)
  {
    do
    {
      int v10 = *(_DWORD *)(a2 - 48);
      a2 -= 48;
      int v9 = v10;
    }
    while (v10 >= (int)v21 && (v9 > (int)v21 || *(_DWORD *)(a2 + 40) >= v6));
  }
  else
  {
LABEL_19:
    if (v8 < a2)
    {
      do
      {
        int v12 = *(_DWORD *)(a2 - 48);
        a2 -= 48;
        int v11 = v12;
        if (v12 < (int)v21) {
          break;
        }
        if (v11 > (int)v21) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(a2 + 40) >= v6 && v8 < a2);
    }
  }
  unint64_t v14 = v8;
  if (v8 < a2)
  {
    unint64_t v15 = a2;
    do
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)v14, (uint64_t *)v15);
      do
      {
        do
        {
          int v16 = *(_DWORD *)(v14 + 48);
          v14 += 48;
          BOOL v17 = v16 <= (int)v21;
        }
        while (v16 < (int)v21);
      }
      while (v17 && *(_DWORD *)(v14 + 40) < v26);
      do
      {
        int v19 = *(_DWORD *)(v15 - 48);
        v15 -= 48;
        int v18 = v19;
      }
      while (v19 >= (int)v21 && (v18 > (int)v21 || *(_DWORD *)(v15 + 40) >= v26));
    }
    while (v14 < v15);
  }
  if ((uint64_t *)(v14 - 48) != a1)
  {
    *a1 = *(void *)(v14 - 48);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v4, v14 - 40);
    *((_DWORD *)a1 + 10) = *(_DWORD *)(v14 - 8);
  }
  *(void *)(v14 - 48) = v21;
  *(void *)(v14 - 40) = v22;
  if ((uint64_t *)(v14 - 40) != &v22) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v14 - 32), (char *)__p, (uint64_t)v24, (v24 - (unsigned char *)__p) >> 2);
  }
  *(_DWORD *)(v14 - 8) = v26;
  if (__p)
  {
    char v24 = __p;
    operator delete(__p);
  }
  return v14 - 48;
}

void sub_1B1F1F018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = (uint64_t *)(a2 - 48);
      int v7 = *(_DWORD *)(a2 - 48);
      if (v7 < *(_DWORD *)a1 || v7 <= *(_DWORD *)a1 && *(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 40))
      {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, v6);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, (uint64_t *)(a1 + 48), a2 - 48);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      unint64_t v8 = (_DWORD *)(a1 + 96);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, (uint64_t *)(a1 + 48), a1 + 96);
      uint64_t v9 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)v9 < *v8 || *(_DWORD *)v9 <= *v8 && *(_DWORD *)(v9 + 40) < v8[10])
    {
      uint64_t v16 = *(void *)v9;
      uint64_t v17 = *(void *)(v9 + 8);
      int v19 = 0;
      uint64_t v20 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v9 + 16), *(void *)(v9 + 24), (uint64_t)(*(void *)(v9 + 24) - *(void *)(v9 + 16)) >> 2);
      int v21 = *(_DWORD *)(v9 + 40);
      for (uint64_t i = v10; ; i -= 48)
      {
        *(void *)(a1 + i + 144) = *(void *)(a1 + i + 96);
        fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(a1 + i + 152, a1 + i + 104);
        *(_DWORD *)(a1 + i + 184) = *(_DWORD *)(a1 + i + 136);
        if (i == -96)
        {
          uint64_t v14 = a1;
          goto LABEL_17;
        }
        int v13 = *(_DWORD *)(a1 + i + 48);
        if ((int)v16 >= v13 && ((int)v16 > v13 || v21 >= *(_DWORD *)(a1 + i + 88))) {
          break;
        }
      }
      uint64_t v14 = a1 + i + 96;
LABEL_17:
      *(void *)uint64_t v14 = v16;
      int v15 = HIDWORD(v17);
      *(_DWORD *)(a1 + i + 104) = v17;
      *(_DWORD *)(v14 + 12) = v15;
      if ((uint64_t *)v14 != &v16) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v14 + 16), (char *)__p, (uint64_t)v19, (v19 - (unsigned char *)__p) >> 2);
      }
      *(_DWORD *)(v14 + 40) = v21;
      if (__p)
      {
        int v19 = __p;
        operator delete(__p);
      }
      if (++v11 == 8) {
        return v9 + 48 == a2;
      }
    }
    unint64_t v8 = (_DWORD *)v9;
    v10 += 48;
    v9 += 48;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_1B1F1F2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, (uint64_t *)a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 <= *(_DWORD *)a3 && *(_DWORD *)(a4 + 40) < *(_DWORD *)(a3 + 40))
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a3, (uint64_t *)a4);
    if (*(_DWORD *)a3 < *(_DWORD *)a2 || *(_DWORD *)a3 <= *(_DWORD *)a2 && *(_DWORD *)(a3 + 40) < *(_DWORD *)(a2 + 40))
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
      if (*(_DWORD *)a2 < *(_DWORD *)a1
        || *(_DWORD *)a2 <= *(_DWORD *)a1 && *(_DWORD *)(a2 + 40) < *(_DWORD *)(a1 + 40))
      {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4 || *(_DWORD *)a5 <= *(_DWORD *)a4 && *(_DWORD *)(a5 + 40) < *(_DWORD *)(a4 + 40))
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a4, (uint64_t *)a5);
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 <= *(_DWORD *)a3 && *(_DWORD *)(a4 + 40) < *(_DWORD *)(a3 + 40))
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a3, (uint64_t *)a4);
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a3 <= *(_DWORD *)a2 && *(_DWORD *)(a3 + 40) < *(_DWORD *)(a2 + 40))
      {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
        if (*(_DWORD *)a2 < *(_DWORD *)a1
          || *(_DWORD *)a2 <= *(_DWORD *)a1 && *(_DWORD *)(a2 + 40) < *(_DWORD *)(a1 + 40))
        {
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
        }
      }
    }
  }
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 48;
    if (a2 - a1 >= 49)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (uint64_t *)(a1 + 48 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, a4, v9, v12);
        v12 -= 6;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1
          || *(_DWORD *)v14 <= *(_DWORD *)a1 && *(_DWORD *)(v14 + 40) < *(_DWORD *)(a1 + 40))
        {
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)v14, (uint64_t *)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 48;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 49)
    {
      unint64_t v15 = v8 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, v6, a4, v15);
        v6 -= 48;
      }
      while (v15-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 4)))
    {
      uint64_t v9 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 4)) | 1;
      unint64_t v10 = (uint64_t *)(a1 + 48 * v9);
      if (0x5555555555555556 * (((uint64_t)a4 - a1) >> 4) + 2 < a3)
      {
        int v11 = *((_DWORD *)v10 + 12);
        if (*(_DWORD *)v10 < v11 || *(_DWORD *)v10 <= v11 && *(_DWORD *)(a1 + 48 * v9 + 40) < *((_DWORD *)v10 + 22))
        {
          v10 += 6;
          uint64_t v9 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 4) + 2;
        }
      }
      if (*(_DWORD *)v10 >= *(_DWORD *)a4
        && (*(_DWORD *)v10 > *(_DWORD *)a4 || *((_DWORD *)v10 + 10) >= *((_DWORD *)a4 + 10)))
      {
        uint64_t v15 = *a4;
        uint64_t v16 = a4[1];
        int v18 = 0;
        uint64_t v19 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a4[2], a4[3], (a4[3] - a4[2]) >> 2);
        int v20 = *((_DWORD *)v5 + 10);
        while (1)
        {
          int v12 = v10;
          *uint64_t v5 = *v10;
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v5 + 1), (uint64_t)(v10 + 1));
          *((_DWORD *)v5 + 10) = *((_DWORD *)v10 + 10);
          if (v7 < v9) {
            break;
          }
          uint64_t v13 = (2 * v9) | 1;
          unint64_t v10 = (uint64_t *)(a1 + 48 * v13);
          if (2 * v9 + 2 < a3)
          {
            int v14 = *((_DWORD *)v10 + 12);
            if (*(_DWORD *)v10 < v14
              || *(_DWORD *)v10 <= v14 && *(_DWORD *)(a1 + 48 * v13 + 40) < *((_DWORD *)v10 + 22))
            {
              v10 += 6;
              uint64_t v13 = 2 * v9 + 2;
            }
          }
          if (*(_DWORD *)v10 < (int)v15) {
            break;
          }
          uint64_t v5 = v12;
          uint64_t v9 = v13;
          if (*(_DWORD *)v10 <= (int)v15)
          {
            uint64_t v5 = v12;
            uint64_t v9 = v13;
            if (*((_DWORD *)v10 + 10) < v20) {
              break;
            }
          }
        }
        *int v12 = v15;
        v12[1] = v16;
        if (v12 != &v15) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v12 + 16, (char *)__p, (uint64_t)v18, (v18 - (unsigned char *)__p) >> 2);
        }
        *((_DWORD *)v12 + 10) = v20;
        if (__p)
        {
          int v18 = __p;
          operator delete(__p);
        }
      }
    }
  }
}

void sub_1B1F1F89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v10 = *(void *)a1;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
    int v15 = *(_DWORD *)(a1 + 40);
    uint64_t v8 = (uint64_t *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>((_DWORD *)a1, a3, a4);
    uint64_t v9 = v8;
    if (v8 == (uint64_t *)(a2 - 48))
    {
      *uint64_t v8 = v10;
      v8[1] = v11;
      if (v8 != &v10) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8 + 16, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
      }
      *((_DWORD *)v9 + 10) = v15;
    }
    else
    {
      *uint64_t v8 = *(void *)(a2 - 48);
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v8 + 1), a2 - 40);
      *((_DWORD *)v9 + 10) = *(_DWORD *)(a2 - 8);
      *(void *)(a2 - 48) = v10;
      *(void *)(a2 - 40) = v11;
      if ((uint64_t *)(a2 - 40) != &v11) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 - 32), (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
      }
      *(_DWORD *)(a2 - 8) = v15;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, (uint64_t)(v9 + 6), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - a1 + 48) >> 4));
    }
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
  }
}

void sub_1B1F1FA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    uint64_t v9 = v5 + 1;
    a1 += 12 * v5 + 12;
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v11 < a3)
    {
      int v12 = a1[12];
      if (*a1 < v12 || *a1 <= v12 && v8[12 * v9 + 10] < a1[22])
      {
        a1 += 12;
        uint64_t v5 = v11;
      }
    }
    *(void *)uint64_t v8 = *(void *)a1;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v8 + 2), (uint64_t)(a1 + 2));
    v8[10] = a1[10];
  }
  while (v5 <= v7);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = a1 + 48 * (v4 >> 1);
    uint64_t v10 = a2 - 48;
    int v9 = *(_DWORD *)(a2 - 48);
    if (*(_DWORD *)v8 < v9 || *(_DWORD *)v8 <= v9 && *(_DWORD *)(a1 + 48 * v7 + 40) < *(_DWORD *)(a2 - 8))
    {
      uint64_t v12 = *(void *)(a2 - 48);
      uint64_t v13 = *(void *)(a2 - 40);
      int v15 = 0;
      uint64_t v16 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a2 - 32), *(void *)(a2 - 24), (uint64_t)(*(void *)(a2 - 24) - *(void *)(a2 - 32)) >> 2);
      int v17 = *(_DWORD *)(a2 - 8);
      while (1)
      {
        uint64_t v11 = v8;
        *(void *)uint64_t v10 = *(void *)v8;
        fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v10 + 8, v8 + 8);
        *(_DWORD *)(v10 + 40) = *(_DWORD *)(v8 + 40);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = a1 + 48 * v7;
        uint64_t v10 = v11;
        if (*(_DWORD *)v8 >= (int)v12)
        {
          if (*(_DWORD *)v8 > (int)v12) {
            break;
          }
          uint64_t v10 = v11;
          if (*(_DWORD *)(a1 + 48 * v7 + 40) >= v17) {
            break;
          }
        }
      }
      *(void *)uint64_t v11 = v12;
      *(void *)(v11 + 8) = v13;
      if ((uint64_t *)v11 != &v12) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v11 + 16), (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 2);
      }
      *(_DWORD *)(v11 + 40) = v17;
      if (__p)
      {
        int v15 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1B1F1FC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::CorrectiveReranker::CorrectiveReranker(std::string *this, const quasar::corrective_reranking::CorrectiveRerankerConfig *a2, const quasar::PTree *a3, const quasar::corrective_reranking::Models *a4)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *((long long **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  long long v9 = *((_OWORD *)a2 + 3);
  long long v10 = *((_OWORD *)a2 + 4);
  this[3].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v9;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v10;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 80), *((long long **)a2 + 10), *((long long **)a2 + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3));
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)a4;
  std::string::basic_string[abi:ne180100]<0>(v14, "deleteTargetless");
  std::string::basic_string[abi:ne180100]<0>(v15, "capitalize");
  std::string::basic_string[abi:ne180100]<0>(v16, "uppercase");
  std::string::basic_string[abi:ne180100]<0>(v17, "lowercase");
  std::string::basic_string[abi:ne180100]<0>(v18, "send");
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[4].__r_.__value_.__r.__words[2], (unsigned __int8 *)v14, 5);
  uint64_t v11 = 0;
  while (1)
  {
    if (SHIBYTE(v18[v11 + 2]) < 0) {
      operator delete((void *)v18[v11]);
    }
    v11 -= 3;
    if (v11 == -15)
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "delete");
      std::string::basic_string[abi:ne180100]<0>(v15, "insertbefore");
      std::string::basic_string[abi:ne180100]<0>(v16, "insertafter");
      std::string::basic_string[abi:ne180100]<0>(v17, "replace");
      std::unordered_set<std::string>::unordered_set((uint64_t)&this[6].__r_.__value_.__l.__size_, (unsigned __int8 *)v14, 4);
      uint64_t v12 = 0;
      while (1)
      {
        if (SHIBYTE(v17[v12 + 2]) < 0) {
          operator delete((void *)v17[v12]);
        }
        v12 -= 3;
        if (v12 == -12)
        {
          std::string::basic_string[abi:ne180100]<0>(v14, ".");
          std::string::basic_string[abi:ne180100]<0>(v15, "!");
          std::string::basic_string[abi:ne180100]<0>(v16, "?");
          std::string::basic_string[abi:ne180100]<0>(v17, ",");
          std::unordered_set<std::string>::unordered_set((uint64_t)&this[8], (unsigned __int8 *)v14, 4);
          uint64_t v13 = 0;
          while (1)
          {
            if (SHIBYTE(v17[v13 + 2]) < 0) {
              operator delete((void *)v17[v13]);
            }
            v13 -= 3;
            if (v13 == -12)
            {
              quasar::corrective_reranking::InitFeaturizers((uint64_t *)a2 + 3, (uint64_t)a3, &this[9].__r_.__value_.__r.__words[2]);
              kaldi::quasar::LoadClassifier((uint64_t)a2);
            }
          }
        }
      }
    }
  }
}

void sub_1B1F1FFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<quasar::corrective_reranking::Featurizer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v10);
  quasar::corrective_reranking::CorrectiveRerankerConfig::~CorrectiveRerankerConfig(v9);
  _Unwind_Resume(a1);
}

__n128 quasar::corrective_reranking::CorrectiveReranker::performCorrectiveReranking@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, char a10, char a11, int a12, char a13, char a14, unsigned __int8 a15)
{
  if (a6)
  {
    quasar::corrective_reranking::CorrectiveReranker::correctTarget(a1, (quasar::corrective_reranking::Parse **)a2, a3, (uint64_t)__p);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v50;
    __p[1] = 0;
    *(void *)&long long v50 = 0;
    __p[0] = 0;
    *(void *)&long long v67 = __p;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (a15)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Target Correction]\n", 20);
        *(void *)&long long v67 = a2;
        BYTE8(v67) = 0;
        uint64_t v68 = a3;
        quasar::corrective_reranking::operator<<(v21, (uint64_t **)&v67);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
    }
  }
  if (a7)
  {
    quasar::corrective_reranking::CorrectiveReranker::correctPayload(a1, a2, 0, (uint64_t *)__p);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v50;
    __p[1] = 0;
    *(void *)&long long v50 = 0;
    __p[0] = 0;
    *(void *)&long long v67 = __p;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (a15)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Payload Correction]\n", 21);
        *(void *)&long long v67 = a2;
        BYTE8(v67) = 0;
        uint64_t v68 = a3;
        quasar::corrective_reranking::operator<<(v22, (uint64_t **)&v67);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
    }
  }
  if (a10)
  {
    quasar::corrective_reranking::CorrectiveReranker::cleanParses(a1, (quasar::corrective_reranking::Parse **)a2, a3, (uint64_t *)__p);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v50;
    __p[1] = 0;
    *(void *)&long long v50 = 0;
    __p[0] = 0;
    *(void *)&long long v67 = __p;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (a15)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Parse Cleaning]\n", 17);
        *(void *)&long long v67 = a2;
        BYTE8(v67) = 0;
        uint64_t v68 = a3;
        quasar::corrective_reranking::operator<<(v23, (uint64_t **)&v67);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
    }
  }
  uint64_t v42 = a5;
  uint64_t v24 = a3;
  uint64_t v44 = a9;
  uint64_t v25 = *(quasar::corrective_reranking::Parse **)a2;
  int v26 = *(quasar::corrective_reranking::Parse **)(a2 + 8);
  if (*(quasar::corrective_reranking::Parse **)a2 == v26)
  {
LABEL_29:
    uint64_t v27 = (uint64_t)v25;
    goto LABEL_30;
  }
  uint64_t v27 = *(void *)(a2 + 8);
  while (1)
  {
    quasar::corrective_reranking::Parse::getIntent(v25, (uint64_t)__p);
    unint64_t v28 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 112), (unsigned __int8 *)__p);
    if (SBYTE7(v50) < 0) {
      operator delete(__p[0]);
    }
    if (v28) {
      break;
    }
    uint64_t v25 = (quasar::corrective_reranking::Parse *)((char *)v25 + 232);
    if (v25 == v26) {
      goto LABEL_30;
    }
  }
  if (v25 != v26)
  {
    uint64_t v29 = (quasar::corrective_reranking::Parse *)((char *)v25 + 232);
    if ((quasar::corrective_reranking::Parse *)((char *)v25 + 232) != v26)
    {
      uint64_t v27 = (uint64_t)v25;
      while (1)
      {
        quasar::corrective_reranking::Parse::getIntent(v29, (uint64_t)__p);
        unint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 112), (unsigned __int8 *)__p);
        uint64_t v31 = v30;
        if (SBYTE7(v50) < 0)
        {
          operator delete(__p[0]);
          if (!v31)
          {
LABEL_28:
            quasar::corrective_reranking::Parse::operator=(v27, (long long *)v29);
            v27 += 232;
          }
        }
        else if (!v30)
        {
          goto LABEL_28;
        }
        uint64_t v29 = (quasar::corrective_reranking::Parse *)((char *)v29 + 232);
        if (v29 == v26) {
          goto LABEL_30;
        }
      }
    }
    goto LABEL_29;
  }
LABEL_30:
  std::vector<quasar::corrective_reranking::Parse>::erase(a2, v27, *(long long **)(a2 + 8));
  if (a12 >= 1)
  {
    long long v67 = 0uLL;
    uint64_t v68 = 0;
    BOOL v32 = *(const quasar::corrective_reranking::Parse **)a2;
    uint64_t v33 = *(void *)(a2 + 8);
    if (0x34F72C234F72C235 * ((v33 - *(void *)a2) >> 3) >= (unint64_t)a12) {
      unint64_t v34 = a12;
    }
    else {
      unint64_t v34 = 0x34F72C234F72C235 * ((v33 - *(void *)a2) >> 3);
    }
    std::random_device::random_device[abi:ne180100](v46);
    uint32_t v35 = arc4random();
    LODWORD(__p[0]) = v35;
    for (uint64_t i = 1; i != 624; ++i)
    {
      uint32_t v35 = i + 1812433253 * (v35 ^ (v35 >> 30));
      *((_DWORD *)__p + i) = v35;
    }
    uint64_t v66 = 0;
    std::__sample[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::back_insert_iterator<std::vector<quasar::corrective_reranking::Parse>>,unsigned long,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(v32, v33, (uint64_t *)&v67, v34, (uint64_t)__p);
    std::random_device::~random_device(v46);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = v67;
    *(void *)(a2 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v68;
    uint64_t v68 = 0;
    long long v67 = 0uLL;
    if (a15 && quasar::gLogLevel >= 5)
    {
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Limit Number of Parses to ", 27);
      float v37 = (void *)std::ostream::operator<<();
      float v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"]\n", 2);
      *(void *)&v46[0].__padding_ = a2;
      char v47 = 0;
      uint64_t v48 = v24;
      quasar::corrective_reranking::operator<<(v38, (uint64_t **)v46);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    __p[0] = &v67;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (a8)
  {
    quasar::corrective_reranking::CorrectiveReranker::rankParses(a1, (uint64_t *)a2, v24, a4, v42, a15, (uint64_t *)__p);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v50;
    __p[1] = 0;
    *(void *)&long long v50 = 0;
    __p[0] = 0;
    *(void *)&long long v67 = __p;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  }
  if (a11)
  {
    quasar::corrective_reranking::CorrectiveReranker::correctFloatingPunctuation(a1, a2, v24, 1, (uint64_t *)__p);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v50;
    __p[1] = 0;
    *(void *)&long long v50 = 0;
    __p[0] = 0;
    *(void *)&long long v67 = __p;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (a15)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        float v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Floating Punctuation Removal]\n", 31);
        *(void *)&long long v67 = a2;
        BYTE8(v67) = 0;
        uint64_t v68 = v24;
        quasar::corrective_reranking::operator<<(v39, (uint64_t **)&v67);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
    }
  }
  if (*(int *)(a1 + 64) >= 1)
  {
    quasar::corrective_reranking::CorrectiveReranker::correctPayloadCapitalization(a1, (uint64_t *)a2, v24, a13, a15, (uint64_t)__p);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v50;
    __p[1] = 0;
    *(void *)&long long v50 = 0;
    __p[0] = 0;
    *(void *)&long long v67 = __p;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    if (a15)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        BOOL v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Payload Capitalization Correction]\n", 36);
        *(void *)&long long v67 = a2;
        BYTE8(v67) = 0;
        uint64_t v68 = v24;
        quasar::corrective_reranking::operator<<(v40, (uint64_t **)&v67);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
    }
  }
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)uint64_t v44 = *(_OWORD *)a2;
  *(void *)(v44 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *(void *)a2 = 0;
  return result;
}

void sub_1B1F2081C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::random_device a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void quasar::corrective_reranking::CorrectiveReranker::correctTarget(uint64_t a1@<X0>, quasar::corrective_reranking::Parse **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  unint64_t v4 = a2[1];
  long long v52 = *a2;
  if (*a2 != v4)
  {
    uint64_t v5 = a1;
    uint64_t v44 = a2[1];
    while (1)
    {
      unint64_t v6 = *(unsigned int *)(v5 + 76);
      if ((int)v6 >= 1 && 0x34F72C234F72C235 * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) > v6) {
        break;
      }
      if (quasar::corrective_reranking::Parse::isTargetExpectingCommand(v52))
      {
        quasar::corrective_reranking::Parse::getTarget(v52, v63);
        quasar::corrective_reranking::CorrectiveReranker::findTargetCandidates(v5, a3, v63, &v61);
        long long v58 = 0;
        long long v59 = 0;
        unint64_t v60 = 0;
        uint64_t v7 = *(void *)(*(void *)(v5 + 104) + 56);
        quasar::corrective_reranking::detokenize(__p, v63);
        quasar::corrective_reranking::Parse::getIntent(v52, (uint64_t)&v81);
        quasar::corrective_reranking::OverridesDictionary::findSlotOverride(v7, (uint64_t)__p, &v56);
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v65) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v9 = v56;
        uint64_t v8 = v57;
        if (v56 != v57)
        {
          long long v50 = (float *)((char *)v52 + 80);
          uint64_t v10 = (long long **)((char *)v52 + 56);
          do
          {
            if (*(unsigned char *)(v9 + 24))
            {
              int v11 = *(char *)(v9 + 23);
              if (v11 < 0)
              {
                if (*(void *)(v9 + 8) == 8)
                {
                  uint64_t v12 = *(void **)v9;
LABEL_19:
                  if (*v12 == 0x747865546C6C7566)
                  {
                    quasar::corrective_reranking::Parse::getTargetPrecedingFillerTokens(v52, (uint64_t *)__p);
                    uint64_t v13 = __p[0];
                    uint64_t v14 = __p[1];
                    v81.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
                    if (v13 == v14)
                    {
                      memset(&v81, 0, sizeof(v81));
                      quasar::corrective_reranking::TargetRange::TargetRange(__p, (uint64_t)&v81);
                      int v15 = v59;
                      if ((unint64_t)v59 >= v60)
                      {
                        uint64_t v16 = (std::string *)std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange>((uint64_t *)&v58, (uint64_t)v52, v10, v50, (uint64_t)__p);
                      }
                      else
                      {
                        std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange>((uint64_t)&v60, v59, (uint64_t)v52, v10, v50, (uint64_t)__p);
                        uint64_t v16 = (std::string *)((char *)v15 + 232);
                      }
                      long long v59 = v16;
                      if (__p[0])
                      {
                        __p[1] = __p[0];
                        operator delete(__p[0]);
                      }
                      if (v81.__r_.__value_.__r.__words[0])
                      {
                        v81.__r_.__value_.__l.__size_ = v81.__r_.__value_.__r.__words[0];
                        operator delete(v81.__r_.__value_.__l.__data_);
                      }
                    }
                  }
                }
              }
              else
              {
                uint64_t v12 = (void *)v9;
                if (v11 == 8) {
                  goto LABEL_19;
                }
              }
            }
            else
            {
              quasar::corrective_reranking::tokenize(v9, &v54);
              quasar::corrective_reranking::getTokens((long long **)&v54, (uint64_t *)&v81);
              quasar::corrective_reranking::CorrectiveReranker::findTargetCandidates(a1, a3, &v81, (uint64_t *)__p);
              v53.__begin_ = &v81;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
              v53.__begin_ = (std::vector<std::string>::pointer)&v54;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
              std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>,std::__wrap_iter<std::pair<std::string,quasar::corrective_reranking::TargetRange> const*>>(&v61, *(long long **)v62, (std::string *)__p[0], (long long *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 4));
              v81.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
            }
            v9 += 32;
          }
          while (v9 != v8);
        }
        *((void *)&v54 + 1) = 0;
        uint64_t v55 = 0;
        *(void *)&long long v54 = (char *)&v54 + 8;
        uint64_t v17 = v61;
        long long v51 = *(long long **)v62;
        if (v61 != *(void *)v62)
        {
          int v46 = (float *)((char *)v52 + 80);
          char v47 = (long long **)((char *)v52 + 56);
          do
          {
            memset(&v53, 0, sizeof(v53));
            int v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v53, (long long *)v17);
            int v20 = *(int **)(v17 + 24);
            uint64_t v19 = *(int **)(v17 + 32);
            v53.__end_ = v18;
            while (v20 != v19)
            {
              std::to_string(&v81, *v20);
              std::vector<std::string>::pointer end = v53.__end_;
              if (v53.__end_ >= v53.__end_cap_.__value_)
              {
                unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v53.__end_ - (char *)v53.__begin_) >> 3);
                unint64_t v24 = v23 + 1;
                if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * (((char *)v53.__end_cap_.__value_ - (char *)v53.__begin_) >> 3) > v24) {
                  unint64_t v24 = 0x5555555555555556 * (((char *)v53.__end_cap_.__value_ - (char *)v53.__begin_) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v53.__end_cap_.__value_ - (char *)v53.__begin_) >> 3) >= 0x555555555555555) {
                  unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v25 = v24;
                }
                *(void *)&long long v66 = &v53.__end_cap_;
                if (v25) {
                  int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v53.__end_cap_, v25);
                }
                else {
                  int v26 = 0;
                }
                uint64_t v27 = &v26[24 * v23];
                __p[0] = v26;
                __p[1] = v27;
                *((void *)&v65 + 1) = &v26[24 * v25];
                long long v28 = *(_OWORD *)&v81.__r_.__value_.__l.__data_;
                *((void *)v27 + 2) = *((void *)&v81.__r_.__value_.__l + 2);
                *(_OWORD *)uint64_t v27 = v28;
                memset(&v81, 0, sizeof(v81));
                *(void *)&long long v65 = v27 + 24;
                std::vector<std::string>::__swap_out_circular_buffer(&v53, (std::__split_buffer<std::string> *)__p);
                uint64_t v29 = v53.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
                v53.__end_ = v29;
                if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v81.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v22 = *(_OWORD *)&v81.__r_.__value_.__l.__data_;
                v53.__end_->__r_.__value_.__r.__words[2] = v81.__r_.__value_.__r.__words[2];
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v22;
                v53.__end_ = end + 1;
              }
              std::to_string(&v81, v20[1]);
              std::vector<std::string>::pointer v30 = v53.__end_;
              if (v53.__end_ >= v53.__end_cap_.__value_)
              {
                unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v53.__end_ - (char *)v53.__begin_) >> 3);
                unint64_t v33 = v32 + 1;
                if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * (((char *)v53.__end_cap_.__value_ - (char *)v53.__begin_) >> 3) > v33) {
                  unint64_t v33 = 0x5555555555555556 * (((char *)v53.__end_cap_.__value_ - (char *)v53.__begin_) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v53.__end_cap_.__value_ - (char *)v53.__begin_) >> 3) >= 0x555555555555555) {
                  unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v34 = v33;
                }
                *(void *)&long long v66 = &v53.__end_cap_;
                if (v34) {
                  uint32_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v53.__end_cap_, v34);
                }
                else {
                  uint32_t v35 = 0;
                }
                float v36 = &v35[24 * v32];
                __p[0] = v35;
                __p[1] = v36;
                *((void *)&v65 + 1) = &v35[24 * v34];
                long long v37 = *(_OWORD *)&v81.__r_.__value_.__l.__data_;
                *((void *)v36 + 2) = *((void *)&v81.__r_.__value_.__l + 2);
                *(_OWORD *)float v36 = v37;
                memset(&v81, 0, sizeof(v81));
                *(void *)&long long v65 = v36 + 24;
                std::vector<std::string>::__swap_out_circular_buffer(&v53, (std::__split_buffer<std::string> *)__p);
                float v38 = v53.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
                v53.__end_ = v38;
                if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v81.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v31 = *(_OWORD *)&v81.__r_.__value_.__l.__data_;
                v53.__end_->__r_.__value_.__r.__words[2] = v81.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
                v53.__end_ = v30 + 1;
              }
              v20 += 2;
            }
            if ((long long *)((char *)&v54 + 8) == (long long *)std::__tree<std::vector<std::string>>::find<std::vector<std::string>>((uint64_t)&v54, (const void ***)&v53))
            {
              float v39 = v59;
              if ((unint64_t)v59 >= v60)
              {
                BOOL v40 = (std::string *)std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange const&>((uint64_t *)&v58, (uint64_t)v52, v47, v46, v17 + 24);
              }
              else
              {
                std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string> const&,float const&,quasar::corrective_reranking::TargetRange const&>((uint64_t)&v60, v59, (uint64_t)v52, v47, v46, v17 + 24);
                BOOL v40 = (std::string *)((char *)v39 + 232);
              }
              long long v59 = v40;
              std::__tree<std::vector<std::string>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>((uint64_t **)&v54, (const void ***)&v53, (long long **)&v53);
            }
            __p[0] = &v53;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            v17 += 48;
          }
          while ((long long *)v17 != v51);
        }
        std::vector<quasar::corrective_reranking::Parse>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::corrective_reranking::Parse*>,std::__wrap_iter<quasar::corrective_reranking::Parse*>>((uint64_t *)a4, *(long long **)(a4 + 8), v58, (uint64_t)v59, 0x34F72C234F72C235 * (((char *)v59 - (char *)v58) >> 3));
        std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&v54, *((char **)&v54 + 1));
        __p[0] = &v56;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = &v58;
        std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = &v61;
        std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = v63;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        uint64_t v5 = a1;
        unint64_t v4 = v44;
      }
      else
      {
        unint64_t v41 = *(void *)(a4 + 8);
        if (v41 >= *(void *)(a4 + 16))
        {
          uint64_t v42 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>((uint64_t *)a4, v52);
          uint64_t v43 = a4;
        }
        else
        {
          quasar::corrective_reranking::Parse::Parse(*(std::string **)(a4 + 8), v52);
          uint64_t v42 = v41 + 232;
          uint64_t v43 = a4;
          *(void *)(a4 + 8) = v41 + 232;
        }
        *(void *)(v43 + 8) = v42;
      }
      long long v52 = (quasar::corrective_reranking::Parse *)((char *)v52 + 232);
      if (v52 == v4) {
        return;
      }
    }
    if (quasar::gLogLevel >= 2)
    {
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Dropping parses since parse count is too high: ", 47);
      std::ostream::operator<<();
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      LODWORD(v6) = *(_DWORD *)(v5 + 76);
    }
    std::vector<quasar::corrective_reranking::Parse>::resize((uint64_t *)a4, (int)v6);
  }
}

void sub_1B1F20FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  *(void *)(v42 - 120) = a11;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 120));
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::correctPayload(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t *a4@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 56);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  unint64_t v6 = *(quasar::corrective_reranking::Parse **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  if (v5 <= 0)
  {
    uint64_t v40 = *(void *)a2;
    std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a4, v40, v7, 0x34F72C234F72C235 * ((v7 - (uint64_t)v6) >> 3));
  }
  else
  {
    while (v6 != (quasar::corrective_reranking::Parse *)v7)
    {
      if (quasar::corrective_reranking::Parse::isPayloadExpectingCommand(v6))
      {
        quasar::corrective_reranking::Parse::getPayload(v6, &v53);
        std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v53.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          if ((a3 & 1) == 0)
          {
            unint64_t v10 = a4[1];
            if (v10 >= a4[2])
            {
              uint64_t v11 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a4, v6);
            }
            else
            {
              quasar::corrective_reranking::Parse::Parse((std::string *)a4[1], v6);
              uint64_t v11 = v10 + 232;
              a4[1] = v10 + 232;
            }
            a4[1] = v11;
          }
          quasar::corrective_reranking::PhoneticMatcher::nearestNeighbors(**(void **)(a1 + 104), (uint64_t)&v53, *(unsigned int *)(a1 + 56));
          uint64_t v16 = *(void *)(*(void *)(a1 + 104) + 56);
          quasar::corrective_reranking::Parse::getPayload(v6, __p);
          quasar::corrective_reranking::Parse::getIntent(v6, (uint64_t)&v46);
          quasar::corrective_reranking::OverridesDictionary::findSlotOverride(v16, (uint64_t)__p, v49);
          if (SHIBYTE(v48) < 0) {
            operator delete(v46);
          }
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          uint64_t v18 = v49[0];
          uint64_t v17 = v49[1];
          while (v18 != v17)
          {
            if (!*(unsigned char *)(v18 + 24))
            {
              __p[0].__r_.__value_.__r.__words[0] = 0;
              unint64_t v19 = v51;
              if (v51 >= v52)
              {
                uint64_t v20 = std::vector<quasar::EuclidNeighbor>::__emplace_back_slow_path<std::string const&,double>(&v50, (long long *)v18, (double *)__p);
              }
              else
              {
                std::vector<quasar::EuclidNeighbor>::__construct_one_at_end[abi:ne180100]<std::string const&,double>((uint64_t)&v50, (long long *)v18, (double *)__p);
                uint64_t v20 = v19 + 32;
              }
              unint64_t v51 = v20;
            }
            v18 += 32;
          }
          int v46 = 0;
          char v47 = 0;
          unint64_t v48 = 0;
          uint64_t v21 = v50;
          unint64_t v22 = v51;
          if (v50 != v51)
          {
            while (1)
            {
              if (*(char *)(v21 + 23) < 0)
              {
                unint64_t v24 = *(char **)v21;
                uint64_t v23 = *(void *)(v21 + 8);
              }
              else
              {
                uint64_t v23 = *(unsigned __int8 *)(v21 + 23);
                unint64_t v24 = (char *)v21;
              }
              quasar::utf8::convertToLowerCaseOrEmpty(v24, v23, __p);
              quasar::corrective_reranking::Parse::getPayload(v6, &v44);
              if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v25 = &v44;
              }
              else {
                unint64_t v25 = (std::string *)v44.__r_.__value_.__r.__words[0];
              }
              if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v26 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v26 = v44.__r_.__value_.__l.__size_;
              }
              quasar::utf8::convertToLowerCaseOrEmpty((char *)v25, v26, &v45);
              uint64_t v27 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v28 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v28 = __p[0].__r_.__value_.__l.__size_;
              }
              std::string::size_type v29 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
              int v30 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
              if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v29 = v45.__r_.__value_.__l.__size_;
              }
              if (v28 != v29) {
                goto LABEL_58;
              }
              long long v31 = (void *)v45.__r_.__value_.__r.__words[0];
              if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v32 = &v45;
              }
              else {
                unint64_t v32 = (std::string *)v45.__r_.__value_.__r.__words[0];
              }
              if ((*((unsigned char *)&__p[0].__r_.__value_.__s + 23) & 0x80) != 0)
              {
                if (memcmp(__p[0].__r_.__value_.__l.__data_, v32, __p[0].__r_.__value_.__l.__size_)) {
                  goto LABEL_58;
                }
              }
              else if (*((unsigned char *)&__p[0].__r_.__value_.__s + 23))
              {
                unint64_t v33 = __p;
                while (v33->__r_.__value_.__s.__data_[0] == v32->__r_.__value_.__s.__data_[0])
                {
                  unint64_t v33 = (std::string *)((char *)v33 + 1);
                  unint64_t v32 = (std::string *)((char *)v32 + 1);
                  if (!--v27) {
                    goto LABEL_67;
                  }
                }
LABEL_58:
                float v34 = *(float *)(v21 + 28);
                float v35 = *(float *)(a1 + 60);
                if (v30 < 0) {
                  operator delete(v45.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v44.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
                if (v34 <= v35)
                {
                  quasar::corrective_reranking::Parse::Parse(__p, v6);
                  quasar::corrective_reranking::Parse::setPayload(__p, (const std::string *)v21);
                  char v43 = 0;
                  float v36 = v47;
                  if ((unint64_t)v47 >= v48)
                  {
                    long long v37 = (std::string *)std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse&>((uint64_t *)&v46, (const quasar::corrective_reranking::Parse *)__p);
                  }
                  else
                  {
                    quasar::corrective_reranking::Parse::Parse(v47, (const quasar::corrective_reranking::Parse *)__p);
                    long long v37 = (std::string *)((char *)v36 + 232);
                  }
                  char v47 = v37;
                  quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)__p);
                }
                goto LABEL_75;
              }
LABEL_67:
              if (v30 < 0) {
                operator delete(v31);
              }
              if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v44.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
LABEL_75:
              v21 += 32;
              if (v21 == v22)
              {
                float v38 = (const quasar::corrective_reranking::Parse *)v46;
                float v39 = v47;
                goto LABEL_78;
              }
            }
          }
          float v39 = 0;
          float v38 = 0;
LABEL_78:
          std::vector<quasar::corrective_reranking::Parse>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::corrective_reranking::Parse const*>,std::__wrap_iter<quasar::corrective_reranking::Parse const*>>(a4, (long long *)a4[1], v38, (uint64_t)v39, 0x34F72C234F72C235 * (((char *)v39 - (char *)v38) >> 3));
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
          std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        else
        {
          unint64_t v14 = a4[1];
          if (v14 >= a4[2])
          {
            uint64_t v15 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a4, v6);
          }
          else
          {
            quasar::corrective_reranking::Parse::Parse((std::string *)a4[1], v6);
            uint64_t v15 = v14 + 232;
            a4[1] = v14 + 232;
          }
          a4[1] = v15;
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        unint64_t v12 = a4[1];
        if (v12 >= a4[2])
        {
          uint64_t v13 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a4, v6);
        }
        else
        {
          quasar::corrective_reranking::Parse::Parse((std::string *)a4[1], v6);
          uint64_t v13 = v12 + 232;
          a4[1] = v12 + 232;
        }
        a4[1] = v13;
      }
      unint64_t v6 = (quasar::corrective_reranking::Parse *)((char *)v6 + 232);
    }
  }
}

void sub_1B1F21658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  v48[1] = v49;
  if (*(char *)(v50 - 105) < 0) {
    operator delete(*(void **)(v50 - 128));
  }
  std::string __p = v48;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::cleanParses(uint64_t a1@<X0>, quasar::corrective_reranking::Parse **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v36 = 0;
  long long v37 = 0;
  unint64_t v38 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  int v5 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    int v30 = *a2;
    goto LABEL_61;
  }
  uint64_t v31 = a1;
  do
  {
    if (*((unsigned char *)v5 + 112))
    {
      quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)v5 + 88, a3, &v35);
      if (!quasar::corrective_reranking::Parse::isPayloadExpectingCommand(v5))
      {
LABEL_44:
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        goto LABEL_46;
      }
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v9 = &v35;
      }
      else {
        uint64_t v9 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v35.__r_.__value_.__l.__size_;
      }
      quasar::utf8::convertToLowerCaseOrEmpty((char *)v9, size, &__s1);
      quasar::corrective_reranking::Parse::getPayload(v5, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
      }
      quasar::utf8::convertToLowerCaseOrEmpty((char *)p_p, v12, &v33);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = __s1.__r_.__value_.__l.__size_;
      }
      std::string::size_type v14 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      int v15 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v14 = v33.__r_.__value_.__l.__size_;
      }
      if (v13 == v14)
      {
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v16 = &v33;
        }
        else {
          uint64_t v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          BOOL v25 = memcmp(__s1.__r_.__value_.__l.__data_, v16, __s1.__r_.__value_.__l.__size_) == 0;
          if ((v15 & 0x80000000) == 0) {
            goto LABEL_35;
          }
        }
        else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
        {
          uint64_t v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
          p_s1 = &__s1;
          do
          {
            int v20 = p_s1->__r_.__value_.__s.__data_[0];
            p_s1 = (std::string *)((char *)p_s1 + 1);
            int v19 = v20;
            int v22 = v16->__r_.__value_.__s.__data_[0];
            uint64_t v16 = (std::string *)((char *)v16 + 1);
            int v21 = v22;
            BOOL v24 = v17-- != 0;
            BOOL v25 = v19 == v21;
          }
          while (v19 == v21 && v24);
          if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_35:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__s1.__r_.__value_.__l.__data_);
              if (v25)
              {
LABEL_39:
                std::string::size_type v26 = v37;
                if ((unint64_t)v37 >= v38)
                {
                  uint64_t v27 = (std::string *)std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(&v36, v5);
                }
                else
                {
                  quasar::corrective_reranking::Parse::Parse(v37, v5);
                  uint64_t v27 = (std::string *)((char *)v26 + 232);
                }
                long long v37 = v27;
                if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v35.__r_.__value_.__l.__data_);
                }
                goto LABEL_51;
              }
            }
            else if (v25)
            {
              goto LABEL_39;
            }
            goto LABEL_44;
          }
        }
        else
        {
          BOOL v25 = 1;
          if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_35;
          }
        }
      }
      else
      {
        BOOL v25 = 0;
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_35;
        }
      }
      operator delete(v33.__r_.__value_.__l.__data_);
      goto LABEL_35;
    }
LABEL_46:
    if (!quasar::corrective_reranking::Parse::isIncomplete(v5))
    {
      unint64_t v28 = a4[1];
      if (v28 >= a4[2])
      {
        uint64_t v29 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a4, v5);
      }
      else
      {
        quasar::corrective_reranking::Parse::Parse((std::string *)a4[1], v5);
        uint64_t v29 = v28 + 232;
        a4[1] = v28 + 232;
      }
      a4[1] = v29;
    }
LABEL_51:
    int v5 = (quasar::corrective_reranking::Parse *)((char *)v5 + 232);
  }
  while (v5 != v6);
  int v5 = *a2;
  int v30 = a2[1];
  a1 = v31;
LABEL_61:
  if ((unint64_t)(0x34F72C234F72C235 * ((v30 - v5) >> 3)) > 1
    && (unint64_t)(0x34F72C234F72C235 * ((a4[1] - *a4) >> 3)) <= 1)
  {
    quasar::corrective_reranking::CorrectiveReranker::correctPayload(a1, (uint64_t)&v36, 1, (uint64_t *)&v35);
    std::vector<quasar::corrective_reranking::Parse>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::corrective_reranking::Parse*>,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(a4, (long long *)a4[1], (const quasar::corrective_reranking::Parse *)v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_, 0x34F72C234F72C235 * ((uint64_t)(v35.__r_.__value_.__l.__size_ - v35.__r_.__value_.__r.__words[0]) >> 3));
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
  }
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
}

void sub_1B1F21A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char **p_p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32)
{
  p_p = &__p;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a31;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::rankParses(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a7, *a2, a2[1], 0x34F72C234F72C235 * ((a2[1] - *a2) >> 3));
  if ((unint64_t)(0x34F72C234F72C235 * ((a2[1] - *a2) >> 3)) >= 2)
  {
    kaldi::Matrix<float>::Matrix((uint64_t)&v39);
    quasar::corrective_reranking::CorrectiveReranker::featurizeParses((void *)a1, a2, a3, a4, a5, (int32x2_t *)&v39);
    double v14 = kaldi::Matrix<float>::Matrix((uint64_t)v37);
    (*(void (**)(void, uint64_t **, void *, double))(**(void **)(a1 + 256) + 16))(*(void *)(a1 + 256), &v39, v37, v14);
    uint64_t v16 = *a7;
    uint64_t v17 = (long long *)a7[1];
    uint64_t v18 = 0;
    if (v17 == (long long *)*a7)
    {
      uint64_t v29 = 0;
      unint64_t v27 = 0x34F72C234F72C235 * (((uint64_t)v17 - *a7) >> 3);
    }
    else
    {
      unint64_t v19 = 0;
      do
      {
        *(_DWORD *)&v18[v16 + 144] = *(_DWORD *)(v37[0] + 4 * v38 * (int)v19 + 4);
        int32x2_t v20 = (int32x2_t)v39;
        int v21 = v41;
        int v22 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v39);
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v43 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(__p, (const void *)(*(void *)&v20 + 4 * v21 * (int)v19), *(void *)&v20 + 4 * v21 * (int)v19 + 4 * v22, v22);
        uint64_t v23 = &v18[v16];
        BOOL v25 = v23 + 152;
        BOOL v24 = (void *)*((void *)v23 + 19);
        if (v24)
        {
          *((void *)v23 + 20) = v24;
          operator delete(v24);
          *BOOL v25 = 0;
          *((void *)v23 + 20) = 0;
          *((void *)v23 + 21) = 0;
        }
        __n128 v15 = *(__n128 *)__p;
        *(_OWORD *)BOOL v25 = *(_OWORD *)__p;
        *((void *)v23 + 21) = v43;
        ++v19;
        uint64_t v16 = *a7;
        uint64_t v17 = (long long *)a7[1];
        uint64_t v26 = (uint64_t)v17 - *a7;
        unint64_t v27 = 0x34F72C234F72C235 * (v26 >> 3);
        v18 += 232;
      }
      while (v27 > v19);
      if (v26 < 1)
      {
        uint64_t v18 = 0;
        uint64_t v29 = 0;
      }
      else
      {
        uint64_t v18 = (char *)std::get_temporary_buffer[abi:ne180100]<quasar::corrective_reranking::Parse>(0x34F72C234F72C235 * (v26 >> 3));
        uint64_t v29 = v28;
      }
    }
    std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(v16, v17, v27, (uint64_t)v18, v29, v15);
    if (v18) {
      operator delete(v18);
    }
    uint64_t v30 = *(unsigned __int8 *)(a3 + 23);
    if ((v30 & 0x80u) != 0) {
      uint64_t v30 = *(void *)(a3 + 8);
    }
    if (!v30)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "undo");
      std::string::basic_string[abi:ne180100]<0>((void *)&v43 + 1, "redo");
      std::string::basic_string[abi:ne180100]<0>(&v45, "stop");
      std::unordered_set<std::string>::unordered_set((uint64_t)v36, (unsigned __int8 *)__p, 3);
      for (uint64_t i = 0; i != -72; i -= 24)
      {
        if (*((char *)&v46 + i + 7) < 0) {
          operator delete(*(void **)((char *)&v45 + i));
        }
      }
      uint64_t v32 = *a7;
      uint64_t v33 = a7[1];
      if (*a7 != v33)
      {
        while (1)
        {
          quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)v32, (uint64_t)__p);
          float v34 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v36, (unsigned __int8 *)__p);
          if (SBYTE7(v43) < 0) {
            operator delete(__p[0]);
          }
          if (v34) {
            break;
          }
          v32 += 232;
          if (v32 == v33)
          {
            uint64_t v32 = v33;
            break;
          }
        }
        if (v32 != a7[1])
        {
          if (quasar::gLogLevel >= 5)
          {
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            *(_OWORD *)std::string __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Found 'undo' parse while displayed text is empty. Move the undo parse to the top. ", 82);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
          if (*a7 != v32) {
            std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::Parse *>>(*a7, (long long *)v32, (long long *)(v32 + 232));
          }
        }
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v36);
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)v37);
    kaldi::Matrix<float>::~Matrix((uint64_t)&v39);
  }
  if (a6)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::string v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Re-Ranking]\n", 13);
      float v39 = a7;
      char v40 = 1;
      uint64_t v41 = a3;
      quasar::corrective_reranking::operator<<(v35, &v39);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
  }
}

void sub_1B1F21F7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  __n128 v15 = va_arg(va3, void **);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va2);
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::correctFloatingPunctuation(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = *(quasar::corrective_reranking::Parse **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7 == *(void *)a2)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a5, v7, v7, 0);
    return;
  }
  if ((a4 & 1) == 0)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    do
    {
      quasar::corrective_reranking::CorrectiveReranker::extendTargetToSubsequentPunctuation((int **)v6, a1, a3, (uint64_t)__p);
      unint64_t v12 = a5[1];
      if (v12 >= a5[2])
      {
        uint64_t v13 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a5, v6);
      }
      else
      {
        quasar::corrective_reranking::Parse::Parse((std::string *)a5[1], v6);
        uint64_t v13 = v12 + 232;
        a5[1] = v12 + 232;
      }
      a5[1] = v13;
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)__p);
      uint64_t v6 = (quasar::corrective_reranking::Parse *)((char *)v6 + 232);
    }
    while (v6 != (quasar::corrective_reranking::Parse *)v7);
    return;
  }
  quasar::corrective_reranking::Parse::getIntent(*(quasar::corrective_reranking::Parse **)a2, (uint64_t)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p[0].__r_.__value_.__l.__size_ != 6)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_122:
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a5, *(void *)a2, *(void *)(a2 + 8), 0x34F72C234F72C235 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
      return;
    }
    BOOL v15 = *(_DWORD *)__p[0].__r_.__value_.__l.__data_ != 1701602660
       || *(_WORD *)(__p[0].__r_.__value_.__r.__words[0] + 4) != 25972;
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v15) {
      goto LABEL_122;
    }
  }
  else
  {
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) != 6) {
      goto LABEL_122;
    }
    if (LODWORD(__p[0].__r_.__value_.__l.__data_) != 1701602660 || WORD2(__p[0].__r_.__value_.__r.__words[0]) != 25972) {
      goto LABEL_122;
    }
  }
  quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)v6 + 88, a3, __p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
  }
  quasar::utf8::convertToLowerCaseOrEmpty((char *)v16, size, &__s1);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  quasar::corrective_reranking::CorrectiveReranker::extendTargetToSubsequentPunctuation((int **)v6, a1, a3, (uint64_t)__p);
  quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)&v63, a3, &v58);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v18 = &v58;
  }
  else {
    uint64_t v18 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = v58.__r_.__value_.__l.__size_;
  }
  quasar::utf8::convertToLowerCaseOrEmpty((char *)v18, v19, &v60);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  uint64_t v20 = *(quasar::corrective_reranking::Parse **)a2;
  if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3)) < 2) {
    goto LABEL_126;
  }
  char v53 = 0;
  unint64_t v21 = 1;
  do
  {
    quasar::corrective_reranking::Parse::Parse(&v58, (quasar::corrective_reranking::Parse *)((char *)v20 + 232 * v21));
    quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)&v59, a3, v55);
    if ((v55[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = v55;
    }
    else {
      int v22 = (std::string *)v55[0].__r_.__value_.__r.__words[0];
    }
    if ((v55[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v55[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v55[0].__r_.__value_.__l.__size_;
    }
    quasar::utf8::convertToLowerCaseOrEmpty((char *)v22, v23, &v57);
    if (SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55[0].__r_.__value_.__l.__data_);
    }
    quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)&v58, (uint64_t)v55);
    int v24 = SHIBYTE(v55[0].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) < 0)
    {
      if (v55[0].__r_.__value_.__l.__size_ != 6
        || (*(_DWORD *)v55[0].__r_.__value_.__l.__data_ == 1701602660
          ? (BOOL v26 = *(unsigned __int16 *)(v55[0].__r_.__value_.__r.__words[0] + 4) == 25972)
          : (BOOL v26 = 0),
            !v26))
      {
        operator delete(v55[0].__r_.__value_.__l.__data_);
        goto LABEL_113;
      }
    }
    else
    {
      if (SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) != 6) {
        goto LABEL_113;
      }
      if (LODWORD(v55[0].__r_.__value_.__l.__data_) != 1701602660
        || WORD2(v55[0].__r_.__value_.__r.__words[0]) != 25972)
      {
        goto LABEL_113;
      }
    }
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = __s1.__r_.__value_.__l.__size_;
    }
    std::string::size_type v28 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v28 = v57.__r_.__value_.__l.__size_;
    }
    if (v27 == v28)
    {
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = &v57;
      }
      else {
        uint64_t v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        BOOL v38 = memcmp(__s1.__r_.__value_.__l.__data_, v29, __s1.__r_.__value_.__l.__size_) == 0;
      }
      else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
      {
        uint64_t v30 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
        p_s1 = &__s1;
        do
        {
          int v33 = p_s1->__r_.__value_.__s.__data_[0];
          p_s1 = (std::string *)((char *)p_s1 + 1);
          int v32 = v33;
          int v35 = v29->__r_.__value_.__s.__data_[0];
          uint64_t v29 = (std::string *)((char *)v29 + 1);
          int v34 = v35;
          BOOL v37 = v30-- != 0;
          BOOL v38 = v32 == v34;
        }
        while (v32 == v34 && v37);
      }
      else
      {
        BOOL v38 = 1;
      }
    }
    else
    {
      BOOL v38 = 0;
    }
    if (v24 < 0)
    {
      operator delete(v55[0].__r_.__value_.__l.__data_);
      if (!v38) {
        goto LABEL_113;
      }
    }
    else if (!v38)
    {
      goto LABEL_113;
    }
    quasar::corrective_reranking::CorrectiveReranker::extendTargetToSubsequentPunctuation((int **)&v58, a1, a3, (uint64_t)v55);
    quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)&v56, a3, &v54);
    uint64_t v39 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v40 = v60.__r_.__value_.__l.__size_;
    }
    std::string::size_type v41 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    int v42 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v41 = v54.__r_.__value_.__l.__size_;
    }
    if (v40 != v41) {
      goto LABEL_109;
    }
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v43 = &v54;
    }
    else {
      long long v43 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    if ((*((unsigned char *)&v60.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v60.__r_.__value_.__l.__data_, v43, v60.__r_.__value_.__l.__size_)) {
        goto LABEL_109;
      }
    }
    else if (*((unsigned char *)&v60.__r_.__value_.__s + 23))
    {
      long long v44 = &v60;
      while (v44->__r_.__value_.__s.__data_[0] == v43->__r_.__value_.__s.__data_[0])
      {
        long long v44 = (std::string *)((char *)v44 + 1);
        long long v43 = (std::string *)((char *)v43 + 1);
        if (!--v39) {
          goto LABEL_119;
        }
      }
LABEL_109:
      int v45 = 4;
      char v46 = 1;
      if ((v42 & 0x80000000) == 0) {
        goto LABEL_111;
      }
LABEL_110:
      operator delete(v54.__r_.__value_.__l.__data_);
      goto LABEL_111;
    }
LABEL_119:
    char v46 = 0;
    int v45 = 0;
    if (v42 < 0) {
      goto LABEL_110;
    }
LABEL_111:
    quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)v55);
    if (v46)
    {
      char v53 = 1;
      goto LABEL_114;
    }
LABEL_113:
    int v45 = 0;
LABEL_114:
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v58);
    if (v45) {
      break;
    }
    ++v21;
    uint64_t v20 = *(quasar::corrective_reranking::Parse **)a2;
  }
  while (0x34F72C234F72C235 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) > v21);
  if (v53)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a5, *(void *)a2, *(void *)(a2 + 8), 0x34F72C234F72C235 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    goto LABEL_132;
  }
LABEL_126:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  long long v47 = (std::string *)std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a5, (const quasar::corrective_reranking::Parse *)__p);
  long long v48 = *(quasar::corrective_reranking::Parse **)a2;
  uint64_t v49 = *(void *)(a2 + 8);
  a5[1] = (uint64_t)v47;
  if ((unint64_t)(0x34F72C234F72C235 * ((v49 - (uint64_t)v48) >> 3)) >= 2)
  {
    unint64_t v50 = 1;
    uint64_t v51 = 232;
    do
    {
      long long v52 = (quasar::corrective_reranking::Parse *)((char *)v48 + v51);
      if ((unint64_t)v47 >= a5[2])
      {
        long long v47 = (std::string *)std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>(a5, v52);
      }
      else
      {
        quasar::corrective_reranking::Parse::Parse(v47, v52);
        long long v47 = (std::string *)((char *)v47 + 232);
        a5[1] = (uint64_t)v47;
      }
      a5[1] = (uint64_t)v47;
      ++v50;
      long long v48 = *(quasar::corrective_reranking::Parse **)a2;
      v51 += 232;
    }
    while (0x34F72C234F72C235 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) > v50);
  }
LABEL_132:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)__p);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_1B1F226A8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&STACK[0x240]);
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::correctPayloadCapitalization(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  uint64_t v9 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = (quasar::corrective_reranking::Parse *)(v9 + v11);
      if ((uint64_t)v12 >= *(int *)(a1 + 64))
      {
        unint64_t v18 = *(void *)(a6 + 8);
        if (v18 >= *(void *)(a6 + 16)) {
          goto LABEL_15;
        }
      }
      else
      {
        quasar::corrective_reranking::Parse::getIntent(v13, (uint64_t)__p);
        uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 152), (unsigned __int8 *)__p);
        BOOL v15 = v14;
        if (SBYTE7(v27) < 0)
        {
          operator delete(__p[0]);
          if (v15)
          {
LABEL_6:
            quasar::corrective_reranking::CorrectiveReranker::applyPayloadCapitalization(a1, v13, a3, *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72), (uint64_t)__p);
            unint64_t v16 = *(void *)(a6 + 8);
            if (v16 >= *(void *)(a6 + 16))
            {
              uint64_t v17 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse&>((uint64_t *)a6, (const quasar::corrective_reranking::Parse *)__p);
            }
            else
            {
              quasar::corrective_reranking::Parse::Parse(*(std::string **)(a6 + 8), (const quasar::corrective_reranking::Parse *)__p);
              uint64_t v17 = v16 + 232;
              *(void *)(a6 + 8) = v16 + 232;
            }
            *(void *)(a6 + 8) = v17;
            quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)__p);
            goto LABEL_17;
          }
        }
        else if (v14)
        {
          goto LABEL_6;
        }
        unint64_t v18 = *(void *)(a6 + 8);
        if (v18 >= *(void *)(a6 + 16))
        {
LABEL_15:
          uint64_t v19 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>((uint64_t *)a6, v13);
          goto LABEL_16;
        }
      }
      quasar::corrective_reranking::Parse::Parse(*(std::string **)(a6 + 8), v13);
      uint64_t v19 = v18 + 232;
      *(void *)(a6 + 8) = v18 + 232;
LABEL_16:
      *(void *)(a6 + 8) = v19;
LABEL_17:
      ++v12;
      uint64_t v9 = *a2;
      v11 += 232;
    }
    while (0x34F72C234F72C235 * ((a2[1] - *a2) >> 3) > v12);
  }
  if ((a4 & 1) != 0 && quasar::corrective_reranking::CorrectiveReranker::hasCasingConflictsWithTopParse(a1, a6, a3))
  {
    if (a5 && quasar::gLogLevel >= 5)
    {
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[Payload Capitalization Correction] Found top parse to have a different payload casing than in another parse. Lowercasing PARSE 0's payload.", 140);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    uint64_t v20 = *(std::string **)a6;
    if (*(void *)(a6 + 8) == *(void *)a6) {
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    }
    quasar::corrective_reranking::Parse::getPayload(*(quasar::corrective_reranking::Parse **)a6, &v25);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v21 = &v25;
    }
    else {
      unint64_t v21 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    quasar::utf8::convertToLowerCaseOrEmpty((char *)v21, size, (std::string *)__p);
    quasar::corrective_reranking::Parse::setPayload(v20, (const std::string *)__p);
    if (SBYTE7(v27) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B1F22A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void quasar::corrective_reranking::CorrectiveReranker::findTargetCandidates(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  quasar::corrective_reranking::tokenize(a2, &v46);
  quasar::corrective_reranking::detokenize(v44, a3);
  int v32 = ((*((void *)&v46 + 1) - (void)v46) >> 5) + 1431655765 * ((a3[1] - *a3) >> 3);
  if ((v32 & 0x80000000) == 0)
  {
    unsigned int v6 = 0;
    do
    {
      LOBYTE(v42.__begin_) = 0;
      char v43 = 0;
      memset(&__p, 0, sizeof(__p));
      if ((*(_DWORD *)(a1 + 48) & 0x80000000) == 0)
      {
        int v7 = 0;
        float v8 = INFINITY;
        do
        {
          quasar::pySlice<std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>>(&v46, v6, v7 + v6 - 1431655765 * ((a3[1] - *a3) >> 3), (uint64_t *)&v39);
          quasar::corrective_reranking::detokenize((long long **)&v39, &v38);
          float v9 = quasar::corrective_reranking::PhoneticMatcher::phoneticSimilarity(**(void **)(a1 + 104), (uint64_t)v44, (uint64_t)&v38);
          if (v9 < *(float *)(a1 + 52) && v9 < v8)
          {
            uint64_t v11 = v39;
            unint64_t v12 = v40;
            if (v39 != v40)
            {
              uint64_t v13 = 0;
              long long v35 = 0;
              long long v36 = 0;
              long long v37 = 0;
              do
              {
                if (v13 >= v37)
                {
                  uint64_t v14 = (v13 - (unsigned char *)v35) >> 3;
                  if ((unint64_t)(v14 + 1) >> 61) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v15 = (v37 - (unsigned char *)v35) >> 2;
                  if (v15 <= v14 + 1) {
                    unint64_t v15 = v14 + 1;
                  }
                  if ((unint64_t)(v37 - (unsigned char *)v35) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v16 = v15;
                  }
                  if (v16) {
                    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v37, v16);
                  }
                  else {
                    uint64_t v17 = 0;
                  }
                  unint64_t v18 = &v17[8 * v14];
                  *(void *)unint64_t v18 = v11[3];
                  uint64_t v13 = v18 + 8;
                  uint64_t v20 = (char *)v35;
                  uint64_t v19 = v36;
                  if (v36 != v35)
                  {
                    do
                    {
                      uint64_t v21 = *((void *)v19 - 1);
                      v19 -= 8;
                      *((void *)v18 - 1) = v21;
                      v18 -= 8;
                    }
                    while (v19 != v20);
                    uint64_t v19 = (char *)v35;
                  }
                  long long v35 = v18;
                  long long v36 = v13;
                  long long v37 = &v17[8 * v16];
                  if (v19) {
                    operator delete(v19);
                  }
                }
                else
                {
                  *(void *)uint64_t v13 = v11[3];
                  v13 += 8;
                }
                long long v36 = v13;
                v11 += 4;
              }
              while (v11 != v12);
              quasar::corrective_reranking::TargetRange::TargetRange(&v47, (uint64_t)&v35);
              std::optional<quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100]<quasar::corrective_reranking::TargetRange,void>(&v42, (__n128 *)&v47);
              if (v47.__r_.__value_.__r.__words[0])
              {
                v47.__r_.__value_.__l.__size_ = v47.__r_.__value_.__r.__words[0];
                operator delete(v47.__r_.__value_.__l.__data_);
              }
              quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)&v42, a2, &v47);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              std::string __p = v47;
              if (v35)
              {
                long long v36 = (char *)v35;
                operator delete(v35);
              }
              float v8 = v9;
            }
          }
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
        }
        while (v7++ < *(_DWORD *)(a1 + 48));
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        char v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (v43)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          if (size)
          {
            unint64_t v25 = a4[1];
            if (v25 >= a4[2])
            {
              uint64_t v26 = std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__emplace_back_slow_path<std::string&,quasar::corrective_reranking::TargetRange&>(a4, (long long *)&__p, (uint64_t)&v42);
              long long v27 = a4;
            }
            else
            {
              std::pair<std::string,quasar::corrective_reranking::TargetRange>::pair[abi:ne180100]<std::string&,quasar::corrective_reranking::TargetRange&,0>((std::string *)a4[1], (long long *)&__p, (uint64_t)&v42);
              uint64_t v26 = v25 + 48;
              long long v27 = a4;
              a4[1] = v25 + 48;
            }
            v27[1] = v26;
            char v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
        }
        if (v24 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v43 && v42.__begin_)
        {
          v42.__end_ = v42.__begin_;
          operator delete(v42.__begin_);
        }
      }
    }
    while (v6++ != v32);
  }
  v42.__end_ = 0;
  v42.__end_cap_.__value_ = 0;
  v42.__begin_ = (std::vector<int>::pointer)&v42.__end_;
  long long v30 = (const void **)*a4;
  long long v29 = (const void **)a4[1];
  while (v30 != v29)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v42, v30, (uint64_t)v30);
    v30 += 6;
  }
  uint64_t v31 = *(void *)(a1 + 80);
  if (v31 != *(void *)(a1 + 88)) {
    quasar::corrective_reranking::findTextMatches(v31, &__p);
  }
  std::__tree<std::string>::destroy((uint64_t)&v42, (char *)v42.__end_);
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  v42.__begin_ = (std::vector<int>::pointer)&v46;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
}

void sub_1B1F23018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  a33 = (void *)(v42 - 160);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = a11;
  std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

void std::vector<quasar::corrective_reranking::Parse>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x34F72C234F72C235 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<quasar::corrective_reranking::Parse>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 232 * a2;
    while (v3 != v7)
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v3 - 232));
    a1[1] = v7;
  }
}

void quasar::corrective_reranking::CorrectiveReranker::applyPayloadCapitalization(uint64_t a1@<X0>, const quasar::corrective_reranking::Parse *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  quasar::corrective_reranking::Parse::Parse((std::string *)a6, a2);
  uint64_t v12 = quasar::corrective_reranking::TextEdit::TextEdit((quasar::corrective_reranking::TextEdit *)v95, (const quasar::corrective_reranking::Parse *)a6);
  quasar::corrective_reranking::TextEdit::onText(v12, a3, 1, (uint64_t)v93);
  quasar::corrective_reranking::TransformerClassifier::classifyCapitalization(*(unsigned int **)(*(void *)(a1 + 104) + 24), (uint64_t)v93, &v91);
  if (quasar::corrective_reranking::Parse::isPayloadExpectingCommand(a2))
  {
    quasar::corrective_reranking::Parse::getPayload(a2, (std::string *)&__p);
    if (SHIBYTE(__p.__end_) >= 0) {
      std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__p.__end_);
    }
    else {
      std::__split_buffer<std::string>::pointer end_high = __p.__begin_;
    }
    if (SHIBYTE(__p.__end_) < 0)
    {
      operator delete(__p.__first_);
      if (!end_high) {
        goto LABEL_73;
      }
    }
    else if (!end_high)
    {
      goto LABEL_73;
    }
    quasar::corrective_reranking::TextEdit::adjustedTargetRange(v95, a3, (int **)&v82);
    if (v82.__r_.__value_.__r.__words[0] == v82.__r_.__value_.__l.__size_) {
      float v14 = 0.0;
    }
    else {
      float v14 = (float)*(int *)v82.__r_.__value_.__l.__data_;
    }
    quasar::corrective_reranking::Parse::getIntent(a2, (uint64_t)&__p);
    int v15 = (int)v14;
    char v16 = HIBYTE(__p.__end_);
    if (SHIBYTE(__p.__end_) < 0)
    {
      if (__p.__begin_ != (std::__split_buffer<std::string>::pointer)11) {
        goto LABEL_26;
      }
      std::__split_buffer<std::string>::pointer first = __p.__first_;
    }
    else
    {
      if (SHIBYTE(__p.__end_) != 11) {
        goto LABEL_27;
      }
      std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)&__p;
    }
    std::string::size_type v18 = first->__r_.__value_.__r.__words[0];
    uint64_t v19 = *(std::string::size_type *)((char *)first->__r_.__value_.__r.__words + 3);
    if (v18 == 0x6661747265736E69 && v19 == 0x7265746661747265)
    {
      quasar::corrective_reranking::Parse::getPayload(a2, &v90);
      v15 += quasar::corrective_reranking::isPunctuation((char *)&v90) ^ 1;
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      char v16 = HIBYTE(__p.__end_);
    }
    if ((v16 & 0x80) == 0)
    {
LABEL_27:
      memset(&v90, 0, sizeof(v90));
      quasar::corrective_reranking::Parse::getPayload(a2, &__str);
      quasar::corrective_reranking::tokenize((uint64_t)&__str, (long long *)&__p);
      quasar::corrective_reranking::getTokens((long long **)&__p, (uint64_t *)&v89);
      v87.__begin_ = (std::vector<std::string>::pointer)&__p;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v21 = v91;
      for (uint64_t i = v92; v21 != i; v21 += 64)
      {
        unint64_t v23 = *(int *)(v21 + 48);
        if (v15 <= (int)v23)
        {
          quasar::corrective_reranking::Parse::getPayload(a2, (std::string *)&__p);
          if (SHIBYTE(__p.__end_) >= 0) {
            std::__split_buffer<std::string>::pointer begin = (std::__split_buffer<std::string>::pointer)HIBYTE(__p.__end_);
          }
          else {
            std::__split_buffer<std::string>::pointer begin = __p.__begin_;
          }
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          if ((unint64_t)begin + v15 > v23)
          {
            unint64_t v25 = (uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 6;
            if (v25 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v89 + 1) - v89) >> 3))
            {
              std::string::basic_string[abi:ne180100]<0>(&__str, "");
            }
            else
            {
              uint64_t v26 = (long long *)(v89 + 24 * v25);
              if (*((char *)v26 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v26, *((void *)v26 + 1));
              }
              else
              {
                long long v27 = *v26;
                __str.__r_.__value_.__r.__words[2] = *((void *)v26 + 2);
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v27;
              }
            }
            if (quasar::corrective_reranking::classifyCasing((uint64_t)&__str) == 3)
            {
              quasar::corrective_reranking::TokenClassification::TokenClassification((quasar::corrective_reranking::TokenClassification *)&__p);
              std::string::operator=((std::string *)&__p, &__str);
              int v85 = 3;
              std::string::size_type size = v90.__r_.__value_.__l.__size_;
              if (v90.__r_.__value_.__l.__size_ >= v90.__r_.__value_.__r.__words[2])
              {
                std::string::size_type v29 = std::vector<quasar::corrective_reranking::TokenClassification>::__emplace_back_slow_path<quasar::corrective_reranking::TokenClassification&>((uint64_t *)&v90, (long long *)&__p);
              }
              else
              {
                std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification&>((int)&v90.__r_.__value_.__r.__words[2], (std::string *)v90.__r_.__value_.__l.__size_, (long long *)&__p);
                std::string::size_type v29 = size + 64;
              }
              v90.__r_.__value_.__l.__size_ = v29;
              if (__p.__end_cap_.__value_)
              {
                __p.__end_cap_.__value_ = (std::allocator<std::string> *)__p.__end_cap_.__value_;
                operator delete(__p.__end_cap_.__value_);
              }
              if (SHIBYTE(__p.__end_) < 0) {
                operator delete(__p.__first_);
              }
            }
            else
            {
              std::string::size_type v30 = v90.__r_.__value_.__l.__size_;
              if (v90.__r_.__value_.__l.__size_ >= v90.__r_.__value_.__r.__words[2])
              {
                std::string::size_type v31 = std::vector<quasar::corrective_reranking::TokenClassification>::__emplace_back_slow_path<quasar::corrective_reranking::TokenClassification const&>((uint64_t *)&v90, (long long *)v21);
              }
              else
              {
                std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification const&>((int)&v90.__r_.__value_.__r.__words[2], (std::string *)v90.__r_.__value_.__l.__size_, (long long *)v21);
                std::string::size_type v31 = v30 + 64;
              }
              v90.__r_.__value_.__l.__size_ = v31;
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      memset(&__str, 0, sizeof(__str));
      std::string::size_type v32 = v90.__r_.__value_.__l.__size_;
      for (uint64_t j = v90.__r_.__value_.__r.__words[0]; j != v32; j += 64)
      {
        quasar::corrective_reranking::tokenCasingApply(*(_DWORD *)(j + 56), j, (std::string *)&v87);
        long long v34 = (_OWORD *)__str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
        {
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3);
          unint64_t v37 = v36 + 1;
          if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556
             * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3) > v37)
            unint64_t v37 = 0x5555555555555556
                * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
          else {
            unint64_t v38 = v37;
          }
          __p.__end_cap_.__value_ = (std::allocator<std::string> *)&__str.__r_.__value_.__r.__words[2];
          if (v38) {
            long long v39 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v38);
          }
          else {
            long long v39 = 0;
          }
          long long v40 = v39 + v36;
          __p.__first_ = v39;
          __p.__begin_ = v40;
          __p.__end_cap_.__value_ = &v39[v38];
          long long v41 = *(_OWORD *)&v87.__begin_;
          v40->__r_.__value_.__r.__words[2] = (std::string::size_type)v87.__end_cap_.__value_;
          *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
          memset(&v87, 0, sizeof(v87));
          __p.__end_ = v40 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&__str, &__p);
          std::string::size_type v42 = __str.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__p);
          __str.__r_.__value_.__l.__size_ = v42;
          if (SHIBYTE(v87.__end_cap_.__value_) < 0) {
            operator delete(v87.__begin_);
          }
        }
        else
        {
          long long v35 = *(_OWORD *)&v87.__begin_;
          *(void *)(__str.__r_.__value_.__l.__size_ + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v87.__end_cap_.__value_;
          *long long v34 = v35;
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)v34 + 24;
        }
      }
      quasar::corrective_reranking::detokenize(&__p, &__str);
      quasar::corrective_reranking::Parse::getPayload(a2, &v86);
      quasar::corrective_reranking::transferLetterCasing();
    }
LABEL_26:
    operator delete(__p.__first_);
    goto LABEL_27;
  }
LABEL_73:
  if (a4 >= 1)
  {
    if (!*(unsigned char *)(a6 + 112))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"newParse.targetRange", 20);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    memset(&v90, 0, sizeof(v90));
    uint64_t v43 = v91;
    for (uint64_t k = v92; v43 != k; v43 += 64)
    {
      if (*(char *)(v43 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)v43, *(void *)(v43 + 8));
      }
      else
      {
        long long v45 = *(_OWORD *)v43;
        v82.__r_.__value_.__r.__words[2] = *(void *)(v43 + 16);
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v45;
      }
      uint64_t v83 = *(void *)(v43 + 48);
      std::string::size_type v46 = v90.__r_.__value_.__l.__size_;
      if (v90.__r_.__value_.__l.__size_ >= v90.__r_.__value_.__r.__words[2])
      {
        uint64_t v48 = (uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 5;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        int64_t v50 = v90.__r_.__value_.__r.__words[2] - v90.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v90.__r_.__value_.__r.__words[2] - v90.__r_.__value_.__r.__words[0]) >> 4 > v49) {
          unint64_t v49 = v50 >> 4;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v51 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v90.__r_.__value_.__r.__words[2];
        long long v52 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v90.__r_.__value_.__r.__words[2], v51);
        char v53 = (char *)v52 + 32 * v48;
        __p.__first_ = v52;
        __p.__begin_ = (std::__split_buffer<std::string>::pointer)v53;
        __p.__end_cap_.__value_ = (std::string *)((char *)v52 + 32 * v54);
        long long v55 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
        *((void *)v53 + 2) = *((void *)&v82.__r_.__value_.__l + 2);
        *(_OWORD *)char v53 = v55;
        memset(&v82, 0, sizeof(v82));
        *((void *)v53 + 3) = v83;
        __p.__end_ = (std::__split_buffer<std::string>::pointer)(v53 + 32);
        std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer((uint64_t *)&v90, &__p);
        std::string::size_type v56 = v90.__r_.__value_.__l.__size_;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&__p);
        v90.__r_.__value_.__l.__size_ = v56;
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v47 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
        *(void *)(v90.__r_.__value_.__l.__size_ + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *((void *)&v82.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v46 = v47;
        memset(&v82, 0, sizeof(v82));
        *(void *)(v46 + 24) = v83;
        v90.__r_.__value_.__l.__size_ = v46 + 32;
      }
    }
    quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)a6, (uint64_t)&__p);
    quasar::corrective_reranking::Parse::getPayload((quasar::corrective_reranking::Parse *)a6, &__str);
    quasar::corrective_reranking::tokenize((uint64_t)&__str, &v89);
    quasar::corrective_reranking::getTokens((long long **)&v89, (uint64_t *)&v82);
    unint64_t AdjacentWordsToTarget = quasar::corrective_reranking::findAdjacentWordsToTarget((uint64_t)&__p, a6 + 88, &v82, (uint64_t *)&v90, a5);
    uint64_t v59 = v58;
    v87.__begin_ = &v82;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
    v87.__begin_ = (std::vector<std::string>::pointer)&v89;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
    quasar::pySlice<std::vector<quasar::corrective_reranking::TokenClassification>>(&v91, AdjacentWordsToTarget, HIDWORD(AdjacentWordsToTarget), (uint64_t *)&v82);
    quasar::pySlice<std::vector<quasar::corrective_reranking::TokenClassification>>(&v91, v59, HIDWORD(v59), (uint64_t *)&v89);
    memset(&__str, 0, sizeof(__str));
    std::string::size_type v61 = v82.__r_.__value_.__l.__size_;
    for (uint64_t m = v82.__r_.__value_.__r.__words[0]; m != v61; m += 64)
    {
      quasar::corrective_reranking::tokenCasingApply(*(_DWORD *)(m + 56), m, (std::string *)&v87);
      long long v62 = (_OWORD *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
      {
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v65 = v64 + 1;
        if (v64 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556
           * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3) > v65)
          unint64_t v65 = 0x5555555555555556
              * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          unint64_t v66 = 0xAAAAAAAAAAAAAAALL;
        else {
          unint64_t v66 = v65;
        }
        __p.__end_cap_.__value_ = (std::allocator<std::string> *)&__str.__r_.__value_.__r.__words[2];
        if (v66) {
          long long v67 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v66);
        }
        else {
          long long v67 = 0;
        }
        long long v68 = v67 + v64;
        __p.__first_ = v67;
        __p.__begin_ = v68;
        __p.__end_cap_.__value_ = &v67[v66];
        long long v69 = *(_OWORD *)&v87.__begin_;
        v68->__r_.__value_.__r.__words[2] = (std::string::size_type)v87.__end_cap_.__value_;
        *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
        memset(&v87, 0, sizeof(v87));
        __p.__end_ = v68 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&__str, &__p);
        std::string::size_type v70 = __str.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__p);
        __str.__r_.__value_.__l.__size_ = v70;
        if (SHIBYTE(v87.__end_cap_.__value_) < 0) {
          operator delete(v87.__begin_);
        }
      }
      else
      {
        long long v63 = *(_OWORD *)&v87.__begin_;
        *(void *)(__str.__r_.__value_.__l.__size_ + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v87.__end_cap_.__value_;
        _OWORD *v62 = v63;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v62 + 24;
      }
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a6 + 184));
    *(std::string *)(a6 + 184) = __str;
    memset(&__str, 0, sizeof(__str));
    memset(&v87, 0, sizeof(v87));
    uint64_t v72 = *((void *)&v89 + 1);
    for (uint64_t n = v89; n != v72; n += 64)
    {
      quasar::corrective_reranking::tokenCasingApply(*(_DWORD *)(n + 56), n, &v86);
      std::vector<std::string>::pointer end = v87.__end_;
      if (v87.__end_ >= v87.__end_cap_.__value_)
      {
        unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
        unint64_t v76 = v75 + 1;
        if (v75 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v76) {
          unint64_t v76 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v77 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v77 = v76;
        }
        __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
        if (v77) {
          long long v78 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v87.__end_cap_, v77);
        }
        else {
          long long v78 = 0;
        }
        long long v79 = v78 + v75;
        __p.__first_ = v78;
        __p.__begin_ = v79;
        __p.__end_cap_.__value_ = &v78[v77];
        long long v80 = *(_OWORD *)&v86.__r_.__value_.__l.__data_;
        v79->__r_.__value_.__r.__words[2] = v86.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v80;
        memset(&v86, 0, sizeof(v86));
        __p.__end_ = v79 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v87, &__p);
        std::string v81 = v87.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__p);
        v87.__end_ = v81;
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v74 = *(_OWORD *)&v86.__r_.__value_.__l.__data_;
        v87.__end_->__r_.__value_.__r.__words[2] = v86.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v74;
        v87.__end_ = end + 1;
      }
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a6 + 208));
    *(std::vector<std::string> *)(a6 + 208) = v87;
    memset(&v87, 0, sizeof(v87));
    __p.__first_ = (std::__split_buffer<std::string>::pointer)&v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p.__first_ = &__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p.__first_ = (std::__split_buffer<std::string>::pointer)&v89;
    std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p.__first_ = &v82;
    std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p.__first_ = &v90;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v91;
  std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v102;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v101 < 0) {
    operator delete(v100);
  }
  if (v99 && v97)
  {
    int v98 = v97;
    operator delete(v97);
  }
  if (v96 < 0) {
    operator delete(v95[0]);
  }
}

BOOL quasar::corrective_reranking::CorrectiveReranker::hasCasingConflictsWithTopParse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(quasar::corrective_reranking::Parse **)a2;
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    BOOL result = quasar::corrective_reranking::Parse::isPayloadExpectingCommand(*(quasar::corrective_reranking::Parse **)a2);
    if (!result) {
      return result;
    }
    float v8 = *(quasar::corrective_reranking::Parse **)a2;
    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3)) >= 2)
    {
      unint64_t v9 = 1;
      while (1)
      {
        quasar::corrective_reranking::Parse::Parse(&v60, (quasar::corrective_reranking::Parse *)((char *)v8 + 232 * v9));
        BOOL isPayloadExpectingCommand = quasar::corrective_reranking::Parse::isPayloadExpectingCommand((quasar::corrective_reranking::Parse *)&v60);
        if (v61[24]) {
          BOOL v11 = isPayloadExpectingCommand;
        }
        else {
          BOOL v11 = 0;
        }
        if (!v11 || !*((unsigned char *)v3 + 112))
        {
          quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v60);
          goto LABEL_107;
        }
        quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)v61, a3, &v59);
        quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)v3 + 88, a3, &v58);
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v12 = &v59;
        }
        else {
          uint64_t v12 = (std::string *)v59.__r_.__value_.__r.__words[0];
        }
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v59.__r_.__value_.__l.__size_;
        }
        quasar::utf8::convertToLowerCaseOrEmpty((char *)v12, size, __s1);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v14 = &v58;
        }
        else {
          float v14 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v15 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v15 = v58.__r_.__value_.__l.__size_;
        }
        quasar::utf8::convertToLowerCaseOrEmpty((char *)v14, v15, &__p);
        uint64_t v16 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]);
        if ((__s1[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v17 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v17 = __s1[0].__r_.__value_.__l.__size_;
        }
        std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        char v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
        }
        if (v17 != v18) {
          goto LABEL_39;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&__s1[0].__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(__s1[0].__r_.__value_.__l.__data_, p_p, __s1[0].__r_.__value_.__l.__size_)) {
            goto LABEL_39;
          }
        }
        else if (*((unsigned char *)&__s1[0].__r_.__value_.__s + 23))
        {
          uint64_t v21 = __s1;
          while (v21->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
          {
            uint64_t v21 = (std::string *)((char *)v21 + 1);
            p_p = (std::string *)((char *)p_p + 1);
            if (!--v16) {
              goto LABEL_68;
            }
          }
LABEL_39:
          BOOL v22 = 0;
          if ((v19 & 0x80) == 0) {
            goto LABEL_41;
          }
LABEL_40:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_41;
        }
LABEL_68:
        quasar::corrective_reranking::Parse::getPayload(v3, &v55);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v36 = &v55;
        }
        else {
          unint64_t v36 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v37 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v37 = v55.__r_.__value_.__l.__size_;
        }
        quasar::utf8::convertToLowerCaseOrEmpty((char *)v36, v37, &v56);
        quasar::corrective_reranking::Parse::getPayload((quasar::corrective_reranking::Parse *)&v60, &v53);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v38 = &v53;
        }
        else {
          unint64_t v38 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v39 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v39 = v53.__r_.__value_.__l.__size_;
        }
        quasar::utf8::convertToLowerCaseOrEmpty((char *)v38, v39, &v54);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v40 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v40 = v56.__r_.__value_.__l.__size_;
        }
        std::string::size_type v41 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        int v42 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v41 = v54.__r_.__value_.__l.__size_;
        }
        if (v40 != v41)
        {
          BOOL v22 = 0;
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_117;
          }
LABEL_110:
          operator delete(v54.__r_.__value_.__l.__data_);
          goto LABEL_117;
        }
        uint64_t v43 = (v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v54
            : (std::string *)v54.__r_.__value_.__r.__words[0];
        if ((*((unsigned char *)&v56.__r_.__value_.__s + 23) & 0x80) != 0) {
          break;
        }
        if (*((unsigned char *)&v56.__r_.__value_.__s + 23))
        {
          uint64_t v44 = HIBYTE(v56.__r_.__value_.__r.__words[2]) - 1;
          long long v45 = &v56;
          do
          {
            int v47 = v45->__r_.__value_.__s.__data_[0];
            long long v45 = (std::string *)((char *)v45 + 1);
            int v46 = v47;
            int v49 = v43->__r_.__value_.__s.__data_[0];
            uint64_t v43 = (std::string *)((char *)v43 + 1);
            int v48 = v49;
            BOOL v51 = v44-- != 0;
            BOOL v22 = v46 == v48;
          }
          while (v46 == v48 && v51);
LABEL_116:
          if (v42 < 0) {
            goto LABEL_110;
          }
          goto LABEL_117;
        }
        BOOL v22 = 1;
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_110;
        }
LABEL_117:
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_40;
        }
LABEL_41:
        if (SHIBYTE(__s1[0].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__s1[0].__r_.__value_.__l.__data_);
          if (!v22) {
            goto LABEL_101;
          }
        }
        else if (!v22)
        {
          goto LABEL_101;
        }
        if ((uint64_t)v9 >= *(int *)(a1 + 64))
        {
          quasar::corrective_reranking::CorrectiveReranker::applyPayloadCapitalization(a1, (const quasar::corrective_reranking::Parse *)&v60, a3, 0, 0, (uint64_t)__s1);
          quasar::corrective_reranking::Parse::operator=((uint64_t)&v60, (long long *)__s1);
          quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)__s1);
        }
        quasar::corrective_reranking::Parse::getPayload(v3, __s1);
        quasar::corrective_reranking::Parse::getPayload((quasar::corrective_reranking::Parse *)&v60, &__p);
        char v23 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]);
        if ((__s1[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v24 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v24 = __s1[0].__r_.__value_.__l.__size_;
        }
        std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        int v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
        }
        if (v24 == v25)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v27 = &__p;
          }
          else {
            long long v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (SHIBYTE(__s1[0].__r_.__value_.__r.__words[2]) < 0)
          {
            BOOL v33 = memcmp(__s1[0].__r_.__value_.__l.__data_, v27, __s1[0].__r_.__value_.__l.__size_) != 0;
            if ((v26 & 0x80000000) == 0) {
              goto LABEL_65;
            }
          }
          else if (*((unsigned char *)&__s1[0].__r_.__value_.__s + 23))
          {
            uint64_t v28 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]) - 1;
            std::string::size_type v29 = __s1;
            do
            {
              int v31 = v29->__r_.__value_.__s.__data_[0];
              std::string::size_type v29 = (std::string *)((char *)v29 + 1);
              int v30 = v31;
              int v32 = v27->__r_.__value_.__s.__data_[0];
              long long v27 = (std::string *)((char *)v27 + 1);
              BOOL v33 = v30 != v32;
            }
            while (v30 == v32 && v28-- != 0);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_65:
              if ((v23 & 0x80) == 0) {
                goto LABEL_66;
              }
              goto LABEL_100;
            }
          }
          else
          {
            BOOL v33 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_65;
            }
          }
        }
        else
        {
          BOOL v33 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_65;
          }
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((*((unsigned char *)&__s1[0].__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_66:
          if (v33) {
            goto LABEL_67;
          }
          goto LABEL_101;
        }
LABEL_100:
        operator delete(__s1[0].__r_.__value_.__l.__data_);
        if (v33)
        {
LABEL_67:
          int v35 = 0;
          goto LABEL_102;
        }
LABEL_101:
        int v35 = 1;
LABEL_102:
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v60);
        if (!v35) {
          return 1;
        }
LABEL_107:
        ++v9;
        float v8 = *(quasar::corrective_reranking::Parse **)a2;
        if (0x34F72C234F72C235 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) <= v9) {
          return 0;
        }
      }
      BOOL v22 = memcmp(v56.__r_.__value_.__l.__data_, v43, v56.__r_.__value_.__l.__size_) == 0;
      goto LABEL_116;
    }
  }
  return 0;
}

void sub_1B1F2453C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&a67);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::CorrectiveReranker::featurizeParses(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x2_t *a6)
{
  kaldi::Matrix<float>::Resize(a6, 1332920885 * ((unint64_t)(a2[1] - *a2) >> 3), (a1[30] - a1[29]) >> 3, 1, 0);
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  if (v12 != *a2)
  {
    unint64_t v14 = 0;
    uint64_t v15 = a1[29];
    uint64_t v16 = a1[30];
    do
    {
      if (v16 == v15)
      {
        uint64_t v16 = v15;
      }
      else
      {
        unint64_t v17 = 0;
        do
        {
          uint64_t v18 = *(void *)(v15 + 8 * v17);
          uint64_t v19 = *a2 + 232 * v14;
          uint64_t v20 = a1[13];
          v21[0] = a2;
          v21[1] = v19;
          v21[2] = v20;
          void v21[3] = a3;
          int v21[4] = a4;
          void v21[5] = a5;
          *(float *)(*(void *)a6 + 4 * (int)v14 * a6[2].i32[0] + 4 * v17++) = (*(float (**)(uint64_t, void *))(*(void *)v18 + 16))(v18, v21);
          uint64_t v15 = a1[29];
          uint64_t v16 = a1[30];
        }
        while (v17 < (v16 - v15) >> 3);
        uint64_t v13 = *a2;
        uint64_t v12 = a2[1];
      }
      ++v14;
    }
    while (0x34F72C234F72C235 * ((v12 - v13) >> 3) > v14);
  }
}

void quasar::corrective_reranking::CorrectiveReranker::applyOverridePhrases(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W3>, std::string::size_type a4@<X8>)
{
  v86[0] = *MEMORY[0x1E4F143B8];
  unint64_t v80 = 0;
  long long v5 = 0uLL;
  long long v79 = 0u;
  uint64_t v6 = *a2;
  uint64_t v48 = a2[1];
  if (*a2 == v48)
  {
    unint64_t v47 = 0;
LABEL_105:
    *(_OWORD *)a4 = v5;
    *(void *)(a4 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v47;
    unint64_t v80 = 0;
    long long v79 = 0uLL;
    goto LABEL_106;
  }
  uint64_t v8 = a1;
  unint64_t v9 = (void *)(a1 + 112);
  uint64_t v49 = a4 + 16;
  while (2)
  {
    quasar::corrective_reranking::detokenize((long long **)(v6 + 32), __p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = __p;
    }
    else {
      unint64_t v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
    }
    quasar::utf8::convertToLowerCaseOrEmpty((char *)v10, size, &v78);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v12 = v8;
    quasar::corrective_reranking::OverridesDictionary::findPhraseOverride(*(void *)(*(void *)(v8 + 104) + 56), (uint64_t)&v78, a3, &v77);
    uint64_t v13 = (uint64_t *)*((void *)&v77 + 1);
    for (uint64_t i = (uint64_t *)v77; i != v13; i += 4)
    {
      if (!*((unsigned char *)i + 24)) {
        continue;
      }
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      char v76 = 0;
      int v15 = *((unsigned __int8 *)i + 23);
      if (*((char *)i + 23) < 0)
      {
        if (i[1] != 9) {
          goto LABEL_29;
        }
        uint64_t v16 = (uint64_t *)*i;
      }
      else
      {
        uint64_t v16 = i;
        if (v15 != 9) {
          goto LABEL_24;
        }
      }
      uint64_t v17 = *v16;
      int v18 = *((unsigned __int8 *)v16 + 8);
      if (v17 == 0x6C416574656C6564 && v18 == 108)
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "deleteAll");
        uint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, (unsigned __int8 *)&v85);
        BOOL v22 = v21;
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v85.__r_.__value_.__l.__data_);
          if (!v22)
          {
LABEL_52:
            std::string::basic_string[abi:ne180100]<0>(&v72, "delete");
            int v34 = *(_DWORD *)(v6 + 24);
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v73, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
            }
            else {
              std::string v73 = v72;
            }
            int v74 = v34;
            std::string::basic_string[abi:ne180100]<0>(v83, "delete");
            long long v69 = 0;
            std::string::size_type v70 = 0;
            long long v71 = 0;
            *(void *)&long long v66 = &v69;
            BYTE8(v66) = 0;
            long long v69 = (std::string *)operator new(0x18uLL);
            std::string::size_type v70 = v69;
            long long v71 = v69 + 1;
            std::string::size_type v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v71, (long long *)v83, (long long *)&v85, v69);
            float v37 = *(float *)(v6 + 80);
            std::string::size_type v61 = 0;
            long long v62 = 0;
            long long v63 = 0;
            quasar::corrective_reranking::TargetRange::TargetRange(v64, (uint64_t)&v61);
            long long v66 = *(_OWORD *)v64;
            uint64_t v67 = v65;
            v64[1] = 0;
            uint64_t v65 = 0;
            v64[0] = 0;
            char v68 = 1;
            std::string::basic_string[abi:ne180100]<0>(v59, "");
            std::string v56 = 0;
            std::string v57 = 0;
            uint64_t v58 = 0;
            std::string v53 = 0;
            uint64_t v54 = 0;
            uint64_t v55 = 0;
            int64_t v50 = 0;
            uint64_t v51 = 0;
            uint64_t v52 = 0;
            quasar::corrective_reranking::Parse::Parse(&v85, (uint64_t)&v73, (long long **)&v69, (uint64_t)&v66, (long long *)v59, (uint64_t)&v56, 1, &v53, v37, 0.0, (long long **)&v50);
            std::optional<quasar::corrective_reranking::Parse>::operator=[abi:ne180100]<quasar::corrective_reranking::Parse,void>((uint64_t)__p, (long long *)&v85);
            goto LABEL_66;
          }
        }
        else if (!v21)
        {
          goto LABEL_52;
        }
        int v15 = *((unsigned __int8 *)i + 23);
        if ((v15 & 0x80) != 0)
        {
LABEL_29:
          if (i[1] != 9) {
            goto LABEL_41;
          }
          uint64_t v20 = (uint64_t *)*i;
          goto LABEL_31;
        }
      }
      else if ((v15 & 0x80) != 0)
      {
        goto LABEL_29;
      }
LABEL_24:
      if (v15 != 9) {
        goto LABEL_36;
      }
      uint64_t v20 = i;
LABEL_31:
      uint64_t v23 = *v20;
      int v24 = *((unsigned __int8 *)v20 + 8);
      if (v23 != 0x6C417463656C6573 || v24 != 108)
      {
        if ((v15 & 0x80) == 0)
        {
LABEL_36:
          int v26 = i;
          if (v15 != 16) {
            goto LABEL_83;
          }
LABEL_43:
          uint64_t v29 = *v26;
          uint64_t v30 = v26[1];
          if (v29 != 0x61546574656C6564 || v30 != 0x7373656C74656772) {
            goto LABEL_83;
          }
          std::string::basic_string[abi:ne180100]<0>(&v85, "deleteTargetless");
          int v32 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, (unsigned __int8 *)&v85);
          BOOL v33 = v32;
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v85.__r_.__value_.__l.__data_);
            if (v33) {
              goto LABEL_83;
            }
          }
          else if (v32)
          {
            goto LABEL_83;
          }
          std::string::basic_string[abi:ne180100]<0>(&v72, "delete");
          int v36 = *(_DWORD *)(v6 + 24);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v73, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
          }
          else {
            std::string v73 = v72;
          }
          int v74 = v36;
          std::string::basic_string[abi:ne180100]<0>(v83, "deleteTargetless");
          long long v69 = 0;
          std::string::size_type v70 = 0;
          long long v71 = 0;
          *(void *)&long long v66 = &v69;
          BYTE8(v66) = 0;
          long long v69 = (std::string *)operator new(0x18uLL);
          std::string::size_type v70 = v69;
          long long v71 = v69 + 1;
          std::string::size_type v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v71, (long long *)v83, (long long *)&v85, v69);
          float v39 = *(float *)(v6 + 80);
          quasar::SystemConfig::Version::Version(&v82, 0, 0);
          std::string::size_type v40 = operator new(8uLL);
          std::string::size_type v61 = v40;
          *std::string::size_type v40 = v82;
          long long v62 = v40 + 1;
          long long v63 = v40 + 1;
          quasar::corrective_reranking::TargetRange::TargetRange(v64, (uint64_t)&v61);
          long long v66 = *(_OWORD *)v64;
          uint64_t v67 = v65;
          v64[1] = 0;
          uint64_t v65 = 0;
          v64[0] = 0;
          char v68 = 1;
          std::string::basic_string[abi:ne180100]<0>(v59, "");
          std::string v56 = 0;
          std::string v57 = 0;
          uint64_t v58 = 0;
          std::string v53 = 0;
          uint64_t v54 = 0;
          uint64_t v55 = 0;
          int64_t v50 = 0;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          quasar::corrective_reranking::Parse::Parse(&v85, (uint64_t)&v73, (long long **)&v69, (uint64_t)&v66, (long long *)v59, (uint64_t)&v56, 1, &v53, v39, 0.0, (long long **)&v50);
          std::optional<quasar::corrective_reranking::Parse>::operator=[abi:ne180100]<quasar::corrective_reranking::Parse,void>((uint64_t)__p, (long long *)&v85);
          goto LABEL_66;
        }
LABEL_41:
        if (i[1] != 16) {
          goto LABEL_83;
        }
        int v26 = (uint64_t *)*i;
        goto LABEL_43;
      }
      std::string::basic_string[abi:ne180100]<0>(&v85, "selectAll");
      long long v27 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v9, (unsigned __int8 *)&v85);
      uint64_t v28 = v27;
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v85.__r_.__value_.__l.__data_);
        if (v28)
        {
LABEL_40:
          int v15 = *((unsigned __int8 *)i + 23);
          if ((v15 & 0x80) == 0) {
            goto LABEL_36;
          }
          goto LABEL_41;
        }
      }
      else if (v27)
      {
        goto LABEL_40;
      }
      std::string::basic_string[abi:ne180100]<0>(&v72, "select");
      int v35 = *(_DWORD *)(v6 + 24);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v73, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
      }
      else {
        std::string v73 = v72;
      }
      int v74 = v35;
      std::string::basic_string[abi:ne180100]<0>(v83, "select");
      long long v69 = 0;
      std::string::size_type v70 = 0;
      long long v71 = 0;
      *(void *)&long long v66 = &v69;
      BYTE8(v66) = 0;
      long long v69 = (std::string *)operator new(0x18uLL);
      std::string::size_type v70 = v69;
      long long v71 = v69 + 1;
      std::string::size_type v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v71, (long long *)v83, (long long *)&v85, v69);
      float v38 = *(float *)(v6 + 80);
      std::string::size_type v61 = 0;
      long long v62 = 0;
      long long v63 = 0;
      quasar::corrective_reranking::TargetRange::TargetRange(v64, (uint64_t)&v61);
      long long v66 = *(_OWORD *)v64;
      uint64_t v67 = v65;
      v64[1] = 0;
      uint64_t v65 = 0;
      v64[0] = 0;
      char v68 = 1;
      std::string::basic_string[abi:ne180100]<0>(v59, "");
      std::string v56 = 0;
      std::string v57 = 0;
      uint64_t v58 = 0;
      std::string v53 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      int64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      quasar::corrective_reranking::Parse::Parse(&v85, (uint64_t)&v73, (long long **)&v69, (uint64_t)&v66, (long long *)v59, (uint64_t)&v56, 1, &v53, v38, 0.0, (long long **)&v50);
      std::optional<quasar::corrective_reranking::Parse>::operator=[abi:ne180100]<quasar::corrective_reranking::Parse,void>((uint64_t)__p, (long long *)&v85);
LABEL_66:
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v85);
      std::string v81 = &v50;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
      int64_t v50 = &v53;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      if (v56)
      {
        std::string v57 = v56;
        operator delete(v56);
      }
      if (v60 < 0) {
        operator delete(v59[0]);
      }
      if (v68 && (void)v66)
      {
        *((void *)&v66 + 1) = v66;
        operator delete((void *)v66);
      }
      if (v64[0])
      {
        v64[1] = v64[0];
        operator delete(v64[0]);
      }
      if (v61)
      {
        long long v62 = v61;
        operator delete(v61);
      }
      *(void *)&long long v66 = &v69;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      if (v84 < 0) {
        operator delete(v83[0]);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v72.__r_.__value_.__l.__data_);
      }
LABEL_83:
      if (v76)
      {
        if (a3)
        {
          uint64_t v41 = *((void *)&v79 + 1);
          if (*((void *)&v79 + 1) >= v80)
          {
            uint64_t v42 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse&>((uint64_t *)&v79, (const quasar::corrective_reranking::Parse *)__p);
          }
          else
          {
            quasar::corrective_reranking::Parse::Parse(*((std::string **)&v79 + 1), (const quasar::corrective_reranking::Parse *)__p);
            uint64_t v42 = v41 + 232;
          }
          *((void *)&v79 + 1) = v42;
        }
        else
        {
          quasar::corrective_reranking::Parse::Parse(&v85, (const quasar::corrective_reranking::Parse *)__p);
          *(void *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
          v73.__r_.__value_.__r.__words[0] = a4;
          v73.__r_.__value_.__s.__data_[8] = 0;
          uint64_t v43 = (char *)operator new(0xE8uLL);
          *(void *)a4 = v43;
          *(void *)(a4 + 8) = v43;
          *(void *)(a4 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v43 + 232;
          *(void *)(a4 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse*>(v49, (uint64_t)&v85, (uint64_t)v86, (uint64_t)v43);
          quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v85);
        }
        if (v76) {
          quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)__p);
        }
        if (!a3)
        {
          char v46 = 0;
          goto LABEL_98;
        }
      }
    }
    uint64_t v44 = *((void *)&v79 + 1);
    if (*((void *)&v79 + 1) >= v80)
    {
      uint64_t v45 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>((uint64_t *)&v79, (const quasar::corrective_reranking::Parse *)v6);
    }
    else
    {
      quasar::corrective_reranking::Parse::Parse(*((std::string **)&v79 + 1), (const quasar::corrective_reranking::Parse *)v6);
      uint64_t v45 = v44 + 232;
    }
    *((void *)&v79 + 1) = v45;
    char v46 = 1;
LABEL_98:
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (v46)
    {
      v6 += 232;
      uint64_t v8 = v12;
      if (v6 == v48)
      {
        long long v5 = v79;
        unint64_t v47 = v80;
        goto LABEL_105;
      }
      continue;
    }
    break;
  }
LABEL_106:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1F25048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  if (LOBYTE(STACK[0x218])) {
    quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&a50);
  }
  a50 = (uint64_t)&STACK[0x220];
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  a50 = (uint64_t)&STACK[0x250];
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  _Unwind_Resume(a1);
}

uint64_t std::optional<quasar::corrective_reranking::Parse>::operator=[abi:ne180100]<quasar::corrective_reranking::Parse,void>(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 232))
  {
    quasar::corrective_reranking::Parse::operator=(a1, a2);
  }
  else
  {
    std::__construct_at[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse,quasar::corrective_reranking::Parse*>(a1, a2);
    *(unsigned char *)(a1 + 232) = 1;
  }
  return a1;
}

void quasar::corrective_reranking::CorrectiveReranker::extendTargetToSubsequentPunctuation(int **this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v47[1] = *MEMORY[0x1E4F143B8];
  memset(v46, 0, sizeof(v46));
  if (!quasar::corrective_reranking::Parse::isTargetExpectingCommand((quasar::corrective_reranking::Parse *)this)) {
    goto LABEL_21;
  }
  quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)this, (uint64_t)__p);
  if (SBYTE7(v27) < 0)
  {
    if (__p[1] != (void *)6)
    {
      operator delete(__p[0]);
      goto LABEL_21;
    }
    BOOL v10 = *(_DWORD *)__p[0] != 1701602660 || *((_WORD *)__p[0] + 2) != 25972;
    operator delete(__p[0]);
    if (v10) {
      goto LABEL_21;
    }
  }
  else
  {
    if (SBYTE7(v27) != 6) {
      goto LABEL_21;
    }
    if (LODWORD(__p[0]) != 1701602660 || WORD2(__p[0]) != 25972) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = this[11];
  BOOL v11 = this[12];
  if (v12 == v11)
  {
    unsigned int v13 = 0;
    float v14 = INFINITY;
  }
  else
  {
    unsigned int v13 = (int)(float)*v12;
    float v14 = (float)(*(v11 - 1) + *(v11 - 2));
  }
  quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)(this + 11), a3, (std::string *)__p);
  int v15 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a2 + 192), (unsigned __int8 *)__p);
  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  if (v15)
  {
    unsigned int AdjacentPunctuationRange = quasar::corrective_reranking::CorrectiveReranker::findAdjacentPunctuationRange(a2, a3, v13, -10);
    uint64_t v17 = quasar::corrective_reranking::CorrectiveReranker::findAdjacentPunctuationRange(a2, a3, v13, 10);
    unsigned int v18 = HIDWORD(v17) + v17;
    unsigned int v13 = AdjacentPunctuationRange;
    goto LABEL_36;
  }
  uint64_t v19 = quasar::corrective_reranking::CorrectiveReranker::findAdjacentPunctuationRange(a2, a3, v13 - 1, -10);
  if (HIDWORD(v19)) {
    BOOL v20 = 0;
  }
  else {
    BOOL v20 = (int)v19 < 0;
  }
  if (!v20 && (uint64_t)v19 <= 0)
  {
LABEL_21:
    quasar::corrective_reranking::Parse::Parse((std::string *)a4, (const quasar::corrective_reranking::Parse *)this);
    goto LABEL_22;
  }
  uint64_t v21 = quasar::corrective_reranking::CorrectiveReranker::findAdjacentPunctuationRange(a2, a3, (int)v14, 10);
  if (HIDWORD(v21)) {
    unsigned int v18 = HIDWORD(v21) + v21;
  }
  else {
    unsigned int v18 = (int)v14;
  }
LABEL_36:
  quasar::corrective_reranking::Parse::Parse((std::string *)a4, (const quasar::corrective_reranking::Parse *)this);
  if ((v18 & 0x80000000) != 0) {
    goto LABEL_22;
  }
  if ((v13 & 0x80000000) != 0) {
    goto LABEL_44;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    unint64_t v22 = *(void *)(a3 + 8);
    if (v22 <= v13) {
      goto LABEL_44;
    }
  }
  else
  {
    unint64_t v22 = *(unsigned __int8 *)(a3 + 23);
    if (v13 >= v22) {
      goto LABEL_44;
    }
  }
  if (v18 < v13 || v22 < v18)
  {
LABEL_44:
    if (quasar::gLogLevel >= 2)
    {
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Floating Punctuation Removal: Invalid targetStartIndex (", 56);
      uint64_t v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") and targetEndIndex", 20);
      int v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)").", 2);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
    goto LABEL_22;
  }
  quasar::SystemConfig::Version::Version(v47, v13, v18 - v13);
  std::string::size_type v25 = operator new(8uLL);
  uint64_t v43 = v25;
  *std::string::size_type v25 = v47[0];
  uint64_t v44 = v25 + 1;
  uint64_t v45 = v25 + 1;
  quasar::corrective_reranking::TargetRange::TargetRange(__p, (uint64_t)&v43);
  std::optional<quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100]<quasar::corrective_reranking::TargetRange,void>((std::vector<int> *)(a4 + 88), (__n128 *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
LABEL_22:
  __p[0] = v46;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1F25614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  unsigned int v13 = *(void **)(v11 - 144);
  if (v13)
  {
    *(void *)(v11 - 136) = v13;
    operator delete(v13);
  }
  quasar::corrective_reranking::Parse::~Parse(v10);
  std::string __p = (void *)(v11 - 120);
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *quasar::corrective_reranking::CorrectiveReranker::findAdjacentPunctuationRange(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (*(char *)(a2 + 23) >= 0) {
    int v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v8 = *(_DWORD *)(a2 + 8);
  }
  quasar::SystemConfig::Version::Version(&v30, v8, 0);
  if (a4 >= 0) {
    int v9 = a4;
  }
  else {
    int v9 = -a4;
  }
  if (!a4) {
    return (void *)v30;
  }
  int v10 = 0;
  int v11 = 0;
  if (v9 <= 1) {
    int v12 = 1;
  }
  else {
    int v12 = v9;
  }
  while (1)
  {
    if (a4 < 0) {
      int v13 = v10;
    }
    else {
      int v13 = v11;
    }
    std::string::size_type v14 = (v13 + a3);
    if (v13 + a3 < 0) {
      goto LABEL_36;
    }
    unint64_t v15 = *(unsigned __int8 *)(a2 + 23);
    if ((v15 & 0x80u) != 0) {
      unint64_t v15 = *(void *)(a2 + 8);
    }
    if (v15 <= v14) {
      goto LABEL_36;
    }
    int v16 = *(unsigned __int8 *)std::string::at((const std::string *)a2, v14);
    if (v16 != 32) {
      break;
    }
    ++v11;
    --v10;
    if (v12 == v11) {
      return (void *)v30;
    }
  }
  uint64_t v17 = *(uint64_t **)(a1 + 208);
  char v29 = 1;
  LOWORD(__p[0]) = v16;
  unsigned int v18 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(v17, 0, (unsigned __int8 **)__p);
  uint64_t v19 = v18;
  if ((v29 & 0x80000000) == 0)
  {
    if (v18) {
      goto LABEL_23;
    }
LABEL_36:
    int v25 = a3 + v11;
    int v26 = 0;
    goto LABEL_42;
  }
  operator delete(__p[0]);
  if (!v19) {
    goto LABEL_36;
  }
LABEL_23:
  if (v9 <= v11)
  {
    int v21 = 0;
  }
  else
  {
    int v20 = 0;
    int v21 = 0;
    while (1)
    {
      if (a4 < 0) {
        int v22 = v20;
      }
      else {
        int v22 = v21;
      }
      int v23 = v22 + v14;
      unint64_t v24 = *(unsigned __int8 *)(a2 + 23);
      if ((v24 & 0x80u) != 0) {
        unint64_t v24 = *(void *)(a2 + 8);
      }
      if (v23 < 0 || v24 <= v23 || *(unsigned __int8 *)std::string::at((const std::string *)a2, v23) != v16) {
        break;
      }
      ++v21;
      --v20;
      if (v9 - v11 == v21)
      {
        int v21 = v9 - v11;
        break;
      }
    }
  }
  if (a4 < 0) {
    int v25 = v14 - v21 + 1;
  }
  else {
    int v25 = v14;
  }
  int v26 = v21;
LABEL_42:
  quasar::SystemConfig::Version::Version(__p, v25, v26);
  return __p[0];
}

void sub_1B1F25894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TokenClassification::~TokenClassification(quasar::corrective_reranking::TokenClassification *this)
{
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void *quasar::pySlice<std::vector<quasar::corrective_reranking::TokenClassification>>@<X0>(void *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *result;
  uint64_t v6 = result[1];
  if (*result == v6)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    uint64_t v7 = v6 - v5;
    int32x2_t v8 = vdup_n_s32((unint64_t)(v6 - v5) >> 6);
    int32x2_t v9 = vmax_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)v8), (int32x2_t)__PAIR64__(a3, a2)), 0);
    int32x2_t v10 = vmin_s32(v9, v8);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    __int32 v11 = v10.i32[1] - v10.i32[0];
    if (v10.i32[1] > v10.i32[0])
    {
      int v12 = result;
      unsigned __int32 v17 = v9.i32[0];
      std::vector<quasar::corrective_reranking::TokenClassification>::reserve(a4, v11);
      if ((int)(v7 >> 6) >= (uint64_t)v17) {
        unint64_t v13 = v17;
      }
      else {
        unint64_t v13 = (int)(v7 >> 6);
      }
      unint64_t v14 = v13 << 6;
      do
      {
        if (v13 >= (uint64_t)(v12[1] - *v12) >> 6) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v15 = (long long *)(*v12 + v14);
        unint64_t v16 = a4[1];
        if (v16 >= a4[2])
        {
          BOOL result = (void *)std::vector<quasar::corrective_reranking::TokenClassification>::__push_back_slow_path<quasar::corrective_reranking::TokenClassification const&>(a4, v15);
        }
        else
        {
          std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification const&>(a4 + 16, (std::string *)a4[1], v15);
          BOOL result = (void *)(v16 + 64);
          a4[1] = v16 + 64;
        }
        a4[1] = (uint64_t)result;
        ++v13;
        v14 += 64;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

void sub_1B1F25A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::Parse::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::TokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<quasar::corrective_reranking::TargetRange,false>>((std::vector<int> *)(a1 + 88), (__n128 *)((char *)a2 + 88));
  uint64_t v5 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 143) = 0;
  *((unsigned char *)a2 + 120) = 0;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 36);
  std::vector<int>::__move_assign(a1 + 152, (__n128 *)((char *)a2 + 152));
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 184));
  *(_OWORD *)(a1 + 184) = *(long long *)((char *)a2 + 184);
  *(void *)(a1 + 200) = *((void *)a2 + 25);
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 24) = 0;
  *((void *)a2 + 25) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 208));
  *(_OWORD *)(a1 + 208) = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  *((void *)a2 + 28) = 0;
  return a1;
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,0>(a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
        quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v7 - 232));
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,0>(long long *a1, long long *a2, uint64_t a3)
{
  long long v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::corrective_reranking::Parse::operator=(a3, v4);
      long long v4 = (long long *)((char *)v4 + 232);
      a3 += 232;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__tree<std::vector<std::string>>::find<std::vector<std::string>>(uint64_t a1, const void ***a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = std::__tree<std::vector<std::string>>::__lower_bound<std::vector<std::string>>(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 == v4) {
    return v3;
  }
  uint64_t v5 = v4;
  if (std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(*a2, a2[1], *(const void ***)(v5 + 32), *(const void ***)(v5 + 40), (uint64_t)&v7))return v3; {
  return v5;
  }
}

uint64_t std::__tree<std::vector<std::string>>::__lower_bound<std::vector<std::string>>(uint64_t a1, const void ***a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      int v7 = std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(*(const void ***)(v5 + 32), *(const void ***)(v5 + 40), *a2, a2[1], (uint64_t)&v10);
      int32x2_t v8 = (uint64_t *)(v5 + 8);
      if (!v7)
      {
        int32x2_t v8 = (uint64_t *)v5;
        a4 = v5;
      }
      uint64_t v5 = *v8;
    }
    while (*v8);
  }
  return a4;
}

std::string *quasar::corrective_reranking::Parse::Parse(std::string *this, const quasar::corrective_reranking::Parse *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  int v5 = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>*,std::pair<std::string,quasar::corrective_reranking::TextRange>*>((std::string *)((char *)this + 32), *((long long **)a2 + 4), *((long long **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 5);
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 56), *((long long **)a2 + 7), *((long long **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  std::__optional_copy_base<quasar::corrective_reranking::TargetRange,false>::__optional_copy_base[abi:ne180100]((uint64_t)&this[3].__r_.__value_.__r.__words[2], (uint64_t)a2 + 88);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v6;
  }
  int v7 = *((_DWORD *)a2 + 36);
  this[6].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[6].__r_.__value_.__l.__data_) = v7;
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__r.__words[0] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[6].__r_.__value_.__l.__size_, *((const void **)a2 + 19), *((void *)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
  std::string::value_type v8 = *((unsigned char *)a2 + 176);
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__s.__data_[8] = v8;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[8].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 184), *((long long **)a2 + 23), *((long long **)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 3));
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  this[9].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 208), *((long long **)a2 + 26), *((long long **)a2 + 27), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 3));
  return this;
}