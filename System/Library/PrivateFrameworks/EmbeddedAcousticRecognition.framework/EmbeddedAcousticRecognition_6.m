char *std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(_OWORD *)v7 = *(_OWORD *)a2;
      *(void *)(v7 + 16) = *(void *)(a2 + 16);
      v7 += 24;
      a2 += 24;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1E0F944(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>>>::__emplace_unique_key_args<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*&&>,std::tuple<>>(uint64_t a1, uint64_t **a2, uint64_t a3, void **a4)
{
  v8 = (int *)**a2;
  v9 = (int *)(*a2)[1];
  if (v8 == v9)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 1;
    do
    {
      unint64_t v10 = *v8 + v10 * v11 + *((void *)v8 + 1);
      v11 *= 23531;
      v8 += 6;
    }
    while (v8 != v9);
  }
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual::operator()((float *)(a1 + 36), *((unint64_t **)i + 2), *a2))return i; {
        }
          }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *(void *)i = 0;
  *((void *)i + 1) = v10;
  *((void *)i + 2) = **a4;
  *((_DWORD *)i + 6) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
  }
  uint64_t v24 = *(void *)a1;
  v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)i = *v25;
LABEL_43:
    void *v25 = i;
    goto LABEL_44;
  }
  *(void *)i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v26 >= v12) {
        v26 %= v12;
      }
    }
    else
    {
      v26 &= v12 - 1;
    }
    v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_43;
  }
LABEL_44:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1E0FBD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual::operator()(float *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  uint64_t v5 = *a3;
  if (v3 - *a2 != a3[1] - *a3) {
    return 0;
  }
  while (v4 < v3)
  {
    if (*(_DWORD *)v4 != *(_DWORD *)v5 || *(void *)(v4 + 8) != *(void *)(v5 + 8)) {
      return 0;
    }
    float v6 = *(float *)(v4 + 16);
    float v7 = *(float *)(v4 + 20);
    float v8 = *(float *)(v5 + 16);
    float v9 = *(float *)(v5 + 20);
    BOOL v10 = v6 == v8 && v7 == v9;
    if (!v10 && vabds_f32(v6 + v7, v8 + v9) > *a1) {
      return 0;
    }
    v4 += 24;
    v5 += 24;
  }
  return 1;
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::MakeSubsetUnique(int a1, float **a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    float v7 = *a2;
    while (1)
    {
      if (v3 != v7)
      {
        *(_OWORD *)float v7 = *(_OWORD *)v3;
        *((void *)v7 + 2) = *((void *)v3 + 2);
      }
      if (v3 + 6 == v4) {
        break;
      }
      float v8 = v3 + 10;
      while (*((_DWORD *)v8 - 4) == *(_DWORD *)v7)
      {
        if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Compare(a1, v8, *((uint64_t **)v8 - 1), v7 + 4, *((uint64_t **)v7 + 1)) == 1)
        {
          *((void *)v7 + 1) = *((void *)v8 - 1);
          *((void *)v7 + 2) = *(void *)v8;
        }
        float v9 = v8 + 2;
        v8 += 6;
        if (v9 == v4) {
          goto LABEL_14;
        }
      }
      v7 += 6;
      ++v6;
      unint64_t v3 = v8 - 4;
      if (v8 - 4 == v4) {
        goto LABEL_16;
      }
    }
LABEL_14:
    ++v6;
  }
LABEL_16:
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::resize((uint64_t)a2, v6);
}

uint64_t std::vector<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__push_back_slow_path<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v19 = a1 + 2;
  BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  uint64_t v11 = &v10[32 * v4];
  __p = v10;
  v16 = v11;
  float v18 = &v10[32 * v12];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  unint64_t v17 = v11 + 32;
  std::vector<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    v17 += (v16 - v17 + 31) & 0xFFFFFFFFFFFFFFE0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_1B1E0FE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,false>(int *a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 32;
    if (result + 32 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      while (1)
      {
        uint64_t v5 = v4;
        uint64_t v4 = v2;
        int v6 = *(_DWORD *)(v5 + 32);
        if (v6 < *(_DWORD *)v5) {
          break;
        }
        if (v6 <= *(_DWORD *)v5)
        {
          int v7 = *(_DWORD *)(v5 + 40);
          if (v7 < *(_DWORD *)(v5 + 8)) {
            goto LABEL_6;
          }
        }
LABEL_17:
        uint64_t v2 = v4 + 32;
        v3 += 32;
        if (v4 + 32 == a2) {
          return result;
        }
      }
      int v7 = *(_DWORD *)(v5 + 40);
LABEL_6:
      int v14 = *(_DWORD *)(v5 + 52);
      uint64_t v13 = *(void *)(v5 + 44);
      uint64_t v8 = *(void *)(v5 + 56);
      *(_DWORD *)(v5 + 32) = *(_DWORD *)v5;
      uint64_t v9 = (_DWORD *)(v5 + 8);
      *(_OWORD *)(v4 + 8) = *(_OWORD *)(v5 + 8);
      *(void *)(v4 + 24) = *(void *)(v5 + 24);
      if (v5 == result)
      {
LABEL_13:
        uint64_t v5 = result;
      }
      else
      {
        uint64_t v10 = v3;
        while (1)
        {
          uint64_t v11 = result + v10;
          int v12 = *(_DWORD *)(result + v10 - 32);
          if (v6 >= v12)
          {
            if (v6 > v12) {
              goto LABEL_14;
            }
            if (v7 >= *(_DWORD *)(result + v10 - 24)) {
              break;
            }
          }
          uint64_t v9 = (_DWORD *)(v5 - 24);
          v5 -= 32;
          *(_DWORD *)uint64_t v11 = v12;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)(v11 - 24);
          *(void *)(v11 + 24) = *(void *)(v11 - 8);
          v10 -= 32;
          if (!v10)
          {
            uint64_t v9 = (_DWORD *)(result + 8);
            goto LABEL_13;
          }
        }
        uint64_t v9 = (_DWORD *)(result + v10 + 8);
        uint64_t v5 = result + v10;
      }
LABEL_14:
      *(_DWORD *)uint64_t v5 = v6;
      _DWORD *v9 = v7;
      *(void *)(v5 + 12) = v13;
      *(_DWORD *)(v5 + 20) = v14;
      *(void *)(v5 + 24) = v8;
      goto LABEL_17;
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(int *result, int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 8;
    if (result + 8 != a2)
    {
      for (i = result + 3; ; i += 8)
      {
        uint64_t v4 = result;
        result = v2;
        int v5 = v4[8];
        if (v5 < *v4) {
          break;
        }
        if (v5 <= *v4)
        {
          int v6 = v4[10];
          if (v6 < v4[2]) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 8;
        if (result + 8 == a2) {
          return result;
        }
      }
      int v6 = v4[10];
LABEL_6:
      uint64_t v10 = *(void *)(v4 + 11);
      int v11 = v4[13];
      uint64_t v7 = *((void *)v4 + 7);
      int v8 = *v4;
      for (j = i; ; j -= 8)
      {
        j[5] = v8;
        *(_OWORD *)(j + 7) = *(_OWORD *)(j - 1);
        *(void *)(j + 11) = *(void *)(j + 3);
        int v8 = *(j - 11);
        if (v5 >= v8 && (v5 > v8 || v6 >= *(j - 9))) {
          break;
        }
      }
      *(j - 3) = v5;
      *(j - 1) = v6;
      *(void *)j = v10;
      j[2] = v11;
      *(void *)(j + 3) = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(int *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a1;
  if (*a2 < *a1 || v3 <= v4 && a2[2] < a1[2])
  {
    int v5 = *a3;
    if (*a3 < v3 || v5 <= v3 && a3[2] < a2[2])
    {
      *a1 = v5;
      *a3 = v4;
      long long v6 = *(_OWORD *)(a1 + 2);
      uint64_t v7 = *((void *)a1 + 3);
      *(_OWORD *)(a1 + 2) = *(_OWORD *)(a3 + 2);
      *((void *)a1 + 3) = *((void *)a3 + 3);
      *(_OWORD *)(a3 + 2) = v6;
      *((void *)a3 + 3) = v7;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      unint64_t v17 = (long long *)(a2 + 2);
      long long v18 = *(_OWORD *)(a1 + 2);
      int v19 = a1[6];
      int v20 = a1[7];
      *(_OWORD *)(a1 + 2) = *(_OWORD *)(a2 + 2);
      *((void *)a1 + 3) = *((void *)a2 + 3);
      *(_OWORD *)(a2 + 2) = v18;
      a2[6] = v19;
      a2[7] = v20;
      int v21 = *a3;
      int v22 = *a2;
      if (*a3 < *a2 || v21 <= v22 && a3[2] < *(_DWORD *)v17)
      {
        *a2 = v21;
        *a3 = v22;
        long long v23 = *v17;
        *unint64_t v17 = *(_OWORD *)(a3 + 2);
        *((void *)a2 + 3) = *((void *)a3 + 3);
        *(_OWORD *)(a3 + 2) = v23;
        a3[6] = v19;
        a3[7] = v20;
        return 2;
      }
    }
    return 1;
  }
  int v9 = *a3;
  if (*a3 < v3 || v9 <= v3 && a3[2] < a2[2])
  {
    *a2 = v9;
    *a3 = v3;
    uint64_t v10 = a2 + 2;
    long long v11 = *(_OWORD *)(a2 + 2);
    uint64_t v12 = *((void *)a2 + 3);
    *(_OWORD *)(a2 + 2) = *(_OWORD *)(a3 + 2);
    *((void *)a2 + 3) = *((void *)a3 + 3);
    *(_OWORD *)(a3 + 2) = v11;
    *((void *)a3 + 3) = v12;
    int v13 = *a2;
    int v14 = *a1;
    if (*a2 < *a1 || v13 <= v14 && *(_DWORD *)v10 < a1[2])
    {
      *a1 = v13;
      *a2 = v14;
      long long v15 = *(_OWORD *)(a1 + 2);
      uint64_t v16 = *((void *)a1 + 3);
      *(_OWORD *)(a1 + 2) = *v10;
      *((void *)a1 + 3) = *((void *)a2 + 3);
      *uint64_t v10 = v15;
      *((void *)a2 + 3) = v16;
      return 2;
    }
    return 1;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &>(int *a1, int *a2)
{
  int v2 = *a1;
  int v3 = a1[2];
  uint64_t v18 = *(void *)(a1 + 3);
  int v19 = a1[5];
  int v4 = *(a2 - 8);
  if (*a1 >= v4 && (v2 > v4 || v3 >= *(a2 - 6)))
  {
    for (i = a1 + 8; i < a2 && v2 >= *i && (v2 > *i || v3 >= i[2]); i += 8)
      ;
  }
  else
  {
    i = a1;
    do
    {
      int v7 = i[8];
      i += 8;
      int v6 = v7;
    }
    while (v2 >= v7 && (v2 > v6 || v3 >= i[2]));
  }
  if (i < a2)
  {
    for (a2 -= 8; v2 < v4 || v2 <= v4 && v3 < a2[2]; a2 -= 8)
    {
      int v8 = *(a2 - 8);
      int v4 = v8;
    }
  }
  uint64_t v9 = *((void *)a1 + 3);
  if (i < a2)
  {
    int v10 = *i;
    int v11 = *a2;
    do
    {
      int *i = v11;
      *a2 = v10;
      long long v17 = *(_OWORD *)(i + 2);
      uint64_t v12 = *((void *)i + 3);
      *(_OWORD *)(i + 2) = *(_OWORD *)(a2 + 2);
      *((void *)i + 3) = *((void *)a2 + 3);
      *(_OWORD *)(a2 + 2) = v17;
      *((void *)a2 + 3) = v12;
      do
      {
        int v13 = i[8];
        i += 8;
        int v10 = v13;
      }
      while (v2 >= v13 && (v2 > v10 || v3 >= i[2]));
      do
      {
        do
        {
          int v14 = *(a2 - 8);
          a2 -= 8;
          int v11 = v14;
          BOOL v15 = v2 <= v14;
        }
        while (v2 < v14);
      }
      while (v15 && v3 < a2[2]);
    }
    while (i < a2);
  }
  if (i - 8 != a1)
  {
    *a1 = *(i - 8);
    *(_OWORD *)(a1 + 2) = *(_OWORD *)(i - 6);
    *((void *)a1 + 3) = *((void *)i - 1);
  }
  *(i - 8) = v2;
  *(i - 6) = v3;
  *(i - 3) = v19;
  *(void *)(i - 5) = v18;
  *((void *)i - 1) = v9;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &>(int *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  int v3 = a1[2];
  int v4 = *a1;
  uint64_t v22 = *(void *)(a1 + 3);
  int v23 = a1[5];
  uint64_t v5 = *((void *)a1 + 3);
  while (1)
  {
    int v6 = a1[v2 + 8];
    if (v6 >= v4 && (v6 > v4 || a1[v2 + 10] >= v3)) {
      break;
    }
    v2 += 8;
  }
  unint64_t v7 = (unint64_t)&a1[v2 + 8];
  if (v2 * 4)
  {
    do
    {
      int v9 = *(a2 - 8);
      a2 -= 8;
      int v8 = v9;
    }
    while (v9 >= v4 && (v8 > v4 || a2[2] >= v3));
  }
  else
  {
LABEL_19:
    if (v7 < (unint64_t)a2)
    {
      do
      {
        int v11 = *(a2 - 8);
        a2 -= 8;
        int v10 = v11;
        if (v11 < v4) {
          break;
        }
        if (v10 > v4) {
          goto LABEL_19;
        }
      }
      while (a2[2] >= v3 && v7 < (unint64_t)a2);
    }
  }
  if (v7 >= (unint64_t)a2)
  {
    unint64_t v14 = v7;
  }
  else
  {
    int v13 = *a2;
    unint64_t v14 = v7;
    BOOL v15 = a2;
    do
    {
      *(_DWORD *)unint64_t v14 = v13;
      *BOOL v15 = v6;
      long long v21 = *(_OWORD *)(v14 + 8);
      uint64_t v16 = *(void *)(v14 + 24);
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 2);
      *(void *)(v14 + 24) = *((void *)v15 + 3);
      *(_OWORD *)(v15 + 2) = v21;
      *((void *)v15 + 3) = v16;
      do
      {
        do
        {
          int v17 = *(_DWORD *)(v14 + 32);
          v14 += 32;
          int v6 = v17;
          BOOL v18 = v17 <= v4;
        }
        while (v17 < v4);
      }
      while (v18 && *(_DWORD *)(v14 + 8) < v3);
      do
      {
        int v19 = *(v15 - 8);
        v15 -= 8;
        int v13 = v19;
      }
      while (v19 >= v4 && (v13 > v4 || v15[2] >= v3));
    }
    while (v14 < (unint64_t)v15);
  }
  if ((int *)(v14 - 32) != a1)
  {
    *a1 = *(_DWORD *)(v14 - 32);
    *(_OWORD *)(a1 + 2) = *(_OWORD *)(v14 - 24);
    *((void *)a1 + 3) = *(void *)(v14 - 8);
  }
  *(_DWORD *)(v14 - 32) = v4;
  *(_DWORD *)(v14 - 24) = v3;
  *(_DWORD *)(v14 - 12) = v23;
  *(void *)(v14 - 20) = v22;
  *(void *)(v14 - 8) = v5;
  return v14 - 32;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(_DWORD *)(a2 - 32);
      int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1 || v6 <= v7 && *(_DWORD *)(a2 - 24) < *(_DWORD *)(a1 + 8))
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 32) = v7;
        long long v8 = *(_OWORD *)(a1 + 8);
        uint64_t v9 = *(void *)(a1 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 24) = *(void *)(a2 - 8);
        *(_OWORD *)(a2 - 24) = v8;
        *(void *)(a2 - 8) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((int *)a1, (int *)(a1 + 32), (int *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a1 + 32, a1 + 64, a1 + 96, (int *)(a2 - 32));
      return 1;
    default:
      uint64_t v10 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((int *)a1, (int *)(a1 + 32), (int *)(a1 + 64));
      uint64_t v11 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  do
  {
    int v14 = *(_DWORD *)v11;
    if (*(_DWORD *)v11 >= *(_DWORD *)v10)
    {
      if (v14 > *(_DWORD *)v10) {
        goto LABEL_20;
      }
      int v15 = *(_DWORD *)(v11 + 8);
      if (v15 >= *(_DWORD *)(v10 + 8)) {
        goto LABEL_20;
      }
    }
    else
    {
      int v15 = *(_DWORD *)(v11 + 8);
    }
    uint64_t v22 = *(void *)(v11 + 12);
    int v23 = *(_DWORD *)(v11 + 20);
    uint64_t v16 = *(void *)(v11 + 24);
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v10;
    int v17 = (_DWORD *)(v10 + 8);
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(v10 + 8);
    *(void *)(v11 + 24) = *(void *)(v10 + 24);
    if (v10 == a1)
    {
LABEL_15:
      uint64_t v10 = a1;
    }
    else
    {
      uint64_t v18 = v12;
      while (1)
      {
        uint64_t v19 = a1 + v18;
        int v20 = *(_DWORD *)(a1 + v18 + 32);
        if (v14 >= v20)
        {
          if (v14 > v20) {
            goto LABEL_16;
          }
          uint64_t v21 = a1 + v18;
          if (v15 >= *(_DWORD *)(a1 + v18 + 40)) {
            break;
          }
        }
        int v17 = (_DWORD *)(v10 - 24);
        v10 -= 32;
        *(_DWORD *)(v19 + 64) = v20;
        *(_OWORD *)(v19 + 72) = *(_OWORD *)(v19 + 40);
        *(void *)(v19 + 88) = *(void *)(v19 + 56);
        v18 -= 32;
        if (v18 == -64)
        {
          int v17 = (_DWORD *)(a1 + 8);
          goto LABEL_15;
        }
      }
      int v17 = (_DWORD *)(v21 + 72);
      uint64_t v10 = v21 + 64;
    }
LABEL_16:
    *(_DWORD *)uint64_t v10 = v14;
    *int v17 = v15;
    *(void *)(v10 + 12) = v22;
    *(_DWORD *)(v10 + 20) = v23;
    *(void *)(v10 + 24) = v16;
    if (++v13 == 8) {
      return v11 + 32 == a2;
    }
LABEL_20:
    uint64_t v10 = v11;
    v12 += 32;
    v11 += 32;
  }
  while (v11 != a2);
  return 1;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((int *)a1, (int *)a2, (int *)a3);
  int v9 = *(_DWORD *)a4;
  int v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || v9 <= v10 && *(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
  {
    *(_DWORD *)a3 = v9;
    *(_DWORD *)a4 = v10;
    uint64_t v11 = (_OWORD *)(a3 + 8);
    __n128 result = *(__n128 *)(a3 + 8);
    uint64_t v12 = *(void *)(a3 + 24);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(void *)(a3 + 24) = *(void *)(a4 + 24);
    *(__n128 *)(a4 + 8) = result;
    *(void *)(a4 + 24) = v12;
    int v13 = *(_DWORD *)a3;
    int v14 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2 || v13 <= v14 && *(_DWORD *)v11 < *(_DWORD *)(a2 + 8))
    {
      *(_DWORD *)a2 = v13;
      *(_DWORD *)a3 = v14;
      int v15 = (_OWORD *)(a2 + 8);
      __n128 result = *(__n128 *)(a2 + 8);
      uint64_t v16 = *(void *)(a2 + 24);
      *(_OWORD *)(a2 + 8) = *v11;
      *(void *)(a2 + 24) = *(void *)(a3 + 24);
      *uint64_t v11 = result;
      *(void *)(a3 + 24) = v16;
      int v17 = *(_DWORD *)a2;
      int v18 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1 || v17 <= v18 && *(_DWORD *)v15 < *(_DWORD *)(a1 + 8))
      {
        *(_DWORD *)a1 = v17;
        *(_DWORD *)a2 = v18;
        __n128 result = *(__n128 *)(a1 + 8);
        uint64_t v19 = *(void *)(a1 + 24);
        *(_OWORD *)(a1 + 8) = *v15;
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *int v15 = result;
        *(void *)(a2 + 24) = v19;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a2, a3, a4).n128_u64[0];
  int v11 = *a5;
  int v12 = *(_DWORD *)a4;
  if (*a5 < *(_DWORD *)a4 || v11 <= v12 && a5[2] < *(_DWORD *)(a4 + 8))
  {
    *(_DWORD *)a4 = v11;
    *a5 = v12;
    int v13 = (_OWORD *)(a4 + 8);
    __n128 result = *(__n128 *)(a4 + 8);
    uint64_t v14 = *(void *)(a4 + 24);
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 2);
    *(void *)(a4 + 24) = *((void *)a5 + 3);
    *(__n128 *)(a5 + 2) = result;
    *((void *)a5 + 3) = v14;
    int v15 = *(_DWORD *)a4;
    int v16 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || v15 <= v16 && *(_DWORD *)v13 < *(_DWORD *)(a3 + 8))
    {
      *(_DWORD *)a3 = v15;
      *(_DWORD *)a4 = v16;
      int v17 = (_OWORD *)(a3 + 8);
      __n128 result = *(__n128 *)(a3 + 8);
      uint64_t v18 = *(void *)(a3 + 24);
      *(_OWORD *)(a3 + 8) = *v13;
      *(void *)(a3 + 24) = *(void *)(a4 + 24);
      *int v13 = result;
      *(void *)(a4 + 24) = v18;
      int v19 = *(_DWORD *)a3;
      int v20 = *(_DWORD *)a2;
      if (*(_DWORD *)a3 < *(_DWORD *)a2 || v19 <= v20 && *(_DWORD *)v17 < *(_DWORD *)(a2 + 8))
      {
        *(_DWORD *)a2 = v19;
        *(_DWORD *)a3 = v20;
        uint64_t v21 = (_OWORD *)(a2 + 8);
        __n128 result = *(__n128 *)(a2 + 8);
        uint64_t v22 = *(void *)(a2 + 24);
        *(_OWORD *)(a2 + 8) = *v17;
        *(void *)(a2 + 24) = *(void *)(a3 + 24);
        *int v17 = result;
        *(void *)(a3 + 24) = v22;
        int v23 = *(_DWORD *)a2;
        int v24 = *(_DWORD *)a1;
        if (*(_DWORD *)a2 < *(_DWORD *)a1 || v23 <= v24 && *(_DWORD *)v21 < *(_DWORD *)(a1 + 8))
        {
          *(_DWORD *)a1 = v23;
          *(_DWORD *)a2 = v24;
          __n128 result = *(__n128 *)(a1 + 8);
          uint64_t v25 = *(void *)(a1 + 24);
          *(_OWORD *)(a1 + 8) = *v21;
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *uint64_t v21 = result;
          *(void *)(a2 + 24) = v25;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 5;
    if (a2 - a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (int *)(a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = (_OWORD *)(a1 + 8);
      uint64_t v15 = a2;
      do
      {
        int v16 = *(_DWORD *)v15;
        int v17 = *(_DWORD *)a1;
        if (*(_DWORD *)v15 < *(_DWORD *)a1 || v16 <= v17 && *(_DWORD *)(v15 + 8) < *(_DWORD *)v14)
        {
          *(_DWORD *)uint64_t v15 = v17;
          *(_DWORD *)a1 = v16;
          long long v18 = *(_OWORD *)(v15 + 8);
          uint64_t v19 = *(void *)(v15 + 24);
          *(_OWORD *)(v15 + 8) = *v14;
          *(void *)(v15 + 24) = *(void *)(a1 + 24);
          *uint64_t v14 = v18;
          *(void *)(a1 + 24) = v19;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a4, v9, (int *)a1);
        }
        v15 += 32;
      }
      while (v15 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 33)
    {
      uint64_t v20 = (unint64_t)v8 >> 5;
      uint64_t v21 = a2 - 32;
      do
      {
        int v22 = *(_DWORD *)a1;
        long long v28 = *(_OWORD *)(a1 + 8);
        int v24 = *(_DWORD *)(a1 + 24);
        int v23 = *(_DWORD *)(a1 + 28);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a4, v20);
        if (v21 == v25)
        {
          *(_DWORD *)uint64_t v25 = v22;
          *(_OWORD *)(v25 + 8) = v28;
          *(_DWORD *)(v25 + 24) = v24;
          *(_DWORD *)(v25 + 28) = v23;
        }
        else
        {
          *(_DWORD *)uint64_t v25 = *(_DWORD *)v21;
          *(_OWORD *)(v25 + 8) = *(_OWORD *)(v21 + 8);
          *(void *)(v25 + 24) = *(void *)(v21 + 24);
          *(_DWORD *)uint64_t v21 = v22;
          *(_OWORD *)(v21 + 8) = v28;
          *(_DWORD *)(v21 + 24) = v24;
          *(_DWORD *)(v21 + 28) = v23;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, v25 + 32, a4, (v25 + 32 - a1) >> 5);
        }
        v21 -= 32;
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 5)
    {
      uint64_t v6 = v4 >> 4;
      uint64_t v7 = (v4 >> 4) + 1;
      uint64_t v8 = (int *)(result + 32 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = v8[8];
        if (*v8 < v10 || *v8 <= v10 && *(_DWORD *)(result + 32 * v7 + 8) < v8[10])
        {
          v8 += 8;
          uint64_t v7 = v9;
        }
      }
      int v11 = *v8;
      int v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v11 <= v12)
        {
          int v13 = a4[2];
          if (v8[2] < v13) {
            return result;
          }
        }
        else
        {
          int v13 = a4[2];
        }
        uint64_t v20 = *(void *)(a4 + 3);
        int v21 = a4[5];
        uint64_t v14 = *((void *)a4 + 3);
        *a4 = v11;
        *(_OWORD *)(a4 + 2) = *(_OWORD *)(v8 + 2);
        *((void *)a4 + 3) = *((void *)v8 + 3);
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v15 = (int *)(result + 32 * v7);
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              int v18 = v15[8];
              if (*v15 < v18 || *v15 <= v18 && *(_DWORD *)(result + 32 * v7 + 8) < v15[10])
              {
                v15 += 8;
                uint64_t v7 = v17;
              }
            }
            int v19 = *v15;
            if (*v15 < v12 || v19 <= v12 && v15[2] < v13) {
              break;
            }
            int *v8 = v19;
            *(_OWORD *)(v8 + 2) = *(_OWORD *)(v15 + 2);
            *((void *)v8 + 3) = *((void *)v15 + 3);
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v15 = v8;
LABEL_14:
        *uint64_t v15 = v12;
        v15[2] = v13;
        *(void *)(v15 + 3) = v20;
        v15[5] = v21;
        *((void *)v15 + 3) = v14;
      }
    }
  }
  return result;
}

double std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    uint64_t v7 = v3 + 1;
    a1 += 32 * (v3 + 1);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      int v10 = *(_DWORD *)(a1 + 32);
      if (*(_DWORD *)a1 < v10 || *(_DWORD *)a1 <= v10 && *(_DWORD *)(v6 + 32 * v7 + 8) < *(_DWORD *)(a1 + 40))
      {
        a1 += 32;
        uint64_t v3 = v9;
      }
    }
    *(_DWORD *)uint64_t v6 = *(_DWORD *)a1;
    *(_OWORD *)(v6 + 8) = *(_OWORD *)(a1 + 8);
    double result = *(double *)(a1 + 24);
    *(double *)(v6 + 24) = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (int *)(result + 32 * (v4 >> 1));
    int v7 = *v6;
    int v8 = *(_DWORD *)(a2 - 32);
    if (*v6 >= v8)
    {
      if (v7 > v8) {
        return result;
      }
      int v9 = *(_DWORD *)(a2 - 24);
      if (*(_DWORD *)(result + 32 * v5 + 8) >= v9) {
        return result;
      }
    }
    else
    {
      int v9 = *(_DWORD *)(a2 - 24);
    }
    uint64_t v16 = *(void *)(a2 - 20);
    int v17 = *(_DWORD *)(a2 - 12);
    uint64_t v10 = *(void *)(a2 - 8);
    *(_DWORD *)(a2 - 32) = v7;
    uint64_t v11 = result + 32 * v5;
    int v12 = (_DWORD *)(v11 + 8);
    *(_OWORD *)(a2 - 24) = *(_OWORD *)(v11 + 8);
    *(void *)(a2 - 8) = *(void *)(v11 + 24);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v14 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        int v13 = (int *)(result + 32 * v5);
        int v15 = *v13;
        if (*v13 >= v8 && (v15 > v8 || *(_DWORD *)(result + 32 * v5 + 8) >= v9)) {
          break;
        }
        *uint64_t v6 = v15;
        int v12 = v13 + 2;
        *(_OWORD *)(v6 + 2) = *(_OWORD *)(v13 + 2);
        *((void *)v6 + 3) = *((void *)v13 + 3);
        uint64_t v6 = (int *)(result + 32 * v5);
        if (v14 <= 1) {
          goto LABEL_12;
        }
      }
    }
    int v13 = v6;
LABEL_12:
    *int v13 = v8;
    *int v12 = v9;
    *(void *)(v13 + 3) = v16;
    v13[5] = v17;
    *((void *)v13 + 3) = v10;
  }
  return result;
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::RebuildRepository(void *a1)
{
  v64 = 0;
  v65 = 0;
  unint64_t v66 = 0;
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v3 = 0;
    do
    {
      fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::AddStrings((uint64_t)a1, *(uint64_t **)(v2 + 8 * v3), &v64);
      uint64_t v2 = *a1;
      uint64_t v4 = *(void *)(*(void *)(*a1 + 8 * v3) + 24);
      if (*(void *)(*(void *)(*a1 + 8 * v3) + 32) != v4)
      {
        unint64_t v5 = 0;
        uint64_t v6 = (uint64_t *)v65;
        do
        {
          int v7 = (void *)(v4 + 32 * v5 + 8);
          if ((unint64_t)v6 >= v66)
          {
            uint64_t v8 = ((char *)v6 - v64) >> 3;
            if ((unint64_t)(v8 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v9 = (uint64_t)(v66 - (void)v64) >> 2;
            if (v9 <= v8 + 1) {
              unint64_t v9 = v8 + 1;
            }
            if (v66 - (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v10 = v9;
            }
            if (v10) {
              uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v66, v10);
            }
            else {
              uint64_t v11 = 0;
            }
            int v12 = &v11[8 * v8];
            *(void *)int v12 = *v7;
            uint64_t v6 = (uint64_t *)(v12 + 8);
            unint64_t v14 = v64;
            int v13 = (uint64_t *)v65;
            if (v65 != v64)
            {
              do
              {
                uint64_t v15 = *--v13;
                *((void *)v12 - 1) = v15;
                v12 -= 8;
              }
              while (v13 != (uint64_t *)v14);
              int v13 = (uint64_t *)v64;
            }
            v64 = v12;
            v65 = (char *)v6;
            unint64_t v66 = (unint64_t)&v11[8 * v10];
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            *v6++ = *v7;
          }
          v65 = (char *)v6;
          ++v5;
          uint64_t v2 = *a1;
          uint64_t v4 = *(void *)(*(void *)(*a1 + 8 * v3) + 24);
        }
        while (v5 < (*(void *)(*(void *)(*a1 + 8 * v3) + 32) - v4) >> 5);
      }
      ++v3;
    }
    while (v3 < (a1[1] - v2) >> 3);
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  uint64_t v16 = (char **)(a1 + 25);
  while (1)
  {
    int v17 = (char *)a1[25];
    int v18 = (char *)a1[26];
    if (v17 == v18) {
      break;
    }
    uint64_t v19 = *(void *)v17;
    if (v18 - v17 >= 9)
    {
      uint64_t v20 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>((void *)a1[25], (uint64_t)&v67, (unint64_t)(v18 - v17) >> 3);
      int v21 = v18 - 8;
      if (v18 - 8 == v20)
      {
        *(void *)uint64_t v20 = v19;
      }
      else
      {
        *(void *)uint64_t v20 = *(void *)v21;
        *(void *)int v21 = v19;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>((uint64_t)v17, (uint64_t)(v20 + 8), (uint64_t)&v67, (v20 + 8 - v17) >> 3);
      }
    }
    a1[26] -= 8;
    int v22 = v62;
    if (v62 >= v63)
    {
      uint64_t v24 = (v62 - v61) >> 3;
      if ((unint64_t)(v24 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = (v63 - v61) >> 2;
      if (v25 <= v24 + 1) {
        unint64_t v25 = v24 + 1;
      }
      if ((unint64_t)(v63 - v61) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26) {
        long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v63, v26);
      }
      else {
        long long v27 = 0;
      }
      long long v28 = &v27[8 * v24];
      *(void *)long long v28 = v19;
      int v23 = v28 + 8;
      v30 = v61;
      v29 = v62;
      if (v62 != v61)
      {
        do
        {
          uint64_t v31 = *((void *)v29 - 1);
          v29 -= 8;
          *((void *)v28 - 1) = v31;
          v28 -= 8;
        }
        while (v29 != v30);
        v29 = v61;
      }
      v61 = v28;
      v62 = v23;
      v63 = &v27[8 * v26];
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *(void *)v62 = v19;
      int v23 = v22 + 8;
    }
    v62 = v23;
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::AddStrings((uint64_t)a1, (uint64_t *)(v19 + 8), &v64);
  }
  v32 = v62;
  if (v62 != v61)
  {
    unint64_t v33 = 0;
    v32 = v61;
    do
    {
      v35 = (char *)a1[26];
      unint64_t v34 = a1[27];
      if ((unint64_t)v35 >= v34)
      {
        uint64_t v37 = (v35 - *v16) >> 3;
        if ((unint64_t)(v37 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v34 - (void)*v16;
        uint64_t v39 = v38 >> 2;
        if (v38 >> 2 <= (unint64_t)(v37 + 1)) {
          uint64_t v39 = v37 + 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v39;
        }
        if (v40) {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 27), v40);
        }
        else {
          v41 = 0;
        }
        v42 = &v41[8 * v37];
        *(void *)v42 = *(void *)&v32[8 * v33];
        uint64_t v36 = (uint64_t)(v42 + 8);
        v44 = (char *)a1[25];
        v43 = (char *)a1[26];
        if (v43 != v44)
        {
          do
          {
            uint64_t v45 = *((void *)v43 - 1);
            v43 -= 8;
            *((void *)v42 - 1) = v45;
            v42 -= 8;
          }
          while (v43 != v44);
          v43 = *v16;
        }
        a1[25] = v42;
        a1[26] = v36;
        a1[27] = &v41[8 * v40];
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *(void *)v35 = *(void *)&v32[8 * v33];
        uint64_t v36 = (uint64_t)(v35 + 8);
      }
      a1[26] = v36;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>(a1[25], v36, (uint64_t)&v67, (v36 - a1[25]) >> 3);
      ++v33;
      v32 = v61;
    }
    while (v33 < (v62 - v61) >> 3);
  }
  if (v32)
  {
    v62 = v32;
    operator delete(v32);
  }
  v46 = (uint64_t **)a1[22];
  if (v46)
  {
    do
    {
      uint64_t v47 = (uint64_t)v46[4];
      fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::AddStrings((uint64_t)a1, v46[2], &v64);
      v48 = v65;
      if ((unint64_t)v65 >= v66)
      {
        int64_t v50 = (v65 - v64) >> 3;
        if ((unint64_t)(v50 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v51 = (uint64_t)(v66 - (void)v64) >> 2;
        if (v51 <= v50 + 1) {
          unint64_t v51 = v50 + 1;
        }
        if (v66 - (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v51;
        }
        if (v52) {
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v66, v52);
        }
        else {
          v53 = 0;
        }
        v54 = &v53[8 * v50];
        *(void *)v54 = v47;
        v49 = (uint64_t *)(v54 + 8);
        v56 = v64;
        v55 = (uint64_t *)v65;
        if (v65 != v64)
        {
          do
          {
            uint64_t v57 = *--v55;
            *((void *)v54 - 1) = v57;
            v54 -= 8;
          }
          while (v55 != (uint64_t *)v56);
          v55 = (uint64_t *)v64;
        }
        v64 = v54;
        v65 = (char *)v49;
        unint64_t v66 = (unint64_t)&v53[8 * v52];
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        *(void *)v65 = v47;
        v49 = (uint64_t *)(v48 + 8);
      }
      v65 = (char *)v49;
      v46 = (uint64_t **)*v46;
    }
    while (v46);
  }
  else
  {
    v49 = (uint64_t *)v65;
  }
  unint64_t v58 = 126 - 2 * __clz(((char *)v49 - v64) >> 3);
  if (v49 == (uint64_t *)v64) {
    uint64_t v59 = 0;
  }
  else {
    uint64_t v59 = v58;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,false>((uint64_t)v64, (unint64_t *)v49, (uint64_t)&v61, v59, 1);
  v60 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__equal_to &>((uint64_t *)v64, (uint64_t *)v65);
  if (v65 != (char *)v60) {
    v65 = (char *)v60;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Rebuilding repository.", 22);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v61);
  }
  fst::LatticeStringRepository<int>::Rebuild((uint64_t)(a1 + 35), (uint64_t ***)&v64);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
}

void sub_1B1E11B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
  int v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(void *)(v10 - 104) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::AddStrings(uint64_t a1, uint64_t *a2, char **a3)
{
  uint64_t v3 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v6 = a3 + 2;
    int v7 = a3[1];
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v8 = (v7 - *a3) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = *v6 - (void)*a3;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v6, v11);
        }
        else {
          int v12 = 0;
        }
        int v13 = &v12[8 * v8];
        *(void *)int v13 = *(void *)(v3 + 8);
        int v7 = v13 + 8;
        uint64_t v15 = *a3;
        unint64_t v14 = a3[1];
        if (v14 != *a3)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          unint64_t v14 = *a3;
        }
        *a3 = v13;
        a3[1] = v7;
        a3[2] = &v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)int v7 = *(void *)(v3 + 8);
        v7 += 8;
      }
      a3[1] = v7;
      v3 += 24;
    }
    while (v3 != a2[1]);
  }
}

uint64_t fst::LatticeStringRepository<int>::Rebuild(uint64_t a1, uint64_t ***a2)
{
  memset(v8, 0, sizeof(v8));
  int v9 = 1065353216;
  for (i = *a2; i != a2[1]; ++i)
    fst::LatticeStringRepository<int>::RebuildHelper(a1, *i, v8);
  for (j = *(uint64_t **)(a1 + 24); j; j = (uint64_t *)*j)
  {
    uint64_t v6 = j + 2;
    if (!std::__hash_table<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::EntryKey,fst::LatticeStringRepository<int>::EntryEqual,std::allocator<fst::LatticeStringRepository<int>::Entry const*>>::find<fst::LatticeStringRepository<int>::Entry const*>(v8, (uint64_t **)j + 2)&& *v6)
    {
      MEMORY[0x1B3EA8670](*v6, 0x1060C40ADAFC7CALL);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap(a1 + 8, (uint64_t)v8);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v8);
}

void sub_1B1E11DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (unint64_t *)result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v22 = *(a2 - 1);
          unint64_t v23 = *v11;
          if (v22 < *v11)
          {
            *unint64_t v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, v11 + 1, a2 - 1);
          break;
        case 4uLL:
          double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, v11 + 1, v11 + 2, a2 - 1);
          break;
        case 5uLL:
          double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,fst::LatticeStringRepository<int>::Entry const**>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v17 - 1, v17, &v11[v16 + 1]);
      unint64_t v18 = *v11;
      *unint64_t v11 = *v17;
      *int v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) >= *v11)
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(v11, (uint64_t *)a2);
      unint64_t v11 = (unint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, v19);
    unint64_t v11 = v19 + 1;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      double result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,false>(v10, v19, a3, -v13, a5 & 1);
      unint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  uint64_t v24 = v11 + 1;
  BOOL v26 = v11 == a2 || v24 == a2;
  if (a5)
  {
    if (!v26)
    {
      uint64_t v27 = 0;
      long long v28 = v11;
      do
      {
        unint64_t v30 = *v28;
        unint64_t v29 = v28[1];
        long long v28 = v24;
        if (v29 < v30)
        {
          uint64_t v31 = v27;
          while (1)
          {
            *(unint64_t *)((char *)v11 + v31 + 8) = v30;
            if (!v31) {
              break;
            }
            unint64_t v30 = *(unint64_t *)((char *)v11 + v31 - 8);
            v31 -= 8;
            if (v29 >= v30)
            {
              v32 = (unint64_t *)((char *)v11 + v31 + 8);
              goto LABEL_50;
            }
          }
          v32 = v11;
LABEL_50:
          unint64_t *v32 = v29;
        }
        uint64_t v24 = v28 + 1;
        v27 += 8;
      }
      while (v28 + 1 != a2);
    }
  }
  else if (!v26)
  {
    do
    {
      unint64_t v34 = *v10;
      unint64_t v33 = v10[1];
      uint64_t v10 = v24;
      if (v33 < v34)
      {
        do
        {
          *uint64_t v24 = v34;
          unint64_t v34 = *(v24 - 2);
          --v24;
        }
        while (v33 < v34);
        *uint64_t v24 = v33;
      }
      uint64_t v24 = v10 + 1;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  unint64_t v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    unint64_t v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    unint64_t v5 = (uint64_t *)(a1 + 1);
    do
    {
      unint64_t v3 = (unint64_t *)v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    unint64_t v3 = a1;
    do
    {
      unint64_t v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < (unint64_t *)a2)
  {
    do
      unint64_t v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < (unint64_t *)a2)
  {
    unint64_t v7 = *v3;
    unint64_t v8 = *a2;
    do
    {
      unint64_t *v3 = v8;
      *a2 = v7;
      do
      {
        unint64_t v9 = v3[1];
        ++v3;
        unint64_t v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        unint64_t v10 = *--a2;
        unint64_t v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < (unint64_t *)a2);
  }
  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - 1) = v2;
  return v3;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  do
    unint64_t v4 = a1[++v2];
  while (v4 < v3);
  unint64_t v5 = &a1[v2];
  unint64_t v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      unint64_t v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      unint64_t v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    unint64_t v9 = *a2;
    unint64_t v10 = &a1[v2];
    unint64_t v11 = a2;
    do
    {
      *unint64_t v10 = v9;
      *unint64_t v11 = v4;
      do
      {
        unint64_t v12 = v10[1];
        ++v10;
        unint64_t v4 = v12;
      }
      while (v12 < v3);
      do
      {
        unint64_t v13 = *--v11;
        unint64_t v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    unint64_t v6 = v10 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  *unint64_t v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2);
      unint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        unint64_t v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          unint64_t v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      unint64_t *v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a2, a3);
  unint64_t v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    unint64_t v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      unint64_t v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a2, a3, a4);
  unint64_t v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    unint64_t v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      unint64_t v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        unint64_t v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,fst::LatticeStringRepository<int>::Entry const**>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = v6;
    if (v6 != a3)
    {
      unint64_t v14 = v6;
      do
      {
        unint64_t v15 = *v14;
        if (*v14 < *a1)
        {
          *unint64_t v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v17 = 0;
        unint64_t v18 = *a1;
        uint64_t v19 = a1;
        do
        {
          char v20 = &v19[v17 + 1];
          uint64_t v21 = (2 * v17) | 1;
          uint64_t v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            unint64_t v22 = *v20;
            uint64_t v17 = v21;
          }
          else
          {
            unint64_t v22 = *v20;
            if (*v20 >= v20[1])
            {
              uint64_t v17 = v21;
            }
            else
            {
              unint64_t v22 = v20[1];
              ++v20;
            }
          }
          *uint64_t v19 = v22;
          uint64_t v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *char v20 = v18;
        }
        else
        {
          *char v20 = *v6;
          *unint64_t v6 = v18;
          uint64_t v23 = (char *)v20 - (char *)a1 + 8;
          if (v23 >= 9)
          {
            unint64_t v24 = (((unint64_t)v23 >> 3) - 2) >> 1;
            unint64_t v25 = &a1[v24];
            unint64_t v26 = *v25;
            unint64_t v27 = *v20;
            if (*v25 < *v20)
            {
              do
              {
                *char v20 = v26;
                char v20 = v25;
                if (!v24) {
                  break;
                }
                unint64_t v24 = (v24 - 1) >> 1;
                unint64_t v25 = &a1[v24];
                unint64_t v26 = *v25;
              }
              while (*v25 < v27);
              *char v20 = v27;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (unint64_t *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unint64_t v10 = *v8;
      }
      else
      {
        unint64_t v10 = *v8;
        if (*v8 < v8[1])
        {
          unint64_t v10 = v8[1];
          ++v8;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v12 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t *)(result + 8 * v12);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unint64_t v10 = *v8;
            uint64_t v7 = v12;
          }
          else
          {
            unint64_t v10 = *v8;
            if (*v8 >= v8[1])
            {
              uint64_t v7 = v12;
            }
            else
            {
              unint64_t v10 = v8[1];
              ++v8;
            }
          }
        }
        while (v10 >= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__equal_to &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = a2;
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 1;
    do
    {
      if (v4 == a2) {
        return a2;
      }
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4++;
    }
    while (v5 != v6);
    uint64_t v7 = v4 - 2;
    while (v4 != a2)
    {
      uint64_t v8 = v5;
      uint64_t v5 = *v4;
      if (v8 != *v4)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

void fst::LatticeStringRepository<int>::RebuildHelper(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = (uint64_t **)a2;
  if (a2)
  {
    do
    {
      if (std::__hash_table<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::EntryKey,fst::LatticeStringRepository<int>::EntryEqual,std::allocator<fst::LatticeStringRepository<int>::Entry const*>>::find<fst::LatticeStringRepository<int>::Entry const*>(a3, (uint64_t **)&v4))
      {
        break;
      }
      std::__hash_table<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::EntryKey,fst::LatticeStringRepository<int>::EntryEqual,std::allocator<fst::LatticeStringRepository<int>::Entry const*>>::__emplace_unique_key_args<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::Entry const* const&>((uint64_t)a3, (uint64_t **)&v4, &v4);
      uint64_t v4 = (uint64_t **)*v4;
    }
    while (v4);
  }
}

void *std::__hash_table<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::EntryKey,fst::LatticeStringRepository<int>::EntryEqual,std::allocator<fst::LatticeStringRepository<int>::Entry const*>>::find<fst::LatticeStringRepository<int>::Entry const*>(void *a1, uint64_t **a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *((int *)*a2 + 2);
  uint64_t v4 = **a2;
  unint64_t v5 = v3 + 49109 * v4;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v3 + 49109 * v4;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        uint64_t v11 = result[2];
        if (*(void *)v11 == v4 && *(_DWORD *)(v11 + 8) == v3) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  void *v8;
  void *result;
  unint64_t v10;
  uint64_t v11;

  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *((int *)*a2 + 2);
  uint64_t v4 = **a2;
  unint64_t v5 = v3 + 49109 * v4;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v3 + 49109 * v4;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        uint64_t v11 = result[2];
        if (*(void *)v11 == v4 && *(_DWORD *)(v11 + 8) == v3) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::NormalizeSubset(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"empty subset", 12);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    }
    *a4 = 0;
    *(int32x2_t *)a3 = vdup_n_s32(0x7F800000u);
  }
  else
  {
    memset(&v35, 0, sizeof(v35));
    uint64_t v9 = (uint64_t **)(a1 + 280);
    fst::LatticeStringRepository<int>::ConvertToVector(a1 + 280, *(uint64_t **)(v6 + 8), &v35);
    unint64_t v10 = (v7 - v6) / 24;
    float v12 = *(float *)(*a2 + 16);
    float v11 = *(float *)(*a2 + 20);
    if (v10 >= 2)
    {
      uint64_t v13 = 0;
      unint64_t v14 = v10 - 1;
      do
      {
        uint64_t v15 = *a2 + v13;
        float v16 = *(float *)(v15 + 40);
        float v17 = *(float *)(v15 + 44);
        if ((float)(v12 + v11) >= (float)(v16 + v17))
        {
          if ((float)(v12 + v11) > (float)(v16 + v17) || (v12 >= v16 ? (BOOL v18 = v12 <= v16) : (BOOL v18 = 1), !v18))
          {
            float v11 = *(float *)(v15 + 44);
            float v12 = *(float *)(v15 + 40);
          }
        }
        fst::LatticeStringRepository<int>::ReduceToCommonPrefix((int)v9, *(uint64_t **)(v15 + 32), &v35);
        v13 += 24;
        --v14;
      }
      while (v14);
    }
    *(float *)uint64_t v39 = v12;
    float v38 = v11;
    int v37 = 2139095040;
    int v36 = 2139095040;
    uint64_t v19 = 0;
    unint64_t v20 = v35.__end_ - v35.__begin_;
    if (v10 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v10;
    }
    uint64_t v22 = *a2;
    do
    {
      float v23 = *(float *)(v22 + v19 + 16) - v12;
      float v24 = *(float *)(v22 + v19 + 20) - v11;
      if (v23 == -INFINITY || v24 == -INFINITY)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
          unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v39);
          uint64_t v22 = *a2;
        }
        float v24 = INFINITY;
        float v23 = INFINITY;
      }
      else
      {
        BOOL v27 = v23 == INFINITY;
        if (v24 == INFINITY) {
          BOOL v27 = 1;
        }
        if (v27)
        {
          float v24 = INFINITY;
          float v23 = INFINITY;
        }
      }
      uint64_t v28 = v22 + v19;
      *(float *)(v28 + 16) = v23;
      *(float *)(v28 + 20) = v24;
      uint64_t v29 = fst::LatticeStringRepository<int>::RemovePrefix(v9, *(uint64_t **)(v28 + 8), v20);
      uint64_t v22 = *a2;
      *(void *)(*a2 + v19 + 8) = v29;
      v19 += 24;
      --v21;
    }
    while (v21);
    begin = v35.__begin_;
    if (v35.__end_ == v35.__begin_)
    {
      uint64_t v32 = 0;
      unint64_t v33 = a4;
    }
    else
    {
      unint64_t v31 = 0;
      uint64_t v32 = 0;
      unint64_t v33 = a4;
      do
      {
        uint64_t v32 = fst::LatticeStringRepository<int>::Successor(v9, v32, begin[v31++]);
        begin = v35.__begin_;
      }
      while (v31 < v35.__end_ - v35.__begin_);
    }
    *unint64_t v33 = v32;
    *(float *)a3 = v12;
    *(float *)(a3 + 4) = v11;
    if (begin)
    {
      v35.__end_ = begin;
      operator delete(begin);
    }
  }
}

void sub_1B1E12EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::InitialToStateId(void *a1, uint64_t *a2, void *a3, void *a4, double a5)
{
  v16[0] = a2;
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::find<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*>(a1 + 20, v16);
  if (!v10)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>((char *)__p, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::EpsilonClosure((uint64_t)a1, (uint64_t *)__p);
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ConvertToMinimal((uint64_t)a1, (unsigned int **)__p);
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::NormalizeSubset((uint64_t)a1, __p, (uint64_t)v14, (uint64_t *)&v13 + 1);
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::MinimalToStateId(a1, (uint64_t *)__p, v14[0] + v14[1] + a5);
  }
  float v11 = v10;
  *a3 = v10[5];
  *a4 = v10[4];
  LODWORD(v16[0]) = 0;
  LODWORD(v16[0]) = *((_DWORD *)v10 + 10);
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = *((_DWORD *)v10 + 11);
  if (*(float *)v16 == INFINITY && *(float *)__p == INFINITY && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Zero weight!", 12);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
  }
  return *((unsigned int *)v11 + 6);
}

void sub_1B1E131C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeStringRepository<int>::Concatenate(uint64_t **a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3;
  if (!a2) {
    return (uint64_t)a3;
  }
  uint64_t v4 = a2;
  if (a3)
  {
    std::vector<unsigned int>::size_type v6 = 0;
    memset(&v12, 0, sizeof(v12));
    uint64_t v7 = a3;
    do
    {
      ++v6;
      uint64_t v7 = (void *)*v7;
    }
    while (v7);
    std::vector<int>::resize(&v12, v6);
    uint64_t v8 = 0x3FFFFFFFFFFFFFFFLL;
    end = v12.__end_;
    do
    {
      end[v8] = *((_DWORD *)v3 + 2);
      uint64_t v3 = (void *)*v3;
      --v8;
    }
    while (v3);
    if (end != v12.__begin_)
    {
      unint64_t v10 = 0;
      end = v12.__begin_;
      do
      {
        uint64_t v4 = fst::LatticeStringRepository<int>::Successor(a1, v4, end[v10++]);
        end = v12.__begin_;
      }
      while (v10 < v12.__end_ - v12.__begin_);
    }
    if (end)
    {
      v12.__end_ = end;
      operator delete(end);
    }
  }
  return v4;
}

void sub_1B1E13304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::LatticeStringRepository<int>::ReduceToCommonPrefix(int a1, uint64_t *a2, std::vector<unsigned int> *this)
{
  if (!a2)
  {
    std::vector<unsigned int>::size_type v7 = 0;
    unint64_t v5 = this->__end_ - this->__begin_;
    goto LABEL_17;
  }
  unint64_t v3 = 0;
  uint64_t v4 = a2;
  do
  {
    ++v3;
    uint64_t v4 = (void *)*v4;
  }
  while (v4);
  unint64_t v5 = this->__end_ - this->__begin_;
  if (v3 <= v5)
  {
    std::vector<unsigned int>::size_type v7 = v3;
    if (!v3) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v6 = v3;
    do
    {
      a2 = (uint64_t *)*a2;
      --v6;
    }
    while (v6 > v5);
    std::vector<unsigned int>::size_type v7 = this->__end_ - this->__begin_;
    if (!v5) {
      goto LABEL_17;
    }
  }
  if (v5 < v3) {
    unint64_t v3 = this->__end_ - this->__begin_;
  }
  std::vector<unsigned int>::size_type v8 = v3 - 1;
  do
  {
    if (*((_DWORD *)a2 + 2) != this->__begin_[v8]) {
      std::vector<unsigned int>::size_type v7 = v8;
    }
    a2 = (uint64_t *)*a2;
    --v8;
  }
  while (v8 != -1);
LABEL_17:
  if (v7 != v5) {
    std::vector<int>::resize(this, v7);
  }
}

uint64_t fst::LatticeStringRepository<int>::RemovePrefix(uint64_t **a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3 = (uint64_t)a2;
  if (a3)
  {
    unint64_t v4 = a3;
    memset(&v8, 0, sizeof(v8));
    fst::LatticeStringRepository<int>::ConvertToVector((int)a1, a2, &v8);
    begin = v8.__begin_;
    if (v4 >= v8.__end_ - v8.__begin_)
    {
      uint64_t v3 = 0;
      if (!v8.__begin_) {
        return v3;
      }
      goto LABEL_6;
    }
    uint64_t v3 = 0;
    do
    {
      uint64_t v3 = fst::LatticeStringRepository<int>::Successor(a1, v3, begin[v4++]);
      begin = v8.__begin_;
    }
    while (v4 < v8.__end_ - v8.__begin_);
    if (v8.__begin_)
    {
LABEL_6:
      v8.__end_ = begin;
      operator delete(begin);
    }
  }
  return v3;
}

void sub_1B1E13478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::MinimalToStateId(void *a1, uint64_t *a2, double a3)
{
  v8[0] = a2;
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::find<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*>(a1 + 15, v8);
  if (v5)
  {
    if (*(double *)(*(void *)(*a1 + 8 * *((int *)v5 + 6)) + 48) + -0.1 > a3 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"New cost is less (check the difference is small) ", 49);
      std::vector<unsigned int>::size_type v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    }
  }
  operator new();
}

void sub_1B1E136E8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C405B906368);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::find<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*>(void *a1, uint64_t **a2)
{
  uint64_t v3 = (int *)**a2;
  unint64_t v4 = (int *)(*a2)[1];
  if (v3 == v4)
  {
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v6 = 1;
    do
    {
      unint64_t v5 = *v3 + v5 * v6 + *((void *)v3 + 1);
      v6 *= 23531;
      v3 += 6;
    }
    while (v3 != v4);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v5;
    if (v5 >= *(void *)&v7) {
      unint64_t v10 = v5 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v5;
  }
  float v11 = *(uint64_t ****)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  std::vector<unsigned int> v12 = *v11;
  if (*v11)
  {
    long long v13 = (float *)a1 + 9;
    do
    {
      unint64_t v14 = (unint64_t)v12[1];
      if (v14 == v5)
      {
        if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual::operator()(v13, (unint64_t *)v12[2], *a2))return v12; {
      }
        }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v7) {
            v14 %= *(void *)&v7;
          }
        }
        else
        {
          v14 &= *(void *)&v7 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      std::vector<unsigned int> v12 = (uint64_t **)*v12;
    }
    while (v12);
  }
  return v12;
}

void *std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const* const&>,std::tuple<>>(uint64_t a1, uint64_t **a2, uint64_t a3, void **a4)
{
  uint8x8_t v8 = (int *)**a2;
  unint64_t v9 = (int *)(*a2)[1];
  if (v8 == v9)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 1;
    do
    {
      unint64_t v10 = *v8 + v10 * v11 + *((void *)v8 + 1);
      v11 *= 23531;
      v8 += 6;
    }
    while (v8 != v9);
  }
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual::operator()((float *)(a1 + 36), *((unint64_t **)i + 2), *a2))return i; {
        }
          }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *(void *)i = 0;
  *((void *)i + 1) = v10;
  *((void *)i + 2) = **a4;
  *((void *)i + 3) = 0;
  *((void *)i + 4) = 0;
  *((void *)i + 5) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)i = *v25;
LABEL_43:
    void *v25 = i;
    goto LABEL_44;
  }
  *(void *)i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v26 >= v12) {
        v26 %= v12;
      }
    }
    else
    {
      v26 &= v12 - 1;
    }
    unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_43;
  }
LABEL_44:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1E13AC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeLatticeInsertPhones<fst::LatticeWeightTpl<float>>(kaldi::TransitionModel *a1, uint64_t a2)
{
  uint64_t v4 = fst::HighestNumberedInputSymbol<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2) + 1;
  unsigned int v15 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v13);
  while (1)
  {
    if (!v13)
    {
      if ((int)v15 >= v14) {
        return v4;
      }
LABEL_7:
      uint64_t v5 = v15;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 16))(v13)) {
      break;
    }
    if (!v13) {
      goto LABEL_7;
    }
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v13 + 24))();
LABEL_8:
    if (v5 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 296))(a2, v5, &v12);
      while (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 24))(v12))
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
        *(void *)unint64_t v9 = *(void *)v6;
        uint64_t v10 = *(void *)(v6 + 8);
        int v11 = *(_DWORD *)(v6 + 16);
        if (v9[1]
          && !kaldi::TransitionModel::TransitionIdToHmmState(a1, v9[1])
          && !kaldi::TransitionModel::IsSelfLoop(a1, v9[1]))
        {
          int v7 = kaldi::TransitionModel::TransitionIdToPhone(a1, v9[1]);
          if (v9[0])
          {
            int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
            (*(void (**)(uint64_t))(*(void *)a2 + 208))(a2);
          }
          else
          {
            v9[0] = v7 + v4;
          }
        }
        (*(void (**)(uint64_t, int *))(*(void *)v12 + 88))(v12, v9);
        (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
      }
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
    }
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 32))(v13);
    }
    else {
      ++v15;
    }
  }
  if (v13) {
    (*(void (**)(void))(*(void *)v13 + 8))();
  }
  return v4;
}

void sub_1B1E13E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeLatticeDeletePhones<fst::LatticeWeightTpl<float>>(int a1, uint64_t a2)
{
  unsigned int v13 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v11);
  while (1)
  {
    uint64_t result = v11;
    if (!v11)
    {
      if ((int)v13 >= v12) {
        return result;
      }
LABEL_7:
      uint64_t v6 = v13;
      goto LABEL_8;
    }
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    uint64_t result = v11;
    if (v5) {
      break;
    }
    if (!v11) {
      goto LABEL_7;
    }
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v11 + 24))();
LABEL_8:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 296))(a2, v6, &v10);
    while (!(*(unsigned int (**)(uint64_t))(*(void *)v10 + 24))(v10))
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
      v8[0] = *(void *)v7;
      v8[1] = *(void *)(v7 + 8);
      int v9 = *(_DWORD *)(v7 + 16);
      if (SLODWORD(v8[0]) >= a1) {
        LODWORD(v8[0]) = 0;
      }
      (*(void (**)(uint64_t, void *))(*(void *)v10 + 88))(v10, v8);
      (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
    }
    else {
      ++v13;
    }
  }
  if (v11) {
    return (*(uint64_t (**)(void))(*(void *)v11 + 8))();
  }
  return result;
}

void sub_1B1E14138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::HighestNumberedInputSymbol<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  unsigned int v12 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v10);
  uint64_t v2 = 0;
  while (1)
  {
    if (!v10)
    {
      if ((int)v12 >= v11) {
        return v2;
      }
LABEL_7:
      uint64_t v3 = v12;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10)) {
      break;
    }
    if (!v10) {
      goto LABEL_7;
    }
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v10 + 24))();
LABEL_8:
    unint64_t v9 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v3, v7);
    while (1)
    {
      if (!v7[0])
      {
        if (v9 >= v7[2]) {
          goto LABEL_24;
        }
LABEL_18:
        int v5 = *(_DWORD *)(v7[1] + 20 * v9);
        if ((int)v2 <= v5) {
          uint64_t v2 = v5;
        }
        else {
          uint64_t v2 = v2;
        }
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(void))(*(void *)v7[0] + 24))(v7[0])) {
        break;
      }
      if (!v7[0]) {
        goto LABEL_18;
      }
      int v4 = *(_DWORD *)(*(uint64_t (**)(void))(*(void *)v7[0] + 32))();
      if ((int)v2 <= v4) {
        uint64_t v2 = v4;
      }
      else {
        uint64_t v2 = v2;
      }
      if (v7[0]) {
        (*(void (**)(void))(*(void *)v7[0] + 40))();
      }
      else {
LABEL_21:
      }
        ++v9;
    }
    if (v7[0])
    {
      (*(void (**)(void))(*(void *)v7[0] + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v8) {
      --*v8;
    }
LABEL_26:
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 32))(v10);
    }
    else {
      ++v12;
    }
  }
  if (v10) {
    (*(void (**)(void))(*(void *)v10 + 8))();
  }
  return v2;
}

void sub_1B1E14444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void StopNgramStats::StopNgramStats(StopNgramStats *this, Vocab *a2, SubVocab *a3, int a4)
{
  NgramCounts<unsigned long>::NgramCounts(this, a2, a4);
  *int v5 = &unk_1F0A33AF0;
  v5[22] = a3;
}

void *StopNgramStats::incrementCounts(void *this, unsigned int *a2, uint64_t a3)
{
  if (*a2 != -1)
  {
    int v4 = a2;
    int v5 = this + 20;
    do
    {
      char v7 = 0;
      this = Trie<unsigned int,unsigned long>::insertTrie(v5, v4, &v7);
      unsigned int v6 = v4[1];
      ++v4;
      this[1] += a3;
    }
    while (v6 != -1);
  }
  return this;
}

uint64_t StopNgramStats::countSentence(StopNgramStats *this, Vocab *a2, uint64_t a3)
{
  uint64_t v6 = Vocab::length((uint64_t)a2, (const unsigned int *)a2);
  *(_DWORD *)&v14[8] = 0;
  *(void *)int v14 = (v6 + 1);
  if (v6 != -1) {
    Array<unsigned int>::alloc();
  }
  int v7 = 0;
  uint8x8_t v8 = a2;
  uint64_t v9 = 0xFFFFFFFFLL;
  do
  {
    *(_DWORD *)(*(void *)&v14[4] + 4 * v7) = *(_DWORD *)v8;
    *(_DWORD *)(*(void *)&v14[4] + 4 * (v7 + 1)) = -1;
    unsigned int v10 = *((_DWORD *)this + 39);
    if (v7 + 1 >= v10) {
      StopNgramStats::incrementCounts(this, (unsigned int *)(*(void *)&v14[4] + 4 * (int)(v7 + 1 - v10)), a3);
    }
    else {
      StopNgramStats::incrementCounts(this, *(unsigned int **)&v14[4], a3);
    }
    if (!(*(uint64_t (**)(void, void))(**((void **)this + 22) + 32))(*((void *)this + 22), *(unsigned int *)v8))*(_DWORD *)(*(void *)&v14[4] + 4 * v7++) = *(_DWORD *)v8; {
    uint8x8_t v8 = (Vocab *)((char *)v8 + 4);
    }
    --v9;
  }
  while (v9);
  *((double *)this + 8) = *((double *)this + 8) + (double)0xFFFFFFFF;
  unsigned int v11 = *(_DWORD *)a2;
  if (v11 == *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 104))(*((void *)this + 3))) {
    *((double *)this + 8) = *((double *)this + 8) + -1.0;
  }
  int v12 = *((_DWORD *)a2 + 4294967294);
  if (v12 == *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 120))(*((void *)this + 3))) {
    *((double *)this + 8) = *((double *)this + 8) + -1.0;
  }
  *((double *)this + 7) = *((double *)this + 7) + 1.0;
  return v6;
}

void sub_1B1E147B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    MEMORY[0x1B3EA8630](a11, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void StopNgramStats::~StopNgramStats(StopNgramStats *this)
{
  *(void *)this = &unk_1F0A32FE0;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A32FE0;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t StopNgramStats::countSentence(StopNgramStats *this, const unsigned int *a2)
{
  return (*(uint64_t (**)(StopNgramStats *, const unsigned int *, uint64_t))(*(void *)this + 136))(this, a2, 1);
}

void *quasar::QualityEstimatorOptions::options@<X0>(quasar::QualityEstimatorOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x48uLL);
  a2[1] = result + 9;
  a2[2] = result + 9;
  *uint64_t result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 336;
  result[3] = (char *)this + 496;
  result[4] = (char *)this + 656;
  result[5] = (char *)this + 816;
  result[6] = (char *)this + 976;
  result[7] = (char *)this + 1136;
  result[8] = (char *)this + 1296;
  *a2 = result;
  return result;
}

void quasar::QualityEstimatorBlock::init(std::string *this)
{
  uint64_t v2 = (const std::string *)quasar::OptionValue<std::string>::value(this[1].__r_.__value_.__r.__words);
  std::string::operator=(this + 67, v2);
  uint64_t v3 = (const std::string *)quasar::OptionValue<std::string>::value(&this[7].__r_.__value_.__r.__words[2]);
  std::string::operator=(this + 68, v3);
  if ((SHIBYTE(this[67].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this[67].__r_.__value_.__s + 23)) {
      goto LABEL_3;
    }
LABEL_16:
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "src-locale not present in the config");
    goto LABEL_19;
  }
  if (!this[67].__r_.__value_.__l.__size_) {
    goto LABEL_16;
  }
LABEL_3:
  if ((SHIBYTE(this[68].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this[68].__r_.__value_.__s + 23)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (!this[68].__r_.__value_.__l.__size_)
  {
LABEL_18:
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "tgt-locale not present in the config");
LABEL_19:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v14);
  }
LABEL_5:
  unsigned int v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  int v4 = (const std::string *)quasar::OptionValue<std::string>::value(&this[14].__r_.__value_.__l.__size_);
  kaldi::SplitStringToVector(v4, ",", 1, (uint64_t)&v11);
  long long v10 = 0uLL;
  int v5 = v11;
  for (i = v12; v5 != i; v5 += 3)
  {
    quasar::QualityEstimatorFeature::create(v5, &v14);
    long long v7 = v14;
    long long v14 = 0uLL;
    uint8x8_t v8 = (std::__shared_weak_count *)*((void *)&v10 + 1);
    long long v10 = v7;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      if (*((void *)&v14 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
      }
    }
    (*(void (**)(void, std::string::value_type *))(*(void *)v10 + 24))(v10, &this->__r_.__value_.__s.__data_[8]);
    std::vector<std::shared_ptr<quasar::QualityEstimatorFeature>>::push_back[abi:ne180100]((uint64_t *)&this[66], &v10);
  }
  if (quasar::gLogLevel > 4)
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"QE handler contains ", 20);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" features", 9);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v14);
  }
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  *(void *)&long long v14 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
}

void **std::vector<std::shared_ptr<quasar::QualityEstimatorFeature>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<quasar::QualityEstimatorFeature>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *long long v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1E14D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'quasar::QualityEstimatorBlock::init(quasar::QualityEstimatorBlock *this)
{
}

void quasar::QualityEstimatorBlock::addQEFeatureScoresToMetaInfo(uint64_t a1, uint64_t a2, void *a3)
{
  quasar::PTree::PTree((quasar::PTree *)v19);
  quasar::PTree::PTree((quasar::PTree *)v18);
  long long v7 = (float *)*a3;
  unint64_t v5 = (float *)(a3 + 1);
  unint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      float v8 = v6[14];
      LODWORD(__p) = quasar::getType(v4, v8);
      std::to_string(&v13, v8);
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      char v17 = 1;
      quasar::PTree::putChild((uint64_t)v18, (uint64_t)(v6 + 8), (uint64_t)&__p, 1);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      uint64_t v9 = (float *)*((void *)v6 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = *(float **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (float *)*((void *)v6 + 2);
          BOOL v11 = *(void *)v10 == (void)v6;
          unint64_t v6 = v10;
        }
        while (!v11);
      }
      unint64_t v6 = v10;
    }
    while (v10 != v5);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "quality_features");
  quasar::PTree::putChild((uint64_t)v19, (uint64_t)&__p, (uint64_t)v18, 1);
  if (v13.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  quasar::PTree::writeJson();
}

void sub_1B1E14F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  quasar::PTree::~PTree((quasar::PTree *)(v15 - 208));
  quasar::PTree::~PTree((quasar::PTree *)(v15 - 144));
  _Unwind_Resume(a1);
}

uint64_t quasar::QualityEstimatorBlock::estimateQuality@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(void *)(a2 + 8) != *(void *)a2)
  {
    quasar::TranslationPhraseInternal::convertTokensToString(v24, *(quasar::TranslationPhraseInternal **)a2);
    if (quasar::gLogLevel >= 5)
    {
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      *(_OWORD *)__p = 0u;
      long long v8 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Raw hypothesis : ", 17);
      if ((v25 & 0x80u) == 0) {
        int v4 = v24;
      }
      else {
        int v4 = (uint64_t *)v24[0];
      }
      if ((v25 & 0x80u) == 0) {
        uint64_t v5 = v25;
      }
      else {
        uint64_t v5 = v24[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    quasar::getWordBoundarySeparatedString((char *)v24, (std::vector<std::string> *)__p);
    quasar::QualityEstimatorBlock::cleanICUTokens((uint64_t *)__p, v6);
  }
  return result;
}

void sub_1B1E15490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::string>::destroy((uint64_t)&a18, a19);
  __p = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v29 - 113) < 0) {
    operator delete(*(void **)(v29 - 136));
  }
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::QualityEstimatorBlock::cleanICUTokens(uint64_t *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  kaldi::JoinVectorToString(a1, " ", 1, &v3);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v2, "  *", 0);
}

void sub_1B1E156B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a10);
  if (*(char *)(v23 - 25) < 0) {
    operator delete(*(void **)(v23 - 48));
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void quasar::QualityEstimatorBlock::processBody(quasar::QualityEstimatorBlock *this)
{
  uint64_t v2 = (quasar::QualityEstimatorBlock *)((char *)this + 1472);
  Value = (void *)quasar::ProcessingInput::getValue((quasar::QualityEstimatorBlock *)((char *)this + 1472));
  if (*Value == Value[1])
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "empty source input received");
  }
  else
  {
    uint64_t v4 = (void *)quasar::ProcessingInput::getValue((quasar::QualityEstimatorBlock *)((char *)this + 1528));
    if (*v4 != v4[1])
    {
      memset(&__str, 0, sizeof(__str));
      uint64_t v5 = quasar::ProcessingInput::getValue(v2);
      unint64_t v6 = *(const void ***)(*(void *)v5 + 136);
      for (i = *(const void ***)(*(void *)v5 + 144); v6 != i; v6 += 17)
      {
        if (*((char *)v6 + 23) >= 0) {
          size_t v8 = *((unsigned __int8 *)v6 + 23);
        }
        else {
          size_t v8 = (size_t)v6[1];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
        if ((SBYTE7(v20) & 0x80u) == 0) {
          long long v9 = __p;
        }
        else {
          long long v9 = (void **)__p[0];
        }
        if (v8)
        {
          if (*((char *)v6 + 23) >= 0) {
            long long v10 = v6;
          }
          else {
            long long v10 = *v6;
          }
          memmove(v9, v10, v8);
        }
        *(_WORD *)((char *)v9 + v8) = 32;
        if ((SBYTE7(v20) & 0x80u) == 0) {
          long long v11 = __p;
        }
        else {
          long long v11 = (void **)__p[0];
        }
        if ((SBYTE7(v20) & 0x80u) == 0) {
          std::string::size_type v12 = BYTE7(v20);
        }
        else {
          std::string::size_type v12 = (std::string::size_type)__p[1];
        }
        std::string::append(&__str, (const std::string::value_type *)v11, v12);
        if (SBYTE7(v20) < 0) {
          operator delete(__p[0]);
        }
      }
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      std::string::basic_string((std::string *)__p, &__str, 0, size - 1, (std::allocator<char> *)v17);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      __str.__r_.__value_.__r.__words[2] = v20;
      if (quasar::gLogLevel >= 5)
      {
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Raw source : ", 13);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v16 = __str.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_str, v16);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      quasar::getWordBoundarySeparatedString((char *)&__str, (std::vector<std::string> *)__p);
      quasar::QualityEstimatorBlock::cleanICUTokens((uint64_t *)__p, v17);
    }
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "empty nbest input received");
  }
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void non-virtual thunk to'quasar::QualityEstimatorBlock::processBody(quasar::QualityEstimatorBlock *this)
{
}

uint64_t quasar::QualityEstimatorBlock::minConfigVersion(quasar::QualityEstimatorBlock *this)
{
  return 35;
}

uint64_t virtual thunk to'quasar::QualityEstimatorBlock::minConfigVersion(quasar::QualityEstimatorBlock *this)
{
  return 35;
}

void quasar::ConfiguredProcessingBlock<quasar::QualityEstimatorOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  long long v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      unint64_t v6 = *v4;
      long long v7 = (std::__shared_weak_count *)a2[1];
      size_t v8 = *a2;
      long long v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v10;
  }
  if (v4)
  {
    long long v11 = v4;
    operator delete(v4);
  }
}

void sub_1B1E15CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::QualityEstimatorOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::QualityEstimatorOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::QualityEstimatorOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::QualityEstimatorBlock::~QualityEstimatorBlock(quasar::QualityEstimatorBlock *this)
{
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 1656));
}

{
  uint64_t v1;
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 1656));
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::QualityEstimatorBlock::blockType(quasar::QualityEstimatorBlock *this)
{
  return "QualityEstimatorBlock";
}

void *quasar::QualityEstimatorBlock::inputs@<X0>(quasar::QualityEstimatorBlock *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *uint64_t result = (char *)this + 1472;
  result[1] = (char *)this + 1528;
  *a2 = result;
  return result;
}

void *non-virtual thunk to'quasar::QualityEstimatorBlock::inputs@<X0>(quasar::QualityEstimatorBlock *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *uint64_t result = (char *)this + 8;
  result[1] = (char *)this + 64;
  *a2 = result;
  return result;
}

void non-virtual thunk to'quasar::QualityEstimatorBlock::~QualityEstimatorBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this + 24);
}

{
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock(this + 24);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::QualityEstimatorBlock::~QualityEstimatorBlock(quasar::QualityEstimatorBlock *this)
{
  uint64_t v2 = (char **)(v1 + 1656);
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v1;
  uint64_t vars8;

  uint64_t v1 = (char **)((char *)this + *(void *)(*(void *)this - 24));
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 207);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::QualityEstimatorBlock::blockType(quasar::QualityEstimatorBlock *this)
{
  return "QualityEstimatorBlock";
}

void quasar::QualityEstimatorBlock::~QualityEstimatorBlock(quasar::QualityEstimatorBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[5];
  *((void *)this + 183) = a2[6];
  if (*((char *)this + 1655) < 0) {
    operator delete(*((void **)this + 204));
  }
  if (*((char *)this + 1631) < 0) {
    operator delete(*((void **)this + 201));
  }
  unint64_t v6 = (void **)((char *)this + 1584);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = (void **)((char *)this + 1560);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 1551) < 0) {
    operator delete(*((void **)this + 191));
  }
  unint64_t v6 = (void **)((char *)this + 1504);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 1495) < 0) {
    operator delete(*((void **)this + 184));
  }
  uint64_t v5 = a2[1];
  *(void *)this = v5;
  *(void *)((char *)this + *(void *)(v5 - 24)) = a2[2];
  quasar::QualityEstimatorOptions::~QualityEstimatorOptions((quasar::QualityEstimatorBlock *)((char *)this + 8));
}

uint64_t std::vector<std::shared_ptr<quasar::QualityEstimatorFeature>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::QualityEstimatorFeature>>,std::reverse_iterator<std::shared_ptr<quasar::QualityEstimatorFeature>*>,std::reverse_iterator<std::shared_ptr<quasar::QualityEstimatorFeature>*>,std::reverse_iterator<std::shared_ptr<quasar::QualityEstimatorFeature>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::QualityEstimatorFeature>>,std::reverse_iterator<std::shared_ptr<quasar::QualityEstimatorFeature>*>,std::reverse_iterator<std::shared_ptr<quasar::QualityEstimatorFeature>*>,std::reverse_iterator<std::shared_ptr<quasar::QualityEstimatorFeature>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::QualityEstimatorFeature>>,std::reverse_iterator<std::shared_ptr<quasar::QualityEstimatorFeature>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::QualityEstimatorFeature>>,std::reverse_iterator<std::shared_ptr<quasar::QualityEstimatorFeature>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

_OWORD *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string,float>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *quasar::DumpBlockOptions::options@<X0>(quasar::DumpBlockOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x20uLL);
  a2[1] = result + 4;
  a2[2] = result + 4;
  *uint64_t result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 320;
  result[3] = (char *)this + 480;
  *a2 = result;
  return result;
}

void quasar::DumpBlock::process(void *a1, uint64_t a2, quasar::MetaInfo::Impl ***a3)
{
  v53[2] = *MEMORY[0x1E4F143B8];
  memset(&v51, 0, sizeof(v51));
  long long v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    uint64_t v5 = a1 + 23;
    v46 = a1 + 41;
    uint64_t v6 = a1 + 61;
    while (!*(unsigned char *)quasar::OptionValue<BOOL>::value(v5))
    {
      quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v50, (quasar::TranslationPhraseInternal *)v3);
      std::vector<std::string>::pointer end = v51.__end_;
      if (v51.__end_ >= v51.__end_cap_.__value_)
      {
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_ - (char *)v51.__begin_) >> 3);
        unint64_t v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3) > v28) {
          unint64_t v28 = 0x5555555555555556 * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v29 = v28;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v51.__end_cap_;
        if (v29) {
          long long v30 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v51.__end_cap_, v29);
        }
        else {
          long long v30 = 0;
        }
        long long v34 = v30 + v27;
        __v.__first_ = v30;
        __v.__begin_ = v34;
        __v.__end_cap_.__value_ = &v30[v29];
        long long v35 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
        v34->__r_.__value_.__r.__words[2] = v50.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
        memset(&v50, 0, sizeof(v50));
        __v.__end_ = v34 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v51, &__v);
        int v36 = v51.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v51.__end_ = v36;
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_48;
        }
        long long v33 = (void *)v50.__r_.__value_.__r.__words[0];
LABEL_47:
        operator delete(v33);
        goto LABEL_48;
      }
      long long v22 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
      v51.__end_->__r_.__value_.__r.__words[2] = v50.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v22;
      v51.__end_ = end + 1;
LABEL_48:
      if (*(_DWORD *)quasar::OptionValue<int>::value(v6))
      {
        std::vector<std::string>::pointer begin = v51.__begin_;
        std::vector<std::string>::pointer v37 = v51.__end_;
        v3 += 25;
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)begin) >> 3) >= *(int *)quasar::OptionValue<int>::value(v6)
          || v3 == v4)
        {
          goto LABEL_56;
        }
      }
      else
      {
        v3 += 25;
        if (v3 == v4) {
          goto LABEL_56;
        }
      }
    }
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v49, (quasar::TranslationPhraseInternal *)v3);
    uint64_t v7 = quasar::OptionValue<std::string>::value(v46);
    int v8 = *(char *)(v7 + 23);
    if (v8 >= 0) {
      uint64_t v9 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)v7;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      std::string::size_type v10 = *(void *)(v7 + 8);
    }
    long long v11 = std::string::append(&v49, v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    quasar::MetaInfo::json(v3 + 24, __p);
    if ((v48 & 0x80u) == 0) {
      char v13 = __p;
    }
    else {
      char v13 = (void **)__p[0];
    }
    if ((v48 & 0x80u) == 0) {
      std::string::size_type v14 = v48;
    }
    else {
      std::string::size_type v14 = (std::string::size_type)__p[1];
    }
    long long v15 = std::string::append(&v50, (const std::string::value_type *)v13, v14);
    std::string::size_type v16 = (char *)v15->__r_.__value_.__r.__words[0];
    v53[0] = v15->__r_.__value_.__l.__size_;
    *(void *)((char *)v53 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
    char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::vector<std::string>::pointer v18 = v51.__end_;
    if (v51.__end_ >= v51.__end_cap_.__value_)
    {
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_ - (char *)v51.__begin_) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3) > v24) {
        unint64_t v24 = 0x5555555555555556 * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v24;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v51.__end_cap_;
      if (v25) {
        long long v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v51.__end_cap_, v25);
      }
      else {
        long long v26 = 0;
      }
      long long v31 = v26 + v23;
      __v.__first_ = v26;
      __v.__begin_ = v31;
      __v.__end_cap_.__value_ = &v26[v25];
      std::string::size_type v32 = v53[0];
      v31->__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      v31->__r_.__value_.__l.__size_ = v32;
      *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v53 + 7);
      *((unsigned char *)&v31->__r_.__value_.__s + 23) = v17;
      v53[0] = 0;
      *(void *)((char *)v53 + 7) = 0;
      __v.__end_ = v31 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v51, &__v);
      long long v20 = v51.__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    }
    else
    {
      std::string::size_type v19 = v53[0];
      v51.__end_->__r_.__value_.__l.__data_ = v16;
      v18->__r_.__value_.__l.__size_ = v19;
      *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v53 + 7);
      *((unsigned char *)&v18->__r_.__value_.__s + 23) = v17;
      long long v20 = v18 + 1;
    }
    v51.__end_ = v20;
    if ((char)v48 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
    long long v33 = (void *)v49.__r_.__value_.__r.__words[0];
    goto LABEL_47;
  }
LABEL_56:
  memset(&__v, 0, 24);
  __v.__begin_ = (std::__split_buffer<std::string>::pointer)std::vector<quasar::TranslationPhraseInternal>::__emplace_back_slow_path<>((uint64_t *)&__v);
  memset(&v50, 0, sizeof(v50));
  uint64_t v40 = quasar::OptionValue<std::string>::value(a1 + 3);
  if (*(char *)(v40 + 23) >= 0) {
    v41 = (const char *)v40;
  }
  else {
    v41 = *(const char **)v40;
  }
  kaldi::JoinVectorToString<std::string>((uint64_t *)&v51, v41, (uint64_t)&v50);
  std::__split_buffer<std::string>::pointer v42 = __v.__begin_;
  std::string::size_type v43 = __v.__begin_[-3].__r_.__value_.__r.__words[2];
  if (v43 >= __v.__begin_[-2].__r_.__value_.__r.__words[0])
  {
    uint64_t v44 = std::vector<quasar::TranslationTokenInternal>::__emplace_back_slow_path<std::string &>((uint64_t *)&__v.__begin_[-3].__r_.__value_.__l.__size_, (uint64_t)&v50);
  }
  else
  {
    std::allocator<quasar::TranslationTokenInternal>::construct[abi:ne180100]<quasar::TranslationTokenInternal,std::string &>(LODWORD(__v.__begin_) - 48, (std::string *)__v.__begin_[-3].__r_.__value_.__r.__words[2], (uint64_t)&v50);
    uint64_t v44 = v43 + 136;
    v42[-3].__r_.__value_.__r.__words[2] = v43 + 136;
  }
  v42[-3].__r_.__value_.__r.__words[2] = v44;
  quasar::ProcessingBlock::send((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)&__v, 0);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1B1E16878(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t *__pa,std::__split_buffer<std::wstring> *a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  *(void *)(v33 - 56) = v32;
  if (a28 < 0) {
    operator delete(__pa);
  }
  __pa = &a32;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  __pa = (uint64_t *)&a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t kaldi::JoinVectorToString<std::string>(uint64_t *a1, const char *a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v20);
  uint64_t v6 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = v6 + v7;
      int v10 = *(char *)(v9 + 23);
      if (v10 >= 0) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = *(void *)v9;
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
      }
      else {
        uint64_t v12 = *(void *)(v9 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v11, v12);
      ++v8;
      uint64_t v6 = *a1;
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      if (v8 < v13)
      {
        size_t v14 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a2, v14);
        uint64_t v6 = *a1;
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      }
      v7 += 24;
    }
    while (v8 < v13);
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = v18;
  long long v15 = (void *)MEMORY[0x1E4FBA408];
  *(void *)(a3 + 16) = v19;
  v20[0] = *v15;
  uint64_t v16 = v15[9];
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = v15[8];
  v21[0] = v16;
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v23);
}

void sub_1B1E16B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'quasar::DumpBlock::process(void *a1, uint64_t a2, quasar::MetaInfo::Impl ***a3)
{
}

uint64_t quasar::DumpBlock::minConfigVersion(quasar::DumpBlock *this)
{
  return 240;
}

uint64_t virtual thunk to'quasar::DumpBlock::minConfigVersion(quasar::DumpBlock *this)
{
  return 240;
}

void quasar::ConfiguredProcessingBlock<quasar::DumpBlockOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  long long v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      unint64_t v8 = *a2;
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v10;
  }
  if (v4)
  {
    uint64_t v11 = v4;
    operator delete(v4);
  }
}

void sub_1B1E16CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::DumpBlockOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::DumpBlockOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::DumpBlockOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::DumpBlock::~DumpBlock(quasar::DumpBlock *this)
{
  *(void *)this = &unk_1F0A22DF0;
  uint64_t v1 = (char **)((char *)this + 632);
  *((void *)this + 79) = &unk_1F0A22E78;
  quasar::DumpBlockOptions::~DumpBlockOptions((quasar::DumpBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
}

{
  char **v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0A22DF0;
  uint64_t v1 = (char **)((char *)this + 632);
  *((void *)this + 79) = &unk_1F0A22E78;
  quasar::DumpBlockOptions::~DumpBlockOptions((quasar::DumpBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::DumpBlock::blockType(quasar::DumpBlock *this)
{
  return "DumpBlock";
}

void virtual thunk to'quasar::DumpBlock::~DumpBlock(quasar::DumpBlock *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *uint64_t v1 = &unk_1F0A22DF0;
  uint64_t v2 = (char **)(v1 + 79);
  v1[79] = &unk_1F0A22E78;
  quasar::DumpBlockOptions::~DumpBlockOptions((quasar::DumpBlockOptions *)(v1 + 1));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F0A22DF0;
  *((void *)v1 + 79) = &unk_1F0A22E78;
  quasar::DumpBlockOptions::~DumpBlockOptions((quasar::DumpBlockOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 79);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::DumpBlock::blockType(quasar::DumpBlock *this)
{
  return "DumpBlock";
}

void quasar::DumpBlockOptions::~DumpBlockOptions(quasar::DumpBlockOptions *this)
{
  *(void *)this = &unk_1F0A53288;
  *((void *)this + 60) = &unk_1F0A51EC8;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((void *)this + 60) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  if (*((char *)this + 535) < 0) {
    operator delete(*((void **)this + 64));
  }
  if (*((char *)this + 511) < 0) {
    operator delete(*((void **)this + 61));
  }
  *((void *)this + 40) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 456, *((void **)this + 58));
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  *((void *)this + 40) = &unk_1F0A52FB8;
  long long v3 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  *((void *)this + 22) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 296, *((char **)this + 38));
  *((void *)this + 22) = &unk_1F0A52FB8;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 2) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  *((void *)this + 2) = &unk_1F0A52FB8;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::__emplace_back_slow_path<>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x147AE147AE147AELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0x8F5C28F5C28F5C29 * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0xA3D70A3D70A3D7) {
    unint64_t v7 = 0x147AE147AE147AELL;
  }
  else {
    unint64_t v7 = v4;
  }
  long long v15 = a1 + 2;
  if (v7) {
    unint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(v5, v7);
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = (quasar::TranslationPhraseInternal *)&v8[200 * v3];
  size_t v14 = &v8[200 * v7];
  quasar::TranslationPhraseInternal::TranslationPhraseInternal(v12);
  unint64_t v13 = (char *)v12 + 200;
  std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1B1E172D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TranslationTokenInternal>::__emplace_back_slow_path<std::string &>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v6 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v6 = v4;
  }
  size_t v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>>((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  int v10 = v7;
  uint64_t v11 = (std::string *)&v7[136 * v3];
  unint64_t v13 = &v7[136 * v6];
  std::allocator<quasar::TranslationTokenInternal>::construct[abi:ne180100]<quasar::TranslationTokenInternal,std::string &>(a1 + 16, v11, a2);
  uint64_t v12 = &v11[5].__r_.__value_.__s.__data_[16];
  std::vector<quasar::TranslationTokenInternal>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1E173E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::TranslationTokenInternal>::construct[abi:ne180100]<quasar::TranslationTokenInternal,std::string &>(int a1, std::string *this, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v4 = *(std::string *)a3;
  }
  std::string v5 = v4;
  memset(&v4, 0, sizeof(v4));
  __int16 v6 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __p = 0;
  uint64_t v10 = 3212836864;
  int v11 = -1;
  quasar::TranslationTokenInternal::TranslationTokenInternal(this, (const quasar::TranslationToken *)&v5);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1B1E174C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *quasar::TranslationTokenInternal::TranslationTokenInternal(std::string *this, const quasar::TranslationToken *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  __int16 v5 = *((_WORD *)a2 + 12);
  this[1].__r_.__value_.__l.__size_ = 0;
  LOWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[1].__r_.__value_.__l.__size_, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  std::string::size_type v6 = *((void *)a2 + 7);
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 16);
  this[2].__r_.__value_.__l.__size_ = v6;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = -1;
  return this;
}

void sub_1B1E17584(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::WriteBasicType<unsigned int>(void *a1, int a2)
{
  if (a2)
  {
    std::ostream::put();
    uint64_t result = std::ostream::write();
  }
  else
  {
    long long v4 = (void *)std::ostream::operator<<();
    uint64_t result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteBasicType.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B1E17664(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1E176D8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::SplitEventMap::SplitEventMap(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = &unk_1F0A47538;
  *(_DWORD *)(a1 + 8) = a2;
  kaldi::ConstIntegerSet<int>::ConstIntegerSet(a1 + 16, (uint64_t)a3);
  *(void *)(a1 + 80) = a4;
  *(void *)(a1 + 88) = a5;
  uint64_t v9 = (int *)a3[1];
  if ((int *)*a3 != v9)
  {
    uint64_t v10 = (int *)(*a3 + 4);
    do
    {
      if (v10 == v9) {
        break;
      }
      int v12 = *(v10 - 1);
      int v11 = *v10++;
    }
    while (v11 >= v12);
  }
  return a1;
}

void sub_1B1E17784(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::EventMap *>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    std::string::size_type v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1E17800(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<kaldi::EventMap *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    long long v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B1E17878(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 *std::vector<std::vector<int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<int> const*>,std::__wrap_iter<std::vector<int> const*>>(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        uint64_t v21 = a3 + 24 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - (void)a2) >> 3);
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>(v9, v21, a4, *(void **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::vector<int>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)v5 + 24 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v23, a3, v21, (char *)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v23 = v19;
      unint64_t v24 = &v19[24 * v15];
      unint64_t v25 = v24;
      long long v26 = &v19[24 * v18];
      std::__split_buffer<std::vector<int>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<int> const*>>(&v23, a3, a5);
      __int16 v5 = (__n128 *)std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1B1E17A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

__n128 *std::vector<std::vector<int>>::__move_range(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (__n128 *)((char *)a2 + v6 - a4);
  uint64_t v8 = (__n128 *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    uint64_t v8 = *(__n128 **)(a1 + 8);
    do
    {
      v8->n128_u64[0] = 0;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      __n128 *v8 = *v9;
      v8[1].n128_u64[0] = v9[1].n128_u64[0];
      v9->n128_u64[0] = 0;
      v9->n128_u64[1] = 0;
      v9[1].n128_u64[0] = 0;
      uint64_t v8 = (__n128 *)((char *)v8 + 24);
      uint64_t v9 = (__n128 *)((char *)v9 + 24);
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::vector<int> *,std::vector<int> *,std::vector<int> *,0>(a2, v7, v6);
}

void *std::__split_buffer<std::vector<int>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<int> const*>>(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  long long v4 = (void *)result[2];
  if (a3)
  {
    uint64_t v6 = &v4[3 * a3];
    uint64_t v7 = 24 * a3;
    do
    {
      *long long v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      v4 += 3;
      a2 += 24;
      v7 -= 24;
    }
    while (v7);
    long long v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1B1E17B40(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(v7, (uint64_t)a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *long long v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      long long v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1E17C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::vector<int> *,std::vector<int> *,std::vector<int> *,0>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v6 = (__n128 *)((char *)v6 - 24);
      a3 -= 24;
      std::vector<int>::__move_assign(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v4 = a4;
  char v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *long long v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)long long v4 = *(_OWORD *)a2;
      v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    char v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void sub_1B1E18334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a36, a37);

  quasar::LDContext::~LDContext(v37);
  _Unwind_Resume(a1);
}

void sub_1B1E1867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Block_object_dispose(&a16, 8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v24, a23);

  _Unwind_Resume(a1);
}

uint64_t std::optional<std::set<quasar::language_detector::Locale>>::operator=[abi:ne180100]<std::set<quasar::language_detector::Locale>,void>(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1, a2);
  }
  else
  {
    *(void *)a1 = *a2;
    unint64_t v3 = a2 + 1;
    uint64_t v4 = a2[1];
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = a1 + 8;
    uint64_t v6 = a2[2];
    *(void *)(a1 + 16) = v6;
    if (v6)
    {
      *(void *)(v4 + 16) = v5;
      *a2 = v3;
      void *v3 = 0;
      a2[2] = 0;
    }
    else
    {
      *(void *)a1 = v5;
    }
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t std::optional<quasar::language_detector::Locale>::operator=[abi:ne180100]<quasar::language_detector::Locale,void>(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    uint64_t v5 = (void **)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*v5);
    }
    long long v6 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
    *((unsigned char *)a2 + 47) = 0;
    *((unsigned char *)a2 + 24) = 0;
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v7;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v8 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v8;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

std::vector<std::pair<std::string, std::string>> *std::optional<std::vector<quasar::language_detector::Locale>>::operator=[abi:ne180100]<std::vector<quasar::language_detector::Locale>,void>(std::vector<std::pair<std::string, std::string>> *this, std::vector<std::pair<std::string, std::string>> *a2)
{
  if (LOBYTE(this[1].__begin_))
  {
    std::vector<std::pair<std::string,std::string>>::__vdeallocate(this);
    *(_OWORD *)&this->__begin_ = *(_OWORD *)&a2->__begin_;
    this->__end_cap_.__value_ = a2->__end_cap_.__value_;
    a2->__begin_ = 0;
    a2->__end_ = 0;
    a2->__end_cap_.__value_ = 0;
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    *this = *a2;
    a2->__begin_ = 0;
    a2->__end_ = 0;
    a2->__end_cap_.__value_ = 0;
    LOBYTE(this[1].__begin_) = 1;
  }
  return this;
}

void sub_1B1E18DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  _Unwind_Resume(a1);
}

void sub_1B1E190B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B1E19290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<std::set<quasar::language_detector::Locale>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    std::set<quasar::language_detector::Locale>::set[abi:ne180100]((uint64_t *)a1, a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1B1E19478(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<quasar::language_detector::Locale>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<quasar::language_detector::Locale>::insert[abi:ne180100]<std::__tree_const_iterator<quasar::language_detector::Locale,std::__tree_node<quasar::language_detector::Locale,void *> *,long>>(a1, *(unsigned __int8 ***)a2, (unsigned __int8 **)(a2 + 8));
  return a1;
}

void sub_1B1E194D8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<quasar::language_detector::Locale>::insert[abi:ne180100]<std::__tree_const_iterator<quasar::language_detector::Locale,std::__tree_node<quasar::language_detector::Locale,void *> *,long>>(uint64_t *result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<quasar::language_detector::Locale>::__emplace_hint_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      long long v7 = v4[1];
      if (v7)
      {
        do
        {
          long long v8 = (unsigned __int8 **)v7;
          long long v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (unsigned __int8 **)v4[2];
          BOOL v9 = *v8 == (unsigned __int8 *)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<quasar::language_detector::Locale>::__emplace_hint_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 **a3, long long *a4)
{
  long long v6 = std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>(a1, a2, &v12, &v11, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    std::__tree<quasar::language_detector::Locale>::__construct_node<quasar::language_detector::Locale const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

unsigned __int8 **std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>(void *a1, uint64_t *a2, unsigned __int8 ***a3, uint64_t *a4, unsigned __int8 **a5)
{
  BOOL v9 = (unsigned __int8 **)(a1 + 1);
  if (a1 + 1 != a2
    && !quasar::language_detector::Locale::operator<((unsigned __int8 *)a5, (unsigned __int8 **)a2 + 4))
  {
    if (!quasar::language_detector::Locale::operator<((unsigned __int8 *)a2 + 32, a5))
    {
      *a3 = (unsigned __int8 **)a2;
      *a4 = (uint64_t)a2;
      return (unsigned __int8 **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      unint64_t v14 = (unsigned __int8 *)a2[1];
      do
      {
        unint64_t v15 = (unsigned __int8 **)v14;
        unint64_t v14 = *(unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      unint64_t v18 = (unsigned __int8 **)a2;
      do
      {
        unint64_t v15 = (unsigned __int8 **)v18[2];
        BOOL v17 = *v15 == (unsigned __int8 *)v18;
        unint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!quasar::language_detector::Locale::operator<((unsigned __int8 *)a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (unsigned __int8 **)a2;
    }
    return (unsigned __int8 **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    unint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = (unsigned __int8 **)v12;
      return (unsigned __int8 **)(v12 + 1);
    }
    else
    {
      *a3 = (unsigned __int8 **)a2;
      return (unsigned __int8 **)a2;
    }
  }
  uint64_t v11 = (uint64_t *)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v12 = v11;
      uint64_t v11 = (uint64_t *)v11[1];
    }
    while (v11);
  }
  else
  {
    unint64_t v16 = a2;
    do
    {
      unint64_t v12 = (uint64_t *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      unint64_t v16 = v12;
    }
    while (v17);
  }
  if (quasar::language_detector::Locale::operator<((unsigned __int8 *)v12 + 32, a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return (unsigned __int8 **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, a3, (unsigned __int8 *)a5);
}

void std::__tree<quasar::language_detector::Locale>::__construct_node<quasar::language_detector::Locale const&>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::allocator<std::__tree_node<quasar::language_detector::Locale,void *>>::construct[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(v5, (std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1E19804(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        long long v7 = (void *)v4;
        long long v8 = (unsigned __int8 *)(v4 + 32);
        if (!quasar::language_detector::Locale::operator<(a3, (unsigned __int8 **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!quasar::language_detector::Locale::operator<(v8, (unsigned __int8 **)a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    long long v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::allocator<std::__tree_node<quasar::language_detector::Locale,void *>>::construct[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 1;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1B1E19928(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<quasar::language_detector::Locale,false>::__optional_copy_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[2].__r_.__value_.__s.__data_[0] = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    std::__construct_at[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale const&,quasar::language_detector::Locale*>(this, (long long *)a2);
    this[2].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_1B1E19988(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::__construct_at[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale const&,quasar::language_detector::Locale*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1B1E19A18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

std::string *std::__optional_copy_base<std::vector<quasar::language_detector::Locale>,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::vector<quasar::language_detector::Locale>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<quasar::language_detector::Locale>,false> const&>(a1, a2);
  return a1;
}

void sub_1B1E19AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_storage_base<std::vector<quasar::language_detector::Locale>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<quasar::language_detector::Locale>,false> const&>(std::string *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    result->__r_.__value_.__r.__words[0] = 0;
    result->__r_.__value_.__l.__size_ = 0;
    result->__r_.__value_.__r.__words[2] = 0;
    uint64_t result = std::vector<quasar::language_detector::Locale>::__init_with_size[abi:ne180100]<quasar::language_detector::Locale*,quasar::language_detector::Locale*>(result, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    v2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *std::vector<quasar::language_detector::Locale>::__init_with_size[abi:ne180100]<quasar::language_detector::Locale*,quasar::language_detector::Locale*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,quasar::language_detector::Locale*,quasar::language_detector::Locale*,quasar::language_detector::Locale*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1E19B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,quasar::language_detector::Locale*,quasar::language_detector::Locale*,quasar::language_detector::Locale*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  uint64_t v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  int v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<quasar::language_detector::Locale>::construct[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale&>(v7, v4, v6);
      v6 += 3;
      long long v4 = v12 + 2;
      v12 += 2;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::language_detector::Locale>,quasar::language_detector::Locale*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B1E19C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::allocator<quasar::language_detector::Locale>::construct[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 1;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1B1E19CDC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::language_detector::Locale>,quasar::language_detector::Locale*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::__optional_copy_base<std::map<quasar::language_detector::Locale,double>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    std::map<quasar::language_detector::Locale,double>::map[abi:ne180100]((uint64_t *)a1, a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1B1E19D74(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<quasar::language_detector::Locale,double>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<quasar::language_detector::Locale,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>>(a1, *(unsigned __int8 ***)a2, (unsigned __int8 **)(a2 + 8));
  return a1;
}

void sub_1B1E19DD4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<quasar::language_detector::Locale,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>>(uint64_t *result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_hint_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      long long v7 = v4[1];
      if (v7)
      {
        do
        {
          long long v8 = (unsigned __int8 **)v7;
          long long v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (unsigned __int8 **)v4[2];
          BOOL v9 = *v8 == (unsigned __int8 *)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_hint_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double> const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 **a3, long long *a4)
{
  long long v6 = std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>(a1, a2, &v12, &v11, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::pair<quasar::language_detector::Locale const,double> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::pair<quasar::language_detector::Locale const,double> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1E19F64(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
  return this;
}

{
  long long v4;
  std::string *v5;
  long long v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
  return this;
}

void sub_1B1E1A000(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *__Block_byref_object_copy__7(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  long long v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void ___ZN10EARHelpers15DictionaryToMapIN6quasar17language_detector6LocaleEdZ47___EARLanguageDetectorRequestContext_LDContext_E3__0Z47___EARLanguageDetectorRequestContext_LDContext_E3__1EENSt3__13mapIT_T0_NS6_4lessIS8_EENS6_9allocatorINS6_4pairIKS8_S9_EEEEEEP12NSDictionaryT1_T2__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  long long v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "ear_toString");
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
  }
  quasar::language_detector::Locale::Locale(v11, __p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }

  [v6 doubleValue];
  BOOL v9 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  __p[0] = v11;
  std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>(v9, (unsigned __int8 *)v11, (uint64_t)&std::piecewise_construct, (long long **)__p)[10] = v10;
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_1B1E1A15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  id v6 = (uint64_t **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, &v11, a2);
  id v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    id v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  id v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1E1A29C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  return this;
}

void sub_1B1E1A334(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<quasar::language_detector::Locale>::__emplace_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, &v11, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    id v7 = (uint64_t **)v5;
    long long v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v6 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    char v10 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::vector<quasar::language_detector::Locale>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  long long v4 = (std::allocator<std::pair<std::wstring, std::wstring>> *)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *((void *)v4 - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    v19.__end_cap_.__value_ = v4;
    if (v14) {
      unint64_t v15 = (std::pair<std::wstring, std::wstring> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)v4, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = v15 + v11;
    v19.__first_ = v15;
    v19.__begin_ = v16;
    v19.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    v19.__end_ = v16 + 1;
    std::vector<quasar::language_detector::Locale>::__swap_out_circular_buffer(a1, &v19);
    uint64_t v10 = a1[1];
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
}

void sub_1B1E1A578(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::vector<quasar::language_detector::Locale>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,std::reverse_iterator<quasar::language_detector::Locale*>,std::reverse_iterator<quasar::language_detector::Locale*>,std::reverse_iterator<quasar::language_detector::Locale*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,std::reverse_iterator<quasar::language_detector::Locale*>,std::reverse_iterator<quasar::language_detector::Locale*>,std::reverse_iterator<quasar::language_detector::Locale*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::language_detector::Locale>,std::reverse_iterator<quasar::language_detector::Locale*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::language_detector::Locale>,std::reverse_iterator<quasar::language_detector::Locale*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

quasar::QsrText *quasar::QsrText::QsrText(quasar::QsrText *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  qmemcpy(__dst, "abfnrtv_\\~", 10);
  std::unordered_set<char>::unordered_set((uint64_t)this, __dst, 10);
  qmemcpy(__dst, " \n\t", 3);
  std::unordered_set<char>::unordered_set((uint64_t)this + 40, __dst, 3);
  *(_OWORD *)&__dst[64] = xmmword_1B257C6E0;
  *(_OWORD *)&__dst[80] = unk_1B257C6F0;
  *(_OWORD *)&__dst[96] = xmmword_1B257C700;
  *(_OWORD *)__dst = xmmword_1B257C6A0;
  *(_OWORD *)&__dst[16] = unk_1B257C6B0;
  *(_OWORD *)&__dst[32] = xmmword_1B257C6C0;
  *(_OWORD *)&__dst[48] = unk_1B257C6D0;
  std::unordered_map<unsigned long,char>::unordered_map((uint64_t)this + 80, (unint64_t *)__dst, 7);
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  memcpy(__dst, &unk_1B257C710, sizeof(__dst));
  std::unordered_map<char32_t,char32_t>::unordered_map((uint64_t)this + 160, (unsigned int *)__dst, 225);
  *((unsigned char *)this + 200) = 0;
  for (i = (char *)*((void *)this + 12); i; i = *(char **)i)
  {
    uint64_t v3 = *((void *)i + 2);
    *(void *)__dst = i + 24;
    std::__hash_table<std::__hash_value_type<char,unsigned long>,std::__unordered_map_hasher<char,std::__hash_value_type<char,unsigned long>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,unsigned long>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,unsigned long>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>((uint64_t)this + 120, i + 24, (uint64_t)&std::piecewise_construct, (unsigned char **)__dst)[3] = v3;
  }
  return this;
}

void sub_1B1E1A86C(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::QsrText::getHex(int a1, char *__str, unint64_t *a3)
{
  uint64_t v5 = __str;
  if (__str[23] < 0) {
    uint64_t v5 = *(const char **)__str;
  }
  __endptr = 0;
  *a3 = strtoul(v5, &__endptr, 16);
  *__error() = 0;
  if (__str[23] < 0) {
    uint64_t v6 = *((void *)__str + 1);
  }
  else {
    uint64_t v6 = __str[23];
  }
  if (__endptr == &v5[v6] && (*a3 - 0x7FFFFFFFFFFFFFFFLL > 1 || *__error() != 34)) {
    return 1;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Invalid or out-of-range hex value", 33);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v8);
  }
  return 0;
}

void sub_1B1E1A9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::QsrText::isValidToken()
{
}

void sub_1B1E1AB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::QsrText::isValidText()
{
}

void sub_1B1E1B53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void sub_1B1E1B634(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37)
{
  if (a2 == 1)
  {
    std::vector<std::string>::pointer v37 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      float v38 = v37;
      a36 = 0u;
      a37 = 0u;
      a34 = 0u;
      a35 = 0u;
      a32 = 0u;
      a33 = 0u;
      a30 = 0u;
      a31 = 0u;
      a28 = 0u;
      a29 = 0u;
      a26 = 0u;
      a27 = 0u;
      a25 = 0u;
      a23 = 0u;
      a24 = 0u;
      a21 = 0u;
      a22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a21);
      uint64_t v39 = (const char *)(*(uint64_t (**)(void *))(*(void *)v38 + 16))(v38);
      size_t v40 = strlen(v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a21, (uint64_t)v39, v40);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a21);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B1E1B090);
  }
  JUMPOUT(0x1B1E1B624);
}

void sub_1B1E1B758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  __cxa_end_catch();
  JUMPOUT(0x1B1E1B624);
}

void sub_1B1E1B77C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1E1B62CLL);
}

uint64_t quasar::QsrText::normalizeUnicode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3) {
    operator new();
  }
  MEMORY[0x1B3EA7B20](a3, "");
  return 1;
}

void sub_1B1E1BF20(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  JUMPOUT(0x1B1E1BF2CLL);
}

void sub_1B1E1BF4C(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  JUMPOUT(0x1B1E1BF7CLL);
}

void sub_1B1E1BF64(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  JUMPOUT(0x1B1E1BF7CLL);
}

void sub_1B1E1BF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  MEMORY[0x1B3EA8630](v52, 0x1000C80BDFB0063);
  MEMORY[0x1B3EA8630](v51, 0x1000C80BDFB0063);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_1B1E1BFC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
}

void sub_1B1E1C008()
{
}

void sub_1B1E1C014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long __p, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46)
{
  if (a45 < 0) {
    operator delete(*(void **)(v46 + 296));
  }
  if (SBYTE7(a12) < 0) {
    operator delete((void *)__p);
  }
  if (a2 == 1)
  {
    std::string v49 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 4)
    {
      std::string v50 = v49;
      *(_OWORD *)(v46 + 240) = 0u;
      *(_OWORD *)(v46 + 256) = 0u;
      *(_OWORD *)(v46 + 208) = 0u;
      *(_OWORD *)(v46 + 224) = 0u;
      *(_OWORD *)(v46 + 176) = 0u;
      *(_OWORD *)(v46 + 192) = 0u;
      *(_OWORD *)(v46 + 144) = 0u;
      *(_OWORD *)(v46 + 160) = 0u;
      *(_OWORD *)(v46 + 128) = 0u;
      a17 = 0u;
      a18 = 0u;
      a15 = 0u;
      a16 = 0u;
      a13 = 0u;
      a14 = 0u;
      __p = 0u;
      a12 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      uint64_t v51 = (const char *)(*(uint64_t (**)(void *))(*(void *)v50 + 16))(v50);
      size_t v52 = strlen(v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v51, v52);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B1E1BA58);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_1B1E1C0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
}

void sub_1B1E1C104(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1E1BFFCLL);
}

uint64_t quasar::QsrText::hatToQsrToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  if (quasar::QsrText::normalizeUnicode(a1, a2, (uint64_t)v13))
  {
    uint64_t v6 = quasar::QsrText::hatSubTokenToQsrToken(a1, (uint64_t)v13, a3, 1);
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      memset(v12, 0, sizeof(v12));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unicode normalization failed for :", 34);
      int v8 = *(char *)(a2 + 23);
      if (v8 >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(void *)a2;
      }
      if (v8 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v10 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v12);
    }
    uint64_t v6 = 0;
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  return v6;
}

void sub_1B1E1C218(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 33) < 0) {
    operator delete(*(void **)(v1 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrText::hatSubTokenToQsrToken(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v57);
  if (*(char *)(a2 + 23) >= 0) {
    int v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v7 = *(_DWORD *)(a2 + 8);
  }
  if (v7 < 1)
  {
LABEL_64:
    std::stringbuf::str();
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v40;
    *(void *)(a3 + 16) = v41;
    quasar::QsrText::isValidToken();
  }
  int v8 = 0;
  while (1)
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = (unsigned char *)a2;
    }
    else {
      uint64_t v10 = *(unsigned char **)a2;
    }
    int v11 = v10[v8];
    if (v11 == 126)
    {
      unint64_t v13 = "~~";
LABEL_23:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v13, 2);
      goto LABEL_63;
    }
    if (v11 == 95)
    {
      if ((v9 & 0x80) != 0)
      {
        unint64_t v13 = "~_";
        if (**(unsigned char **)a2 != 47) {
          goto LABEL_23;
        }
        uint64_t v9 = *(void *)(a2 + 8);
      }
      else
      {
        unint64_t v13 = "~_";
        if (*(void *)a2 != 47) {
          goto LABEL_23;
        }
      }
      unint64_t v13 = "~_";
      if (v10[v9 - 1] != 47) {
        goto LABEL_23;
      }
LABEL_22:
      LOBYTE(v40) = v10[v8];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)&v40, 1);
      goto LABEL_63;
    }
    if (v11 != 94) {
      goto LABEL_22;
    }
    if (v8 > v7 - 3) {
      break;
    }
    unint64_t v39 = 0;
    int v12 = std::string::basic_string(&v38, (const std::string *)a2, v8 + 1, 2uLL, (std::allocator<char> *)&v40);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v37, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    }
    else {
      std::string v37 = v38;
    }
    char Hex = quasar::QsrText::getHex(v12, (char *)&v37, &v39);
    char v15 = Hex;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v37.__r_.__value_.__l.__data_);
      if (v15)
      {
LABEL_27:
        if (v39 == 127 || (v39 - 1) <= 0x1E)
        {
          char v22 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)(a1 + 80), &v39);
          if (v22)
          {
            uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"~", 1);
            LOBYTE(v40) = *((unsigned char *)v22 + 24);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v40, 1);
          }
          else
          {
            uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"~U", 2);
            LOBYTE(v40) = 48;
            unint64_t v25 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, (char *)&v40);
            uint64_t v26 = *v25;
            *(uint64_t *)((char *)v25 + *(void *)(*v25 - 24) + 24) = 8;
            *(_DWORD *)((char *)v25 + *(void *)(v26 - 24) + 8) |= 0x4000u;
            *(_DWORD *)((char *)v25 + *(void *)(v26 - 24) + 8) = *(_DWORD *)((unsigned char *)v25 + *(void *)(v26 - 24) + 8) & 0xFFFFFFB5 | 8;
            std::ostream::operator<<();
          }
          goto LABEL_58;
        }
        if (v39)
        {
          if (v39 == 94)
          {
            long long v16 = "^";
            goto LABEL_56;
          }
          if (v39 == 32)
          {
            long long v16 = "_";
LABEL_56:
            uint64_t v27 = 1;
            goto LABEL_57;
          }
        }
        else if (a4)
        {
          long long v16 = "~w00";
          uint64_t v27 = 4;
LABEL_57:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v16, v27);
LABEL_58:
          int v21 = 1;
          goto LABEL_59;
        }
        if (quasar::gLogLevel >= 1)
        {
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v40 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Illegal use of ^ followed by value ", 35);
          unint64_t v28 = (void *)std::ostream::operator<<();
          long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" in HatText token ", 18);
          int v29 = *(char *)(a2 + 23);
          if (v29 >= 0) {
            uint64_t v19 = a2;
          }
          else {
            uint64_t v19 = *(void *)a2;
          }
          if (v29 >= 0) {
            uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            uint64_t v20 = *(void *)(a2 + 8);
          }
LABEL_41:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v40);
          goto LABEL_42;
        }
        goto LABEL_42;
      }
    }
    else if (Hex)
    {
      goto LABEL_27;
    }
    if (quasar::gLogLevel >= 1)
    {
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
      long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Illegal occurrence of ^ in HatText token ", 41);
      int v18 = *(char *)(a2 + 23);
      if (v18 >= 0) {
        uint64_t v19 = a2;
      }
      else {
        uint64_t v19 = *(void *)a2;
      }
      if (v18 >= 0) {
        uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v20 = *(void *)(a2 + 8);
      }
      goto LABEL_41;
    }
LABEL_42:
    int v21 = 0;
LABEL_59:
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (!v21) {
      goto LABEL_75;
    }
    v8 += 2;
LABEL_63:
    if (++v8 >= v7) {
      goto LABEL_64;
    }
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v40 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Illegal occurrence of ^ in HatText token ", 41);
    int v31 = *(char *)(a2 + 23);
    if (v31 >= 0) {
      uint64_t v32 = a2;
    }
    else {
      uint64_t v32 = *(void *)a2;
    }
    if (v31 >= 0) {
      uint64_t v33 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v33 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v40);
  }
LABEL_75:
  v57[0] = *MEMORY[0x1E4FBA408];
  uint64_t v34 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v57 + *(void *)(v57[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v58[0] = v34;
  v58[1] = MEMORY[0x1E4FBA470] + 16;
  if (v59 < 0) {
    operator delete((void *)v58[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](&v60);
  return 0;
}

void sub_1B1E1C90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

uint64_t quasar::QsrText::hatToQsrTokens(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  std::vector<std::string>::__clear[abi:ne180100](a3);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    while (1)
    {
      memset(&v44, 0, sizeof(v44));
      if (quasar::QsrText::normalizeUnicode(a1, v8, (uint64_t)&v44))
      {
        if (a4)
        {
          v27[0] = 0;
          v27[1] = 0;
          *(void *)&long long v28 = 0;
          if (quasar::QsrText::hatSubTokenToQsrToken(a1, (uint64_t)&v44, (uint64_t)v27, 1))
          {
            unint64_t v10 = a3[1];
            if (v10 >= a3[2])
            {
              uint64_t v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)v27);
            }
            else
            {
              if (SBYTE7(v28) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)v27[0], (std::string::size_type)v27[1]);
              }
              else
              {
                long long v11 = *(_OWORD *)v27;
                *(void *)(v10 + 16) = v28;
                *(_OWORD *)unint64_t v10 = v11;
              }
              uint64_t v22 = v10 + 24;
              a3[1] = v10 + 24;
            }
            a3[1] = v22;
            if (SBYTE7(v28) < 0) {
              operator delete(v27[0]);
            }
LABEL_42:
            uint64_t v21 = 1;
            goto LABEL_43;
          }
          if (SBYTE7(v28) < 0) {
            operator delete(v27[0]);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "^00");
          quasar::splitAndTrimNoEmpty(&v44, (char *)__p, v27);
          if (SHIBYTE(v26) < 0) {
            operator delete(__p[0]);
          }
          long long v17 = (char *)v27[0];
          long long v16 = (char *)v27[1];
          while (1)
          {
            if (v17 == v16)
            {
              __p[0] = v27;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_42;
            }
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v26 = 0;
            if ((quasar::QsrText::hatSubTokenToQsrToken(a1, (uint64_t)v17, (uint64_t)__p, 0) & 1) == 0) {
              break;
            }
            unint64_t v18 = a3[1];
            if (v18 >= a3[2])
            {
              uint64_t v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)__p);
            }
            else
            {
              if (SHIBYTE(v26) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                long long v19 = *(_OWORD *)__p;
                *(void *)(v18 + 16) = v26;
                *(_OWORD *)unint64_t v18 = v19;
              }
              uint64_t v20 = v18 + 24;
              a3[1] = v18 + 24;
            }
            a3[1] = v20;
            if (SHIBYTE(v26) < 0) {
              operator delete(__p[0]);
            }
            v17 += 24;
          }
          if (SHIBYTE(v26) < 0) {
            operator delete(__p[0]);
          }
          __p[0] = v27;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
      }
      else if (quasar::gLogLevel >= 1)
      {
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        *(_OWORD *)uint64_t v27 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Unicode normalization failed for :", 34);
        int v13 = *(char *)(v8 + 23);
        if (v13 >= 0) {
          uint64_t v14 = v8;
        }
        else {
          uint64_t v14 = *(void *)v8;
        }
        if (v13 >= 0) {
          uint64_t v15 = *(unsigned __int8 *)(v8 + 23);
        }
        else {
          uint64_t v15 = *(void *)(v8 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v27);
      }
      uint64_t v21 = 0;
LABEL_43:
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      v8 += 24;
      if (v8 == v9) {
        char v23 = 0;
      }
      else {
        char v23 = v21;
      }
      if ((v23 & 1) == 0) {
        return v21;
      }
    }
  }
  return 1;
}

{
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  std::string::size_type v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v31;
  int v32;
  std::string v33;
  std::string __str;
  unsigned char v35[32];
  long long v36;
  void *v37[2];
  _OWORD v38[2];
  void *v39[2];
  _OWORD v40[2];
  void *v41[2];
  long long v42;
  void *__p[2];
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  std::string v49;
  void **v50[2];

  uint64_t v9 = *a3;
  for (i = a3[1]; i != v9; quasar::Token::~Token((void **)(i - 224)))
    ;
  a3[1] = v9;
  long long v11 = *a2;
  unint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    long long v32 = a4;
    long long v31 = a2[1];
    while (1)
    {
      memset(&v49, 0, sizeof(v49));
      if (quasar::QsrText::normalizeUnicode(a1, v11, (uint64_t)&v49))
      {
        if (!a4)
        {
          std::string::basic_string[abi:ne180100]<0>(v35, "^00");
          quasar::splitAndTrim(&v49, v35, (uint64_t *)&__str);
          if ((v35[23] & 0x80000000) != 0) {
            operator delete(*(void **)v35);
          }
          unint64_t v18 = *(_DWORD *)(v11 + 36);
          long long v19 = __str.__r_.__value_.__r.__words[0];
          if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
          {
            uint64_t v20 = 0;
            uint64_t v21 = 0;
            uint64_t v22 = *(_DWORD *)(v11 + 28);
            char v23 = (v18 - v22)
                / (0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
            while (1)
            {
              memset(&v33, 0, sizeof(v33));
              uint64_t v24 = quasar::QsrText::hatSubTokenToQsrToken(a1, v19 + v20, (uint64_t)&v33, 0);
              if (v24)
              {
                quasar::Token::Token((std::string *)v35, (const quasar::Token *)v11);
                std::string::operator=((std::string *)v35, &v33);
                *(_DWORD *)&v35[28] = v22;
                v22 += v23;
                LODWORD(v36) = v22;
                DWORD1(v36) = v22;
                unint64_t v25 = a3[1];
                if (v25 >= a3[2])
                {
                  uint64_t v26 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, (const quasar::Token *)v35);
                }
                else
                {
                  quasar::Token::Token((std::string *)a3[1], (const quasar::Token *)v35);
                  uint64_t v26 = v25 + 224;
                  a3[1] = v25 + 224;
                }
                a3[1] = v26;
                if (SBYTE7(v44) < 0) {
                  operator delete(__p[0]);
                }
                if (SBYTE7(v42) < 0) {
                  operator delete(v41[0]);
                }
                v50[0] = (void **)v40 + 1;
                std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v50);
                if (SBYTE7(v40[0]) < 0) {
                  operator delete(v39[0]);
                }
                v50[0] = (void **)v38 + 1;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v50);
                if (SBYTE7(v38[0]) < 0) {
                  operator delete(v37[0]);
                }
                if ((v35[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v35);
                }
              }
              if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v33.__r_.__value_.__l.__data_);
              }
              if ((v24 & 1) == 0) {
                break;
              }
              ++v21;
              long long v19 = __str.__r_.__value_.__r.__words[0];
              v20 += 24;
              if (0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3) <= v21)
              {
                unint64_t v18 = *(_DWORD *)(v11 + 36);
                a4 = v32;
                unint64_t v10 = v31;
                goto LABEL_42;
              }
            }
            *(void *)long long v35 = &__str;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
            long long v28 = 0;
            a4 = v32;
            unint64_t v10 = v31;
            goto LABEL_61;
          }
LABEL_42:
          uint64_t v27 = a3[1];
          *(_DWORD *)(v27 - 192) = *(_DWORD *)(v11 + 32);
          *(_DWORD *)(v27 - 188) = v18;
          *(void *)long long v35 = &__str;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
          goto LABEL_60;
        }
        memset(&__str, 0, sizeof(__str));
        if (quasar::QsrText::hatSubTokenToQsrToken(a1, (uint64_t)&v49, (uint64_t)&__str, 1))
        {
          quasar::Token::Token((std::string *)v35, (const quasar::Token *)v11);
          std::string::operator=((std::string *)v35, &__str);
          int v12 = a3[1];
          if (v12 >= a3[2])
          {
            int v13 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, (const quasar::Token *)v35);
          }
          else
          {
            quasar::Token::Token((std::string *)a3[1], (const quasar::Token *)v35);
            int v13 = v12 + 224;
            a3[1] = v12 + 224;
          }
          a3[1] = v13;
          if (SBYTE7(v44) < 0) {
            operator delete(__p[0]);
          }
          if (SBYTE7(v42) < 0) {
            operator delete(v41[0]);
          }
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v40 + 8;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
          if (SBYTE7(v40[0]) < 0) {
            operator delete(v39[0]);
          }
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v38 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
          if (SBYTE7(v38[0]) < 0) {
            operator delete(v37[0]);
          }
          if ((v35[23] & 0x80000000) != 0) {
            operator delete(*(void **)v35);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
LABEL_60:
          long long v28 = 1;
          goto LABEL_61;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      else if (quasar::gLogLevel >= 4)
      {
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        *(_OWORD *)__p = 0u;
        std::string v44 = 0u;
        *(_OWORD *)long long v41 = 0u;
        long long v42 = 0u;
        memset(v40, 0, sizeof(v40));
        *(_OWORD *)long long v39 = 0u;
        *(_OWORD *)long long v37 = 0u;
        memset(v38, 0, sizeof(v38));
        long long v36 = 0u;
        memset(v35, 0, sizeof(v35));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Unicode normalization failed for :", 34);
        uint64_t v15 = *(char *)(v11 + 23);
        if (v15 >= 0) {
          long long v16 = v11;
        }
        else {
          long long v16 = *(void *)v11;
        }
        if (v15 >= 0) {
          long long v17 = *(unsigned __int8 *)(v11 + 23);
        }
        else {
          long long v17 = *(void *)(v11 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v35);
      }
      long long v28 = 0;
LABEL_61:
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      v11 += 224;
      if (v11 == v10) {
        long long v29 = 0;
      }
      else {
        long long v29 = v28;
      }
      if ((v29 & 1) == 0) {
        return v28;
      }
    }
  }
  return 1;
}

void sub_1B1E1CC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 + 8) = v22;
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 - 97) < 0) {
    operator delete(*(void **)(v23 - 120));
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1E1D180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  *(void *)(v30 + 8) = v31;
  quasar::Token::~Token((void **)&a25);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0) {
    operator delete(*(void **)(v32 - 120));
  }
  _Unwind_Resume(a1);
}

void quasar::QsrText::qsrSubTokenToHatToken()
{
}

void sub_1B1E1DAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

void quasar::QsrText::removeW00(int a1, long long **a2, uint64_t *a3)
{
  std::vector<std::string>::__clear[abi:ne180100](a3);
  uint64_t v27 = 0;
  long long v28 = 0;
  unint64_t v29 = 0;
  uint64_t v6 = *a2;
  int v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        v26.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v8;
      }
      __s[0] = 0;
      __s[1] = 0;
      int64_t v25 = 0;
      memset(&__str, 0, sizeof(__str));
      uint64_t v9 = v27;
      for (i = v28; i != v9; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(i[-1].__r_.__value_.__l.__data_);
        }
      }
      long long v28 = v9;
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v26.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        do
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "~w00");
          BOOL v12 = quasar::QsrText::splitOnUserDefinedSymbol(a1, (uint64_t)&v26, &__p, (uint64_t)__s, (uint64_t)&__str);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          int v13 = (std::string::value_type *)HIBYTE(v25);
          if (v25 < 0) {
            int v13 = __s[1];
          }
          if (v13)
          {
            uint64_t v14 = v28;
            if ((unint64_t)v28 >= v29)
            {
              long long v16 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27, (long long *)__s);
            }
            else
            {
              if (SHIBYTE(v25) < 0)
              {
                std::string::__init_copy_ctor_external(v28, __s[0], (std::string::size_type)__s[1]);
              }
              else
              {
                long long v15 = *(_OWORD *)__s;
                v28->__r_.__value_.__r.__words[2] = v25;
                *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
              }
              long long v16 = v14 + 1;
            }
            long long v28 = v16;
          }
          std::string::operator=(&v26, &__str);
        }
        while (v12);
        long long v17 = v28;
      }
      else
      {
        if ((unint64_t)v9 >= v29)
        {
          long long v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27, (long long *)&v26);
        }
        else
        {
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v9, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v18 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
            v9->__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v18;
          }
          long long v17 = v9 + 1;
        }
        long long v28 = v17;
      }
      long long v19 = (long long *)v27;
      if (v27 != v17)
      {
        unint64_t v20 = a3[1];
        if ((char *)v17 - (char *)v27 == 24)
        {
          if (v20 >= a3[2])
          {
            uint64_t v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v6);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v6);
            uint64_t v21 = v20 + 24;
          }
          a3[1] = v21;
        }
        else
        {
          do
          {
            if (v20 >= a3[2])
            {
              unint64_t v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v19);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v19);
              v20 += 24;
            }
            a3[1] = v20;
            long long v19 = (long long *)((char *)v19 + 24);
          }
          while (v19 != (long long *)v17);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__s[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

{
  uint64_t i;
  uint64_t v7;
  long long *v8;
  long long v9;
  std::string *j;
  std::string *v11;
  std::string::size_type size;
  BOOL v13;
  uint64_t v14;
  std::string *v15;
  long long v16;
  std::string *v17;
  long long v18;
  std::string *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  float32x2_t v28;
  unint64_t v29;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  long long *v34;
  std::string __p;
  int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  std::string v41;
  uint64_t v42;
  std::string v43;
  uint64_t v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  float32x2_t v49;
  std::string __str;
  long long v51;
  int64_t v52;
  std::string v53;
  std::string *v54;
  std::string *v55;
  unint64_t v56;
  void **v57[3];

  int v7 = *a3;
  for (i = a3[1]; i != v7; quasar::Token::~Token((void **)(i - 224)))
    ;
  a3[1] = v7;
  long long v54 = 0;
  long long v55 = 0;
  long long v56 = 0;
  long long v8 = *a2;
  long long v34 = a2[1];
  if (*a2 != v34)
  {
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        uint64_t v9 = *v8;
        v53.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v9;
      }
      long long v51 = 0uLL;
      long long v52 = 0;
      memset(&__str, 0, sizeof(__str));
      long long v11 = v54;
      for (j = v55; j != v11; --j)
      {
        if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(j[-1].__r_.__value_.__l.__data_);
        }
      }
      long long v55 = v11;
      std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v53.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        do
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "~w00");
          int v13 = quasar::QsrText::splitOnUserDefinedSymbol(a1, (uint64_t)&v53, &__p, (uint64_t)&v51, (uint64_t)&__str);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v14 = HIBYTE(v52);
          if (v52 < 0) {
            uint64_t v14 = *((void *)&v51 + 1);
          }
          if (v14)
          {
            long long v15 = v55;
            if ((unint64_t)v55 >= v56)
            {
              long long v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v54, &v51);
            }
            else
            {
              if (SHIBYTE(v52) < 0)
              {
                std::string::__init_copy_ctor_external(v55, (const std::string::value_type *)v51, *((std::string::size_type *)&v51 + 1));
              }
              else
              {
                long long v16 = v51;
                v55->__r_.__value_.__r.__words[2] = v52;
                *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
              }
              long long v17 = v15 + 1;
            }
            long long v55 = v17;
          }
          std::string::operator=(&v53, &__str);
        }
        while (v13);
        long long v19 = v55;
      }
      else
      {
        if ((unint64_t)v11 >= v56)
        {
          long long v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v54, (long long *)&v53);
        }
        else
        {
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v11, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v18 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
            v11->__r_.__value_.__r.__words[2] = v53.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v18;
          }
          long long v19 = v11 + 1;
        }
        long long v55 = v19;
      }
      unint64_t v20 = (uint64_t)v54;
      if (v54 != v19)
      {
        if ((char *)v19 - (char *)v54 == 24)
        {
          uint64_t v21 = a3[1];
          if (v21 >= a3[2])
          {
            uint64_t v22 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, (const quasar::Token *)v8);
          }
          else
          {
            quasar::Token::Token((std::string *)a3[1], (const quasar::Token *)v8);
            uint64_t v22 = v21 + 224;
            a3[1] = v21 + 224;
          }
          a3[1] = v22;
        }
        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          int64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v54) >> 3);
          std::string v26 = *((_DWORD *)v8 + 7);
          uint64_t v27 = (*((_DWORD *)v8 + 9) - v26) / v25;
          *(float *)&long long v18 = (float)v25;
          long long v28 = vdiv_f32(*(float32x2_t *)((char *)v8 + 204), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v18, 0));
          do
          {
            quasar::Token::Token((quasar::Token *)&__p);
            std::string::operator=(&__p, (const std::string *)(v20 + v23));
            unint64_t v29 = v24 + 1;
            long long v36 = v26;
            v26 += v27;
            long long v37 = v26;
            long long v38 = v26;
            long long v39 = *((_DWORD *)v8 + 10);
            uint64_t v31 = v24 + 1 != v25 || *((unsigned char *)v8 + 44) != 0;
            long long v40 = v31;
            if (!v24)
            {
              std::string::operator=(&v41, (const std::string *)v8 + 2);
              std::string::operator=(&v43, (const std::string *)v8 + 4);
            }
            long long v49 = v28;
            uint64_t v32 = a3[1];
            if (v32 >= a3[2])
            {
              long long v33 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, (const quasar::Token *)&__p);
            }
            else
            {
              quasar::Token::Token((std::string *)a3[1], (const quasar::Token *)&__p);
              long long v33 = v32 + 224;
              a3[1] = v32 + 224;
            }
            a3[1] = v33;
            if (v48 < 0) {
              operator delete(v47);
            }
            if (v46 < 0) {
              operator delete(v45);
            }
            v57[0] = (void **)&v44;
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v57);
            if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v43.__r_.__value_.__l.__data_);
            }
            v57[0] = (void **)&v42;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v57);
            if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v41.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            unint64_t v20 = (uint64_t)v54;
            int64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v54) >> 3);
            v23 += 24;
            uint64_t v24 = v29;
          }
          while (v25 > v29);
          *(void *)(a3[1] - 192) = *((void *)v8 + 4);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v52) < 0) {
        operator delete((void *)v51);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      v8 += 14;
    }
    while (v8 != v34);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B1E1DE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  *(void *)(v34 - 80) = v33;
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  a28 = (void *)(v34 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  _Unwind_Resume(a1);
}

uint64_t quasar::QsrText::qsrToHatTokens(int a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v9 = *a3;
  for (uint64_t i = a3[1]; i != v9; quasar::Token::~Token((void **)(i - 224)))
    ;
  a3[1] = v9;
  if (a4)
  {
    if (*(void *)a2 != *(void *)(a2 + 8))
    {
      quasar::Token::Token(&v15, *(const quasar::Token **)a2);
      quasar::QsrText::qsrSubTokenToHatToken();
    }
  }
  else
  {
    long long v11 = 0;
    BOOL v12 = 0;
    uint64_t v13 = 0;
    quasar::QsrText::removeW00(a1, (long long **)a2, (uint64_t *)&v11);
    if (v11 != v12)
    {
      quasar::Token::Token(&v15, v11);
      quasar::QsrText::qsrSubTokenToHatToken();
    }
    *(void *)&long long v14 = &v11;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  }
  return 1;
}

void sub_1B1E1E27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void sub_1B1E1E740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v23 - 136) = v22;
  if (*(char *)(v23 - 201) < 0) {
    operator delete(*(void **)(v23 - 224));
  }
  if (*(char *)(v23 - 177) < 0) {
    operator delete(*(void **)(v23 - 200));
  }
  if (*(char *)(v23 - 153) < 0) {
    operator delete(*(void **)(v23 - 176));
  }
  std::string __p = (void *)(v23 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::QsrText::decodeQsrTextTokens(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (a3 != a2) {
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  }
  uint64_t v6 = *a2;
  if (a2[1] == *a2) {
    return 1;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
  {
    uint64_t result = quasar::QsrText::decodeQsrText(a1, v6 + v7, *a3 + v7);
    if ((result & 1) == 0) {
      break;
    }
    ++v8;
    uint64_t v6 = *a2;
    v7 += 224;
  }
  while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > v8);
  return result;
}

uint64_t quasar::QsrText::decodeQsrText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v70);
  if (*(char *)(a2 + 23) >= 0) {
    int v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v6 = *(_DWORD *)(a2 + 8);
  }
  if (v6 < 1)
  {
LABEL_54:
    std::stringbuf::str();
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v52;
    *(void *)(a3 + 16) = v53;
    if (quasar::gLogLevel >= 6)
    {
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"\"", 1);
      int v25 = *(char *)(a2 + 23);
      if (v25 >= 0) {
        uint64_t v26 = a2;
      }
      else {
        uint64_t v26 = *(void *)a2;
      }
      if (v25 >= 0) {
        uint64_t v27 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v27 = *(void *)(a2 + 8);
      }
      long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\" (", 3);
      unint64_t v29 = (void *)std::ostream::operator<<();
      uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") -> ", 5);
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\"", 1);
      int v32 = *(char *)(a3 + 23);
      if (v32 >= 0) {
        uint64_t v33 = (void *)a3;
      }
      else {
        uint64_t v33 = *(void **)a3;
      }
      if (v32 >= 0) {
        uint64_t v34 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v34 = *(void *)(a3 + 8);
      }
      long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\" (", 3);
      long long v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)")", 1);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v52);
    }
    uint64_t v37 = 1;
    goto LABEL_71;
  }
  int v7 = 0;
  unint64_t v8 = (void *)(a1 + 120);
  while (1)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    int v10 = *(unsigned __int8 *)(v9 + v7);
    if (v10 == 95)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" ", 1);
      LODWORD(v11) = v7;
      goto LABEL_15;
    }
    if (v10 != 126)
    {
      LOBYTE(v52) = *(unsigned char *)(v9 + v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)&v52, 1);
      LODWORD(v11) = v7;
      goto LABEL_15;
    }
    uint64_t v11 = v7 + 1;
    BOOL v12 = (char *)(v9 + v11);
    uint64_t v13 = std::__hash_table<char,std::hash<char>,std::equal_to<char>,std::allocator<char>>::find<char>(v8, (char *)(v9 + v11));
    if (v13)
    {
      LOBYTE(v52) = v13[3];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)&v52, 1);
      goto LABEL_15;
    }
    int v14 = *v12;
    if (v14 <= 94) {
      break;
    }
    if (v14 == 95)
    {
      std::string v15 = "_";
      goto LABEL_26;
    }
    if (v14 != 119)
    {
      if (v14 != 126) {
        goto LABEL_81;
      }
      std::string v15 = "~";
      goto LABEL_26;
    }
    if (v7 + 2 > v6 - 2)
    {
      if (quasar::gLogLevel < 1) {
        goto LABEL_104;
      }
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
      long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Illegal occurrence of ~w in QsrText string ", 43);
      int v48 = *(char *)(a2 + 23);
      if (v48 >= 0) {
        uint64_t v42 = a2;
      }
      else {
        uint64_t v42 = *(void *)a2;
      }
      if (v48 >= 0) {
        uint64_t v43 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v43 = *(void *)(a2 + 8);
      }
      goto LABEL_103;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v16 = a2;
    }
    else {
      uint64_t v16 = *(void *)a2;
    }
    if (*(unsigned char *)(v16 + v7 + 2) != 48 || (LODWORD(v11) = v7 + 3, *(unsigned char *)(v16 + v7 + 3) != 48))
    {
      if (quasar::gLogLevel < 1) {
        goto LABEL_104;
      }
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
      long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Unsupported occurrence of ~w in QsrText string ", 47);
      int v41 = *(char *)(a2 + 23);
      if (v41 >= 0) {
        uint64_t v42 = a2;
      }
      else {
        uint64_t v42 = *(void *)a2;
      }
      if (v41 >= 0) {
        uint64_t v43 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v43 = *(void *)(a2 + 8);
      }
LABEL_103:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v52);
      goto LABEL_104;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" ", 1);
LABEL_15:
    int v7 = v11 + 1;
    if ((int)v11 + 1 >= v6) {
      goto LABEL_54;
    }
  }
  if (v14 == 85)
  {
    unint64_t v69 = 0;
    LODWORD(v11) = v7 + 2;
    if (v7 + 2 > v6 - 8)
    {
      if (quasar::gLogLevel < 1) {
        goto LABEL_104;
      }
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
      long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Illegal occurrence of ~U in QsrText string ", 43);
      int v49 = *(char *)(a2 + 23);
      if (v49 >= 0) {
        uint64_t v42 = a2;
      }
      else {
        uint64_t v42 = *(void *)a2;
      }
      if (v49 >= 0) {
        uint64_t v43 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v43 = *(void *)(a2 + 8);
      }
      goto LABEL_103;
    }
    int v17 = std::string::basic_string(&v51, (const std::string *)a2, (int)v11, 8uLL, (std::allocator<char> *)&v52);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v50, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    }
    else {
      std::string v50 = v51;
    }
    int Hex = quasar::QsrText::getHex(v17, (char *)&v50, &v69);
    int v19 = Hex;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if (v19) {
        goto LABEL_40;
      }
    }
    else if (Hex)
    {
LABEL_40:
      LOBYTE(v52) = v69;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)&v52, 1);
      LODWORD(v11) = v7 + 9;
      goto LABEL_50;
    }
    if (quasar::gLogLevel >= 1)
    {
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
      unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Illegal occurrence of ~U in QsrText string ", 43);
      int v21 = *(char *)(a2 + 23);
      if (v21 >= 0) {
        uint64_t v22 = a2;
      }
      else {
        uint64_t v22 = *(void *)a2;
      }
      if (v21 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v52);
    }
LABEL_50:
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (!v19) {
      goto LABEL_104;
    }
    goto LABEL_15;
  }
  if (v14 == 92)
  {
    std::string v15 = "\\"";
LABEL_26:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v15, 1);
    goto LABEL_15;
  }
LABEL_81:
  if (quasar::gLogLevel >= 4)
  {
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
    std::string v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Illegal use of ~ in QsrText string ", 35);
    int v45 = *(char *)(a2 + 23);
    if (v45 >= 0) {
      uint64_t v46 = a2;
    }
    else {
      uint64_t v46 = *(void *)a2;
    }
    if (v45 >= 0) {
      uint64_t v47 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v47 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v52);
  }
LABEL_104:
  uint64_t v37 = 0;
LABEL_71:
  v70[0] = *MEMORY[0x1E4FBA408];
  uint64_t v38 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v70 + *(void *)(v70[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v71[0] = v38;
  v71[1] = MEMORY[0x1E4FBA470] + 16;
  if (v72 < 0) {
    operator delete((void *)v71[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](&v73);
  return v37;
}

void sub_1B1E1F040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

uint64_t quasar::QsrText::encodeTokenQsrText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a3 + 23) < 0)
  {
    **(unsigned char **)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 23) = 0;
  }
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  if (quasar::QsrText::normalizeUnicode(a1, a2, (uint64_t)v4)) {
    operator new();
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  return 0;
}

void sub_1B1E1F6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a67);
  if (a66 < 0) {
    operator delete(a61);
  }
  _Unwind_Resume(a1);
}

BOOL quasar::QsrText::encodeTokenQsrTextWithMetadata(uint64_t a1, std::string *this, std::string *a3)
{
  std::string::size_type v6 = std::string::find(this, 92, 0);
  std::string::basic_string(&v16, this, 0, v6, (std::allocator<char> *)&v15);
  uint64_t v7 = quasar::QsrText::encodeTokenQsrText(a1, (uint64_t)&v16, (uint64_t)a3);
  BOOL v8 = v7;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if (!v8) {
      return v8;
    }
    while (1)
    {
LABEL_5:
      BOOL v8 = v6 == -1;
      if (v6 == -1) {
        return v8;
      }
      std::string::size_type v9 = std::string::find(this, 92, v6 + 1);
      memset(&v16, 0, sizeof(v16));
      std::string::basic_string(&v15, this, v6 + 1, v9 + ~v6, (std::allocator<char> *)&v17);
      char v10 = quasar::QsrText::encodeTokenQsrText(a1, (uint64_t)&v15, (uint64_t)&v16);
      char v11 = v10;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v15.__r_.__value_.__l.__data_);
        if (v11)
        {
LABEL_10:
          std::operator+<char>();
          if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v12 = &v15;
          }
          else {
            BOOL v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
          }
          if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v15.__r_.__value_.__l.__size_;
          }
          std::string::append(a3, (const std::string::value_type *)v12, size);
          if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v15.__r_.__value_.__l.__data_);
          }
          std::string::size_type v6 = v9;
        }
      }
      else if (v10)
      {
        goto LABEL_10;
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v16.__r_.__value_.__l.__data_);
        if ((v11 & 1) == 0) {
          return v8;
        }
      }
      else if ((v11 & 1) == 0)
      {
        return v8;
      }
    }
  }
  if (v7) {
    goto LABEL_5;
  }
  return v8;
}

void sub_1B1E1F944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t quasar::QsrText::getMetadataStartIndex(uint64_t a1, uint64_t *a2)
{
  unint64_t result = 0;
  unint64_t v3 = *((unsigned __int8 *)a2 + 23);
  while ((v3 & 0x80) == 0)
  {
    uint64_t v4 = a2;
    if (v3 <= (int)result) {
      return v3;
    }
LABEL_6:
    int v5 = *((unsigned __int8 *)v4 + (int)result);
    if (v5 == 126)
    {
      LODWORD(result) = result + 1;
    }
    else if (v5 == 92)
    {
      return result;
    }
    unint64_t result = (result + 1);
  }
  uint64_t v4 = (uint64_t *)*a2;
  if (a2[1] > (unint64_t)(int)result) {
    goto LABEL_6;
  }
  return a2[1];
}

BOOL quasar::QsrText::splitOnUserDefinedSymbol(int a1, uint64_t a2, std::string *__str, uint64_t a4, uint64_t a5)
{
  v15.__r_.__value_.__r.__words[0] = 0;
  int v9 = std::string::basic_string(&v16, __str, 2uLL, 2uLL, (std::allocator<char> *)&v17);
  int Hex = quasar::QsrText::getHex(v9, (char *)&v16, (unint64_t *)&v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  int UserDefinedSymbolLocation = quasar::QsrText::findUserDefinedSymbolLocation(Hex, (uint64_t *)a2, __str);
  uint64_t v12 = UserDefinedSymbolLocation;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 8);
  }
  if (v13 == UserDefinedSymbolLocation)
  {
    std::string::operator=((std::string *)a4, (const std::string *)a2);
    MEMORY[0x1B3EA7B20](a5, "");
  }
  else
  {
    std::string::basic_string(&v15, (const std::string *)a2, 0, UserDefinedSymbolLocation, (std::allocator<char> *)&v17);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v15;
    std::string::basic_string(&v15, (const std::string *)a2, (int)v12 + 4, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v17);
    if (*(char *)(a5 + 23) < 0) {
      operator delete(*(void **)a5);
    }
    *(std::string *)a5 = v15;
  }
  return v13 != v12;
}

void sub_1B1E1FB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrText::findUserDefinedSymbolLocation(int a1, uint64_t *a2, std::string *__str)
{
  unint64_t v12 = 0;
  int v5 = std::string::basic_string(&v11, __str, 2uLL, 2uLL, (std::allocator<char> *)&v13);
  quasar::QsrText::getHex(v5, (char *)&v11, &v12);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t result = 0;
  int v7 = *((unsigned __int8 *)a2 + 23);
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v8 = __str;
  }
  else {
    BOOL v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if ((v7 & 0x80) != 0) {
    goto LABEL_9;
  }
  while (1)
  {
    int v9 = a2;
    if ((int)result >= v7 - 3) {
      break;
    }
    while (1)
    {
      if (*((unsigned char *)v9 + (int)result) != 126 || (int v10 = result + 1, *((unsigned char *)v9 + (int)result + 1) != 126))
      {
        if (*((unsigned char *)v9 + (int)result) == 126
          && *((unsigned char *)v9 + (int)result + 1) == 119
          && *((unsigned __int8 *)v9 + (int)result + 2) == v8->__r_.__value_.__s.__data_[2])
        {
          int v10 = result;
          if (*((unsigned __int8 *)v9 + (int)result + 3) == v8->__r_.__value_.__s.__data_[3]) {
            return result;
          }
        }
        else
        {
          int v10 = result;
        }
      }
      uint64_t result = (v10 + 1);
      if ((v7 & 0x80) == 0) {
        break;
      }
LABEL_9:
      int v9 = (uint64_t *)*a2;
      if ((int)result >= *((_DWORD *)a2 + 2) - 3) {
        return *((unsigned int *)a2 + 2);
      }
    }
  }
  return *((unsigned __int8 *)a2 + 23);
}

void sub_1B1E1FC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<char>::unordered_set(uint64_t a1, char *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      std::__hash_table<char,std::hash<char>,std::equal_to<char>,std::allocator<char>>::__emplace_unique_key_args<char,char const&>(a1, a2, a2);
      ++a2;
      --v4;
    }
    while (v4);
  }
  return a1;
}

void sub_1B1E1FCF4(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<char,std::hash<char>,std::equal_to<char>,std::allocator<char>>::__emplace_unique_key_args<char,char const&>(uint64_t a1, char *a2, unsigned char *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x18uLL);
  *int v10 = 0;
  v10[1] = v6;
  *((unsigned char *)v10 + 16) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *int v10 = *v19;
LABEL_38:
    *int v19 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B1E1FF10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long,char>::unordered_map(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<unsigned long,char>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,char>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,char>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,char>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,char> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_1B1E1FF88(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,char>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,char>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,char>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,char>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,char> const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *int v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1E201A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<char32_t,char32_t>::unordered_map(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<char32_t,char32_t>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,char32_t>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,char32_t>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,char32_t>>>::__emplace_unique_key_args<char32_t,std::pair<char32_t const,char32_t> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_1B1E2021C(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<char32_t,char32_t>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,char32_t>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,char32_t>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,char32_t>>>::__emplace_unique_key_args<char32_t,std::pair<char32_t const,char32_t> const&>(uint64_t a1, unsigned int *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x18uLL);
  *int v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *int v10 = *v19;
LABEL_38:
    *int v19 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B1E2043C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<char,unsigned long>,std::__unordered_map_hasher<char,std::__hash_value_type<char,unsigned long>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,unsigned long>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,unsigned long>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(uint64_t a1, char *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x20uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    *unint64_t v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B1E20660(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<char,std::hash<char>,std::equal_to<char>,std::allocator<char>>::find<char>(void *a1, char *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void quasar::getCharRange(uint64_t *a1@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(a2, 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5));
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    unsigned int v6 = 0;
    do
    {
      if (*(char *)(v4 + 23) < 0) {
        uint64_t v7 = *(void *)(v4 + 8);
      }
      else {
        LODWORD(v7) = *(unsigned __int8 *)(v4 + 23);
      }
      int v8 = v6 + v7;
      unint64_t v9 = v6 | ((unint64_t)(v6 + v7 - 1) << 32);
      unint64_t v11 = (unint64_t *)a2[1];
      unint64_t v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = ((char *)v11 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v10 - (void)*a2;
        uint64_t v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v16);
        }
        else {
          unint64_t v17 = 0;
        }
        size_t v18 = (unint64_t *)&v17[8 * v13];
        *size_t v18 = v9;
        unint64_t v12 = (char *)(v18 + 1);
        unint64_t v20 = (char *)*a2;
        uint64_t v19 = (char *)a2[1];
        if (v19 != *a2)
        {
          do
          {
            unint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            *--size_t v18 = v21;
          }
          while (v19 != v20);
          uint64_t v19 = (char *)*a2;
        }
        *a2 = v18;
        a2[1] = v12;
        a2[2] = &v17[8 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *unint64_t v11 = v9;
        unint64_t v12 = (char *)(v11 + 1);
      }
      a2[1] = v12;
      unsigned int v6 = v8 + *(unsigned __int8 *)(v4 + 44);
      v4 += 224;
    }
    while (v4 != v5);
  }
}

void sub_1B1E2089C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::getPreItnTokenToPostItnCharAlignment(std::string *a1@<X0>, std::string *a2@<X1>, char ***a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (*a3) {
    (*a3)[1] = **a3;
  }
  if (a1->__r_.__value_.__l.__size_ != a1->__r_.__value_.__r.__words[0]
    && a2->__r_.__value_.__l.__size_ != a2->__r_.__value_.__r.__words[0])
  {
    quasar::getCharRange((uint64_t *)a2, (void **)&v104);
    std::string::size_type v8 = a1->__r_.__value_.__r.__words[0];
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 5);
    if (a1->__r_.__value_.__l.__size_ == a1->__r_.__value_.__r.__words[0])
    {
      LODWORD(v12) = 0;
      int v11 = 0;
    }
    else
    {
      unint64_t v10 = 0;
      int v11 = 0;
      LODWORD(v12) = 0;
      int v13 = 0;
      uint64_t v14 = (uint64_t)(a4 + 2);
      while (1)
      {
        int v15 = v12;
        unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5);
        unint64_t v12 = v13;
        int v17 = v11;
LABEL_8:
        uint64_t v18 = v17;
        uint64_t v19 = v16 <= v17
            ? v17
            : 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5);
        if (v16 <= v17) {
          break;
        }
        uint64_t v20 = 0;
        unsigned int v21 = *(_DWORD *)(v8 + 224 * v10 + 28);
        uint64_t v22 = (unsigned __int8 *)(a2->__r_.__value_.__r.__words[0] + 172 + 224 * v17);
        uint64_t v23 = v18 - v19;
        while (1)
        {
          unsigned int v24 = *((_DWORD *)v22 - 36);
          if (v21 == v24) {
            break;
          }
          if (v21 < v24)
          {
            int v17 = v18 - v20;
            unint64_t v10 = ++v12;
            if (v9 > v12) {
              goto LABEL_8;
            }
            goto LABEL_60;
          }
          --v20;
          v22 += 224;
          if (v23 == v20) {
            goto LABEL_60;
          }
        }
        int v98 = v15;
        int v25 = *v22;
        int v26 = v25 + v18 - v20;
        int v27 = v12 - 1;
        if ((int)v12 >= 1 && v26 > 0)
        {
          int v96 = v25 + v18 - 1 - v20;
          int v28 = *(_DWORD *)&v104[8 * v96 + 4];
          int v97 = *(_DWORD *)&v104[8 * v11];
          if (v97 <= v28)
          {
            uint64_t v30 = (_DWORD *)a4[1];
            unint64_t v29 = a4[2];
            int v94 = *v22;
            int v95 = v25 + v18 - v20;
            if ((unint64_t)v30 >= v29)
            {
              int v32 = (_DWORD *)*a4;
              uint64_t v90 = ((uint64_t)v30 - *a4) >> 4;
              uint64_t v91 = v14;
              unint64_t v33 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 60) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v34 = v29 - (void)v32;
              if (v34 >> 3 > v33) {
                unint64_t v33 = v34 >> 3;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                long long v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v14, v35);
                int v32 = (_DWORD *)*a4;
                uint64_t v30 = (_DWORD *)a4[1];
              }
              else
              {
                long long v36 = 0;
              }
              uint64_t v37 = &v36[16 * v90];
              *(_DWORD *)uint64_t v37 = v98;
              *((_DWORD *)v37 + 1) = v12 - 1;
              *((_DWORD *)v37 + 2) = v97;
              *((_DWORD *)v37 + 3) = v28;
              uint64_t v38 = v37;
              if (v30 != v32)
              {
                do
                {
                  *((_OWORD *)v38 - 1) = *((_OWORD *)v30 - 1);
                  v38 -= 16;
                  v30 -= 4;
                }
                while (v30 != v32);
                int v32 = (_DWORD *)*a4;
              }
              uint64_t v31 = v37 + 16;
              *a4 = (uint64_t)v38;
              a4[1] = (uint64_t)(v37 + 16);
              a4[2] = (uint64_t)&v36[16 * v35];
              if (v32) {
                operator delete(v32);
              }
              uint64_t v14 = v91;
              int v25 = v94;
              int v27 = v12 - 1;
            }
            else
            {
              _DWORD *v30 = v15;
              v30[1] = v27;
              uint64_t v31 = v30 + 4;
              v30[2] = v97;
              v30[3] = v28;
            }
            a4[1] = (uint64_t)v31;
            long long v39 = *a3;
            int v26 = v95;
            if (*a3)
            {
              unint64_t v40 = (unint64_t)v39[2];
              int v41 = v39[1];
              if ((unint64_t)v41 >= v40)
              {
                int v93 = v27;
                uint64_t v92 = v14;
                uint64_t v43 = *v39;
                uint64_t v44 = (v41 - *v39) >> 4;
                unint64_t v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 60) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v46 = v40 - (void)v43;
                if (v46 >> 3 > v45) {
                  unint64_t v45 = v46 >> 3;
                }
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v47 = v45;
                }
                if (v47)
                {
                  int v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v39 + 2), v47);
                  uint64_t v43 = *v39;
                  int v41 = v39[1];
                }
                else
                {
                  int v48 = 0;
                }
                int v49 = &v48[16 * v44];
                *(_DWORD *)int v49 = v98;
                *((_DWORD *)v49 + 1) = v93;
                *((_DWORD *)v49 + 2) = v11;
                *((_DWORD *)v49 + 3) = v96;
                std::string v50 = v49;
                if (v41 != v43)
                {
                  do
                  {
                    *((_OWORD *)v50 - 1) = *((_OWORD *)v41 - 1);
                    v50 -= 16;
                    v41 -= 16;
                  }
                  while (v41 != v43);
                  uint64_t v43 = *v39;
                }
                uint64_t v42 = v49 + 16;
                *long long v39 = v50;
                v39[1] = v49 + 16;
                v39[2] = &v48[16 * v47];
                if (v43) {
                  operator delete(v43);
                }
                uint64_t v14 = v92;
              }
              else
              {
                *(_DWORD *)int v41 = v98;
                *((_DWORD *)v41 + 1) = v27;
                uint64_t v42 = v41 + 16;
                *((_DWORD *)v41 + 2) = v11;
                *((_DWORD *)v41 + 3) = v96;
              }
              v39[1] = v42;
              int v25 = v94;
              int v26 = v95;
            }
          }
        }
        int v13 = v12 + 1;
        std::string::size_type v8 = a1->__r_.__value_.__r.__words[0];
        unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 5);
        unint64_t v10 = (int)v12 + 1;
        int v11 = v26;
        if (v9 <= v10)
        {
          int v11 = v18 + v25 - v20;
          goto LABEL_62;
        }
      }
LABEL_60:
      LODWORD(v12) = v15;
    }
LABEL_62:
    if (v11 < (unint64_t)((v105 - v104) >> 3))
    {
      int v51 = *(_DWORD *)&v104[8 * v11];
      int v52 = *(_DWORD *)&v104[0x6DB6DB6DB6DB6DB8
                           * ((uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5)
                           - 4];
      if (v51 <= v52)
      {
        int v53 = v9 - 1;
        unint64_t v54 = a4[2];
        long long v55 = (_DWORD *)a4[1];
        if ((unint64_t)v55 >= v54)
        {
          long long v57 = (_DWORD *)*a4;
          uint64_t v58 = ((uint64_t)v55 - *a4) >> 4;
          unint64_t v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v60 = v54 - (void)v57;
          if (v60 >> 3 > v59) {
            unint64_t v59 = v60 >> 3;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v59;
          }
          if (v61)
          {
            long long v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v61);
            long long v57 = (_DWORD *)*a4;
            long long v55 = (_DWORD *)a4[1];
          }
          else
          {
            long long v62 = 0;
          }
          long long v63 = &v62[16 * v58];
          *(_DWORD *)long long v63 = v12;
          *((_DWORD *)v63 + 1) = v53;
          long long v64 = &v62[16 * v61];
          *((_DWORD *)v63 + 2) = v51;
          *((_DWORD *)v63 + 3) = v52;
          long long v56 = v63 + 16;
          if (v55 != v57)
          {
            do
            {
              *((_OWORD *)v63 - 1) = *((_OWORD *)v55 - 1);
              v63 -= 16;
              v55 -= 4;
            }
            while (v55 != v57);
            long long v57 = (_DWORD *)*a4;
          }
          *a4 = (uint64_t)v63;
          a4[1] = (uint64_t)v56;
          a4[2] = (uint64_t)v64;
          if (v57) {
            operator delete(v57);
          }
        }
        else
        {
          _DWORD *v55 = v12;
          v55[1] = v53;
          long long v56 = v55 + 4;
          v55[2] = v51;
          v55[3] = v52;
        }
        a4[1] = (uint64_t)v56;
        long long v65 = *a3;
        if (v65)
        {
          int v66 = -1227133513 * ((a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 5) - 1;
          int v67 = -1227133513 * ((a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5) - 1;
          unint64_t v68 = (unint64_t)v65[2];
          unint64_t v69 = v65[1];
          if ((unint64_t)v69 >= v68)
          {
            v71 = *v65;
            uint64_t v72 = (v69 - *v65) >> 4;
            unint64_t v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v74 = v68 - (void)v71;
            if (v74 >> 3 > v73) {
              unint64_t v73 = v74 >> 3;
            }
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v75 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v75 = v73;
            }
            if (v75)
            {
              v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v65 + 2), v75);
              v71 = *v65;
              unint64_t v69 = v65[1];
            }
            else
            {
              v76 = 0;
            }
            v77 = &v76[16 * v72];
            *(_DWORD *)v77 = v12;
            *((_DWORD *)v77 + 1) = v66;
            v78 = &v76[16 * v75];
            *((_DWORD *)v77 + 2) = v11;
            *((_DWORD *)v77 + 3) = v67;
            v70 = v77 + 16;
            if (v69 != v71)
            {
              do
              {
                *((_OWORD *)v77 - 1) = *((_OWORD *)v69 - 1);
                v77 -= 16;
                v69 -= 16;
              }
              while (v69 != v71);
              v71 = *v65;
            }
            char *v65 = v77;
            v65[1] = v70;
            v65[2] = v78;
            if (v71) {
              operator delete(v71);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v69 = v12;
            *((_DWORD *)v69 + 1) = v66;
            v70 = v69 + 16;
            *((_DWORD *)v69 + 2) = v11;
            *((_DWORD *)v69 + 3) = v67;
          }
          v65[1] = v70;
        }
      }
    }
    if (quasar::gLogLevel >= 6)
    {
      memset(v103, 0, sizeof(v103));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v103);
      v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"pre = \"", 7);
      quasar::formatResultTokensSimple(a1, 0);
      if ((v102 & 0x80u) == 0) {
        v80 = v101;
      }
      else {
        v80 = (void **)v101[0];
      }
      if ((v102 & 0x80u) == 0) {
        uint64_t v81 = v102;
      }
      else {
        uint64_t v81 = (uint64_t)v101[1];
      }
      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
      v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"\" ", 2);
      v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"post = \"", 8);
      quasar::formatResultTokensSimple(a2, 0);
      if ((v100 & 0x80u) == 0) {
        v85 = __p;
      }
      else {
        v85 = (void **)__p[0];
      }
      if ((v100 & 0x80u) == 0) {
        uint64_t v86 = v100;
      }
      else {
        uint64_t v86 = (uint64_t)__p[1];
      }
      v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
      v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"\" ", 2);
      v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"map = ", 6);
      quasar::operator<<(v89, a4);
      if ((char)v100 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v102 < 0) {
        operator delete(v101[0]);
      }
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v103);
    }
    if (v104)
    {
      v105 = v104;
      operator delete(v104);
    }
  }
}

void sub_1B1E21060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  int v32 = *(void **)(v30 - 112);
  if (v32)
  {
    *(void *)(v30 - 104) = v32;
    operator delete(v32);
  }
  unint64_t v33 = *(void **)v29;
  if (*(void *)v29)
  {
    *(void *)(v29 + 8) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::operator<<(void *a1, uint64_t *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    char v6 = 1;
    do
    {
      if ((v6 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
      }
      quasar::operator<<(a1);
      char v6 = 0;
      v4 += 16;
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  return a1;
}

{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v11;
  void *v12;

  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"alternativeDescription\": ", 27);
  uint64_t v5 = *a2;
  int v11 = v4;
  char v6 = *(unsigned int *)(v5 + 24);
  if (v6 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v7 = v4;
  unint64_t v12 = &v11;
  ((void (*)(void **))off_1F0A64380[v6])(&v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", \"translationPhraseIndex\": ", 28);
  std::string::size_type v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", \"selectionSpanIndex\": ", 24);
  unint64_t v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"}", 1);
  return a1;
}

void *quasar::operator<<(void *a1)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  int8x8_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)",", 1);
  unint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)",", 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"]", 1);
  return a1;
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  int8x8_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"DecodingSignals(", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"graphCost=", 10);
  unint64_t v3 = (void *)std::ostream::operator<<();
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"acousticCost=", 13);
  uint64_t v5 = (void *)std::ostream::operator<<();
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"acousticCostFirstPassCollapsed=", 31);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"acousticCostSecondPassUnpushed=", 31);
  unint64_t v9 = (void *)std::ostream::operator<<();
  unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
  return a1;
}

{
  void *v2;
  void *v3;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{start: ", 8);
  int8x8_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", end: ", 7);
  unint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"}", 1);
  return a1;
}

{
  void *v2;
  void *v3;
  void *v4;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{silencePosterior=", 18);
  int8x8_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" silenceWindow=", 15);
  unint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" stablePartials=", 16);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"}", 1);
  return a1;
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  int8x8_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{early=", 7);
  unint64_t v3 = quasar::operator<<(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" backoff=", 9);
  uint64_t v5 = quasar::operator<<(v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" maxTriggers=", 13);
  char v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" requireSilencePosterior=", 25);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" debug=", 7);
  std::string::size_type v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"}", 1);
  return a1;
}

{
  void *v1;
  void *v2;
  uint64_t vars8;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)", ", 2);
  int8x8_t v2 = (void *)std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"]", 1);
}

{
  void *v2;
  void *v3;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"start\": ", 10);
  int8x8_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", \"length\": ", 12);
  unint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"}", 1);
  return a1;
}

{
  void *v2;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"enableDisambiguationAlternatives\": ", 37);
  int8x8_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"}", 1);
  return a1;
}

void sub_1B1E21314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E213B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E2144C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E214F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E21584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E21664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ConvolutionalMaxPoolingComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4E970;
  *(void *)(a1 + 88) = &unk_1F0A4EAA8;
  *(void *)(a1 + 96) = &unk_1F0A4EAD0;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 264) = _D1;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ConvolutionalMaxPoolingComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4E970;
  *(void *)(a1 + 88) = &unk_1F0A4EAA8;
  *(void *)(a1 + 96) = &unk_1F0A4EAD0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  uint64_t v6 = *(void *)(a2 + 152);
  if (v6) {
    kaldi::NewCuSubOrMat<float>(v6, 0);
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v8 = *(void *)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 176);
  if (v7 != v8)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a2 + 168) + 8 * v9);
      if (v10) {
        kaldi::NewCuSubOrMat<float>(v10, *(unsigned __int8 *)(a1 + 16));
      }
      ++v9;
    }
    while (v9 < (v7 - v8) >> 3);
  }
  uint64_t v12 = *(void *)(a1 + 192);
  uint64_t v11 = *(void *)(a1 + 200);
  if (v11 != v12)
  {
    unint64_t v13 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v13)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v13;
    }
    while (v13 < (v11 - v12) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_1B1E21D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  uint64_t v20 = (void *)*((void *)v16 + 57);
  if (v20) {
    operator delete(v20);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  unsigned int v21 = *v19;
  if (*v19)
  {
    *((void *)v16 + 40) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v22;
    operator delete(v22);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v23 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
  }
  uint64_t v24 = *v18;
  *uint64_t v18 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
  }
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(void *a1, uint64_t *a2)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((uint64_t)a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(a1[21] + 8 * ((((a1[22] - a1[21]) << 29) - 0x100000000) >> 32)));
  uint64_t v4 = *(void *)(a1[24] + 8 * ((((a1[25] - a1[24]) << 29) - 0x100000000) >> 32));
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v4);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A4E970;
  int8x8_t v2 = (quasar::Bitmap *)(a1 + 88);
  *(void *)(a1 + 88) = &unk_1F0A4EAA8;
  unint64_t v3 = (quasar::Bitmap *)(a1 + 96);
  *(void *)(a1 + 96) = &unk_1F0A4EAD0;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 488));
  uint64_t v4 = *(void **)(a1 + 456);
  if (v4) {
    operator delete(v4);
  }
  unint64_t v9 = (void **)(a1 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  unint64_t v9 = (void **)(a1 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  unint64_t v9 = (void **)(a1 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  unint64_t v9 = (void **)(a1 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  unint64_t v9 = (void **)(a1 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  long long v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(void *)(a1 + 320) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 296) = v6;
    operator delete(v6);
  }
  unint64_t v9 = (void **)(a1 + 240);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  unint64_t v9 = (void **)(a1 + 216);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  unint64_t v9 = (void **)(a1 + 192);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  unint64_t v9 = (void **)(a1 + 168);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v7 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void sub_1B1E221FC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v82 = 0x40000000;
  int v83 = -1073741824;
  int v81 = 1036831949;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  uint64_t v6 = (int *)(a1 + 116);
  *(void *)(a1 + 132) = 0x100000001;
  uint64_t v7 = (int *)(a1 + 132);
  int v80 = -1;
  memset(v79, 0, sizeof(v79));
  uint64_t v8 = a2 + 4;
  unint64_t v9 = (int *)(a1 + 280);
  v70 = (int *)(a1 + 128);
  v71 = (int *)(a1 + 264);
  uint64_t v10 = (int *)(a1 + 124);
  unint64_t v68 = (int *)(a1 + 136);
  unint64_t v69 = (int *)(a1 + 120);
  uint64_t v72 = (int *)(a1 + 112);
  unint64_t v73 = (int *)(a1 + 268);
  uint64_t v74 = (int *)(a1 + 108);
  uint64_t v11 = (int *)(a1 + 104);
  while (1)
  {
    if ((*((unsigned char *)v8 + *(void *)(*a2 - 24)) & 2) != 0)
    {
      int v48 = *(_DWORD *)(a1 + 8);
      int v49 = *(_DWORD *)(a1 + 12);
      int v51 = *(_DWORD *)(a1 + 104);
      int v50 = *(_DWORD *)(a1 + 108);
      int v52 = *(_DWORD *)(a1 + 132);
      int v53 = v48 / v51 - *(_DWORD *)(a1 + 128);
      int v54 = *(_DWORD *)(a1 + 120);
      int v55 = *(_DWORD *)(a1 + 136);
      int v56 = (v54 - v52) / v55 + 1;
      *(_DWORD *)(a1 + 148) = v56;
      int v57 = v50 * v56;
      int v58 = v49 / v57;
      *(_DWORD *)(a1 + 140) = v53;
      *(_DWORD *)(a1 + 144) = v49 / v57;
      if (v52 >= 1 && v54 >= v52)
      {
        if (v55 > 0)
        {
          if (v49 == v57 * v58)
          {
            if (v48 == v48 / v51 * v51)
            {
              if (*v10 + *v72 * (v54 - 1) + *v6 * (v58 - 1) <= v53)
              {
                if (v80 >= 1) {
                  kaldi::UniformRandomNumber::SetRandomSeeds(a3, v80);
                }
                kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v77, a3);
                kaldi::Matrix<float>::Matrix((uint64_t)v75, ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)), (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)), 0, 0);
                for (int i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v75); ++i)
                {
                  for (uint64_t j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v75); ++j)
                  {
                    float v61 = *(float *)&v81;
                    kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v77, 0);
                    *(float *)(v75[0] + 4 * i * v76 + 4 * j) = v61 * v62;
                  }
                }
                if (!*(void *)(a1 + 152)) {
                  operator new();
                }
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"pointer is thought to be un-initialized here", 44);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
              }
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: too few input bands to compute the output", 75);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
            }
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: input dim mismatch", 52);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
          }
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: output dim mismatch", 53);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: Max pooling step must be >= 1", 63);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: Invalid max pooling size", 58);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v79);
    if ((SHIBYTE(v79[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v79[2]))
      {
        case 9:
          goto LABEL_78;
        case 0xA:
          if (v79[0] == 0x61654D736169423CLL && LOWORD(v79[1]) == 15982) {
            goto LABEL_165;
          }
          BOOL v13 = v79[0] == 0x7A69536C6F6F503CLL && LOWORD(v79[1]) == 15973;
          uint64_t v14 = v7;
          if (v13) {
            goto LABEL_162;
          }
          BOOL v15 = v79[0] == 0x6574536C6F6F503CLL && LOWORD(v79[1]) == 15984;
          uint64_t v14 = v68;
          if (v15) {
            goto LABEL_162;
          }
          if ((v79[2] & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
LABEL_77:
          if (HIBYTE(v79[2]) != 9) {
            goto LABEL_184;
          }
LABEL_78:
          BOOL v31 = v79[0] == 0x6D726F4E78614D3CLL && LOBYTE(v79[1]) == 62;
          int v26 = v9;
          if (v31) {
            goto LABEL_166;
          }
          if ((v79[2] & 0x8000000000000000) != 0) {
            goto LABEL_83;
          }
          goto LABEL_184;
        case 0xB:
          if (v79[0] == 0x6E6152736169423CLL && *(void *)((char *)v79 + 3) == 0x3E65676E61527361) {
            goto LABEL_164;
          }
          BOOL v28 = v79[0] == 0x745368637461503CLL && *(void *)((char *)v79 + 3) == 0x3E70657453686374;
          goto LABEL_110;
        case 0xC:
          BOOL v32 = v79[0] == 0x537265746C69463CLL && LODWORD(v79[1]) == 1046837865;
          uint64_t v14 = v10;
          if (!v32) {
            goto LABEL_88;
          }
          goto LABEL_162;
        case 0xD:
          if (v79[0] == 0x74536D617261503CLL && *(void *)((char *)v79 + 5) == 0x3E7665646474536DLL) {
            goto LABEL_163;
          }
          BOOL v21 = v79[0] == 0x6E6F69746365533CLL && *(void *)((char *)v79 + 5) == 0x3E706574536E6F69;
          uint64_t v14 = v6;
          if (v21) {
            goto LABEL_162;
          }
          BOOL v22 = v79[0] == 0x6E6F69746365533CLL && *(void *)((char *)v79 + 5) == 0x3E657A69536E6F69;
          goto LABEL_123;
        case 0xF:
          BOOL v23 = v79[0] == 0x75746165466E493CLL && *(void *)((char *)v79 + 7) == 0x3E7370614D657275;
          uint64_t v14 = v11;
          if (v23) {
            goto LABEL_162;
          }
          BOOL v24 = v79[0] == 0x65726168536E493CLL && *(void *)((char *)v79 + 7) == 0x3E73646E61426465;
          uint64_t v14 = v70;
          if (v24) {
            goto LABEL_162;
          }
          BOOL v25 = v79[0] == 0x61526E7261654C3CLL && *(void *)((char *)v79 + 7) == 0x3E66656F43657461;
          int v26 = v71;
          if (v25) {
            goto LABEL_166;
          }
          if (HIBYTE(v79[2]) == 9) {
            goto LABEL_78;
          }
          if (HIBYTE(v79[2]) != 12) {
            goto LABEL_184;
          }
LABEL_88:
          unint64_t v33 = v79;
          goto LABEL_156;
        case 0x10:
          BOOL v34 = v79[0] == 0x7461654674754F3CLL && v79[1] == 0x3E7370614D657275;
          goto LABEL_101;
        case 0x13:
          BOOL v30 = v79[0] == 0x61654C736169423CLL
             && v79[1] == 0x6F43657461526E72
             && *(void *)((char *)&v79[1] + 3) == 0x3E66656F43657461;
          int v26 = v73;
          if (v30) {
            goto LABEL_166;
          }
          if (HIBYTE(v79[2]) != 12) {
            goto LABEL_77;
          }
          goto LABEL_88;
        default:
          goto LABEL_184;
      }
    }
    uint64_t v16 = v79[1];
    switch(v79[1])
    {
      case 0xALL:
        if (*(void *)v79[0] == 0x61654D736169423CLL && *(_WORD *)(v79[0] + 8) == 15982)
        {
LABEL_165:
          int v26 = &v83;
        }
        else
        {
          BOOL v18 = *(void *)v79[0] == 0x7A69536C6F6F503CLL && *(_WORD *)(v79[0] + 8) == 15973;
          uint64_t v14 = v7;
          if (v18) {
            goto LABEL_162;
          }
          if (v79[1] == 10)
          {
            BOOL v19 = *(void *)v79[0] == 0x6574536C6F6F503CLL && *(_WORD *)(v79[0] + 8) == 15984;
            uint64_t v14 = v68;
            if (v19) {
              goto LABEL_162;
            }
LABEL_33:
            uint64_t v16 = v79[1];
          }
LABEL_34:
          if (v16 == 15)
          {
LABEL_133:
            BOOL v41 = *(void *)v79[0] == 0x61526E7261654C3CLL && *(void *)(v79[0] + 7) == 0x3E66656F43657461;
            int v26 = v71;
            if (v41) {
              goto LABEL_166;
            }
            uint64_t v16 = v79[1];
          }
          if (v16 == 19)
          {
            BOOL v43 = *(void *)v79[0] == 0x61654C736169423CLL
               && *(void *)(v79[0] + 8) == 0x6F43657461526E72
               && *(void *)(v79[0] + 11) == 0x3E66656F43657461;
            int v26 = v73;
            if (v43) {
              goto LABEL_166;
            }
            uint64_t v16 = v79[1];
          }
          if (v16 != 9) {
            goto LABEL_154;
          }
          BOOL v44 = *(void *)v79[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v79[0] + 8) == 62;
          int v26 = v9;
          if (!v44)
          {
LABEL_83:
            uint64_t v16 = v79[1];
LABEL_154:
            if (v16 != 12) {
              goto LABEL_184;
            }
LABEL_155:
            unint64_t v33 = (void *)v79[0];
LABEL_156:
            uint64_t v45 = *v33;
            int v46 = *((_DWORD *)v33 + 2);
            if (v45 != 0x536D6F646E61523CLL || v46 != 1046766949)
            {
LABEL_184:
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
              long long v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Unknown token ", 14);
              if (v79[2] >= 0) {
                long long v64 = v79;
              }
              else {
                long long v64 = (void *)v79[0];
              }
              if (v79[2] >= 0) {
                uint64_t v65 = HIBYTE(v79[2]);
              }
              else {
                uint64_t v65 = v79[1];
              }
              int v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
              int v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)", a typo in config?", 19);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" (ParamStddev|BiasMean|BiasRange|InFeatureMaps|OutFeatureMaps|PatchStep|SectionStep|SectionSize|FilterSize|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed)", 158);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
            }
            uint64_t v14 = &v80;
LABEL_162:
            kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v14);
            goto LABEL_167;
          }
        }
LABEL_166:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v26);
LABEL_167:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0xBLL:
        if (*(void *)v79[0] != 0x6E6152736169423CLL || *(void *)(v79[0] + 3) != 0x3E65676E61527361)
        {
          BOOL v28 = *(void *)v79[0] == 0x745368637461503CLL && *(void *)(v79[0] + 3) == 0x3E70657453686374;
LABEL_110:
          uint64_t v14 = v72;
          if (!v28) {
            goto LABEL_184;
          }
          goto LABEL_162;
        }
LABEL_164:
        int v26 = &v82;
        goto LABEL_166;
      case 0xCLL:
        BOOL v35 = *(void *)v79[0] == 0x537265746C69463CLL && *(_DWORD *)(v79[0] + 8) == 1046837865;
        uint64_t v14 = v10;
        if (!v35) {
          goto LABEL_155;
        }
        goto LABEL_162;
      case 0xDLL:
        if (*(void *)v79[0] != 0x74536D617261503CLL || *(void *)(v79[0] + 5) != 0x3E7665646474536DLL)
        {
          BOOL v38 = *(void *)v79[0] == 0x6E6F69746365533CLL && *(void *)(v79[0] + 5) == 0x3E706574536E6F69;
          uint64_t v14 = v6;
          if (!v38)
          {
            BOOL v22 = *(void *)v79[0] == 0x6E6F69746365533CLL && *(void *)(v79[0] + 5) == 0x3E657A69536E6F69;
LABEL_123:
            uint64_t v14 = v69;
            if (!v22) {
              goto LABEL_184;
            }
          }
          goto LABEL_162;
        }
LABEL_163:
        int v26 = &v81;
        goto LABEL_166;
      case 0xFLL:
        BOOL v39 = *(void *)v79[0] == 0x75746165466E493CLL && *(void *)(v79[0] + 7) == 0x3E7370614D657275;
        uint64_t v14 = v11;
        if (!v39)
        {
          BOOL v40 = *(void *)v79[0] == 0x65726168536E493CLL && *(void *)(v79[0] + 7) == 0x3E73646E61426465;
          uint64_t v14 = v70;
          if (!v40) {
            goto LABEL_133;
          }
        }
        goto LABEL_162;
      case 0x10:
        BOOL v34 = *(void *)v79[0] == 0x7461654674754F3CLL && *(void *)(v79[0] + 8) == 0x3E7370614D657275;
LABEL_101:
        uint64_t v14 = v74;
        if (!v34) {
          goto LABEL_184;
        }
        goto LABEL_162;
      default:
        goto LABEL_34;
    }
  }
}

void sub_1B1E22FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (*(char *)(v24 - 121) < 0) {
    operator delete(*(void **)(v24 - 144));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  uint64_t v6 = a1 + 116;
  *(void *)(a1 + 132) = 0x100000001;
  uint64_t v7 = a1 + 132;
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_142:
    int v39 = *(_DWORD *)(a1 + 12);
    int v40 = *(_DWORD *)(a1 + 108);
    int v41 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 128);
    int v42 = (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 132)) / *(_DWORD *)(a1 + 136) + 1;
    *(_DWORD *)(a1 + 148) = v42;
    *(unsigned char *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 140) = v41;
    *(_DWORD *)(a1 + 144) = v39 / (v40 * v42);
    LOBYTE(v48) = 0;
    kaldi::ReadBasicType<char>(a2, a3, &v48);
    if (!*(void *)(a1 + 152))
    {
      kaldi::ExpectToken(a2, a3, "<Filters>");
      operator new();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v48);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      uint64_t v8 = (uint64_t *)&v48;
      switch(HIBYTE(v49))
      {
        case 0xA:
          goto LABEL_87;
        case 0xB:
LABEL_4:
          BOOL v9 = (void)v48 == 0x745368637461503CLL && *(void *)((char *)&v48 + 3) == 0x3E70657453686374;
          uint64_t v10 = a1 + 112;
          if (!v9) {
            goto LABEL_86;
          }
          goto LABEL_136;
        case 0xC:
          goto LABEL_81;
        case 0xD:
LABEL_68:
          BOOL v23 = (void)v48 == 0x6E6F69746365533CLL && *(void *)((char *)&v48 + 5) == 0x3E706574536E6F69;
          uint64_t v10 = v6;
          if (v23) {
            goto LABEL_136;
          }
          if (HIBYTE(v49) == 10) {
            goto LABEL_87;
          }
          if (HIBYTE(v49) == 12) {
            goto LABEL_81;
          }
          if (HIBYTE(v49) != 13) {
            goto LABEL_132;
          }
          BOOL v24 = (void)v48 == 0x6E6F69746365533CLL && *(void *)((char *)&v48 + 5) == 0x3E657A69536E6F69;
          uint64_t v10 = a1 + 120;
          if (!v24) {
            goto LABEL_132;
          }
          goto LABEL_136;
        case 0xF:
          BOOL v18 = (void)v48 == 0x75746165466E493CLL && *(void *)((char *)&v48 + 7) == 0x3E7370614D657275;
          uint64_t v10 = a1 + 104;
          if (v18) {
            goto LABEL_136;
          }
LABEL_52:
          BOOL v19 = (void)v48 == 0x65726168536E493CLL && *(void *)((char *)&v48 + 7) == 0x3E73646E61426465;
          uint64_t v10 = a1 + 128;
          if (v19) {
            goto LABEL_136;
          }
          if (HIBYTE(v49) != 15) {
            goto LABEL_86;
          }
          BOOL v20 = (void)v48 == 0x61526E7261654C3CLL && *(void *)((char *)&v48 + 7) == 0x3E66656F43657461;
          BOOL v21 = (float *)(a1 + 264);
          if (!v20) {
            goto LABEL_132;
          }
          goto LABEL_138;
        case 0x10:
          BOOL v22 = (void)v48 == 0x7461654674754F3CLL && *((void *)&v48 + 1) == 0x3E7370614D657275;
          uint64_t v10 = a1 + 108;
          if (!v22)
          {
            switch(HIBYTE(v49))
            {
              case 0xA:
                goto LABEL_87;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_81;
              case 0xD:
                goto LABEL_68;
              case 0xF:
                goto LABEL_52;
              default:
                goto LABEL_132;
            }
          }
          goto LABEL_136;
        case 0x13:
          goto LABEL_125;
        default:
          goto LABEL_132;
      }
    }
    uint64_t v11 = *((void *)&v48 + 1);
    if (*((void *)&v48 + 1) == 15)
    {
      BOOL v12 = *(void *)v48 == 0x75746165466E493CLL && *(void *)(v48 + 7) == 0x3E7370614D657275;
      uint64_t v10 = a1 + 104;
      if (v12) {
        goto LABEL_136;
      }
    }
    if (*((void *)&v48 + 1) == 16)
    {
      BOOL v13 = *(void *)v48 == 0x7461654674754F3CLL && *(void *)(v48 + 8) == 0x3E7370614D657275;
      uint64_t v10 = a1 + 108;
      if (v13) {
        goto LABEL_136;
      }
      uint64_t v11 = *((void *)&v48 + 1);
    }
    if (v11 == 11)
    {
      BOOL v14 = *(void *)v48 == 0x745368637461503CLL && *(void *)(v48 + 3) == 0x3E70657453686374;
      uint64_t v10 = a1 + 112;
      if (v14) {
        goto LABEL_136;
      }
      uint64_t v11 = *((void *)&v48 + 1);
    }
    if (v11 != 13) {
      goto LABEL_41;
    }
    BOOL v15 = *(void *)v48 == 0x6E6F69746365533CLL && *(void *)(v48 + 5) == 0x3E706574536E6F69;
    uint64_t v10 = v6;
    if (v15) {
      goto LABEL_136;
    }
    uint64_t v11 = *((void *)&v48 + 1);
    if (*((void *)&v48 + 1) != 13) {
      goto LABEL_41;
    }
    BOOL v16 = *(void *)v48 == 0x6E6F69746365533CLL && *(void *)(v48 + 5) == 0x3E657A69536E6F69;
    uint64_t v10 = a1 + 120;
    if (v16) {
      goto LABEL_136;
    }
    if ((v49 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v49) == 10) {
        goto LABEL_87;
      }
      if (HIBYTE(v49) != 12) {
        goto LABEL_132;
      }
LABEL_81:
      BOOL v25 = (void)v48 == 0x537265746C69463CLL && DWORD2(v48) == 1046837865;
      uint64_t v10 = a1 + 124;
      if (v25) {
        goto LABEL_136;
      }
      if ((v49 & 0x8000000000000000) == 0)
      {
LABEL_86:
        if (HIBYTE(v49) != 10) {
          goto LABEL_132;
        }
LABEL_87:
        BOOL v26 = (void)v48 == 0x7A69536C6F6F503CLL && WORD4(v48) == 15973;
        uint64_t v10 = v7;
        if (v26) {
          goto LABEL_136;
        }
        if ((v49 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v49) != 10) {
            goto LABEL_132;
          }
          BOOL v27 = (void)v48 == 0x6574536C6F6F503CLL && WORD4(v48) == 15984;
          uint64_t v10 = v6 + 20;
          if (!v27) {
            goto LABEL_132;
          }
          goto LABEL_136;
        }
LABEL_111:
        uint64_t v11 = *((void *)&v48 + 1);
        if (*((void *)&v48 + 1) != 10) {
          goto LABEL_117;
        }
        BOOL v30 = *(void *)v48 == 0x6574536C6F6F503CLL && *(_WORD *)(v48 + 8) == 15984;
        uint64_t v10 = v6 + 20;
        if (!v30)
        {
          if (v49 < 0)
          {
LABEL_117:
            if (v11 == 15)
            {
              BOOL v31 = *(void *)v48 == 0x61526E7261654C3CLL && *(void *)(v48 + 7) == 0x3E66656F43657461;
              BOOL v21 = (float *)(a1 + 264);
              if (!v31)
              {
                uint64_t v11 = *((void *)&v48 + 1);
                goto LABEL_123;
              }
LABEL_138:
              kaldi::ReadBasicType<float>(a2, a3, v21);
              goto LABEL_139;
            }
LABEL_123:
            if (v11 == 19)
            {
              uint64_t v8 = (uint64_t *)v48;
LABEL_125:
              uint64_t v32 = *v8;
              uint64_t v33 = v8[1];
              uint64_t v34 = *(uint64_t *)((char *)v8 + 11);
              BOOL v35 = v32 == 0x61654C736169423CLL && v33 == 0x6F43657461526E72;
              BOOL v36 = v35 && v34 == 0x3E66656F43657461;
              BOOL v21 = (float *)(a1 + 268);
              if (v36) {
                goto LABEL_138;
              }
            }
          }
LABEL_132:
          BOOL v37 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v48, "<MaxNorm>");
          BOOL v21 = (float *)(a1 + 280);
          if (!v37)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v48, "<GradientNormType>"))
            {
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v47 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)__p);
              *(_DWORD *)(a1 + 272) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
              if (SHIBYTE(v47) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_139;
            }
            BOOL v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v48, "<MaxGrad>");
            BOOL v21 = (float *)(a1 + 276);
            if (!v38)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              BOOL v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
              if (v49 >= 0) {
                BOOL v44 = &v48;
              }
              else {
                BOOL v44 = (long long *)v48;
              }
              if (v49 >= 0) {
                uint64_t v45 = HIBYTE(v49);
              }
              else {
                uint64_t v45 = *((void *)&v48 + 1);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
          }
          goto LABEL_138;
        }
        goto LABEL_136;
      }
    }
    else
    {
LABEL_41:
      if (v11 != 12) {
        goto LABEL_100;
      }
      BOOL v17 = *(void *)v48 == 0x537265746C69463CLL && *(_DWORD *)(v48 + 8) == 1046837865;
      uint64_t v10 = a1 + 124;
      if (v17) {
        goto LABEL_136;
      }
    }
    uint64_t v11 = *((void *)&v48 + 1);
LABEL_100:
    if (v11 == 15)
    {
      BOOL v28 = *(void *)v48 == 0x65726168536E493CLL && *(void *)(v48 + 7) == 0x3E73646E61426465;
      uint64_t v10 = a1 + 128;
      if (v28) {
        goto LABEL_136;
      }
      uint64_t v11 = *((void *)&v48 + 1);
    }
    if (v11 != 10) {
      goto LABEL_117;
    }
    BOOL v29 = *(void *)v48 == 0x7A69536C6F6F503CLL && *(_WORD *)(v48 + 8) == 15973;
    uint64_t v10 = v7;
    if (!v29) {
      goto LABEL_111;
    }
LABEL_136:
    kaldi::ReadBasicType<int>(a2, a3, v10);
LABEL_139:
    if (SHIBYTE(v49) < 0) {
      operator delete((void *)v48);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_142;
    }
  }
}

void sub_1B1E23A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 89) < 0) {
    operator delete(*(void **)(v22 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ReadBasicType<char>(void *a1, int a2, unsigned char *a3)
{
  v11[51] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v5 = std::istream::get();
    if (v5 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "ReadBasicType: encountered end of stream.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
    }
    if (v5 << 24 != 0x1000000)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ReadBasicType: did not get expected integer type, ", 50);
      uint64_t v8 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" vs. ", 5);
      BOOL v9 = (void *)std::ostream::operator<<();
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)".  You can change this code to successfully", 43);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, " read it later, if needed.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
    }
    uint64_t result = std::istream::read();
  }
  else
  {
    LOWORD(v11[0]) = 0;
    uint64_t result = MEMORY[0x1B3EA7DF0](a1, v11);
    *a3 = v11[0];
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Read failure in ReadBasicType, file position is ", 48);
    std::istream::tellg();
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", next char is ", 15);
    std::istream::peek();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return result;
}

void sub_1B1E23CCC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<InFeatureMaps>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<OutFeatureMaps>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PatchStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<SectionStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<SectionSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FilterSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<InSharedBands>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 272), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1B1E23F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::WriteData(uint64_t *a1, void *a2, int a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 168))(a1);
  kaldi::WriteBasicType<char>(a2, a3);
  kaldi::WriteToken(a2, a3, "<Filters>");
  kaldi::CuMatrixBase<float>::Write(a1[19], a2, a3, a4);
  kaldi::WriteToken(a2, a3, "<Bias>");
  uint64_t v8 = a1[20];
  kaldi::CuVectorBase<float>::Write(v8, a2, a3);
}

uint64_t kaldi::WriteBasicType<char>(void *a1, int a2)
{
  if (a2)
  {
    std::ostream::put();
    uint64_t result = std::ostream::write();
  }
  else
  {
    uint64_t v4 = (void *)std::ostream::operator<<();
    uint64_t result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteBasicType.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B1E240C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(a1 + 160) + 16)
                      + *(_DWORD *)(*(void *)(a1 + 152) + 16) * *(_DWORD *)(*(void *)(a1 + 152) + 20));
}

const void **kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetParams(void *a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  uint64_t v5 = a1[19];
  int v6 = *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v10, v5);
  uint64_t v7 = a1[20];
  int v8 = *(_DWORD *)(v7 + 16);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::SetParams(void *a1, char **a2)
{
  (*(void (**)(void *))(*a1 + 176))(a1);
  uint64_t v4 = a1[19];
  int v5 = *(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  BOOL v9 = *a2;
  LODWORD(v10) = v5;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v4, &v9);
  int v6 = (_DWORD *)a1[20];
  int v7 = v6[4];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  BOOL v9 = &(*a2)[4 * v5];
  LODWORD(v10) = v7;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v6, (uint64_t)&v9);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 312);
  unint64_t v3 = *(void *)(a1 + 320) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1)
{
  float v2 = kaldi::CuMatrixBase<float>::Sum(*(void *)(a1 + 152));
  double v3 = kaldi::CuVectorBase<float>::Sum(*(void *)(a1 + 160));
  return v2 + *(float *)&v3;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix(v6, *(unsigned int *)(*(void *)(a1 + 152) + 20), *(unsigned int *)(*(void *)(a1 + 152) + 16), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuMatrixBase<float>::AddMat(*(void *)(a1 + 152), (uint64_t)v6, 111, a2, 1.0);
  kaldi::CuVector<float>::CuVector(v5, *(void *)(a1 + 160));
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v5);
  kaldi::CuVectorBase<float>::AddVec(*(void *)(a1 + 160), (uint64_t)v5, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v5);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v6);
}

void sub_1B1E2436C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v25, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ParamsString(a1);
  if ((v24 & 0x80u) == 0) {
    unint64_t v4 = v23;
  }
  else {
    unint64_t v4 = (void **)v23[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v5 = v24;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v23[1];
  }
  int v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v26, "\n  filters");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 152));
  if ((v22 & 0x80u) == 0) {
    uint64_t v10 = v21;
  }
  else {
    uint64_t v10 = (void **)v21[0];
  }
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v11 = v22;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v21[1];
  }
  uint64_t v12 = std::string::append(&v27, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  BOOL v14 = std::string::append(&v28, "\n  bias");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 160));
  if ((v20 & 0x80u) == 0) {
    BOOL v16 = __p;
  }
  else {
    BOOL v16 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v17 = v20;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  BOOL v18 = std::string::append(&v29, (const std::string::value_type *)v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if ((char)v22 < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1B1E24580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 41) < 0) {
    operator delete(*(void **)(v45 - 64));
  }
  if (*(char *)(v45 - 73) < 0) {
    operator delete(*(void **)(v45 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ParamsString(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 168))(a1, v4, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" , # of sections: ", 18);
  float v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", section size after pooling: ", 30);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v4[1] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v6);
}

void sub_1B1E247D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v49, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ParamsString(a1);
  if ((v48 & 0x80u) == 0) {
    unint64_t v4 = v47;
  }
  else {
    unint64_t v4 = (void **)v47[0];
  }
  if ((v48 & 0x80u) == 0) {
    std::string::size_type v5 = v48;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v47[1];
  }
  uint64_t v6 = std::string::append(&v49, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v50, "\n  filters_grad");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 168));
  if ((v46 & 0x80u) == 0) {
    uint64_t v10 = v45;
  }
  else {
    uint64_t v10 = (void **)v45[0];
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v11 = v46;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v45[1];
  }
  uint64_t v12 = std::string::append(&v51, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  BOOL v14 = std::string::append(&v52, ", lr-coef ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v44 & 0x80u) == 0) {
    BOOL v16 = v43;
  }
  else {
    BOOL v16 = (void **)v43[0];
  }
  if ((v44 & 0x80u) == 0) {
    std::string::size_type v17 = v44;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v43[1];
  }
  BOOL v18 = std::string::append(&v53, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v20 = std::string::append(&v54, ", max-norm ");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v42 & 0x80u) == 0) {
    unsigned __int8 v22 = v41;
  }
  else {
    unsigned __int8 v22 = (void **)v41[0];
  }
  if ((v42 & 0x80u) == 0) {
    std::string::size_type v23 = v42;
  }
  else {
    std::string::size_type v23 = (std::string::size_type)v41[1];
  }
  unsigned __int8 v24 = std::string::append(&v55, (const std::string::value_type *)v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  std::string v26 = std::string::append(&v56, "\n  bias_grad");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 192));
  if ((v40 & 0x80u) == 0) {
    std::string v28 = v39;
  }
  else {
    std::string v28 = (void **)v39[0];
  }
  if ((v40 & 0x80u) == 0) {
    std::string::size_type v29 = v40;
  }
  else {
    std::string::size_type v29 = (std::string::size_type)v39[1];
  }
  BOOL v30 = std::string::append(&v57, (const std::string::value_type *)v28, v29);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  uint64_t v32 = std::string::append(&v58, ", lr-coef ");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0) {
    uint64_t v34 = __p;
  }
  else {
    uint64_t v34 = (void **)__p[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v35 = v38;
  }
  else {
    std::string::size_type v35 = (std::string::size_type)__p[1];
  }
  BOOL v36 = std::string::append(&v59, (const std::string::value_type *)v34, v35);
  *a2 = *v36;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if ((char)v38 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if ((char)v40 < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if ((char)v42 < 0) {
    operator delete(v41[0]);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if ((char)v44 < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if ((char)v46 < 0) {
    operator delete(v45[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if ((char)v48 < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
}

void sub_1B1E24BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v73 - 57) < 0) {
    operator delete(*(void **)(v73 - 80));
  }
  if (*(char *)(v73 - 89) < 0) {
    operator delete(*(void **)(v73 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v73 - 121) < 0) {
    operator delete(*(void **)(v73 - 144));
  }
  if (*(char *)(v73 - 153) < 0) {
    operator delete(*(void **)(v73 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v73 - 185) < 0) {
    operator delete(*(void **)(v73 - 208));
  }
  if (*(char *)(v73 - 217) < 0) {
    operator delete(*(void **)(v73 - 240));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(a1);
}

void sub_1B1E24D18()
{
}

void sub_1B1E24D20()
{
}

void sub_1B1E24D28()
{
}

void sub_1B1E24D30()
{
}

void sub_1B1E24D38()
{
}

void sub_1B1E24D40()
{
}

void sub_1B1E24D48()
{
}

void sub_1B1E24D50()
{
}

void *kaldi::nnet1::MomentStatistics<float>(void *a1)
{
  uint64_t v2 = *(unsigned int *)(*(void *)*a1 + 16);
  v7[1] = 0;
  uint64_t v8 = 0;
  v7[0] = &unk_1F0A517C0;
  uint64_t v9 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v7, v2, 0);
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v4 = 0;
    do
    {
      kaldi::CuVectorBase<float>::AddVec((uint64_t)v7, *(void *)(v3 + 8 * v4++), 1.0, 1.0);
      uint64_t v3 = *a1;
    }
    while (v4 < (uint64_t)(a1[1] - *a1) >> 3);
  }
  memset(v6, 0, sizeof(v6));
  kaldi::Vector<float>::Init(v6, v8);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v7, (uint64_t)v6);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v6);
  kaldi::Vector<float>::Destroy((uint64_t)v6);
  return kaldi::CuVector<float>::~CuVector(v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v7[3];
  const void *v8[2];
  uint64_t v9;
  uint64_t v10;

  uint64_t v2 = *(unsigned int *)(*a1 + 16);
  v8[1] = 0;
  uint64_t v9 = 0;
  v8[0] = &unk_1F0A517C0;
  uint64_t v10 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v8, v2, 0);
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v4 = 0;
    std::string::size_type v5 = 0;
    do
    {
      kaldi::CuVectorBase<float>::AddVec((uint64_t)v8, v3 + v4, 1.0, 1.0);
      ++v5;
      uint64_t v3 = *a1;
      v4 += 32;
    }
    while (v5 < (uint64_t)(a1[1] - *a1) >> 5);
  }
  memset(v7, 0, sizeof(v7));
  kaldi::Vector<float>::Init(v7, v9);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v8, (uint64_t)v7);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v7);
  kaldi::Vector<float>::Destroy((uint64_t)v7);
  return kaldi::CuVector<float>::~CuVector(v8);
}

void sub_1B1E24E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::PropagateFncDirect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  if (*(int *)(a1 + 128) <= 0) {
    float v8 = 0.0;
  }
  else {
    float v8 = 1.0;
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 384) + 48 * a4), *(unsigned int *)(a2 + 20), (*(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 120)), 3, 0);
  if (*(int *)(a1 + 144) >= 1)
  {
    int v9 = 0;
    do
    {
      int v10 = *(_DWORD *)(a1 + 128);
      int v11 = *(_DWORD *)(a1 + 120);
      int v67 = v9;
      if (v10 >= 1)
      {
        unsigned int v12 = *(_DWORD *)(a1 + 108);
        int v13 = v12 * v9 * v11;
        uint64_t v14 = *(void *)(a3 + 8) + 4 * v13;
        int v15 = *(_DWORD *)(a3 + 28) - v13;
        uint64_t v16 = *(void *)(a3 + 32);
        *(void *)((char *)&v75[1] + 4) = *(void *)(a3 + 20);
        LODWORD(v75[1]) = v12;
        HIDWORD(v75[2]) = v15;
        v75[3] = v16;
        uint64_t v74 = &unk_1F0A472A0;
        v75[0] = v14;
        int v17 = *(_DWORD *)(a1 + 104);
        int v18 = v17 * *(_DWORD *)(a1 + 140);
        uint64_t v19 = *(void *)(a2 + 8) + 4 * v18;
        int v20 = *(_DWORD *)(a2 + 28) - v18;
        uint64_t v21 = *(void *)(a2 + 32);
        LODWORD(v73[1]) = v17 * v10;
        *(void *)((char *)&v73[1] + 4) = *(void *)(a2 + 20);
        HIDWORD(v73[2]) = v20;
        v73[3] = v21;
        uint64_t v72 = &unk_1F0A472A0;
        v73[0] = v19;
        uint64_t v22 = *(void *)(a1 + 152);
        LODWORD(v21) = *(_DWORD *)(v22 + 24);
        int v23 = v21 * *(_DWORD *)(a1 + 124) * v17;
        uint64_t v24 = *(void *)(v22 + 8) + 4 * v23 + 4 * (int)(v12 * v9);
        int v25 = *(_DWORD *)(v22 + 28) - v23;
        uint64_t v26 = *(void *)(v22 + 32);
        *((void *)&v70 + 1) = __PAIR64__(v73[1], v12);
        LODWORD(v71) = v21;
        DWORD1(v71) = v25 - v12 * v9;
        *((void *)&v71 + 1) = v26;
        unint64_t v69 = &unk_1F0A472A0;
        *(void *)&long long v70 = v24;
        kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v74, (uint64_t)&v72, CblasNoTrans, (uint64_t)&v69, CblasNoTrans, 1.0, 0.0);
        int v27 = *(_DWORD *)(a1 + 120);
        if (v27 >= 2)
        {
          for (int i = 1; i < v27; ++i)
          {
            unsigned int v29 = *(_DWORD *)(a1 + 108) * (i + v67 * v27);
            uint64_t v30 = *(void *)(a3 + 8) + 4 * v29;
            unsigned int v31 = *(_DWORD *)(a3 + 28) - v29;
            uint64_t v32 = *(void *)(a3 + 32);
            LODWORD(v68[2]) = *(_DWORD *)(a1 + 108);
            *(void *)((char *)&v68[2] + 4) = *(void *)(a3 + 20);
            HIDWORD(v68[3]) = v31;
            v68[4] = v32;
            v68[0] = &unk_1F0A472A0;
            v68[1] = v30;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v68, (uint64_t)&v74, 111);
            v68[0] = &unk_1F0A472A0;
            memset(&v68[1], 0, 32);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v68);
            int v27 = *(_DWORD *)(a1 + 120);
          }
        }
        unint64_t v69 = &unk_1F0A472A0;
        long long v70 = 0u;
        long long v71 = 0u;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v69);
        uint64_t v72 = &unk_1F0A472A0;
        memset(v73, 0, sizeof(v73));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v72);
        uint64_t v74 = &unk_1F0A472A0;
        memset(v75, 0, sizeof(v75));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v74);
        int v11 = *(_DWORD *)(a1 + 120);
        int v9 = v67;
      }
      if (v11 >= 1)
      {
        int v33 = 0;
        do
        {
          uint64_t v34 = *(void *)(a1 + 384) + 48 * a4;
          int v35 = *(_DWORD *)(a1 + 108);
          int v36 = *(_DWORD *)(v34 + 28) - v35 * v33;
          uint64_t v37 = *(void *)(v34 + 32);
          v75[0] = *(void *)(v34 + 8) + 4 * v35 * v33;
          LODWORD(v75[1]) = v35;
          *(void *)((char *)&v75[1] + 4) = *(void *)(v34 + 20);
          HIDWORD(v75[2]) = v36;
          v75[3] = v37;
          uint64_t v74 = &unk_1F0A472A0;
          uint64_t v38 = *(void *)(a1 + 160);
          v73[1] = 0;
          uint64_t v39 = *(void *)(v38 + 8) + 4 * v35 * v9;
          uint64_t v72 = &unk_1F0A472D0;
          v73[0] = v39;
          LODWORD(v73[1]) = v35;
          v73[2] = *(void *)(v38 + 24);
          kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v74, (uint64_t)&v72, 1.0, v8);
          int v40 = *(_DWORD *)(a1 + 104);
          int v41 = (*(_DWORD *)(a1 + 116) * v9 + *(_DWORD *)(a1 + 112) * v33) * v40;
          uint64_t v42 = *(void *)(a2 + 8) + 4 * v41;
          int v43 = *(_DWORD *)(a2 + 28) - v41;
          uint64_t v44 = *(void *)(a2 + 32);
          LODWORD(v73[1]) = *(_DWORD *)(a1 + 124) * v40;
          *(void *)((char *)&v73[1] + 4) = *(void *)(a2 + 20);
          HIDWORD(v73[2]) = v43;
          v73[3] = v44;
          uint64_t v72 = &unk_1F0A472A0;
          v73[0] = v42;
          uint64_t v45 = *(void *)(a1 + 152);
          LODWORD(v42) = *(_DWORD *)(a1 + 108);
          uint64_t v46 = *(void *)(v45 + 8) + 4 * (int)v42 * v9;
          int v47 = *(_DWORD *)(v45 + 24);
          int v48 = *(_DWORD *)(v45 + 28);
          uint64_t v49 = *(void *)(v45 + 32);
          *((void *)&v70 + 1) = __PAIR64__(v73[1], v42);
          LODWORD(v71) = v47;
          DWORD1(v71) = v48 - v42 * v9;
          *((void *)&v71 + 1) = v49;
          unint64_t v69 = &unk_1F0A472A0;
          *(void *)&long long v70 = v46;
          kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v74, (uint64_t)&v72, CblasNoTrans, (uint64_t)&v69, CblasNoTrans, 1.0, 1.0);
          unint64_t v69 = &unk_1F0A472A0;
          long long v70 = 0u;
          long long v71 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v69);
          uint64_t v72 = &unk_1F0A472A0;
          memset(v73, 0, sizeof(v73));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v72);
          uint64_t v74 = &unk_1F0A472A0;
          memset(v75, 0, sizeof(v75));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v74);
          ++v33;
        }
        while (v33 < *(_DWORD *)(a1 + 120));
      }
      int v50 = *(_DWORD *)(a1 + 148);
      if (v50 >= 1)
      {
        for (int j = 0; j < v50; ++j)
        {
          int v52 = *(_DWORD *)(a1 + 108);
          unsigned int v53 = v52 * (j + v50 * v9);
          uint64_t v54 = *(void *)(a3 + 8) + 4 * v53;
          unsigned int v55 = *(_DWORD *)(a3 + 28) - v53;
          uint64_t v56 = *(void *)(a3 + 32);
          *(void *)((char *)&v75[1] + 4) = *(void *)(a3 + 20);
          LODWORD(v75[1]) = v52;
          HIDWORD(v75[2]) = v55;
          v75[3] = v56;
          uint64_t v74 = &unk_1F0A472A0;
          v75[0] = v54;
          uint64_t v57 = *(void *)(a1 + 384) + 48 * a4;
          LODWORD(v54) = v52 * j * *(_DWORD *)(a1 + 136);
          uint64_t v58 = *(void *)(v57 + 8) + 4 * (int)v54;
          LODWORD(v54) = *(_DWORD *)(v57 + 28) - v54;
          uint64_t v59 = *(void *)(v57 + 32);
          v73[0] = v58;
          LODWORD(v73[1]) = v52;
          *(void *)((char *)&v73[1] + 4) = *(void *)(v57 + 20);
          HIDWORD(v73[2]) = v54;
          v73[3] = v59;
          uint64_t v72 = &unk_1F0A472A0;
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v74, (uint64_t)&v72, 111);
          uint64_t v72 = &unk_1F0A472A0;
          memset(v73, 0, sizeof(v73));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v72);
          if (*(int *)(a1 + 132) >= 2)
          {
            int v60 = 1;
            do
            {
              uint64_t v61 = *(void *)(a1 + 384) + 48 * a4;
              int v62 = *(_DWORD *)(a1 + 108);
              int v63 = (v60 + j * *(_DWORD *)(a1 + 136)) * v62;
              uint64_t v64 = *(void *)(v61 + 8) + 4 * v63;
              int v65 = *(_DWORD *)(v61 + 28) - v63;
              uint64_t v66 = *(void *)(v61 + 32);
              v73[0] = v64;
              LODWORD(v73[1]) = v62;
              *(void *)((char *)&v73[1] + 4) = *(void *)(v61 + 20);
              HIDWORD(v73[2]) = v65;
              v73[3] = v66;
              uint64_t v72 = &unk_1F0A472A0;
              kaldi::CuMatrixBase<float>::Max((uint64_t)&v74, (uint64_t)&v72);
              uint64_t v72 = &unk_1F0A472A0;
              memset(v73, 0, sizeof(v73));
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v72);
              ++v60;
            }
            while (v60 < *(_DWORD *)(a1 + 132));
          }
          uint64_t v74 = &unk_1F0A472A0;
          memset(v75, 0, sizeof(v75));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v74);
          int v50 = *(_DWORD *)(a1 + 148);
          int v9 = v67;
        }
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1B1E25564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, uint64_t a13, uint64_t a14, _OWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a21);
  *int v27 = 0u;
  v27[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a26);
  *(void *)(v28 - 144) = v26;
  *a15 = 0u;
  a15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v28 - 144));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix(v17, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v16, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, void))(*(void *)v8 + 112))(v8, a2, v17, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, uint64_t, int32x2_t *, void))(*(void *)v8 + 128))(v8, a2, v17, a3, v16, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  uint64_t v9 = a1[19];
  LODWORD(a2) = *(_DWORD *)(v9 + 16);
  LODWORD(a3) = *(_DWORD *)(v9 + 20);
  uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v10, 1);
  LODWORD(a3) = a2 * a3;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v13 = (char *)*a4;
  LODWORD(v14) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v13, **(void **)(v8 + 168));
  int v11 = *(_DWORD *)(a1[20] + 16);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v13 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v14) = v11;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(const void ****)(v8 + 192), (uint64_t)&v13);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v16);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v17);
}

void sub_1B1E2583C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 276) = a3;
  *(_DWORD *)(result + 272) = a2;
  *(unsigned char *)(result + 480) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  float v4 = a3;
  int v6 = *(_DWORD *)(a1 + 272);
  if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(void *)(*(void *)(a1 + 168) + 8 * a2), *(void *)(a1 + 216) + 48 * a2, a3);
      uint64_t v9 = *(void *)(*(void *)(a1 + 192) + 8 * a2);
      uint64_t v10 = *(void *)(a1 + 240) + 32 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, v10, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a3 > 0.0)
    {
      uint64_t v11 = a2;
      if (*(unsigned char *)(a1 + 84)) {
        float v4 = (float)*(int *)(*(void *)(a1 + 288) + 4 * a2) * a3;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(void *)(*(void *)(a1 + 168) + 8 * a2), (int *)(*(void *)(a1 + 216) + 48 * a2), v4);
      uint64_t v13 = *(void *)(*(void *)(a1 + 192) + 8 * v11);
      uint64_t v14 = (void *)(*(void *)(a1 + 240) + 32 * v11);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v13, v14, v4);
    }
  }
  else if (v6 == 1 && a3 > 0.0)
  {
    uint64_t v7 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v4 = (float)*(int *)(*(void *)(a1 + 288) + 4 * a2) * a3;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(void *)(*(void *)(a1 + 168) + 8 * a2), v4);
    uint64_t v12 = *(void *)(*(void *)(a1 + 192) + 8 * v7);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v12, v4);
  }
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  *a3 = *(_DWORD *)(*(void *)(a1 + 160) + 16)
      + *(_DWORD *)(*(void *)(a1 + 152) + 16) * *(_DWORD *)(*(void *)(a1 + 152) + 20);
  uint64_t v6 = *(void *)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 176) - v6;
  if (v7 && (uint64_t v8 = *(void *)(a1 + 200) - *(void *)(a1 + 192)) != 0)
  {
    uint64_t v9 = v7 >> 3;
    uint64_t v10 = v8 >> 3;
    int v11 = *(_DWORD *)(a1 + 80);
    if (v11 == 1) {
      int v11 = 0;
    }
    uint64_t v12 = v11;
    uint64_t v13 = v10 - 1;
    if (v9 - 1 != v11 || v13 != v11)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      int v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"  ", 2);
      int v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
    }
    int v15 = kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v6 + 8 * v11));
    int v16 = kaldi::CuVectorBase<float>::CountZeros(*(void *)(*(void *)(a1 + 192) + 8 * v12)) + v15;
  }
  else
  {
    int v16 = 0;
  }
  *a2 = v16;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (!*(unsigned char *)(a1 + 480))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 408), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 360), v3);
    std::vector<BOOL>::resize(a1 + 456, v3, 0);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 168), v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 192), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 216), v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 240), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 288), v3);
    *(unsigned char *)(a1 + 480) = 1;
  }
}

void sub_1B1E25DD8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void sub_1B1E25E58(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void sub_1B1E25ECC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::CuMatrixBase<float>::AddMat(*(void *)(a1 + 152), *(void *)(*(void *)(a1 + 168) + 8 * a2), 111, -(float)(a3 * *(float *)(a1 + 264)), 1.0);
  uint64_t v6 = *(void *)(a1 + 160);
  float v7 = -(float)(a3 * *(float *)(a1 + 268));
  uint64_t v8 = *(void *)(*(void *)(a1 + 192) + 8 * a2);
  kaldi::CuVectorBase<float>::AddVec(v6, v8, v7, 1.0);
}

uint64_t *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  unint64_t v4 = v3;
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 336), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 384), v4);
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 432), v4);
}

double kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4EAF8;
  *(void *)(a1 + 88) = &unk_1F0A4EC30;
  *(void *)(a1 + 96) = &unk_1F0A4EC58;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 264) = _D1;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4EAF8;
  *(void *)(a1 + 88) = &unk_1F0A4EC30;
  *(void *)(a1 + 96) = &unk_1F0A4EC58;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 168) + 8 * v8);
      if (v9) {
        kaldi::NewCuSubOrMat<float>(v9, *(unsigned __int8 *)(a1 + 16));
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v12)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_1B1E265C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  uint64_t v19 = (void *)*((void *)v16 + 57);
  if (v19) {
    operator delete(v19);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  int v20 = *a12;
  if (*a12)
  {
    *((void *)v16 + 40) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v18, 0);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(void *a1, uint64_t *a2)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs((uint64_t)a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(a1[21] + 8 * ((((a1[22] - a1[21]) << 29) - 0x100000000) >> 32)));
  uint64_t v4 = *(void *)(a1[24] + 8 * ((((a1[25] - a1[24]) << 29) - 0x100000000) >> 32));
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v4);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A4EAF8;
  int v2 = (quasar::Bitmap *)(a1 + 88);
  *(void *)(a1 + 88) = &unk_1F0A4EC30;
  int v3 = (quasar::Bitmap *)(a1 + 96);
  *(void *)(a1 + 96) = &unk_1F0A4EC58;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 488));
  uint64_t v4 = *(void **)(a1 + 456);
  if (v4) {
    operator delete(v4);
  }
  unint64_t v8 = (void **)(a1 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  long long v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(void *)(a1 + 320) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 296) = v6;
    operator delete(v6);
  }
  unint64_t v8 = (void **)(a1 + 240);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 216);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 192);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 168);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v7 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), 0);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::Copy()
{
}

void sub_1B1E26A7C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v82 = 0x40000000;
  int v83 = -1073741824;
  int v81 = 1036831949;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  uint64_t v6 = (int *)(a1 + 116);
  *(void *)(a1 + 132) = 0x100000001;
  uint64_t v7 = (int *)(a1 + 132);
  int v80 = -1;
  memset(v79, 0, sizeof(v79));
  unint64_t v8 = a2 + 4;
  uint64_t v9 = (int *)(a1 + 280);
  long long v70 = (int *)(a1 + 128);
  long long v71 = (int *)(a1 + 264);
  uint64_t v10 = (int *)(a1 + 124);
  unint64_t v68 = (int *)(a1 + 136);
  unint64_t v69 = (int *)(a1 + 120);
  uint64_t v72 = (int *)(a1 + 112);
  uint64_t v73 = (int *)(a1 + 268);
  uint64_t v74 = (int *)(a1 + 108);
  uint64_t v11 = (int *)(a1 + 104);
  while (1)
  {
    if ((*((unsigned char *)v8 + *(void *)(*a2 - 24)) & 2) != 0)
    {
      int v48 = *(_DWORD *)(a1 + 8);
      int v49 = *(_DWORD *)(a1 + 12);
      int v51 = *(_DWORD *)(a1 + 104);
      int v50 = *(_DWORD *)(a1 + 108);
      int v52 = *(_DWORD *)(a1 + 132);
      int v53 = v48 / v51 - *(_DWORD *)(a1 + 128);
      int v54 = *(_DWORD *)(a1 + 120);
      int v55 = *(_DWORD *)(a1 + 136);
      int v56 = (v54 - v52) / v55 + 1;
      *(_DWORD *)(a1 + 148) = v56;
      int v57 = v50 * v56;
      int v58 = v49 / v57;
      *(_DWORD *)(a1 + 140) = v53;
      *(_DWORD *)(a1 + 144) = v49 / v57;
      if (v52 >= 1 && v54 >= v52)
      {
        if (v55 > 0)
        {
          if (v49 == v57 * v58)
          {
            if (v48 == v48 / v51 * v51)
            {
              if (*v10 + *v72 * (v54 - 1) + *v6 * (v58 - 1) <= v53)
              {
                if (v80 >= 1) {
                  kaldi::UniformRandomNumber::SetRandomSeeds(a3, v80);
                }
                kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v77, a3);
                kaldi::Matrix<float>::Matrix((uint64_t)v75, ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)), (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)), 0, 0);
                for (int i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v75); ++i)
                {
                  for (uint64_t j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v75); ++j)
                  {
                    float v61 = *(float *)&v81;
                    kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v77, 0);
                    *(float *)(v75[0] + 4 * i * v76 + 4 * j) = v61 * v62;
                  }
                }
                if (!*(void *)(a1 + 152)) {
                  operator new();
                }
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"pointer is thought to be un-initialized here", 44);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
              }
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: too few input bands to compute the output", 75);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
            }
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: input dim mismatch", 52);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
          }
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: output dim mismatch", 53);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: Max pooling step must be >= 1", 63);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: Invalid max pooling size", 58);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v79);
    if ((SHIBYTE(v79[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v79[2]))
      {
        case 9:
          goto LABEL_78;
        case 0xA:
          if (v79[0] == 0x61654D736169423CLL && LOWORD(v79[1]) == 15982) {
            goto LABEL_165;
          }
          BOOL v13 = v79[0] == 0x7A69536C6F6F503CLL && LOWORD(v79[1]) == 15973;
          uint64_t v14 = v7;
          if (v13) {
            goto LABEL_162;
          }
          BOOL v15 = v79[0] == 0x6574536C6F6F503CLL && LOWORD(v79[1]) == 15984;
          uint64_t v14 = v68;
          if (v15) {
            goto LABEL_162;
          }
          if ((v79[2] & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
LABEL_77:
          if (HIBYTE(v79[2]) != 9) {
            goto LABEL_184;
          }
LABEL_78:
          BOOL v31 = v79[0] == 0x6D726F4E78614D3CLL && LOBYTE(v79[1]) == 62;
          uint64_t v26 = v9;
          if (v31) {
            goto LABEL_166;
          }
          if ((v79[2] & 0x8000000000000000) != 0) {
            goto LABEL_83;
          }
          goto LABEL_184;
        case 0xB:
          if (v79[0] == 0x6E6152736169423CLL && *(void *)((char *)v79 + 3) == 0x3E65676E61527361) {
            goto LABEL_164;
          }
          BOOL v28 = v79[0] == 0x745368637461503CLL && *(void *)((char *)v79 + 3) == 0x3E70657453686374;
          goto LABEL_110;
        case 0xC:
          BOOL v32 = v79[0] == 0x537265746C69463CLL && LODWORD(v79[1]) == 1046837865;
          uint64_t v14 = v10;
          if (!v32) {
            goto LABEL_88;
          }
          goto LABEL_162;
        case 0xD:
          if (v79[0] == 0x74536D617261503CLL && *(void *)((char *)v79 + 5) == 0x3E7665646474536DLL) {
            goto LABEL_163;
          }
          BOOL v21 = v79[0] == 0x6E6F69746365533CLL && *(void *)((char *)v79 + 5) == 0x3E706574536E6F69;
          uint64_t v14 = v6;
          if (v21) {
            goto LABEL_162;
          }
          BOOL v22 = v79[0] == 0x6E6F69746365533CLL && *(void *)((char *)v79 + 5) == 0x3E657A69536E6F69;
          goto LABEL_123;
        case 0xF:
          BOOL v23 = v79[0] == 0x75746165466E493CLL && *(void *)((char *)v79 + 7) == 0x3E7370614D657275;
          uint64_t v14 = v11;
          if (v23) {
            goto LABEL_162;
          }
          BOOL v24 = v79[0] == 0x65726168536E493CLL && *(void *)((char *)v79 + 7) == 0x3E73646E61426465;
          uint64_t v14 = v70;
          if (v24) {
            goto LABEL_162;
          }
          BOOL v25 = v79[0] == 0x61526E7261654C3CLL && *(void *)((char *)v79 + 7) == 0x3E66656F43657461;
          uint64_t v26 = v71;
          if (v25) {
            goto LABEL_166;
          }
          if (HIBYTE(v79[2]) == 9) {
            goto LABEL_78;
          }
          if (HIBYTE(v79[2]) != 12) {
            goto LABEL_184;
          }
LABEL_88:
          int v33 = v79;
          goto LABEL_156;
        case 0x10:
          BOOL v34 = v79[0] == 0x7461654674754F3CLL && v79[1] == 0x3E7370614D657275;
          goto LABEL_101;
        case 0x13:
          BOOL v30 = v79[0] == 0x61654C736169423CLL
             && v79[1] == 0x6F43657461526E72
             && *(void *)((char *)&v79[1] + 3) == 0x3E66656F43657461;
          uint64_t v26 = v73;
          if (v30) {
            goto LABEL_166;
          }
          if (HIBYTE(v79[2]) != 12) {
            goto LABEL_77;
          }
          goto LABEL_88;
        default:
          goto LABEL_184;
      }
    }
    uint64_t v16 = v79[1];
    switch(v79[1])
    {
      case 0xALL:
        if (*(void *)v79[0] == 0x61654D736169423CLL && *(_WORD *)(v79[0] + 8) == 15982)
        {
LABEL_165:
          uint64_t v26 = &v83;
        }
        else
        {
          BOOL v18 = *(void *)v79[0] == 0x7A69536C6F6F503CLL && *(_WORD *)(v79[0] + 8) == 15973;
          uint64_t v14 = v7;
          if (v18) {
            goto LABEL_162;
          }
          if (v79[1] == 10)
          {
            BOOL v19 = *(void *)v79[0] == 0x6574536C6F6F503CLL && *(_WORD *)(v79[0] + 8) == 15984;
            uint64_t v14 = v68;
            if (v19) {
              goto LABEL_162;
            }
LABEL_33:
            uint64_t v16 = v79[1];
          }
LABEL_34:
          if (v16 == 15)
          {
LABEL_133:
            BOOL v41 = *(void *)v79[0] == 0x61526E7261654C3CLL && *(void *)(v79[0] + 7) == 0x3E66656F43657461;
            uint64_t v26 = v71;
            if (v41) {
              goto LABEL_166;
            }
            uint64_t v16 = v79[1];
          }
          if (v16 == 19)
          {
            BOOL v43 = *(void *)v79[0] == 0x61654C736169423CLL
               && *(void *)(v79[0] + 8) == 0x6F43657461526E72
               && *(void *)(v79[0] + 11) == 0x3E66656F43657461;
            uint64_t v26 = v73;
            if (v43) {
              goto LABEL_166;
            }
            uint64_t v16 = v79[1];
          }
          if (v16 != 9) {
            goto LABEL_154;
          }
          BOOL v44 = *(void *)v79[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v79[0] + 8) == 62;
          uint64_t v26 = v9;
          if (!v44)
          {
LABEL_83:
            uint64_t v16 = v79[1];
LABEL_154:
            if (v16 != 12) {
              goto LABEL_184;
            }
LABEL_155:
            int v33 = (void *)v79[0];
LABEL_156:
            uint64_t v45 = *v33;
            int v46 = *((_DWORD *)v33 + 2);
            if (v45 != 0x536D6F646E61523CLL || v46 != 1046766949)
            {
LABEL_184:
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
              int v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Unknown token ", 14);
              if (v79[2] >= 0) {
                uint64_t v64 = v79;
              }
              else {
                uint64_t v64 = (void *)v79[0];
              }
              if (v79[2] >= 0) {
                uint64_t v65 = HIBYTE(v79[2]);
              }
              else {
                uint64_t v65 = v79[1];
              }
              uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
              int v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)", a typo in config?", 19);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" (ParamStddev|BiasMean|BiasRange|InFeatureMaps|OutFeatureMaps|PatchStep|SectionStep|SectionSize|FilterSize|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed)", 158);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
            }
            uint64_t v14 = &v80;
LABEL_162:
            kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v14);
            goto LABEL_167;
          }
        }
LABEL_166:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v26);
LABEL_167:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0xBLL:
        if (*(void *)v79[0] != 0x6E6152736169423CLL || *(void *)(v79[0] + 3) != 0x3E65676E61527361)
        {
          BOOL v28 = *(void *)v79[0] == 0x745368637461503CLL && *(void *)(v79[0] + 3) == 0x3E70657453686374;
LABEL_110:
          uint64_t v14 = v72;
          if (!v28) {
            goto LABEL_184;
          }
          goto LABEL_162;
        }
LABEL_164:
        uint64_t v26 = &v82;
        goto LABEL_166;
      case 0xCLL:
        BOOL v35 = *(void *)v79[0] == 0x537265746C69463CLL && *(_DWORD *)(v79[0] + 8) == 1046837865;
        uint64_t v14 = v10;
        if (!v35) {
          goto LABEL_155;
        }
        goto LABEL_162;
      case 0xDLL:
        if (*(void *)v79[0] != 0x74536D617261503CLL || *(void *)(v79[0] + 5) != 0x3E7665646474536DLL)
        {
          BOOL v38 = *(void *)v79[0] == 0x6E6F69746365533CLL && *(void *)(v79[0] + 5) == 0x3E706574536E6F69;
          uint64_t v14 = v6;
          if (!v38)
          {
            BOOL v22 = *(void *)v79[0] == 0x6E6F69746365533CLL && *(void *)(v79[0] + 5) == 0x3E657A69536E6F69;
LABEL_123:
            uint64_t v14 = v69;
            if (!v22) {
              goto LABEL_184;
            }
          }
          goto LABEL_162;
        }
LABEL_163:
        uint64_t v26 = &v81;
        goto LABEL_166;
      case 0xFLL:
        BOOL v39 = *(void *)v79[0] == 0x75746165466E493CLL && *(void *)(v79[0] + 7) == 0x3E7370614D657275;
        uint64_t v14 = v11;
        if (!v39)
        {
          BOOL v40 = *(void *)v79[0] == 0x65726168536E493CLL && *(void *)(v79[0] + 7) == 0x3E73646E61426465;
          uint64_t v14 = v70;
          if (!v40) {
            goto LABEL_133;
          }
        }
        goto LABEL_162;
      case 0x10:
        BOOL v34 = *(void *)v79[0] == 0x7461654674754F3CLL && *(void *)(v79[0] + 8) == 0x3E7370614D657275;
LABEL_101:
        uint64_t v14 = v74;
        if (!v34) {
          goto LABEL_184;
        }
        goto LABEL_162;
      default:
        goto LABEL_34;
    }
  }
}

void sub_1B1E27844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (*(char *)(v24 - 121) < 0) {
    operator delete(*(void **)(v24 - 144));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  uint64_t v6 = a1 + 116;
  *(void *)(a1 + 132) = 0x100000001;
  uint64_t v7 = a1 + 132;
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_142:
    int v39 = *(_DWORD *)(a1 + 12);
    int v40 = *(_DWORD *)(a1 + 108);
    int v41 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 128);
    int v42 = (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 132)) / *(_DWORD *)(a1 + 136) + 1;
    *(_DWORD *)(a1 + 148) = v42;
    *(unsigned char *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 140) = v41;
    *(_DWORD *)(a1 + 144) = v39 / (v40 * v42);
    LOBYTE(v48) = 0;
    kaldi::ReadBasicType<char>(a2, a3, &v48);
    if (!*(void *)(a1 + 152))
    {
      kaldi::ExpectToken(a2, a3, "<Filters>");
      operator new();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v48);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      unint64_t v8 = (uint64_t *)&v48;
      switch(HIBYTE(v49))
      {
        case 0xA:
          goto LABEL_87;
        case 0xB:
LABEL_4:
          BOOL v9 = (void)v48 == 0x745368637461503CLL && *(void *)((char *)&v48 + 3) == 0x3E70657453686374;
          uint64_t v10 = a1 + 112;
          if (!v9) {
            goto LABEL_86;
          }
          goto LABEL_136;
        case 0xC:
          goto LABEL_81;
        case 0xD:
LABEL_68:
          BOOL v23 = (void)v48 == 0x6E6F69746365533CLL && *(void *)((char *)&v48 + 5) == 0x3E706574536E6F69;
          uint64_t v10 = v6;
          if (v23) {
            goto LABEL_136;
          }
          if (HIBYTE(v49) == 10) {
            goto LABEL_87;
          }
          if (HIBYTE(v49) == 12) {
            goto LABEL_81;
          }
          if (HIBYTE(v49) != 13) {
            goto LABEL_132;
          }
          BOOL v24 = (void)v48 == 0x6E6F69746365533CLL && *(void *)((char *)&v48 + 5) == 0x3E657A69536E6F69;
          uint64_t v10 = a1 + 120;
          if (!v24) {
            goto LABEL_132;
          }
          goto LABEL_136;
        case 0xF:
          BOOL v18 = (void)v48 == 0x75746165466E493CLL && *(void *)((char *)&v48 + 7) == 0x3E7370614D657275;
          uint64_t v10 = a1 + 104;
          if (v18) {
            goto LABEL_136;
          }
LABEL_52:
          BOOL v19 = (void)v48 == 0x65726168536E493CLL && *(void *)((char *)&v48 + 7) == 0x3E73646E61426465;
          uint64_t v10 = a1 + 128;
          if (v19) {
            goto LABEL_136;
          }
          if (HIBYTE(v49) != 15) {
            goto LABEL_86;
          }
          BOOL v20 = (void)v48 == 0x61526E7261654C3CLL && *(void *)((char *)&v48 + 7) == 0x3E66656F43657461;
          BOOL v21 = (float *)(a1 + 264);
          if (!v20) {
            goto LABEL_132;
          }
          goto LABEL_138;
        case 0x10:
          BOOL v22 = (void)v48 == 0x7461654674754F3CLL && *((void *)&v48 + 1) == 0x3E7370614D657275;
          uint64_t v10 = a1 + 108;
          if (!v22)
          {
            switch(HIBYTE(v49))
            {
              case 0xA:
                goto LABEL_87;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_81;
              case 0xD:
                goto LABEL_68;
              case 0xF:
                goto LABEL_52;
              default:
                goto LABEL_132;
            }
          }
          goto LABEL_136;
        case 0x13:
          goto LABEL_125;
        default:
          goto LABEL_132;
      }
    }
    uint64_t v11 = *((void *)&v48 + 1);
    if (*((void *)&v48 + 1) == 15)
    {
      BOOL v12 = *(void *)v48 == 0x75746165466E493CLL && *(void *)(v48 + 7) == 0x3E7370614D657275;
      uint64_t v10 = a1 + 104;
      if (v12) {
        goto LABEL_136;
      }
    }
    if (*((void *)&v48 + 1) == 16)
    {
      BOOL v13 = *(void *)v48 == 0x7461654674754F3CLL && *(void *)(v48 + 8) == 0x3E7370614D657275;
      uint64_t v10 = a1 + 108;
      if (v13) {
        goto LABEL_136;
      }
      uint64_t v11 = *((void *)&v48 + 1);
    }
    if (v11 == 11)
    {
      BOOL v14 = *(void *)v48 == 0x745368637461503CLL && *(void *)(v48 + 3) == 0x3E70657453686374;
      uint64_t v10 = a1 + 112;
      if (v14) {
        goto LABEL_136;
      }
      uint64_t v11 = *((void *)&v48 + 1);
    }
    if (v11 != 13) {
      goto LABEL_41;
    }
    BOOL v15 = *(void *)v48 == 0x6E6F69746365533CLL && *(void *)(v48 + 5) == 0x3E706574536E6F69;
    uint64_t v10 = v6;
    if (v15) {
      goto LABEL_136;
    }
    uint64_t v11 = *((void *)&v48 + 1);
    if (*((void *)&v48 + 1) != 13) {
      goto LABEL_41;
    }
    BOOL v16 = *(void *)v48 == 0x6E6F69746365533CLL && *(void *)(v48 + 5) == 0x3E657A69536E6F69;
    uint64_t v10 = a1 + 120;
    if (v16) {
      goto LABEL_136;
    }
    if ((v49 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v49) == 10) {
        goto LABEL_87;
      }
      if (HIBYTE(v49) != 12) {
        goto LABEL_132;
      }
LABEL_81:
      BOOL v25 = (void)v48 == 0x537265746C69463CLL && DWORD2(v48) == 1046837865;
      uint64_t v10 = a1 + 124;
      if (v25) {
        goto LABEL_136;
      }
      if ((v49 & 0x8000000000000000) == 0)
      {
LABEL_86:
        if (HIBYTE(v49) != 10) {
          goto LABEL_132;
        }
LABEL_87:
        BOOL v26 = (void)v48 == 0x7A69536C6F6F503CLL && WORD4(v48) == 15973;
        uint64_t v10 = v7;
        if (v26) {
          goto LABEL_136;
        }
        if ((v49 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v49) != 10) {
            goto LABEL_132;
          }
          BOOL v27 = (void)v48 == 0x6574536C6F6F503CLL && WORD4(v48) == 15984;
          uint64_t v10 = v6 + 20;
          if (!v27) {
            goto LABEL_132;
          }
          goto LABEL_136;
        }
LABEL_111:
        uint64_t v11 = *((void *)&v48 + 1);
        if (*((void *)&v48 + 1) != 10) {
          goto LABEL_117;
        }
        BOOL v30 = *(void *)v48 == 0x6574536C6F6F503CLL && *(_WORD *)(v48 + 8) == 15984;
        uint64_t v10 = v6 + 20;
        if (!v30)
        {
          if (v49 < 0)
          {
LABEL_117:
            if (v11 == 15)
            {
              BOOL v31 = *(void *)v48 == 0x61526E7261654C3CLL && *(void *)(v48 + 7) == 0x3E66656F43657461;
              BOOL v21 = (float *)(a1 + 264);
              if (!v31)
              {
                uint64_t v11 = *((void *)&v48 + 1);
                goto LABEL_123;
              }
LABEL_138:
              kaldi::ReadBasicType<float>(a2, a3, v21);
              goto LABEL_139;
            }
LABEL_123:
            if (v11 == 19)
            {
              unint64_t v8 = (uint64_t *)v48;
LABEL_125:
              uint64_t v32 = *v8;
              uint64_t v33 = v8[1];
              uint64_t v34 = *(uint64_t *)((char *)v8 + 11);
              BOOL v35 = v32 == 0x61654C736169423CLL && v33 == 0x6F43657461526E72;
              BOOL v36 = v35 && v34 == 0x3E66656F43657461;
              BOOL v21 = (float *)(a1 + 268);
              if (v36) {
                goto LABEL_138;
              }
            }
          }
LABEL_132:
          BOOL v37 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v48, "<MaxNorm>");
          BOOL v21 = (float *)(a1 + 280);
          if (!v37)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v48, "<GradientNormType>"))
            {
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v47 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)__p);
              *(_DWORD *)(a1 + 272) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
              if (SHIBYTE(v47) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_139;
            }
            BOOL v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v48, "<MaxGrad>");
            BOOL v21 = (float *)(a1 + 276);
            if (!v38)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              BOOL v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
              if (v49 >= 0) {
                BOOL v44 = &v48;
              }
              else {
                BOOL v44 = (long long *)v48;
              }
              if (v49 >= 0) {
                uint64_t v45 = HIBYTE(v49);
              }
              else {
                uint64_t v45 = *((void *)&v48 + 1);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
          }
          goto LABEL_138;
        }
        goto LABEL_136;
      }
    }
    else
    {
LABEL_41:
      if (v11 != 12) {
        goto LABEL_100;
      }
      BOOL v17 = *(void *)v48 == 0x537265746C69463CLL && *(_DWORD *)(v48 + 8) == 1046837865;
      uint64_t v10 = a1 + 124;
      if (v17) {
        goto LABEL_136;
      }
    }
    uint64_t v11 = *((void *)&v48 + 1);
LABEL_100:
    if (v11 == 15)
    {
      BOOL v28 = *(void *)v48 == 0x65726168536E493CLL && *(void *)(v48 + 7) == 0x3E73646E61426465;
      uint64_t v10 = a1 + 128;
      if (v28) {
        goto LABEL_136;
      }
      uint64_t v11 = *((void *)&v48 + 1);
    }
    if (v11 != 10) {
      goto LABEL_117;
    }
    BOOL v29 = *(void *)v48 == 0x7A69536C6F6F503CLL && *(_WORD *)(v48 + 8) == 15973;
    uint64_t v10 = v7;
    if (!v29) {
      goto LABEL_111;
    }
LABEL_136:
    kaldi::ReadBasicType<int>(a2, a3, v10);
LABEL_139:
    if (SHIBYTE(v49) < 0) {
      operator delete((void *)v48);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_142;
    }
  }
}

void sub_1B1E28250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 89) < 0) {
    operator delete(*(void **)(v22 - 112));
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<InFeatureMaps>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<OutFeatureMaps>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PatchStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<SectionStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<SectionSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FilterSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<InSharedBands>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 272), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1B1E28554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  kaldi::WriteBasicType<char>(a2, a3);
  kaldi::WriteToken(a2, a3, "<Filters>");
  kaldi::QuantizedMatrix<signed char>::Write(*(int **)(a1 + 152), a2, a3, a4);
  kaldi::WriteToken(a2, a3, "<Bias>");
  uint64_t v8 = *(void *)(a1 + 160);
  kaldi::CuVectorBase<float>::Write(v8, a2, a3);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  int v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  return *(_DWORD *)(*(void *)(a1 + 160) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 152)) * v2;
}

const void **kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  int v5 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  int v6 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 152)) * v5;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v10, *(float **)(a1 + 152));
  uint64_t v7 = *(void *)(a1 + 160);
  int v8 = *(_DWORD *)(v7 + 16);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(uint64_t a1, char **a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  int v4 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  int v5 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 152)) * v4;
  int v6 = *(unsigned int **)(a1 + 152);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = *a2;
  LODWORD(v11) = v5;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v6, &v10);
  uint64_t v7 = *(_DWORD **)(a1 + 160);
  int v8 = v7[4];
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = &(*a2)[4 * v5];
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v7, (uint64_t)&v10);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 312);
  unint64_t v3 = *(void *)(a1 + 320) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1)
{
  double v2 = kaldi::QuantizedMatrixBase<signed char>::Sum(*(int **)(a1 + 152));
  float v3 = *(float *)&v2;
  double v4 = kaldi::CuVectorBase<float>::Sum(*(void *)(a1 + 160));
  return v3 + *(float *)&v4;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  uint64_t v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 152));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, v3, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_1B1E288D8()
{
  kaldi::CuVector<float>::CuVector(v3, *(void *)(v0 + 160));
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v3);
  kaldi::CuVectorBase<float>::AddVec(*(void *)(v0 + 160), (uint64_t)v3, v1, 1.0);
  kaldi::CuVector<float>::~CuVector(v3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v4);
}

void sub_1B1E28924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v25, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ParamsString(a1);
  if ((v24 & 0x80u) == 0) {
    uint64_t v4 = v23;
  }
  else {
    uint64_t v4 = (void **)v23[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v5 = v24;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v23[1];
  }
  int v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v26, "\n  filters");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<signed char>(*(kaldi::quasar::Vocab **)(a1 + 152));
  if ((v22 & 0x80u) == 0) {
    uint64_t v10 = v21;
  }
  else {
    uint64_t v10 = (void **)v21[0];
  }
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v11 = v22;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v21[1];
  }
  uint64_t v12 = std::string::append(&v27, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  BOOL v14 = std::string::append(&v28, "\n  bias");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 160));
  if ((v20 & 0x80u) == 0) {
    BOOL v16 = __p;
  }
  else {
    BOOL v16 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v17 = v20;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  BOOL v18 = std::string::append(&v29, (const std::string::value_type *)v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if ((char)v22 < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1B1E28B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 41) < 0) {
    operator delete(*(void **)(v45 - 64));
  }
  if (*(char *)(v45 - 73) < 0) {
    operator delete(*(void **)(v45 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ParamsString(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 168))(a1, v4, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" , # of sections: ", 18);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", section size after pooling: ", 30);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v4[1] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v6);
}

void sub_1B1E28D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v49, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ParamsString(a1);
  if ((v48 & 0x80u) == 0) {
    uint64_t v4 = v47;
  }
  else {
    uint64_t v4 = (void **)v47[0];
  }
  if ((v48 & 0x80u) == 0) {
    std::string::size_type v5 = v48;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v47[1];
  }
  uint64_t v6 = std::string::append(&v49, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v50, "\n  filters_grad");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 168));
  if ((v46 & 0x80u) == 0) {
    uint64_t v10 = v45;
  }
  else {
    uint64_t v10 = (void **)v45[0];
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v11 = v46;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v45[1];
  }
  uint64_t v12 = std::string::append(&v51, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  BOOL v14 = std::string::append(&v52, ", lr-coef ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v44 & 0x80u) == 0) {
    BOOL v16 = v43;
  }
  else {
    BOOL v16 = (void **)v43[0];
  }
  if ((v44 & 0x80u) == 0) {
    std::string::size_type v17 = v44;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v43[1];
  }
  BOOL v18 = std::string::append(&v53, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v20 = std::string::append(&v54, ", max-norm ");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v42 & 0x80u) == 0) {
    unsigned __int8 v22 = v41;
  }
  else {
    unsigned __int8 v22 = (void **)v41[0];
  }
  if ((v42 & 0x80u) == 0) {
    std::string::size_type v23 = v42;
  }
  else {
    std::string::size_type v23 = (std::string::size_type)v41[1];
  }
  unsigned __int8 v24 = std::string::append(&v55, (const std::string::value_type *)v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  std::string v26 = std::string::append(&v56, "\n  bias_grad");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 192));
  if ((v40 & 0x80u) == 0) {
    std::string v28 = v39;
  }
  else {
    std::string v28 = (void **)v39[0];
  }
  if ((v40 & 0x80u) == 0) {
    std::string::size_type v29 = v40;
  }
  else {
    std::string::size_type v29 = (std::string::size_type)v39[1];
  }
  BOOL v30 = std::string::append(&v57, (const std::string::value_type *)v28, v29);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  uint64_t v32 = std::string::append(&v58, ", lr-coef ");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0) {
    uint64_t v34 = __p;
  }
  else {
    uint64_t v34 = (void **)__p[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v35 = v38;
  }
  else {
    std::string::size_type v35 = (std::string::size_type)__p[1];
  }
  BOOL v36 = std::string::append(&v59, (const std::string::value_type *)v34, v35);
  *a2 = *v36;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if ((char)v38 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if ((char)v40 < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if ((char)v42 < 0) {
    operator delete(v41[0]);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if ((char)v44 < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if ((char)v46 < 0) {
    operator delete(v45[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if ((char)v48 < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
}

void sub_1B1E29174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v73 - 57) < 0) {
    operator delete(*(void **)(v73 - 80));
  }
  if (*(char *)(v73 - 89) < 0) {
    operator delete(*(void **)(v73 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v73 - 121) < 0) {
    operator delete(*(void **)(v73 - 144));
  }
  if (*(char *)(v73 - 153) < 0) {
    operator delete(*(void **)(v73 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v73 - 185) < 0) {
    operator delete(*(void **)(v73 - 208));
  }
  if (*(char *)(v73 - 217) < 0) {
    operator delete(*(void **)(v73 - 240));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(a1);
}

void sub_1B1E292D0()
{
}

void sub_1B1E292D8()
{
}

void sub_1B1E292E0()
{
}

void sub_1B1E292E8()
{
}

void sub_1B1E292F0()
{
}

void sub_1B1E292F8()
{
}

void sub_1B1E29300()
{
}

void sub_1B1E29308()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFncDirect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  if (*(int *)(a1 + 128) <= 0) {
    float v7 = 0.0;
  }
  else {
    float v7 = 1.0;
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 384) + 48 * a4), *(unsigned int *)(a2 + 20), (*(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 120)), 3, 0);
  if (*(int *)(a1 + 144) >= 1)
  {
    int v8 = 0;
    int v9 = a4;
    do
    {
      int v10 = *(_DWORD *)(a1 + 128);
      int v11 = *(_DWORD *)(a1 + 120);
      int v61 = v8;
      if (v10 >= 1)
      {
        int v12 = *(_DWORD *)(a1 + 108);
        int v13 = v12 * v8 * v11;
        uint64_t v14 = *(void *)(a3 + 8) + 4 * v13;
        int v15 = *(_DWORD *)(a3 + 28) - v13;
        uint64_t v16 = *(void *)(a3 + 32);
        *(void *)((char *)&v67[1] + 4) = *(void *)(a3 + 20);
        LODWORD(v67[1]) = v12;
        HIDWORD(v67[2]) = v15;
        v67[3] = v16;
        uint64_t v66 = &unk_1F0A472A0;
        v67[0] = v14;
        LODWORD(v14) = *(_DWORD *)(a1 + 104);
        int v17 = v14 * *(_DWORD *)(a1 + 140);
        int v18 = v14 * v10;
        uint64_t v19 = *(void *)(a2 + 8) + 4 * v17;
        int v20 = *(_DWORD *)(a2 + 28) - v17;
        uint64_t v21 = *(void *)(a2 + 32);
        v65[0] = v19;
        LODWORD(v65[1]) = v18;
        *(void *)((char *)&v65[1] + 4) = *(void *)(a2 + 20);
        HIDWORD(v65[2]) = v20;
        v65[3] = v21;
        uint64_t v64 = &unk_1F0A472A0;
        kaldi::QuantizedMatrixBase<signed char>::Range(*(void *)(a1 + 152), *(_DWORD *)(a1 + 124) * v14, v18, v12 * v8, v12, (uint64_t)v63);
        LODWORD(v22) = 1.0;
        kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v66, (uint64_t)&v64, 111, (kaldi::quasar::Vocab *)v63, 111, v22, 0.0);
        int v23 = *(_DWORD *)(a1 + 120);
        if (v23 >= 2)
        {
          for (int i = 1; i < v23; ++i)
          {
            unsigned int v25 = *(_DWORD *)(a1 + 108) * (i + v8 * v23);
            uint64_t v26 = *(void *)(a3 + 8) + 4 * v25;
            unsigned int v27 = *(_DWORD *)(a3 + 28) - v25;
            uint64_t v28 = *(void *)(a3 + 32);
            LODWORD(v62[2]) = *(_DWORD *)(a1 + 108);
            *(void *)((char *)&v62[2] + 4) = *(void *)(a3 + 20);
            HIDWORD(v62[3]) = v27;
            v62[4] = v28;
            v62[0] = &unk_1F0A472A0;
            v62[1] = v26;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v62, (uint64_t)&v66, 111);
            v62[0] = &unk_1F0A472A0;
            memset(&v62[1], 0, 32);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v62);
            int v23 = *(_DWORD *)(a1 + 120);
          }
        }
        kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)v63);
        uint64_t v64 = &unk_1F0A472A0;
        memset(v65, 0, sizeof(v65));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v64);
        uint64_t v66 = &unk_1F0A472A0;
        memset(v67, 0, sizeof(v67));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
        int v11 = *(_DWORD *)(a1 + 120);
      }
      if (v11 >= 1)
      {
        int v29 = 0;
        do
        {
          uint64_t v30 = *(void *)(a1 + 384) + 48 * v9;
          int v31 = *(_DWORD *)(a1 + 108);
          int v32 = *(_DWORD *)(v30 + 28) - v31 * v29;
          uint64_t v33 = *(void *)(v30 + 32);
          v67[0] = *(void *)(v30 + 8) + 4 * v31 * v29;
          LODWORD(v67[1]) = v31;
          *(void *)((char *)&v67[1] + 4) = *(void *)(v30 + 20);
          HIDWORD(v67[2]) = v32;
          v67[3] = v33;
          uint64_t v66 = &unk_1F0A472A0;
          uint64_t v34 = *(void *)(a1 + 160);
          v63[2] = 0;
          uint64_t v35 = *(void *)(v34 + 8) + 4 * v31 * v8;
          v63[0] = &unk_1F0A472D0;
          v63[1] = v35;
          LODWORD(v63[2]) = v31;
          v63[3] = *(void *)(v34 + 24);
          kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v66, (uint64_t)v63, 1.0, v7);
          int v36 = *(_DWORD *)(a1 + 104);
          int v37 = (*(_DWORD *)(a1 + 116) * v8 + *(_DWORD *)(a1 + 112) * v29) * v36;
          int v38 = *(_DWORD *)(a1 + 124) * v36;
          uint64_t v39 = *(void *)(a2 + 8) + 4 * v37;
          int v40 = *(_DWORD *)(a2 + 28) - v37;
          uint64_t v41 = *(void *)(a2 + 32);
          LODWORD(v65[1]) = v38;
          *(void *)((char *)&v65[1] + 4) = *(void *)(a2 + 20);
          HIDWORD(v65[2]) = v40;
          v65[3] = v41;
          uint64_t v64 = &unk_1F0A472A0;
          v65[0] = v39;
          kaldi::QuantizedMatrixBase<signed char>::Range(*(void *)(a1 + 152), 0, v38, *(_DWORD *)(a1 + 108) * v8, *(_DWORD *)(a1 + 108), (uint64_t)v63);
          LODWORD(v42) = 1.0;
          kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v66, (uint64_t)&v64, 111, (kaldi::quasar::Vocab *)v63, 111, v42, 1.0);
          kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)v63);
          uint64_t v64 = &unk_1F0A472A0;
          memset(v65, 0, sizeof(v65));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v64);
          uint64_t v66 = &unk_1F0A472A0;
          memset(v67, 0, sizeof(v67));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
          ++v29;
          int v8 = v61;
        }
        while (v29 < *(_DWORD *)(a1 + 120));
      }
      int v43 = *(_DWORD *)(a1 + 148);
      if (v43 >= 1)
      {
        for (int j = 0; j < v43; ++j)
        {
          int v45 = *(_DWORD *)(a1 + 108);
          unsigned int v46 = v45 * (j + v43 * v8);
          uint64_t v47 = *(void *)(a3 + 8) + 4 * v46;
          unsigned int v48 = *(_DWORD *)(a3 + 28) - v46;
          uint64_t v49 = *(void *)(a3 + 32);
          LODWORD(v63[2]) = v45;
          *(void *)((char *)&v63[2] + 4) = *(void *)(a3 + 20);
          HIDWORD(v63[3]) = v48;
          v63[4] = v49;
          v63[0] = &unk_1F0A472A0;
          v63[1] = v47;
          uint64_t v50 = *(void *)(a1 + 384) + 48 * v9;
          LODWORD(v47) = v45 * j * *(_DWORD *)(a1 + 136);
          uint64_t v51 = *(void *)(v50 + 8) + 4 * (int)v47;
          LODWORD(v47) = *(_DWORD *)(v50 + 28) - v47;
          uint64_t v52 = *(void *)(v50 + 32);
          v67[0] = v51;
          LODWORD(v67[1]) = v45;
          *(void *)((char *)&v67[1] + 4) = *(void *)(v50 + 20);
          HIDWORD(v67[2]) = v47;
          v67[3] = v52;
          uint64_t v66 = &unk_1F0A472A0;
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v63, (uint64_t)&v66, 111);
          uint64_t v66 = &unk_1F0A472A0;
          memset(v67, 0, sizeof(v67));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
          if (*(int *)(a1 + 132) >= 2)
          {
            int v53 = 1;
            do
            {
              uint64_t v54 = *(void *)(a1 + 384) + 48 * v9;
              int v55 = *(_DWORD *)(a1 + 108);
              int v56 = (v53 + j * *(_DWORD *)(a1 + 136)) * v55;
              uint64_t v57 = *(void *)(v54 + 8) + 4 * v56;
              int v58 = *(_DWORD *)(v54 + 28) - v56;
              uint64_t v59 = *(void *)(v54 + 32);
              v67[0] = v57;
              LODWORD(v67[1]) = v55;
              *(void *)((char *)&v67[1] + 4) = *(void *)(v54 + 20);
              HIDWORD(v67[2]) = v58;
              v67[3] = v59;
              uint64_t v66 = &unk_1F0A472A0;
              kaldi::CuMatrixBase<float>::Max((uint64_t)v63, (uint64_t)&v66);
              uint64_t v66 = &unk_1F0A472A0;
              memset(v67, 0, sizeof(v67));
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
              ++v53;
            }
            while (v53 < *(_DWORD *)(a1 + 132));
          }
          v63[0] = &unk_1F0A472A0;
          memset(&v63[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v63);
          int v43 = *(_DWORD *)(a1 + 148);
          int v8 = v61;
        }
      }
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1B1E2995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _OWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a26);
  *(void *)(v28 - 144) = v26;
  *unsigned int v27 = 0u;
  v27[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v28 - 144));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Backpropagation of CNN ConvolutionalMaxPoolingComponent is not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix(v16, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v15, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, void))(*(void *)v8 + 112))(v8, a2, v16, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, uint64_t, int32x2_t *, void))(*(void *)v8 + 128))(v8, a2, v16, a3, v15, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  LODWORD(a2) = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 152));
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  LODWORD(a3) = a2 * a3;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v12 = (char *)*a4;
  LODWORD(v13) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v12, **(void **)(v8 + 168));
  int v10 = *(_DWORD *)(*(void *)(a1 + 160) + 16);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v12 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v13) = v10;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(const void ****)(v8 + 192), (uint64_t)&v12);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v16);
}

void sub_1B1E29D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 276) = a3;
  *(_DWORD *)(result + 272) = a2;
  *(unsigned char *)(result + 480) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  float v4 = a3;
  int v6 = *(_DWORD *)(a1 + 272);
  if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(void *)(*(void *)(a1 + 168) + 8 * a2), *(void *)(a1 + 216) + 48 * a2, a3);
      uint64_t v9 = *(void *)(*(void *)(a1 + 192) + 8 * a2);
      uint64_t v10 = *(void *)(a1 + 240) + 32 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, v10, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a3 > 0.0)
    {
      uint64_t v11 = a2;
      if (*(unsigned char *)(a1 + 84)) {
        float v4 = (float)*(int *)(*(void *)(a1 + 288) + 4 * a2) * a3;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(void *)(*(void *)(a1 + 168) + 8 * a2), (int *)(*(void *)(a1 + 216) + 48 * a2), v4);
      uint64_t v13 = *(void *)(*(void *)(a1 + 192) + 8 * v11);
      uint64_t v14 = (void *)(*(void *)(a1 + 240) + 32 * v11);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v13, v14, v4);
    }
  }
  else if (v6 == 1 && a3 > 0.0)
  {
    uint64_t v7 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v4 = (float)*(int *)(*(void *)(a1 + 288) + 4 * a2) * a3;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(void *)(*(void *)(a1 + 168) + 8 * a2), v4);
    uint64_t v12 = *(void *)(*(void *)(a1 + 192) + 8 * v7);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v12, v4);
  }
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  int v6 = *(_DWORD *)(*(void *)(a1 + 160) + 16);
  int v7 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  uint64_t result = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 152));
  *a3 = v6 + result * v7;
  uint64_t v9 = *(void *)(a1 + 168);
  uint64_t v10 = *(void *)(a1 + 176) - v9;
  if (v10 && (uint64_t v11 = *(void *)(a1 + 200) - *(void *)(a1 + 192)) != 0)
  {
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v11 >> 3;
    int v14 = *(_DWORD *)(a1 + 80);
    if (v14 == 1) {
      int v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = v13 - 1;
    if (v12 - 1 != v14 || v16 != v14)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      int v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"  ", 2);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    int v18 = kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v9 + 8 * v14));
    uint64_t result = kaldi::CuVectorBase<float>::CountZeros(*(void *)(*(void *)(a1 + 192) + 8 * v15));
    int v19 = result + v18;
  }
  else
  {
    int v19 = 0;
  }
  *a2 = v19;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (!*(unsigned char *)(a1 + 480))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 408), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 360), v3);
    std::vector<BOOL>::resize(a1 + 456, v3, 0);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 168), v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 192), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 216), v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 240), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 288), v3);
    *(unsigned char *)(a1 + 480) = 1;
  }
}

void sub_1B1E2A2F0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void sub_1B1E2A3B4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void sub_1B1E2A428(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

double kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4EC80;
  *(void *)(a1 + 88) = &unk_1F0A4EDB8;
  *(void *)(a1 + 96) = &unk_1F0A4EDE0;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 264) = _D1;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4EC80;
  *(void *)(a1 + 88) = &unk_1F0A4EDB8;
  *(void *)(a1 + 96) = &unk_1F0A4EDE0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 168) + 8 * v8);
      if (v9) {
        kaldi::NewCuSubOrMat<float>(v9, *(unsigned __int8 *)(a1 + 16));
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v12)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_1B1E2AA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  int v19 = (void *)*((void *)v16 + 57);
  if (v19) {
    operator delete(v19);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  int v20 = *a12;
  if (*a12)
  {
    *((void *)v16 + 40) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v18, 0);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(void *a1, uint64_t *a2)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs((uint64_t)a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(a1[21] + 8 * ((((a1[22] - a1[21]) << 29) - 0x100000000) >> 32)));
  uint64_t v4 = *(void *)(a1[24] + 8 * ((((a1[25] - a1[24]) << 29) - 0x100000000) >> 32));
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v4);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A4EC80;
  int v2 = (quasar::Bitmap *)(a1 + 88);
  *(void *)(a1 + 88) = &unk_1F0A4EDB8;
  int v3 = (quasar::Bitmap *)(a1 + 96);
  *(void *)(a1 + 96) = &unk_1F0A4EDE0;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 488));
  uint64_t v4 = *(void **)(a1 + 456);
  if (v4) {
    operator delete(v4);
  }
  unint64_t v8 = (void **)(a1 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  long long v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(void *)(a1 + 320) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 296) = v6;
    operator delete(v6);
  }
  unint64_t v8 = (void **)(a1 + 240);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 216);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 192);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)(a1 + 168);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v7 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), 0);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::Copy()
{
}

void sub_1B1E2AEF8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v82 = 0x40000000;
  int v83 = -1073741824;
  int v81 = 1036831949;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  uint64_t v6 = (int *)(a1 + 116);
  *(void *)(a1 + 132) = 0x100000001;
  uint64_t v7 = (int *)(a1 + 132);
  int v80 = -1;
  memset(v79, 0, sizeof(v79));
  unint64_t v8 = a2 + 4;
  uint64_t v9 = (int *)(a1 + 280);
  long long v70 = (int *)(a1 + 128);
  long long v71 = (int *)(a1 + 264);
  uint64_t v10 = (int *)(a1 + 124);
  unint64_t v68 = (int *)(a1 + 136);
  unint64_t v69 = (int *)(a1 + 120);
  uint64_t v72 = (int *)(a1 + 112);
  uint64_t v73 = (int *)(a1 + 268);
  uint64_t v74 = (int *)(a1 + 108);
  uint64_t v11 = (int *)(a1 + 104);
  while (1)
  {
    if ((*((unsigned char *)v8 + *(void *)(*a2 - 24)) & 2) != 0)
    {
      int v48 = *(_DWORD *)(a1 + 8);
      int v49 = *(_DWORD *)(a1 + 12);
      int v51 = *(_DWORD *)(a1 + 104);
      int v50 = *(_DWORD *)(a1 + 108);
      int v52 = *(_DWORD *)(a1 + 132);
      int v53 = v48 / v51 - *(_DWORD *)(a1 + 128);
      int v54 = *(_DWORD *)(a1 + 120);
      int v55 = *(_DWORD *)(a1 + 136);
      int v56 = (v54 - v52) / v55 + 1;
      *(_DWORD *)(a1 + 148) = v56;
      int v57 = v50 * v56;
      int v58 = v49 / v57;
      *(_DWORD *)(a1 + 140) = v53;
      *(_DWORD *)(a1 + 144) = v49 / v57;
      if (v52 >= 1 && v54 >= v52)
      {
        if (v55 > 0)
        {
          if (v49 == v57 * v58)
          {
            if (v48 == v48 / v51 * v51)
            {
              if (*v10 + *v72 * (v54 - 1) + *v6 * (v58 - 1) <= v53)
              {
                if (v80 >= 1) {
                  kaldi::UniformRandomNumber::SetRandomSeeds(a3, v80);
                }
                kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v77, a3);
                kaldi::Matrix<float>::Matrix((uint64_t)v75, ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)), (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)), 0, 0);
                for (int i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v75); ++i)
                {
                  for (uint64_t j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v75); ++j)
                  {
                    float v61 = *(float *)&v81;
                    kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v77, 0);
                    *(float *)(v75[0] + 4 * i * v76 + 4 * j) = v61 * v62;
                  }
                }
                if (!*(void *)(a1 + 152)) {
                  operator new();
                }
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"pointer is thought to be un-initialized here", 44);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
              }
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: too few input bands to compute the output", 75);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
            }
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: input dim mismatch", 52);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
          }
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: output dim mismatch", 53);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: Max pooling step must be >= 1", 63);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ConvolutionalMaxPoolingComponent: Invalid max pooling size", 58);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v79);
    if ((SHIBYTE(v79[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v79[2]))
      {
        case 9:
          goto LABEL_78;
        case 0xA:
          if (v79[0] == 0x61654D736169423CLL && LOWORD(v79[1]) == 15982) {
            goto LABEL_165;
          }
          BOOL v13 = v79[0] == 0x7A69536C6F6F503CLL && LOWORD(v79[1]) == 15973;
          int v14 = v7;
          if (v13) {
            goto LABEL_162;
          }
          BOOL v15 = v79[0] == 0x6574536C6F6F503CLL && LOWORD(v79[1]) == 15984;
          int v14 = v68;
          if (v15) {
            goto LABEL_162;
          }
          if ((v79[2] & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
LABEL_77:
          if (HIBYTE(v79[2]) != 9) {
            goto LABEL_184;
          }
LABEL_78:
          BOOL v31 = v79[0] == 0x6D726F4E78614D3CLL && LOBYTE(v79[1]) == 62;
          uint64_t v26 = v9;
          if (v31) {
            goto LABEL_166;
          }
          if ((v79[2] & 0x8000000000000000) != 0) {
            goto LABEL_83;
          }
          goto LABEL_184;
        case 0xB:
          if (v79[0] == 0x6E6152736169423CLL && *(void *)((char *)v79 + 3) == 0x3E65676E61527361) {
            goto LABEL_164;
          }
          BOOL v28 = v79[0] == 0x745368637461503CLL && *(void *)((char *)v79 + 3) == 0x3E70657453686374;
          goto LABEL_110;
        case 0xC:
          BOOL v32 = v79[0] == 0x537265746C69463CLL && LODWORD(v79[1]) == 1046837865;
          int v14 = v10;
          if (!v32) {
            goto LABEL_88;
          }
          goto LABEL_162;
        case 0xD:
          if (v79[0] == 0x74536D617261503CLL && *(void *)((char *)v79 + 5) == 0x3E7665646474536DLL) {
            goto LABEL_163;
          }
          BOOL v21 = v79[0] == 0x6E6F69746365533CLL && *(void *)((char *)v79 + 5) == 0x3E706574536E6F69;
          int v14 = v6;
          if (v21) {
            goto LABEL_162;
          }
          BOOL v22 = v79[0] == 0x6E6F69746365533CLL && *(void *)((char *)v79 + 5) == 0x3E657A69536E6F69;
          goto LABEL_123;
        case 0xF:
          BOOL v23 = v79[0] == 0x75746165466E493CLL && *(void *)((char *)v79 + 7) == 0x3E7370614D657275;
          int v14 = v11;
          if (v23) {
            goto LABEL_162;
          }
          BOOL v24 = v79[0] == 0x65726168536E493CLL && *(void *)((char *)v79 + 7) == 0x3E73646E61426465;
          int v14 = v70;
          if (v24) {
            goto LABEL_162;
          }
          BOOL v25 = v79[0] == 0x61526E7261654C3CLL && *(void *)((char *)v79 + 7) == 0x3E66656F43657461;
          uint64_t v26 = v71;
          if (v25) {
            goto LABEL_166;
          }
          if (HIBYTE(v79[2]) == 9) {
            goto LABEL_78;
          }
          if (HIBYTE(v79[2]) != 12) {
            goto LABEL_184;
          }
LABEL_88:
          uint64_t v33 = v79;
          goto LABEL_156;
        case 0x10:
          BOOL v34 = v79[0] == 0x7461654674754F3CLL && v79[1] == 0x3E7370614D657275;
          goto LABEL_101;
        case 0x13:
          BOOL v30 = v79[0] == 0x61654C736169423CLL
             && v79[1] == 0x6F43657461526E72
             && *(void *)((char *)&v79[1] + 3) == 0x3E66656F43657461;
          uint64_t v26 = v73;
          if (v30) {
            goto LABEL_166;
          }
          if (HIBYTE(v79[2]) != 12) {
            goto LABEL_77;
          }
          goto LABEL_88;
        default:
          goto LABEL_184;
      }
    }
    uint64_t v16 = v79[1];
    switch(v79[1])
    {
      case 0xALL:
        if (*(void *)v79[0] == 0x61654D736169423CLL && *(_WORD *)(v79[0] + 8) == 15982)
        {
LABEL_165:
          uint64_t v26 = &v83;
        }
        else
        {
          BOOL v18 = *(void *)v79[0] == 0x7A69536C6F6F503CLL && *(_WORD *)(v79[0] + 8) == 15973;
          int v14 = v7;
          if (v18) {
            goto LABEL_162;
          }
          if (v79[1] == 10)
          {
            BOOL v19 = *(void *)v79[0] == 0x6574536C6F6F503CLL && *(_WORD *)(v79[0] + 8) == 15984;
            int v14 = v68;
            if (v19) {
              goto LABEL_162;
            }
LABEL_33:
            uint64_t v16 = v79[1];
          }
LABEL_34:
          if (v16 == 15)
          {
LABEL_133:
            BOOL v41 = *(void *)v79[0] == 0x61526E7261654C3CLL && *(void *)(v79[0] + 7) == 0x3E66656F43657461;
            uint64_t v26 = v71;
            if (v41) {
              goto LABEL_166;
            }
            uint64_t v16 = v79[1];
          }
          if (v16 == 19)
          {
            BOOL v43 = *(void *)v79[0] == 0x61654C736169423CLL
               && *(void *)(v79[0] + 8) == 0x6F43657461526E72
               && *(void *)(v79[0] + 11) == 0x3E66656F43657461;
            uint64_t v26 = v73;
            if (v43) {
              goto LABEL_166;
            }
            uint64_t v16 = v79[1];
          }
          if (v16 != 9) {
            goto LABEL_154;
          }
          BOOL v44 = *(void *)v79[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v79[0] + 8) == 62;
          uint64_t v26 = v9;
          if (!v44)
          {
LABEL_83:
            uint64_t v16 = v79[1];
LABEL_154:
            if (v16 != 12) {
              goto LABEL_184;
            }
LABEL_155:
            uint64_t v33 = (void *)v79[0];
LABEL_156:
            uint64_t v45 = *v33;
            int v46 = *((_DWORD *)v33 + 2);
            if (v45 != 0x536D6F646E61523CLL || v46 != 1046766949)
            {
LABEL_184:
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v78);
              int v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Unknown token ", 14);
              if (v79[2] >= 0) {
                uint64_t v64 = v79;
              }
              else {
                uint64_t v64 = (void *)v79[0];
              }
              if (v79[2] >= 0) {
                uint64_t v65 = HIBYTE(v79[2]);
              }
              else {
                uint64_t v65 = v79[1];
              }
              uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
              int v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)", a typo in config?", 19);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" (ParamStddev|BiasMean|BiasRange|InFeatureMaps|OutFeatureMaps|PatchStep|SectionStep|SectionSize|FilterSize|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed)", 158);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
            }
            int v14 = &v80;
LABEL_162:
            kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v14);
            goto LABEL_167;
          }
        }
LABEL_166:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v26);
LABEL_167:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0xBLL:
        if (*(void *)v79[0] != 0x6E6152736169423CLL || *(void *)(v79[0] + 3) != 0x3E65676E61527361)
        {
          BOOL v28 = *(void *)v79[0] == 0x745368637461503CLL && *(void *)(v79[0] + 3) == 0x3E70657453686374;
LABEL_110:
          int v14 = v72;
          if (!v28) {
            goto LABEL_184;
          }
          goto LABEL_162;
        }
LABEL_164:
        uint64_t v26 = &v82;
        goto LABEL_166;
      case 0xCLL:
        BOOL v35 = *(void *)v79[0] == 0x537265746C69463CLL && *(_DWORD *)(v79[0] + 8) == 1046837865;
        int v14 = v10;
        if (!v35) {
          goto LABEL_155;
        }
        goto LABEL_162;
      case 0xDLL:
        if (*(void *)v79[0] != 0x74536D617261503CLL || *(void *)(v79[0] + 5) != 0x3E7665646474536DLL)
        {
          BOOL v38 = *(void *)v79[0] == 0x6E6F69746365533CLL && *(void *)(v79[0] + 5) == 0x3E706574536E6F69;
          int v14 = v6;
          if (!v38)
          {
            BOOL v22 = *(void *)v79[0] == 0x6E6F69746365533CLL && *(void *)(v79[0] + 5) == 0x3E657A69536E6F69;
LABEL_123:
            int v14 = v69;
            if (!v22) {
              goto LABEL_184;
            }
          }
          goto LABEL_162;
        }
LABEL_163:
        uint64_t v26 = &v81;
        goto LABEL_166;
      case 0xFLL:
        BOOL v39 = *(void *)v79[0] == 0x75746165466E493CLL && *(void *)(v79[0] + 7) == 0x3E7370614D657275;
        int v14 = v11;
        if (!v39)
        {
          BOOL v40 = *(void *)v79[0] == 0x65726168536E493CLL && *(void *)(v79[0] + 7) == 0x3E73646E61426465;
          int v14 = v70;
          if (!v40) {
            goto LABEL_133;
          }
        }
        goto LABEL_162;
      case 0x10:
        BOOL v34 = *(void *)v79[0] == 0x7461654674754F3CLL && *(void *)(v79[0] + 8) == 0x3E7370614D657275;
LABEL_101:
        int v14 = v74;
        if (!v34) {
          goto LABEL_184;
        }
        goto LABEL_162;
      default:
        goto LABEL_34;
    }
  }
}

void sub_1B1E2BCC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (*(char *)(v24 - 121) < 0) {
    operator delete(*(void **)(v24 - 144));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  uint64_t v6 = a1 + 116;
  *(void *)(a1 + 132) = 0x100000001;
  uint64_t v7 = a1 + 132;
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_142:
    int v39 = *(_DWORD *)(a1 + 12);
    int v40 = *(_DWORD *)(a1 + 108);
    int v41 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 128);
    int v42 = (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 132)) / *(_DWORD *)(a1 + 136) + 1;
    *(_DWORD *)(a1 + 148) = v42;
    *(unsigned char *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 140) = v41;
    *(_DWORD *)(a1 + 144) = v39 / (v40 * v42);
    LOBYTE(v48) = 0;
    kaldi::ReadBasicType<char>(a2, a3, &v48);
    if (!*(void *)(a1 + 152))
    {
      kaldi::ExpectToken(a2, a3, "<Filters>");
      operator new();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v48);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      unint64_t v8 = (uint64_t *)&v48;
      switch(HIBYTE(v49))
      {
        case 0xA:
          goto LABEL_87;
        case 0xB:
LABEL_4:
          BOOL v9 = (void)v48 == 0x745368637461503CLL && *(void *)((char *)&v48 + 3) == 0x3E70657453686374;
          uint64_t v10 = a1 + 112;
          if (!v9) {
            goto LABEL_86;
          }
          goto LABEL_136;
        case 0xC:
          goto LABEL_81;
        case 0xD:
LABEL_68:
          BOOL v23 = (void)v48 == 0x6E6F69746365533CLL && *(void *)((char *)&v48 + 5) == 0x3E706574536E6F69;
          uint64_t v10 = v6;
          if (v23) {
            goto LABEL_136;
          }
          if (HIBYTE(v49) == 10) {
            goto LABEL_87;
          }
          if (HIBYTE(v49) == 12) {
            goto LABEL_81;
          }
          if (HIBYTE(v49) != 13) {
            goto LABEL_132;
          }
          BOOL v24 = (void)v48 == 0x6E6F69746365533CLL && *(void *)((char *)&v48 + 5) == 0x3E657A69536E6F69;
          uint64_t v10 = a1 + 120;
          if (!v24) {
            goto LABEL_132;
          }
          goto LABEL_136;
        case 0xF:
          BOOL v18 = (void)v48 == 0x75746165466E493CLL && *(void *)((char *)&v48 + 7) == 0x3E7370614D657275;
          uint64_t v10 = a1 + 104;
          if (v18) {
            goto LABEL_136;
          }
LABEL_52:
          BOOL v19 = (void)v48 == 0x65726168536E493CLL && *(void *)((char *)&v48 + 7) == 0x3E73646E61426465;
          uint64_t v10 = a1 + 128;
          if (v19) {
            goto LABEL_136;
          }
          if (HIBYTE(v49) != 15) {
            goto LABEL_86;
          }
          BOOL v20 = (void)v48 == 0x61526E7261654C3CLL && *(void *)((char *)&v48 + 7) == 0x3E66656F43657461;
          BOOL v21 = (float *)(a1 + 264);
          if (!v20) {
            goto LABEL_132;
          }
          goto LABEL_138;
        case 0x10:
          BOOL v22 = (void)v48 == 0x7461654674754F3CLL && *((void *)&v48 + 1) == 0x3E7370614D657275;
          uint64_t v10 = a1 + 108;
          if (!v22)
          {
            switch(HIBYTE(v49))
            {
              case 0xA:
                goto LABEL_87;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_81;
              case 0xD:
                goto LABEL_68;
              case 0xF:
                goto LABEL_52;
              default:
                goto LABEL_132;
            }
          }
          goto LABEL_136;
        case 0x13:
          goto LABEL_125;
        default:
          goto LABEL_132;
      }
    }
    uint64_t v11 = *((void *)&v48 + 1);
    if (*((void *)&v48 + 1) == 15)
    {
      BOOL v12 = *(void *)v48 == 0x75746165466E493CLL && *(void *)(v48 + 7) == 0x3E7370614D657275;
      uint64_t v10 = a1 + 104;
      if (v12) {
        goto LABEL_136;
      }
    }
    if (*((void *)&v48 + 1) == 16)
    {
      BOOL v13 = *(void *)v48 == 0x7461654674754F3CLL && *(void *)(v48 + 8) == 0x3E7370614D657275;
      uint64_t v10 = a1 + 108;
      if (v13) {
        goto LABEL_136;
      }
      uint64_t v11 = *((void *)&v48 + 1);
    }
    if (v11 == 11)
    {
      BOOL v14 = *(void *)v48 == 0x745368637461503CLL && *(void *)(v48 + 3) == 0x3E70657453686374;
      uint64_t v10 = a1 + 112;
      if (v14) {
        goto LABEL_136;
      }
      uint64_t v11 = *((void *)&v48 + 1);
    }
    if (v11 != 13) {
      goto LABEL_41;
    }
    BOOL v15 = *(void *)v48 == 0x6E6F69746365533CLL && *(void *)(v48 + 5) == 0x3E706574536E6F69;
    uint64_t v10 = v6;
    if (v15) {
      goto LABEL_136;
    }
    uint64_t v11 = *((void *)&v48 + 1);
    if (*((void *)&v48 + 1) != 13) {
      goto LABEL_41;
    }
    BOOL v16 = *(void *)v48 == 0x6E6F69746365533CLL && *(void *)(v48 + 5) == 0x3E657A69536E6F69;
    uint64_t v10 = a1 + 120;
    if (v16) {
      goto LABEL_136;
    }
    if ((v49 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v49) == 10) {
        goto LABEL_87;
      }
      if (HIBYTE(v49) != 12) {
        goto LABEL_132;
      }
LABEL_81:
      BOOL v25 = (void)v48 == 0x537265746C69463CLL && DWORD2(v48) == 1046837865;
      uint64_t v10 = a1 + 124;
      if (v25) {
        goto LABEL_136;
      }
      if ((v49 & 0x8000000000000000) == 0)
      {
LABEL_86:
        if (HIBYTE(v49) != 10) {
          goto LABEL_132;
        }
LABEL_87:
        BOOL v26 = (void)v48 == 0x7A69536C6F6F503CLL && WORD4(v48) == 15973;
        uint64_t v10 = v7;
        if (v26) {
          goto LABEL_136;
        }
        if ((v49 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v49) != 10) {
            goto LABEL_132;
          }
          BOOL v27 = (void)v48 == 0x6574536C6F6F503CLL && WORD4(v48) == 15984;
          uint64_t v10 = v6 + 20;
          if (!v27) {
            goto LABEL_132;
          }
          goto LABEL_136;
        }
LABEL_111:
        uint64_t v11 = *((void *)&v48 + 1);
        if (*((void *)&v48 + 1) != 10) {
          goto LABEL_117;
        }
        BOOL v30 = *(void *)v48 == 0x6574536C6F6F503CLL && *(_WORD *)(v48 + 8) == 15984;
        uint64_t v10 = v6 + 20;
        if (!v30)
        {
          if (v49 < 0)
          {
LABEL_117:
            if (v11 == 15)
            {
              BOOL v31 = *(void *)v48 == 0x61526E7261654C3CLL && *(void *)(v48 + 7) == 0x3E66656F43657461;
              BOOL v21 = (float *)(a1 + 264);
              if (!v31)
              {
                uint64_t v11 = *((void *)&v48 + 1);
                goto LABEL_123;
              }
LABEL_138:
              kaldi::ReadBasicType<float>(a2, a3, v21);
              goto LABEL_139;
            }
LABEL_123:
            if (v11 == 19)
            {
              unint64_t v8 = (uint64_t *)v48;
LABEL_125:
              uint64_t v32 = *v8;
              uint64_t v33 = v8[1];
              uint64_t v34 = *(uint64_t *)((char *)v8 + 11);
              BOOL v35 = v32 == 0x61654C736169423CLL && v33 == 0x6F43657461526E72;
              BOOL v36 = v35 && v34 == 0x3E66656F43657461;
              BOOL v21 = (float *)(a1 + 268);
              if (v36) {
                goto LABEL_138;
              }
            }
          }
LABEL_132:
          BOOL v37 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v48, "<MaxNorm>");
          BOOL v21 = (float *)(a1 + 280);
          if (!v37)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v48, "<GradientNormType>"))
            {
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v47 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)__p);
              *(_DWORD *)(a1 + 272) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
              if (SHIBYTE(v47) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_139;
            }
            BOOL v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v48, "<MaxGrad>");
            BOOL v21 = (float *)(a1 + 276);
            if (!v38)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              BOOL v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
              if (v49 >= 0) {
                BOOL v44 = &v48;
              }
              else {
                BOOL v44 = (long long *)v48;
              }
              if (v49 >= 0) {
                uint64_t v45 = HIBYTE(v49);
              }
              else {
                uint64_t v45 = *((void *)&v48 + 1);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
          }
          goto LABEL_138;
        }
        goto LABEL_136;
      }
    }
    else
    {
LABEL_41:
      if (v11 != 12) {
        goto LABEL_100;
      }
      BOOL v17 = *(void *)v48 == 0x537265746C69463CLL && *(_DWORD *)(v48 + 8) == 1046837865;
      uint64_t v10 = a1 + 124;
      if (v17) {
        goto LABEL_136;
      }
    }
    uint64_t v11 = *((void *)&v48 + 1);
LABEL_100:
    if (v11 == 15)
    {
      BOOL v28 = *(void *)v48 == 0x65726168536E493CLL && *(void *)(v48 + 7) == 0x3E73646E61426465;
      uint64_t v10 = a1 + 128;
      if (v28) {
        goto LABEL_136;
      }
      uint64_t v11 = *((void *)&v48 + 1);
    }
    if (v11 != 10) {
      goto LABEL_117;
    }
    BOOL v29 = *(void *)v48 == 0x7A69536C6F6F503CLL && *(_WORD *)(v48 + 8) == 15973;
    uint64_t v10 = v7;
    if (!v29) {
      goto LABEL_111;
    }
LABEL_136:
    kaldi::ReadBasicType<int>(a2, a3, v10);
LABEL_139:
    if (SHIBYTE(v49) < 0) {
      operator delete((void *)v48);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_142;
    }
  }
}

void sub_1B1E2C6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 89) < 0) {
    operator delete(*(void **)(v22 - 112));
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<InFeatureMaps>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<OutFeatureMaps>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PatchStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<SectionStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<SectionSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FilterSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<InSharedBands>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 272), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1B1E2C9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  kaldi::WriteBasicType<char>(a2, a3);
  kaldi::WriteToken(a2, a3, "<Filters>");
  kaldi::QuantizedMatrix<short>::Write(*(int **)(a1 + 152), a2, a3, a4);
  kaldi::WriteToken(a2, a3, "<Bias>");
  uint64_t v8 = *(void *)(a1 + 160);
  kaldi::CuVectorBase<float>::Write(v8, a2, a3);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  int v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  return *(_DWORD *)(*(void *)(a1 + 160) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 152)) * v2;
}

const void **kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  int v5 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  int v6 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 152)) * v5;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v10, *(float **)(a1 + 152));
  uint64_t v7 = *(void *)(a1 + 160);
  int v8 = *(_DWORD *)(v7 + 16);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::SetParams(uint64_t a1, char **a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  int v4 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  int v5 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 152)) * v4;
  int v6 = *(unsigned int **)(a1 + 152);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = *a2;
  LODWORD(v11) = v5;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v6, &v10);
  uint64_t v7 = *(_DWORD **)(a1 + 160);
  int v8 = v7[4];
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = &(*a2)[4 * v5];
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v7, (uint64_t)&v10);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 312);
  unint64_t v3 = *(void *)(a1 + 320) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1)
{
  double v2 = kaldi::QuantizedMatrixBase<short>::Sum(*(int **)(a1 + 152));
  float v3 = *(float *)&v2;
  double v4 = kaldi::CuVectorBase<float>::Sum(*(void *)(a1 + 160));
  return v3 + *(float *)&v4;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  uint64_t v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 152));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, v3, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_1B1E2CD54()
{
  kaldi::CuVector<float>::CuVector(v3, *(void *)(v0 + 160));
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v3);
  kaldi::CuVectorBase<float>::AddVec(*(void *)(v0 + 160), (uint64_t)v3, v1, 1.0);
  kaldi::CuVector<float>::~CuVector(v3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v4);
}

void sub_1B1E2CDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v25, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ParamsString(a1);
  if ((v24 & 0x80u) == 0) {
    uint64_t v4 = v23;
  }
  else {
    uint64_t v4 = (void **)v23[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v5 = v24;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v23[1];
  }
  int v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v26, "\n  filters");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<short>(*(kaldi::quasar::Vocab **)(a1 + 152));
  if ((v22 & 0x80u) == 0) {
    uint64_t v10 = v21;
  }
  else {
    uint64_t v10 = (void **)v21[0];
  }
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v11 = v22;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v21[1];
  }
  uint64_t v12 = std::string::append(&v27, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  BOOL v14 = std::string::append(&v28, "\n  bias");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 160));
  if ((v20 & 0x80u) == 0) {
    BOOL v16 = __p;
  }
  else {
    BOOL v16 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v17 = v20;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  BOOL v18 = std::string::append(&v29, (const std::string::value_type *)v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if ((char)v22 < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1B1E2CFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 41) < 0) {
    operator delete(*(void **)(v45 - 64));
  }
  if (*(char *)(v45 - 73) < 0) {
    operator delete(*(void **)(v45 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ParamsString(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 168))(a1, v4, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" , # of sections: ", 18);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", section size after pooling: ", 30);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v4[1] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v6);
}

void sub_1B1E2D204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v49, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ParamsString(a1);
  if ((v48 & 0x80u) == 0) {
    uint64_t v4 = v47;
  }
  else {
    uint64_t v4 = (void **)v47[0];
  }
  if ((v48 & 0x80u) == 0) {
    std::string::size_type v5 = v48;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v47[1];
  }
  uint64_t v6 = std::string::append(&v49, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v50, "\n  filters_grad");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 168));
  if ((v46 & 0x80u) == 0) {
    uint64_t v10 = v45;
  }
  else {
    uint64_t v10 = (void **)v45[0];
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v11 = v46;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v45[1];
  }
  uint64_t v12 = std::string::append(&v51, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  BOOL v14 = std::string::append(&v52, ", lr-coef ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v44 & 0x80u) == 0) {
    BOOL v16 = v43;
  }
  else {
    BOOL v16 = (void **)v43[0];
  }
  if ((v44 & 0x80u) == 0) {
    std::string::size_type v17 = v44;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v43[1];
  }
  BOOL v18 = std::string::append(&v53, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v20 = std::string::append(&v54, ", max-norm ");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v42 & 0x80u) == 0) {
    unsigned __int8 v22 = v41;
  }
  else {
    unsigned __int8 v22 = (void **)v41[0];
  }
  if ((v42 & 0x80u) == 0) {
    std::string::size_type v23 = v42;
  }
  else {
    std::string::size_type v23 = (std::string::size_type)v41[1];
  }
  unsigned __int8 v24 = std::string::append(&v55, (const std::string::value_type *)v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  std::string v26 = std::string::append(&v56, "\n  bias_grad");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 192));
  if ((v40 & 0x80u) == 0) {
    std::string v28 = v39;
  }
  else {
    std::string v28 = (void **)v39[0];
  }
  if ((v40 & 0x80u) == 0) {
    std::string::size_type v29 = v40;
  }
  else {
    std::string::size_type v29 = (std::string::size_type)v39[1];
  }
  BOOL v30 = std::string::append(&v57, (const std::string::value_type *)v28, v29);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  uint64_t v32 = std::string::append(&v58, ", lr-coef ");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0) {
    uint64_t v34 = __p;
  }
  else {
    uint64_t v34 = (void **)__p[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v35 = v38;
  }
  else {
    std::string::size_type v35 = (std::string::size_type)__p[1];
  }
  BOOL v36 = std::string::append(&v59, (const std::string::value_type *)v34, v35);
  *a2 = *v36;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if ((char)v38 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if ((char)v40 < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if ((char)v42 < 0) {
    operator delete(v41[0]);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if ((char)v44 < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if ((char)v46 < 0) {
    operator delete(v45[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if ((char)v48 < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
}

void sub_1B1E2D5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v73 - 57) < 0) {
    operator delete(*(void **)(v73 - 80));
  }
  if (*(char *)(v73 - 89) < 0) {
    operator delete(*(void **)(v73 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v73 - 121) < 0) {
    operator delete(*(void **)(v73 - 144));
  }
  if (*(char *)(v73 - 153) < 0) {
    operator delete(*(void **)(v73 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v73 - 185) < 0) {
    operator delete(*(void **)(v73 - 208));
  }
  if (*(char *)(v73 - 217) < 0) {
    operator delete(*(void **)(v73 - 240));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(a1);
}

void sub_1B1E2D74C()
{
}

void sub_1B1E2D754()
{
}

void sub_1B1E2D75C()
{
}

void sub_1B1E2D764()
{
}

void sub_1B1E2D76C()
{
}

void sub_1B1E2D774()
{
}

void sub_1B1E2D77C()
{
}

void sub_1B1E2D784()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::PropagateFncDirect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  if (*(int *)(a1 + 128) <= 0) {
    float v7 = 0.0;
  }
  else {
    float v7 = 1.0;
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 384) + 48 * a4), *(unsigned int *)(a2 + 20), (*(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 120)), 3, 0);
  if (*(int *)(a1 + 144) >= 1)
  {
    int v8 = 0;
    int v9 = a4;
    do
    {
      int v10 = *(_DWORD *)(a1 + 128);
      int v11 = *(_DWORD *)(a1 + 120);
      int v61 = v8;
      if (v10 >= 1)
      {
        int v12 = *(_DWORD *)(a1 + 108);
        int v13 = v12 * v8 * v11;
        uint64_t v14 = *(void *)(a3 + 8) + 4 * v13;
        int v15 = *(_DWORD *)(a3 + 28) - v13;
        uint64_t v16 = *(void *)(a3 + 32);
        *(void *)((char *)&v67[1] + 4) = *(void *)(a3 + 20);
        LODWORD(v67[1]) = v12;
        HIDWORD(v67[2]) = v15;
        v67[3] = v16;
        uint64_t v66 = &unk_1F0A472A0;
        v67[0] = v14;
        LODWORD(v14) = *(_DWORD *)(a1 + 104);
        int v17 = v14 * *(_DWORD *)(a1 + 140);
        int v18 = v14 * v10;
        uint64_t v19 = *(void *)(a2 + 8) + 4 * v17;
        int v20 = *(_DWORD *)(a2 + 28) - v17;
        uint64_t v21 = *(void *)(a2 + 32);
        v65[0] = v19;
        LODWORD(v65[1]) = v18;
        *(void *)((char *)&v65[1] + 4) = *(void *)(a2 + 20);
        HIDWORD(v65[2]) = v20;
        v65[3] = v21;
        uint64_t v64 = &unk_1F0A472A0;
        kaldi::QuantizedMatrixBase<short>::Range(*(void *)(a1 + 152), *(_DWORD *)(a1 + 124) * v14, v18, v12 * v8, v12, (uint64_t)v63);
        LODWORD(v22) = 1.0;
        kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v66, (uint64_t)&v64, 111, (kaldi::quasar::Vocab *)v63, 111, v22, 0.0);
        int v23 = *(_DWORD *)(a1 + 120);
        if (v23 >= 2)
        {
          for (int i = 1; i < v23; ++i)
          {
            unsigned int v25 = *(_DWORD *)(a1 + 108) * (i + v8 * v23);
            uint64_t v26 = *(void *)(a3 + 8) + 4 * v25;
            unsigned int v27 = *(_DWORD *)(a3 + 28) - v25;
            uint64_t v28 = *(void *)(a3 + 32);
            LODWORD(v62[2]) = *(_DWORD *)(a1 + 108);
            *(void *)((char *)&v62[2] + 4) = *(void *)(a3 + 20);
            HIDWORD(v62[3]) = v27;
            v62[4] = v28;
            v62[0] = &unk_1F0A472A0;
            v62[1] = v26;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v62, (uint64_t)&v66, 111);
            v62[0] = &unk_1F0A472A0;
            memset(&v62[1], 0, 32);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v62);
            int v23 = *(_DWORD *)(a1 + 120);
          }
        }
        kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)v63);
        uint64_t v64 = &unk_1F0A472A0;
        memset(v65, 0, sizeof(v65));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v64);
        uint64_t v66 = &unk_1F0A472A0;
        memset(v67, 0, sizeof(v67));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
        int v11 = *(_DWORD *)(a1 + 120);
      }
      if (v11 >= 1)
      {
        int v29 = 0;
        do
        {
          uint64_t v30 = *(void *)(a1 + 384) + 48 * v9;
          int v31 = *(_DWORD *)(a1 + 108);
          int v32 = *(_DWORD *)(v30 + 28) - v31 * v29;
          uint64_t v33 = *(void *)(v30 + 32);
          v67[0] = *(void *)(v30 + 8) + 4 * v31 * v29;
          LODWORD(v67[1]) = v31;
          *(void *)((char *)&v67[1] + 4) = *(void *)(v30 + 20);
          HIDWORD(v67[2]) = v32;
          v67[3] = v33;
          uint64_t v66 = &unk_1F0A472A0;
          uint64_t v34 = *(void *)(a1 + 160);
          v63[2] = 0;
          uint64_t v35 = *(void *)(v34 + 8) + 4 * v31 * v8;
          v63[0] = &unk_1F0A472D0;
          v63[1] = v35;
          LODWORD(v63[2]) = v31;
          v63[3] = *(void *)(v34 + 24);
          kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v66, (uint64_t)v63, 1.0, v7);
          int v36 = *(_DWORD *)(a1 + 104);
          int v37 = (*(_DWORD *)(a1 + 116) * v8 + *(_DWORD *)(a1 + 112) * v29) * v36;
          int v38 = *(_DWORD *)(a1 + 124) * v36;
          uint64_t v39 = *(void *)(a2 + 8) + 4 * v37;
          int v40 = *(_DWORD *)(a2 + 28) - v37;
          uint64_t v41 = *(void *)(a2 + 32);
          LODWORD(v65[1]) = v38;
          *(void *)((char *)&v65[1] + 4) = *(void *)(a2 + 20);
          HIDWORD(v65[2]) = v40;
          v65[3] = v41;
          uint64_t v64 = &unk_1F0A472A0;
          v65[0] = v39;
          kaldi::QuantizedMatrixBase<short>::Range(*(void *)(a1 + 152), 0, v38, *(_DWORD *)(a1 + 108) * v8, *(_DWORD *)(a1 + 108), (uint64_t)v63);
          LODWORD(v42) = 1.0;
          kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v66, (uint64_t)&v64, 111, (kaldi::quasar::Vocab *)v63, 111, v42, 1.0);
          kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)v63);
          uint64_t v64 = &unk_1F0A472A0;
          memset(v65, 0, sizeof(v65));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v64);
          uint64_t v66 = &unk_1F0A472A0;
          memset(v67, 0, sizeof(v67));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
          ++v29;
          int v8 = v61;
        }
        while (v29 < *(_DWORD *)(a1 + 120));
      }
      int v43 = *(_DWORD *)(a1 + 148);
      if (v43 >= 1)
      {
        for (int j = 0; j < v43; ++j)
        {
          int v45 = *(_DWORD *)(a1 + 108);
          unsigned int v46 = v45 * (j + v43 * v8);
          uint64_t v47 = *(void *)(a3 + 8) + 4 * v46;
          unsigned int v48 = *(_DWORD *)(a3 + 28) - v46;
          uint64_t v49 = *(void *)(a3 + 32);
          LODWORD(v63[2]) = v45;
          *(void *)((char *)&v63[2] + 4) = *(void *)(a3 + 20);
          HIDWORD(v63[3]) = v48;
          v63[4] = v49;
          v63[0] = &unk_1F0A472A0;
          v63[1] = v47;
          uint64_t v50 = *(void *)(a1 + 384) + 48 * v9;
          LODWORD(v47) = v45 * j * *(_DWORD *)(a1 + 136);
          uint64_t v51 = *(void *)(v50 + 8) + 4 * (int)v47;
          LODWORD(v47) = *(_DWORD *)(v50 + 28) - v47;
          uint64_t v52 = *(void *)(v50 + 32);
          v67[0] = v51;
          LODWORD(v67[1]) = v45;
          *(void *)((char *)&v67[1] + 4) = *(void *)(v50 + 20);
          HIDWORD(v67[2]) = v47;
          v67[3] = v52;
          uint64_t v66 = &unk_1F0A472A0;
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v63, (uint64_t)&v66, 111);
          uint64_t v66 = &unk_1F0A472A0;
          memset(v67, 0, sizeof(v67));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
          if (*(int *)(a1 + 132) >= 2)
          {
            int v53 = 1;
            do
            {
              uint64_t v54 = *(void *)(a1 + 384) + 48 * v9;
              int v55 = *(_DWORD *)(a1 + 108);
              int v56 = (v53 + j * *(_DWORD *)(a1 + 136)) * v55;
              uint64_t v57 = *(void *)(v54 + 8) + 4 * v56;
              int v58 = *(_DWORD *)(v54 + 28) - v56;
              uint64_t v59 = *(void *)(v54 + 32);
              v67[0] = v57;
              LODWORD(v67[1]) = v55;
              *(void *)((char *)&v67[1] + 4) = *(void *)(v54 + 20);
              HIDWORD(v67[2]) = v58;
              v67[3] = v59;
              uint64_t v66 = &unk_1F0A472A0;
              kaldi::CuMatrixBase<float>::Max((uint64_t)v63, (uint64_t)&v66);
              uint64_t v66 = &unk_1F0A472A0;
              memset(v67, 0, sizeof(v67));
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
              ++v53;
            }
            while (v53 < *(_DWORD *)(a1 + 132));
          }
          v63[0] = &unk_1F0A472A0;
          memset(&v63[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v63);
          int v43 = *(_DWORD *)(a1 + 148);
          int v8 = v61;
        }
      }
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1B1E2DDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _OWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a26);
  *(void *)(v28 - 144) = v26;
  *unsigned int v27 = 0u;
  v27[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v28 - 144));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Backpropagation of CNN ConvolutionalMaxPoolingComponent is not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::AccumGradients()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix(v16, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v15, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, void))(*(void *)v8 + 112))(v8, a2, v16, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, uint64_t, int32x2_t *, void))(*(void *)v8 + 128))(v8, a2, v16, a3, v15, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  LODWORD(a2) = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 152));
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  LODWORD(a3) = a2 * a3;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v12 = (char *)*a4;
  LODWORD(v13) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v12, **(void **)(v8 + 168));
  int v10 = *(_DWORD *)(*(void *)(a1 + 160) + 16);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v12 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v13) = v10;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(const void ****)(v8 + 192), (uint64_t)&v12);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v16);
}

void sub_1B1E2E188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 276) = a3;
  *(_DWORD *)(result + 272) = a2;
  *(unsigned char *)(result + 480) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  float v4 = a3;
  int v6 = *(_DWORD *)(a1 + 272);
  if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(void *)(*(void *)(a1 + 168) + 8 * a2), *(void *)(a1 + 216) + 48 * a2, a3);
      uint64_t v9 = *(void *)(*(void *)(a1 + 192) + 8 * a2);
      uint64_t v10 = *(void *)(a1 + 240) + 32 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, v10, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a3 > 0.0)
    {
      uint64_t v11 = a2;
      if (*(unsigned char *)(a1 + 84)) {
        float v4 = (float)*(int *)(*(void *)(a1 + 288) + 4 * a2) * a3;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(void *)(*(void *)(a1 + 168) + 8 * a2), (int *)(*(void *)(a1 + 216) + 48 * a2), v4);
      uint64_t v13 = *(void *)(*(void *)(a1 + 192) + 8 * v11);
      uint64_t v14 = (void *)(*(void *)(a1 + 240) + 32 * v11);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v13, v14, v4);
    }
  }
  else if (v6 == 1 && a3 > 0.0)
  {
    uint64_t v7 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v4 = (float)*(int *)(*(void *)(a1 + 288) + 4 * a2) * a3;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(void *)(*(void *)(a1 + 168) + 8 * a2), v4);
    uint64_t v12 = *(void *)(*(void *)(a1 + 192) + 8 * v7);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v12, v4);
  }
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  int v6 = *(_DWORD *)(*(void *)(a1 + 160) + 16);
  int v7 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  uint64_t result = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 152));
  *a3 = v6 + result * v7;
  uint64_t v9 = *(void *)(a1 + 168);
  uint64_t v10 = *(void *)(a1 + 176) - v9;
  if (v10 && (uint64_t v11 = *(void *)(a1 + 200) - *(void *)(a1 + 192)) != 0)
  {
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v11 >> 3;
    int v14 = *(_DWORD *)(a1 + 80);
    if (v14 == 1) {
      int v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = v13 - 1;
    if (v12 - 1 != v14 || v16 != v14)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      int v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"  ", 2);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    int v18 = kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v9 + 8 * v14));
    uint64_t result = kaldi::CuVectorBase<float>::CountZeros(*(void *)(*(void *)(a1 + 192) + 8 * v15));
    int v19 = result + v18;
  }
  else
  {
    int v19 = 0;
  }
  *a2 = v19;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (!*(unsigned char *)(a1 + 480))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 408), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 360), v3);
    std::vector<BOOL>::resize(a1 + 456, v3, 0);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 168), v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 192), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 216), v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 240), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 288), v3);
    *(unsigned char *)(a1 + 480) = 1;
  }
}

void sub_1B1E2E76C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void sub_1B1E2E830(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void sub_1B1E2E8A4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 262;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 263;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 264;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Backpropagation of CNN ConvolutionalMaxPoolingComponent is not supported on CPU");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  *(_DWORD *)(*(void *)(a1 + 288) + 4 * a5) = *(_DWORD *)(a2 + 20);
  if (((*(void *)(*(void *)(a1 + 456) + (((unint64_t)a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v41, "ConvolutionalMaxPoolingComponent::AccumGradients can't be called before ConvolutionalMaxPoolingComponent::Backpropagate");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
  }
  uint64_t v9 = *(void *)(a1 + 168);
  *(void *)(*(void *)(v9 + 8 * a5) + 32) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 192) + 8 * a5) + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(void *)(v9 + 8 * a5));
  kaldi::CuVectorBase<float>::SetZero(*(void *)(*(void *)(a1 + 192) + 8 * a5));
  if (*(int *)(a1 + 144) >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 168) + 8 * a5);
      int v13 = *(_DWORD *)(a1 + 104);
      int v12 = *(_DWORD *)(a1 + 108);
      uint64_t v14 = *(void *)(v11 + 8) + 4 * v12 * v10;
      int v15 = *(_DWORD *)(v11 + 28) - v12 * v10;
      uint64_t v16 = *(void *)(v11 + 32);
      LODWORD(v41[2]) = v12;
      *(void *)((char *)&v41[2] + 4) = *(void *)(v11 + 20);
      HIDWORD(v41[3]) = v15;
      v41[4] = v16;
      v41[0] = &unk_1F0A472A0;
      v41[1] = v14;
      uint64_t v17 = *(void *)(a1 + 408) + 48 * a5;
      LODWORD(v16) = *(_DWORD *)(a1 + 124);
      int v18 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a1 + 120);
      unsigned int v19 = *(_DWORD *)(v17 + 24);
      int v20 = v19 * v18 * v10;
      uint64_t v21 = *(void *)(v17 + 8) + 4 * v20;
      int v22 = *(_DWORD *)(v17 + 28) - v20;
      unsigned int v23 = *(_DWORD *)(v17 + 16);
      uint64_t v24 = *(void *)(v17 + 32);
      *((void *)&v39 + 1) = __PAIR64__(v18, v23);
      *(void *)&long long v40 = __PAIR64__(v22, v19);
      *((void *)&v40 + 1) = v24;
      int v38 = &unk_1F0A472A0;
      *(void *)&long long v39 = v21;
      uint64_t v25 = *(void *)(a1 + 336) + 48 * a5;
      unsigned int v26 = v13 * v16;
      LODWORD(v16) = *(_DWORD *)(v25 + 24);
      LODWORD(v14) = v16 * v18 * v10;
      uint64_t v27 = *(void *)(v25 + 8) + 4 * (int)v14;
      LODWORD(v14) = *(_DWORD *)(v25 + 28) - v14;
      uint64_t v28 = *(void *)(v25 + 32);
      *((void *)&v36 + 1) = __PAIR64__(v18, v26);
      *(void *)&long long v37 = __PAIR64__(v14, v16);
      *((void *)&v37 + 1) = v28;
      uint64_t v35 = &unk_1F0A472A0;
      *(void *)&long long v36 = v27;
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)v41, (uint64_t)&v35, CblasTrans, (uint64_t)&v38, CblasNoTrans, 1.0, 0.0);
      uint64_t v29 = *(void *)(*(void *)(a1 + 192) + 8 * a5);
      int v30 = *(_DWORD *)(a1 + 108);
      uint64_t v33 = 0;
      uint64_t v31 = *(void *)(v29 + 8) + 4 * v30 * v10;
      v32[0] = &unk_1F0A472D0;
      v32[1] = v31;
      LODWORD(v33) = v30;
      uint64_t v34 = *(void *)(v29 + 24);
      kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v32, (uint64_t)&v38, 1.0, 1.0);
      uint64_t v35 = &unk_1F0A472A0;
      long long v36 = 0u;
      long long v37 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v35);
      int v38 = &unk_1F0A472A0;
      long long v39 = 0u;
      long long v40 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v38);
      v41[0] = &unk_1F0A472A0;
      memset(&v41[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v41);
      ++v10;
    }
    while (v10 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1B1E2EC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  uint64_t v21 = va_arg(va2, void);
  _OWORD *v8 = 0u;
  v8[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  *int v7 = 0u;
  v7[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va1);
  *int v6 = 0u;
  v6[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  float v7 = *(float *)(a1 + 64);
  float v6 = *(float *)(a1 + 68);
  float v8 = *(float *)(a1 + 72);
  int v9 = *(_DWORD *)(a1 + 76);
  *(void *)(*(void *)(a1 + 152) + 32) = a2;
  *(void *)(*(void *)(a1 + 160) + 24) = a2;
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  if (a3 >= 0) {
    int v11 = a3;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 80);
  }
  if (v10 == 1) {
    int v12 = 0;
  }
  else {
    int v12 = v11;
  }
  uint64_t v13 = *(uint64_t **)(a1 + 168);
  unint64_t v14 = v12;
  *(void *)(v13[v12] + 32) = a2;
  *(void *)(*(void *)(*(void *)(a1 + 192) + 8 * v12) + 24) = a2;
  *(void *)(*(void *)(a1 + 216) + 48 * v12 + 32) = a2;
  *(void *)(*(void *)(a1 + 240) + 32 * v12 + 24) = a2;
  if (v12 == v10)
  {
    kaldi::CuMatrixBase<float>::AddMat(v13[v12], *v13, 111, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*(void *)(*(void *)(a1 + 192) + 8 * v14), **(void **)(a1 + 192), 1.0, 0.0);
    if (*(int *)(a1 + 80) > 1)
    {
      uint64_t v15 = 1;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*(void *)(*(void *)(a1 + 168) + 8 * v14), *(void *)(*(void *)(a1 + 168) + 8 * v15), 111, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*(void *)(*(void *)(a1 + 192) + 8 * v14), *(void *)(*(void *)(a1 + 192) + 8 * v15++), 1.0, 1.0);
      }
      while (v15 < *(int *)(a1 + 80));
    }
    uint64_t v16 = *(int **)(a1 + 288);
    v16[v14] = 0;
    if ((int)v10 >= 1)
    {
      int v17 = 0;
      uint64_t v18 = v16;
      do
      {
        int v19 = *v18++;
        v17 += v19;
        v16[v14] = v17;
        --v10;
      }
      while (v10);
    }
  }
  float v20 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v20 = v20 / (float)*(int *)(*(void *)(a1 + 288) + 4 * v14);
  }
  uint64_t v21 = *(void *)(a1 + 312);
  if (v14 >= (*(void *)(a1 + 320) - v21) >> 2)
  {
    LODWORD(v28[0]) = 2143289344;
    std::vector<float>::resize(a1 + 312, (int)v14 + 1, v28);
    uint64_t v21 = *(void *)(a1 + 312);
  }
  *(float *)(v21 + 4 * v14) = v20;
  if (*(float *)(a1 + 276) >= 0.0) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 248))(a1, v14);
  }
  if (v7 != 0.0) {
    kaldi::CuMatrixBase<float>::AddMat(*(void *)(a1 + 152), *(void *)(a1 + 152), 111, (float)-(float)(v20 * v7) * (float)*(int *)(*(void *)(a1 + 288) + 4 * v14), 1.0);
  }
  if (v6 != 0.0) {
    kaldi::cu::RegularizeL1<float>(*(void *)(a1 + 152), *(void *)(*(void *)(a1 + 168) + 8 * v14), (float)(v6 * v20) * (float)*(int *)(*(void *)(a1 + 288) + 4 * v14), v20);
  }
  if (v8 > 0.0)
  {
    if (*(int *)(a1 + 80) >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
    }
    if (*(void *)(a1 + 496) == *(void *)(a1 + 488)) {
      kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
    }
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 488), v9, v8);
  }
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v14, v20);
  if (*(float *)(a1 + 280) > 0.0)
  {
    kaldi::CuMatrix<float>::CuMatrix(v28, *(void *)(a1 + 152), 111);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)v28, *(void *)(a1 + 152));
    uint64_t v22 = *(unsigned int *)(*(void *)(a1 + 152) + 20);
    v26[2] = 0;
    uint64_t v27 = 0;
    v26[0] = &unk_1F0A517C0;
    v26[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v26, v22, 0);
    uint64_t v27 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v26, (uint64_t)v28, 1.0, 0.0);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v26, 0.5);
    kaldi::CuVector<float>::CuVector(v25, (uint64_t)v26);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v25, 1.0 / *(float *)(a1 + 280));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v25, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v25);
    kaldi::CuMatrixBase<float>::MulRowsVec(*(void *)(a1 + 152), (uint64_t)v25);
    kaldi::CuVectorBase<float>::ApplyMaxNorm(*(void *)(a1 + 160), *(float *)(a1 + 280));
    kaldi::CuVector<float>::~CuVector(v25);
    kaldi::CuVector<float>::~CuVector(v26);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v28);
  }
  unsigned int v23 = *(unsigned char **)(a1 + 288);
  if (v14 == *(_DWORD *)(a1 + 80))
  {
    uint64_t v24 = *(unsigned char **)(a1 + 296);
    if (v23 != v24) {
      bzero(v23, ((v24 - v23 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v23[4 * v14] = 0;
  }
}

void sub_1B1E2F05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v3, "Weights are already vectorized");
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v3, (uint64_t)"Performing vectorization of convolutional maxpooling component", 62);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v3);
    }
    int v2 = *(_DWORD *)(*(void *)(a1 + 160) + 16)
       + *(_DWORD *)(*(void *)(a1 + 152) + 16) * *(_DWORD *)(*(void *)(a1 + 152) + 20);
    if (v2 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v3, "(nlinparams + Bias().Dim()) == NumParams()");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v3);
}

void sub_1B1E2F59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::CnnRearrangeComponent::InitData(uint64_t a1, uint64_t *a2)
{
  long long v39 = 0;
  long long v40 = 0;
  uint64_t v41 = 0;
  memset(&v38, 0, sizeof(v38));
  int v37 = -1;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  float v4 = a2 + 4;
  uint64_t v36 = 0;
  while ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v34);
    if (SHIBYTE(v36) < 0)
    {
      if (v35 != 10) {
        goto LABEL_49;
      }
      std::string::size_type v5 = v34;
    }
    else
    {
      if (SHIBYTE(v36) != 10) {
        goto LABEL_49;
      }
      std::string::size_type v5 = (void **)&v34;
    }
    uint64_t v6 = *v5;
    int v7 = *((unsigned __int16 *)v5 + 4);
    if (v6 != (void *)0x646E61426D754E3CLL || v7 != 15987)
    {
LABEL_49:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
      uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Unknown token ", 14);
      if (v36 >= 0) {
        uint64_t v29 = (void **)&v34;
      }
      else {
        uint64_t v29 = v34;
      }
      if (v36 >= 0) {
        uint64_t v30 = HIBYTE(v36);
      }
      else {
        uint64_t v30 = v35;
      }
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" (NumBands)", 11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
    }
    kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v37);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  int v9 = v37;
  if (v37 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"NumBands should be > 0", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
  }
  int v10 = *(_DWORD *)(a1 + 8);
  int v11 = v10 / v37;
  if (v10 % v37)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid NumBands value", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
  }
  int v12 = 0;
  do
  {
    if (v11 >= 1)
    {
      int v13 = 0;
      unint64_t v14 = v40;
      do
      {
        int v15 = v12 + v37 * v13;
        if (v14 >= v41)
        {
          int v17 = v39;
          uint64_t v18 = (v14 - v39) >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v41 - v39;
          if ((v41 - v39) >> 1 > v19) {
            unint64_t v19 = v20 >> 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v41, v21);
            int v17 = v39;
            unint64_t v14 = v40;
          }
          else
          {
            uint64_t v22 = 0;
          }
          unsigned int v23 = &v22[4 * v18];
          *(_DWORD *)unsigned int v23 = v15;
          uint64_t v16 = v23 + 4;
          while (v14 != v17)
          {
            int v24 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          long long v39 = v23;
          long long v40 = v16;
          uint64_t v41 = &v22[4 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v14 = v15;
          uint64_t v16 = v14 + 4;
        }
        long long v40 = v16;
        ++v13;
        unint64_t v14 = v16;
      }
      while (v13 != v11);
      int v9 = v37;
    }
    ++v12;
  }
  while (v12 < v9);
  std::vector<int>::resize(&v38, *(int *)(a1 + 8));
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v25 = 0;
    unsigned int v26 = v39;
    std::vector<unsigned int>::pointer begin = v38.__begin_;
    do
    {
      begin[*(int *)&v26[4 * v25]] = v25;
      ++v25;
    }
    while (v25 < *(int *)(a1 + 8));
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)(v40 - v39) >> 2, 1);
  memcpy(*(void **)(a1 + 56), v39, v40 - v39);
  kaldi::CuArray<int>::Resize(a1 + 72, (unint64_t)((char *)v38.__end_ - (char *)v38.__begin_) >> 2, 1);
  memcpy(*(void **)(a1 + 80), v38.__begin_, (char *)v38.__end_ - (char *)v38.__begin_);
  if (SHIBYTE(v36) < 0) {
    operator delete(v34);
  }
  if (v38.__begin_)
  {
    v38.__end_ = v38.__begin_;
    operator delete(v38.__begin_);
  }
  if (v39)
  {
    long long v40 = v39;
    operator delete(v39);
  }
}

void sub_1B1E2F98C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  float v4 = *(void **)(v1 - 104);
  if (v4)
  {
    *(void *)(v1 - 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::CnnRearrangeComponent::ReadData(uint64_t a1, void *a2, int a3)
{
  char v8 = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v8);
  memset(&v7, 0, sizeof(v7));
  kaldi::ReadIntegerVector<int>(a2, a3, &v7, 0, 0, 0, 0);
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)v7.__end_ - (char *)v7.__begin_) >> 2, 1);
  memcpy(*(void **)(a1 + 56), v7.__begin_, (char *)v7.__end_ - (char *)v7.__begin_);
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  kaldi::CuArray<int>::Resize(a1 + 72, (unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2, 1);
  memcpy(*(void **)(a1 + 80), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v7.__begin_)
  {
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
}

void sub_1B1E2FAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::CnnRearrangeComponent::WriteData(uint64_t a1, void *a2, int a3)
{
  kaldi::WriteBasicType<char>(a2, a3);
  std::vector<int>::vector(&v7, *(int *)(a1 + 48));
  kaldi::CuArray<int>::CopyToVec((int *)(a1 + 48), (std::vector<unsigned int> *)&v7);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, v7.__end_ - v7.__begin_, (uint64_t)v7.__begin_);
  std::vector<int>::vector((std::vector<int> *)&__p, *(int *)(a1 + 72));
  kaldi::CuArray<int>::CopyToVec((int *)(a1 + 72), &__p);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, __p.__end_ - __p.__begin_, (uint64_t)__p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v7.__begin_)
  {
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
}

void sub_1B1E2FBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::CnnRearrangeComponent::Info@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\n CnnRearrange ");
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::cu::Copy<float>(a2, (unsigned int *)(a1 + 48), a3);
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::cu::Copy<float>(a4, (unsigned int *)(a1 + 72), a5);
}

void kaldi::nnet1::PaddingComponent::InitData(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 56) = 0;
  uint64_t v3 = a1 + 56;
  uint64_t v4 = a1 + 52;
  std::string::size_type v5 = (_DWORD *)(a1 + 60);
  *(void *)(a1 + 48) = 0;
  uint64_t v6 = (float *)(a1 + 48);
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  std::vector<int> v7 = a2 + 4;
  while ((*((unsigned char *)v7 + *(void *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v28);
    if (SHIBYTE(v29) < 0)
    {
      uint64_t v11 = *((void *)&v28 + 1);
      if (*((void *)&v28 + 1) == 12)
      {
        BOOL v12 = *(void *)v28 == 0x646461506572503CLL && *(_DWORD *)(v28 + 8) == 1046965865;
        uint64_t v10 = v4;
        if (v12)
        {
LABEL_47:
          kaldi::ReadBasicType<int>(a2, 0, v10);
          goto LABEL_48;
        }
      }
      if (*((void *)&v28 + 1) == 13)
      {
        BOOL v13 = *(void *)v28 == 0x64615074736F503CLL && *(void *)(v28 + 5) == 0x3E676E6964646150;
        uint64_t v10 = v3;
        if (v13) {
          goto LABEL_47;
        }
        uint64_t v11 = *((void *)&v28 + 1);
      }
      if (v11 == 11)
      {
        BOOL v14 = *(void *)v28 == 0x626D6174736F503CLL && *(void *)(v28 + 3) == 0x3E656C626D617473;
        uint64_t v10 = (uint64_t)v5;
        if (v14) {
          goto LABEL_47;
        }
        uint64_t v11 = *((void *)&v28 + 1);
      }
      if (v11 != 10) {
        goto LABEL_55;
      }
      char v8 = (long long *)v28;
    }
    else
    {
      char v8 = &v28;
      switch(HIBYTE(v29))
      {
        case 0xA:
          break;
        case 0xB:
          goto LABEL_35;
        case 0xC:
          BOOL v9 = (void)v28 == 0x646461506572503CLL && DWORD2(v28) == 1046965865;
          uint64_t v10 = v4;
          if (!v9) {
            goto LABEL_55;
          }
          goto LABEL_47;
        case 0xD:
          BOOL v15 = (void)v28 == 0x64615074736F503CLL && *(void *)((char *)&v28 + 5) == 0x3E676E6964646150;
          uint64_t v10 = v3;
          if (v15) {
            goto LABEL_47;
          }
          if (HIBYTE(v29) == 10) {
            goto LABEL_40;
          }
          if (HIBYTE(v29) != 11) {
            goto LABEL_55;
          }
LABEL_35:
          BOOL v16 = (void)v28 == 0x626D6174736F503CLL && *(void *)((char *)&v28 + 3) == 0x3E656C626D617473;
          uint64_t v10 = (uint64_t)v5;
          if (v16) {
            goto LABEL_47;
          }
          if (HIBYTE(v29) != 10) {
            goto LABEL_55;
          }
LABEL_40:
          char v8 = &v28;
          break;
        default:
          goto LABEL_55;
      }
    }
    uint64_t v17 = *(void *)v8;
    int v18 = *((unsigned __int16 *)v8 + 4);
    if (v17 != 0x756C61566461503CLL || v18 != 15973)
    {
LABEL_55:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Unknown token ", 14);
      if (v29 >= 0) {
        uint64_t v22 = &v28;
      }
      else {
        uint64_t v22 = (long long *)v28;
      }
      if (v29 >= 0) {
        uint64_t v23 = HIBYTE(v29);
      }
      else {
        uint64_t v23 = *((void *)&v28 + 1);
      }
      int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" (NumBands)", 11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
    }
    kaldi::ReadBasicType<float>(a2, 0, v6);
LABEL_48:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  int v20 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 52) + v20 + *(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Invalid pre and post padding sizes", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  if (v20 < *v5 || (*v5 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Invalid postamble size", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
}

void sub_1B1E30018(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::PaddingComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  *(void *)(a1 + 56) = 0;
  uint64_t v5 = a1 + 56;
  *(void *)(a1 + 48) = 0;
  uint64_t v6 = (float *)(a1 + 48);
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v24 = 0uLL;
    uint64_t v25 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v24);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
      std::vector<int> v7 = &v24;
      switch(HIBYTE(v25))
      {
        case 0xA:
          goto LABEL_34;
        case 0xB:
          BOOL v8 = (void)v24 == 0x626D6174736F503CLL && *(void *)((char *)&v24 + 3) == 0x3E656C626D617473;
          uint64_t v9 = v5 + 4;
          if (!v8) {
            goto LABEL_50;
          }
          goto LABEL_45;
        case 0xC:
          BOOL v14 = (void)v24 == 0x646461506572503CLL && DWORD2(v24) == 1046965865;
          uint64_t v9 = v5 - 4;
          if (!v14) {
            goto LABEL_32;
          }
          goto LABEL_45;
        case 0xD:
          BOOL v18 = (void)v24 == 0x64615074736F503CLL && *(void *)((char *)&v24 + 5) == 0x3E676E6964646150;
          uint64_t v9 = v5;
          if (v18) {
            goto LABEL_45;
          }
LABEL_32:
          if (HIBYTE(v25) != 10) {
            goto LABEL_50;
          }
          std::vector<int> v7 = &v24;
          break;
        default:
          goto LABEL_50;
      }
      goto LABEL_34;
    }
    uint64_t v10 = *((void *)&v24 + 1);
    if (*((void *)&v24 + 1) != 11
      || (*(void *)v24 == 0x626D6174736F503CLL ? (BOOL v11 = *(void *)(v24 + 3) == 0x3E656C626D617473) : (BOOL v11 = 0),
          uint64_t v9 = v5 + 4,
          !v11))
    {
      if (*((void *)&v24 + 1) == 12)
      {
        BOOL v12 = *(void *)v24 == 0x646461506572503CLL && *(_DWORD *)(v24 + 8) == 1046965865;
        uint64_t v9 = v5 - 4;
        if (v12) {
          goto LABEL_45;
        }
        uint64_t v10 = *((void *)&v24 + 1);
      }
      if (v10 != 13) {
        goto LABEL_26;
      }
      BOOL v13 = *(void *)v24 == 0x64615074736F503CLL && *(void *)(v24 + 5) == 0x3E676E6964646150;
      uint64_t v9 = v5;
      if (!v13)
      {
        uint64_t v10 = *((void *)&v24 + 1);
LABEL_26:
        if (v10 != 10) {
          goto LABEL_50;
        }
        std::vector<int> v7 = (long long *)v24;
LABEL_34:
        uint64_t v15 = *(void *)v7;
        int v16 = *((unsigned __int16 *)v7 + 4);
        if (v15 != 0x756C61566461503CLL || v16 != 15973)
        {
LABEL_50:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
          int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"unrecognized config token ", 26);
          if (v25 >= 0) {
            unint64_t v21 = &v24;
          }
          else {
            unint64_t v21 = (long long *)v24;
          }
          if (v25 >= 0) {
            uint64_t v22 = HIBYTE(v25);
          }
          else {
            uint64_t v22 = *((void *)&v24 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
        }
        kaldi::ReadBasicType<float>(a2, a3, v6);
        goto LABEL_46;
      }
    }
LABEL_45:
    kaldi::ReadBasicType<int>(a2, a3, v9);
LABEL_46:
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
  }
  LOBYTE(v23[0]) = 0;
  return kaldi::ReadBasicType<char>(a2, a3, v23);
}

void sub_1B1E30368(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::PaddingComponent::WriteData(uint64_t a1, void *a2, int a3)
{
  if (*(float *)(a1 + 48) != 0.0)
  {
    kaldi::WriteToken(a2, a3, "<PadValue>");
    kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  }
  kaldi::WriteToken(a2, a3, "<Postamble>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PrePadding>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PostPadding>");
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteBasicType<char>(a2, a3);
}

void *kaldi::nnet1::PaddingComponent::Info@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\n PaddingComponent ");
}

void kaldi::nnet1::PaddingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::Set(a3, *(float *)(a1 + 48));
  uint64_t v6 = *(int *)(a1 + 52);
  uint64_t v7 = *(void *)(a3 + 8) + 4 * v6;
  LODWORD(v6) = *(_DWORD *)(a3 + 28) - v6;
  uint64_t v8 = *(void *)(a3 + 32);
  LODWORD(v23[1]) = *(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 60);
  *(void *)((char *)&v23[1] + 4) = *(void *)(a3 + 20);
  HIDWORD(v23[2]) = v6;
  v23[3] = v8;
  uint64_t v22 = &unk_1F0A472A0;
  v23[0] = v7;
  uint64_t v9 = *(void *)(a2 + 8);
  LODWORD(v7) = *(_DWORD *)(a2 + 28);
  uint64_t v10 = *(void *)(a2 + 32);
  LODWORD(v21[1]) = v23[1];
  *(void *)((char *)&v21[1] + 4) = *(void *)(a2 + 20);
  HIDWORD(v21[2]) = v7;
  v21[3] = v10;
  int v20 = &unk_1F0A472A0;
  v21[0] = v9;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v22, (uint64_t)&v20, 111);
  int v20 = &unk_1F0A472A0;
  memset(v21, 0, sizeof(v21));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v20);
  uint64_t v22 = &unk_1F0A472A0;
  memset(v23, 0, sizeof(v23));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
  int v11 = *(_DWORD *)(a1 + 60);
  if (v11 >= 1)
  {
    int v12 = *(_DWORD *)(a3 + 16) - v11;
    uint64_t v13 = *(void *)(a3 + 8) + 4 * v12;
    int v14 = *(_DWORD *)(a3 + 28) - v12;
    uint64_t v15 = *(void *)(a3 + 32);
    LODWORD(v23[1]) = *(_DWORD *)(a1 + 60);
    *(void *)((char *)&v23[1] + 4) = *(void *)(a3 + 20);
    HIDWORD(v23[2]) = v14;
    v23[3] = v15;
    uint64_t v22 = &unk_1F0A472A0;
    v23[0] = v13;
    int v16 = *(_DWORD *)(a2 + 16) - v11;
    uint64_t v17 = *(void *)(a2 + 8) + 4 * v16;
    int v18 = *(_DWORD *)(a2 + 28) - v16;
    uint64_t v19 = *(void *)(a2 + 32);
    LODWORD(v21[1]) = v11;
    *(void *)((char *)&v21[1] + 4) = *(void *)(a2 + 20);
    HIDWORD(v21[2]) = v18;
    v21[3] = v19;
    int v20 = &unk_1F0A472A0;
    v21[0] = v17;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v22, (uint64_t)&v20, 111);
    int v20 = &unk_1F0A472A0;
    memset(v21, 0, sizeof(v21));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v20);
    uint64_t v22 = &unk_1F0A472A0;
    memset(v23, 0, sizeof(v23));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
  }
}

void sub_1B1E306B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *uint64_t v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  *int v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::PaddingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + 8);
  int v9 = *(_DWORD *)(a5 + 28);
  uint64_t v10 = *(void *)(a5 + 32);
  LODWORD(v26[1]) = *(_DWORD *)(a5 + 16) - *(_DWORD *)(a1 + 60);
  *(void *)((char *)&v26[1] + 4) = *(void *)(a5 + 20);
  HIDWORD(v26[2]) = v9;
  void v26[3] = v10;
  uint64_t v25 = &unk_1F0A472A0;
  v26[0] = v8;
  uint64_t v11 = *(int *)(a1 + 52);
  uint64_t v12 = *(void *)(a4 + 8) + 4 * v11;
  LODWORD(v11) = *(_DWORD *)(a4 + 28) - v11;
  uint64_t v13 = *(void *)(a4 + 32);
  LODWORD(v24[1]) = v26[1];
  *(void *)((char *)&v24[1] + 4) = *(void *)(a4 + 20);
  HIDWORD(v24[2]) = v11;
  v24[3] = v13;
  uint64_t v23 = &unk_1F0A472A0;
  v24[0] = v12;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v25, (uint64_t)&v23, 111);
  uint64_t v23 = &unk_1F0A472A0;
  memset(v24, 0, sizeof(v24));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  uint64_t v25 = &unk_1F0A472A0;
  memset(v26, 0, sizeof(v26));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v25);
  int v14 = *(_DWORD *)(a1 + 60);
  if (v14 >= 1)
  {
    int v15 = *(_DWORD *)(a5 + 16) - v14;
    uint64_t v16 = *(void *)(a5 + 8) + 4 * v15;
    int v17 = *(_DWORD *)(a5 + 28) - v15;
    uint64_t v18 = *(void *)(a5 + 32);
    LODWORD(v26[1]) = *(_DWORD *)(a1 + 60);
    *(void *)((char *)&v26[1] + 4) = *(void *)(a5 + 20);
    HIDWORD(v26[2]) = v17;
    void v26[3] = v18;
    uint64_t v25 = &unk_1F0A472A0;
    v26[0] = v16;
    int v19 = *(_DWORD *)(a4 + 16) - v14;
    uint64_t v20 = *(void *)(a4 + 8) + 4 * v19;
    int v21 = *(_DWORD *)(a4 + 28) - v19;
    uint64_t v22 = *(void *)(a4 + 32);
    LODWORD(v24[1]) = v14;
    *(void *)((char *)&v24[1] + 4) = *(void *)(a4 + 20);
    HIDWORD(v24[2]) = v21;
    v24[3] = v22;
    uint64_t v23 = &unk_1F0A472A0;
    v24[0] = v20;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v25, (uint64_t)&v23, 111);
    uint64_t v23 = &unk_1F0A472A0;
    memset(v24, 0, sizeof(v24));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
    uint64_t v25 = &unk_1F0A472A0;
    memset(v26, 0, sizeof(v26));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v25);
  }
}

void sub_1B1E30930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *int v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  *int v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Padding2DComponent::Init(void *this)
{
  this[6] = 0;
  this[7] = 0;
  this[8] = 0;
  return this;
}

void kaldi::nnet1::Padding2DComponent::Read(uint64_t a1, uint64_t *a2, int a3)
{
  long long __p = 0uLL;
  uint64_t v21 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&__p);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    switch(HIBYTE(v21))
    {
      case 8:
        if ((void)__p != 0x3E706F546461503CLL) {
          goto LABEL_63;
        }
        goto LABEL_59;
      case 9:
        if ((void)__p != 0x7466654C6461503CLL || BYTE8(__p) != 62) {
          goto LABEL_63;
        }
        goto LABEL_37;
      case 0xA:
        if ((void)__p == 0x654C5870616D463CLL && WORD4(__p) == 15982) {
          goto LABEL_60;
        }
        if ((void)__p == 0x654C5970616D463CLL && WORD4(__p) == 15982) {
          goto LABEL_61;
        }
        p_p = &__p;
        break;
      case 0xB:
        if ((void)__p != 0x74746F426461503CLL || *(void *)((char *)&__p + 3) != 0x3E6D6F74746F4264) {
          goto LABEL_63;
        }
        goto LABEL_58;
      default:
        return;
    }
LABEL_47:
    uint64_t v16 = *(void *)p_p;
    int v17 = *((unsigned __int16 *)p_p + 4);
    if (v16 != 0x686769526461503CLL || v17 != 15988) {
      goto LABEL_63;
    }
    uint64_t v13 = a1 + 68;
    goto LABEL_62;
  }
  uint64_t v6 = *((void *)&__p + 1);
  if (*((void *)&__p + 1) == 8)
  {
    if (*(void *)__p == 0x3E706F546461503CLL)
    {
LABEL_59:
      uint64_t v13 = a1 + 56;
      goto LABEL_62;
    }
    uint64_t v6 = *((void *)&__p + 1);
  }
  else if (*((void *)&__p + 1) == 10)
  {
    if (*(void *)__p == 0x654C5870616D463CLL && *(_WORD *)(__p + 8) == 15982)
    {
LABEL_60:
      uint64_t v13 = a1 + 48;
      goto LABEL_62;
    }
    if (*(void *)__p == 0x654C5970616D463CLL && *(_WORD *)(__p + 8) == 15982)
    {
LABEL_61:
      uint64_t v13 = a1 + 52;
      goto LABEL_62;
    }
  }
  if (v6 == 11)
  {
    if (*(void *)__p == 0x74746F426461503CLL && *(void *)(__p + 3) == 0x3E6D6F74746F4264)
    {
LABEL_58:
      uint64_t v13 = a1 + 60;
      goto LABEL_62;
    }
    uint64_t v6 = *((void *)&__p + 1);
  }
  if (v6 != 9)
  {
LABEL_30:
    if (v6 != 10) {
      goto LABEL_63;
    }
    p_p = (long long *)__p;
    goto LABEL_47;
  }
  if (*(void *)__p != 0x7466654C6461503CLL || *(unsigned char *)(__p + 8) != 62)
  {
    uint64_t v6 = *((void *)&__p + 1);
    goto LABEL_30;
  }
LABEL_37:
  uint64_t v13 = a1 + 64;
LABEL_62:
  kaldi::ReadBasicType<int>(a2, a3, v13);
LABEL_63:
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1B1E30C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *kaldi::nnet1::Padding2DComponent::Check(_DWORD *this)
{
  unsigned int v2 = this[12];
  signed int v1 = this[13];
  if (v1 < 1 || (int)v2 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "h > 0 && w > 0");
    goto LABEL_17;
  }
  int v4 = this[14];
  int v5 = this[15];
  if ((-v5 & ~(-v5 >> 31)) + (-v4 & ~(-v4 >> 31)) >= v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "num_to_trim_h < h");
    goto LABEL_17;
  }
  int v6 = this[16];
  int v7 = this[17];
  if ((-v7 & ~(-v7 >> 31)) + (-v6 & ~(-v6 >> 31)) >= v2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "num_to_trim_w < w");
    goto LABEL_17;
  }
  int v8 = this[2];
  int v9 = v8 / (int)(v2 * v1);
  if (v8 % (int)(v2 * v1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "input_dim_ % (h * w) == 0");
    goto LABEL_17;
  }
  int v10 = v4 + v1 + v5;
  int v11 = this[3];
  int v12 = (v6 + v2 + v7) * v10;
  if (v11 % v12)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "output_dim_ % (out_h * out_w) == 0");
    goto LABEL_17;
  }
  if (v9 != v11 / v12)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "c == out_c");
LABEL_17:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  return this;
}

_DWORD *kaldi::nnet1::Padding2DComponent::InitData(kaldi::nnet1::Padding2DComponent *this, uint64_t *a2)
{
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  uint64_t v3 = a2 + 4;
  while ((*((unsigned char *)v3 + *(void *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::nnet1::Padding2DComponent::Read((uint64_t)this, a2, 0);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  return kaldi::nnet1::Padding2DComponent::Check(this);
}

_DWORD *kaldi::nnet1::Padding2DComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int v6 = a2;
  for (char i = a3; kaldi::Peek(v6, i) == 60; char i = a3)
  {
    kaldi::nnet1::Padding2DComponent::Read(a1, a2, a3);
    int v6 = a2;
  }
  char v9 = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v9);
  return kaldi::nnet1::Padding2DComponent::Check((_DWORD *)a1);
}

uint64_t kaldi::nnet1::Padding2DComponent::WriteData(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<FmapXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadTop>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadBottom>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadLeft>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadRight>");
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteBasicType<char>(a2, a3);
}

uint64_t kaldi::nnet1::Padding2DComponent::Info(kaldi::nnet1::Padding2DComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(kaldi::nnet1::Padding2DComponent *, void *, void, void))(*(void *)this + 104))(this, v3, 0, 0);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v3[1] = MEMORY[0x1E4FBA470] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v5);
}

void sub_1B1E311D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Padding2DComponent::PropagateFnc(int *a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::Pad2D(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v35 = a8;
  if (a5 > 0 || a3 > 0 || a4 > 0 || a6 >= 1)
  {
    kaldi::CuMatrixBase<float>::SetZero(a2);
    a8 = v35;
  }
  int v25 = *(_DWORD *)(a1 + 16) / (a8 * a7);
  int v26 = a8 * a7;
  if (v25 >= 1)
  {
    int v32 = 0;
    int v12 = 0;
    int v13 = a6 + a5 + a8;
    int v14 = a5 & (a5 >> 31);
    uint64_t v38 = a7 + a4;
    int v24 = v13 * (a7 + a4 + a3);
    int v30 = (a5 & ~(a5 >> 31)) + a3 * v13;
    int v31 = v14;
    int v29 = -v30;
    int v33 = -v14;
    int v34 = (a6 & (a6 >> 31)) + a8 + v14;
    do
    {
      int v28 = v12;
      if (a7 >= 1)
      {
        uint64_t v15 = 0;
        int v17 = v31;
        int v16 = v32;
        int v19 = v29;
        int v18 = v30;
        do
        {
          if (v15 >= -a3 && v15 < v38)
          {
            int v20 = v19 + *(_DWORD *)(a2 + 28);
            uint64_t v21 = *(void *)(a2 + 32);
            v40[1] = *(void *)(a2 + 8) + 4 * v18;
            LODWORD(v40[2]) = v34;
            *(void *)((char *)&v40[2] + 4) = *(void *)(a2 + 20);
            HIDWORD(v40[3]) = v20;
            v40[4] = v21;
            v40[0] = &unk_1F0A472A0;
            int v22 = v17 + *(_DWORD *)(a1 + 28);
            uint64_t v23 = *(void *)(a1 + 32);
            v39[1] = *(void *)(a1 + 8) + 4 * (v33 + v16);
            LODWORD(v39[2]) = v34;
            *(void *)((char *)&v39[2] + 4) = *(void *)(a1 + 20);
            HIDWORD(v39[3]) = v22;
            v39[4] = v23;
            v39[0] = &unk_1F0A472A0;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v40, (uint64_t)v39, 111);
            v39[0] = &unk_1F0A472A0;
            memset(&v39[1], 0, 32);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v39);
            v40[0] = &unk_1F0A472A0;
            memset(&v40[1], 0, 32);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v40);
            a8 = v35;
          }
          ++v15;
          v18 += v13;
          v19 -= v13;
          v16 += a8;
          v17 -= a8;
        }
        while (a7 != v15);
      }
      int v12 = v28 + 1;
      v30 += v24;
      v29 -= v24;
      v32 += v26;
      v31 -= v26;
    }
    while (v28 + 1 != v25);
  }
}

void sub_1B1E314B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _OWORD *a8, _OWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  *a8 = 0u;
  a8[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  *(void *)(v15 - 128) = v14;
  *a9 = 0u;
  a9[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v15 - 128));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Padding2DComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void kaldi::nnet1::CnnRearrangeComponent::~CnnRearrangeComponent(kaldi::nnet1::CnnRearrangeComponent *this)
{
  kaldi::nnet1::CnnRearrangeComponent::~CnnRearrangeComponent(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F0A4BDD0;
  unsigned int v2 = (void *)((char *)this + 72);
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3) {
    free(v3);
  }
  *unsigned int v2 = 0;
  v2[1] = 0;
  std::regex_traits<char> v2[2] = 0;
  char v4 = (void *)*((void *)this + 7);
  if (v4) {
    free(v4);
  }
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  kaldi::nnet1::Component::~Component(this);
}

void kaldi::nnet1::CnnRearrangeComponent::Copy(kaldi::nnet1::CnnRearrangeComponent *this)
{
}

void sub_1B1E31628(_Unwind_Exception *a1)
{
  char v4 = (void *)*((void *)v1 + 7);
  if (v4) {
    free(v4);
  }
  *unsigned int v2 = 0;
  v2[1] = 0;
  std::regex_traits<char> v2[2] = 0;
  kaldi::nnet1::Component::~Component(v1);
  MEMORY[0x1B3EA8670](v1, 0x1091C40DB89F4D6);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::GetType(kaldi::nnet1::CnnRearrangeComponent *this)
{
  return 1036;
}

void kaldi::nnet1::PaddingComponent::~PaddingComponent(kaldi::nnet1::PaddingComponent *this)
{
  kaldi::nnet1::Component::~Component(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::PaddingComponent::Copy(kaldi::nnet1::PaddingComponent *this)
{
}

void sub_1B1E31760(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40E1B45FB4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::PaddingComponent::GetType(kaldi::nnet1::PaddingComponent *this)
{
  return 1037;
}

void kaldi::nnet1::Padding2DComponent::~Padding2DComponent(kaldi::nnet1::Padding2DComponent *this)
{
  kaldi::nnet1::Component::~Component(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Padding2DComponent::Copy(kaldi::nnet1::Padding2DComponent *this)
{
}

void sub_1B1E31874(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C406EF1CAE1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Padding2DComponent::GetType(kaldi::nnet1::Padding2DComponent *this)
{
  return 1038;
}

int *kaldi::CuArray<int>::CuArray(int *a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = *(void *)(a2 + 16);
  kaldi::CuArray<int>::Resize((uint64_t)a1, *(_DWORD *)a2, 1);
  uint64_t v4 = *a1;
  if (v4) {
    memcpy(*((void **)a1 + 1), *(const void **)(a2 + 8), 4 * v4);
  }
  return a1;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4EAF8;
  *(void *)(a1 + 88) = &unk_1F0A4EC30;
  *(void *)(a1 + 96) = &unk_1F0A4EC58;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 168) + 8 * v8);
      if (v9) {
        kaldi::NewCuSubOrMat<float>(v9, *(unsigned __int8 *)(a1 + 16));
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v12)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_1B1E31E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  int v19 = (void *)*((void *)v16 + 57);
  if (v19) {
    operator delete(v19);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  int v20 = *a12;
  if (*a12)
  {
    *((void *)v16 + 40) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v18, 0);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4EC80;
  *(void *)(a1 + 88) = &unk_1F0A4EDB8;
  *(void *)(a1 + 96) = &unk_1F0A4EDE0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 168) + 8 * v8);
      if (v9) {
        kaldi::NewCuSubOrMat<float>(v9, *(unsigned __int8 *)(a1 + 16));
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v12)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_1B1E32498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  int v19 = (void *)*((void *)v16 + 57);
  if (v19) {
    operator delete(v19);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  int v20 = *a12;
  if (*a12)
  {
    *((void *)v16 + 40) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v18, 0);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4EC80;
  *(void *)(a1 + 88) = &unk_1F0A4EDB8;
  *(void *)(a1 + 96) = &unk_1F0A4EDE0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 168) + 8 * v8);
      if (v9) {
        kaldi::NewCuSubOrMat<float>(v9, *(unsigned __int8 *)(a1 + 16));
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v12)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_1B1E32AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  int v19 = (void *)*((void *)v16 + 57);
  if (v19) {
    operator delete(v19);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  int v20 = *a12;
  if (*a12)
  {
    *((void *)v16 + 40) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v18, 0);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4EAF8;
  *(void *)(a1 + 88) = &unk_1F0A4EC30;
  *(void *)(a1 + 96) = &unk_1F0A4EC58;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 168) + 8 * v8);
      if (v9) {
        kaldi::NewCuSubOrMat<float>(v9, *(unsigned __int8 *)(a1 + 16));
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v12)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_1B1E33148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  int v19 = (void *)*((void *)v16 + 57);
  if (v19) {
    operator delete(v19);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  int v20 = *a12;
  if (*a12)
  {
    *((void *)v16 + 40) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v18, 0);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

void quasar::SpeechModelInfo::getLocale(quasar::SpeechModelInfo *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (char *)this + 120;
  std::string::basic_string[abi:ne180100]<0>(__p, "_");
  quasar::Locale::fromInternalShortIdentifier((uint64_t)v3, (char *)__p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1E33330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

quasar::SystemConfig *quasar::SystemConfig::SystemConfig(quasar::SystemConfig *this, const quasar::SystemConfig *a2, int a3, int a4)
{
  *(void *)this = &unk_1F0A523A0;
  quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo((std::string *)((char *)this + 8), (const quasar::SystemConfig *)((char *)a2 + 8));
  if (*((char *)a2 + 839) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 34, *((const std::string::value_type **)a2 + 102), *((void *)a2 + 103));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 51);
    *((void *)this + 104) = *((void *)a2 + 104);
    *((_OWORD *)this + 51) = v8;
  }
  if (a3)
  {
    *((void *)this + 105) = *((void *)a2 + 105);
    uint64_t v9 = *((void *)a2 + 106);
    *((void *)this + 106) = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar11ModelLoaderENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((void *)this + 105);
  }
  if (*((char *)a2 + 879) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 856), *((const std::string::value_type **)a2 + 107), *((void *)a2 + 108));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 856);
    *((void *)this + 109) = *((void *)a2 + 109);
    *(_OWORD *)((char *)this + 856) = v10;
  }
  *((void *)this + 112) = 0;
  *((_OWORD *)this + 55) = 0u;
  quasar::SpeechModelInfo::SpeechModelInfo((std::string *)((char *)this + 904), (const quasar::SystemConfig *)((char *)a2 + 904));
  {
    operator new();
  }
  if (a4) {
    uint64_t v11 = (const void ***)((char *)a2 + 1176);
  }
  else {
    uint64_t v11 = (const void ***)quasar::maybeReturnMap<std::string,BOOL *>(std::map<std::string,BOOL *> const&,BOOL)::emptyMap;
  }
  std::map<std::string,BOOL *>::map[abi:ne180100]((uint64_t *)this + 147, v11);
  {
    operator new();
  }
  if (a4) {
    unint64_t v12 = (const void ***)((char *)a2 + 1200);
  }
  else {
    unint64_t v12 = (const void ***)quasar::maybeReturnMap<std::string,int *>(std::map<std::string,int *> const&,BOOL)::emptyMap;
  }
  std::map<std::string,int *>::map[abi:ne180100]((uint64_t *)this + 150, v12);
  {
    operator new();
  }
  if (a4) {
    int v13 = (const void ***)((char *)a2 + 1224);
  }
  else {
    int v13 = (const void ***)quasar::maybeReturnMap<std::string,unsigned int *>(std::map<std::string,unsigned int *> const&,BOOL)::emptyMap;
  }
  std::map<std::string,unsigned int *>::map[abi:ne180100]((uint64_t *)this + 153, v13);
  {
    operator new();
  }
  if (a4) {
    uint64_t v14 = (const void ***)((char *)a2 + 1248);
  }
  else {
    uint64_t v14 = (const void ***)quasar::maybeReturnMap<std::string,long long *>(std::map<std::string,long long *> const&,BOOL)::emptyMap;
  }
  std::map<std::string,long long *>::map[abi:ne180100]((uint64_t *)this + 156, v14);
  {
    operator new();
  }
  if (a4) {
    uint64_t v15 = (const void ***)((char *)a2 + 1272);
  }
  else {
    uint64_t v15 = (const void ***)quasar::maybeReturnMap<std::string,float *>(std::map<std::string,float *> const&,BOOL)::emptyMap;
  }
  std::map<std::string,float *>::map[abi:ne180100]((uint64_t *)this + 159, v15);
  {
    operator new();
  }
  if (a4) {
    int v16 = (const void ***)((char *)a2 + 1296);
  }
  else {
    int v16 = (const void ***)quasar::maybeReturnMap<std::string,double *>(std::map<std::string,double *> const&,BOOL)::emptyMap;
  }
  std::map<std::string,double *>::map[abi:ne180100]((uint64_t *)this + 162, v16);
  {
    operator new();
  }
  if (a4) {
    int v17 = (const void ***)((char *)a2 + 1320);
  }
  else {
    int v17 = (const void ***)quasar::maybeReturnMap<std::string,std::string*>(std::map<std::string,std::string*> const&,BOOL)::emptyMap;
  }
  std::map<std::string,std::string*>::map[abi:ne180100]((uint64_t *)this + 165, v17);
  {
    operator new();
  }
  if (a4) {
    int v18 = (const void ***)((char *)a2 + 1344);
  }
  else {
    int v18 = (const void ***)quasar::maybeReturnMap<std::string,std::vector<std::string> *>(std::map<std::string,std::vector<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::string> *>>> const&,BOOL)::emptyMap;
  }
  std::map<std::string,std::vector<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::string> *>>>::map[abi:ne180100]((uint64_t *)this + 168, v18);
  {
    operator new();
  }
  if (a4) {
    int v19 = (const void ***)((char *)a2 + 1368);
  }
  else {
    int v19 = (const void ***)quasar::maybeReturnMap<std::string,std::vector<std::pair<std::string,std::string>> *>(std::map<std::string,std::vector<std::pair<std::string,std::string>> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::pair<std::string,std::string>> *>>> const&,BOOL)::emptyMap;
  }
  std::map<std::string,std::vector<std::pair<std::string,std::string>> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::pair<std::string,std::string>> *>>>::map[abi:ne180100]((uint64_t *)this + 171, v19);
  {
    operator new();
  }
  if (a4) {
    int v20 = (const void ***)((char *)a2 + 1392);
  }
  else {
    int v20 = (const void ***)quasar::maybeReturnMap<std::string,std::unordered_map<std::string,std::string> *>(std::map<std::string,std::unordered_map<std::string,std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::string,std::string> *>>> const&,BOOL)::emptyMap;
  }
  std::map<std::string,std::unordered_map<std::string,std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::string,std::string> *>>>::map[abi:ne180100]((uint64_t *)this + 174, v20);
  {
    operator new();
  }
  if (a4) {
    uint64_t v21 = (const void ***)((char *)a2 + 1416);
  }
  else {
    uint64_t v21 = (const void ***)quasar::maybeReturnMap<std::string,std::unordered_set<std::string> *>(std::map<std::string,std::unordered_set<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_set<std::string> *>>> const&,BOOL)::emptyMap;
  }
  std::map<std::string,std::unordered_set<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_set<std::string> *>>>::map[abi:ne180100]((uint64_t *)this + 177, v21);
  {
    operator new();
  }
  if (a4) {
    uint64_t v22 = (const void ***)((char *)a2 + 1440);
  }
  else {
    uint64_t v22 = (const void ***)quasar::maybeReturnMap<std::string,quasar::filesystem::Path *>(std::map<std::string,quasar::filesystem::Path *> const&,BOOL)::emptyMap;
  }
  std::map<std::string,quasar::filesystem::Path *>::map[abi:ne180100]((uint64_t *)this + 180, v22);
  {
    operator new();
  }
  if (a4) {
    uint64_t v23 = (const void ***)((char *)a2 + 1464);
  }
  else {
    uint64_t v23 = (const void ***)quasar::maybeReturnMap<std::string,quasar::SystemConfig::Version>(std::map<std::string,quasar::SystemConfig::Version> const&,BOOL)::emptyMap;
  }
  std::map<std::string,quasar::SystemConfig::Version>::map[abi:ne180100]((uint64_t *)this + 183, v23);
  {
    operator new();
  }
  if (a4) {
    int v24 = (const void ***)((char *)a2 + 1488);
  }
  else {
    int v24 = (const void ***)quasar::maybeReturnMap<std::string,quasar::SystemConfig::Version>(std::map<std::string,quasar::SystemConfig::Version> const&,BOOL)::emptyMap;
  }
  std::map<std::string,quasar::SystemConfig::Version>::map[abi:ne180100]((uint64_t *)this + 186, v24);
  {
    operator new();
  }
  if (a4) {
    int v25 = (const void ***)((char *)a2 + 1512);
  }
  else {
    int v25 = (const void ***)quasar::maybeReturnMap<std::string,std::set<std::string>>(std::map<std::string,std::set<std::string>> const&,BOOL)::emptyMap;
  }
  std::map<std::string,std::set<std::string>>::map[abi:ne180100]((uint64_t *)this + 189, v25);
  *((_DWORD *)this + 384) = *((_DWORD *)a2 + 384);
  return this;
}

void sub_1B1E33BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, quasar::SpeechModelInfo *a20,quasar::SystemConfig::SystemConfigInfo *a21)
{
  std::__tree<std::string>::destroy(v23, *(char **)(v21 + 1496));
  std::__tree<std::string>::destroy(v22, *(char **)(v21 + 1472));
  std::__tree<std::string>::destroy(v27, *(char **)(v21 + 1448));
  std::__tree<std::string>::destroy(v26, *(char **)(v21 + 1424));
  std::__tree<std::string>::destroy(v25, *(char **)(v21 + 1400));
  std::__tree<std::string>::destroy(v24, *(char **)(v21 + 1376));
  std::__tree<std::string>::destroy(a10, *(char **)(v21 + 1352));
  std::__tree<std::string>::destroy(a11, *(char **)(v21 + 1328));
  std::__tree<std::string>::destroy(a12, *(char **)(v21 + 1304));
  std::__tree<std::string>::destroy(a13, *(char **)(v21 + 1280));
  std::__tree<std::string>::destroy(a14, *(char **)(v21 + 1256));
  std::__tree<std::string>::destroy(a16, *(char **)(v21 + 1232));
  std::__tree<std::string>::destroy(a18, *(char **)(v21 + 1208));
  std::__tree<std::string>::destroy(a19, *(char **)(v21 + 1184));
  quasar::SpeechModelInfo::~SpeechModelInfo(a20);
  if (*(char *)(v21 + 903) < 0) {
    operator delete(*(void **)(v21 + 880));
  }
  if (*(char *)(v21 + 879) < 0) {
    operator delete(*a15);
  }
  int v29 = *(std::__shared_weak_count **)(v21 + 848);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*(char *)(v21 + 839) < 0) {
    operator delete(*a17);
  }
  quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo(a21);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v21);
  _Unwind_Resume(a1);
}

void sub_1B1E33E40()
{
}

void sub_1B1E33E48()
{
}

void sub_1B1E33E50()
{
}

void sub_1B1E33E58()
{
}

void sub_1B1E33E60()
{
}

void sub_1B1E33E68()
{
}

void sub_1B1E33E70()
{
}

void sub_1B1E33E78()
{
}

void sub_1B1E33E80()
{
}

void sub_1B1E33E88()
{
}

void sub_1B1E33E90()
{
}

void sub_1B1E33E98()
{
}

double quasar::SystemConfig::Version::Version(quasar::SystemConfig::Version *this)
{
  double result = NAN;
  *(void *)this = -1;
  return result;
}

_DWORD *quasar::SystemConfig::Version::Version(_DWORD *this, int a2, int a3)
{
  *this = a2;
  this[1] = a3;
  return this;
}

BOOL quasar::SystemConfig::Version::operator<(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (*a1 == *a2) {
    return a1[1] < a2[1];
  }
  return 0;
}

BOOL quasar::SystemConfig::Version::operator>(_DWORD *a1, _DWORD *a2)
{
  if (*a2 < *a1) {
    return 1;
  }
  if (*a2 == *a1) {
    return a2[1] < a1[1];
  }
  return 0;
}

BOOL quasar::SystemConfig::Version::operator>=(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0;
  }
  if (*a1 == *a2) {
    return a1[1] >= a2[1];
  }
  return 1;
}

uint64_t quasar::SystemConfig::SystemConfigInfoCache::SingletonInstance(quasar::SystemConfig::SystemConfigInfoCache *this)
{
  {
    operator new();
  }
  return quasar::SystemConfig::SystemConfigInfoCache::SingletonInstance(void)::singletonInstance;
}

void sub_1B1E33FDC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C40D51851D7);
  _Unwind_Resume(a1);
}

quasar::SystemConfig::SystemConfigInfoCache *quasar::SystemConfig::SystemConfigInfoCache::SystemConfigInfoCache(quasar::SystemConfig::SystemConfigInfoCache *this, uint64_t a2)
{
  *(void *)this = 850045863;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  quasar::SystemConfig::SystemConfigInfoCache::reset((std::mutex *)this, a2);
  return this;
}

void sub_1B1E3405C(_Unwind_Exception *a1)
{
  std::unique_ptr<kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>>::reset[abi:ne180100](&v1[1].__m_.__sig, 0);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void quasar::SystemConfig::SystemConfigInfoCache::reset(std::mutex *this, uint64_t a2)
{
  std::mutex::lock(this);
  if (a2) {
    operator new();
  }
  uint64_t v4 = 0;
  std::unique_ptr<kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>>::reset[abi:ne180100](&this[1].__m_.__sig, 0);
  std::unique_ptr<kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>>::reset[abi:ne180100](&v4, 0);
  *(void *)this[1].__m_.__opaque = 0;
  std::mutex::unlock(this);
}

void sub_1B1E34124(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C4098A769C9);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::SystemConfig::SystemConfigInfoCache::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex::lock((std::mutex *)a1);
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6
    && kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Get(v6, a2, a3))
  {
    ++*(void *)(a1 + 72);
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::mutex::unlock((std::mutex *)a1);
  return v7;
}

void sub_1B1E341C8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  BOOL v4 = kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Get(a1, a2, &v6);
  if (v4) {
    quasar::SystemConfig::SystemConfigInfo::operator=(a3, v6);
  }
  return v4;
}

void quasar::SystemConfig::SystemConfigInfoCache::putIfNotExist(std::mutex *a1, std::string::size_type a2, uint64_t a3)
{
  std::mutex::lock(a1);
  if (a1[1].__m_.__sig)
  {
    quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo((quasar::SystemConfig::SystemConfigInfo *)v7);
    if (!kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Get(a1[1].__m_.__sig, a2, (uint64_t)v7))
    {
      sig = (unint64_t *)a1[1].__m_.__sig;
      if (*sig) {
        kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Insert(std::string const&,quasar::SystemConfig::SystemConfigInfo const&)::{lambda(quasar::SystemConfig::SystemConfigInfo&)#1}>(sig, a2, a3);
      }
    }
    quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo((quasar::SystemConfig::SystemConfigInfo *)v7);
  }
  std::mutex::unlock(a1);
}

void sub_1B1E342B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t quasar::SystemConfig::getConfigFileVersion(quasar::SystemConfig *this)
{
  if (*((_DWORD *)this + 384) != 1)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return *((void *)this + 4);
}

uint64_t quasar::SystemConfig::getModelLoader(quasar::SystemConfig *this)
{
  return *((void *)this + 105);
}

uint64_t quasar::SystemConfig::getModelLoaderPtr(quasar::SystemConfig *this)
{
  return (uint64_t)this + 840;
}

std::string *quasar::SystemConfig::setPrefix(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 34, a2);
}

void quasar::SystemConfig::getPrefix(quasar::SystemConfig *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 839) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 102), *((void *)this + 103));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 51);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 104);
  }
}

void quasar::SystemConfig::~SystemConfig(quasar::SystemConfig *this)
{
  *(void *)this = &unk_1F0A523A0;
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy((uint64_t)this + 1512, *((void **)this + 190));
  std::__tree<std::string>::destroy((uint64_t)this + 1488, *((char **)this + 187));
  std::__tree<std::string>::destroy((uint64_t)this + 1464, *((char **)this + 184));
  std::__tree<std::string>::destroy((uint64_t)this + 1440, *((char **)this + 181));
  std::__tree<std::string>::destroy((uint64_t)this + 1416, *((char **)this + 178));
  std::__tree<std::string>::destroy((uint64_t)this + 1392, *((char **)this + 175));
  std::__tree<std::string>::destroy((uint64_t)this + 1368, *((char **)this + 172));
  std::__tree<std::string>::destroy((uint64_t)this + 1344, *((char **)this + 169));
  std::__tree<std::string>::destroy((uint64_t)this + 1320, *((char **)this + 166));
  std::__tree<std::string>::destroy((uint64_t)this + 1296, *((char **)this + 163));
  std::__tree<std::string>::destroy((uint64_t)this + 1272, *((char **)this + 160));
  std::__tree<std::string>::destroy((uint64_t)this + 1248, *((char **)this + 157));
  std::__tree<std::string>::destroy((uint64_t)this + 1224, *((char **)this + 154));
  std::__tree<std::string>::destroy((uint64_t)this + 1200, *((char **)this + 151));
  std::__tree<std::string>::destroy((uint64_t)this + 1176, *((char **)this + 148));
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SystemConfig *)((char *)this + 904));
  if (*((char *)this + 903) < 0) {
    operator delete(*((void **)this + 110));
  }
  if (*((char *)this + 879) < 0) {
    operator delete(*((void **)this + 107));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 106);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 839) < 0) {
    operator delete(*((void **)this + 102));
  }
  quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo((quasar::SystemConfig *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  quasar::SystemConfig::~SystemConfig(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::operator<<(uint64_t a1)
{
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)".", 1);
  std::ostream::operator<<();
  return a1;
}

void quasar::SystemConfig::makePathAbsolute(quasar::SystemConfig *a1, uint64_t a2, int a3)
{
  if (*((_DWORD *)a1 + 384) != 1)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v7, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v7);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    quasar::filesystem::Path::makeAbsolute((uint64_t)a1 + 40, a2, (std::string *)&v7);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v7;
    *(void *)(a2 + 16) = v8;
    quasar::SystemConfig::checkPathExists(a1, a2, a3);
  }
}

void quasar::SystemConfig::checkPathExists(quasar::SystemConfig *a1, uint64_t a2, int a3)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v6 = (const char *)a2;
  }
  else {
    uint64_t v6 = *(const char **)a2;
  }
  if (stat(v6, &v41))
  {
    uint64_t ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion(a1);
    if ((int)ConfigFileVersion >= 36)
    {
      BOOL v8 = ConfigFileVersion == 36 && ConfigFileVersion < 0;
      if (!v8 && a3)
      {
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v24 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
        long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Failed to read file. ", 21);
        long long v19 = __error();
        long long v20 = strerror(*v19);
        size_t v21 = strlen(v20);
        long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
        long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", path: ", 8);
        std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, a2);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v24);
      }
    }
    if (quasar::gLogLevel >= 2)
    {
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
      long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Failed to read file. ", 21);
      long long v10 = __error();
      long long v11 = strerror(*v10);
      size_t v12 = strlen(v11);
      long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
      long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", path: ", 8);
      int v15 = *(char *)(a2 + 23);
      if (v15 >= 0) {
        uint64_t v16 = a2;
      }
      else {
        uint64_t v16 = *(void *)a2;
      }
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v17 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v24);
    }
  }
}

void sub_1B1E3482C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 *quasar::SystemConfig::makePathAbsoluteInternal(unsigned __int8 *result, uint64_t a2, int a3)
{
  if (*((_DWORD *)result + 384) != 1)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v8, "Config path is empty. Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    uint64_t v6 = result;
    quasar::filesystem::Path::makeAbsolute((uint64_t)(result + 40), a2, (std::string *)&v8);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v8;
    *(void *)(a2 + 16) = v9;
    uint64_t v7 = 768;
    if (a3) {
      uint64_t v7 = 728;
    }
    return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v6[v7 + 8], (unsigned __int8 *)a2, a2);
  }
  return result;
}

void quasar::SystemConfig::checkAllAbsolutePathsExist(quasar::SystemConfig *this)
{
  for (char i = (void *)*((void *)this + 99); i; char i = (void *)*i)
    quasar::SystemConfig::checkPathExists(this, (uint64_t)(i + 2), 0);
  for (int j = (void *)*((void *)this + 94); j; int j = (void *)*j)
    quasar::SystemConfig::checkPathExists(this, (uint64_t)(j + 2), 1);
}

void quasar::SystemConfig::findCommentNodes(uint64_t a1, quasar::PTree *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = quasar::PTree::begin(a2);
  uint64_t v9 = quasar::PTree::end(a2);
  if (v8 != v9)
  {
    uint64_t v10 = v9;
    do
    {
      uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a3 + 8);
      }
      if (v11)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a3, (const void **)v8, (uint64_t)&__p);
      }
      else if (*(char *)(v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
      }
      else
      {
        long long v12 = *(_OWORD *)v8;
        __p.__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      if (!std::string::compare((const std::string *)v8, 0, 2uLL, "__"))
      {
        unint64_t v13 = a4[1];
        if (v13 >= a4[2])
        {
          uint64_t v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (long long *)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)a4[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v13 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v13 = v14;
          }
          uint64_t v15 = v13 + 24;
          a4[1] = v13 + 24;
        }
        a4[1] = v15;
      }
      else if ((quasar::PTree::isLeaf((quasar::PTree *)(v8 + 24)) & 1) == 0)
      {
        quasar::SystemConfig::findCommentNodes(a1, v8 + 24, &__p, a4);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 += 88;
    }
    while (v8 != v10);
  }
}

void sub_1B1E34B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 8) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::removeCommentNodes(quasar::SystemConfig *this)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = (char *)this + 72;
  quasar::SystemConfig::findCommentNodes((uint64_t)this, (quasar::SystemConfig *)((char *)this + 72), (uint64_t)__p, &v26);
  if (SBYTE7(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = v26;
  for (uint64_t i = v27; v3 != i; v3 += 24)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"remove child: ", 14);
      int v6 = *(char *)(v3 + 23);
      if (v6 >= 0) {
        uint64_t v7 = v3;
      }
      else {
        uint64_t v7 = *(void *)v3;
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v8 = *(void *)(v3 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    quasar::PTree::erase((uint64_t)v2, (unsigned __int8 *)v3);
  }
  __p[0] = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1E34C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v14 - 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::SystemConfig::overrideValue(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::splitStringSimple(a2, (uint64_t *)__p, (unint64_t)&v4);
}

void sub_1B1E351D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 105) < 0) {
    operator delete(*(void **)(v14 - 128));
  }
  if (*(char *)(v14 - 73) < 0) {
    operator delete(*(void **)(v14 - 96));
  }
  std::string __p = (void *)(v14 - 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::SystemConfig::readJsonFile(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, char a6)
{
  quasar::SystemConfig::simpleReadJson((quasar::SystemConfig *)a1, a2, a4, a6);
  if (*(_DWORD *)(a1 + 728))
  {
    quasar::SystemConfig::getModelVersion((quasar::SystemConfig *)a1, &__str);
    std::string::operator=((std::string *)(a1 + 856), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)(a1 + 40), &__str);
    uint64_t v9 = (void **)(a1 + 880);
    if (*(char *)(a1 + 903) < 0) {
      operator delete(*v9);
    }
    *(_OWORD *)uint64_t v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(void *)(a1 + 896) = *((void *)&__str.__r_.__value_.__l + 2);
    if (*(_DWORD *)(a1 + 728) == 1)
    {
      uint64_t SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)a1);
      quasar::SpeechModelInfo::operator=(a1 + 904, SpeechModelInfo);
    }
  }
  uint64_t v11 = quasar::SystemConfig::checkConfigFileVersion((quasar::SystemConfig *)a1);
  uint64_t v12 = v11;
  if (v11 == 2)
  {
    *(_DWORD *)(a1 + 1536) = 0;
  }
  else
  {
    unsigned int v43 = v11;
    unsigned __int8 v44 = a3;
    uint64_t v14 = *a3;
    for (uint64_t i = a3[1]; v14 != i; v14 += 24)
    {
      quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&__str);
      long long v57 = 0u;
      long long v58 = 0u;
      LODWORD(v59) = 1065353216;
      quasar::SystemConfig::simpleReadJson((quasar::SystemConfig *)&__str, v14, (uint64_t)&v57, 0);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v57);
      uint64_t ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)&__str);
      if ((int)ConfigFileVersion < 14 || ConfigFileVersion == 14 && SHIDWORD(ConfigFileVersion) <= 1)
      {
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long __n = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v57 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
        long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"override config version << ", 27);
        *(void *)&long long v48 = quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)&__str);
        quasar::SystemConfig::Version::str((quasar::SystemConfig::Version *)&v48, (std::string *)v54);
        if (v54[23] >= 0) {
          long long v36 = v54;
        }
        else {
          long long v36 = *(unsigned char **)v54;
        }
        if (v54[23] >= 0) {
          uint64_t v37 = v54[23];
        }
        else {
          uint64_t v37 = *(void *)&v54[8];
        }
        long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
        long long v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" is incompatible with main config version: ", 43);
        v55[0] = (void *)quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)a1);
        quasar::SystemConfig::Version::str((quasar::SystemConfig::Version *)v55, (std::string *)v51);
        if ((SBYTE7(v52) & 0x80u) == 0) {
          long long v40 = v51;
        }
        else {
          long long v40 = (void **)v51[0];
        }
        if ((SBYTE7(v52) & 0x80u) == 0) {
          uint64_t v41 = BYTE7(v52);
        }
        else {
          uint64_t v41 = (uint64_t)v51[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
        if (SBYTE7(v52) < 0) {
          operator delete(v51[0]);
        }
        if ((v54[23] & 0x80000000) != 0) {
          operator delete(*(void **)v54);
        }
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v57);
      }
      if (v75 != *(_DWORD *)(a1 + 728))
      {
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long __n = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v57 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"override config type << ", 24);
        double v42 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" is not the same as main config type: ", 38);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v57);
      }
      std::string::basic_string[abi:ne180100]<0>(v55, "model-info.version");
      if (*(_DWORD *)(a1 + 728) != 1)
      {
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long __n = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v57 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"We only support override of speech model.", 41);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v57);
      }
      long long v16 = (const quasar::SpeechModelInfo *)quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)&__str);
      quasar::SpeechModelInfo::SpeechModelInfo((std::string *)&v57, v16);
      uint64_t v17 = HIBYTE(__n);
      if (__n >= 0) {
        uint64_t v18 = HIBYTE(__n);
      }
      else {
        uint64_t v18 = __n;
      }
      uint64_t v19 = *(unsigned __int8 *)(a1 + 279);
      int v20 = (char)v19;
      if ((v19 & 0x80u) != 0) {
        uint64_t v19 = *(void *)(a1 + 264);
      }
      if (v18 != v19) {
        goto LABEL_53;
      }
      if (v20 >= 0) {
        long long v21 = (unsigned __int8 *)(a1 + 256);
      }
      else {
        long long v21 = *(unsigned __int8 **)(a1 + 256);
      }
      if ((HIBYTE(__n) & 0x80) != 0)
      {
        if (memcmp(*((const void **)&v64 + 1), v21, __n)) {
          goto LABEL_53;
        }
      }
      else if (HIBYTE(__n))
      {
        long long v22 = (unsigned __int8 *)&v64 + 8;
        while (*v22 == *v21)
        {
          ++v22;
          ++v21;
          if (!--v17) {
            goto LABEL_32;
          }
        }
LABEL_53:
        memset(v54, 0, sizeof(v54));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
        uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"override config language [", 26);
        if (__n >= 0) {
          uint64_t v27 = (char *)&v64 + 8;
        }
        else {
          uint64_t v27 = (char *)*((void *)&v64 + 1);
        }
        if (__n >= 0) {
          uint64_t v28 = HIBYTE(__n);
        }
        else {
          uint64_t v28 = __n;
        }
        long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
        long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] is not the same as main config langauge [", 43);
        int v31 = *(char *)(a1 + 279);
        if (v31 >= 0) {
          uint64_t v32 = a1 + 256;
        }
        else {
          uint64_t v32 = *(void *)(a1 + 256);
        }
        if (v31 >= 0) {
          uint64_t v33 = *(unsigned __int8 *)(a1 + 279);
        }
        else {
          uint64_t v33 = *(void *)(a1 + 264);
        }
        long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"]", 1);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v54);
      }
LABEL_32:
      quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SpeechModelInfo *)&v57);
      *(_OWORD *)uint64_t v51 = 0u;
      long long v52 = 0u;
      int v53 = 1065353216;
      long long v48 = 0u;
      long long v49 = 0u;
      int v50 = 1065353216;
      quasar::SystemConfig::getLeafProperties((uint64_t)&__str, 1, (uint64_t)v51, &v48);
      quasar::SystemConfig::getModelVersion((quasar::SystemConfig *)&__str, (std::string *)v54);
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const,0>((std::string *)&v57, (long long *)v55, (long long *)v54);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>((uint64_t)v51, (unsigned __int8 *)&v57, (uint64_t)&v57);
      if (SHIBYTE(v59) < 0) {
        operator delete(*((void **)&v58 + 1));
      }
      if (SBYTE7(v58) < 0) {
        operator delete((void *)v57);
      }
      if ((v54[23] & 0x80000000) != 0) {
        operator delete(*(void **)v54);
      }
      for (int j = (void *)v52; j; int j = (void *)*j)
        quasar::SystemConfig::verifyOverrideValue(a1, (uint64_t)(j + 2), (uint64_t)(j + 5), a5);
      int v45 = 0;
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      for (k = (long long **)v49; k; k = (long long **)*k)
        quasar::SystemConfig::verifyOverrideValue(a1, (uint64_t)(k + 2), k + 5, (uint64_t *)&v45, a5);
      if ((void)v52)
      {
        std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)v54, (long long *)(v52 + 16));
        quasar::PTree::PTree(&v57, &v54[24]);
        quasar::SystemConfig::overrideValue(a1, (uint64_t)v54);
      }
      if (v45 != v46)
      {
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100]((std::string *)&v57, v45);
        quasar::SystemConfig::overrideValue(a1, (uint64_t)&v57);
      }
      *(void *)&long long v57 = &v45;
      std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&v48);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v51);
      if (v56 < 0) {
        operator delete(v55[0]);
      }
      quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&__str);
    }
    uint64_t v12 = v43;
    if (*v44 != v44[1]) {
      quasar::SystemConfig::readModelInfo((quasar::SystemConfig *)a1);
    }
  }
  return v12;
}

void sub_1B1E35C20()
{
}

void quasar::SystemConfig::simpleReadJson(quasar::SystemConfig *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*((_DWORD *)a1 + 384))
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "This method can be called only once throughout the lifetime of this object.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  uint64_t v8 = (quasar::filesystem *)quasar::filesystem::Path::Path(&v56, a2);
  quasar::filesystem::system_complete(v8, v22);
  quasar::filesystem::Path::normalize((quasar::filesystem::Path *)v22, __p);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)__p, &v58);
  __p[0] = &unk_1F0A51998;
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[1]);
  }
  v22[0] = &unk_1F0A51998;
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[1]);
  }
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A51998;
  if (v57 < 0) {
    operator delete((void *)v56.__r_.__value_.__l.__size_);
  }
  uint64_t v9 = *(void *)(a3 + 24);
  long long v10 = quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo((quasar::SystemConfig::SystemConfigInfo *)__p);
  if (v9
    || (uint64_t v11 = quasar::SystemConfig::SystemConfigInfoCache::SingletonInstance(v10),
        !quasar::SystemConfig::SystemConfigInfoCache::get(v11, (uint64_t)&v58, (uint64_t)__p)))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)long long v22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reading json file ", 18);
      int v16 = *(char *)(a2 + 23);
      if (v16 >= 0) {
        uint64_t v17 = a2;
      }
      else {
        uint64_t v17 = *(void *)a2;
      }
      if (v16 >= 0) {
        uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v18 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v22);
    }
    quasar::PTree::readJsonFromFile();
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)long long v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Using cache for json file ", 26);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v13 = &v58;
    }
    else {
      long long v13 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v58.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v22);
  }
  quasar::SystemConfig::SystemConfigInfo::operator=((uint64_t)a1 + 8, (long long *)__p);
  *((_DWORD *)a1 + 384) = 1;
  if (*((_DWORD *)a1 + 182) && quasar::gLogLevel >= 4)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)long long v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Config file version=", 20);
    quasar::SystemConfig::getModelVersion(a1, &v56);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v20 = &v56;
    }
    else {
      int v20 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = v56.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v22);
  }
  if ((a4 & 1) == 0) {
    quasar::SystemConfig::checkAllAbsolutePathsExist(a1);
  }
  quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo((quasar::SystemConfig::SystemConfigInfo *)__p);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
}

void quasar::SystemConfig::getModelVersion(quasar::SystemConfig *this@<X0>, std::string *a2@<X8>)
{
  if (*((_DWORD *)this + 384) != 1)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v6 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v6, "Config file must be loaded before calling this method.");
    goto LABEL_16;
  }
  int v2 = *((_DWORD *)this + 182);
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      if ((*((char *)this + 159) & 0x80000000) == 0)
      {
        uint64_t v3 = (char *)this + 136;
LABEL_8:
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
        a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
        return;
      }
      uint64_t v4 = (const std::string::value_type *)*((void *)this + 17);
      std::string::size_type v5 = *((void *)this + 18);
      goto LABEL_11;
    }
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v6 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v6, "Config file does not have model-info node.");
LABEL_16:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v6);
  }
  if ((*((char *)this + 431) & 0x80000000) == 0)
  {
    uint64_t v3 = (char *)this + 408;
    goto LABEL_8;
  }
  uint64_t v4 = (const std::string::value_type *)*((void *)this + 51);
  std::string::size_type v5 = *((void *)this + 52);
LABEL_11:
  std::string::__init_copy_ctor_external(a2, v4, v5);
}

uint64_t quasar::SystemConfig::getSpeechModelInfo(quasar::SystemConfig *this)
{
  if (*((_DWORD *)this + 384) != 1)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v3 = 0u;
    long long v4 = 0u;
    long long v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file must be loaded before calling this method.");
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 182) != 1)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v3 = 0u;
    long long v4 = 0u;
    long long v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file does not have speech model-info node.");
LABEL_6:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v2);
  }
  return (uint64_t)this + 136;
}

uint64_t quasar::SystemConfig::checkConfigFileVersion(quasar::SystemConfig *this)
{
  long long v2 = (void *)((char *)this + 32);
  int v3 = *((_DWORD *)this + 8);
  int v4 = quasar::gLogLevel;
  if (v3 == 15)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Reading version ", 16);
      long long v6 = (void *)quasar::operator<<((uint64_t)v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" as 15.0", 8);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v21);
      int v4 = quasar::gLogLevel;
    }
    *long long v2 = 15;
  }
  if (v4 >= 5)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Version of currently loaded config file: ", 41);
    long long v8 = (void *)quasar::operator<<((uint64_t)v7);
    long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" Supported config file version: ", 32);
    long long v10 = (void *)quasar::operator<<((uint64_t)v9);
    long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (minimum supported version: ", 29);
    long long v12 = (void *)quasar::operator<<((uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v21);
    int v3 = *(_DWORD *)v2;
  }
  if (v3 < 14)
  {
LABEL_8:
    if (quasar::gLogLevel >= 1)
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Config file version ", 20);
      long long v14 = (void *)quasar::operator<<((uint64_t)v13);
      long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" is lower than the minimum supported version ", 45);
      quasar::operator<<((uint64_t)v15);
LABEL_18:
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v21);
      return 2;
    }
    return 2;
  }
  if (v3 == 14)
  {
    if (*((int *)this + 9) <= 1) {
      goto LABEL_8;
    }
    return 1;
  }
  if (v3 > 0x112) {
    goto LABEL_16;
  }
  if (v3 != 274) {
    return 1;
  }
  int v16 = *((_DWORD *)this + 9);
  if (v16 >= 1)
  {
LABEL_16:
    if (quasar::gLogLevel >= 1)
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Config file version ", 20);
      long long v18 = (void *)quasar::operator<<((uint64_t)v17);
      long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" is higher than the supported version ", 38);
      quasar::operator<<((uint64_t)v19);
      goto LABEL_18;
    }
    return 2;
  }
  return v16 != 0;
}

void sub_1B1E36A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  _Unwind_Resume(a1);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) != 0;
  }
  if (a1[23])
  {
    uint64_t v6 = v2 - 1;
    do
    {
      int v8 = *a1++;
      int v7 = v8;
      int v9 = *a2++;
      BOOL v10 = v7 == v9;
      uint64_t v2 = v7 != v9;
      BOOL v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

void quasar::SystemConfig::getLeafProperties(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    LODWORD(__p) = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0) {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
    }
    else {
      std::string v10 = *(std::string *)(a1 + 80);
    }
    memset(&v11, 0, sizeof(v11));
    std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v11, *(void *)(a1 + 104), *(void *)(a1 + 112), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 3));
    char v12 = *(unsigned char *)(a1 + 128);
    std::string::basic_string[abi:ne180100]<0>(v7, "version-major");
    quasar::PTree::erase((uint64_t)&__p, (unsigned __int8 *)v7);
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "version-minor");
    quasar::PTree::erase((uint64_t)&__p, (unsigned __int8 *)v7);
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "model-info");
    quasar::PTree::erase((uint64_t)&__p, (unsigned __int8 *)v7);
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "mt-model-info");
    quasar::PTree::erase((uint64_t)&__p, (unsigned __int8 *)v7);
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    quasar::SystemConfig::getAllLeafNodesFromPtreeIf(a1, (quasar::PTree *)&__p, (std::string::size_type)v7, a3, a4);
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    quasar::PTree::~PTree((quasar::PTree *)&__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    quasar::SystemConfig::getAllLeafNodesFromPtreeIf(a1, (quasar::PTree *)(a1 + 72), (std::string::size_type)&__p, a3, a4);
    if (v10.__r_.__value_.__s.__data_[15] < 0) {
      operator delete(__p);
    }
  }
}

void sub_1B1E36D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a16);
  _Unwind_Resume(a1);
}

void sub_1B1E36D58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1E36D50);
}

void quasar::SystemConfig::verifyOverrideValue(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    quasar::SystemConfig::hasParam(a1, a2);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"parameter [", 11);
    int v7 = *(char *)(a2 + 23);
    uint64_t v8 = v7 >= 0 ? a2 : *(void *)a2;
    uint64_t v9 = v7 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
    std::string v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] was not verified of its presence in the original config. Adding/Replacing it.", 79);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v20);
    if (quasar::gLogLevel >= 4)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::string v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Config override: ", 17);
      int v12 = *(char *)(a2 + 23);
      if (v12 >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = *(void *)a2;
      }
      if (v12 >= 0) {
        uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v14 = *(void *)(a2 + 8);
      }
      long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
      int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"=", 1);
      int v17 = *(char *)(a3 + 23);
      if (v17 >= 0) {
        uint64_t v18 = a3;
      }
      else {
        uint64_t v18 = *(void *)a3;
      }
      if (v17 >= 0) {
        uint64_t v19 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v19 = *(void *)(a3 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v20);
    }
  }
}

void sub_1B1E3700C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::SystemConfig::verifyOverrideValue(uint64_t a1, uint64_t a2, long long **a3, uint64_t *a4, int a5)
{
  if (*a3 != a3[1])
  {
    if (!a5) {
      quasar::SystemConfig::hasParam(a1, a2);
    }
    if (quasar::gLogLevel >= 4)
    {
      memset(v23, 0, sizeof(v23));
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"parameter [", 11);
      int v9 = *(char *)(a2 + 23);
      if (v9 >= 0) {
        uint64_t v10 = a2;
      }
      else {
        uint64_t v10 = *(void *)a2;
      }
      if (v9 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"] was not verified of its presence in the original config. Adding/Replacing it.", 79);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3) < 2)
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,std::string&,0>(&v19, (long long *)a2, *a3);
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string,std::string,0>((uint64_t)__p, (long long *)&v19);
      unint64_t v15 = a4[1];
      if (v15 >= a4[2])
      {
        uint64_t v16 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(a4, (long long *)__p);
      }
      else
      {
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100](a4[1], (long long *)__p);
        uint64_t v16 = v15 + 88;
        a4[1] = v15 + 88;
      }
      a4[1] = v16;
      quasar::PTree::~PTree((quasar::PTree *)((char *)v23 + 8));
      if (SBYTE7(v23[0]) < 0) {
        operator delete(__p[0]);
      }
      if (v21 < 0) {
        operator delete(v20);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      quasar::PTree::PTree((quasar::PTree *)&v19);
      uint64_t v14 = *a3;
      uint64_t v13 = a3[1];
      while (v14 != v13)
      {
        quasar::PTree::PTree(__p, v14);
        quasar::PTree::addChild((quasar::PTree *)&v19, (const quasar::PTree *)__p);
        quasar::PTree::~PTree((quasar::PTree *)__p);
        uint64_t v14 = (long long *)((char *)v14 + 24);
      }
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string const&,quasar::PTree&,0>((std::string *)__p, (long long *)a2, (uint64_t)&v19);
      unint64_t v17 = a4[1];
      if (v17 >= a4[2])
      {
        uint64_t v18 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(a4, (long long *)__p);
      }
      else
      {
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100](a4[1], (long long *)__p);
        uint64_t v18 = v17 + 88;
        a4[1] = v17 + 88;
      }
      a4[1] = v18;
      quasar::PTree::~PTree((quasar::PTree *)((char *)v23 + 8));
      if (SBYTE7(v23[0]) < 0) {
        operator delete(__p[0]);
      }
      quasar::PTree::~PTree((quasar::PTree *)&v19);
    }
  }
}

void quasar::SystemConfig::readModelInfo(quasar::SystemConfig *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "model-info");
  quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
}

uint64_t quasar::SystemConfig::SystemConfigInfo::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)((char *)a2 + 40));
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)a2 + 3);
  if ((long long *)a1 != a2) {
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(a1 + 96, *((std::string **)a2 + 12), *((std::string **)a2 + 13), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3));
  }
  *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
  quasar::SpeechModelInfo::operator=(a1 + 128, a2 + 8);
  quasar::TranslationModelInfo::operator=(a1 + 400, a2 + 25);
  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__move_assign(a1 + 672, (void *)a2 + 84);
  std::__tree<std::string>::__move_assign(a1 + 696, (void *)a2 + 87);
  *(_DWORD *)(a1 + 720) = *((_DWORD *)a2 + 180);
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign(a1 + 728, (uint64_t *)a2 + 91);
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign(a1 + 768, (uint64_t *)a2 + 96);
  return a1;
}

void quasar::SystemConfig::readVersion(quasar::SystemConfig *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "version-major");
  quasar::SystemConfig::hasParam((uint64_t)this, (uint64_t)__p);
}

void sub_1B1E3777C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 33) < 0) {
    operator delete(*(void **)(v14 - 56));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::readHybridClientConfigs(quasar::SystemConfig *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "hybrid-client-configs");
  quasar::SystemConfig::hasParam((uint64_t)this, (uint64_t)__p);
}

void sub_1B1E37B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::absolutizeFilePathInPtree(unsigned __int8 *a1, quasar::PTree *a2, const void **a3)
{
  if (!quasar::PTree::isLeaf(a2))
  {
    uint64_t v7 = quasar::PTree::begin(a2);
    uint64_t v8 = quasar::PTree::end(a2);
    if (v7 == v8) {
      return;
    }
    uint64_t v9 = v8;
    while (1)
    {
      if (*(char *)(v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
      }
      else
      {
        long long v10 = *(_OWORD *)v7;
        v27.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v10;
      }
      if (*((char *)a3 + 23) >= 0) {
        size_t v11 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v11 = (size_t)a3[1];
      }
      if (v11)
      {
        std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v27.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          std::string::basic_string[abi:ne180100]((uint64_t)&v24, v11 + 1);
          if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v13 = &v24;
          }
          else {
            uint64_t v13 = (std::string *)v24.__r_.__value_.__r.__words[0];
          }
          if (*((char *)a3 + 23) >= 0) {
            uint64_t v14 = a3;
          }
          else {
            uint64_t v14 = *a3;
          }
          memmove(v13, v14, v11);
          *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v11) = 46;
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v15 = &v27;
          }
          else {
            unint64_t v15 = (std::string *)v27.__r_.__value_.__r.__words[0];
          }
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v16 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v16 = v27.__r_.__value_.__l.__size_;
          }
          unint64_t v17 = std::string::append(&v24, (const std::string::value_type *)v15, v16);
          long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          int64_t v26 = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          quasar::SystemConfig::absolutizeFilePathInPtree(a1, v7 + 24, __p);
          if (SHIBYTE(v26) < 0) {
            operator delete(__p[0]);
          }
          if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_50;
          }
          std::string v19 = (void *)v24.__r_.__value_.__r.__words[0];
          goto LABEL_49;
        }
        if ((quasar::PTree::isLeaf((quasar::PTree *)(v7 + 24)) & 1) == 0)
        {
          if (*((char *)a3 + 23) >= 0) {
            size_t v21 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v21 = (size_t)a3[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v21 + 2);
          if (v26 >= 0) {
            long long v22 = __p;
          }
          else {
            long long v22 = (void **)__p[0];
          }
          if (v21)
          {
            if (*((char *)a3 + 23) >= 0) {
              long long v23 = a3;
            }
            else {
              long long v23 = *a3;
            }
            memmove(v22, v23, v21);
          }
          strcpy((char *)v22 + v21, "[]");
          quasar::SystemConfig::absolutizeFilePathInPtree(a1, v7 + 24, __p);
          if ((SHIBYTE(v26) & 0x80000000) == 0) {
            goto LABEL_50;
          }
          std::string v19 = __p[0];
LABEL_49:
          operator delete(v19);
          goto LABEL_50;
        }
        uint64_t String = quasar::PTree::getString((quasar::PTree *)(v7 + 24));
        quasar::SystemConfig::absolutizeFilePaths(a1, (uint64_t *)a3, String);
      }
      else
      {
        quasar::SystemConfig::absolutizeFilePathInPtree(a1, v7 + 24, &v27);
      }
LABEL_50:
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      v7 += 88;
      if (v7 == v9) {
        return;
      }
    }
  }
  uint64_t v6 = quasar::PTree::getString(a2);
  quasar::SystemConfig::absolutizeFilePaths(a1, (uint64_t *)a3, v6);
}

void sub_1B1E37EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::hasParam(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 1536) == 1) {
    quasar::PTree::getStringOptional(a1 + 72, a2);
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Config file must be loaded before calling this method (state = ", 63);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, ").");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

uint64_t quasar::SystemConfig::getMainSpeechModelInfo(quasar::SystemConfig *this)
{
  if (*((_DWORD *)this + 384) != 1)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v3 = 0u;
    long long v4 = 0u;
    long long v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file must be loaded before calling this method.");
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 182) != 1)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v3 = 0u;
    long long v4 = 0u;
    long long v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file does not have speech model-info node.");
LABEL_6:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v2);
  }
  return (uint64_t)this + 904;
}

uint64_t quasar::SystemConfig::getTranslationModelInfo(quasar::SystemConfig *this)
{
  if (*((_DWORD *)this + 384) != 1)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v3 = 0u;
    long long v4 = 0u;
    long long v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file must be loaded before calling this method.");
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 182) != 2)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v3 = 0u;
    long long v4 = 0u;
    long long v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file does not have mt-model-info node.");
LABEL_6:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v2);
  }
  return (uint64_t)this + 408;
}

uint64_t quasar::SystemConfig::getHybridClientConfigs(quasar::SystemConfig *this)
{
  if (*((_DWORD *)this + 384) != 1)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return (uint64_t)this + 680;
}

void quasar::SystemConfig::getMainModelVersion(quasar::SystemConfig *this@<X0>, std::string *a2@<X8>)
{
  if (*((_DWORD *)this + 384) != 1)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v4 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v4, "Config file must be loaded before calling this method.");
    goto LABEL_10;
  }
  if (!*((_DWORD *)this + 182))
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v4 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v4, "Config file does not have model-info node.");
LABEL_10:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v4);
  }
  if (*((char *)this + 879) < 0)
  {
    long long v2 = (const std::string::value_type *)*((void *)this + 107);
    std::string::size_type v3 = *((void *)this + 108);
    std::string::__init_copy_ctor_external(a2, v2, v3);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 856);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 109);
  }
}

void quasar::SystemConfig::getLmeAssetPath(quasar::SystemConfig *this@<X0>, std::string *a2@<X8>)
{
  if (*((_DWORD *)this + 384) != 1)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v4 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v4, "Config file must be loaded before calling this method.");
    goto LABEL_10;
  }
  if (!*((_DWORD *)this + 182))
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v4 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v4, "Config file does not have model-info node.");
LABEL_10:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v4);
  }
  if (*((char *)this + 903) < 0)
  {
    long long v2 = (const std::string::value_type *)*((void *)this + 110);
    std::string::size_type v3 = *((void *)this + 111);
    std::string::__init_copy_ctor_external(a2, v2, v3);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 55);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 112);
  }
}

void quasar::SystemConfig::getPtreeOptional(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 1536) == 1)
  {
    uint64_t v2 = a1 + 72;
    quasar::PTree::getChildOptional(v2, a2);
  }
  memset(v3, 0, sizeof(v3));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Config file must be loaded before calling this method.");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
}

void quasar::SystemConfig::readSpeechModelInfo(quasar::SystemConfig *this)
{
  memset(v3, 0, sizeof(v3));
  long long v4 = v5;
  v5[0] = 0;
  v6[0] = 0;
  v6[1] = 0;
  v5[1] = 0;
  v5[2] = v6;
  v6[2] = v7;
  v7[0] = 0;
  long long v11 = 0u;
  long long v10 = 0u;
  long long v9 = 0u;
  long long v8 = 0u;
  v7[1] = 0;
  uint64_t v12 = 0;
  v14[0] = 0;
  long long v13 = v14;
  v15[1] = 0;
  v15[0] = 0;
  v14[1] = 0;
  float v14[2] = v15;
  v16[1] = 0;
  v16[0] = 0;
  v15[2] = v16;
  std::string::basic_string[abi:ne180100]<0>(__p, "model-info.version");
  quasar::PTree::getString((uint64_t)this + 72, (uint64_t)__p);
}

void sub_1B1E391E8()
{
}

void quasar::SystemConfig::readTranslationModelInfo(quasar::SystemConfig *this)
{
  memset(&v3, 0, sizeof(v3));
  v5[1] = 0;
  v5[0] = 0;
  long long v4 = v5;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v9 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  int v10 = 1065353216;
  int v13 = 1065353216;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  int v16 = 1065353216;
  int v19 = 1065353216;
  long long v20 = 0u;
  long long v21 = 0u;
  int v22 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "mt-model-info.version");
  quasar::PTree::getString((uint64_t)this + 72, (uint64_t)__p);
}

void sub_1B1E3B19C()
{
}

uint64_t quasar::SystemConfig::enforceMinVersion(uint64_t result, int a2, int a3, uint64_t a4)
{
  v21[0] = a2;
  v21[1] = a3;
  int v5 = *(_DWORD *)(result + 32);
  if (v5 < a2 || v5 == a2 && *(_DWORD *)(result + 36) < a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    quasar::SystemConfig::Version::str((quasar::SystemConfig::Version *)v21, &v16);
    long long v7 = std::string::insert(&v16, 0, "Incompatible system config version. Needs to be >= ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = std::string::append(&v17, " to use ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    int v11 = *(char *)(a4 + 23);
    if (v11 >= 0) {
      long long v12 = (const std::string::value_type *)a4;
    }
    else {
      long long v12 = *(const std::string::value_type **)a4;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(a4 + 8);
    }
    long long v14 = std::string::append(&v18, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v14->__r_.__value_.__r.__words[2];
    long long v19 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v19);
  }
  return result;
}

void sub_1B1E3B2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

void quasar::SystemConfig::readOverridesForTranslationModelInfo(quasar::SystemConfig *this, quasar::TranslationModelInfo *a2)
{
  uint64_t v2 = (char *)this + 72;
  std::string::basic_string[abi:ne180100]<0>(__p, "mt-model-info.supported-overrides");
  quasar::PTree::getChildOptional((uint64_t)v2, (uint64_t)__p);
}

void sub_1B1E3B688(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t quasar::SystemConfig::validateOverridesInTranslationModelInfo(quasar::SystemConfig *this, const quasar::TranslationModelInfo *a2)
{
  std::string::size_type v13 = (void *)((char *)a2 + 232);
  std::unordered_map<std::string,std::unordered_set<std::string>>::unordered_map((uint64_t)v15, (uint64_t)a2 + 232);
  std::string v3 = (unsigned __int8 *)*((void *)a2 + 3);
  int v11 = (char *)a2 + 32;
  if (v3 != (unsigned __int8 *)((char *)a2 + 32))
  {
    long long v12 = (void *)((char *)a2 + 192);
    do
    {
      long long v4 = v3 + 32;
      int v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v12, v3 + 32);
      if (v5) {
        long long v4 = v5 + 40;
      }
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v13, v4))
      {
        std::operator+<char>();
        quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)&v14);
      }
      long long v6 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          long long v7 = v6;
          long long v6 = *(unsigned __int8 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (unsigned __int8 *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          std::string v3 = v7;
        }
        while (!v8);
      }
      std::string v3 = v7;
    }
    while (v7 != (unsigned __int8 *)v11);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)v15);
}

void sub_1B1E3BE14(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(v1 - 136);
  _Unwind_Resume(a1);
}

void *std::tuple<std::string &,std::string &>::operator=[abi:ne180100]<std::string,std::string,0>(void *a1, long long *a2)
{
  uint64_t v4 = *a1;
  if (*(char *)(*a1 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v5;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v6 = a1[1];
  if (*(char *)(v6 + 23) < 0) {
    operator delete(*(void **)v6);
  }
  long long v7 = *(long long *)((char *)a2 + 24);
  *(void *)(v6 + 16) = *((void *)a2 + 5);
  *(_OWORD *)uint64_t v6 = v7;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  return a1;
}

uint64_t quasar::TranslationModelInfo::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  if (a1 != a2)
  {
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(a1 + 24), *(void **)(a2 + 24), (void *)(a2 + 32));
    std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((std::vector<std::pair<std::string, std::string>> *)(a1 + 48), *(std::string **)(a2 + 48), *(long long **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4));
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *> *>>((void *)(a1 + 72), *(uint64_t **)(a2 + 88), 0);
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *> *>>((void *)(a1 + 112), *(uint64_t **)(a2 + 128), 0);
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *> *>>((void *)(a1 + 152), *(uint64_t **)(a2 + 168), 0);
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((void *)(a1 + 192), *(uint64_t **)(a2 + 208), 0);
    *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *> *>>((void *)(a1 + 232), *(uint64_t **)(a2 + 248), 0);
  }
  return a1;
}

void quasar::TranslationModelInfo::~TranslationModelInfo(char **this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)(this + 29));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 24));
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::~__hash_table((uint64_t)(this + 19));
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table((uint64_t)(this + 14));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::~__hash_table((uint64_t)(this + 9));
  uint64_t v2 = (void **)(this + 6);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void quasar::SystemConfig::aceCatToQuasarTemplate(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  uint64_t v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 328, (const void **)a2);
  if (a1 + 336 == v6)
  {
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
      return;
    }
    BOOL v8 = *(const std::string::value_type **)a2;
    std::string::size_type v9 = *(void *)(a2 + 8);
  }
  else
  {
    if ((*(char *)(v6 + 79) & 0x80000000) == 0)
    {
      long long v7 = *(_OWORD *)(v6 + 56);
      a3->__r_.__value_.__r.__words[2] = *(void *)(v6 + 72);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      return;
    }
    BOOL v8 = *(const std::string::value_type **)(v6 + 56);
    std::string::size_type v9 = *(void *)(v6 + 64);
  }
  std::string::__init_copy_ctor_external(a3, v8, v9);
}

std::string *quasar::SystemConfig::quasarTemplateToAceCats@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
  }
  double result = (std::string *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 352, a2);
  if ((std::string *)(a1 + 360) == result)
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    std::string::size_type size = (long long *)result[2].__r_.__value_.__l.__size_;
    long long v7 = (long long *)result[2].__r_.__value_.__r.__words[2];
    return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, size, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)size) >> 3));
  }
  return result;
}

void quasar::SystemConfig::getFullListOfParams(quasar::SystemConfig *this@<X0>, uint64_t a2@<X8>)
{
  v144[11] = *(std::locale *)MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 384) != 1)
  {
    long long v143 = 0u;
    memset(v144, 0, 80);
    long long v141 = 0u;
    memset(v142, 0, sizeof(v142));
    long long v140 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v136);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v136, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v136);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::string v3 = (char *)*((void *)this + 147);
  uint64_t v4 = (char *)this + 1184;
  if (v3 != (char *)this + 1184)
  {
    long long v5 = "%s : %s";
    uint64_t v6 = "true";
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v136, v5);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)(v3 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      uint64_t v7 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v136, (uint64_t)&__v);
      BOOL v8 = "false";
      if (**((unsigned char **)v3 + 7)) {
        BOOL v8 = v6;
      }
      v133 = v8;
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v133;
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,char const* const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,char const* const>;
      uint64_t v9 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v7, (uint64_t)&__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v9, &__p);
      unint64_t v10 = *(void *)(a2 + 8);
      unint64_t v11 = *(void *)(a2 + 16);
      if (v10 >= v11)
      {
        std::string::size_type v13 = v6;
        uint64_t v14 = v5;
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(void *)a2) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(void *)a2) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v18) {
          long long v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v18);
        }
        else {
          long long v19 = 0;
        }
        std::string::size_type v20 = v19 + v15;
        __v.__first_ = v19;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v19[v18];
        long long v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v20->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v20 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        uint64_t v22 = *(void *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a2 + 8) = v22;
        long long v5 = v14;
        uint64_t v6 = v13;
        if (v23 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v10 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v10 = v12;
        memset(&__p, 0, sizeof(__p));
        *(void *)(a2 + 8) = v10 + 24;
      }
      if (BYTE8(v143))
      {
        std::locale::~locale(v144);
        BYTE8(v143) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v142);
      if (SBYTE7(v141) < 0) {
        operator delete((void *)v140);
      }
      if (*((void *)&v137 + 1)) {
        operator delete(*((void **)&v137 + 1));
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v136;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      std::string v24 = (char *)*((void *)v3 + 1);
      if (v24)
      {
        do
        {
          long long v25 = v24;
          std::string v24 = *(char **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          long long v25 = (char *)*((void *)v3 + 2);
          BOOL v26 = *(void *)v25 == (void)v3;
          std::string v3 = v25;
        }
        while (!v26);
      }
      std::string v3 = v25;
    }
    while (v25 != v4);
  }
  std::string v27 = (quasar::SystemConfig *)*((void *)this + 150);
  if (v27 != (quasar::SystemConfig *)((char *)this + 1208))
  {
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v136, "%s : %d");
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)v27 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      uint64_t v28 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v136, (uint64_t)&__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)*((void *)v27 + 7);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,int>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,int>;
      uint64_t v29 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v28, (uint64_t)&__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v29, &__p);
      unint64_t v30 = *(void *)(a2 + 8);
      unint64_t v31 = *(void *)(a2 + 16);
      if (v30 >= v31)
      {
        unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *(void *)a2) >> 3);
        unint64_t v34 = v33 + 1;
        if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *(void *)a2) >> 3);
        if (2 * v35 > v34) {
          unint64_t v34 = 2 * v35;
        }
        if (v35 >= 0x555555555555555) {
          unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v36 = v34;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v36) {
          long long v37 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v36);
        }
        else {
          long long v37 = 0;
        }
        long long v38 = v37 + v33;
        __v.__first_ = v37;
        __v.__begin_ = v38;
        __v.__end_cap_.__value_ = &v37[v36];
        long long v39 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v38->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v38 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        uint64_t v40 = *(void *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v41 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a2 + 8) = v40;
        if (v41 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v30 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v30 = v32;
        memset(&__p, 0, sizeof(__p));
        *(void *)(a2 + 8) = v30 + 24;
      }
      if (BYTE8(v143))
      {
        std::locale::~locale(v144);
        BYTE8(v143) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v142);
      if (SBYTE7(v141) < 0) {
        operator delete((void *)v140);
      }
      if (*((void *)&v137 + 1)) {
        operator delete(*((void **)&v137 + 1));
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v136;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      long long v42 = (quasar::SystemConfig *)*((void *)v27 + 1);
      if (v42)
      {
        do
        {
          long long v43 = v42;
          long long v42 = *(quasar::SystemConfig **)v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          long long v43 = (quasar::SystemConfig *)*((void *)v27 + 2);
          BOOL v26 = *(void *)v43 == (void)v27;
          std::string v27 = v43;
        }
        while (!v26);
      }
      std::string v27 = v43;
    }
    while (v43 != (quasar::SystemConfig *)((char *)this + 1208));
  }
  long long v44 = (quasar::SystemConfig *)*((void *)this + 153);
  if (v44 != (quasar::SystemConfig *)((char *)this + 1232))
  {
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v136, "%s : %d");
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)v44 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      uint64_t v45 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v136, (uint64_t)&__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)*((void *)v44 + 7);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,unsigned int>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned int>;
      uint64_t v46 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v45, (uint64_t)&__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v46, &__p);
      unint64_t v47 = *(void *)(a2 + 8);
      unint64_t v48 = *(void *)(a2 + 16);
      if (v47 >= v48)
      {
        unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - *(void *)a2) >> 3);
        unint64_t v51 = v50 + 1;
        if (v50 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *(void *)a2) >> 3);
        if (2 * v52 > v51) {
          unint64_t v51 = 2 * v52;
        }
        if (v52 >= 0x555555555555555) {
          unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v53 = v51;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v53) {
          long long v54 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v53);
        }
        else {
          long long v54 = 0;
        }
        long long v55 = v54 + v50;
        __v.__first_ = v54;
        __v.__begin_ = v55;
        __v.__end_cap_.__value_ = &v54[v53];
        long long v56 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v55->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v55 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        uint64_t v57 = *(void *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v58 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a2 + 8) = v57;
        if (v58 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v49 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v47 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v47 = v49;
        memset(&__p, 0, sizeof(__p));
        *(void *)(a2 + 8) = v47 + 24;
      }
      if (BYTE8(v143))
      {
        std::locale::~locale(v144);
        BYTE8(v143) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v142);
      if (SBYTE7(v141) < 0) {
        operator delete((void *)v140);
      }
      if (*((void *)&v137 + 1)) {
        operator delete(*((void **)&v137 + 1));
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v136;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      long long v59 = (quasar::SystemConfig *)*((void *)v44 + 1);
      if (v59)
      {
        do
        {
          long long v60 = v59;
          long long v59 = *(quasar::SystemConfig **)v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          long long v60 = (quasar::SystemConfig *)*((void *)v44 + 2);
          BOOL v26 = *(void *)v60 == (void)v44;
          long long v44 = v60;
        }
        while (!v26);
      }
      long long v44 = v60;
    }
    while (v60 != (quasar::SystemConfig *)((char *)this + 1232));
  }
  long long v61 = (quasar::SystemConfig *)*((void *)this + 156);
  if (v61 != (quasar::SystemConfig *)((char *)this + 1256))
  {
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v136, "%s : %d");
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)v61 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      uint64_t v62 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v136, (uint64_t)&__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)*((void *)v61 + 7);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,long long>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,long long>;
      uint64_t v63 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v62, (uint64_t)&__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v63, &__p);
      unint64_t v64 = *(void *)(a2 + 8);
      unint64_t v65 = *(void *)(a2 + 16);
      if (v64 >= v65)
      {
        unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - *(void *)a2) >> 3);
        unint64_t v68 = v67 + 1;
        if (v67 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - *(void *)a2) >> 3);
        if (2 * v69 > v68) {
          unint64_t v68 = 2 * v69;
        }
        if (v69 >= 0x555555555555555) {
          unint64_t v70 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v70 = v68;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v70) {
          long long v71 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v70);
        }
        else {
          long long v71 = 0;
        }
        long long v72 = v71 + v67;
        __v.__first_ = v71;
        __v.__begin_ = v72;
        __v.__end_cap_.__value_ = &v71[v70];
        long long v73 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v72->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v73;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v72 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        uint64_t v74 = *(void *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v75 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a2 + 8) = v74;
        if (v75 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v66 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v64 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v64 = v66;
        memset(&__p, 0, sizeof(__p));
        *(void *)(a2 + 8) = v64 + 24;
      }
      if (BYTE8(v143))
      {
        std::locale::~locale(v144);
        BYTE8(v143) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v142);
      if (SBYTE7(v141) < 0) {
        operator delete((void *)v140);
      }
      if (*((void *)&v137 + 1)) {
        operator delete(*((void **)&v137 + 1));
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v136;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      int v76 = (quasar::SystemConfig *)*((void *)v61 + 1);
      if (v76)
      {
        do
        {
          v77 = v76;
          int v76 = *(quasar::SystemConfig **)v76;
        }
        while (v76);
      }
      else
      {
        do
        {
          v77 = (quasar::SystemConfig *)*((void *)v61 + 2);
          BOOL v26 = *(void *)v77 == (void)v61;
          long long v61 = v77;
        }
        while (!v26);
      }
      long long v61 = v77;
    }
    while (v77 != (quasar::SystemConfig *)((char *)this + 1256));
  }
  v78 = (quasar::SystemConfig *)*((void *)this + 159);
  if (v78 != (quasar::SystemConfig *)((char *)this + 1280))
  {
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v136, "%s : %f");
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)v78 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      uint64_t v79 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v136, (uint64_t)&__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)*((void *)v78 + 7);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,float>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,float>;
      uint64_t v80 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v79, (uint64_t)&__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v80, &__p);
      unint64_t v81 = *(void *)(a2 + 8);
      unint64_t v82 = *(void *)(a2 + 16);
      if (v81 >= v82)
      {
        unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - *(void *)a2) >> 3);
        unint64_t v85 = v84 + 1;
        if (v84 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - *(void *)a2) >> 3);
        if (2 * v86 > v85) {
          unint64_t v85 = 2 * v86;
        }
        if (v86 >= 0x555555555555555) {
          unint64_t v87 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v87 = v85;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v87) {
          v88 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v87);
        }
        else {
          v88 = 0;
        }
        v89 = v88 + v84;
        __v.__first_ = v88;
        __v.__begin_ = v89;
        __v.__end_cap_.__value_ = &v88[v87];
        long long v90 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v89->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v89 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        uint64_t v91 = *(void *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v92 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a2 + 8) = v91;
        if (v92 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v83 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v81 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v81 = v83;
        memset(&__p, 0, sizeof(__p));
        *(void *)(a2 + 8) = v81 + 24;
      }
      if (BYTE8(v143))
      {
        std::locale::~locale(v144);
        BYTE8(v143) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v142);
      if (SBYTE7(v141) < 0) {
        operator delete((void *)v140);
      }
      if (*((void *)&v137 + 1)) {
        operator delete(*((void **)&v137 + 1));
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v136;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      int v93 = (quasar::SystemConfig *)*((void *)v78 + 1);
      if (v93)
      {
        do
        {
          int v94 = v93;
          int v93 = *(quasar::SystemConfig **)v93;
        }
        while (v93);
      }
      else
      {
        do
        {
          int v94 = (quasar::SystemConfig *)*((void *)v78 + 2);
          BOOL v26 = *(void *)v94 == (void)v78;
          v78 = v94;
        }
        while (!v26);
      }
      v78 = v94;
    }
    while (v94 != (quasar::SystemConfig *)((char *)this + 1280));
  }
  int v95 = (quasar::SystemConfig *)*((void *)this + 162);
  if (v95 != (quasar::SystemConfig *)((char *)this + 1304))
  {
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v136, "%s : %f");
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)v95 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      uint64_t v96 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v136, (uint64_t)&__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)*((void *)v95 + 7);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,double>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,double>;
      uint64_t v97 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v96, (uint64_t)&__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v97, &__p);
      unint64_t v98 = *(void *)(a2 + 8);
      unint64_t v99 = *(void *)(a2 + 16);
      if (v98 >= v99)
      {
        unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - *(void *)a2) >> 3);
        unint64_t v102 = v101 + 1;
        if (v101 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - *(void *)a2) >> 3);
        if (2 * v103 > v102) {
          unint64_t v102 = 2 * v103;
        }
        if (v103 >= 0x555555555555555) {
          unint64_t v104 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v104 = v102;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v104) {
          v105 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v104);
        }
        else {
          v105 = 0;
        }
        v106 = v105 + v101;
        __v.__first_ = v105;
        __v.__begin_ = v106;
        __v.__end_cap_.__value_ = &v105[v104];
        long long v107 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v106->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v107;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v106 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        uint64_t v108 = *(void *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v109 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a2 + 8) = v108;
        if (v109 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v100 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v98 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v98 = v100;
        memset(&__p, 0, sizeof(__p));
        *(void *)(a2 + 8) = v98 + 24;
      }
      if (BYTE8(v143))
      {
        std::locale::~locale(v144);
        BYTE8(v143) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v142);
      if (SBYTE7(v141) < 0) {
        operator delete((void *)v140);
      }
      if (*((void *)&v137 + 1)) {
        operator delete(*((void **)&v137 + 1));
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v136;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v110 = (quasar::SystemConfig *)*((void *)v95 + 1);
      if (v110)
      {
        do
        {
          v111 = v110;
          v110 = *(quasar::SystemConfig **)v110;
        }
        while (v110);
      }
      else
      {
        do
        {
          v111 = (quasar::SystemConfig *)*((void *)v95 + 2);
          BOOL v26 = *(void *)v111 == (void)v95;
          int v95 = v111;
        }
        while (!v26);
      }
      int v95 = v111;
    }
    while (v111 != (quasar::SystemConfig *)((char *)this + 1304));
  }
  v112 = (quasar::SystemConfig *)*((void *)this + 165);
  if (v112 != (quasar::SystemConfig *)((char *)this + 1328))
  {
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v136, "%s : %s");
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)v112 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      uint64_t v113 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v136, (uint64_t)&__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)*((void *)v112 + 7);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string>;
      uint64_t v114 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v113, (uint64_t)&__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v114, &__p);
      unint64_t v115 = *(void *)(a2 + 8);
      unint64_t v116 = *(void *)(a2 + 16);
      if (v115 >= v116)
      {
        unint64_t v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115 - *(void *)a2) >> 3);
        unint64_t v119 = v118 + 1;
        if (v118 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v120 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - *(void *)a2) >> 3);
        if (2 * v120 > v119) {
          unint64_t v119 = 2 * v120;
        }
        if (v120 >= 0x555555555555555) {
          unint64_t v121 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v121 = v119;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v121) {
          v122 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v121);
        }
        else {
          v122 = 0;
        }
        v123 = v122 + v118;
        __v.__first_ = v122;
        __v.__begin_ = v123;
        __v.__end_cap_.__value_ = &v122[v121];
        long long v124 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v123->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v123->__r_.__value_.__l.__data_ = v124;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v123 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        uint64_t v125 = *(void *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v126 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a2 + 8) = v125;
        if (v126 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v117 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v115 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v115 = v117;
        memset(&__p, 0, sizeof(__p));
        *(void *)(a2 + 8) = v115 + 24;
      }
      if (BYTE8(v143))
      {
        std::locale::~locale(v144);
        BYTE8(v143) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v142);
      if (SBYTE7(v141) < 0) {
        operator delete((void *)v140);
      }
      if (*((void *)&v137 + 1)) {
        operator delete(*((void **)&v137 + 1));
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v136;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v127 = (quasar::SystemConfig *)*((void *)v112 + 1);
      if (v127)
      {
        do
        {
          v128 = v127;
          v127 = *(quasar::SystemConfig **)v127;
        }
        while (v127);
      }
      else
      {
        do
        {
          v128 = (quasar::SystemConfig *)*((void *)v112 + 2);
          BOOL v26 = *(void *)v128 == (void)v112;
          v112 = v128;
        }
        while (!v26);
      }
      v112 = v128;
    }
    while (v128 != (quasar::SystemConfig *)((char *)this + 1328));
  }
  v129 = *(long long **)(a2 + 8);
  unint64_t v130 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v129 - *(void *)a2) >> 3));
  if (v129 == *(long long **)a2) {
    uint64_t v131 = 0;
  }
  else {
    uint64_t v131 = v130;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(*(void *)a2, v129, (uint64_t)&__v, v131, 1);
}

void sub_1B1E3D234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::__split_buffer<std::wstring> *a17, uint64_t a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SystemConfig::getPtree(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  uint64_t result = a1 + 72;
  if (v2)
  {
    quasar::PTree::getChild(result, a2);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _OWORD v4[17];
  uint64_t vars8;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  uint64_t result = a1 + 72;
  if (v2)
  {
    quasar::PTree::getChild(result, a2);
  }
  return result;
}

void quasar::SystemConfig::getAllLeafNodesFromPtreeIf(uint64_t a1, quasar::PTree *a2, std::string::size_type a3, uint64_t a4, void *a5)
{
  if (!quasar::PTree::isLeaf(a2))
  {
    uint64_t v12 = quasar::PTree::begin(a2);
    uint64_t v13 = quasar::PTree::end(a2);
    if (v12 == v13) {
      return;
    }
    uint64_t v14 = v13;
    while (1)
    {
      if (*(char *)(v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
      }
      else
      {
        long long v15 = *(_OWORD *)v12;
        __str.__r_.__value_.__r.__words[2] = *(void *)(v12 + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v15;
      }
      if (*(char *)(a3 + 23) >= 0) {
        size_t v16 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v16 = *(void *)(a3 + 8);
      }
      if (v16)
      {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          std::string::basic_string[abi:ne180100]((uint64_t)&v38, v16 + 1);
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v18 = &v38;
          }
          else {
            unint64_t v18 = (std::string *)v38.__r_.__value_.__r.__words[0];
          }
          if (*(char *)(a3 + 23) >= 0) {
            long long v19 = (const void *)a3;
          }
          else {
            long long v19 = *(const void **)a3;
          }
          memmove(v18, v19, v16);
          *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v16) = 46;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v21 = __str.__r_.__value_.__l.__size_;
          }
          uint64_t v22 = std::string::append(&v38, (const std::string::value_type *)p_str, v21);
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          quasar::SystemConfig::getAllLeafNodesFromPtreeIf(a1, v12 + 24, &__p, a4, a5);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_51;
          }
          std::string v24 = (void *)v38.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a5, (unsigned __int8 *)a3))
          {
            memset(&__p, 0, sizeof(__p));
            int v41 = (long long *)a3;
            long long v25 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v41);
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v25 + 40));
            *(std::string *)(v25 + 40) = __p;
            memset(&__p, 0, sizeof(__p));
            v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
          }
          uint64_t String = quasar::PTree::getString((quasar::PTree *)(v12 + 24));
          if (*(char *)(String + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)String, *(void *)(String + 8));
          }
          else
          {
            long long v27 = *(_OWORD *)String;
            __p.__r_.__value_.__r.__words[2] = *(void *)(String + 16);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
          }
          std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          char v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
          }
          if (v28)
          {
            v38.__r_.__value_.__r.__words[0] = a3;
            unint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (long long **)&v38);
            unint64_t v31 = v30;
            unint64_t v32 = *((void *)v30 + 6);
            if (v32 >= *((void *)v30 + 7))
            {
              uint64_t v34 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v30 + 5, (long long *)&__p);
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*((std::string **)v30 + 6), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(void *)(v32 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v32 = v33;
              }
              uint64_t v34 = v32 + 24;
              *((void *)v31 + 6) = v32 + 24;
            }
            *((void *)v31 + 6) = v34;
            char v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          if ((v29 & 0x80) == 0) {
            goto LABEL_51;
          }
          std::string v24 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        operator delete(v24);
      }
      else
      {
        quasar::SystemConfig::getAllLeafNodesFromPtreeIf(a1, v12 + 24, &__str, a4, a5);
      }
LABEL_51:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      v12 += 88;
      if (v12 == v14) {
        return;
      }
    }
  }
  uint64_t v10 = quasar::PTree::getString(a2);
  if (*(char *)(v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)v10;
    __str.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
  }
  std::string::size_type v35 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v36 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v35 = __str.__r_.__value_.__l.__size_;
  }
  if (v35)
  {
    __p.__r_.__value_.__r.__words[0] = a3;
    long long v37 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    std::string::operator=((std::string *)(v37 + 40), &__str);
    char v36 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v36 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B1E3D83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v28 + 48) = v29;
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::absolutizeFilePaths(unsigned __int8 *a1, uint64_t *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v22, "-file");
  if (quasar::endsWith(a2, (uint64_t *)v22))
  {
    BOOL v6 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "nt-fsts.\\NT-bizname");
    if (quasar::endsWith(a2, (uint64_t *)&v19))
    {
      BOOL v6 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "g2p-blacklist");
      if (quasar::endsWith(a2, (uint64_t *)v17))
      {
        BOOL v6 = 1;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "-directory");
        BOOL v6 = quasar::endsWith(a2, (uint64_t *)__p);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v19);
    }
  }
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v22[0]);
    if (v6) {
      goto LABEL_15;
    }
  }
  else if (v6)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(v22, "geo-config");
    BOOL v7 = quasar::startsWith((unsigned __int8 *)a2, (unsigned __int8 *)v22);
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
    quasar::SystemConfig::makePathAbsoluteInternal(a1, a3, !v7);
    std::string::basic_string[abi:ne180100]<0>(v22, "-ark-file");
    BOOL v8 = quasar::endsWith(a2, (uint64_t *)v22);
    BOOL v9 = v8;
    if (SHIBYTE(v23) < 0)
    {
      operator delete(v22[0]);
      if (!v9) {
        return;
      }
    }
    else if (!v8)
    {
      return;
    }
    std::operator+<char>();
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = *(_OWORD *)v22;
    *(void *)(a3 + 16) = v23;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "-file-list");
  if (quasar::endsWith(a2, (uint64_t *)v22))
  {
    BOOL v10 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "rule-fst");
    if (quasar::endsWith(a2, (uint64_t *)&v19))
    {
      BOOL v10 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "emoji-keyword-remove-fst-1");
      BOOL v10 = quasar::endsWith(a2, (uint64_t *)v17);
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v19);
    }
  }
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v22[0]);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v23 = 0;
  kaldi::SplitStringToVector((const std::string *)a3, ",", 1, (uint64_t)v22);
  long long v11 = (std::string *)v22[0];
  for (uint64_t i = (std::string *)v22[1]; v11 != i; ++v11)
  {
    long long v19 = 0;
    std::string::size_type v20 = 0;
    uint64_t v21 = 0;
    kaldi::SplitStringToVector(v11, ":", 1, (uint64_t)&v19);
    uint64_t v13 = (unsigned __int8 *)v19;
    uint64_t v14 = v20;
    while (v13 != v14)
    {
      if (!quasar::isPlaceholder(v13)) {
        quasar::SystemConfig::makePathAbsoluteInternal(a1, (uint64_t)v13, 1);
      }
      kaldi::JoinVectorToString((uint64_t *)&v19, ":", 1, (long long *)v11);
      v13 += 24;
    }
    v17[0] = &v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  }
  kaldi::JoinVectorToString((uint64_t *)v22, ",", 1, (long long *)a3);
  long long v19 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_1B1E3DC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::isPlaceholder(unsigned __int8 *a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "\\"");
  BOOL v2 = quasar::startsWith(a1, (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1B1E3DD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::readPtree(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 1536) == 1) {
    quasar::PTree::getChildOptional(a1 + 72, a2);
  }
  memset(v2, 0, 272);
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Config file must be loaded before calling this method.");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
}

void sub_1B1E3E52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    JUMPOUT(0x1B1E3E54CLL);
  }
  JUMPOUT(0x1B1E3E558);
}

void sub_1B1E3E554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::SystemConfig::SetOption(uint64_t a1, const void **a2, quasar::PTree *a3)
{
  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v69, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v69);
  }
  BOOL v6 = (uint64_t **)(a1 + 1176);
  if (a1 + 1184 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1176, a2))
  {
    uint64_t String = quasar::PTree::getString(a3);
    if (*(char *)(String + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)String, *(void *)(String + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)String;
      v68.__r_.__value_.__r.__words[2] = *(void *)(String + 16);
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v8;
    }
    char v11 = quasar::SystemConfig::ToBool((uint64_t)&v68);
    *(void *)&long long v69 = a2;
    *(unsigned char *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v69)[7] = v11;
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v12 = (void *)v68.__r_.__value_.__r.__words[0];
    goto LABEL_40;
  }
  if (a1 + 1208 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1200, a2))
  {
    uint64_t v9 = quasar::PTree::getString(a3);
    if (*(char *)(v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v9, *(void *)(v9 + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)v9;
      v67.__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v10;
    }
    int v15 = quasar::SystemConfig::ToInt((char *)&v67);
    *(void *)&long long v69 = a2;
    *(_DWORD *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1200), a2, (uint64_t)&std::piecewise_construct, (long long **)&v69)[7] = v15;
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v12 = (void *)v67.__r_.__value_.__r.__words[0];
    goto LABEL_40;
  }
  if (a1 + 1232 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1224, a2))
  {
    uint64_t v13 = quasar::PTree::getString(a3);
    if (*(char *)(v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v13, *(void *)(v13 + 8));
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      v66.__r_.__value_.__r.__words[2] = *(void *)(v13 + 16);
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v14;
    }
    int v18 = quasar::SystemConfig::ToUInt((char *)&v66);
    *(void *)&long long v69 = a2;
    *(_DWORD *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1224), a2, (uint64_t)&std::piecewise_construct, (long long **)&v69)[7] = v18;
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v12 = (void *)v66.__r_.__value_.__r.__words[0];
    goto LABEL_40;
  }
  if (a1 + 1256 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1248, a2))
  {
    uint64_t v16 = quasar::PTree::getString(a3);
    if (*(char *)(v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
    }
    else
    {
      long long v17 = *(_OWORD *)v16;
      v65.__r_.__value_.__r.__words[2] = *(void *)(v16 + 16);
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v17;
    }
    uint64_t v21 = quasar::SystemConfig::ToInt64((char *)&v65);
    *(void *)&long long v69 = a2;
    *(void *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1248), a2, (uint64_t)&std::piecewise_construct, (long long **)&v69)[7] = v21;
    if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v12 = (void *)v65.__r_.__value_.__r.__words[0];
    goto LABEL_40;
  }
  if (a1 + 1280 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1272, a2))
  {
    uint64_t v19 = quasar::PTree::getString(a3);
    if (*(char *)(v19 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)v19, *(void *)(v19 + 8));
    }
    else
    {
      long long v20 = *(_OWORD *)v19;
      v64.__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v20;
    }
    float v24 = quasar::SystemConfig::ToFloat((char *)&v64);
    *(void *)&long long v69 = a2;
    *(float *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1272), a2, (uint64_t)&std::piecewise_construct, (long long **)&v69)[7] = v24;
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v12 = (void *)v64.__r_.__value_.__r.__words[0];
    goto LABEL_40;
  }
  if (a1 + 1304 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1296, a2))
  {
    uint64_t v22 = quasar::PTree::getString(a3);
    if (*(char *)(v22 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v22, *(void *)(v22 + 8));
    }
    else
    {
      long long v23 = *(_OWORD *)v22;
      __p.__r_.__value_.__r.__words[2] = *(void *)(v22 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
    }
    quasar::SystemConfig::ToDouble((char *)&__p);
    *(void *)&long long v69 = a2;
    *(void *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1296), a2, (uint64_t)&std::piecewise_construct, (long long **)&v69)[7] = v27;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_40:
    operator delete(v12);
    return 1;
  }
  if (a1 + 1328 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1320, a2))
  {
    long long v25 = (const std::string *)quasar::PTree::getString(a3);
    *(void *)&long long v69 = a2;
    BOOL v26 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1320), a2, (uint64_t)&std::piecewise_construct, (long long **)&v69);
    std::string::operator=((std::string *)v26[7], v25);
    return 1;
  }
  uint64_t v29 = (uint64_t **)(a1 + 1344);
  if (a1 + 1352 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1344, a2))
  {
    std::string v38 = (uint64_t **)(a1 + 1368);
    if (a1 + 1376 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1368, a2))
    {
      unint64_t v47 = (uint64_t **)(a1 + 1392);
      if (a1 + 1400 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1392, a2))
      {
        long long v54 = (uint64_t **)(a1 + 1416);
        if (a1 + 1424 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1416, a2))
        {
          if (a1 + 1448 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1440, a2))
          {
            uint64_t v61 = quasar::PTree::getString(a3);
            quasar::filesystem::Path::Path(&v69, v61);
            unint64_t v86 = a2;
            uint64_t v62 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1440), a2, (uint64_t)&std::piecewise_construct, (long long **)&v86);
            std::string::operator=((std::string *)(v62[7] + 8), (const std::string *)((char *)&v69 + 8));
            *(void *)&long long v69 = &unk_1F0A51998;
            if ((SHIBYTE(v70) & 0x80000000) == 0) {
              return 1;
            }
            uint64_t v12 = (void *)*((void *)&v69 + 1);
            goto LABEL_40;
          }
          return 0;
        }
        else
        {
          *(void *)&long long v69 = a2;
          long long v55 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1416), a2, (uint64_t)&std::piecewise_construct, (long long **)&v69);
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(v55[7]);
          uint64_t v56 = quasar::PTree::begin(a3);
          uint64_t v57 = quasar::PTree::end(a3);
          if (v56 == v57) {
            return 1;
          }
          uint64_t v58 = v57;
          do
          {
            *(void *)&long long v69 = a2;
            uint64_t v59 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v54, a2, (uint64_t)&std::piecewise_construct, (long long **)&v69)[7];
            long long v60 = (unsigned __int8 *)quasar::PTree::getString((quasar::PTree *)(v56 + 24));
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v59, v60, (uint64_t)v60);
            v56 += 88;
            uint64_t result = 1;
          }
          while (v56 != v58);
        }
      }
      else
      {
        *(void *)&long long v69 = a2;
        unint64_t v48 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1392), a2, (uint64_t)&std::piecewise_construct, (long long **)&v69);
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(v48[7]);
        long long v49 = (long long *)quasar::PTree::begin(a3);
        uint64_t v50 = quasar::PTree::end(a3);
        if (v49 == (long long *)v50) {
          return 1;
        }
        unint64_t v51 = (long long *)v50;
        do
        {
          *(void *)&long long v69 = a2;
          uint64_t v52 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v47, a2, (uint64_t)&std::piecewise_construct, (long long **)&v69)[7];
          unint64_t v53 = (long long *)quasar::PTree::getString((quasar::PTree *)((char *)v49 + 24));
          std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>((std::string *)&v69, v49, v53);
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(v52, (unsigned __int8 *)&v69, (uint64_t)&v69);
          if (SHIBYTE(v71) < 0) {
            operator delete(*((void **)&v70 + 1));
          }
          if (SBYTE7(v70) < 0) {
            operator delete((void *)v69);
          }
          long long v49 = (long long *)((char *)v49 + 88);
          uint64_t result = 1;
        }
        while (v49 != v51);
      }
    }
    else
    {
      *(void *)&long long v69 = a2;
      long long v39 = (uint64_t *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1368), a2, (uint64_t)&std::piecewise_construct, (long long **)&v69)[7];
      uint64_t v41 = *v39;
      uint64_t v40 = v39[1];
      if (v40 != *v39)
      {
        do
        {
          v40 -= 48;
          std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v39 + 2), v40);
        }
        while (v40 != v41);
      }
      v39[1] = v41;
      long long v42 = (long long *)quasar::PTree::begin(a3);
      uint64_t v43 = quasar::PTree::end(a3);
      if (v42 == (long long *)v43) {
        return 1;
      }
      long long v44 = (long long *)v43;
      do
      {
        *(void *)&long long v69 = a2;
        uint64_t v45 = (std::vector<std::pair<std::string, std::string>> *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, a2, (uint64_t)&std::piecewise_construct, (long long **)&v69)[7];
        uint64_t v46 = (long long *)quasar::PTree::getString((quasar::PTree *)((char *)v42 + 24));
        std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>((std::string *)&v69, v42, v46);
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v45, &v69);
        if (SHIBYTE(v71) < 0) {
          operator delete(*((void **)&v70 + 1));
        }
        if (SBYTE7(v70) < 0) {
          operator delete((void *)v69);
        }
        long long v42 = (long long *)((char *)v42 + 88);
        uint64_t result = 1;
      }
      while (v42 != v44);
    }
  }
  else
  {
    *(void *)&long long v69 = a2;
    unint64_t v30 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1344), a2, (uint64_t)&std::piecewise_construct, (long long **)&v69);
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v30[7]);
    uint64_t v31 = quasar::PTree::begin(a3);
    uint64_t v32 = quasar::PTree::end(a3);
    if (v31 == v32) {
      return 1;
    }
    uint64_t v33 = v32;
    do
    {
      *(void *)&long long v69 = a2;
      uint64_t v34 = (uint64_t *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29, a2, (uint64_t)&std::piecewise_construct, (long long **)&v69)[7];
      std::string::size_type v35 = (long long *)quasar::PTree::getString((quasar::PTree *)(v31 + 24));
      unint64_t v36 = v34[1];
      if (v36 >= v34[2])
      {
        uint64_t v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v34, v35);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v34, v35);
        uint64_t v37 = v36 + 24;
      }
      v34[1] = v37;
      v31 += 88;
      uint64_t result = 1;
    }
    while (v31 != v33);
  }
  return result;
}

void quasar::SystemConfig::readPtreeAtPrefix(quasar::SystemConfig *this)
{
  BOOL v2 = (uint64_t *)((char *)this + 816);
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  BOOL v3 = quasar::endsWith(v2, (uint64_t *)__p);
  if (SBYTE7(v8) < 0) {
    operator delete(__p[0]);
  }
  if (v3)
  {
    if (*((char *)this + 839) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)this + 102), *((void *)this + 103));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v2;
      *(void *)&long long v8 = v2[2];
    }
    if (SBYTE7(v8) < 0)
    {
      char v5 = (void **)__p[0];
      uint64_t v4 = (uint64_t)--__p[1];
    }
    else
    {
      uint64_t v4 = BYTE7(v8) - 1;
      BYTE7(v8) = v4 & 0x7F;
      char v5 = __p;
    }
    *((unsigned char *)v5 + v4) = 0;
    quasar::SystemConfig::readPtree((uint64_t)this, (uint64_t)__p);
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  BOOL v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Prefix must end with '.' : ", 27);
  std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (uint64_t)v2);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B1E3F00C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SystemConfig::enforceMaxVersion(uint64_t result, int a2, int a3, uint64_t a4)
{
  v21[0] = a2;
  v21[1] = a3;
  int v5 = *(_DWORD *)(result + 32);
  if (v5 > a2 || v5 == a2 && *(_DWORD *)(result + 36) > a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    quasar::SystemConfig::Version::str((quasar::SystemConfig::Version *)v21, &v16);
    BOOL v7 = std::string::insert(&v16, 0, "Incompatible system config version. Needs to be <= ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    long long v9 = std::string::append(&v17, " to use ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    int v11 = *(char *)(a4 + 23);
    if (v11 >= 0) {
      long long v12 = (const std::string::value_type *)a4;
    }
    else {
      long long v12 = *(const std::string::value_type **)a4;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(a4 + 8);
    }
    long long v14 = std::string::append(&v18, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v14->__r_.__value_.__r.__words[2];
    long long v19 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v19);
  }
  return result;
}

void sub_1B1E3F158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

uint64_t quasar::SystemConfig::ToBool(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  uint64_t v1 = quasar::PTree::toBool(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_1B1E3F25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SystemConfig::ToInt(char *a1)
{
  uint64_t v1 = a1;
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  __endptr = 0;
  uint64_t result = strtol(a1, &__endptr, 0);
  BOOL v3 = v1;
  if (v1[23] < 0) {
    BOOL v3 = *(char **)v1;
  }
  if (v3 == __endptr)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    int v5 = std::string::append(&v7, "\"");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    long long v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v8);
  }
  return result;
}

void sub_1B1E3F360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

unint64_t quasar::SystemConfig::ToUInt(char *a1)
{
  uint64_t v1 = a1;
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  __endptr = 0;
  unint64_t result = strtoul(a1, &__endptr, 0);
  BOOL v3 = v1;
  if (v1[23] < 0) {
    BOOL v3 = *(char **)v1;
  }
  if (v3 == __endptr)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    int v5 = std::string::append(&v7, "\"");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    long long v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v8);
  }
  return result;
}

void sub_1B1E3F4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t quasar::SystemConfig::ToInt64(char *a1)
{
  uint64_t v1 = a1;
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  __endptr = 0;
  uint64_t result = strtol(a1, &__endptr, 0);
  BOOL v3 = v1;
  if (v1[23] < 0) {
    BOOL v3 = *(char **)v1;
  }
  if (v3 == __endptr)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    int v5 = std::string::append(&v7, "\"");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    long long v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v8);
  }
  return result;
}

void sub_1B1E3F5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

float quasar::SystemConfig::ToFloat(char *a1)
{
  uint64_t v1 = a1;
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  int v11 = 0;
  double v2 = strtod(a1, &v11);
  BOOL v3 = v1;
  if (v1[23] < 0) {
    BOOL v3 = *(char **)v1;
  }
  if (v3 == v11)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    long long v6 = std::string::append(&v8, "\"");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
    long long v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v9);
  }
  return v2;
}

void sub_1B1E3F738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void quasar::SystemConfig::ToDouble(char *a1)
{
  uint64_t v1 = a1;
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  long long v9 = 0;
  strtod(a1, &v9);
  double v2 = v1;
  if (v1[23] < 0) {
    double v2 = *(char **)v1;
  }
  if (v2 == v9)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    uint64_t v4 = std::string::append(&v6, "\"");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
    long long v7 = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v7);
  }
}

void sub_1B1E3F87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void quasar::SystemConfig::Register(uint64_t a1, const void **a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string v6 = (uint64_t **)(a1 + 1176);
  long long v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  uint64_t v9 = a1 + 1184;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0) {
      int v11 = v14;
    }
    else {
      int v11 = (void **)v14[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (uint64_t)v14[1];
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string v6 = (uint64_t **)(a1 + 1200);
  long long v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  uint64_t v9 = a1 + 1208;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0) {
      int v11 = v14;
    }
    else {
      int v11 = (void **)v14[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (uint64_t)v14[1];
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string v6 = (uint64_t **)(a1 + 1224);
  long long v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  uint64_t v9 = a1 + 1232;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0) {
      int v11 = v14;
    }
    else {
      int v11 = (void **)v14[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (uint64_t)v14[1];
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string v6 = (uint64_t **)(a1 + 1248);
  long long v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  uint64_t v9 = a1 + 1256;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0) {
      int v11 = v14;
    }
    else {
      int v11 = (void **)v14[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (uint64_t)v14[1];
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string v6 = (uint64_t **)(a1 + 1272);
  long long v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  uint64_t v9 = a1 + 1280;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0) {
      int v11 = v14;
    }
    else {
      int v11 = (void **)v14[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (uint64_t)v14[1];
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string v6 = (uint64_t **)(a1 + 1296);
  long long v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  uint64_t v9 = a1 + 1304;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0) {
      int v11 = v14;
    }
    else {
      int v11 = (void **)v14[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (uint64_t)v14[1];
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string v6 = (uint64_t **)(a1 + 1320);
  long long v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  uint64_t v9 = a1 + 1328;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0) {
      int v11 = v14;
    }
    else {
      int v11 = (void **)v14[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (uint64_t)v14[1];
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string v6 = (uint64_t **)(a1 + 1344);
  long long v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  uint64_t v9 = a1 + 1352;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0) {
      int v11 = v14;
    }
    else {
      int v11 = (void **)v14[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (uint64_t)v14[1];
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string v6 = (uint64_t **)(a1 + 1368);
  long long v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  uint64_t v9 = a1 + 1376;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0) {
      int v11 = v14;
    }
    else {
      int v11 = (void **)v14[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (uint64_t)v14[1];
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string v6 = (uint64_t **)(a1 + 1392);
  long long v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  uint64_t v9 = a1 + 1400;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0) {
      int v11 = v14;
    }
    else {
      int v11 = (void **)v14[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (uint64_t)v14[1];
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string v6 = (uint64_t **)(a1 + 1416);
  long long v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  uint64_t v9 = a1 + 1424;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0) {
      int v11 = v14;
    }
    else {
      int v11 = (void **)v14[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (uint64_t)v14[1];
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string v6 = (uint64_t **)(a1 + 1440);
  long long v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  uint64_t v9 = a1 + 1448;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0) {
      int v11 = v14;
    }
    else {
      int v11 = (void **)v14[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v12 = v15;
    }
    else {
      uint64_t v12 = (uint64_t)v14[1];
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0) {
      operator delete(v14[0]);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

std::string *quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo(std::string *this, const quasar::SystemConfig::SystemConfigInfo *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F0A51998;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v5;
  }
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 16);
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v6;
  }
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(this + 4, *((void *)a2 + 12), *((void *)a2 + 13), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3));
  this[5].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 120);
  quasar::SpeechModelInfo::SpeechModelInfo((std::string *)((char *)this + 128), (const quasar::SystemConfig::SystemConfigInfo *)((char *)a2 + 128));
  quasar::TranslationModelInfo::TranslationModelInfo((std::string *)((char *)this + 400), (const quasar::SystemConfig::SystemConfigInfo *)((char *)a2 + 400));
  std::map<int,std::map<std::string,double>>::map[abi:ne180100]((uint64_t *)&this[28], (uint64_t)a2 + 672);
  std::map<std::string,int>::map[abi:ne180100]((uint64_t *)&this[29], (const void ***)a2 + 87);
  LODWORD(this[30].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 180);
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[30].__r_.__value_.__l.__size_, (uint64_t)a2 + 728);
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[32], (uint64_t)a2 + 768);
  return this;
}

void sub_1B1E41548(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 32) = v3;
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1E415D4()
{
}

void sub_1B1E415DC()
{
}

void sub_1B1E415E4()
{
  if (*(char *)(v0 + 95) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x1B1E415A8);
}

void quasar::HybridClientConfigs::~HybridClientConfigs(char **this)
{
}

std::string *quasar::TranslationModelInfo::TranslationModelInfo(std::string *this, const quasar::TranslationModelInfo *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (const void ***)a2 + 3);
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4));
  std::unordered_map<std::string,std::vector<std::pair<std::string,std::string>>>::unordered_map((uint64_t)&this[3], (uint64_t)a2 + 72);
  std::unordered_map<std::string,quasar::TranslationPairSetting>::unordered_map((uint64_t)&this[4].__r_.__value_.__r.__words[2], (uint64_t)a2 + 112);
  std::unordered_map<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>::unordered_map((uint64_t)&this[6].__r_.__value_.__l.__size_, (uint64_t)a2 + 152);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)&this[8], (uint64_t)a2 + 192);
  std::unordered_map<std::string,std::unordered_set<std::string>>::unordered_map((uint64_t)&this[9].__r_.__value_.__r.__words[2], (uint64_t)a2 + 232);
  return this;
}

void sub_1B1E41730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v7);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::~__hash_table(v6);
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::~__hash_table(v4);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::string>::destroy(v3, *(char **)(v2 + 32));
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void sub_1B1E417A4()
{
}

void sub_1B1E417AC()
{
}

std::string *std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1E4181C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::vector<std::pair<std::string,std::string>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1B1E4189C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    std::string::size_type v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *long long v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B1E41B20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::vector<std::pair<std::string,std::string>>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1E41B98(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::pair<std::string,std::string>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this + 1, *((long long **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4));
  return this;
}

void sub_1B1E41C28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::unordered_map<std::string,quasar::TranslationPairSetting>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::TranslationPairSetting> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1B1E41CFC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::TranslationPairSetting> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    std::string::size_type v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__construct_node_hash<std::pair<std::string const,quasar::TranslationPairSetting> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *long long v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B1E41F80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__construct_node_hash<std::pair<std::string const,quasar::TranslationPairSetting> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,quasar::TranslationPairSetting>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1E41FF8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::TranslationPairSetting>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1B1E420C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::TranslationPairSetting>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::unordered_map<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1B1E421B0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    std::string::size_type v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__construct_node_hash<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *long long v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B1E42434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__construct_node_hash<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1E424AC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::unordered_map<std::string,quasar::TranslationPairSetting>::unordered_map((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1B1E42520(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t *std::map<int,std::map<std::string,double>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<int,std::map<std::string,double>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::map<std::string,double>>,std::__tree_node<std::__value_type<int,std::map<std::string,double>>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1B1E425D4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,std::map<std::string,double>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::map<std::string,double>>,std::__tree_node<std::__value_type<int,std::map<std::string,double>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::map<std::string,double>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::map<std::string,double>> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__find_equal<quasar::LmeDataFactoryBase::LmeType>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__construct_node<std::pair<int const,std::map<std::string,double>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

std::string *quasar::SpeechModelInfo::SpeechModelInfo(std::string *this, const quasar::SpeechModelInfo *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  std::set<int>::set[abi:ne180100]((uint64_t *)&this[2], (uint64_t)a2 + 48);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[3], (const void ***)a2 + 9);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[4], (const void ***)a2 + 12);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(this + 6, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((void *)a2 + 20);
    *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(this + 7, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((void *)a2 + 23);
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v8;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&this[8], (const void ***)a2 + 24);
  std::map<std::string,std::vector<std::string>>::map[abi:ne180100]((uint64_t *)&this[9], (const void ***)a2 + 27);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&this[10], (const void ***)a2 + 30);
  this[11].__r_.__value_.__r.__words[0] = *((void *)a2 + 33);
  return this;
}

void sub_1B1E4289C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 167) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v10 + 143) < 0) {
    operator delete(*v14);
  }
  std::__tree<std::string>::destroy(v13, *(char **)(v10 + 104));
  std::__tree<std::string>::destroy(v12, *(char **)(v10 + 80));
  std::__tree<int>::destroy(a10, *(void **)(v10 + 56));
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void sub_1B1E42964()
{
}

void sub_1B1E4296C()
{
}

void sub_1B1E42974()
{
}

uint64_t *std::map<std::string,std::vector<std::string>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E429BC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      long long v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = (const void ***)v7;
          long long v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  long long v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::pair<std::string const,std::vector<std::string>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1B1E42B74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::TranslationModelInfo::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  std::__tree<std::string>::__move_assign(a1 + 24, (void *)a2 + 3);
  std::vector<std::pair<std::string,std::string>>::__vdeallocate((std::vector<std::pair<std::string, std::string>> *)(a1 + 48));
  *(_OWORD *)(a1 + 48) = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__move_assign(a1 + 72, (uint64_t *)a2 + 9);
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__move_assign(a1 + 112, (uint64_t *)a2 + 14);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__move_assign(a1 + 152, (uint64_t *)a2 + 19);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(a1 + 192, (uint64_t *)a2 + 24);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__move_assign(a1 + 232, (uint64_t *)a2 + 29);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  long long v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *long long v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  long long v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *long long v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  long long v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *long long v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  long long v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *long long v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  long long v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *long long v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  long long v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *long long v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

std::string *std::pair<std::string,quasar::TranslationPairSetting>::pair[abi:ne180100]<std::string&,quasar::TranslationPairSetting&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = this + 2;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a3 + 24);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_1B1E43254(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (long long *)a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    long long v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 5;
        std::pair<std::string &,std::vector<std::pair<std::string,std::string>> &>::operator=[abi:ne180100]<std::string const,std::vector<std::pair<std::string,std::string>>,(void *)0>((uint64_t)v12, (uint64_t)(v4 + 1));
        uint64_t v10 = (void *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        uint64_t v4 = *(long long **)v4;
        if (v10) {
          BOOL v11 = v4 == (long long *)a3;
        }
        else {
          BOOL v11 = 1;
        }
        long long v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != (long long *)a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_multi<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>(a1, v4 + 1);
    uint64_t v4 = *(long long **)v4;
  }
}

void sub_1B1E43368(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1B1E43384(_Unwind_Exception *a1)
{
}

uint64_t std::pair<std::string &,std::vector<std::pair<std::string,std::string>> &>::operator=[abi:ne180100]<std::string const,std::vector<std::pair<std::string,std::string>>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(std::vector<std::pair<std::string, std::string>> **)(a1 + 8);
  if (v4 != (std::vector<std::pair<std::string, std::string>> *)(a2 + 24)) {
    std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, *(std::string **)(a2 + 24), *(long long **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_multi<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>(void *a1, long long *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__construct_node<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1B1E43448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__construct_node<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  std::pair<std::string const,std::vector<std::pair<std::string,std::string>>>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1B1E434DC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (long long *)a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    long long v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 5;
        std::pair<std::string &,std::unordered_map<std::string,quasar::TranslationPairSetting> &>::operator=[abi:ne180100]<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>,(void *)0>((uint64_t)v12, (uint64_t)(v4 + 1));
        uint64_t v10 = (void *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        uint64_t v4 = *(long long **)v4;
        if (v10) {
          BOOL v11 = v4 == (long long *)a3;
        }
        else {
          BOOL v11 = 1;
        }
        long long v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != (long long *)a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_multi<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>(a1, v4 + 1);
    uint64_t v4 = *(long long **)v4;
  }
}

void sub_1B1E435D4(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1B1E435F0(_Unwind_Exception *a1)
{
}

uint64_t std::pair<std::string &,std::unordered_map<std::string,quasar::TranslationPairSetting> &>::operator=[abi:ne180100]<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2 + 24)
  {
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 56);
    std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *> *>>((void *)v4, *(uint64_t **)(a2 + 40), 0);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_multi<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>(void *a1, long long *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__construct_node<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1B1E436AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__construct_node<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x50uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1B1E43740(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    long long v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v4 + 5));
        uint64_t v10 = (void *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        uint64_t v4 = (uint64_t *)*v4;
        if (!v10) {
          break;
        }
        long long v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(a1, (long long *)v4 + 1);
    uint64_t v4 = (uint64_t *)*v4;
  }
}

void sub_1B1E43830(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1B1E4384C(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(void *a1, long long *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1B1E438B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1B1E43948(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (long long *)a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    long long v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 5;
        std::pair<std::string &,std::unordered_set<std::string> &>::operator=[abi:ne180100]<std::string const,std::unordered_set<std::string>,(void *)0>((uint64_t)v12, (uint64_t)(v4 + 1));
        uint64_t v10 = (void *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        uint64_t v4 = *(long long **)v4;
        if (v10) {
          BOOL v11 = v4 == (long long *)a3;
        }
        else {
          BOOL v11 = 1;
        }
        long long v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != (long long *)a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_multi<std::pair<std::string const,std::unordered_set<std::string>> const&>(a1, v4 + 1);
    uint64_t v4 = *(long long **)v4;
  }
}

void sub_1B1E43A40(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1B1E43A5C(_Unwind_Exception *a1)
{
}

uint64_t std::pair<std::string &,std::unordered_set<std::string> &>::operator=[abi:ne180100]<std::string const,std::unordered_set<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2 + 24)
  {
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 56);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((void *)v4, *(uint64_t **)(a2 + 40), 0);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_multi<std::pair<std::string const,std::unordered_set<std::string>> const&>(void *a1, long long *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__construct_node<std::pair<std::string const,std::unordered_set<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1B1E43B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__construct_node<std::pair<std::string const,std::unordered_set<std::string>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x50uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  std::pair<std::string const,std::unordered_set<std::string>>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1B1E43BAC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::unordered_set<std::string>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1B1E43C20(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string const&,quasar::PTree&,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(void *)(a3 + 24);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 56), *(void *)(a3 + 32), *(void *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  this[3].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a3 + 56);
  return this;
}

void sub_1B1E43D08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,std::string&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1B1E43DB8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string,std::string,0>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  quasar::PTree::PTree(a1 + 24, (char *)a2 + 24);
  return a1;
}

void sub_1B1E43E14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::unordered_set<std::string>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1B1E43E90(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__construct_node_hash<std::pair<std::string const,std::unordered_set<std::string>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *long long v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B1E44114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__construct_node_hash<std::pair<std::string const,std::unordered_set<std::string>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t result = std::pair<std::string const,std::unordered_set<std::string>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1E4418C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,BOOL *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E441E4(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      unint64_t result = std::__tree<std::__value_type<std::string,BOOL *>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BOOL *> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL *>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BOOL *> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  unint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__construct_node<std::pair<std::string const,long long> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::map<std::string,int *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E4434C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,unsigned int *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E443A4(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,long long *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E443FC(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,float *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E44454(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,double *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E444AC(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string*>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E44504(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::string> *>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E4455C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::pair<std::string,std::string>> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::pair<std::string,std::string>> *>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E445B4(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::unordered_map<std::string,std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::string,std::string> *>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E4460C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::unordered_set<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_set<std::string> *>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E44664(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,quasar::filesystem::Path *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E446BC(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,quasar::SystemConfig::Version>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E44714(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::set<std::string>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::set<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B1E4476C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::set<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      unint64_t result = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<std::string>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<std::string>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  long long v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t result = std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1E448FC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (const void ***)a2 + 3);
  return this;
}

void sub_1B1E44970(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *unint64_t result = a2;
  if (v2)
  {
    std::__list_imp<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>>::clear((uint64_t *)(v2 + 56));
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2 + 8);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void std::__list_imp<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,0>(uint64_t a1)
{
  quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo((quasar::SystemConfig::SystemConfigInfo *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

BOOL kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Get(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>((void *)(a1 + 8), v9);
  long long v6 = v5;
  if (v5)
  {
    uint64_t v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t quasar::SystemConfig::SystemConfigInfo::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    quasar::SpeechModelInfo::operator=(a1 + 128, a2 + 128);
    quasar::TranslationModelInfo::operator=(a1 + 400, a2 + 400);
    *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
  }
  else
  {
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(a1 + 96, *(std::string **)(a2 + 96), *(std::string **)(a2 + 104), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    quasar::SpeechModelInfo::operator=(a1 + 128, a2 + 128);
    quasar::TranslationModelInfo::operator=(a1 + 400, a2 + 400);
    std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,std::map<std::string,double>>,std::__tree_node<std::__value_type<int,std::map<std::string,double>>,void *> *,long>>((uint64_t **)(a1 + 672), *(uint64_t **)(a2 + 672), (uint64_t *)(a2 + 680));
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>((uint64_t **)(a1 + 696), *(void **)(a2 + 696), (void *)(a2 + 704));
    *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
    *(_DWORD *)(a1 + 760) = *(_DWORD *)(a2 + 760);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((void *)(a1 + 728), *(uint64_t **)(a2 + 744), 0);
    *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((void *)(a1 + 768), *(uint64_t **)(a2 + 784), 0);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>(void *a1, uint64_t *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 4), *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)a1 + 44;
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        long long v14 = (unsigned __int8 *)v11[2];
        if (v14 == (unsigned __int8 *)*a2
          || (std::equal_to<std::string>::operator()[abi:ne180100](v12, v14, (unsigned __int8 *)*a2) & 1) != 0)
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Insert(std::string const&,quasar::SystemConfig::SystemConfigInfo const&)::{lambda(quasar::SystemConfig::SystemConfigInfo&)#1}>(unint64_t *a1, std::string::size_type a2, uint64_t a3)
{
  long long v27 = (uint64_t *)&v27;
  long long v28 = (uint64_t *)&v27;
  uint64_t v29 = 0;
  unint64_t v6 = a1 + 1;
  v26.__r_.__value_.__r.__words[0] = a2;
  uint8x8_t v7 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>(a1 + 1, (uint64_t *)&v26);
  if (v7)
  {
    unint64_t v8 = (uint64_t *)v7[3];
    if (&v27 != (uint64_t **)v8)
    {
      unint64_t v9 = (uint64_t *)v8[1];
      if (v9 != (uint64_t *)&v27)
      {
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = v9;
        *(void *)v8[1] = v10;
        uint64_t v11 = (uint64_t)v27;
        v27[1] = (uint64_t)v8;
        uint64_t *v8 = v11;
        v8[1] = (uint64_t)&v27;
        --a1[9];
        long long v27 = v8;
        ++v29;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v6, v7);
  }
  else
  {
    unint64_t v12 = a1[9];
    if (v12 >= *a1)
    {
      unint64_t v13 = (uint64_t *)a1[7];
      if (&v27 != (uint64_t **)v13)
      {
        long long v14 = (uint64_t *)v13[1];
        if (v14 != (uint64_t *)&v27)
        {
          uint64_t v15 = *v13;
          *(void *)(v15 + 8) = v14;
          *(void *)v13[1] = v15;
          uint64_t v16 = (uint64_t)v27;
          v27[1] = (uint64_t)v13;
          *unint64_t v13 = v16;
          v13[1] = (uint64_t)&v27;
          a1[9] = v12 - 1;
          long long v27 = v13;
          ++v29;
        }
      }
      v26.__r_.__value_.__r.__words[0] = (std::string::size_type)(v28 + 2);
      std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__erase_unique<std::string const*>(v6, (uint64_t *)&v26);
      std::string::operator=((std::string *)(v28 + 2), (const std::string *)a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v26 = *(std::string *)a2;
      }
      float v17 = std::__list_imp<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>>::__create_node[abi:ne180100]<std::piecewise_construct_t const&,std::tuple<std::string>,std::tuple<>>((uint64_t)&v27, 0, 0, (uint64_t)&std::piecewise_construct, (uint64_t)&v26);
      uint64_t v18 = (uint64_t)v27;
      *float v17 = (uint64_t)v27;
      v17[1] = (uint64_t)&v27;
      *(void *)(v18 + 8) = v17;
      long long v27 = v17;
      ++v29;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
    }
  }
  unint64_t v19 = v28;
  unint64_t v20 = v28 + 5;
  quasar::SystemConfig::SystemConfigInfo::operator=((uint64_t)(v28 + 5), a3);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 2);
  v26.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
  std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__emplace_unique_key_args<std::string const*,std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>((uint64_t)v6, (uint64_t *)&v26, &v26);
  size_t v21 = (uint64_t *)a1[8];
  if (v21 != v19)
  {
    long long v22 = (uint64_t *)v19[1];
    if (v22 != v21)
    {
      uint64_t v23 = *v19;
      *(void *)(v23 + 8) = v22;
      *(void *)v19[1] = v23;
      uint64_t v24 = *v21;
      *(void *)(v24 + 8) = v19;
      *unint64_t v19 = v24;
      *size_t v21 = (uint64_t)v19;
      v19[1] = (uint64_t)v21;
      --v29;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>>::clear((uint64_t *)&v27);
  return v20;
}

void sub_1B1E45000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__erase_unique<std::string const*>(void *a1, uint64_t *a2)
{
  unint64_t result = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__list_imp<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>>::__create_node[abi:ne180100]<std::piecewise_construct_t const&,std::tuple<std::string>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x350uLL);
  *uint64_t v10 = a2;
  v10[1] = a3;
  std::allocator<std::__list_node<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>::construct[abi:ne180100]<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,std::piecewise_construct_t const&,std::tuple<std::string>,std::tuple<>>(v9, (uint64_t)(v10 + 2), a4, a5);
  return v10;
}

void sub_1B1E450F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::allocator<std::__list_node<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>::construct[abi:ne180100]<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,std::piecewise_construct_t const&,std::tuple<std::string>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v5 = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>::pair[abi:ne180100]<std::string>(a2, (long long *)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1E45160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>::pair[abi:ne180100]<std::string>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  unint64_t v4 = (quasar::SystemConfig::SystemConfigInfo *)(a1 + 24);
  bzero((void *)(a1 + 24), 0x328uLL);
  quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo(v4);
  return a1;
}

void sub_1B1E451D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__emplace_unique_key_args<std::string const*,std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 32, *a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          uint64_t v15 = (unsigned __int8 *)i[2];
          if (v15 == (unsigned __int8 *)*a2
            || (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 44, v15, (unsigned __int8 *)*a2) & 1) != 0)
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 40);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    void *i = *v23;
LABEL_39:
    *uint64_t v23 = i;
    goto LABEL_40;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1E45428(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5 = *a3;
  char v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1E45484(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  float v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)float v16 = 0;
  *((void *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((void *)v16 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v16 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B1E45730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::TranslationPairSetting>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  float v16 = (char *)operator new(0x58uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  *(void *)float v16 = 0;
  *((void *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((void *)v16 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v16 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  long long v17 = *(_OWORD *)(a3 + 48);
  *((void *)v16 + 10) = *(void *)(a3 + 64);
  *((_OWORD *)v16 + 4) = v17;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10) {
          v25 %= v10;
        }
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1B1E459F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B1E45C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B1E45D38(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B1E45FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1E46084(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B1E46320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1E463CC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::pair<std::string,std::string>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  char v5 = (void **)std::__tree<std::pair<std::string,std::string>>::__find_equal<std::pair<std::string,std::string>>((uint64_t)a1, &v11, a2);
  char v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    char v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v6 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    char v10 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void *std::__tree<std::pair<std::string,std::string>>::__find_equal<std::pair<std::string,std::string>>(uint64_t a1, void *a2, const void **a3)
{
  char v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v8 = (void *)v4;
        unint64_t v9 = (const void **)(v4 + 32);
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(v7, a3, (const void **)(v4 + 32)))break; {
        uint64_t v4 = *v8;
        }
        char v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(v7, v9, a3))break; {
      char v5 = v8 + 1;
      }
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  if (v9) {
    char v10 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    char v10 = 0;
  }
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_cap_.__value_ = &v10[v9];
  std::pair<std::string,std::string>::pair[abi:ne180100](&__v.__begin_->first, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer((std::vector<std::pair<std::string, std::string>> *)a1, &__v);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&__v);
  return v11;
}

void sub_1B1E46648(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = (char *)operator new(0x58uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(void *)float v17 = 0;
  *((void *)v17 + 1) = v10;
  float v18 = *a4;
  long long v19 = **a4;
  *((void *)v17 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)float v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  std::string v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *std::string v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1B1E468F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = (std::string *)(v8 + 2);
        v12[1] = (std::string *)(v8 + 5);
        std::pair<std::string &,quasar::TranslationPairSetting &>::operator=[abi:ne180100]<std::string const,quasar::TranslationPairSetting,(void *)0>(v12, (const std::string *)(v4 + 2));
        unint64_t v10 = (void *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        unint64_t v4 = (uint64_t *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        unint64_t v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_multi<std::pair<std::string const,quasar::TranslationPairSetting> const&>(a1, (long long *)v4 + 1);
    unint64_t v4 = (uint64_t *)*v4;
  }
}

void sub_1B1E469EC(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1B1E46A08(_Unwind_Exception *a1)
{
}

std::string **std::pair<std::string &,quasar::TranslationPairSetting &>::operator=[abi:ne180100]<std::string const,quasar::TranslationPairSetting,(void *)0>(std::string **a1, const std::string *a2)
{
  std::string::operator=(*a1, a2);
  unint64_t v4 = a1[1];
  std::string::operator=(v4, a2 + 1);
  std::string::operator=(v4 + 1, a2 + 2);
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_multi<std::pair<std::string const,quasar::TranslationPairSetting> const&>(void *a1, long long *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__construct_node<std::pair<std::string const,quasar::TranslationPairSetting> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1B1E46AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__construct_node<std::pair<std::string const,quasar::TranslationPairSetting> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x58uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  std::pair<std::string const,quasar::TranslationPairSetting>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1B1E46B58(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::pair<std::string,double>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((void *)v6 + 7) = *(void *)(a3 + 24);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__emplace_unique_key_args<int,std::pair<int,std::map<std::string,double>>>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    int v6 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v4;
        int v8 = *((_DWORD *)v4 + 8);
        if (v6 >= v8) {
          break;
        }
        unint64_t v4 = *v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      unint64_t v4 = v7[1];
      if (!v4)
      {
        unint64_t v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__construct_node<std::pair<int,std::map<std::string,double>>>(a1, a3, (uint64_t)&v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

_DWORD *std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__construct_node<std::pair<int,std::map<std::string,double>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t result = operator new(0x40uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  result[8] = *(_DWORD *)a2;
  uint64_t v7 = (void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 16);
  *((void *)result + 5) = *(void *)(a2 + 8);
  *((void *)result + 6) = v8;
  uint64_t v9 = (char *)(result + 12);
  uint64_t v10 = *(void *)(a2 + 24);
  *((void *)result + 7) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a2 + 8) = v7;
    *uint64_t v7 = 0;
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    *((void *)result + 5) = v9;
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    int v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *boost::io::detail::call_put_last<char,std::char_traits<char>,char const* const>(void *a1, const char **a2)
{
  uint64_t v3 = *a2;
  size_t v4 = strlen(*a2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,int>()
{
  return std::ostream::operator<<();
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned int>()
{
  return std::ostream::operator<<();
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,long long>()
{
  return std::ostream::operator<<();
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,float>()
{
  return std::ostream::operator<<();
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,double>()
{
  return std::ostream::operator<<();
}

void *boost::io::detail::call_put_last<char,std::char_traits<char>,std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v3 = v2;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v3);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    uint64_t v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (const void **)a1;
      do
      {
        BOOL v11 = v10;
        uint64_t v10 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v11))
        {
          long long v17 = *(_OWORD *)v10;
          float v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *uint64_t v10 = 0;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            uint64_t v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0) {
              operator delete(*v14);
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 40) = *(void *)(v13 + 16);
            *(unsigned char *)(v13 + 23) = 0;
            *(unsigned char *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }
        uint64_t v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = a1;
    uint64_t v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        uint64_t v10 = v6;
        char v6 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v10))
        {
          long long v16 = *(_OWORD *)v6;
          long long v17 = v6[2];
          v6[1] = 0;
          v6[2] = 0;
          *char v6 = 0;
          BOOL v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((unsigned char *)v11 + 47) = 0;
            *((unsigned char *)v11 + 24) = 0;
            BOOL v13 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = v11 + 6;
          if (v14 < 0) {
            operator delete((void *)*v15);
          }
          *(_OWORD *)int v15 = v16;
          v15[2] = v17;
        }
        uint64_t v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = std::less<std::string>::operator()[abi:ne180100](a4, a2, a1);
  uint64_t result = std::less<std::string>::operator()[abi:ne180100](a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    BOOL v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    int v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a2, a1)) {
      return 1;
    }
    long long v16 = a1[2];
    long long v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = a1[2];
    long long v20 = *(_OWORD *)a1;
    float v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a3, a2)) {
      return 1;
    }
    BOOL v22 = a2[2];
    long long v23 = *(_OWORD *)a2;
    unint64_t v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  uint64_t v10 = a1[2];
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v16 = *(_OWORD *)a1;
  long long v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    char v6 = a1;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
  }
  else
  {
    uint64_t v7 = a1 + 3;
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      BOOL v8 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v7);
      uint64_t v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    long long v18 = v9;
    long long v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)char v6 = v10;
    long long v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0) {
      operator delete(*v12);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((unsigned char *)v6 - 1) = 0;
    *((unsigned char *)v6 - 24) = 0;
  }
  long long v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(long long *a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  do
    v6 += 24;
  while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  unint64_t v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    long long v9 = a2;
    do
    {
      long long v19 = *(_OWORD *)v8;
      long long v10 = v19;
      long long v20 = *(const void **)(v8 + 16);
      long long v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = v12;
      void v9[2] = v11;
      *(_OWORD *)long long v9 = v10;
      do
        v8 += 24;
      while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!std::less<std::string>::operator()[abi:ne180100](a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  long long v13 = (void **)(v8 - 24);
  if ((long long *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0) {
      operator delete(*v13);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(void *)(v8 - 8);
    *a1 = v14;
    *(unsigned char *)(v8 - 1) = 0;
    *(unsigned char *)(v8 - 24) = 0;
  }
  long long v15 = v17;
  *(void *)(v8 - 8) = v18;
  *(_OWORD *)long long v13 = v15;
  return v8 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(void *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a1 + 72), (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v13, v12))
    {
      long long v22 = *(_OWORD *)v13;
      uint64_t v23 = *(void *)(v13 + 16);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(unsigned char *)(v17 + 71) = 0;
        *(unsigned char *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }
        BOOL v19 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2, a3, a5);
  if (std::less<std::string>::operator()[abi:ne180100](a5, (const void **)a4, a3))
  {
    uint64_t v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    if (std::less<std::string>::operator()[abi:ne180100](a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (std::less<std::string>::operator()[abi:ne180100](a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, long long *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4, a6);
  if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((void *)a4 + 2) = v16;
      if (std::less<std::string>::operator()[abi:ne180100](a6, a3, a2))
      {
        BOOL v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (std::less<std::string>::operator()[abi:ne180100](a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (std::less<std::string>::operator()[abi:ne180100](a4, (const void **)v14, (const void **)a1))
        {
          uint64_t v15 = *((void *)v14 + 2);
          long long v16 = *v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *long long v14 = *(_OWORD *)a1;
          *((void *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, (__n128 *)a1);
        }
        long long v14 = (long long *)((char *)v14 + 24);
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = (long long *)((char *)a2 - 24);
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)long long v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (long long *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(unsigned char *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          long long v25 = *v19;
          *(void *)(v23 + 16) = *((void *)v19 + 2);
          *(_OWORD *)uint64_t v23 = v25;
          *(void *)BOOL v19 = v20;
          *((void *)v19 + 1) = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((unsigned char *)v19 + 23) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        BOOL v19 = (long long *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1B1E47FEC(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3
        && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        uint64_t v12 = v14;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          long long v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *unint64_t v7 = v17;
          *(unsigned char *)(v13 + 23) = 0;
          *(unsigned char *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3
            && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            uint64_t v18 = v19;
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        __n128 *v16 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3
      && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      uint64_t v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(v9 + 23) = 0;
    *(unsigned char *)uint64_t v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * v8);
    uint64_t v10 = (long long *)(a2 - 24);
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      long long v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        long long v12 = v9;
        if (*((char *)v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        long long v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        *uint64_t v10 = v13;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0) {
            operator delete(*(void **)v12);
          }
          break;
        }
      }
      double result = *(double *)&v14;
      *long long v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  double result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

double std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  double result = NAN;
  *((void *)v6 + 7) = -1;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1E484A8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t quasar::ResultCombiner::ResultCombiner(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1F0A52B08;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 32));
  return a1;
}

void sub_1B1E48544(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

quasar::ResultCombiner *quasar::ResultCombiner::ResultCombiner(quasar::ResultCombiner *this)
{
  *(void *)this = &unk_1F0A52B08;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  quasar::SystemConfig::SystemConfig((quasar::ResultCombiner *)((char *)this + 32));
  return this;
}

void sub_1B1E485BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ResultCombiner::init(quasar::ResultCombiner *this)
{
  int v2 = (char **)((char *)this + 8);
  if (*((char *)this + 31) < 0) {
    long long v3 = *v2;
  }
  else {
    long long v3 = (char *)this + 8;
  }
  std::string::basic_string[abi:ne180100]<0>(v28, v3);
  memset(v27, 0, sizeof(v27));
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  LODWORD(v12) = 1065353216;
  int JsonFile = quasar::SystemConfig::readJsonFile((uint64_t)this + 32, (uint64_t)v28, v27, (uint64_t)__p, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (JsonFile != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "result-combiner");
    quasar::SystemConfig::enforceMinVersion((uint64_t)this + 32, 45, 0, (uint64_t)__p);
    if (SBYTE7(v11) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "result-combiner.");
    quasar::SystemConfig::setPrefix((std::string *)((char *)this + 32), (const std::string *)__p);
    if (SBYTE7(v11) < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(quasar::ResultCombiner *, char *))(*(void *)this + 8))(this, (char *)this + 32);
    std::string::basic_string[abi:ne180100]<0>(__p, "result-combiner");
    quasar::SystemConfig::readPtree((uint64_t)this + 32, (uint64_t)__p);
  }
  if (quasar::gLogLevel >= 2)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VersionUnsupported: ", 20);
    int v6 = *((char *)this + 31);
    if (v6 >= 0) {
      uint64_t v7 = (uint64_t)v2;
    }
    else {
      uint64_t v7 = *((void *)this + 1);
    }
    if (v6 >= 0) {
      uint64_t v8 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v8 = *((void *)this + 2);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
  return 0;
}

void sub_1B1E4880C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  if (SBYTE7(a10) < 0) {
    operator delete((void *)__p);
  }
  if (a2 == 2)
  {
    long long v27 = __cxa_begin_catch(exception_object);
    if (quasar::gLogLevel >= 2)
    {
LABEL_8:
      long long v28 = v27;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      char v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error reading JSON config file: ", 32);
      char v30 = (const char *)(*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
      size_t v31 = strlen(v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
    }
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(exception_object);
    }
    long long v27 = __cxa_begin_catch(exception_object);
    if (quasar::gLogLevel >= 2) {
      goto LABEL_8;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1B1E48700);
}

void quasar::ResultCombiner::~ResultCombiner(void **this)
{
  *this = &unk_1F0A52B08;
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)(this + 4));
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void *quasar::RankingResultCombiner::RankingResultCombiner(uint64_t a1, long long *a2)
{
  double result = (void *)quasar::ResultCombiner::ResultCombiner(a1, a2);
  *double result = &unk_1F0A55E50;
  result[197] = 0;
  result[199] = 0;
  result[198] = 0;
  result[201] = 0;
  result[203] = 0;
  result[202] = 0;
  return result;
}

void quasar::RankingResultCombiner::registerParams(quasar::RankingResultCombiner *this, quasar::SystemConfig *a2)
{
  *((unsigned char *)this + 1604) = 1;
  *((_DWORD *)this + 400) = 10;
  uint64_t v4 = (char *)this + 1576;
  MEMORY[0x1B3EA7B20]((char *)this + 1576, "1.0,1.0");
  std::string::basic_string[abi:ne180100]<0>(v7, "compute-conf");
  std::string::basic_string[abi:ne180100]<0>(__p, "Whether to use existing confidence or re-compute a score from the tokens, default = true.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 1604, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "nbest-depth");
  std::string::basic_string[abi:ne180100]<0>(__p, "The maximum number of alternatives to allow in the combined output, default = 10.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 1600, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "system-weights");
  std::string::basic_string[abi:ne180100]<0>(__p, "A comma-separated list of weights to apply to each system, in the same order as the provided system input, default is 1.0,1.0.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)v4, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_1B1E48C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ConfusionNetworkCombiner::registerParams(quasar::ConfusionNetworkCombiner *this, quasar::SystemConfig *a2)
{
  uint64_t v4 = (char *)this + 1629;
  *((unsigned char *)this + 1628) = 1;
  *((_DWORD *)this + 406) = 10;
  uint64_t v5 = (char *)this + 1576;
  MEMORY[0x1B3EA7B20]((char *)this + 1576, "1.0,1.0");
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v4 + 71) = _D0;
  *(_DWORD *)uint64_t v4 = 16777217;
  *((unsigned char *)this + 1633) = 0;
  *((_DWORD *)this + 424) = 100;
  *((_DWORD *)this + 427) = 0;
  *((void *)this + 211) = 0x7FFFFFFF00000001;
  MEMORY[0x1B3EA7B20]((char *)this + 1600, "contact-first@contact-middle@contact-last@appname-first@appname-last,contact-first@contact-middle@contact-last@appname-first@appname-last");
  std::string::basic_string[abi:ne180100]<0>(v13, "compute-conf");
  std::string::basic_string[abi:ne180100]<0>(__p, "Whether to use existing confidence or re-compute a score from the tokens, default = true.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1628, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "nbest-depth");
  std::string::basic_string[abi:ne180100]<0>(__p, "The maximum number of alternatives to allow in the combined output, default = 10.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1624, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "system-weights");
  std::string::basic_string[abi:ne180100]<0>(__p, "A comma-separated list of weights to apply to each system, in the same order as the provided system input, default is 1.0,1.0.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)v5, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "backbone-system");
  std::string::basic_string[abi:ne180100]<0>(__p, "The index of the system to use as the reference/backbone system. This is the default system, and the one which is used for alignment.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1688, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "eps-backbone");
  std::string::basic_string[abi:ne180100]<0>(__p, "The epsilon confidence score for epsilons inserted into the backbone.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)(v4 + 71), (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "eps-alternative");
  std::string::basic_string[abi:ne180100]<0>(__p, "The epsilon confidence score for epsilons inserted into the alternative systems.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1704, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "do-selection");
  std::string::basic_string[abi:ne180100]<0>(__p, "Switch to control whether to do system selection or combination, default is 'true' (i.e. do selection only).");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)v4, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "combine-any-region");
  std::string::basic_string[abi:ne180100]<0>(__p, "Switch to control whether, if regions are specified, to do region combination within the entire utterance, if the region exists at all in the two CNs.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1630, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "combine-in-region-only");
  std::string::basic_string[abi:ne180100]<0>(__p, "Switch to control whether, if regions are specified, to do region combination only in slots where the region exists.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1631, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "confidence-delta");
  std::string::basic_string[abi:ne180100]<0>(__p, "The delta by which the competing systems must be better than the backbone in order to be considered better.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1708, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "region-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "List of regional terminals to mach for use for system combination (works with region-combine options). Comma-separated for each system, and @-separated for each region within a system (e.g. contact-first@appname-first,contact-last).");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1600, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "do-flatten");
  std::string::basic_string[abi:ne180100]<0>(__p, "Switch to control whether to flatten the confusion network such that only a 1-best combination/selection is performed.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1632, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "do-partial-merge");
  std::string::basic_string[abi:ne180100]<0>(__p, "Switch to control whether to allow merging a partial hypothesis with a longer one before doing selection.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1633, (uint64_t)__p, 0, 63, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "max-partial-shift");
  std::string::basic_string[abi:ne180100]<0>(__p, "The amount of jitter or shift to allow when deciding whether to merge a longer hypothesis with a partial one.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1696, (uint64_t)__p, 0, 63, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "truncation-delta-milliseconds");
  std::string::basic_string[abi:ne180100]<0>(__p, "Skip system combination if (backbone speech end - competing speech end) >= this value. Value can be positive or negative. This prevents truncation if the CN being combined with is too short. By default, we don't enable this check, value = huge number.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1692, (uint64_t)__p, 0, 61, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
}

void sub_1B1E493D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::RankingResultCombiner::finishInit(quasar::RankingResultCombiner *this)
{
  uint64_t result = kaldi::SplitStringToFloats<float>((uint64_t)this + 1576, ",", 1, (void *)this + 201);
  if ((result & 1) == 0)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Could not read system weight info");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return result;
}

void quasar::ConfusionNetworkCombiner::finishInit(quasar::ConfusionNetworkCombiner *this)
{
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 1576, ",", 1, (void *)this + 208) & 1) == 0)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Could not read system weight info");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  if (*((char *)this + 1623) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 200), *((void *)this + 201));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 1600);
  }
  kaldi::quasar::ProcessRegionInformation(",", "@", (uint64_t)&__p, (uint64_t *)this + 205);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B1E49608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::getNBestFromSausage(void *a1, uint64_t *a2, void *a3, void *a4, char a5, uint64_t *a6)
{
  if (quasar::gLogLevel >= 5)
  {
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Number of systems is ", 21);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  uint64_t v9 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v10 = 0;
    int v41 = a6 + 16;
    long long v42 = a6;
    do
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"System ", 7);
        long long v11 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" Number of alternatives is ", 27);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        uint64_t v9 = *a2;
      }
      if (*(void *)(v9 + 24 * v10 + 8) != *(void *)(v9 + 24 * v10))
      {
        unint64_t v12 = 0;
        do
        {
          std::string::basic_string[abi:ne180100]<0>(&v49, "");
          uint64_t v46 = 0;
          unint64_t v47 = 0;
          unint64_t v48 = 0;
          uint64_t v13 = *(void *)(*a2 + 24 * v10);
          char v14 = *(void **)(v13 + 24 * v12);
          if (*(void **)(v13 + 24 * v12 + 8) == v14)
          {
            float v20 = 0.0;
            float v19 = 0.0;
            float v18 = 0.0;
            float v17 = 0.0;
          }
          else
          {
            unint64_t v15 = 0;
            long long v16 = *(void **)(*a1 + 24 * v10);
            float v17 = 0.0;
            float v18 = 0.0;
            float v19 = 0.0;
            float v20 = 0.0;
            do
            {
              long long v21 = (void *)(v16[3 * v15] + 24 * v14[v15]);
              if (v21[1] != *v21)
              {
                uint64_t v22 = 0;
                unint64_t v23 = 0;
                do
                {
                  if (v15)
                  {
                    std::operator+<char>();
                    if ((SBYTE7(v51) & 0x80u) == 0) {
                      long long v24 = __p;
                    }
                    else {
                      long long v24 = (void **)__p[0];
                    }
                    if ((SBYTE7(v51) & 0x80u) == 0) {
                      std::string::size_type v25 = BYTE7(v51);
                    }
                    else {
                      std::string::size_type v25 = (std::string::size_type)__p[1];
                    }
                    std::string::append(&v49, (const std::string::value_type *)v24, v25);
                    if (SBYTE7(v51) < 0) {
                      operator delete(__p[0]);
                    }
                    long long v26 = *(void **)(*a1 + 24 * v10);
                    long long v27 = *(void **)(*(void *)(*a2 + 24 * v10) + 24 * v12);
                  }
                  else
                  {
                    std::string::operator=(&v49, (const std::string *)(*(void *)(*v16 + 24 * *v14) + v22));
                    long long v26 = *(void **)(*a1 + 24 * v10);
                    long long v27 = *(void **)(*(void *)(*a2 + 24 * v10) + 24 * v12);
                    float v18 = (float)*(unsigned int *)(*(void *)(*v26 + 24 * *v27) + v22 + 28);
                  }
                  long long v28 = (float *)(*(void *)(v26[3 * v15] + 24 * v27[v15]) + v22);
                  float v29 = v28[10];
                  char v30 = v47;
                  if ((unint64_t)v47 >= v48)
                  {
                    size_t v31 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v46, (const quasar::Token *)v28);
                  }
                  else
                  {
                    quasar::Token::Token(v47, (const quasar::Token *)v28);
                    size_t v31 = (std::string *)((char *)v30 + 224);
                  }
                  unint64_t v47 = v31;
                  float v19 = v19 + 1.0;
                  long long v16 = *(void **)(*a1 + 24 * v10);
                  uint64_t v13 = *(void *)(*a2 + 24 * v10);
                  float v20 = v20 + v29;
                  char v14 = *(void **)(v13 + 24 * v12);
                  long long v32 = (void *)(v16[3 * v15] + 24 * v14[v15]);
                  ++v23;
                  v22 += 224;
                }
                while (v23 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v32[1] - *v32) >> 5));
                float v17 = (float)*(unsigned int *)(*v32 + v22 - 192);
              }
              ++v15;
            }
            while (v15 < (uint64_t)(*(void *)(v13 + 24 * v12 + 8) - (void)v14) >> 3);
          }
          a6 = v42;
          if (quasar::gLogLevel > 4)
          {
            long long v65 = 0u;
            long long v66 = 0u;
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            *(_OWORD *)std::string __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Alternative = ", 14);
            if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v34 = &v49;
            }
            else {
              uint64_t v34 = (std::string *)v49.__r_.__value_.__r.__words[0];
            }
            if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v49.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, size);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
          quasar::Alternative::Alternative((uint64_t)__p, &v49, &v46, a5, v10, v12, v18, v17, (float)(v20 / v19) * *(float *)(*a4 + 4 * v10), *(float *)(*a4 + 4 * v10) * *(float *)(*(void *)(*a3 + 24 * v10) + 4 * v12));
          unint64_t v36 = v42[1];
          if (v36 >= v42[2])
          {
            uint64_t v37 = std::vector<quasar::Alternative>::__push_back_slow_path<quasar::Alternative const&>(v42, (long long *)__p);
          }
          else
          {
            std::allocator<quasar::Alternative>::construct[abi:ne180100]<quasar::Alternative,quasar::Alternative const&>(v41, (std::string *)v42[1], (long long *)__p);
            uint64_t v37 = v36 + 80;
            v42[1] = v36 + 80;
          }
          v42[1] = v37;
          std::string v67 = (void **)&v53 + 1;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v67);
          if (SBYTE7(v51) < 0) {
            operator delete(__p[0]);
          }
          __p[0] = &v46;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v49.__r_.__value_.__l.__data_);
          }
          ++v12;
          uint64_t v9 = *a2;
        }
        while (v12 < 0xAAAAAAAAAAAAAAABLL
                    * ((uint64_t)(*(void *)(*a2 + 24 * v10 + 8) - *(void *)(*a2 + 24 * v10)) >> 3));
      }
      ++v10;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - v9) >> 3));
  }
  std::string v38 = (long long *)a6[1];
  unint64_t v39 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v38 - *a6) >> 4));
  if (v38 == (long long *)*a6) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = v39;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *,false>(*a6, v38, (uint64_t)__p, v40, 1);
}

void sub_1B1E49BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

void quasar::Alternative::~Alternative(void **this)
{
  int v2 = this + 7;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t quasar::removeRedundantAlternativesAndPrune(long long **a1, unint64_t a2, void *a3)
{
  memset(v15, 0, sizeof(v15));
  int v16 = 1065353216;
  long long v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v7 = a3 + 2;
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v15, (unsigned __int8 *)v3))
      {
        std::pair<std::string,quasar::Alternative>::pair[abi:ne180100]<true,0>(&v11, v3, v3);
        std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::Alternative>>((uint64_t)v15, (unsigned __int8 *)&v11, (uint64_t)&v11);
        float v17 = (void **)&v14;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v17);
        if (v13 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v11.__r_.__value_.__l.__data_);
        }
        unint64_t v8 = a3[1];
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - *a3) >> 4) < a2)
        {
          if (v8 >= *v7)
          {
            uint64_t v9 = std::vector<quasar::Alternative>::__push_back_slow_path<quasar::Alternative const&>(a3, v3);
          }
          else
          {
            std::allocator<quasar::Alternative>::construct[abi:ne180100]<quasar::Alternative,quasar::Alternative const&>((int)v7, (std::string *)a3[1], v3);
            uint64_t v9 = v8 + 80;
            a3[1] = v8 + 80;
          }
          a3[1] = v9;
        }
      }
      v3 += 5;
    }
    while (v3 != v4);
  }
  return std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::~__hash_table((uint64_t)v15);
}

void sub_1B1E49DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  *(void *)(v15 + 8) = v16;
  std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,quasar::Alternative>::~pair(uint64_t a1)
{
  long long v3 = (void **)(a1 + 80);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void quasar::generateCombinedOutputSimple(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  long long v76 = 0;
  long long v77 = 0;
  unint64_t v78 = 0;
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v14 = 0;
    uint64_t v71 = a7 + 16;
    uint64_t v72 = a6 + 16;
    uint64_t v70 = a4 + 16;
    do
    {
      uint64_t v15 = *(int *)(v7 + 80 * v14 + 44);
      float v17 = *(void **)(a6 + 8);
      unint64_t v16 = *(void *)(a6 + 16);
      if ((unint64_t)v17 >= v16)
      {
        float v19 = *(void **)a6;
        uint64_t v20 = ((uint64_t)v17 - *(void *)a6) >> 3;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v16 - (void)v19;
        if (v22 >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v72, v23);
          float v19 = *(void **)a6;
          float v17 = *(void **)(a6 + 8);
        }
        else
        {
          long long v24 = 0;
        }
        std::string::size_type v25 = &v24[8 * v20];
        *(void *)std::string::size_type v25 = v15;
        float v18 = v25 + 8;
        while (v17 != v19)
        {
          uint64_t v26 = *--v17;
          *((void *)v25 - 1) = v26;
          v25 -= 8;
        }
        *(void *)a6 = v25;
        *(void *)(a6 + 8) = v18;
        *(void *)(a6 + 16) = &v24[8 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *float v17 = v15;
        float v18 = v17 + 1;
      }
      *(void *)(a6 + 8) = v18;
      uint64_t v27 = *(int *)(*a1 + 80 * v14 + 48);
      float v29 = *(void **)(a7 + 8);
      unint64_t v28 = *(void *)(a7 + 16);
      if ((unint64_t)v29 >= v28)
      {
        size_t v31 = *(void **)a7;
        uint64_t v32 = ((uint64_t)v29 - *(void *)a7) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v34 = v28 - (void)v31;
        if (v34 >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          unint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v71, v35);
          size_t v31 = *(void **)a7;
          float v29 = *(void **)(a7 + 8);
        }
        else
        {
          unint64_t v36 = 0;
        }
        uint64_t v37 = &v36[8 * v32];
        *(void *)uint64_t v37 = v27;
        char v30 = v37 + 8;
        while (v29 != v31)
        {
          uint64_t v38 = *--v29;
          *((void *)v37 - 1) = v38;
          v37 -= 8;
        }
        *(void *)a7 = v37;
        *(void *)(a7 + 8) = v30;
        *(void *)(a7 + 16) = &v36[8 * v35];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        void *v29 = v27;
        char v30 = v29 + 1;
      }
      *(void *)(a7 + 8) = v30;
      unint64_t v39 = (_DWORD *)(*a1 + 80 * v14 + 24);
      int v41 = *(_DWORD **)(a4 + 8);
      unint64_t v40 = *(void *)(a4 + 16);
      if ((unint64_t)v41 >= v40)
      {
        uint64_t v43 = *(_DWORD **)a4;
        uint64_t v44 = ((uint64_t)v41 - *(void *)a4) >> 2;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v46 = v40 - (void)v43;
        if (v46 >> 1 > v45) {
          unint64_t v45 = v46 >> 1;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47)
        {
          unint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v70, v47);
          uint64_t v43 = *(_DWORD **)a4;
          int v41 = *(_DWORD **)(a4 + 8);
        }
        else
        {
          unint64_t v48 = 0;
        }
        std::string v49 = &v48[4 * v44];
        *(_DWORD *)std::string v49 = *v39;
        long long v42 = v49 + 4;
        while (v41 != v43)
        {
          int v50 = *--v41;
          *((_DWORD *)v49 - 1) = v50;
          v49 -= 4;
        }
        *(void *)a4 = v49;
        *(void *)(a4 + 8) = v42;
        *(void *)(a4 + 16) = &v48[4 * v47];
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        _DWORD *v41 = *v39;
        long long v42 = v41 + 1;
      }
      *(void *)(a4 + 8) = v42;
      long long v51 = (long long *)(*a1 + 80 * v14);
      unint64_t v52 = a5[1];
      if (v52 >= a5[2])
      {
        uint64_t v53 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a5, v51);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, v51);
        uint64_t v53 = v52 + 24;
      }
      a5[1] = v53;
      std::string __p = 0;
      long long v74 = 0;
      long long v75 = 0;
      long long v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v75, 1uLL);
      long long v56 = (char *)__p;
      long long v57 = v74;
      *(void *)long long v55 = v14;
      long long v58 = v55 + 8;
      long long v59 = v55;
      while (v57 != v56)
      {
        uint64_t v60 = *((void *)v57 - 1);
        v57 -= 8;
        *((void *)v59 - 1) = v60;
        v59 -= 8;
      }
      std::string __p = v59;
      long long v74 = v55 + 8;
      long long v75 = &v55[8 * v54];
      if (v56) {
        operator delete(v56);
      }
      long long v74 = v58;
      unint64_t v61 = a3[1];
      if (v61 >= a3[2])
      {
        uint64_t v62 = std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(a3, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<unsigned long>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned long> const&>((uint64_t)a3, (uint64_t)&__p);
        uint64_t v62 = v61 + 24;
      }
      a3[1] = v62;
      uint64_t v63 = *a1;
      long long v64 = (uint64_t *)(*a1 + 80 * v14 + 56);
      long long v65 = v77;
      if ((unint64_t)v77 >= v78)
      {
        uint64_t v66 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v76, v64);
      }
      else
      {
        void *v77 = 0;
        v65[1] = 0;
        v65[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v65, *v64, *(void *)(v63 + 80 * v14 + 64), 0x6DB6DB6DB6DB6DB7 * ((*(void *)(v63 + 80 * v14 + 64) - *v64) >> 5));
        uint64_t v66 = (uint64_t)(v65 + 3);
      }
      long long v77 = (void *)v66;
      if (__p)
      {
        long long v74 = (char *)__p;
        operator delete(__p);
      }
      ++v14;
      uint64_t v7 = *a1;
    }
    while (v14 < 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4));
  }
  unint64_t v67 = a2[1];
  if (v67 >= a2[2])
  {
    uint64_t v68 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(a2, &v76);
  }
  else
  {
    std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)a2, &v76);
    uint64_t v68 = v67 + 24;
  }
  a2[1] = v68;
  std::string __p = &v76;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B1E4A2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  std::string __p = &a18;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::RankingResultCombiner::combineResults(uint64_t a1, void *a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  memset(v53, 0, 24);
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  unint64_t v48 = 0;
  uint64_t v49 = 0;
  unint64_t v47 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v47, *(const void **)(a1 + 1608), *(void *)(a1 + 1616), (uint64_t)(*(void *)(a1 + 1616) - *(void *)(a1 + 1608)) >> 2);
  quasar::getNBestFromSausage(a2, a3, a4, &v47, *(unsigned char *)(a1 + 1604), (uint64_t *)v53);
  if (v47)
  {
    unint64_t v48 = v47;
    operator delete(v47);
  }
  quasar::removeRedundantAlternativesAndPrune(v53, *(int *)(a1 + 1600), &v50);
  if (quasar::gLogLevel >= 5)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Final alternatives list:", 24);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v30);
    uint64_t v19 = v50;
    uint64_t v18 = v51;
    if (v51 != v50)
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      int v22 = quasar::gLogLevel;
      do
      {
        if (v22 >= 5)
        {
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v30 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
          unint64_t v23 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" : ", 3);
          long long v24 = (void *)std::ostream::operator<<();
          std::string::size_type v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" -> ", 4);
          uint64_t v26 = v50 + v20;
          int v27 = *(char *)(v50 + v20 + 23);
          if (v27 >= 0) {
            uint64_t v28 = v50 + v20;
          }
          else {
            uint64_t v28 = *(void *)v26;
          }
          if (v27 >= 0) {
            uint64_t v29 = *(unsigned __int8 *)(v26 + 23);
          }
          else {
            uint64_t v29 = *(void *)(v26 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v28, v29);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v30);
          int v22 = quasar::gLogLevel;
          uint64_t v19 = v50;
          uint64_t v18 = v51;
        }
        ++v21;
        v20 += 80;
      }
      while (v21 < 0xCCCCCCCCCCCCCCCDLL * ((v18 - v19) >> 4));
    }
  }
  quasar::generateCombinedOutputSimple(&v50, a5, a6, a7, a8, a9, a10);
  *(void *)&long long v30 = &v50;
  std::vector<quasar::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  *(void *)&long long v30 = v53;
  std::vector<quasar::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
}

void sub_1B1E4A59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  a9 = v9 - 136;
  std::vector<quasar::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a9 = v9 - 112;
  std::vector<quasar::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

float quasar::computeOverlap(quasar *this, float *a2, float *a3, float *a4, const float *a5)
{
  float v5 = *a3;
  float result = -100000.0;
  if (*a3 >= 0.0)
  {
    float v7 = *a4;
    if (*a4 >= 0.0)
    {
      float v8 = *(float *)this;
      float v9 = *a2;
      if (*(float *)this > v5 || v9 < v7)
      {
        float v11 = v9 - v8;
        if (v9 > v7) {
          float v11 = v7 - v8;
        }
        float v12 = v9 - v5;
        if (v8 < v5) {
          float v13 = v12;
        }
        else {
          float v13 = v11;
        }
      }
      else
      {
        float v13 = v7 - v5;
      }
      float v14 = v7 - v5;
      float result = v13 / v14;
      if (v14 == 0.0) {
        return 1.0;
      }
    }
  }
  return result;
}

void quasar::RearrangeConfusionNetworkUsingTiming(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const float *a5)
{
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  unint64_t v55 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  char v6 = *(uint64_t **)a1;
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    unint64_t v7 = 0;
    while (1)
    {
      unint64_t v47 = 0;
      unint64_t v48 = 0;
      unint64_t v49 = 0;
      float v8 = &v6[3 * v7];
      float v9 = (unsigned int *)*v8;
      if (v8[1] != *v8) {
        break;
      }
LABEL_42:
      long long v42 = v54;
      if ((unint64_t)v54 >= v55)
      {
        long long v43 = (uint64_t *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v53, (uint64_t *)&v47);
      }
      else
      {
        uint64_t *v54 = 0;
        v42[1] = 0;
        v42[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v42, (uint64_t)v47, (uint64_t)v48, 0x6DB6DB6DB6DB6DB7 * (((char *)v48 - (char *)v47) >> 5));
        long long v43 = v42 + 3;
      }
      uint64_t v54 = v43;
      long long v56 = &v47;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
      ++v7;
      char v6 = *(uint64_t **)a1;
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3)) {
        goto LABEL_46;
      }
    }
    unint64_t v10 = 0;
    unint64_t v11 = v7 - 1;
    unint64_t v12 = v7 + 1;
    while (1)
    {
      if (!v10)
      {
        int v22 = v48;
        if ((unint64_t)v48 >= v49)
        {
          unint64_t v23 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v47, (const quasar::Token *)v9);
        }
        else
        {
          quasar::Token::Token(v48, (const quasar::Token *)v9);
          unint64_t v23 = (std::string *)((char *)v22 + 224);
        }
        unint64_t v48 = v23;
        std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token*>,std::__wrap_iter<quasar::Token*>>((uint64_t *)&v47, (long long *)v23, (const quasar::Token *)v50, (uint64_t)v51, 0x6DB6DB6DB6DB6DB7 * (((char *)v51 - (char *)v50) >> 5));
        long long v37 = (std::string *)v50;
        for (uint64_t i = v51; i != v37; quasar::Token::~Token((void **)&i[-10].__r_.__value_.__r.__words[2]))
          ;
        uint64_t v51 = v37;
        goto LABEL_37;
      }
      float v13 = &v9[56 * v10];
      float v14 = (float)v13[7];
      *(float *)&long long v56 = v14;
      float v15 = (float)v13[8];
      unsigned int v16 = v9[8];
      float v45 = (float)v9[7];
      float v46 = v15;
      float v44 = (float)v16;
      float v18 = quasar::computeOverlap((quasar *)&v56, &v46, &v45, &v44, a5);
      *(float *)&long long v56 = v14;
      float v46 = v15;
      if (v7)
      {
        uint64_t v19 = v6[3 * v11];
        float v20 = (float)*(unsigned int *)(v19 + 28);
        unsigned int v21 = *(_DWORD *)(v19 + 32);
      }
      else
      {
        unsigned int v21 = -1;
        float v20 = 4295000000.0;
      }
      float v45 = v20;
      float v44 = (float)v21;
      float v25 = quasar::computeOverlap((quasar *)&v56, &v46, &v45, &v44, v17);
      *(float *)&long long v56 = v14;
      float v46 = v15;
      if (v12 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v6) >> 3))
      {
        unsigned int v28 = -1;
        float v27 = 4295000000.0;
      }
      else
      {
        uint64_t v26 = v6[3 * v12];
        float v27 = (float)*(unsigned int *)(v26 + 28);
        unsigned int v28 = *(_DWORD *)(v26 + 32);
      }
      float v45 = v27;
      float v44 = (float)v28;
      float v29 = quasar::computeOverlap((quasar *)&v56, &v46, &v45, &v44, v24);
      if (v18 < v29 || v18 < v25)
      {
        if (v25 > v18 && v25 >= v29)
        {
          long long v31 = &v53[3 * v11];
          long long v33 = (std::string *)v31[1];
          unint64_t v32 = v31[2];
          long long v34 = v31 + 1;
          if ((unint64_t)v33 >= v32)
          {
            p_std::string::size_type size = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v53[3 * v11], (const quasar::Token *)v13);
          }
          else
          {
            quasar::Token::Token(v33, (const quasar::Token *)v13);
            p_std::string::size_type size = (uint64_t)&v33[9].__r_.__value_.__l.__size_;
            *long long v34 = (uint64_t)&v33[9].__r_.__value_.__l.__size_;
          }
          *long long v34 = p_size;
          goto LABEL_37;
        }
        if (v29 > v18 && v29 >= v25)
        {
          long long v38 = v51;
          if ((unint64_t)v51 >= v52)
          {
            long long v39 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v50, (const quasar::Token *)v13);
          }
          else
          {
            quasar::Token::Token(v51, (const quasar::Token *)v13);
            long long v39 = (std::string *)((char *)v38 + 224);
          }
          uint64_t v51 = v39;
          goto LABEL_37;
        }
        long long v30 = v48;
        if ((unint64_t)v48 < v49)
        {
LABEL_35:
          quasar::Token::Token(v48, (const quasar::Token *)v13);
          long long v40 = (std::string *)((char *)v30 + 224);
          goto LABEL_36;
        }
      }
      else
      {
        long long v30 = v48;
        if ((unint64_t)v48 < v49) {
          goto LABEL_35;
        }
      }
      long long v40 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v47, (const quasar::Token *)v13);
LABEL_36:
      unint64_t v48 = v40;
LABEL_37:
      ++v10;
      char v6 = *(uint64_t **)a1;
      uint64_t v41 = *(void *)a1 + 24 * v7;
      float v9 = *(unsigned int **)v41;
      if (v10 >= 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v41 + 8) - *(void *)v41) >> 5)) {
        goto LABEL_42;
      }
    }
  }
LABEL_46:
  if (&v53 != (uint64_t **)a1) {
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1, v53, v54, 0xAAAAAAAAAAAAAAABLL * (v54 - v53));
  }
  unint64_t v47 = (void **)&v50;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v47);
  uint64_t v50 = (void **)&v53;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v50);
}

void sub_1B1E4AA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void ***a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  a11 = &a14;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a14 = (void **)&a17;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

float quasar::GetConsensusHypFromSausage(uint64_t *a1, uint64_t a2, float *a3, void *a4, uint64_t a5)
{
  float v5 = a4;
  uint64_t v6 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v8 = 0;
    uint64_t v71 = a5 + 16;
    do
    {
      float v9 = (uint64_t *)(v6 + 24 * v8);
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      int v12 = quasar::gLogLevel;
      if (v11 == v10)
      {
        unint64_t v15 = 0;
      }
      else
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        unint64_t v15 = 0;
        float v16 = -10000.0;
        do
        {
          float v17 = *(float *)(v10 + v13 + 40);
          if (v12 >= 5)
          {
            long long v91 = 0u;
            long long v92 = 0u;
            long long v89 = 0u;
            long long v90 = 0u;
            long long v87 = 0u;
            long long v88 = 0u;
            long long v85 = 0u;
            long long v86 = 0u;
            long long v83 = 0u;
            long long v84 = 0u;
            long long v81 = 0u;
            long long v82 = 0u;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v78 = 0u;
            memset(__str, 0, sizeof(__str));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"DECODER OPTION in slot ", 23);
            float v18 = (void *)std::ostream::operator<<();
            uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" word ", 6);
            uint64_t v20 = *(void *)(*a1 + 24 * v8) + v13;
            int v21 = *(char *)(v20 + 23);
            if (v21 >= 0) {
              uint64_t v22 = *(void *)(*a1 + 24 * v8) + v13;
            }
            else {
              uint64_t v22 = *(void *)v20;
            }
            if (v21 >= 0) {
              uint64_t v23 = *(unsigned __int8 *)(v20 + 23);
            }
            else {
              uint64_t v23 = *(void *)(v20 + 8);
            }
            long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v22, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" score = ", 9);
            float v25 = (void *)std::ostream::operator<<();
            uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" phoneSeq ", 10);
            uint64_t v27 = *(void *)(*a1 + 24 * v8) + v13;
            uint64_t v30 = *(void *)(v27 + 48);
            uint64_t v28 = v27 + 48;
            uint64_t v29 = v30;
            int v31 = *(char *)(v28 + 23);
            if (v31 >= 0) {
              uint64_t v32 = v28;
            }
            else {
              uint64_t v32 = v29;
            }
            if (v31 >= 0) {
              uint64_t v33 = *(unsigned __int8 *)(v28 + 23);
            }
            else {
              uint64_t v33 = *(void *)(v28 + 8);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v32, v33);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
            int v12 = quasar::gLogLevel;
            uint64_t v6 = *a1;
          }
          if (v17 > v16)
          {
            unint64_t v15 = v14;
            float v16 = v17;
          }
          ++v14;
          uint64_t v10 = *(void *)(v6 + 24 * v8);
          v13 += 224;
        }
        while (v14 < 0x6DB6DB6DB6DB6DB7 * ((*(void *)(v6 + 24 * v8 + 8) - v10) >> 5));
      }
      float v5 = a4;
      if (v12 > 4)
      {
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v78 = 0u;
        memset(__str, 0, sizeof(__str));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"CONSENSUS in slot ", 18);
        long long v34 = (void *)std::ostream::operator<<();
        long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" selected word ", 15);
        uint64_t v36 = *(void *)(*a1 + 24 * v8) + 224 * v15;
        int v37 = *(char *)(v36 + 23);
        if (v37 >= 0) {
          uint64_t v38 = *(void *)(*a1 + 24 * v8) + 224 * v15;
        }
        else {
          uint64_t v38 = *(void *)v36;
        }
        if (v37 >= 0) {
          uint64_t v39 = *(unsigned __int8 *)(v36 + 23);
        }
        else {
          uint64_t v39 = *(void *)(v36 + 8);
        }
        long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v38, v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" score = ", 9);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
        uint64_t v6 = *a1;
      }
      BOOL isPrintable = quasar::Token::isPrintable((quasar::Token *)(*(void *)(v6 + 24 * v8) + 224 * v15));
      uint64_t v6 = *a1;
      if (!isPrintable) {
        goto LABEL_85;
      }
      long long v42 = (const quasar::Token *)(*(void *)(v6 + 24 * v8) + 224 * v15);
      unint64_t v43 = a4[1];
      if (v43 >= a4[2])
      {
        uint64_t v44 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a4, v42);
      }
      else
      {
        quasar::Token::Token((std::string *)a4[1], v42);
        uint64_t v44 = v43 + 224;
        a4[1] = v43 + 224;
      }
      a4[1] = v44;
      float v46 = *(unint64_t **)(a5 + 8);
      unint64_t v45 = *(void *)(a5 + 16);
      if ((unint64_t)v46 >= v45)
      {
        unint64_t v48 = *(unint64_t **)a5;
        uint64_t v49 = ((uint64_t)v46 - *(void *)a5) >> 3;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v51 = v45 - (void)v48;
        if (v51 >> 2 > v50) {
          unint64_t v50 = v51 >> 2;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v50;
        }
        if (v52)
        {
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v71, v52);
          unint64_t v48 = *(unint64_t **)a5;
          float v46 = *(unint64_t **)(a5 + 8);
        }
        else
        {
          uint64_t v53 = 0;
        }
        uint64_t v54 = (unint64_t *)&v53[8 * v49];
        unint64_t *v54 = v15;
        unint64_t v47 = v54 + 1;
        while (v46 != v48)
        {
          unint64_t v55 = *--v46;
          *--uint64_t v54 = v55;
        }
        *(void *)a5 = v54;
        *(void *)(a5 + 8) = v47;
        *(void *)(a5 + 16) = &v53[8 * v52];
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        unint64_t *v46 = v15;
        unint64_t v47 = v46 + 1;
      }
      *(void *)(a5 + 8) = v47;
      long long v56 = (std::string *)a2;
      if (*(char *)(a2 + 23) < 0)
      {
        size_t v57 = *(void *)(a2 + 8);
        if (!v57)
        {
LABEL_74:
          uint64_t v68 = *(void *)(*a1 + 24 * v8) + 224 * v15;
          if (*(char *)(v68 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v68, *(void *)(v68 + 8));
            long long v56 = (std::string *)a2;
          }
          else
          {
            long long v69 = *(_OWORD *)v68;
            *(void *)&__str[16] = *(void *)(v68 + 16);
            *(_OWORD *)std::string __str = v69;
          }
          char v66 = 1;
          goto LABEL_78;
        }
      }
      else
      {
        if (!*(unsigned char *)(a2 + 23)) {
          goto LABEL_74;
        }
        size_t v57 = *(void *)(a2 + 8);
      }
      if (*(char *)(a2 + 23) >= 0) {
        size_t v58 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v58 = v57;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v76, v58 + 1);
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v59 = &v76;
      }
      else {
        long long v59 = (std::string *)v76.__r_.__value_.__r.__words[0];
      }
      if (v58)
      {
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v60 = (const void *)a2;
        }
        else {
          uint64_t v60 = *(const void **)a2;
        }
        memmove(v59, v60, v58);
      }
      *(_WORD *)((char *)&v59->__r_.__value_.__l.__data_ + v58) = 32;
      uint64_t v61 = *(void *)(*a1 + 24 * v8) + 224 * v15;
      int v62 = *(char *)(v61 + 23);
      if (v62 >= 0) {
        uint64_t v63 = (const std::string::value_type *)(*(void *)(*a1 + 24 * v8) + 224 * v15);
      }
      else {
        uint64_t v63 = *(const std::string::value_type **)v61;
      }
      if (v62 >= 0) {
        std::string::size_type v64 = *(unsigned __int8 *)(v61 + 23);
      }
      else {
        std::string::size_type v64 = *(void *)(v61 + 8);
      }
      long long v65 = std::string::append(&v76, v63, v64);
      char v66 = 0;
      long long v67 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      *(void *)&__str[16] = *((void *)&v65->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __str = v67;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      long long v56 = (std::string *)a2;
      float v5 = a4;
LABEL_78:
      std::string::operator=(v56, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__str);
        if ((v66 & 1) == 0)
        {
LABEL_82:
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v76.__r_.__value_.__l.__data_);
          }
        }
      }
      else if ((v66 & 1) == 0)
      {
        goto LABEL_82;
      }
      uint64_t v6 = *a1;
      *a3 = *(float *)(*(void *)(*a1 + 24 * v8) + 224 * v15 + 40) + *a3;
LABEL_85:
      ++v8;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - v6) >> 3));
  }
  float result = *a3 / (float)(unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[1] - *v5) >> 5));
  *a3 = result;
  return result;
}

void sub_1B1E4B0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  *(void *)(v26 + 8) = v25;
  _Unwind_Resume(exception_object);
}

uint64_t quasar::MergeConfusionNetworks(int a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a3[1] - 24);
  uint64_t v6 = *(unsigned int *)(v5 + 36);
  int v7 = *(_DWORD *)(v5 + 28);
  if (quasar::gLogLevel >= 5)
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"End time of competing confusion network is ", 43);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
  }
  uint64_t v8 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v9 = 0;
    char v10 = 0;
    while (1)
    {
      if (v10) {
        goto LABEL_6;
      }
      uint64_t v13 = *(void *)(v8 + 24 * v9);
      int v14 = *(_DWORD *)(v13 + 28);
      if (v14 == v6) {
        break;
      }
      int v15 = *(_DWORD *)(v13 + 32);
      int v16 = v15 - v14;
      if (v15 < v14) {
        ++v16;
      }
      BOOL v17 = v14 >= (int)v6 || v15 <= (int)v6;
      if (!v17 && (float)(int)v6 < (float)(v14 + (v16 >> 1)))
      {
        int v18 = v6 - v14;
        if ((int)v6 - v14 <= a1)
        {
          uint64_t v33 = a3[1];
          uint64_t v34 = *(void *)(v33 - 24);
          uint64_t v35 = *(void *)(v33 - 16);
          if (v34 == v35)
          {
            LODWORD(v11) = -1;
          }
          else
          {
            uint64_t v36 = 0xFFFFFFFFLL;
            do
            {
              uint64_t v11 = v6;
              if (v14 > v7)
              {
                *(_DWORD *)(v34 + 32) = v14;
                *(_DWORD *)(v34 + 36) = v14;
                uint64_t v11 = v36;
              }
              v34 += 224;
              uint64_t v36 = v11;
            }
            while (v34 != v35);
          }
          if (quasar::gLogLevel > 4)
          {
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            long long v42 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"ConfusionNetworkMerge: Backbone word starts before the end of the competing CN, ends after and covers more audio. Merge starting at ", 132);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
          }
        }
        else
        {
          if (quasar::gLogLevel >= 5)
          {
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            long long v42 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"ConfusionNetworkMerge: Exceeded the maximum allowable shift amount (", 68);
            uint64_t v19 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") with ", 7);
            uint64_t v20 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" won't try to merge anymore.", 28);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
          }
          uint64_t v11 = *a3;
          uint64_t v21 = a3[1];
          while (v21 != v11)
          {
            v21 -= 24;
            *(void *)&long long v42 = v21;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
          }
          a3[1] = v11;
          LODWORD(v11) = -1;
        }
        if (v18 > a1) {
          return 0;
        }
LABEL_7:
        if (quasar::gLogLevel >= 5)
        {
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v42 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Merging the word/words in slot ", 31);
          int v12 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" onto the end of the competing confusion network", 48);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
        }
LABEL_26:
        unint64_t v22 = a3[1];
        uint64_t v23 = *a2;
        if (*a3 != v22) {
          *(_DWORD *)(*(void *)(v22 - 24) + 32) = *(_DWORD *)(*(void *)(v23 + 24 * v9) + 28);
        }
        long long v24 = (uint64_t *)(v23 + 24 * v9);
        if (v22 >= a3[2])
        {
          uint64_t v25 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(a3, v24);
        }
        else
        {
          std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a3, v24);
          uint64_t v25 = v22 + 24;
        }
        a3[1] = v25;
        if ((v11 & 0x80000000) == 0)
        {
          uint64_t v26 = *(void *)(v25 - 24);
          uint64_t v27 = *(void *)(v25 - 16);
          while (v26 != v27)
          {
            *(_DWORD *)(v26 + 28) = v11;
            v26 += 224;
          }
        }
        char v10 = 1;
        goto LABEL_36;
      }
      int v28 = v14 - v6;
      if (v14 > (int)v6)
      {
        if (v28 <= a1)
        {
          uint64_t v37 = a3[1];
          uint64_t v38 = *(void *)(v37 - 24);
          uint64_t v39 = *(void *)(v37 - 16);
          while (v38 != v39)
          {
            *(_DWORD *)(v38 + 32) = v14;
            *(_DWORD *)(v38 + 36) = v14;
            v38 += 224;
          }
          if (quasar::gLogLevel > 4)
          {
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            long long v42 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"ConfusionNetworkMerge: Backbone word starts after end of the competing CN, and haven't started merging yet, and the word doesn't start too long after. Merge starting at ", 169);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
          }
        }
        else
        {
          if (quasar::gLogLevel >= 5)
          {
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            long long v42 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"ConfusionNetworkMerge: We have exceeded the maximum allowable shift amount (", 76);
            uint64_t v29 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") with ", 7);
            uint64_t v30 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" we won't try to merge anymore.", 31);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
          }
          uint64_t v31 = *a3;
          uint64_t v32 = a3[1];
          while (v32 != v31)
          {
            v32 -= 24;
            *(void *)&long long v42 = v32;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
          }
          a3[1] = v31;
        }
        if (v28 > a1) {
          return 0;
        }
        goto LABEL_6;
      }
      char v10 = 0;
LABEL_36:
      ++v9;
      uint64_t v8 = *a2;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v9) {
        return 1;
      }
    }
    if (quasar::gLogLevel < 5)
    {
      LODWORD(v11) = -1;
      goto LABEL_26;
    }
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"ConfusionNetworkMerge: Backbone word starts at the same time as the end of the competing CN. Merge starting at ", 111);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
LABEL_6:
    LODWORD(v11) = -1;
    goto LABEL_7;
  }
  return 1;
}

void sub_1B1E4B688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::GetConfusionNetworkConfidence(uint64_t **a1)
{
  uint64_t v1 = *a1;
  int v2 = a1[1];
  float v3 = 0.0;
  float v4 = 0.0;
  if (*a1 != v2)
  {
    do
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v20, *v1, v1[1], 0x6DB6DB6DB6DB6DB7 * ((v1[1] - *v1) >> 5));
      uint64_t v5 = v20;
      uint64_t v6 = v21;
      while (v5 != v6)
      {
        quasar::Token::Token(&v8, v5);
        if (quasar::Token::isPrintable((quasar::Token *)&v8))
        {
          float v3 = v3 + 1.0;
          float v7 = v9;
        }
        else
        {
          float v7 = -0.0;
        }
        if (v19 < 0) {
          operator delete(__p);
        }
        if (v17 < 0) {
          operator delete(v16);
        }
        uint64_t v23 = (void **)&v15;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v23);
        if (v14 < 0) {
          operator delete(v13);
        }
        uint64_t v23 = (void **)&v12;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
        if (v11 < 0) {
          operator delete(v10);
        }
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v8.__r_.__value_.__l.__data_);
        }
        float v4 = v4 + v7;
        uint64_t v5 = (const quasar::Token *)((char *)v5 + 224);
      }
      v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
      v1 += 3;
    }
    while (v1 != v2);
  }
}

void sub_1B1E4B83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 160);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::CheckConfusionNetworkForRegion(uint64_t **a1)
{
  uint64_t v1 = *a1;
  float v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v25, *v1, v1[1], 0x6DB6DB6DB6DB6DB7 * ((v1[1] - *v1) >> 5));
      if (v25 != v26)
      {
        quasar::Token::Token(&v24, v25);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v23, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
        }
        else {
          std::string v23 = v24;
        }
        std::string::basic_string[abi:ne180100]<0>(v4, "~w00");
        std::string::basic_string[abi:ne180100]<0>(&__p, " ");
        quasar::replaceAll((uint64_t)&v23, (uint64_t)v4, (char *)&__p);
        if (v22 < 0) {
          operator delete(__p);
        }
        if (SBYTE7(v5) < 0) {
          operator delete(v4[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v4, "\\ ");
        quasar::split((uint64_t)&v23, (uint64_t *)v4, 1, (unint64_t)&__p);
      }
      v4[0] = &v25;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
      v1 += 3;
    }
    while (v1 != v3);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    *(_OWORD *)float v4 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Could not find a region of interest in the confusion network", 60);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v4);
  }
  return 0;
}

void sub_1B1E4BBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfusionNetworkCombiner::SelectSystems(uint64_t a1, int a2, int *a3, uint64_t a4, void *a5)
{
  quasar::GetConfusionNetworkConfidence((uint64_t **)a4);
  float v11 = v10;
  quasar::GetConfusionNetworkConfidence((uint64_t **)(*a5 + 24 * a2));
  uint64_t v13 = *(void *)(a4 + 8);
  if (*(void *)a4 == v13 || (uint64_t v14 = *(void *)(v13 - 24), v14 == *(void *)(v13 - 16))) {
    int v15 = 0;
  }
  else {
    int v15 = *(_DWORD *)(v14 + 36);
  }
  long long v16 = (uint64_t *)(*a5 + 24 * a2);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  if (v18 == v17 || (uint64_t v19 = *(void *)(v17 - 24), v19 == *(void *)(v17 - 16))) {
    int v20 = 0;
  }
  else {
    int v20 = *(_DWORD *)(v19 + 36);
  }
  float v21 = v12 - *(float *)(a1 + 1708);
  if (quasar::gLogLevel >= 5)
  {
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"BestConfidence is ", 18);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
    if (quasar::gLogLevel >= 5)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Competing Confidence for system ", 32);
      char v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" is ", 4);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
      if (quasar::gLogLevel >= 5)
      {
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Best system End Time is ", 24);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
        if (quasar::gLogLevel >= 5)
        {
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v38 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"End time for competing system ", 30);
          std::string v23 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" is ", 4);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
        }
      }
    }
  }
  std::string v24 = (unsigned __int8 **)(*(void *)(a1 + 1640) + 24 * *a3);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v37, *v24, v24[1]);
  uint64_t v25 = (unsigned __int8 **)(*(void *)(a1 + 1640) + 24 * a2);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v36, *v25, v25[1]);
  if (v15 - v20 < *(_DWORD *)(a1 + 1692)) {
    goto LABEL_15;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Competing system does not cover enough speech (max truncation is ", 65);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ,current truncation is ", 24);
    int v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)")", 2);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v38);
  }
  if (*(unsigned char *)(a1 + 1633))
  {
    if (quasar::MergeConfusionNetworks(*(_DWORD *)(a1 + 1696), (uint64_t *)a4, (uint64_t *)(*a5 + 24 * a2)))
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Proceeding with selection logic using merged partial confusion network", 70);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
      }
LABEL_15:
      if (*(unsigned char *)(a1 + 1630) && (quasar::CheckConfusionNetworkForRegion((uint64_t **)a4) & 1) == 0) {
        int v26 = quasar::CheckConfusionNetworkForRegion((uint64_t **)(*a5 + 24 * a2));
      }
      else {
        int v26 = 1;
      }
      if (v11 + 0.00001 < v21 && v26 != 0)
      {
        if (quasar::gLogLevel >= 4)
        {
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v38 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Switching selected system from ", 31);
          uint64_t v30 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" to ", 4);
          uint64_t v31 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" new score = ", 13);
          uint64_t v32 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" old score = ", 13);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v38);
        }
        uint64_t v33 = (uint64_t **)(*a5 + 24 * a2);
        if (v33 != (uint64_t **)a4)
        {
          uint64_t v34 = *(uint64_t **)(*a5 + 24 * a2 + 8);
          std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a4, *v33, v34, 0xAAAAAAAAAAAAAAABLL * (v34 - *v33));
        }
        *a3 = a2;
      }
      goto LABEL_34;
    }
    if (quasar::gLogLevel >= 5)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Exiting selection logic", 23);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
    }
  }
LABEL_34:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v36);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v37);
}

void sub_1B1E4C220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void quasar::RemovePhoneDurations(const std::string *__s@<X0>, uint64_t a2@<X8>)
{
  v25[2] = *MEMORY[0x1E4F143B8];
  char v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v4 = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80000000) == 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
    *(void *)(a2 + 16) = *((void *)&__s->__r_.__value_.__l + 2);
LABEL_4:
    int64_t size = v4;
    long long v6 = __s;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external((std::string *)a2, __s->__r_.__value_.__l.__data_, __s->__r_.__value_.__l.__size_);
  int v4 = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80000000) == 0) {
    goto LABEL_4;
  }
  long long v6 = (const std::string *)__s->__r_.__value_.__r.__words[0];
  int64_t size = __s->__r_.__value_.__l.__size_;
LABEL_5:
  if (size >= 1)
  {
    long long v7 = (char *)v6 + size;
    long long v8 = (std::string *)v6;
    do
    {
      long long v9 = memchr(v8, 95, size);
      if (!v9) {
        break;
      }
      if (*v9 == 95)
      {
        if (v9 != v7 && v9 - (unsigned char *)v6 != -1)
        {
          kaldi::SplitStringToVector(__s, "_", 1, (uint64_t)&v22);
          if (0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v22) >> 3) >= 2)
          {
            std::string::operator=((std::string *)a2, v22);
            if (0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v22) >> 3) >= 3)
            {
              uint64_t v10 = 0;
              unint64_t v11 = 2;
              do
              {
                if (*(char *)(a2 + 23) >= 0) {
                  size_t v12 = *(unsigned __int8 *)(a2 + 23);
                }
                else {
                  size_t v12 = *(void *)(a2 + 8);
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&__p, v12 + 1);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if (v12)
                {
                  if (*(char *)(a2 + 23) >= 0) {
                    uint64_t v14 = (const void *)a2;
                  }
                  else {
                    uint64_t v14 = *(const void **)a2;
                  }
                  memmove(p_p, v14, v12);
                }
                *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v12) = 32;
                int v15 = SHIBYTE(v22[v10 + 2].__r_.__value_.__r.__words[2]);
                if (v15 >= 0) {
                  data = &v22[v10 + 2];
                }
                else {
                  data = (const std::string *)v22[v10 + 2].__r_.__value_.__l.__data_;
                }
                if (v15 >= 0) {
                  std::string::size_type v17 = HIBYTE(v22[v10 + 2].__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v17 = v22[v10 + 2].__r_.__value_.__l.__size_;
                }
                uint64_t v18 = std::string::append(&__p, (const std::string::value_type *)data, v17);
                std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
                v25[0] = v18->__r_.__value_.__l.__size_;
                *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
                char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
                v18->__r_.__value_.__l.__size_ = 0;
                v18->__r_.__value_.__r.__words[2] = 0;
                v18->__r_.__value_.__r.__words[0] = 0;
                if (*(char *)(a2 + 23) < 0) {
                  operator delete(*(void **)a2);
                }
                *(void *)a2 = v19;
                *(void *)(a2 + 8) = v25[0];
                *(void *)(a2 + 15) = *(void *)((char *)v25 + 7);
                *(unsigned char *)(a2 + 23) = v20;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                v11 += 2;
                v10 += 2;
              }
              while (0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v22) >> 3) > v11);
            }
          }
        }
        break;
      }
      long long v8 = (std::string *)(v9 + 1);
      int64_t size = v7 - (unsigned char *)v8;
    }
    while (v7 - (unsigned char *)v8 >= 1);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B1E4C524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::FlattenConfusionNetworks(uint64_t *a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v6 = 0;
    do
    {
      long long v45 = 0;
      long long v46 = 0;
      unint64_t v47 = 0;
      if (*(void *)(v3 + 24 * v6 + 8) != *(void *)(v3 + 24 * v6))
      {
        unint64_t v7 = 0;
        do
        {
          long long v42 = 0;
          long long v43 = 0;
          unint64_t v44 = 0;
          uint64_t v8 = *(void *)(*(void *)(v3 + 24 * v6) + 24 * v7);
          if (*(void *)(*(void *)(v3 + 24 * v6) + 24 * v7 + 8) != v8)
          {
            unint64_t v9 = 0;
            do
            {
              uint64_t v10 = v8 + 24 * v9;
              if (*(void *)(v10 + 8) != *(void *)v10)
              {
                quasar::Token::Token(&v29, *(const quasar::Token **)v10);
                float v31 = *(float *)(*a2 + 4 * v6) * v31;
                quasar::RemovePhoneDurations(&__p, (uint64_t)&v28);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                std::string __p = v28;
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7
                                      * ((uint64_t)(*(void *)(*(void *)(*(void *)(*a1 + 24 * v6) + 24 * v7)
                                                             + 24 * v9
                                                             + 8)
                                                 - *(void *)(*(void *)(*(void *)(*a1 + 24 * v6) + 24 * v7)
                                                             + 24 * v9)) >> 5)) >= 2)
                {
                  uint64_t v11 = 272;
                  unint64_t v12 = 1;
                  do
                  {
                    std::operator+<char>();
                    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v13 = &v28;
                    }
                    else {
                      uint64_t v13 = (std::string *)v28.__r_.__value_.__r.__words[0];
                    }
                    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type size = v28.__r_.__value_.__l.__size_;
                    }
                    std::string::append(&v29, (const std::string::value_type *)v13, size);
                    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v28.__r_.__value_.__l.__data_);
                    }
                    uint64_t v15 = (const std::string *)(*(void *)(*(void *)(*(void *)(*a1 + 24 * v6) + 24 * v7) + 24 * v9)
                                              + v11);
                    int v30 = v15[-1].__r_.__value_.__r.__words[1];
                    std::string::value_type v32 = v15[-1].__r_.__value_.__s.__data_[20];
                    float v31 = (float)(v31
                                * (float)(*(float *)&v15[-1].__r_.__value_.__r.__words[2] * *(float *)(*a2 + 4 * v6)))
                        / 1000.0;
                    quasar::RemovePhoneDurations(v15, (uint64_t)&v27);
                    long long v16 = std::string::insert(&v27, 0, " ");
                    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
                    v28.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v17;
                    v16->__r_.__value_.__l.__size_ = 0;
                    v16->__r_.__value_.__r.__words[2] = 0;
                    v16->__r_.__value_.__r.__words[0] = 0;
                    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v18 = &v28;
                    }
                    else {
                      uint64_t v18 = (std::string *)v28.__r_.__value_.__r.__words[0];
                    }
                    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type v19 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type v19 = v28.__r_.__value_.__l.__size_;
                    }
                    std::string::append(&__p, (const std::string::value_type *)v18, v19);
                    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v28.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v27.__r_.__value_.__l.__data_);
                    }
                    ++v12;
                    v11 += 224;
                  }
                  while (v12 < 0x6DB6DB6DB6DB6DB7
                              * ((uint64_t)(*(void *)(*(void *)(*(void *)(*a1 + 24 * v6) + 24 * v7) + 24 * v9 + 8)
                                         - *(void *)(*(void *)(*(void *)(*a1 + 24 * v6) + 24 * v7) + 24 * v9)) >> 5));
                }
                if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v28, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v28 = v29;
                }
                char v20 = v43;
                if ((unint64_t)v43 >= v44)
                {
                  float v21 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v42, (const quasar::Token *)&v29);
                }
                else
                {
                  quasar::Token::Token(v43, (const quasar::Token *)&v29);
                  float v21 = (std::string *)((char *)v20 + 224);
                }
                long long v43 = v21;
                if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v28.__r_.__value_.__l.__data_);
                }
                if (v41 < 0) {
                  operator delete(v40);
                }
                if (v39 < 0) {
                  operator delete(v38);
                }
                v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
                std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
                if (v36 < 0) {
                  operator delete(v35);
                }
                v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v29.__r_.__value_.__l.__data_);
                }
                uint64_t v3 = *a1;
              }
              ++v9;
              uint64_t v8 = *(void *)(*(void *)(v3 + 24 * v6) + 24 * v7);
            }
            while (v9 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(v3 + 24 * v6) + 24 * v7 + 8) - v8) >> 3));
            if (v43 != v42)
            {
              char v22 = v46;
              if ((unint64_t)v46 >= v47)
              {
                uint64_t v23 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v45, (uint64_t *)&v42);
              }
              else
              {
                void *v46 = 0;
                v22[1] = 0;
                v22[2] = 0;
                std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v22, (uint64_t)v42, (uint64_t)v43, 0x6DB6DB6DB6DB6DB7 * (((char *)v43 - (char *)v42) >> 5));
                uint64_t v23 = (uint64_t)(v22 + 3);
              }
              long long v46 = (void *)v23;
            }
          }
          v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
          ++v7;
          uint64_t v3 = *a1;
        }
        while (v7 < 0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(*(void *)(*a1 + 24 * v6 + 8) - *(void *)(*a1 + 24 * v6)) >> 3));
      }
      unint64_t v24 = a3[1];
      if (v24 >= a3[2])
      {
        uint64_t v25 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(a3, &v45);
      }
      else
      {
        std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)a3, &v45);
        uint64_t v25 = v24 + 24;
      }
      a3[1] = v25;
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      ++v6;
      uint64_t v3 = *a1;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
}

void sub_1B1E4CA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  a24 = (void *)(v63 - 112);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void quasar::TransformConfusionNetwork(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v25 = 0;
      int v26 = 0;
      unint64_t v27 = 0;
      uint64_t v15 = v2;
      uint64_t v3 = (uint64_t ***)(v1 + 24 * v2);
      int v4 = *v3;
      long long v5 = v3[1];
      if (*v3 != v5)
      {
        do
        {
          char v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(&v22, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * (v4[1] - *v4));
          std::string::size_type v19 = 0;
          char v20 = 0;
          unint64_t v21 = 0;
          unint64_t v6 = (uint64_t *)v22;
          unint64_t v7 = (uint64_t *)v23;
          if (v22 != v23)
          {
            int v8 = 0;
            do
            {
              long long v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v16, *v6, v6[1], 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 5));
              if (!v8)
              {
                unint64_t v9 = v20;
                if ((unint64_t)v20 >= v21)
                {
                  uint64_t v10 = (uint64_t *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v19, (uint64_t *)&v16);
                }
                else
                {
                  *char v20 = 0;
                  v9[1] = 0;
                  void v9[2] = 0;
                  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v9, (uint64_t)v16, v17, 0x6DB6DB6DB6DB6DB7 * ((v17 - (uint64_t)v16) >> 5));
                  uint64_t v10 = v9 + 3;
                }
                char v20 = v10;
              }
              std::string v28 = &v16;
              std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
              --v8;
              v6 += 3;
            }
            while (v6 != v7);
          }
          uint64_t v11 = v26;
          if ((unint64_t)v26 >= v27)
          {
            unint64_t v12 = (uint64_t **)std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>((uint64_t *)&v25, &v19);
          }
          else
          {
            *int v26 = 0;
            v11[1] = 0;
            v11[2] = 0;
            std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v11, v19, v20, 0xAAAAAAAAAAAAAAABLL * (v20 - v19));
            unint64_t v12 = v11 + 3;
          }
          int v26 = v12;
          long long v16 = (void **)&v19;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v16);
          std::string::size_type v19 = (uint64_t *)&v22;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
          v4 += 3;
        }
        while (v4 != v5);
        uint64_t v1 = *a1;
      }
      uint64_t v13 = (uint64_t ***)(v1 + 24 * v15);
      if (v13 != &v25) {
        std::vector<std::vector<std::vector<quasar::Token>>>::__assign_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>((uint64_t)v13, v25, v26, 0xAAAAAAAAAAAAAAABLL * (v26 - v25));
      }
      char v22 = (void **)&v25;
      std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v22);
      uint64_t v2 = v15 + 1;
      uint64_t v1 = *a1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v15 + 1);
  }
}

void sub_1B1E4CD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  a18 = (void **)&a21;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void quasar::ConfusionNetworkCombiner::combineResults(uint64_t a1, uint64_t ****a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  int v99 = *(_DWORD *)(a1 + 1688);
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>*,std::vector<std::vector<std::vector<quasar::Token>>>*>(&v96, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  if (*(unsigned char *)(a1 + 1632)) {
    quasar::TransformConfusionNetwork(&v96);
  }
  memset(v95, 0, sizeof(v95));
  quasar::FlattenConfusionNetworks(&v96, (void *)(a1 + 1664), v95);
  uint64_t v15 = (uint64_t **)(v95[0] + 24 * *(int *)(a1 + 1688));
  memset(v94, 0, sizeof(v94));
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v94, *v15, v15[1], 0xAAAAAAAAAAAAAAABLL * (v15[1] - *v15));
  if (v97 != v96)
  {
    unint64_t v16 = 0;
    do
    {
      if (v16 != *(_DWORD *)(a1 + 1688))
      {
        if (*(unsigned char *)(a1 + 1629))
        {
          quasar::ConfusionNetworkCombiner::SelectSystems(a1, v16, &v99, (uint64_t)v94, v95);
          if (quasar::gLogLevel >= 5)
          {
            long long v92 = 0u;
            long long v93 = 0u;
            long long v90 = 0u;
            long long v91 = 0u;
            long long v88 = 0u;
            long long v89 = 0u;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v77 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Selected system is ", 19);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v77);
          }
        }
        else
        {
          quasar::ConfusionNetworkCombiner::SelectSystems(a1, v16, &v99, (uint64_t)v94, v95);
        }
      }
      ++v16;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3));
  }
  std::string::basic_string[abi:ne180100]<0>(v75, "");
  int v74 = 0;
  memset(v73, 0, sizeof(v73));
  std::string __p = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  quasar::RearrangeConfusionNetworkUsingTiming((uint64_t)v94, v17, v18, v19, v20);
  quasar::GetConsensusHypFromSausage((uint64_t *)v94, (uint64_t)v75, (float *)&v74, v73, (uint64_t)&__p);
  if (quasar::gLogLevel >= 5)
  {
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v77 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
    unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"FINAL HYPOTHESIS IS  : ", 23);
    if (v76 >= 0) {
      char v22 = v75;
    }
    else {
      char v22 = (void **)v75[0];
    }
    if (v76 >= 0) {
      uint64_t v23 = HIBYTE(v76);
    }
    else {
      uint64_t v23 = (uint64_t)v75[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v77);
  }
  unint64_t v24 = a8[1];
  if (v24 >= a8[2])
  {
    uint64_t v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a8, (long long *)v75);
  }
  else
  {
    if (SHIBYTE(v76) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a8[1], (const std::string::value_type *)v75[0], (std::string::size_type)v75[1]);
    }
    else
    {
      long long v25 = *(_OWORD *)v75;
      *(void *)(v24 + 16) = v76;
      *(_OWORD *)unint64_t v24 = v25;
    }
    uint64_t v26 = v24 + 24;
    a8[1] = v24 + 24;
  }
  a8[1] = v26;
  uint64_t v27 = v99;
  unint64_t v28 = *(void *)(a9 + 16);
  std::string v29 = *(void **)(a9 + 8);
  if ((unint64_t)v29 >= v28)
  {
    float v31 = *(void **)a9;
    uint64_t v32 = ((uint64_t)v29 - *(void *)a9) >> 3;
    unint64_t v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v34 = v28 - (void)v31;
    if (v34 >> 2 > v33) {
      unint64_t v33 = v34 >> 2;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = v33;
    }
    if (v35)
    {
      char v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a9 + 16, v35);
      float v31 = *(void **)a9;
      std::string v29 = *(void **)(a9 + 8);
    }
    else
    {
      char v36 = 0;
    }
    uint64_t v37 = &v36[8 * v32];
    long long v38 = &v36[8 * v35];
    *(void *)uint64_t v37 = v27;
    int v30 = v37 + 8;
    while (v29 != v31)
    {
      uint64_t v39 = *--v29;
      *((void *)v37 - 1) = v39;
      v37 -= 8;
    }
    *(void *)a9 = v37;
    *(void *)(a9 + 8) = v30;
    *(void *)(a9 + 16) = v38;
    if (v31) {
      operator delete(v31);
    }
  }
  else
  {
    void *v29 = v99;
    int v30 = v29 + 1;
  }
  *(void *)(a9 + 8) = v30;
  unint64_t v40 = *(void *)(a10 + 16);
  char v41 = *(void **)(a10 + 8);
  if ((unint64_t)v41 >= v40)
  {
    long long v43 = *(void **)a10;
    uint64_t v44 = ((uint64_t)v41 - *(void *)a10) >> 3;
    unint64_t v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v46 = v40 - (void)v43;
    if (v46 >> 2 > v45) {
      unint64_t v45 = v46 >> 2;
    }
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v47 = v45;
    }
    if (v47)
    {
      long long v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a10 + 16, v47);
      long long v43 = *(void **)a10;
      char v41 = *(void **)(a10 + 8);
    }
    else
    {
      long long v48 = 0;
    }
    long long v49 = &v48[8 * v44];
    long long v50 = &v48[8 * v47];
    *(void *)long long v49 = 0;
    long long v42 = v49 + 8;
    while (v41 != v43)
    {
      uint64_t v51 = *--v41;
      *((void *)v49 - 1) = v51;
      v49 -= 8;
    }
    *(void *)a10 = v49;
    *(void *)(a10 + 8) = v42;
    *(void *)(a10 + 16) = v50;
    if (v43) {
      operator delete(v43);
    }
  }
  else
  {
    void *v41 = 0;
    long long v42 = v41 + 1;
  }
  *(void *)(a10 + 8) = v42;
  unint64_t v52 = a6[1];
  if (v52 >= a6[2])
  {
    uint64_t v53 = std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(a6, (uint64_t)&__p);
  }
  else
  {
    std::vector<std::vector<unsigned long>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned long> const&>((uint64_t)a6, (uint64_t)&__p);
    uint64_t v53 = v52 + 24;
  }
  a6[1] = v53;
  quasar::GetConfusionNetworkConfidence(v94);
  int v55 = v54;
  unint64_t v56 = *(void *)(a7 + 16);
  long long v57 = *(_DWORD **)(a7 + 8);
  if ((unint64_t)v57 >= v56)
  {
    long long v59 = *(_DWORD **)a7;
    uint64_t v60 = ((uint64_t)v57 - *(void *)a7) >> 2;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v62 = v56 - (void)v59;
    if (v62 >> 1 > v61) {
      unint64_t v61 = v62 >> 1;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      std::string::size_type v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a7 + 16, v63);
      long long v59 = *(_DWORD **)a7;
      long long v57 = *(_DWORD **)(a7 + 8);
    }
    else
    {
      std::string::size_type v64 = 0;
    }
    long long v65 = &v64[4 * v60];
    char v66 = &v64[4 * v63];
    *(_DWORD *)long long v65 = v55;
    long long v58 = v65 + 4;
    while (v57 != v59)
    {
      int v67 = *--v57;
      *((_DWORD *)v65 - 1) = v67;
      v65 -= 4;
    }
    *(void *)a7 = v65;
    *(void *)(a7 + 8) = v58;
    *(void *)(a7 + 16) = v66;
    if (v59) {
      operator delete(v59);
    }
  }
  else
  {
    *long long v57 = v54;
    long long v58 = v57 + 1;
  }
  *(void *)(a7 + 8) = v58;
  unint64_t v68 = a5[1];
  if (v68 >= a5[2])
  {
    uint64_t v69 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(a5, v94);
  }
  else
  {
    std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)a5, v94);
    uint64_t v69 = v68 + 24;
  }
  a5[1] = v69;
  if (__p)
  {
    uint64_t v71 = __p;
    operator delete(__p);
  }
  *(void *)&long long v77 = v73;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  if (SHIBYTE(v76) < 0) {
    operator delete(v75[0]);
  }
  *(void *)&long long v77 = v94;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  *(void *)&long long v77 = v95;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  *(void *)&long long v77 = &v96;
  std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
}

void sub_1B1E4D3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  *(void *)(v22 + 8) = v23;
  if (__p) {
    operator delete(__p);
  }
  a22 = &a12;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  a22 = (char *)(v24 - 176);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = (char *)(v24 - 152);
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = (char *)(v24 - 128);
  std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void quasar::ConfusionNetworkCombiner::~ConfusionNetworkCombiner(quasar::ConfusionNetworkCombiner *this)
{
  *(void *)this = &unk_1F0A56BB0;
  uint64_t v2 = (void *)*((void *)this + 208);
  if (v2)
  {
    *((void *)this + 209) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 1640);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 1623) < 0) {
    operator delete(*((void **)this + 200));
  }
  if (*((char *)this + 1599) < 0) {
    operator delete(*((void **)this + 197));
  }
  quasar::ResultCombiner::~ResultCombiner((void **)this);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_1F0A56BB0;
  uint64_t v2 = (void *)*((void *)this + 208);
  if (v2)
  {
    *((void *)this + 209) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 1640);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 1623) < 0) {
    operator delete(*((void **)this + 200));
  }
  if (*((char *)this + 1599) < 0) {
    operator delete(*((void **)this + 197));
  }
  quasar::ResultCombiner::~ResultCombiner((void **)this);
  MEMORY[0x1B3EA8670]();
}

void quasar::RankingResultCombiner::~RankingResultCombiner(quasar::RankingResultCombiner *this)
{
  *(void *)this = &unk_1F0A55E50;
  uint64_t v2 = (void *)*((void *)this + 201);
  if (v2)
  {
    *((void *)this + 202) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 1599) < 0) {
    operator delete(*((void **)this + 197));
  }
  quasar::ResultCombiner::~ResultCombiner((void **)this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A55E50;
  uint64_t v2 = (void *)*((void *)this + 201);
  if (v2)
  {
    *((void *)this + 202) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 1599) < 0) {
    operator delete(*((void **)this + 197));
  }
  quasar::ResultCombiner::~ResultCombiner((void **)this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::Alternative::Alternative(uint64_t a1, const std::string *a2, uint64_t *a3, char a4, int a5, int a6, float a7, float a8, float a9, float a10)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v19 = a1 + 56;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::string::operator=((std::string *)a1, a2);
  if ((uint64_t *)v19 != a3) {
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v19, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5));
  }
  *(float *)(a1 + 32) = a7;
  *(float *)(a1 + 36) = a8;
  *(float *)(a1 + 24) = a9;
  *(float *)(a1 + 28) = a10;
  *(_DWORD *)(a1 + 44) = a5;
  *(_DWORD *)(a1 + 48) = a6;
  *(unsigned char *)(a1 + 40) = a4;
  if ((a4 & 1) == 0) {
    *(float *)(a1 + 24) = a10;
  }
  return a1;
}

void sub_1B1E4D794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,quasar::Alternative>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = *(long long *)((char *)a3 + 24);
  long long v8 = *(long long *)((char *)a3 + 36);
  this[3].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)((char *)&this[2].__r_.__value_.__r.__words[1] + 4) = v8;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&this[3].__r_.__value_.__l.__size_, *((void *)a3 + 7), *((void *)a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a3 + 8) - *((void *)a3 + 7)) >> 5));
  return this;
}

void sub_1B1E4D884(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::Alternative>::__push_back_slow_path<quasar::Alternative const&>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = (std::string *)&v7[80 * v3];
  uint64_t v13 = &v7[80 * v6];
  std::allocator<quasar::Alternative>::construct[abi:ne180100]<quasar::Alternative,quasar::Alternative const&>(a1 + 16, v11, a2);
  unint64_t v12 = &v11[3].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Alternative>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::Alternative>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1E4D9B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Alternative>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<quasar::Alternative>::construct[abi:ne180100]<quasar::Alternative,quasar::Alternative const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = *(long long *)((char *)a3 + 24);
  long long v7 = *(long long *)((char *)a3 + 36);
  this[2].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[1] + 4) = v7;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  return std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&this[2].__r_.__value_.__l.__size_, *((void *)a3 + 7), *((void *)a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a3 + 8) - *((void *)a3 + 7)) >> 5));
}

void sub_1B1E4DA54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::Alternative>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Alternative>,std::reverse_iterator<quasar::Alternative*>,std::reverse_iterator<quasar::Alternative*>,std::reverse_iterator<quasar::Alternative*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Alternative>,std::reverse_iterator<quasar::Alternative*>,std::reverse_iterator<quasar::Alternative*>,std::reverse_iterator<quasar::Alternative*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(void *)(v7 - 64) = *(void *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(a3 - 72) = 0;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 80) = 0;
      long long v9 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 44) = *(_OWORD *)(a3 - 44);
      *(_OWORD *)(v7 - 56) = v9;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 80;
      *((void *)&v15 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Alternative>,std::reverse_iterator<quasar::Alternative*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Alternative>,std::reverse_iterator<quasar::Alternative*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Alternative>,std::reverse_iterator<quasar::Alternative*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Alternative>,std::reverse_iterator<quasar::Alternative*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::Alternative>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void std::allocator<quasar::Alternative>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 56);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void **std::__split_buffer<quasar::Alternative>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::Alternative>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<quasar::Alternative>::destroy[abi:ne180100](v4, i - 80);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *,false>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v24[11] = v2;
    v24[12] = v3;
    uint64_t v6 = a1 + 80;
    if (a1 + 80 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        uint64_t v9 = v6;
        if (*(float *)(v8 + 24) < *(float *)(v8 + 104))
        {
          *(_OWORD *)std::string __p = *(_OWORD *)v6;
          uint64_t v20 = *(void *)(v6 + 16);
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          *(void *)uint64_t v6 = 0;
          *(_OWORD *)uint64_t v21 = *(_OWORD *)(v8 + 104);
          *(_OWORD *)&v21[12] = *(_OWORD *)(v8 + 116);
          long long v22 = *(_OWORD *)(v8 + 136);
          uint64_t v23 = *(void *)(v8 + 152);
          *(void *)(v8 + 144) = 0;
          *(void *)(v8 + 152) = 0;
          uint64_t v10 = v7;
          *(void *)(v8 + 136) = 0;
          while (1)
          {
            uint64_t v11 = v10;
            uint64_t v12 = a1 + v10;
            uint64_t v13 = a1 + v10 + 80;
            if (*(char *)(a1 + v10 + 103) < 0) {
              operator delete(*(void **)v13);
            }
            *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
            *(void *)(v13 + 16) = *(void *)(v12 + 16);
            *(unsigned char *)(v12 + 23) = 0;
            *(unsigned char *)uint64_t v12 = 0;
            *(_OWORD *)(v12 + 104) = *(_OWORD *)(v12 + 24);
            *(_OWORD *)(v12 + 116) = *(_OWORD *)(v12 + 36);
            std::vector<quasar::Token>::__vdeallocate((void **)(v12 + 136));
            *(_OWORD *)(v12 + 136) = *(_OWORD *)(v12 + 56);
            *(void *)(v12 + 152) = *(void *)(v12 + 72);
            *(void *)(v12 + 64) = 0;
            *(void *)(v12 + 72) = 0;
            *(void *)(v12 + 56) = 0;
            if (!v11) {
              break;
            }
            uint64_t v10 = v11 - 80;
            if (*(float *)(a1 + v11 - 56) >= *(float *)v21)
            {
              uint64_t v14 = a1 + v11;
              goto LABEL_12;
            }
          }
          uint64_t v14 = a1;
LABEL_12:
          if (*(char *)(v14 + 23) < 0) {
            operator delete(*(void **)v14);
          }
          unint64_t v15 = (_OWORD *)(a1 + v11 + 24);
          unint64_t v16 = (void **)(a1 + v11 + 56);
          *(_OWORD *)uint64_t v14 = *(_OWORD *)__p;
          *(void *)(v14 + 16) = v20;
          *unint64_t v15 = *(_OWORD *)v21;
          *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)&v21[12];
          std::vector<quasar::Token>::__vdeallocate(v16);
          uint64_t v17 = *((void *)&v22 + 1);
          std::string *v16 = (void *)v22;
          uint64_t v18 = v23;
          *(void *)(v14 + 64) = v17;
          *(void *)(v14 + 72) = v18;
          uint64_t v23 = 0;
          long long v22 = 0uLL;
          v24[0] = (void **)&v22;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v24);
        }
        uint64_t v6 = v9 + 80;
        v7 += 80;
        uint64_t v8 = v9;
      }
      while (v9 + 80 != a2);
    }
  }
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    v19[9] = v2;
    v19[10] = v3;
    uint64_t v5 = result + 80;
    if (result + 80 != a2)
    {
      uint64_t v6 = (void *)(result + 152);
      do
      {
        uint64_t v7 = v5;
        if (*(float *)(result + 24) < *(float *)(result + 104))
        {
          *(_OWORD *)std::string __p = *(_OWORD *)v5;
          unint64_t v15 = *(void **)(v5 + 16);
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = 0;
          *(void *)uint64_t v5 = 0;
          *(_OWORD *)unint64_t v16 = *(_OWORD *)(result + 104);
          *(_OWORD *)&v16[12] = *(_OWORD *)(result + 116);
          long long v17 = *(_OWORD *)(result + 136);
          uint64_t v18 = *(void **)(result + 152);
          *(void *)(result + 144) = 0;
          *(void *)(result + 152) = 0;
          uint64_t v8 = v6;
          *(void *)(result + 136) = 0;
          do
          {
            uint64_t v9 = (void **)(v8 - 9);
            if (*((char *)v8 - 49) < 0) {
              operator delete(*v9);
            }
            *(_OWORD *)uint64_t v9 = *(_OWORD *)(v8 - 19);
            *(v8 - 7) = *(v8 - 17);
            *((unsigned char *)v8 - 129) = 0;
            *((unsigned char *)v8 - 152) = 0;
            *((_OWORD *)v8 - 3) = *((_OWORD *)v8 - 8);
            *(_OWORD *)((char *)v8 - 36) = *(_OWORD *)((char *)v8 - 116);
            std::vector<quasar::Token>::__vdeallocate((void **)v8 - 2);
            *((_OWORD *)v8 - 1) = *((_OWORD *)v8 - 6);
            uint64_t v10 = (void **)(v8 - 10);
            void *v8 = *(v8 - 10);
            *(v8 - 10) = 0;
            *(v8 - 12) = 0;
            *(v8 - 11) = 0;
            float v11 = *((float *)v8 - 52);
            v8 -= 10;
          }
          while (v11 < *(float *)v16);
          uint64_t v12 = v10 - 9;
          if (*((char *)v10 - 49) < 0) {
            operator delete(*v12);
          }
          uint64_t v13 = v10 - 6;
          *(_OWORD *)uint64_t v12 = *(_OWORD *)__p;
          *(v10 - 7) = v15;
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v16;
          *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)&v16[12];
          std::vector<quasar::Token>::__vdeallocate(v10 - 2);
          *((_OWORD *)v10 - 1) = v17;
          *uint64_t v10 = v18;
          uint64_t v18 = 0;
          long long v17 = 0uLL;
          v19[0] = (void **)&v17;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v19);
        }
        uint64_t v5 = v7 + 80;
        v6 += 10;
        uint64_t result = v7;
      }
      while (v7 + 80 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6 = *(float *)(a2 + 24);
  float v7 = *(float *)(a3 + 24);
  if (*(float *)(a1 + 24) < v6)
  {
    if (v6 < v7)
    {
      std::swap[abi:ne180100]<quasar::Alternative>((long long *)a1, (long long *)a3);
      return 1;
    }
    std::swap[abi:ne180100]<quasar::Alternative>((long long *)a1, (long long *)a2);
    if (*(float *)(a2 + 24) >= *(float *)(a3 + 24)) {
      return 1;
    }
    uint64_t v8 = (long long *)a2;
    uint64_t v9 = (long long *)a3;
LABEL_9:
    std::swap[abi:ne180100]<quasar::Alternative>(v8, v9);
    return 2;
  }
  if (v6 < v7)
  {
    std::swap[abi:ne180100]<quasar::Alternative>((long long *)a2, (long long *)a3);
    if (*(float *)(a1 + 24) >= *(float *)(a2 + 24)) {
      return 1;
    }
    uint64_t v8 = (long long *)a1;
    uint64_t v9 = (long long *)a2;
    goto LABEL_9;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Alternative *,std::__less<void,void> &>(uint64_t a1, long long *a2)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a1;
  uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v19[12] = *(_OWORD *)(a1 + 36);
  uint64_t v3 = (void **)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (*((float *)a2 - 14) >= *(float *)v19)
  {
    unint64_t v7 = a1 + 80;
    do
    {
      unint64_t v5 = v7;
      if (v7 >= (unint64_t)a2) {
        break;
      }
      float v8 = *(float *)(v7 + 24);
      v7 += 80;
    }
    while (v8 >= *(float *)v19);
  }
  else
  {
    uint64_t v4 = a1;
    do
    {
      unint64_t v5 = v4 + 80;
      float v6 = *(float *)(v4 + 104);
      v4 += 80;
    }
    while (v6 >= *(float *)v19);
  }
  if (v5 >= (unint64_t)a2)
  {
    uint64_t v9 = a2;
  }
  else
  {
    do
    {
      uint64_t v9 = a2 - 5;
      float v10 = *((float *)a2 - 14);
      a2 -= 5;
    }
    while (v10 < *(float *)v19);
  }
  while (v5 < (unint64_t)v9)
  {
    std::swap[abi:ne180100]<quasar::Alternative>((long long *)v5, v9);
    do
    {
      float v11 = *(float *)(v5 + 104);
      v5 += 80;
    }
    while (v11 >= *(float *)v19);
    do
    {
      float v12 = *((float *)v9 - 14);
      v9 -= 5;
    }
    while (v12 < *(float *)v19);
  }
  uint64_t v13 = (void **)(v5 - 80);
  if (v5 - 80 != a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v14 = *(_OWORD *)v13;
    *(void *)(a1 + 16) = *(void *)(v5 - 64);
    *(_OWORD *)a1 = v14;
    *(unsigned char *)(v5 - 57) = 0;
    *(unsigned char *)(v5 - 80) = 0;
    long long v15 = *(_OWORD *)(v5 - 56);
    *(_OWORD *)(a1 + 36) = *(_OWORD *)(v5 - 44);
    *(_OWORD *)(a1 + 24) = v15;
    std::vector<quasar::Token>::__vdeallocate(v3);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v5 - 24);
    *(void *)(a1 + 72) = *(void *)(v5 - 8);
    *(void *)(v5 - 24) = 0;
    *(void *)(v5 - 16) = 0;
    *(void *)(v5 - 8) = 0;
  }
  if (*(char *)(v5 - 57) < 0) {
    operator delete(*v13);
  }
  *(void *)(v5 - 64) = v18;
  *(_OWORD *)uint64_t v13 = *(_OWORD *)__p;
  *(_OWORD *)(v5 - 44) = *(_OWORD *)&v19[12];
  *(_OWORD *)(v5 - 56) = *(_OWORD *)v19;
  std::vector<quasar::Token>::__vdeallocate((void **)(v5 - 24));
  *(_OWORD *)(v5 - 24) = v20;
  *(void *)(v5 - 8) = v21;
  long long v20 = 0uLL;
  uint64_t v21 = 0;
  long long v22 = (void **)&v20;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v22);
  return v5;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Alternative *,std::__less<void,void> &>(uint64_t a1, long long *a2)
{
  uint64_t v3 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a1;
  uint64_t v20 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v4 = (_OWORD *)(a1 + 24);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v21[12] = *(_OWORD *)(a1 + 36);
  uint64_t v23 = *(void *)(a1 + 72);
  unint64_t v5 = (void **)(a1 + 56);
  long long v22 = *(_OWORD *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  do
  {
    float v6 = *(float *)(a1 + v3 + 104);
    v3 += 80;
  }
  while (*(float *)v21 < v6);
  unint64_t v7 = a1 + v3;
  if (v3 == 80)
  {
    while (v7 < (unint64_t)a2)
    {
      float v8 = a2 - 5;
      float v10 = *((float *)a2 - 14);
      a2 -= 5;
      if (*(float *)v21 < v10) {
        goto LABEL_9;
      }
    }
    float v8 = a2;
  }
  else
  {
    do
    {
      float v8 = a2 - 5;
      float v9 = *((float *)a2 - 14);
      a2 -= 5;
    }
    while (*(float *)v21 >= v9);
  }
LABEL_9:
  unint64_t v11 = a1 + v3;
  if (v7 < (unint64_t)v8)
  {
    float v12 = v8;
    do
    {
      std::swap[abi:ne180100]<quasar::Alternative>((long long *)v11, v12);
      do
      {
        float v13 = *(float *)(v11 + 104);
        v11 += 80;
      }
      while (*(float *)v21 < v13);
      do
      {
        float v14 = *((float *)v12 - 14);
        v12 -= 5;
      }
      while (*(float *)v21 >= v14);
    }
    while (v11 < (unint64_t)v12);
  }
  long long v15 = (void **)(v11 - 80);
  if (v11 - 80 != a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v16 = *(_OWORD *)v15;
    *(void *)(a1 + 16) = *(void *)(v11 - 64);
    *(_OWORD *)a1 = v16;
    *(unsigned char *)(v11 - 57) = 0;
    *(unsigned char *)(v11 - 80) = 0;
    long long v17 = *(_OWORD *)(v11 - 56);
    *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(v11 - 44);
    *uint64_t v4 = v17;
    std::vector<quasar::Token>::__vdeallocate(v5);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v11 - 24);
    *(void *)(a1 + 72) = *(void *)(v11 - 8);
    *(void *)(v11 - 24) = 0;
    *(void *)(v11 - 16) = 0;
    *(void *)(v11 - 8) = 0;
  }
  if (*(char *)(v11 - 57) < 0) {
    operator delete(*v15);
  }
  *(void *)(v11 - 64) = v20;
  *(_OWORD *)long long v15 = *(_OWORD *)__p;
  *(_OWORD *)(v11 - 44) = *(_OWORD *)&v21[12];
  *(_OWORD *)(v11 - 56) = *(_OWORD *)v21;
  std::vector<quasar::Token>::__vdeallocate((void **)(v11 - 24));
  *(_OWORD *)(v11 - 24) = v22;
  *(void *)(v11 - 8) = v23;
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  BOOL v24 = (void **)&v22;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v24);
  return v11 - 80;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a1 + 24) < *(float *)(a2 - 56))
      {
        std::swap[abi:ne180100]<quasar::Alternative>((long long *)a1, (long long *)(a2 - 80));
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a1 + 80, a2 - 80);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80);
      return 1;
    default:
      uint64_t v6 = a1 + 160;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a1 + 80, a1 + 160);
      uint64_t v7 = a1 + 240;
      if (a1 + 240 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    if (*(float *)(v6 + 24) < *(float *)(v7 + 24))
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v7;
      uint64_t v19 = *(void *)(v7 + 16);
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      *(_OWORD *)uint64_t v20 = *(_OWORD *)(v7 + 24);
      *(_OWORD *)&v20[12] = *(_OWORD *)(v7 + 36);
      long long v21 = *(_OWORD *)(v7 + 56);
      uint64_t v22 = *(void *)(v7 + 72);
      *(void *)(v7 + 56) = 0;
      *(void *)(v7 + 64) = 0;
      uint64_t v10 = v8;
      *(void *)(v7 + 72) = 0;
      while (1)
      {
        uint64_t v11 = v10;
        uint64_t v12 = a1 + v10;
        uint64_t v13 = a1 + v10 + 240;
        if (*(char *)(a1 + v10 + 263) < 0) {
          operator delete(*(void **)v13);
        }
        *(_OWORD *)uint64_t v13 = *(_OWORD *)(v12 + 160);
        *(void *)(v13 + 16) = *(void *)(v12 + 176);
        *(unsigned char *)(v12 + 183) = 0;
        *(unsigned char *)(v12 + 160) = 0;
        *(_OWORD *)(v12 + 264) = *(_OWORD *)(v12 + 184);
        *(_OWORD *)(v12 + 276) = *(_OWORD *)(v12 + 196);
        std::vector<quasar::Token>::__vdeallocate((void **)(v12 + 296));
        *(_OWORD *)(v12 + 296) = *(_OWORD *)(v12 + 216);
        *(void *)(v12 + 312) = *(void *)(v12 + 232);
        *(void *)(v12 + 224) = 0;
        *(void *)(v12 + 232) = 0;
        *(void *)(v12 + 216) = 0;
        if (v11 == -160) {
          break;
        }
        uint64_t v10 = v11 - 80;
        if (*(float *)(a1 + v11 + 104) >= *(float *)v20)
        {
          uint64_t v14 = a1 + v10 + 240;
          goto LABEL_14;
        }
      }
      uint64_t v14 = a1;
LABEL_14:
      if (*(char *)(v14 + 23) < 0) {
        operator delete(*(void **)v14);
      }
      long long v15 = (_OWORD *)(a1 + v11 + 184);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)__p;
      *(void *)(v14 + 16) = v19;
      *long long v15 = *(_OWORD *)v20;
      *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)&v20[12];
      std::vector<quasar::Token>::__vdeallocate((void **)(a1 + v11 + 216));
      uint64_t v16 = *((void *)&v21 + 1);
      *(void *)(a1 + v11 + 216) = v21;
      uint64_t v17 = v22;
      *(void *)(v14 + 64) = v16;
      *(void *)(v14 + 72) = v17;
      uint64_t v22 = 0;
      long long v21 = 0uLL;
      uint64_t v23 = (void **)&v21;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v23);
      if (++v9 == 8) {
        return v7 + 80 == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 80;
    v7 += 80;
    if (v7 == a2) {
      return 1;
    }
  }
}

void std::swap[abi:ne180100]<quasar::Alternative>(long long *a1, long long *a2)
{
  long long v4 = *a1;
  uint64_t v12 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)uint64_t v13 = *(long long *)((char *)a1 + 24);
  *(_OWORD *)&v13[12] = *(long long *)((char *)a1 + 36);
  unint64_t v5 = (long long *)((char *)a1 + 56);
  uint64_t v6 = *((void *)a1 + 7);
  uint64_t v16 = 0;
  uint64_t v14 = v6;
  long long v10 = a1[4];
  *(_OWORD *)std::string __p = v4;
  uint64_t v15 = *((void *)a1 + 8);
  *((void *)a1 + 8) = 0;
  *((void *)a1 + 9) = 0;
  *((void *)a1 + 7) = 0;
  uint64_t v7 = *((void *)a2 + 2);
  *a1 = *a2;
  *((void *)a1 + 2) = v7;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v8 = (long long *)((char *)a2 + 24);
  long long v9 = *(long long *)((char *)a2 + 24);
  *(long long *)((char *)a1 + 36) = *(long long *)((char *)a2 + 36);
  *(long long *)((char *)a1 + 24) = v9;
  std::vector<quasar::Token>::__vdeallocate((void **)a1 + 7);
  *unint64_t v5 = *(long long *)((char *)a2 + 56);
  *((void *)a1 + 9) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  if (*((char *)a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *a2 = *(_OWORD *)__p;
  *((void *)a2 + 2) = v12;
  _OWORD *v8 = *(_OWORD *)v13;
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)&v13[12];
  std::vector<quasar::Token>::__vdeallocate((void **)a2 + 7);
  *((void *)a2 + 7) = v6;
  a2[4] = v10;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  uint64_t v17 = (void **)&v14;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v17);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a2, a3);
  if (*(float *)(a3 + 24) < *(float *)(a4 + 24))
  {
    std::swap[abi:ne180100]<quasar::Alternative>((long long *)a3, (long long *)a4);
    if (*(float *)(a2 + 24) < *(float *)(a3 + 24))
    {
      std::swap[abi:ne180100]<quasar::Alternative>((long long *)a2, (long long *)a3);
      if (*(float *)(a1 + 24) < *(float *)(a2 + 24))
      {
        std::swap[abi:ne180100]<quasar::Alternative>((long long *)a1, (long long *)a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a2, a3, a4);
  if (*(float *)(a4 + 24) < *(float *)(a5 + 24))
  {
    std::swap[abi:ne180100]<quasar::Alternative>((long long *)a4, (long long *)a5);
    if (*(float *)(a3 + 24) < *(float *)(a4 + 24))
    {
      std::swap[abi:ne180100]<quasar::Alternative>((long long *)a3, (long long *)a4);
      if (*(float *)(a2 + 24) < *(float *)(a3 + 24))
      {
        std::swap[abi:ne180100]<quasar::Alternative>((long long *)a2, (long long *)a3);
        if (*(float *)(a1 + 24) < *(float *)(a2 + 24))
        {
          std::swap[abi:ne180100]<quasar::Alternative>((long long *)a1, (long long *)a2);
        }
      }
    }
  }
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 80;
    if (a2 - a1 >= 81)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)(a1 + 80 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a4, v9, v12);
        v12 -= 5;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*(float *)(a1 + 24) < *(float *)(v14 + 24))
        {
          std::swap[abi:ne180100]<quasar::Alternative>((long long *)v14, (long long *)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a4, v9, (long long *)a1);
        }
        v14 += 80;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 81)
    {
      unint64_t v15 = v8 / 0x50uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,quasar::Alternative *>(a1, v6, a4, v15);
        v6 -= 80;
      }
      while (v15-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22[11] = v4;
    v22[12] = v5;
    uint64_t v7 = (float *)a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 4)))
    {
      int64_t v11 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4)) | 1;
      uint64_t v12 = (float *)(a1 + 80 * v11);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4) + 2) < a3
        && v12[26] < *(float *)(a1 + 80 * v11 + 24))
      {
        v12 += 20;
        int64_t v11 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4) + 2;
      }
      if (*((float *)a4 + 6) >= v12[6])
      {
        *(_OWORD *)std::string __p = *a4;
        uint64_t v18 = *((void *)a4 + 2);
        *((void *)a4 + 1) = 0;
        *((void *)a4 + 2) = 0;
        *(void *)a4 = 0;
        *(_OWORD *)uint64_t v19 = *(long long *)((char *)a4 + 24);
        *(_OWORD *)&v19[12] = *(long long *)((char *)a4 + 36);
        long long v20 = *(long long *)((char *)a4 + 56);
        uint64_t v21 = *((void *)a4 + 9);
        *((void *)a4 + 7) = 0;
        *((void *)a4 + 8) = 0;
        *((void *)a4 + 9) = 0;
        do
        {
          uint64_t v13 = v12;
          if (*((char *)v7 + 23) < 0) {
            operator delete(*(void **)v7);
          }
          long long v14 = *(_OWORD *)v13;
          *((void *)v7 + 2) = *((void *)v13 + 2);
          *(_OWORD *)uint64_t v7 = v14;
          *((unsigned char *)v13 + 23) = 0;
          *(unsigned char *)uint64_t v13 = 0;
          long long v15 = *(_OWORD *)(v13 + 6);
          *(_OWORD *)(v7 + 9) = *(_OWORD *)(v13 + 9);
          *(_OWORD *)(v7 + 6) = v15;
          std::vector<quasar::Token>::__vdeallocate((void **)v7 + 7);
          *(_OWORD *)(v7 + 14) = *(_OWORD *)(v13 + 14);
          *((void *)v7 + 9) = *((void *)v13 + 9);
          *((void *)v13 + 7) = 0;
          *((void *)v13 + 8) = 0;
          *((void *)v13 + 9) = 0;
          if (v9 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = (float *)(a1 + 80 * v16);
          if (2 * v11 + 2 < a3 && v12[26] < *(float *)(a1 + 80 * v16 + 24))
          {
            v12 += 20;
            uint64_t v16 = 2 * v11 + 2;
          }
          uint64_t v7 = v13;
          int64_t v11 = v16;
        }
        while (*(float *)v19 >= v12[6]);
        if (*((char *)v13 + 23) < 0) {
          operator delete(*(void **)v13);
        }
        *((void *)v13 + 2) = v18;
        *(_OWORD *)uint64_t v13 = *(_OWORD *)__p;
        *(_OWORD *)(v13 + 6) = *(_OWORD *)v19;
        *(_OWORD *)(v13 + 9) = *(_OWORD *)&v19[12];
        std::vector<quasar::Token>::__vdeallocate((void **)v13 + 7);
        *(_OWORD *)(v13 + 14) = v20;
        *((void *)v13 + 9) = v21;
        long long v20 = 0uLL;
        uint64_t v21 = 0;
        v22[0] = (void **)&v20;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v22);
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    long long __p = *(_OWORD *)a1;
    uint64_t v16 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(_OWORD *)uint64_t v17 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)&v17[12] = *(_OWORD *)(a1 + 36);
    long long v18 = *(_OWORD *)(a1 + 56);
    uint64_t v19 = *(void *)(a1 + 72);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    uint64_t v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>((long long *)a1, a3, a4);
    uint64_t v8 = v7;
    int64_t v9 = (void **)(a2 - 80);
    int v10 = *((char *)v7 + 23);
    if (v7 == (long long *)(a2 - 80))
    {
      if (v10 < 0) {
        operator delete(*(void **)v7);
      }
      *((void *)v8 + 2) = v16;
      long long *v8 = __p;
      *(long long *)((char *)v8 + 24) = *(_OWORD *)v17;
      *(long long *)((char *)v8 + 36) = *(_OWORD *)&v17[12];
      std::vector<quasar::Token>::__vdeallocate((void **)v8 + 7);
      *(long long *)((char *)v8 + 56) = v18;
      *((void *)v8 + 9) = v19;
      long long v18 = 0uLL;
      uint64_t v19 = 0;
    }
    else
    {
      if (v10 < 0) {
        operator delete(*(void **)v7);
      }
      long long v11 = *(_OWORD *)v9;
      *((void *)v8 + 2) = *(void *)(a2 - 64);
      long long *v8 = v11;
      *(unsigned char *)(a2 - 57) = 0;
      *(unsigned char *)(a2 - 80) = 0;
      long long v12 = *(_OWORD *)(a2 - 56);
      *(long long *)((char *)v8 + 36) = *(_OWORD *)(a2 - 44);
      *(long long *)((char *)v8 + 24) = v12;
      std::vector<quasar::Token>::__vdeallocate((void **)v8 + 7);
      uint64_t v13 = (void *)(a2 - 24);
      *(long long *)((char *)v8 + 56) = *(_OWORD *)(a2 - 24);
      *((void *)v8 + 9) = *(void *)(a2 - 8);
      *uint64_t v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      uint64_t v14 = (uint64_t)(v8 + 5);
      if (*(char *)(a2 - 57) < 0) {
        operator delete(*v9);
      }
      *(_OWORD *)int64_t v9 = __p;
      *(void *)(a2 - 64) = v16;
      *(_OWORD *)(a2 - 56) = *(_OWORD *)v17;
      *(_OWORD *)(a2 - 44) = *(_OWORD *)&v17[12];
      std::vector<quasar::Token>::__vdeallocate((void **)(a2 - 24));
      *(_OWORD *)(a2 - 24) = v18;
      *(void *)(a2 - 8) = v19;
      uint64_t v19 = 0;
      long long v18 = 0uLL;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, v14, a3, 0xCCCCCCCCCCCCCCCDLL * ((v14 - a1) >> 4));
    }
    long long v20 = (void **)&v18;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

void sub_1B1E4F55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

long long *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = v5 + 1;
    int64_t v9 = &a1[5 * v5 + 5];
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v11 < a3 && *((float *)v9 + 26) < *((float *)&a1[5 * v8 + 1] + 2))
    {
      v9 += 5;
      uint64_t v5 = v11;
    }
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *v9;
    *((void *)a1 + 2) = *((void *)v9 + 2);
    *a1 = v12;
    *((unsigned char *)v9 + 23) = 0;
    *(unsigned char *)int64_t v9 = 0;
    long long v13 = *(long long *)((char *)v9 + 24);
    *(long long *)((char *)a1 + 36) = *(long long *)((char *)v9 + 36);
    *(long long *)((char *)a1 + 24) = v13;
    std::vector<quasar::Token>::__vdeallocate((void **)a1 + 7);
    *(long long *)((char *)a1 + 56) = *(long long *)((char *)v9 + 56);
    *((void *)a1 + 9) = *((void *)v9 + 9);
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 8) = 0;
    *((void *)v9 + 9) = 0;
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    v26[1] = v7;
    void v26[2] = v6;
    v26[13] = v4;
    v26[14] = v5;
    unint64_t v9 = (unint64_t)(a4 - 2) >> 1;
    if (*(float *)(a2 - 56) < *(float *)(a1 + 80 * v9 + 24))
    {
      uint64_t v10 = a2 - 80;
      *(_OWORD *)long long __p = *(_OWORD *)(a2 - 80);
      uint64_t v21 = *(void *)(a2 - 64);
      *(void *)(a2 - 72) = 0;
      *(void *)(a2 - 64) = 0;
      *(void *)(a2 - 80) = 0;
      *(_OWORD *)uint64_t v22 = *(_OWORD *)(a2 - 56);
      *(_OWORD *)&v22[12] = *(_OWORD *)(a2 - 44);
      uint64_t v11 = *(void *)(a2 - 16);
      uint64_t v19 = *(void *)(a2 - 24);
      uint64_t v23 = v19;
      uint64_t v24 = v11;
      uint64_t v18 = v11;
      uint64_t v12 = *(void *)(a2 - 8);
      uint64_t v25 = v12;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      *(void *)(a2 - 24) = 0;
      do
      {
        unint64_t v13 = v9;
        if (*(char *)(v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        uint64_t v14 = (long long *)(a1 + 80 * v13);
        long long v15 = *v14;
        *(void *)(v10 + 16) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v10 = v15;
        *((unsigned char *)v14 + 23) = 0;
        *(unsigned char *)uint64_t v14 = 0;
        long long v16 = *(long long *)((char *)v14 + 24);
        *(_OWORD *)(v10 + 36) = *(long long *)((char *)v14 + 36);
        *(_OWORD *)(v10 + 24) = v16;
        std::vector<quasar::Token>::__vdeallocate((void **)(v10 + 56));
        *(_OWORD *)(v10 + 56) = *(long long *)((char *)v14 + 56);
        *(void *)(v10 + 72) = *((void *)v14 + 9);
        *((void *)v14 + 8) = 0;
        *((void *)v14 + 9) = 0;
        *((void *)v14 + 7) = 0;
        if (!v13) {
          break;
        }
        unint64_t v9 = (v13 - 1) >> 1;
        uint64_t v10 = a1 + 80 * v13;
      }
      while (*(float *)v22 < *(float *)(a1 + 80 * v9 + 24));
      uint64_t v17 = (void *)(a1 + 80 * v13 + 64);
      if (*((char *)v14 + 23) < 0) {
        operator delete(*(void **)v14);
      }
      *uint64_t v14 = *(_OWORD *)__p;
      *((void *)v14 + 2) = v21;
      *(long long *)((char *)v14 + 24) = *(_OWORD *)v22;
      *(long long *)((char *)v14 + 36) = *(_OWORD *)&v22[12];
      std::vector<quasar::Token>::__vdeallocate((void **)v14 + 7);
      *((void *)v14 + 7) = v19;
      *uint64_t v17 = v18;
      *((void *)v14 + 9) = v12;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v23 = 0;
      v26[0] = (void **)&v23;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v26);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::Alternative>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::Alternative>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 80);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::Alternative>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v16 = (char *)operator new(0x78uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  *(void *)long long v16 = 0;
  *((void *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((void *)v16 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v16 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  long long v17 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v16 + 76) = *(_OWORD *)(a3 + 60);
  *((_OWORD *)v16 + 4) = v17;
  *((_OWORD *)v16 + 6) = *(_OWORD *)(a3 + 80);
  *((void *)v16 + 14) = *(void *)(a3 + 96);
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *uint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10) {
          v25 %= v10;
        }
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::Alternative>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::Alternative>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1B1E4FBF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::Alternative>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::Alternative>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::Alternative>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::Alternative>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::Alternative>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *std::vector<std::vector<unsigned long>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned long> const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  BOOL result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B1E4FCAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint8x8_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  long long v16 = &v10[24 * v9];
  *(void *)uint8x8_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1E4FDB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::Alternative>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<quasar::Alternative>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

long long *std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token*>,std::__wrap_iter<quasar::Token*>>(uint64_t *a1, long long *a2, const quasar::Token *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 5) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)a2) >> 5) >= a5)
      {
        uint64_t v21 = (uint64_t)a3 + 224 * a5;
      }
      else
      {
        uint64_t v21 = (uint64_t)a3 + 32 * ((uint64_t)(v12 - (void)a2) >> 5);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token*,quasar::Token*,quasar::Token*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<quasar::Token>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[14 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((uint64_t)v7, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 5);
      if (v14 > 0x124924924924924) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 5);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 5);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x92492492492492) {
        unint64_t v18 = 0x124924924924924;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        float v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v9, v18);
      }
      else {
        float v19 = 0;
      }
      unint64_t v22 = (std::string *)&v19[224 * v15];
      v26[0] = v19;
      v26[1] = v22;
      uint64_t v27 = v22;
      char v28 = &v19[224 * v18];
      uint64_t v23 = 224 * a5;
      uint64_t v24 = (std::string *)((char *)v22 + 224 * a5);
      do
      {
        quasar::Token::Token(v22, v7);
        unint64_t v22 = (std::string *)((char *)v22 + 224);
        uint64_t v7 = (const quasar::Token *)((char *)v7 + 224);
        v23 -= 224;
      }
      while (v23);
      uint64_t v27 = v24;
      unint64_t v5 = (long long *)std::vector<quasar::Token>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1B1E50044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

long long *std::vector<quasar::Token>::__move_range(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (long long *)((char *)a2 + v6 - a4);
  uint64_t v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v10 = (long long *)((char *)a2 + v6 - a4);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>(a1 + 16, v8, v10);
      v10 += 14;
      v8 += 224;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(a2, v7, v6);
}

uint64_t std::vector<quasar::Token>::__swap_out_circular_buffer(uint64_t *a1, void *a2, long long *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = (long long *)*a1;
  uint64_t v9 = v6;
  if ((long long *)*a1 != a3)
  {
    uint64_t v10 = a3;
    uint64_t v9 = a2[1];
    do
    {
      v9 -= 224;
      v10 -= 14;
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>(v7, v9, v10);
    }
    while (v10 != v8);
  }
  a2[1] = v9;
  uint64_t v11 = (long long *)a1[1];
  uint64_t v12 = a2[2];
  if (v11 != v3)
  {
    do
    {
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>(v7, v12, v3);
      v3 += 14;
      v12 += 224;
    }
    while (v3 != v11);
    uint64_t v9 = a2[1];
  }
  a2[2] = v12;
  uint64_t v13 = *a1;
  *a1 = v9;
  a2[1] = v13;
  uint64_t v14 = a1[1];
  a1[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = a1[2];
  a1[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return v6;
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(long long *a1, long long *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 14;
      a3 -= 224;
      quasar::Token::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

void std::vector<std::vector<std::vector<quasar::Token>>>::__assign_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<std::vector<quasar::Token>>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::vector<quasar::Token>> *,std::vector<std::vector<quasar::Token>> *,std::vector<std::vector<quasar::Token>> *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::vector<quasar::Token>> *,std::vector<std::vector<quasar::Token>> *,std::vector<std::vector<quasar::Token>> *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  unint64_t v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      float v19 = v16;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B1E503DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1E503E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::vector<quasar::Token>> *,std::vector<std::vector<quasar::Token>> *,std::vector<std::vector<quasar::Token>> *>(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t **)a4) {
        std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a4, *v5, v5[1], 0xAAAAAAAAAAAAAAABLL * (v5[1] - *v5));
      }
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>*,std::vector<std::vector<std::vector<quasar::Token>>>*>(void *result, uint64_t ***a2, uint64_t ***a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    BOOL result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*,std::vector<std::vector<std::vector<quasar::Token>>>*,std::vector<std::vector<std::vector<quasar::Token>>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1E504D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*,std::vector<std::vector<std::vector<quasar::Token>>>*,std::vector<std::vector<std::vector<quasar::Token>>>*>(uint64_t a1, uint64_t ***a2, uint64_t ***a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::vector<std::vector<quasar::Token>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1E5059C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t *quasar::QuantizationTool::LinearRegionDequantize@<X0>(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = a1[1] - *a1;
  int v25 = 0;
  BOOL result = std::vector<float>::vector(a6, v11, &v25);
  if (a2 < 1) {
    return result;
  }
  uint64_t v13 = 0;
  uint64_t v14 = *a5;
  uint64_t v15 = *result;
  do
  {
    if (a3 < 1) {
      goto LABEL_13;
    }
    uint64_t v16 = 0;
    char v17 = (unsigned __int8 *)(v10 + v13 * a3);
    do
    {
      char v18 = (float *)(v14 + 4 * (v16 & 0xFFFFFFFC));
      BOOL result = (uint64_t *)*v17;
      if ((int)result <= a4)
      {
        float v19 = *v18;
        float v20 = v18[1];
        double v21 = *v18;
        double v22 = (double)result;
        goto LABEL_9;
      }
      if (256 - a4 < (int)result)
      {
        float v19 = v18[2];
        float v20 = v18[3];
        double v21 = v19;
        double v22 = (double)((int)result - 192);
LABEL_9:
        double v23 = 1.0 / (double)a4 * v22;
        goto LABEL_11;
      }
      float v19 = v18[1];
      float v20 = v18[2];
      double v21 = v19;
      double v23 = 1.0 / (double)(256 - 2 * a4) * (double)((int)result - 64);
LABEL_11:
      float v24 = v21 + v23 * (float)(v20 - v19);
      *(float *)(v15 + v16) = v24;
      ++v17;
      v16 += 4;
    }
    while (4 * a3 != v16);
    v15 += v16;
LABEL_13:
    ++v13;
  }
  while (v13 != a2);
  return result;
}

void quasar::QuantizationTool::LinearRegionQuantize(void *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  unint64_t v9 = a2;
  LODWORD(__p) = 0;
  std::vector<float>::vector(&v76, a2, &__p);
  int v71 = a2;
  int v10 = a2 + (a2 < 0 ? 3 : 0);
  long long __p = 0;
  int v74 = 0;
  long long v75 = 0;
  size_t v11 = (uint64_t)(a1[1] - *a1) >> 2;
  v78[0] = 0;
  std::vector<unsigned char>::vector(v72, v11, v78);
  if (a3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if (v9 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v9;
    }
    uint64_t v70 = v14;
    do
    {
      if (v71)
      {
        uint64_t v15 = (_DWORD *)(*a1 + v12);
        uint64_t v16 = v76;
        uint64_t v17 = v70;
        do
        {
          *v16++ = *v15;
          v15 += a3;
          --v17;
        }
        while (v17);
      }
      std::__sort<std::__less<float,float> &,float *>();
      float v18 = *(float *)v76;
      float v19 = *((float *)v76 + ((uint64_t)v10 >> 2));
      float v20 = *((float *)v76 + 3 * ((uint64_t)v10 >> 2));
      float v21 = *(v77 - 1);
      double v23 = v74;
      double v22 = (char *)v75;
      if (v74 >= v75)
      {
        int v25 = (float *)__p;
        uint64_t v26 = ((char *)v74 - (unsigned char *)__p) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
          goto LABEL_94;
        }
        uint64_t v28 = (char *)v75 - (unsigned char *)__p;
        if (((char *)v75 - (unsigned char *)__p) >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75, v29);
          int v25 = (float *)__p;
          double v23 = v74;
        }
        else
        {
          int v30 = 0;
        }
        float v31 = (float *)&v30[4 * v26];
        *float v31 = v18;
        float v24 = v31 + 1;
        while (v23 != v25)
        {
          int v32 = *((_DWORD *)v23-- - 1);
          *((_DWORD *)v31-- - 1) = v32;
        }
        double v22 = &v30[4 * v29];
        long long __p = v31;
        int v74 = v24;
        long long v75 = (float *)v22;
        if (v25)
        {
          operator delete(v25);
          double v22 = (char *)v75;
        }
      }
      else
      {
        *int v74 = v18;
        float v24 = v23 + 1;
      }
      int v74 = v24;
      if (v24 >= (float *)v22)
      {
        uint64_t v34 = (float *)__p;
        uint64_t v35 = ((char *)v24 - (unsigned char *)__p) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          goto LABEL_94;
        }
        uint64_t v37 = v22 - (unsigned char *)__p;
        if (v37 >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75, v38);
          uint64_t v34 = (float *)__p;
          float v24 = v74;
        }
        else
        {
          uint64_t v39 = 0;
        }
        unint64_t v40 = (float *)&v39[4 * v35];
        *unint64_t v40 = v19;
        unint64_t v33 = v40 + 1;
        while (v24 != v34)
        {
          int v41 = *((_DWORD *)v24-- - 1);
          *((_DWORD *)v40-- - 1) = v41;
        }
        double v22 = &v39[4 * v38];
        long long __p = v40;
        int v74 = v33;
        long long v75 = (float *)v22;
        if (v34)
        {
          operator delete(v34);
          double v22 = (char *)v75;
        }
      }
      else
      {
        *float v24 = v19;
        unint64_t v33 = v24 + 1;
      }
      int v74 = v33;
      if (v33 >= (float *)v22)
      {
        long long v43 = (float *)__p;
        uint64_t v44 = ((char *)v33 - (unsigned char *)__p) >> 2;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62) {
          goto LABEL_94;
        }
        uint64_t v46 = v22 - (unsigned char *)__p;
        if (v46 >> 1 > v45) {
          unint64_t v45 = v46 >> 1;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47)
        {
          long long v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75, v47);
          long long v43 = (float *)__p;
          unint64_t v33 = v74;
        }
        else
        {
          long long v48 = 0;
        }
        long long v49 = (float *)&v48[4 * v44];
        float *v49 = v20;
        long long v42 = v49 + 1;
        while (v33 != v43)
        {
          int v50 = *((_DWORD *)v33-- - 1);
          *((_DWORD *)v49-- - 1) = v50;
        }
        double v22 = &v48[4 * v47];
        long long __p = v49;
        int v74 = v42;
        long long v75 = (float *)v22;
        if (v43)
        {
          operator delete(v43);
          double v22 = (char *)v75;
        }
      }
      else
      {
        *unint64_t v33 = v20;
        long long v42 = v33 + 1;
      }
      int v74 = v42;
      if (v42 >= (float *)v22)
      {
        unint64_t v52 = (float *)__p;
        uint64_t v53 = ((char *)v42 - (unsigned char *)__p) >> 2;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 62) {
LABEL_94:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v55 = v22 - (unsigned char *)__p;
        if (v55 >> 1 > v54) {
          unint64_t v54 = v55 >> 1;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56)
        {
          long long v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75, v56);
          unint64_t v52 = (float *)__p;
          long long v42 = v74;
        }
        else
        {
          long long v57 = 0;
        }
        long long v58 = (float *)&v57[4 * v53];
        *long long v58 = v21;
        uint64_t v51 = v58 + 1;
        while (v42 != v52)
        {
          int v59 = *((_DWORD *)v42-- - 1);
          *((_DWORD *)v58-- - 1) = v59;
        }
        long long __p = v58;
        int v74 = v51;
        long long v75 = (float *)&v57[4 * v56];
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        float *v42 = v21;
        uint64_t v51 = v42 + 1;
      }
      int v74 = v51;
      if (v71)
      {
        uint64_t v60 = v13;
        uint64_t v61 = v70;
        do
        {
          float v62 = *(float *)(*a1 + 4 * v60);
          int v63 = (int)((float)((float)((float)(v62 - v20) / (float)(v21 - v20)) * (float)(a4 - 1)) + 0.5);
          int v64 = (v63 & ~(v63 >> 31)) - a4 + 256;
          if (v64 >= 255) {
            LOBYTE(v64) = -1;
          }
          int v65 = (int)((float)((float)((float)(v62 - v19) / (float)(v20 - v19)) * (float)(256 - 2 * a4)) + 0.5);
          int v66 = (v65 & ~(v65 >> 31)) + a4;
          if (v66 >= 256 - a4) {
            LOBYTE(v66) = -(char)a4;
          }
          if (v62 < v20) {
            LOBYTE(v64) = v66;
          }
          double v67 = (float)((float)((float)(v62 - v18) / (float)(v19 - v18)) * (float)a4) + 0.5;
          int v68 = (int)v67 & ~((int)v67 >> 31);
          if (v68 >= a4) {
            LOBYTE(v68) = a4;
          }
          if (v62 < v19) {
            LOBYTE(v64) = v68;
          }
          *((unsigned char *)v72[0] + v60) = v64;
          v60 += a3;
          --v61;
        }
        while (v61);
      }
      ++v13;
      v12 += 4;
    }
    while (v13 != a3);
  }
  std::pair<std::vector<float>,std::vector<unsigned char>>::pair[abi:ne180100]<std::vector<float>&,std::vector<unsigned char>&,0>(a5, (uint64_t)&__p, (uint64_t)v72);
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  if (__p)
  {
    int v74 = (float *)__p;
    operator delete(__p);
  }
  if (v76)
  {
    long long v77 = (float *)v76;
    operator delete(v76);
  }
}

void sub_1B1E50C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *quasar::QuantizationTool::SimpleDequantize@<X0>(uint64_t *result@<X0>, void *a2@<X8>, float a3@<S0>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (char *)*result;
  uint64_t v4 = (char *)result[1];
  uint64_t v8 = a2;
  if (v3 != v4)
  {
    double v5 = 1.0 / a3;
    do
    {
      float v6 = v5 * (double)*v3;
      float v7 = v6;
      BOOL result = std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&v8, &v7);
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_1B1E50D68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t **quasar::QuantizationTool::SimpleQuantizeWithRatio@<X0>(unint64_t **result@<X0>, unint64_t *a2@<X8>, float a3@<S0>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (float *)*result;
  uint64_t v4 = (float *)result[1];
  for (uint64_t i = a2; v3 != v4; ++v3)
  {
    char v6 = (int)(float)(*v3 * a3);
    BOOL result = std::back_insert_iterator<std::vector<signed char>>::operator=[abi:ne180100](&i, &v6);
  }
  return result;
}

void sub_1B1E50E00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::vector<float>,std::vector<unsigned char>>::pair[abi:ne180100]<std::vector<float>&,std::vector<unsigned char>&,0>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  return a1;
}

void sub_1B1E50E78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    char v6 = result;
    BOOL result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1E50EF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    char v6 = result;
    BOOL result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1E50F70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  double v5 = *(_DWORD **)(*a1 + 8);
  char v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    size_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v12);
      size_t v8 = *(_DWORD **)v4;
      double v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *double v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

unint64_t **std::back_insert_iterator<std::vector<signed char>>::operator=[abi:ne180100](unint64_t **a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  char v6 = (unsigned char *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    uint64_t v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      uint64_t v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      char v6 = (unsigned char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *char v6 = *a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

void *quasar::BasicTokenizer::BasicTokenizer(void *a1, long long *a2)
{
  *a1 = &unk_1F0A526D8;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void quasar::BasicTokenizer::~BasicTokenizer(void **this)
{
  *this = &unk_1F0A526D8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A526D8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::BasicTokenizer::tokenize(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  quasar::trim(&v6);
  std::string::size_type size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
  if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v6.__r_.__value_.__l.__size_;
  }
  if (size) {
    quasar::split((uint64_t)&v6, (uint64_t *)(a1 + 8), 1, (unint64_t)&v5);
  }
  if ((*((unsigned char *)&v6.__r_.__value_.__s + 23) & 0x80) != 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1B1E51540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a18);
  a18 = v19 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (*(char *)(v19 - 57) < 0) {
    operator delete(*(void **)(v19 - 80));
  }
  _Unwind_Resume(a1);
}

float std::vector<quasar::TextTokenizer::TokenString>::__construct_one_at_end[abi:ne180100]<quasar::TextTokenizer::TokenString const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>((std::string *)v4, *(long long **)a2, *(long long **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  float result = *(float *)(a2 + 24);
  *(float *)(v4 + 24) = result;
  *(void *)(a1 + 8) = v4 + 32;
  return result;
}

void sub_1B1E51640(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TextTokenizer::TokenString>::__push_back_slow_path<quasar::TextTokenizer::TokenString const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = (std::string *)&v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  char v16 = &v10[32 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>(v11, *(long long **)a2, *(long long **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  LODWORD(v11[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  uint64_t v15 = (std::string *)((char *)v15 + 32);
  std::vector<quasar::TextTokenizer::TokenString>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::TokenString>::~__split_buffer(v14);
  return v12;
}

void sub_1B1E51734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::TokenString>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TextTokenizer::TokenString>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TextTokenizer::TokenString>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TextTokenizer::TokenString>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 4;
  }
}

void **std::__split_buffer<quasar::TextTokenizer::TokenString>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::TextTokenizer::TokenString>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 32);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

kaldi::DecodableMatrixScaledMapped *kaldi::DecodableMatrixScaledMapped::DecodableMatrixScaledMapped(kaldi::DecodableMatrixScaledMapped *this, uint64_t a2, uint64_t a3, int a4, float a5)
{
  *(void *)this = &unk_1F0A48170;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a3;
  *((float *)this + 6) = a5;
  *((unsigned char *)this + 28) = 0;
  if (a4) {
    kaldi::DecodableMatrixScaledMapped::ValidateLikesAndPdfs(this);
  }
  return this;
}

void sub_1B1E519D0(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::DecodableMatrixScaledMapped::ValidateLikesAndPdfs(kaldi::DecodableMatrixScaledMapped *this)
{
  uint64_t result = kaldi::MatrixBase<float>::NumCols(*((void *)this + 2));
  if (result != *(_DWORD *)(*((void *)this + 1) + 240))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"DecodableMatrixScaledMapped: mismatch, matrix has ", 50);
    kaldi::MatrixBase<float>::NumCols(*((void *)this + 2));
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" columns but transition-model has ", 34);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, " pdf-ids.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  return result;
}

uint64_t kaldi::DecodableMatrixScaledMapped::NumFrames(kaldi::DecodableMatrixScaledMapped *this)
{
  return kaldi::MatrixBase<float>::NumRows(*((void *)this + 2));
}

BOOL kaldi::DecodableMatrixScaledMapped::IsLastFrame(kaldi::DecodableMatrixScaledMapped *this, int a2)
{
  return (*(unsigned int (**)(kaldi::DecodableMatrixScaledMapped *))(*(void *)this + 104))(this) - 1 == a2;
}

BOOL kaldi::DecodableMatrixScaledMapped::IsLastFrameNoBlocking(kaldi::DecodableMatrixScaledMapped *this, int a2)
{
  return (*(unsigned int (**)(kaldi::DecodableMatrixScaledMapped *))(*(void *)this + 104))(this) - 1 == a2;
}

float kaldi::DecodableMatrixScaledMapped::LogLikelihood(kaldi::DecodableMatrixScaledMapped *this, int a2, int a3)
{
  return *((float *)this + 6)
       * *(float *)(**((void **)this + 2)
                  + 4 * *(_DWORD *)(*((void *)this + 2) + 16) * a2
                  + 4 * *(int *)(*(void *)(*((void *)this + 1) + 96) + 4 * a3));
}

uint64_t kaldi::DecodableMatrixScaledMapped::NumIndices(kaldi::DecodableMatrixScaledMapped *this)
{
  return ((*(void *)(*((void *)this + 1) + 152) - *(void *)(*((void *)this + 1) + 144)) >> 2)
       - 1;
}

void kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped(kaldi::DecodableMatrixScaledMapped *this)
{
  *(void *)this = &unk_1F0A48170;
  if (*((unsigned char *)this + 28))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = kaldi::Matrix<float>::~Matrix(v2);
      MEMORY[0x1B3EA8670](v3, 0x1080C40EB13E0A1);
    }
  }
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::DecodableMatrixScaledMappedLazyNnet1::DecodableMatrixScaledMappedLazyNnet1(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, int a6, int a7, float a8)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(float *)(a1 + 24) = a8;
  *(unsigned char *)(a1 + 28) = 0;
  *(void *)a1 = &unk_1F0A48618;
  uint64_t v9 = a4[1];
  *(void *)(a1 + 32) = *a4;
  *(void *)(a1 + 40) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a5[1];
  *(void *)(a1 + 48) = *a5;
  *(void *)(a1 + 56) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 64) = a6 + 1;
  *(void *)(a1 + 72) = a7;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>>>>::unordered_map(a1 + 80, 0, &v13, &v12);
  *(void *)(a1 + 128) = a1 + 128;
  *(void *)(a1 + 136) = a1 + 128;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = &unk_1F0A517C0;
  kaldi::CuVector<float>::Resize(a1 + 152, 1, 0);
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return a1;
}

void sub_1B1E51DB8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  kaldi::CuVector<float>::~CuVector(v5);
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear(v3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped(v1);
  _Unwind_Resume(a1);
}

float kaldi::DecodableMatrixScaledMappedLazyNnet1::LogLikelihood(kaldi::DecodableMatrixScaledMappedLazyNnet1 *this, int a2, int a3)
{
  uint64_t v4 = (a2 / *((_DWORD *)this + 16) * *((_DWORD *)this + 16));
  uint64_t v5 = *(unsigned int *)(*(void *)(*((void *)this + 1) + 96) + 4 * a3);
  if (*((void *)this + 6))
  {
    uint64_t v6 = operator new(8uLL);
    char v16 = 0;
    uint64_t v17 = v6;
    *uint64_t v6 = v4 | (v5 << 32);
    float v18 = v6 + 1;
    uint64_t v19 = v6 + 1;
    if (!kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get((uint64_t)this + 72, (uint64_t)&v17, &v16))
    {
      char v16 = kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace((unint64_t *)this + 9, (uint64_t)&v17);
      kaldi::CuVector<float>::Resize((uint64_t)v16, 1, 0);
      uint64_t v7 = *((void *)this + 2);
      uint64_t v8 = *(void *)v7;
      int v9 = *(_DWORD *)(v7 + 16);
      void v14[2] = 0;
      v14[0] = v8 + 4 * v9 * (int)v4;
      v14[1] = kaldi::MatrixBase<float>::NumCols(v7);
      kaldi::CuVector<float>::CuVector(v15, v14, 0);
      float v10 = (*(float (**)(void, void *, uint64_t))(**((void **)this + 6) + 136))(*((void *)this + 6), v15, v5);
      unint64_t v11 = v16;
      *(float *)v16[1] = v10;
      kaldi::nnet1::PdfPrior::SubtractLogpostForPdf(*((void *)this + 4), v5, (uint64_t)v11);
      kaldi::CuVectorBase<float>::Scale((uint64_t)v16, *((float *)this + 6));
      kaldi::CuVector<float>::~CuVector(v15);
    }
    float v12 = *(float *)v16[1];
    if (v17)
    {
      float v18 = v17;
      operator delete(v17);
    }
  }
  else
  {
    **((_DWORD **)this + 20) = *(_DWORD *)(**((void **)this + 2)
                                         + 4 * *(_DWORD *)(*((void *)this + 2) + 16) * (int)v4
                                         + 4 * (int)v5);
    kaldi::nnet1::PdfPrior::SubtractLogpostForPdf(*((void *)this + 4), v5, (uint64_t)this + 152);
    kaldi::CuVectorBase<float>::Scale((uint64_t)this + 152, *((float *)this + 6));
    return **((float **)this + 20);
  }
  return v12;
}

void sub_1B1E51FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::DecodableMatrixScaledMappedLazyNnet1::ValidateLikesAndPdfs(kaldi::DecodableMatrixScaledMappedLazyNnet1 *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 176))(v2, 0);
  }
  else {
    uint64_t result = kaldi::MatrixBase<float>::NumCols(*((void *)this + 2));
  }
  if (result != *(_DWORD *)(*((void *)this + 1) + 240))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"DecodableMatrixScaledMapped: mismatch, matrix has ", 50);
    (*(void (**)(void, void))(**((void **)this + 6) + 176))(*((void *)this + 6), 0);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" columns but transition-model has ", 34);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " pdf-ids.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return result;
}

void kaldi::DecodableMatrixScaledMappedLazyNnet1::~DecodableMatrixScaledMappedLazyNnet1(kaldi::DecodableMatrixScaledMappedLazyNnet1 *this)
{
  *(void *)this = &unk_1F0A48618;
  kaldi::CuVector<float>::~CuVector((void *)this + 19);
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear((uint64_t *)this + 16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 80);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F0A48618;
  kaldi::CuVector<float>::~CuVector((void *)this + 19);
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear((uint64_t *)this + 16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 80);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::SeevaStepInferenceTensorNames::BuildStateTensorNames(kaldi::quasar::SeevaStepInferenceTensorNames *this)
{
  v89[2] = *MEMORY[0x1E4F143B8];
  if (*((int *)this + 84) >= 1)
  {
    int v2 = 0;
    long long v84 = (char *)this + 72;
    long long v85 = (char *)this + 48;
    long long v80 = (std::allocator<std::string> *)((char *)this + 232);
    long long v81 = (std::vector<std::string> *)((char *)this + 240);
    long long v82 = (std::vector<std::string> *)((char *)this + 216);
    uint64_t v3 = (std::allocator<std::string> *)((char *)this + 256);
    do
    {
      std::to_string((std::string *)&v86, v2);
      uint64_t v4 = v3;
      char v5 = *((unsigned char *)this + 71);
      if (v5 >= 0) {
        uint64_t v6 = v85;
      }
      else {
        uint64_t v6 = (const std::string::value_type *)*((void *)this + 6);
      }
      if (v5 >= 0) {
        std::string::size_type v7 = *((unsigned __int8 *)this + 71);
      }
      else {
        std::string::size_type v7 = *((void *)this + 7);
      }
      uint64_t v8 = std::string::insert((std::string *)&v86, 0, v6, v7);
      std::string::size_type v9 = v8->__r_.__value_.__r.__words[0];
      __p[0] = (void *)v8->__r_.__value_.__l.__size_;
      *(void **)((char *)__p + 7) = *(void **)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
      char v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v86.__end_) < 0) {
        operator delete(v86.__first_);
      }
      std::to_string((std::string *)&v86, v2);
      char v11 = *((unsigned char *)this + 95);
      if (v11 >= 0) {
        float v12 = v84;
      }
      else {
        float v12 = (const std::string::value_type *)*((void *)this + 9);
      }
      if (v11 >= 0) {
        std::string::size_type v13 = *((unsigned __int8 *)this + 95);
      }
      else {
        std::string::size_type v13 = *((void *)this + 10);
      }
      long long v14 = std::string::insert((std::string *)&v86, 0, v12, v13);
      std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
      v89[0] = v14->__r_.__value_.__l.__size_;
      *(void *)((char *)v89 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v86.__end_) < 0) {
        operator delete(v86.__first_);
      }
      unint64_t v17 = *((void *)this + 28);
      unint64_t v18 = *((void *)this + 29);
      if (v17 >= v18)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (unint64_t)v82->__begin_) >> 3);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (unint64_t)v82->__begin_) >> 3);
        if (2 * v22 > v21) {
          unint64_t v21 = 2 * v22;
        }
        if (v22 >= 0x555555555555555) {
          unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v23 = v21;
        }
        v86.__end_cap_.__value_ = v80;
        if (v23) {
          float v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v80, v23);
        }
        else {
          float v24 = 0;
        }
        int v25 = v24 + v20;
        v86.__first_ = v24;
        v86.__begin_ = v25;
        v86.__end_cap_.__value_ = &v24[v23];
        v25->__r_.__value_.__r.__words[0] = v9;
        v25->__r_.__value_.__l.__size_ = (std::string::size_type)__p[0];
        *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__p + 7);
        *((unsigned char *)&v25->__r_.__value_.__s + 23) = v10;
        __p[0] = 0;
        *(void **)((char *)__p + 7) = 0;
        v86.__end_ = v25 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(v82, &v86);
        unint64_t v19 = *((void *)this + 28);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v86);
      }
      else
      {
        *(void *)unint64_t v17 = v9;
        *(void **)(v17 + 8) = __p[0];
        *(void **)(v17 + 15) = *(void **)((char *)__p + 7);
        *(unsigned char *)(v17 + 23) = v10;
        __p[0] = 0;
        *(void **)((char *)__p + 7) = 0;
        unint64_t v19 = v17 + 24;
        *((void *)this + 28) = v17 + 24;
      }
      uint64_t v3 = v4;
      *((void *)this + 28) = v19;
      unint64_t v26 = *((void *)this + 31);
      unint64_t v27 = *((void *)this + 32);
      if (v26 >= v27)
      {
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (unint64_t)v81->__begin_) >> 3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (unint64_t)v81->__begin_) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v31;
        }
        v86.__end_cap_.__value_ = v4;
        if (v33)
        {
          uint64_t v34 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v33);
          uint64_t v3 = v4;
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v35 = v34 + v30;
        v86.__first_ = v34;
        v86.__begin_ = v35;
        v86.__end_cap_.__value_ = &v34[v33];
        std::string::size_type v36 = v89[0];
        v35->__r_.__value_.__r.__words[0] = v15;
        v35->__r_.__value_.__l.__size_ = v36;
        *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v89 + 7);
        *((unsigned char *)&v35->__r_.__value_.__s + 23) = v16;
        v86.__end_ = v35 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(v81, &v86);
        unint64_t v29 = *((void *)this + 31);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v86);
      }
      else
      {
        uint64_t v28 = v89[0];
        *(void *)unint64_t v26 = v15;
        *(void *)(v26 + 8) = v28;
        *(void *)(v26 + 15) = *(void *)((char *)v89 + 7);
        *(unsigned char *)(v26 + 23) = v16;
        unint64_t v29 = v26 + 24;
        *((void *)this + 31) = v26 + 24;
      }
      *((void *)this + 31) = v29;
      ++v2;
    }
    while (v2 < *((_DWORD *)this + 84));
  }
  if (*((int *)this + 85) >= 1)
  {
    int v37 = 0;
    unint64_t v38 = (void *)((char *)this + 264);
    long long v83 = (std::vector<std::string> *)((char *)this + 288);
    uint64_t v39 = (std::allocator<std::string> *)((char *)this + 304);
    do
    {
      std::to_string((std::string *)&v86, v37);
      unint64_t v40 = v39;
      char v41 = *((unsigned char *)this + 191);
      if (v41 >= 0) {
        long long v42 = (char *)this + 168;
      }
      else {
        long long v42 = (const std::string::value_type *)*((void *)this + 21);
      }
      if (v41 >= 0) {
        std::string::size_type v43 = *((unsigned __int8 *)this + 191);
      }
      else {
        std::string::size_type v43 = *((void *)this + 22);
      }
      uint64_t v44 = std::string::insert((std::string *)&v86, 0, v42, v43);
      std::string::size_type v45 = v44->__r_.__value_.__r.__words[0];
      v89[0] = v44->__r_.__value_.__l.__size_;
      *(void *)((char *)v89 + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
      char v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v86.__end_) < 0) {
        operator delete(v86.__first_);
      }
      std::to_string((std::string *)&v86, v37);
      char v47 = *((unsigned char *)this + 215);
      if (v47 >= 0) {
        long long v48 = (char *)this + 192;
      }
      else {
        long long v48 = (const std::string::value_type *)*((void *)this + 24);
      }
      if (v47 >= 0) {
        std::string::size_type v49 = *((unsigned __int8 *)this + 215);
      }
      else {
        std::string::size_type v49 = *((void *)this + 25);
      }
      int v50 = std::string::insert((std::string *)&v86, 0, v48, v49);
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      std::string::size_type v88 = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v86.__end_) < 0) {
        operator delete(v86.__first_);
      }
      for (uint64_t i = (uint64_t *)*((void *)this + 44); i; uint64_t i = (uint64_t *)*i)
      {
        int v53 = *((_DWORD *)i + 7);
        if (v37 >= v53)
        {
          if (v53 >= v37)
          {
            unint64_t v54 = *((void *)this + 40);
            if (v54 >= *((void *)this + 41))
            {
              uint64_t v56 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 39, (long long *)__p);
            }
            else
            {
              if (SHIBYTE(v88) < 0)
              {
                std::string::__init_copy_ctor_external(*((std::string **)this + 40), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                long long v55 = *(_OWORD *)__p;
                *(void *)(v54 + 16) = v88;
                *(_OWORD *)unint64_t v54 = v55;
              }
              uint64_t v56 = v54 + 24;
              *((void *)this + 40) = v54 + 24;
            }
            *((void *)this + 40) = v56;
            break;
          }
          ++i;
        }
      }
      unint64_t v57 = *((void *)this + 34);
      unint64_t v58 = *((void *)this + 35);
      if (v57 >= v58)
      {
        unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *v38) >> 3);
        unint64_t v62 = v61 + 1;
        if (v61 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *v38) >> 3);
        if (2 * v63 > v62) {
          unint64_t v62 = 2 * v63;
        }
        if (v63 >= 0x555555555555555) {
          unint64_t v64 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v64 = v62;
        }
        v86.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 280);
        if (v64) {
          int v65 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 280, v64);
        }
        else {
          int v65 = 0;
        }
        int v66 = v65 + v61;
        v86.__first_ = v65;
        v86.__begin_ = v66;
        v86.__end_cap_.__value_ = &v65[v64];
        std::string::size_type v67 = v89[0];
        v66->__r_.__value_.__r.__words[0] = v45;
        v66->__r_.__value_.__l.__size_ = v67;
        *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v89 + 7);
        *((unsigned char *)&v66->__r_.__value_.__s + 23) = v46;
        v89[0] = 0;
        *(void *)((char *)v89 + 7) = 0;
        v86.__end_ = v66 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)this + 11, &v86);
        unint64_t v60 = *((void *)this + 34);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v86);
      }
      else
      {
        uint64_t v59 = v89[0];
        *(void *)unint64_t v57 = v45;
        *(void *)(v57 + 8) = v59;
        *(void *)(v57 + 15) = *(void *)((char *)v89 + 7);
        *(unsigned char *)(v57 + 23) = v46;
        v89[0] = 0;
        *(void *)((char *)v89 + 7) = 0;
        unint64_t v60 = v57 + 24;
        *((void *)this + 34) = v57 + 24;
      }
      uint64_t v39 = v40;
      *((void *)this + 34) = v60;
      unint64_t v69 = *((void *)this + 37);
      unint64_t v68 = *((void *)this + 38);
      if (v69 >= v68)
      {
        unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - (unint64_t)v83->__begin_) >> 3);
        unint64_t v72 = v71 + 1;
        if (v71 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (unint64_t)v83->__begin_) >> 3);
        if (2 * v73 > v72) {
          unint64_t v72 = 2 * v73;
        }
        if (v73 >= 0x555555555555555) {
          unint64_t v74 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v74 = v72;
        }
        v86.__end_cap_.__value_ = v40;
        if (v74)
        {
          long long v75 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v40, v74);
          uint64_t v39 = v40;
        }
        else
        {
          long long v75 = 0;
        }
        uint64_t v76 = v75 + v71;
        v86.__first_ = v75;
        v86.__begin_ = v76;
        v86.__end_cap_.__value_ = &v75[v74];
        long long v77 = *(_OWORD *)__p;
        v76->__r_.__value_.__r.__words[2] = v88;
        *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
        __p[1] = 0;
        std::string::size_type v88 = 0;
        __p[0] = 0;
        v86.__end_ = v76 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(v83, &v86);
        uint64_t v78 = *((void *)this + 37);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v86);
        int v79 = SHIBYTE(v88);
        *((void *)this + 37) = v78;
        if (v79 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v70 = *(_OWORD *)__p;
        *(void *)(v69 + 16) = v88;
        *(_OWORD *)unint64_t v69 = v70;
        *((void *)this + 37) = v69 + 24;
      }
      ++v37;
    }
    while (v37 < *((_DWORD *)this + 85));
  }
}

void sub_1B1E52920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__split_buffer<std::wstring> *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__pa,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  *(void *)(v27 + 320) = v30;
  if (a27 < 0) {
    operator delete(__pa);
  }
  if (v28 < 0) {
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::SeevaStepInference::SeevaStepInference(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, long long *a5)
{
  *(void *)a1 = &unk_1F0A50C80;
  uint64_t v6 = *a2;
  *a2 = 0;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = &unk_1F0A51028;
  long long v8 = *(_OWORD *)(a4 + 8);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a4 + 24);
  *(_OWORD *)(a1 + 32) = v8;
  long long v9 = *(_OWORD *)(a4 + 32);
  *(void *)(a1 + 72) = *(void *)(a4 + 48);
  *(_OWORD *)(a1 + 56) = v9;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 32) = 0;
  long long v10 = *(_OWORD *)(a4 + 56);
  *(void *)(a1 + 96) = *(void *)(a4 + 72);
  *(_OWORD *)(a1 + 80) = v10;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = 0;
  *(void *)(a4 + 56) = 0;
  *(void *)(a1 + 104) = *(void *)(a4 + 80);
  long long v11 = *(_OWORD *)(a4 + 88);
  *(void *)(a1 + 128) = *(void *)(a4 + 104);
  *(_OWORD *)(a1 + 112) = v11;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 104) = 0;
  *(void *)(a4 + 88) = 0;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a4 + 112);
  long long v12 = *(_OWORD *)(a4 + 120);
  *(void *)(a1 + 160) = *(void *)(a4 + 136);
  *(_OWORD *)(a1 + 144) = v12;
  *(void *)(a4 + 128) = 0;
  *(void *)(a4 + 136) = 0;
  *(void *)(a4 + 120) = 0;
  *(void *)(a1 + 24) = &unk_1F0A51328;
  long long v13 = *(_OWORD *)(a4 + 144);
  long long v14 = *(_OWORD *)(a4 + 160);
  long long v15 = *(_OWORD *)(a4 + 176);
  *(void *)(a1 + 216) = *(void *)(a4 + 192);
  *(_OWORD *)(a1 + 200) = v15;
  *(_OWORD *)(a1 + 184) = v14;
  *(_OWORD *)(a1 + 168) = v13;
  char v16 = (kaldi::quasar::SeevaStepInferenceTensorNames *)(a1 + 224);
  kaldi::quasar::SeevaStepInferenceTensorNames::SeevaStepInferenceTensorNames(a1 + 224, a5);
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  if (!*(unsigned char *)(a1 + 592))
  {
    kaldi::quasar::SeevaStepInferenceTensorNames::BuildStateTensorNames(v16);
    *(unsigned char *)(a1 + 592) = 1;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 600), *(std::string **)(a1 + 464), *(long long **)(a1 + 472), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 472) - *(void *)(a1 + 464)) >> 3));
  unint64_t v17 = (long long *)(a1 + 248);
  unint64_t v18 = *(void *)(a1 + 608);
  if (v18 >= *(void *)(a1 + 616))
  {
    uint64_t v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 600), v17);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 600, v17);
    uint64_t v19 = v18 + 24;
  }
  *(void *)(a1 + 608) = v19;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 624), *(std::string **)(a1 + 512), *(long long **)(a1 + 520), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 520) - *(void *)(a1 + 512)) >> 3));
  unint64_t v20 = (long long *)(a1 + 368);
  unint64_t v21 = *(void *)(a1 + 632);
  if (v21 >= *(void *)(a1 + 640))
  {
    uint64_t v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 624), v20);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 624, v20);
    uint64_t v22 = v21 + 24;
  }
  *(void *)(a1 + 632) = v22;
  return a1;
}

void sub_1B1E52C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  long long v15 = v14;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v15;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::quasar::SeevaStepInferenceTensorNames::~SeevaStepInferenceTensorNames(v13);
  kaldi::quasar::SeevaStepInferenceConfig::~SeevaStepInferenceConfig(v12);
  uint64_t v17 = *(void *)(v10 + 16);
  *(void *)(v10 + 16) = 0;
  if (v17) {
    kaldi::quasar::SeevaStepInference::SeevaStepInference(v17);
  }
  kaldi::quasar::SeevaStepInference::SeevaStepInference(v11);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaStepInferenceConfig::~SeevaStepInferenceConfig(void **this)
{
  *this = &unk_1F0A51028;
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

void kaldi::quasar::SeevaStepInference::~SeevaStepInference(kaldi::quasar::SeevaStepInference *this)
{
  *(void *)this = &unk_1F0A50C80;
  uint64_t v4 = (void **)((char *)this + 672);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 648);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 624);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 600);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  kaldi::quasar::SeevaStepInferenceTensorNames::~SeevaStepInferenceTensorNames((kaldi::quasar::SeevaStepInference *)((char *)this + 224));
  *((void *)this + 3) = &unk_1F0A51028;
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  uint64_t vars8;

  kaldi::quasar::SeevaStepInference::~SeevaStepInference(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::SeevaStepInference::RunEncoder(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v44 = 0;
  std::string::size_type v45 = 0;
  unint64_t v46 = 0;
  char v5 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v44, (long long *)(a1 + 224), *a2);
  std::string::size_type v45 = v5;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  if ((a3 & 1) == 0 && *(int *)(a1 + 560) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(a1 + 440);
      uint64_t v9 = v8 + v6;
      std::string::size_type v10 = *(void *)(*(void *)(a1 + 648) + 8 * v7);
      if ((unint64_t)v5 >= v46)
      {
        char v5 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v44, (long long *)v9, *(void *)(*(void *)(a1 + 648) + 8 * v7));
      }
      else
      {
        if (*(char *)(v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v8 + v6), *(void *)(v8 + v6 + 8));
        }
        else
        {
          long long v11 = *(_OWORD *)v9;
          v5->__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v11;
        }
        v5[1].__r_.__value_.__r.__words[0] = v10;
        char v5 = (std::string *)((char *)v5 + 32);
      }
      std::string::size_type v45 = v5;
      ++v7;
      v6 += 24;
    }
    while (v7 < *(int *)(a1 + 560));
  }
  uint64_t v12 = *(void *)(a1 + 8);
  char v47 = 0;
  long long v48 = 0;
  std::string::size_type v49 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t **, uint64_t *))(*(void *)v12 + 128))(v12, &v44, a1 + 600, &v47, &v41);
  unint64_t v52 = (void **)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v52);
  long long v13 = (void *)(a1 + 648);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)(a1 + 648));
  uint64_t v14 = v42;
  long long v15 = *(void **)(a1 + 680);
  unint64_t v16 = *(void *)(a1 + 688);
  if ((unint64_t)v15 >= v16)
  {
    uint64_t v19 = *(void *)(a1 + 672);
    uint64_t v20 = ((uint64_t)v15 - v19) >> 3;
    if ((unint64_t)(v20 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = v16 - v19;
    uint64_t v22 = v21 >> 2;
    if (v21 >> 2 <= (unint64_t)(v20 + 1)) {
      uint64_t v22 = v20 + 1;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    uint64_t v51 = a1 + 688;
    if (v23) {
      float v24 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 688, v23);
    }
    else {
      float v24 = 0;
    }
    int v25 = &v24[v20];
    char v47 = v24;
    long long v48 = v25;
    int v50 = &v24[v23];
    uint64_t v26 = *(void *)(v14 - 8);
    *(void *)(v14 - 8) = 0;
    uint64_t *v25 = v26;
    std::string::size_type v49 = v25 + 1;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer((uint64_t *)(a1 + 672), &v47);
    unint64_t v18 = *(void **)(a1 + 680);
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v47);
  }
  else
  {
    uint64_t v17 = *(void *)(v42 - 8);
    *(void *)(v42 - 8) = 0;
    *long long v15 = v17;
    unint64_t v18 = v15 + 1;
    *(void *)(a1 + 680) = v18;
  }
  *(void *)(a1 + 680) = v18;
  uint64_t v27 = v42;
  if (v41 != v42)
  {
    char v28 = (void *)(a1 + 664);
    unint64_t v29 = *(void **)(a1 + 656);
    uint64_t v30 = v41 + 8;
    int v31 = 1;
    do
    {
      if ((unint64_t)v29 >= *v28)
      {
        uint64_t v33 = ((uint64_t)v29 - *v13) >> 3;
        if ((unint64_t)(v33 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v34 = *v28 - *v13;
        uint64_t v35 = v34 >> 2;
        if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
          uint64_t v35 = v33 + 1;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v35;
        }
        uint64_t v51 = a1 + 664;
        if (v36) {
          int v37 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 664, v36);
        }
        else {
          int v37 = 0;
        }
        unint64_t v38 = &v37[v33];
        char v47 = v37;
        long long v48 = v38;
        int v50 = &v37[v36];
        uint64_t v39 = *(void *)(v30 - 8);
        *(void *)(v30 - 8) = 0;
        *unint64_t v38 = v39;
        std::string::size_type v49 = v38 + 1;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer((uint64_t *)(a1 + 648), &v47);
        unint64_t v29 = *(void **)(a1 + 656);
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v47);
      }
      else
      {
        uint64_t v32 = *(void *)(v30 - 8);
        *(void *)(v30 - 8) = 0;
        *v29++ = v32;
        *(void *)(a1 + 656) = v29;
      }
      *(void *)(a1 + 656) = v29;
      BOOL v40 = v31++ == *(_DWORD *)(a1 + 560);
      BOOL v40 = v40 || v30 == v27;
      v30 += 8;
    }
    while (!v40);
  }
  char v47 = &v41;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  char v47 = &v44;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
}

void sub_1B1E53200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void ***a20)
{
  a20 = &a9;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a9 = (void **)&a12;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaStepInference::RunDecoder(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, char a5, uint64_t a6)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  long long v11 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v25, (long long *)(a1 + 320), *a2);
  uint64_t v12 = v11;
  uint64_t v26 = v11;
  long long v13 = (long long *)(a1 + 344);
  uint64_t v14 = *a3;
  if ((unint64_t)v11 >= v27)
  {
    unint64_t v16 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v25, v13, v14);
  }
  else
  {
    if (*(char *)(a1 + 367) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a1 + 344), *(void *)(a1 + 352));
    }
    else
    {
      long long v15 = *v13;
      v11->__r_.__value_.__r.__words[2] = *(void *)(a1 + 360);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v15;
    }
    v12[1].__r_.__value_.__r.__words[0] = v14;
    unint64_t v16 = (std::string *)((char *)v12 + 32);
  }
  uint64_t v26 = v16;
  if ((a5 & 1) == 0 && *(int *)(a1 + 564) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void *)(a1 + 488);
      uint64_t v20 = v19 + v17;
      std::string::size_type v21 = *(void *)(*a4 + 8 * v18);
      if ((unint64_t)v16 >= v27)
      {
        unint64_t v16 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v25, (long long *)v20, *(void *)(*a4 + 8 * v18));
      }
      else
      {
        if (*(char *)(v20 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(v19 + v17), *(void *)(v19 + v17 + 8));
        }
        else
        {
          long long v22 = *(_OWORD *)v20;
          v16->__r_.__value_.__r.__words[2] = *(void *)(v20 + 16);
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v22;
        }
        v16[1].__r_.__value_.__r.__words[0] = v21;
        unint64_t v16 = (std::string *)((char *)v16 + 32);
      }
      uint64_t v26 = v16;
      ++v18;
      v17 += 24;
    }
    while (v18 < *(int *)(a1 + 564));
  }
  uint64_t v23 = *(void *)(a1 + 16);
  memset(v24, 0, sizeof(v24));
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void ***, uint64_t))(*(void *)v23 + 128))(v23, &v25, a1 + 624, v24, a6);
  char v28 = v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  v24[0] = (void **)&v25;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v24);
}

void sub_1B1E53434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaStepInference::CollectEncoderOutput(kaldi::quasar::SeevaStepInference *this@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  std::string::size_type v45 = 0;
  uint64_t v7 = (uint64_t *)*((void *)this + 84);
  uint64_t v8 = (uint64_t *)*((void *)this + 85);
  if (v7 != v8)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *v7;
      if (v9 >= v45)
      {
        uint64_t v11 = (v9 - (unsigned char *)v43) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = (v45 - (unsigned char *)v43) >> 2;
        if (v12 <= v11 + 1) {
          unint64_t v12 = v11 + 1;
        }
        if ((unint64_t)(v45 - (unsigned char *)v43) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v45, v13);
        }
        else {
          uint64_t v14 = 0;
        }
        long long v15 = &v14[8 * v11];
        *(void *)long long v15 = v10;
        uint64_t v9 = v15 + 8;
        uint64_t v17 = (char *)v43;
        unint64_t v16 = v44;
        if (v44 != v43)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          unint64_t v16 = (char *)v43;
        }
        uint64_t v43 = v15;
        uint64_t v44 = v9;
        std::string::size_type v45 = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(void *)uint64_t v9 = v10;
        v9 += 8;
      }
      uint64_t v44 = v9;
      ++v7;
    }
    while (v7 != v8);
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 96))(&v42);
  if (a2 || a3 != -1)
  {
    int v19 = *((_DWORD *)this + 45);
    (*(void (**)(void *__return_ptr))(**((void **)this + 1) + 104))(v41);
    uint64_t v20 = (uint64_t)(v41[1] - v41[0]) >> 3;
    int v21 = (int)(((v19 * v20) & (a3 >> 31)) + a3) / v19;
    unint64_t v22 = v20 - 1;
    unint64_t v23 = (int)(((v19 * v20) & (a2 >> 31)) + a2) / v19;
    if (v22 < v23) {
      LODWORD(v23) = v22;
    }
    if (v22 < v21) {
      int v21 = v22;
    }
    long long __p = 0;
    uint64_t v39 = 0;
    BOOL v40 = 0;
    if ((int)v23 <= v21)
    {
      float v24 = 0;
      uint64_t v25 = (int)v23;
      int v26 = v21 + 1;
      do
      {
        uint64_t v27 = *(void *)(v41[0] + 8 * v25);
        if (v24 >= v40)
        {
          uint64_t v28 = (v24 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v28 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v29 = (v40 - (unsigned char *)__p) >> 2;
          if (v29 <= v28 + 1) {
            unint64_t v29 = v28 + 1;
          }
          if ((unint64_t)(v40 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30) {
            int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v40, v30);
          }
          else {
            int v31 = 0;
          }
          uint64_t v32 = &v31[8 * v28];
          *(void *)uint64_t v32 = v27;
          float v24 = v32 + 8;
          uint64_t v34 = (char *)__p;
          uint64_t v33 = v39;
          if (v39 != __p)
          {
            do
            {
              uint64_t v35 = *((void *)v33 - 1);
              v33 -= 8;
              *((void *)v32 - 1) = v35;
              v32 -= 8;
            }
            while (v33 != v34);
            uint64_t v33 = (char *)__p;
          }
          long long __p = v32;
          uint64_t v39 = v24;
          BOOL v40 = &v31[8 * v30];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(void *)float v24 = v27;
          v24 += 8;
        }
        uint64_t v39 = v24;
        ++v25;
      }
      while (v26 != v25);
    }
    (*(void (**)(void, void **, void))(**((void **)this + 1) + 96))(*((void *)this + 1), &__p, 0);
    if (__p)
    {
      uint64_t v39 = (char *)__p;
      operator delete(__p);
    }
    long long __p = v41;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    uint64_t v36 = v42;
    uint64_t v42 = 0;
    if (v36) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
  }
  else
  {
    *a4 = v42;
  }
  if (v43)
  {
    uint64_t v44 = (char *)v43;
    operator delete(v43);
  }
}

void sub_1B1E537FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
  {
    a12 = __p;
    operator delete(__p);
  }
  long long __p = &a14;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v20 = a17;
  a17 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void *kaldi::quasar::SeevaStepInference::ResetGraph(kaldi::quasar::SeevaStepInference *this)
{
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)this + 81);
  return std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)this + 84);
}

void kaldi::quasar::SeevaStepInferenceConfig::Register(uint64_t a1, uint64_t a2)
{
  kaldi::quasar::SeevaInferenceConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of frames in each batch");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 144, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "pad-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "if the whole audio is too short, pad to this length");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 148, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "model-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "the beam size used in the model");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 152, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "time-reduction-factor");
  std::string::basic_string[abi:ne180100]<0>(__p, "source sequence length reduction factor in the model");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 156, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-decode-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "the maximum number of decoding steps");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 160, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "coverage-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, use this value as the coverage penalty.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 164, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "utt-end-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, use this beam at the utterance end.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 168, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "safe-align-thresh");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of steps for alignment wiggle room");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 172, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "init-wait-time");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of frames before running the first generation step");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 176, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "cont-wait-time");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of frames before running the continuous generation step");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 180, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "rb-steps-fail");
  std::string::basic_string[abi:ne180100]<0>(__p, "for early termination (failed), rollback this number of steps");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 184, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "rb-steps-boundary");
  std::string::basic_string[abi:ne180100]<0>(__p, "for hitting boundary, rollback this number of steps");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 188, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "encoder-only");
  std::string::basic_string[abi:ne180100]<0>(__p, "only streaming the encoder part");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 192, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-attn-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "the minimum attention weight for a valid generation step");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 196, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1E53F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SeevaInferenceConfig::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "length-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "if >= 0, use this value as length penalty weight. Default means using the default in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "pad-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "if the whole audio is too short, pad to this length");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "mmapped-graph");
  std::string::basic_string[abi:ne180100]<0>(__p, "is it a memory mapped graph?");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 24, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "num-inter-op-threads");
  std::string::basic_string[abi:ne180100]<0>(__p, "The maximum number of threads for inter ops in TF graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 16, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "num-intra-op-threads");
  std::string::basic_string[abi:ne180100]<0>(__p, "The maximum number of threads for intra ops in TF graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 20, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "default-device");
  std::string::basic_string[abi:ne180100]<0>(__p, "TF default device");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 40))(a2, v6, a1 + 32, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "catf-input");
  std::string::basic_string[abi:ne180100]<0>(__p, "the catf input, a list of comma delimited values");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 40))(a2, v6, a1 + 56, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "allow-soft-placement");
  std::string::basic_string[abi:ne180100]<0>(__p, "TF allow soft placement");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 80, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "log-device-placement");
  std::string::basic_string[abi:ne180100]<0>(__p, "TF log device placement");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 81, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "profiling-granularity");
  std::string::basic_string[abi:ne180100]<0>(__p, "Level of profiling (higher means more precise breakdown per operation)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 84, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "model-config-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "The config file for the model");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 40))(a2, v6, a1 + 88, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "model-config-binary");
  std::string::basic_string[abi:ne180100]<0>(__p, "is the config file binary?");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 112, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "model-config-end-token");
  std::string::basic_string[abi:ne180100]<0>(__p, "The config file's end token");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 40))(a2, v6, a1 + 120, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1E545FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::SeevaStepInferenceTensorNames::SeevaStepInferenceTensorNames(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t result = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(result + 40) = *((void *)a2 + 5);
  *(_OWORD *)(result + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v4 = a2[3];
  *(void *)(result + 64) = *((void *)a2 + 8);
  *(_OWORD *)(result + 48) = v4;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  long long v5 = *(long long *)((char *)a2 + 72);
  *(void *)(result + 88) = *((void *)a2 + 11);
  *(_OWORD *)(result + 72) = v5;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  long long v6 = a2[6];
  *(void *)(result + 112) = *((void *)a2 + 14);
  *(_OWORD *)(result + 96) = v6;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  long long v7 = *(long long *)((char *)a2 + 120);
  *(void *)(result + 136) = *((void *)a2 + 17);
  *(_OWORD *)(result + 120) = v7;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  long long v8 = a2[9];
  *(void *)(result + 160) = *((void *)a2 + 20);
  *(_OWORD *)(result + 144) = v8;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 20) = 0;
  long long v9 = *(long long *)((char *)a2 + 168);
  *(void *)(result + 184) = *((void *)a2 + 23);
  *(_OWORD *)(result + 168) = v9;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  long long v10 = a2[12];
  *(void *)(result + 208) = *((void *)a2 + 26);
  *(_OWORD *)(result + 192) = v10;
  *((void *)a2 + 24) = 0;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *(void *)(result + 216) = 0;
  *(void *)(result + 224) = 0;
  *(void *)(result + 232) = 0;
  *(_OWORD *)(result + 216) = *(long long *)((char *)a2 + 216);
  *(void *)(result + 232) = *((void *)a2 + 29);
  *((void *)a2 + 27) = 0;
  *((void *)a2 + 28) = 0;
  *((void *)a2 + 29) = 0;
  *(void *)(result + 240) = 0;
  *(void *)(result + 248) = 0;
  *(void *)(result + 256) = 0;
  *(_OWORD *)(result + 240) = a2[15];
  *(void *)(result + 256) = *((void *)a2 + 32);
  *((void *)a2 + 30) = 0;
  *((void *)a2 + 31) = 0;
  *((void *)a2 + 32) = 0;
  *(void *)(result + 264) = 0;
  *(void *)(result + 272) = 0;
  *(void *)(result + 280) = 0;
  uint64_t v11 = *((void *)a2 + 34);
  *(void *)(result + 264) = *((void *)a2 + 33);
  *(void *)(result + 272) = v11;
  *(void *)(result + 280) = *((void *)a2 + 35);
  *((void *)a2 + 33) = 0;
  *((void *)a2 + 34) = 0;
  *((void *)a2 + 35) = 0;
  *(void *)(result + 288) = 0;
  *(void *)(result + 296) = 0;
  *(void *)(result + 304) = 0;
  *(_OWORD *)(result + 288) = a2[18];
  *(void *)(result + 304) = *((void *)a2 + 38);
  *((void *)a2 + 36) = 0;
  *((void *)a2 + 37) = 0;
  *((void *)a2 + 38) = 0;
  *(void *)(result + 312) = 0;
  *(void *)(result + 320) = 0;
  *(void *)(result + 328) = 0;
  uint64_t v12 = *((void *)a2 + 40);
  *(void *)(result + 312) = *((void *)a2 + 39);
  *(void *)(result + 320) = v12;
  *(void *)(result + 328) = *((void *)a2 + 41);
  *((void *)a2 + 39) = 0;
  *((void *)a2 + 40) = 0;
  *((void *)a2 + 41) = 0;
  *(void *)(result + 336) = *((void *)a2 + 42);
  *(void *)(result + 344) = *((void *)a2 + 43);
  uint64_t v13 = result + 352;
  uint64_t v14 = *((void *)a2 + 44);
  *(void *)(result + 352) = v14;
  uint64_t v15 = *((void *)a2 + 45);
  *(void *)(result + 360) = v15;
  if (v15)
  {
    *(void *)(v14 + 16) = v13;
    *((void *)a2 + 43) = a2 + 22;
    *((void *)a2 + 44) = 0;
    *((void *)a2 + 45) = 0;
  }
  else
  {
    *(void *)(result + 344) = v13;
  }
  *(unsigned char *)(result + 368) = *((unsigned char *)a2 + 368);
  return result;
}

void kaldi::quasar::SeevaStepInferenceTensorNames::~SeevaStepInferenceTensorNames(kaldi::quasar::SeevaStepInferenceTensorNames *this)
{
  std::__tree<int>::destroy((uint64_t)this + 344, *((void **)this + 44));
  long long v2 = (void **)((char *)this + 312);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  long long v2 = (void **)((char *)this + 288);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  long long v2 = (void **)((char *)this + 264);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  long long v2 = (void **)((char *)this + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  long long v2 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t std::vector<std::vector<int>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v16);
    long long v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *long long v7 = 0;
    v7[1] = 0;
    void v7[2] = 0;
    *(_OWORD *)long long v7 = *(_OWORD *)a2;
    void v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1E54A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1E54B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ScoreCacheFasterDecoder::ScoreCacheFasterDecoder(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  *(void *)(a1 + 48) = 0;
  uint64_t v5 = a1 + 48;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1B2565910;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a2;
  long long v6 = *a3;
  long long v7 = *(long long *)((char *)a3 + 12);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 148) = v7;
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 232) = 0;
  uint64_t v8 = *(int *)(a1 + 152);
  *(_DWORD *)(a1 + 32) = v8;
  *(void *)(a1 + 24) = 1;
  vm_address_t v24 = 0;
  vm_address_t address = 0;
  uint64_t v9 = (vm_map_t *)MEMORY[0x1E4F14960];
  if (vm_allocate(*MEMORY[0x1E4F14960], &address, 28 * v8, 1711276033))
  {
    if (kaldi::g_kaldi_verbose_level < 0) {
      goto LABEL_9;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    unint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": Could not vm_allocate ", 24);
    unint64_t v12 = (void *)std::ostream::operator<<();
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" of ", 4);
    size_t v14 = strlen((const char *)(0x80000001B25A27E8 & 0x7FFFFFFFFFFFFFFFLL));
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, 0x80000001B25A27E8 & 0x7FFFFFFFFFFFFFFFLL, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
    std::ostream::operator<<();
    goto LABEL_8;
  }
  *(void *)(a1 + 16) = address;
  if (vm_allocate(*v9, &v24, 4 * *(int *)(a1 + 32), 1711276033))
  {
    if (kaldi::g_kaldi_verbose_level < 0) {
      goto LABEL_9;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    unint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": Could not vm_allocate ", 24);
    uint64_t v17 = (void *)std::ostream::operator<<();
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" of ", 4);
    size_t v19 = strlen((const char *)(*(void *)(MEMORY[0x1E4FBA3B0] + 8) & 0x7FFFFFFFFFFFFFFFLL));
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, *(void *)(MEMORY[0x1E4FBA3B0] + 8) & 0x7FFFFFFFFFFFFFFFLL, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    std::ostream::operator<<();
LABEL_8:
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v23);
LABEL_9:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v22 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v22, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  *(void *)a1 = v24;
  *(_DWORD *)(a1 + 8) = 0;
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(v5, 0x3E8uLL);
  return a1;
}

void sub_1B1E54DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a11);
  uint64_t v15 = (void *)v12[27];
  if (v15)
  {
    v12[28] = v15;
    operator delete(v15);
  }
  a11 = v13 + 3;
  std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__destroy_vector::operator()[abi:ne180100](&a11);
  unint64_t v16 = *v13;
  if (*v13)
  {
    v12[22] = v16;
    operator delete(v16);
  }
  kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::~HashList(v11);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ScoreCacheFasterDecoder::Decode(kaldi::ScoreCacheFasterDecoder *this, kaldi::DecodableInterface *a2)
{
  uint64_t v4 = *((void *)this + 7);
  if (v4 != -1)
  {
    uint64_t v5 = *((void *)this + 9);
    do
    {
      long long v6 = (uint64_t *)(v5 + 16 * v4);
      v6[1] = 0;
      uint64_t v4 = *v6;
    }
    while (v4 != -1);
  }
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = -1;
  if (v7)
  {
    do
    {
      kaldi::ScoreCacheFasterDecoder::DeleteTokenChain((uint64_t *)this, *(_DWORD *)(v7 + 8));
      uint64_t v8 = *(void *)(v7 + 16);
      *(void *)(v7 + 16) = *((void *)this + 12);
      *((void *)this + 12) = v7;
      uint64_t v7 = v8;
    }
    while (v8);
  }
  unint64_t v10 = *((void *)this + 24);
  uint64_t v9 = *((void *)this + 25);
  if (v9 != v10)
  {
    uint64_t v11 = v9 - 32;
    do
    {
      std::__tree<int>::destroy(v11, *(void **)(v11 + 8));
      BOOL v12 = v11 == v10;
      v11 -= 32;
    }
    while (!v12);
  }
  *((void *)this + 25) = v10;
  uint64_t v13 = (uint64_t (***)(void))*((void *)this + 5);
  if (v13)
  {
    LODWORD(v13) = (**v13)(v13);
    unint64_t v10 = *((void *)this + 25);
  }
  v30[0] = 0;
  v30[1] = 0;
  unint64_t v29 = v30;
  int v31 = (int)v13;
  if (v10 >= *((void *)this + 26))
  {
    uint64_t v14 = std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__push_back_slow_path<kaldi::ScoreCacheFasterDecoder::LmTrie>((uint64_t *)this + 24, (uint64_t)&v29);
  }
  else
  {
    std::map<int,int>::map[abi:ne180100]((uint64_t *)v10, (uint64_t)&v29);
    *(_DWORD *)(v10 + 24) = v31;
    uint64_t v14 = v10 + 32;
    *((void *)this + 25) = v10 + 32;
  }
  uint64_t v15 = (uint64_t *)((char *)this + 48);
  *((void *)this + 25) = v14;
  std::__tree<int>::destroy((uint64_t)&v29, v30[0]);
  uint64_t v16 = (*(uint64_t (**)(void))(**((void **)this + 16) + 24))(*((void *)this + 16));
  unint64_t v17 = (int)v16;
  int v18 = kaldi::ScoreCacheFasterDecoder::NewToken((uint64_t)this, 0, 0, v16 << 32, 0.0);
  unint64_t v19 = v17 % *((void *)this + 8);
  uint64_t v20 = (void *)(*((void *)this + 9) + 16 * v19);
  uint64_t v21 = kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::New((uint64_t)this + 48);
  *(void *)uint64_t v21 = v17;
  *(_DWORD *)(v21 + 8) = v18;
  unint64_t v22 = v20 + 1;
  uint64_t v23 = v20[1];
  if (v23)
  {
    *(void *)(v21 + 16) = *(void *)(v23 + 16);
    *(void *)(v23 + 16) = v21;
    *unint64_t v22 = v21;
  }
  else
  {
    uint64_t v24 = *((void *)this + 7);
    if (v24 != -1) {
      uint64_t v15 = (uint64_t *)(*(void *)(*((void *)this + 9) + 16 * v24 + 8) + 16);
    }
    *uint64_t v15 = v21;
    *(void *)(v21 + 16) = 0;
    *unint64_t v22 = v21;
    *uint64_t v20 = v24;
    *((void *)this + 7) = v19;
  }
  kaldi::ScoreCacheFasterDecoder::ProcessNonemitting(this, 3.4028e38);
  uint64_t result = (*(uint64_t (**)(kaldi::DecodableInterface *, uint64_t))(*(void *)a2 + 8))(a2, 0xFFFFFFFFLL);
  if ((result & 1) == 0)
  {
    uint64_t v27 = 0;
    do
    {
      float v28 = kaldi::ScoreCacheFasterDecoder::ProcessEmitting(this, a2, v27, v26);
      kaldi::ScoreCacheFasterDecoder::ProcessNonemitting(this, v28);
      uint64_t result = (*(uint64_t (**)(kaldi::DecodableInterface *, uint64_t))(*(void *)a2 + 8))(a2, v27);
      uint64_t v27 = (v27 + 1);
    }
    while ((result & 1) == 0);
  }
  return result;
}

void sub_1B1E550CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t *kaldi::ScoreCacheFasterDecoder::ClearToks(uint64_t *this, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    long long v3 = this;
    do
    {
      this = kaldi::ScoreCacheFasterDecoder::DeleteTokenChain(v3, *(_DWORD *)(v2 + 8));
      uint64_t v4 = *(void *)(v2 + 16);
      *(void *)(v2 + 16) = v3[12];
      v3[12] = v2;
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return this;
}

uint64_t kaldi::ScoreCacheFasterDecoder::NewToken(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, float a5)
{
  int v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    int v6 = v5 - 1;
    LODWORD(v7) = *(_DWORD *)(*(void *)a1 + 4 * (v5 - 1));
    *(_DWORD *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(void *)(a1 + 24);
    if (v7 >= *(int *)(a1 + 32))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      kaldi::quasar::TooManyTokensError::TooManyTokensError(exception, "ScoreCacheFasterDecoder: Ran out of token storage");
    }
    *(void *)(a1 + 24) = v7 + 1;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = v8 + 28 * v7;
  *(_DWORD *)(v9 + 20) = 1;
  *(void *)uint64_t v9 = a3;
  *(void *)(v9 + 8) = a4;
  if (a2)
  {
    uint64_t v10 = *(void *)(a1 + 16) + 28 * a2;
    ++*(_DWORD *)(v10 + 20);
    float v11 = *(float *)(v10 + 24) + *(float *)&a4;
  }
  else
  {
    float v11 = *(float *)&a4;
  }
  uint64_t v12 = v8 + 28 * v7;
  *(float *)(v12 + 24) = v11 + a5;
  *(_DWORD *)(v12 + 16) = a2;
  return v7;
}

void sub_1B1E55230(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void kaldi::ScoreCacheFasterDecoder::ProcessNonemitting(kaldi::ScoreCacheFasterDecoder *this, float a2)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 21);
  unint64_t v68 = (void **)((char *)this + 168);
  long long v3 = (uint64_t *)*((void *)this + 6);
  unint64_t v69 = (char *)this + 48;
  if (v3)
  {
    std::string::size_type v67 = (void *)((char *)this + 184);
    do
    {
      uint64_t v6 = *v3;
      unsigned int v7 = *((_DWORD *)v3 + 2);
      if ((unint64_t)v2 >= *v67)
      {
        uint64_t v8 = (unsigned int *)*v68;
        uint64_t v9 = ((char *)v2 - (unsigned char *)*v68) >> 4;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = *v67 - (void)v8;
        if (v11 >> 3 > v10) {
          unint64_t v10 = v11 >> 3;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v67, v12);
          uint64_t v8 = (unsigned int *)*((void *)this + 21);
          uint64_t v2 = (unsigned int *)*((void *)this + 22);
        }
        else
        {
          uint64_t v13 = 0;
        }
        uint64_t v14 = &v13[16 * v9];
        *(void *)uint64_t v14 = v6;
        *((_DWORD *)v14 + 2) = v7;
        uint64_t v15 = v14;
        if (v2 != v8)
        {
          do
          {
            *((_OWORD *)v15 - 1) = *((_OWORD *)v2 - 1);
            v15 -= 16;
            v2 -= 4;
          }
          while (v2 != v8);
          uint64_t v8 = (unsigned int *)*v68;
        }
        uint64_t v2 = (unsigned int *)(v14 + 16);
        *((void *)this + 21) = v15;
        *((void *)this + 22) = v14 + 16;
        *((void *)this + 23) = &v13[16 * v12];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(void *)uint64_t v2 = v6;
        std::regex_traits<char> v2[2] = v7;
        v2 += 4;
      }
      *((void *)this + 22) = v2;
      long long v3 = (uint64_t *)v3[2];
    }
    while (v3);
    uint64_t v16 = (unsigned int *)*v68;
    while (1)
    {
      if (v16 == v2) {
        return;
      }
      uint64_t v18 = *((void *)v2 - 2);
      v2 -= 4;
      uint64_t v17 = v18;
      unsigned int v19 = v2[2];
      *((void *)this + 22) = v2;
      if (v19 && *((_DWORD *)this + 8) >= v19) {
        uint64_t v20 = *((void *)this + 2) + 28 * v19;
      }
      else {
        uint64_t v20 = 0;
      }
      if (*(float *)(v20 + 24) > a2) {
        continue;
      }
      unint64_t v21 = HIDWORD(v17);
      uint64_t v22 = *((void *)this + 16);
      unint64_t v72 = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v22 + 136))(v22, v17, v70);
      uint64_t v66 = v17 >> 32;
      while (1)
      {
        if (!v70[0])
        {
          if (v72 >= v70[2]) {
            goto LABEL_98;
          }
          goto LABEL_33;
        }
        if ((*(unsigned int (**)(void))(*(void *)v70[0] + 24))(v70[0])) {
          break;
        }
        if (v70[0])
        {
          uint64_t v24 = (*(uint64_t (**)(void))(*(void *)v70[0] + 32))();
          goto LABEL_34;
        }
LABEL_33:
        uint64_t v24 = v70[1] + 16 * v72;
LABEL_34:
        if (*(_DWORD *)v24) {
          goto LABEL_89;
        }
        uint64_t v25 = *(void *)v24;
        uint64_t v26 = HIDWORD(*(void *)v24);
        float v27 = *(float *)(v24 + 8);
        uint64_t v28 = *(int *)(v24 + 12);
        if (!v26) {
          goto LABEL_49;
        }
        uint64_t v29 = *((void *)this + 5);
        if (!v29)
        {
          uint64_t v32 = kaldi::ScoreCacheFasterDecoder::AddLmState(this, v21, v26, 0);
          goto LABEL_50;
        }
        if (!(*(unsigned int (**)(uint64_t, void, uint64_t, char *))(*(void *)v29 + 32))(v29, *(unsigned int *)(*((void *)this + 24) + 32 * v66 + 24), v26, v73))
        {
          float v27 = INFINITY;
LABEL_49:
          uint64_t v32 = v21;
          goto LABEL_50;
        }
        float v30 = NAN;
        if (v27 != -INFINITY)
        {
          float v30 = NAN;
          if (v75 != -INFINITY)
          {
            if (v75 == INFINITY || v27 == INFINITY) {
              float v30 = INFINITY;
            }
            else {
              float v30 = v75 + v27;
            }
          }
        }
        LODWORD(v26) = v74;
        uint64_t v32 = kaldi::ScoreCacheFasterDecoder::AddLmState(this, v21, v74, v76);
        float v27 = v30;
LABEL_50:
        v23.n128_f32[0] = *(float *)(v20 + 24) + v27;
        if (v23.n128_f32[0] < a2)
        {
          unint64_t v33 = v28 + (v32 << 32);
          uint64_t v34 = *((void *)this + 9);
          unint64_t v35 = v33 % *((void *)this + 8);
          uint64_t v36 = *(void *)(v34 + 16 * v35 + 8);
          if (!v36) {
            goto LABEL_57;
          }
          uint64_t v37 = *(void *)(v34 + 16 * v35);
          unint64_t v38 = (uint64_t *)v69;
          if (v37 != -1) {
            unint64_t v38 = (uint64_t *)(*(void *)(v34 + 16 * v37 + 8) + 16);
          }
          uint64_t v39 = *(void *)(v36 + 16);
          uint64_t v40 = *v38;
          if (*v38 == v39)
          {
LABEL_57:
            unsigned __int32 v41 = kaldi::ScoreCacheFasterDecoder::NewToken((uint64_t)this, v19, v25 | ((unint64_t)v26 << 32), LODWORD(v27) | (unint64_t)(v28 << 32), 0.0);
            unint64_t v42 = *((void *)this + 8);
            uint64_t v43 = *((void *)this + 9);
            uint64_t v44 = kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::New((uint64_t)v69);
            *(void *)uint64_t v44 = v33;
            *(_DWORD *)(v44 + 8) = v41;
            uint64_t v45 = v43 + 16 * (v33 % v42);
            uint64_t v48 = *(void *)(v45 + 8);
            unint64_t v46 = (uint64_t *)(v45 + 8);
            uint64_t v47 = v48;
            if (v48)
            {
              *(void *)(v44 + 16) = *(void *)(v47 + 16);
              *(void *)(v47 + 16) = v44;
              uint64_t *v46 = v44;
            }
            else
            {
              uint64_t v49 = *((void *)this + 7);
              int v50 = (uint64_t *)v69;
              if (v49 != -1) {
                int v50 = (uint64_t *)(*(void *)(*((void *)this + 9) + 16 * v49 + 8) + 16);
              }
              *int v50 = v44;
              *(void *)(v44 + 16) = 0;
              uint64_t *v46 = v44;
              *(void *)(v43 + 16 * (v33 % v42)) = v49;
              *((void *)this + 7) = v33 % v42;
            }
            unint64_t v52 = (__n128 *)*((void *)this + 22);
            unint64_t v51 = *((void *)this + 23);
            if ((unint64_t)v52 < v51) {
              goto LABEL_63;
            }
            unint64_t v54 = (__n128 *)*v68;
            uint64_t v55 = ((char *)v52 - (unsigned char *)*v68) >> 4;
            unint64_t v56 = v55 + 1;
            if ((unint64_t)(v55 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v57 = v51 - (void)v54;
            if (v57 >> 3 > v56) {
              unint64_t v56 = v57 >> 3;
            }
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v56;
            }
            if (v58)
            {
              uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v67, v58);
              unint64_t v54 = (__n128 *)*((void *)this + 21);
              unint64_t v52 = (__n128 *)*((void *)this + 22);
            }
            else
            {
              uint64_t v59 = 0;
            }
            unint64_t v64 = &v59[16 * v55];
            *(void *)unint64_t v64 = v33;
            *((_DWORD *)v64 + 2) = v41;
            int v65 = (__n128 *)v64;
            if (v52 != v54)
            {
              do
              {
                __n128 v23 = v52[-1];
                v65[-1] = v23;
                --v65;
                --v52;
              }
              while (v52 != v54);
              goto LABEL_85;
            }
LABEL_86:
            int v53 = v64 + 16;
            *((void *)this + 21) = v65;
            *((void *)this + 22) = v64 + 16;
            *((void *)this + 23) = &v59[16 * v58];
            if (v54) {
              operator delete(v54);
            }
LABEL_88:
            *((void *)this + 22) = v53;
            goto LABEL_89;
          }
          while (*(void *)v40 != v33)
          {
            uint64_t v40 = *(void *)(v40 + 16);
            if (v40 == v39) {
              goto LABEL_57;
            }
          }
          if (*(float *)(*((void *)this + 2) + 28 * *(unsigned int *)(v40 + 8) + 24) > v23.n128_f32[0])
          {
            unsigned __int32 v41 = kaldi::ScoreCacheFasterDecoder::NewToken((uint64_t)this, v19, v25 | ((unint64_t)v26 << 32), LODWORD(v27) | ((unint64_t)v28 << 32), 0.0);
            kaldi::ScoreCacheFasterDecoder::DeleteTokenChain((uint64_t *)this, *(_DWORD *)(v40 + 8));
            *(_DWORD *)(v40 + 8) = v41;
            unint64_t v52 = (__n128 *)*((void *)this + 22);
            unint64_t v60 = *((void *)this + 23);
            if ((unint64_t)v52 >= v60)
            {
              unint64_t v54 = (__n128 *)*v68;
              uint64_t v61 = ((char *)v52 - (unsigned char *)*v68) >> 4;
              unint64_t v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 60) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v63 = v60 - (void)v54;
              if (v63 >> 3 > v62) {
                unint64_t v62 = v63 >> 3;
              }
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v62;
              }
              if (v58)
              {
                uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v67, v58);
                unint64_t v54 = (__n128 *)*((void *)this + 21);
                unint64_t v52 = (__n128 *)*((void *)this + 22);
              }
              else
              {
                uint64_t v59 = 0;
              }
              unint64_t v64 = &v59[16 * v61];
              *(void *)unint64_t v64 = v33;
              *((_DWORD *)v64 + 2) = v41;
              int v65 = (__n128 *)v64;
              if (v52 != v54)
              {
                do
                {
                  __n128 v23 = v52[-1];
                  v65[-1] = v23;
                  --v65;
                  --v52;
                }
                while (v52 != v54);
LABEL_85:
                unint64_t v54 = (__n128 *)*v68;
              }
              goto LABEL_86;
            }
LABEL_63:
            v52->n128_u64[0] = v33;
            v52->n128_u32[2] = v41;
            int v53 = (char *)&v52[1];
            goto LABEL_88;
          }
        }
LABEL_89:
        if (v70[0]) {
          (*(void (**)(void, __n128))(*(void *)v70[0] + 40))(v70[0], v23);
        }
        else {
          ++v72;
        }
      }
      if (v70[0])
      {
        (*(void (**)(void))(*(void *)v70[0] + 8))();
        goto LABEL_100;
      }
LABEL_98:
      if (v71) {
        --*v71;
      }
LABEL_100:
      uint64_t v16 = (unsigned int *)*((void *)this + 21);
      uint64_t v2 = (unsigned int *)*((void *)this + 22);
    }
  }
}

void sub_1B1E55914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

float kaldi::ScoreCacheFasterDecoder::ProcessEmitting(kaldi::ScoreCacheFasterDecoder *this, kaldi::DecodableInterface *a2, unsigned int a3, float a4)
{
  uint64_t v6 = *((void *)this + 7);
  if (v6 != -1)
  {
    uint64_t v7 = *((void *)this + 9);
    do
    {
      uint64_t v8 = (uint64_t *)(v7 + 16 * v6);
      v8[1] = 0;
      uint64_t v6 = *v8;
    }
    while (v6 != -1);
  }
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = -1;
  unint64_t v83 = 0;
  float v82 = 0.0;
  uint64_t v81 = 0;
  uint64_t v10 = v9;
  float v11 = kaldi::GetCutoffHelper<kaldi::ScoreCacheFasterDecoder,kaldi::ScoreCacheFasterDecoderOptions,kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::Elem>(this, (uint64_t)this + 136, v9, &v83, &v82, &v81, 1, a4);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v76, 3);
    unint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" tokens active.", 15);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v76);
  }
  int v74 = (char *)this + 48;
  unint64_t v13 = (unint64_t)(float)(*((float *)this + 40) * (float)v83);
  if (*((void *)this + 8) < v13) {
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize((uint64_t)v74, v13);
  }
  if (!v81)
  {
    uint64_t v18 = v10;
    float v19 = INFINITY;
    goto LABEL_46;
  }
  uint64_t v14 = *(void *)v81;
  uint64_t v15 = HIDWORD(*(void *)v81);
  unsigned int v16 = *(_DWORD *)(v81 + 8);
  if (v16 && *((_DWORD *)this + 8) >= v16) {
    uint64_t v17 = *((void *)this + 2) + 28 * v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v20 = *((void *)this + 16);
  unint64_t v80 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v20 + 136))(v20, v14, &v76);
  uint64_t v21 = v14 >> 32;
  float v19 = INFINITY;
  while (1)
  {
    if (!v76)
    {
      if (v80 >= v78) {
        goto LABEL_44;
      }
      goto LABEL_20;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v76 + 24))(v76)) {
      break;
    }
    if (v76)
    {
      uint64_t v22 = (float *)(*(uint64_t (**)(void))(*(void *)v76 + 32))();
      goto LABEL_21;
    }
LABEL_20:
    uint64_t v22 = (float *)(v77 + 16 * v80);
LABEL_21:
    uint64_t v23 = *(unsigned int *)v22;
    if (v23)
    {
      signed int v24 = *((_DWORD *)v22 + 1);
      float v25 = v22[2];
      if (v24)
      {
        uint64_t v26 = *((void *)this + 5);
        if (v26)
        {
          if ((*(unsigned int (**)(uint64_t, void))(*(void *)v26 + 32))(v26, *(unsigned int *)(*((void *)this + 24) + 32 * v21 + 24)))
          {
            float v27 = NAN;
            if (v25 != -INFINITY)
            {
              float v27 = NAN;
              if (v86 != -INFINITY)
              {
                if (v86 == INFINITY || v25 == INFINITY) {
                  float v27 = INFINITY;
                }
                else {
                  float v27 = v25 + v86;
                }
              }
            }
            kaldi::ScoreCacheFasterDecoder::AddLmState(this, v15, v85, v87);
          }
          else
          {
            float v27 = INFINITY;
          }
          float v25 = v27;
        }
        else
        {
          kaldi::ScoreCacheFasterDecoder::AddLmState(this, v15, v24, 0);
        }
      }
      float v29 = (**(float (***)(kaldi::DecodableInterface *, void, uint64_t))a2)(a2, a3, v23);
      float v30 = v82 + (float)((float)(v25 + *(float *)(v17 + 24)) - v29);
      if (v30 < v19) {
        float v19 = v30;
      }
    }
    if (v76) {
      (*(void (**)(uint64_t))(*(void *)v76 + 40))(v76);
    }
    else {
      ++v80;
    }
  }
  if (v76)
  {
    (*(void (**)(void))(*(void *)v76 + 8))();
    uint64_t v18 = v10;
    goto LABEL_46;
  }
LABEL_44:
  uint64_t v18 = v10;
  if (v79) {
    --*v79;
  }
LABEL_46:
  if (!v18) {
    return v19;
  }
  while (2)
  {
    unsigned int v31 = *(_DWORD *)(v18 + 8);
    if (v31 && *((_DWORD *)this + 8) >= v31) {
      uint64_t v32 = *((void *)this + 2) + 28 * v31;
    }
    else {
      uint64_t v32 = 0;
    }
    if (*(float *)(v32 + 24) >= v11) {
      goto LABEL_102;
    }
    unsigned int v73 = *(_DWORD *)(v18 + 8);
    uint64_t v71 = v18;
    uint64_t v33 = *(void *)v18;
    uint64_t v34 = HIDWORD(*(void *)v18);
    uint64_t v35 = *((void *)this + 16);
    unint64_t v80 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v35 + 136))(v35, v33, &v76);
    uint64_t v72 = v33 >> 32;
    while (2)
    {
      if (!v76)
      {
        if (v80 >= v78) {
          goto LABEL_99;
        }
        goto LABEL_58;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v76 + 24))(v76))
      {
        if (v76)
        {
          uint64_t v36 = (*(uint64_t (**)(void))(*(void *)v76 + 32))();
          goto LABEL_59;
        }
LABEL_58:
        uint64_t v36 = v77 + 16 * v80;
LABEL_59:
        if (*(_DWORD *)v36)
        {
          unint64_t v37 = *(void *)v36;
          float v38 = *(float *)(v36 + 8);
          uint64_t v39 = *(int *)(v36 + 12);
          float v40 = (**(float (***)(kaldi::DecodableInterface *, void, void))a2)(a2, a3, *(void *)v36);
          unint64_t v41 = HIDWORD(v37);
          if (!HIDWORD(v37)) {
            goto LABEL_74;
          }
          uint64_t v42 = *((void *)this + 5);
          if (v42)
          {
            if ((*(unsigned int (**)(uint64_t, void, unint64_t, char *))(*(void *)v42 + 32))(v42, *(unsigned int *)(*((void *)this + 24) + 32 * v72 + 24), HIDWORD(v37), v84))
            {
              float v43 = NAN;
              if (v38 != -INFINITY)
              {
                float v43 = NAN;
                if (v86 != -INFINITY)
                {
                  if (v86 == INFINITY || v38 == INFINITY) {
                    float v43 = INFINITY;
                  }
                  else {
                    float v43 = v86 + v38;
                  }
                }
              }
              LODWORD(v41) = v85;
              uint64_t v45 = kaldi::ScoreCacheFasterDecoder::AddLmState(this, v34, v85, v87);
              float v38 = v43;
              goto LABEL_75;
            }
            float v38 = INFINITY;
LABEL_74:
            uint64_t v45 = v34;
          }
          else
          {
            uint64_t v45 = kaldi::ScoreCacheFasterDecoder::AddLmState(this, v34, SHIDWORD(v37), 0);
          }
LABEL_75:
          float v46 = (float)(*(float *)(v32 + 24) + v38) - v40;
          if (v46 < v19)
          {
            float v47 = -v40;
            unint64_t v48 = v39 + (v45 << 32);
            uint64_t v49 = *((void *)this + 9);
            unint64_t v50 = v48 % *((void *)this + 8);
            uint64_t v51 = *(void *)(v49 + 16 * v50 + 8);
            if (v51)
            {
              uint64_t v52 = *(void *)(v49 + 16 * v50);
              int v53 = (uint64_t *)((char *)this + 48);
              if (v52 != -1) {
                int v53 = (uint64_t *)(*(void *)(v49 + 16 * v52 + 8) + 16);
              }
              uint64_t v54 = *(void *)(v51 + 16);
              for (uint64_t i = *v53; i != v54; uint64_t i = *(void *)(i + 16))
              {
                if (*(void *)i == v48)
                {
                  if ((float)(v46 + v82) < v19) {
                    float v19 = v46 + v82;
                  }
                  if (v46 < *(float *)(*((void *)this + 2) + 28 * *(unsigned int *)(i + 8) + 24))
                  {
                    int v67 = kaldi::ScoreCacheFasterDecoder::NewToken((uint64_t)this, v73, v37 | ((unint64_t)v41 << 32), LODWORD(v38) | (unint64_t)(v39 << 32), v47);
                    kaldi::ScoreCacheFasterDecoder::DeleteTokenChain((uint64_t *)this, *(_DWORD *)(i + 8));
                    *(_DWORD *)(i + 8) = v67;
                  }
                  goto LABEL_94;
                }
              }
            }
            float v56 = v46 + v82;
            if (v56 < v19) {
              float v19 = v56;
            }
            int v57 = kaldi::ScoreCacheFasterDecoder::NewToken((uint64_t)this, v73, v37 | ((unint64_t)v41 << 32), LODWORD(v38) | ((unint64_t)v39 << 32), v47);
            unint64_t v58 = *((void *)this + 8);
            uint64_t v59 = *((void *)this + 9);
            uint64_t v60 = kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::New((uint64_t)v74);
            *(void *)uint64_t v60 = v48;
            *(_DWORD *)(v60 + 8) = v57;
            uint64_t v61 = v59 + 16 * (v48 % v58);
            uint64_t v64 = *(void *)(v61 + 8);
            unint64_t v62 = (uint64_t *)(v61 + 8);
            uint64_t v63 = v64;
            if (v64)
            {
              *(void *)(v60 + 16) = *(void *)(v63 + 16);
              *(void *)(v63 + 16) = v60;
              uint64_t *v62 = v60;
            }
            else
            {
              uint64_t v65 = *((void *)this + 7);
              uint64_t v66 = (uint64_t *)((char *)this + 48);
              if (v65 != -1) {
                uint64_t v66 = (uint64_t *)(*(void *)(*((void *)this + 9) + 16 * v65 + 8) + 16);
              }
              *uint64_t v66 = v60;
              *(void *)(v60 + 16) = 0;
              uint64_t *v62 = v60;
              *(void *)(v59 + 16 * (v48 % v58)) = v65;
              *((void *)this + 7) = v48 % v58;
            }
          }
        }
LABEL_94:
        if (v76) {
          (*(void (**)(uint64_t))(*(void *)v76 + 40))(v76);
        }
        else {
          ++v80;
        }
        continue;
      }
      break;
    }
    if (v76)
    {
      (*(void (**)(void))(*(void *)v76 + 8))();
      goto LABEL_101;
    }
LABEL_99:
    if (v79) {
      --*v79;
    }
LABEL_101:
    uint64_t v18 = v71;
    unsigned int v31 = *(_DWORD *)(v71 + 8);
LABEL_102:
    uint64_t v68 = *(void *)(v18 + 16);
    uint64_t v69 = v18;
    kaldi::ScoreCacheFasterDecoder::DeleteTokenChain((uint64_t *)this, v31);
    *(void *)(v69 + 16) = *((void *)this + 12);
    *((void *)this + 12) = v69;
    uint64_t v18 = v68;
    if (v68) {
      continue;
    }
    return v19;
  }
}

void sub_1B1E561D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

BOOL kaldi::ScoreCacheFasterDecoder::ReachedFinal(kaldi::ScoreCacheFasterDecoder *this)
{
  uint64_t v1 = (unsigned int *)*((void *)this + 6);
  if (!v1) {
    return 0;
  }
  do
  {
    float v3 = *(float *)(*((void *)this + 2) + 28 * v1[2] + 24);
    float v4 = v3 + (*(float (**)(void, void))(**((void **)this + 16) + 32))(*((void *)this + 16), *v1);
    BOOL result = v4 != INFINITY;
    if (v4 != INFINITY) {
      break;
    }
    uint64_t v1 = (unsigned int *)*((void *)v1 + 2);
  }
  while (v1);
  return result;
}

uint64_t kaldi::ScoreCacheFasterDecoder::GetBestPath(uint64_t a1, uint64_t a2, kaldi::LatticeScoreCache *a3, kaldi::TransitionModel *a4)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  BOOL v6 = kaldi::ScoreCacheFasterDecoder::ReachedFinal((kaldi::ScoreCacheFasterDecoder *)a1);
  uint64_t v7 = *(unsigned int **)(a1 + 48);
  if (!v6)
  {
    if (!v7) {
      return 0;
    }
    uint64_t v8 = 0;
    while (1)
    {
      unsigned int v13 = v7[2];
      if (v13 && *(_DWORD *)(a1 + 32) >= v13)
      {
        uint64_t v14 = *(void *)(a1 + 16) + 28 * v13;
        if (!v8) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v14 = 0;
        if (!v8) {
          goto LABEL_16;
        }
      }
      if (*(float *)(v14 + 24) < *(float *)(v8 + 24)) {
LABEL_16:
      }
        uint64_t v8 = v14;
      uint64_t v7 = (unsigned int *)*((void *)v7 + 2);
      if (!v7) {
        goto LABEL_18;
      }
    }
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = 0;
  float v9 = INFINITY;
  do
  {
    uint64_t v10 = *(void *)(a1 + 16) + 28 * v7[2];
    float v11 = *(float *)(v10 + 24);
    float v12 = v11 + (*(float (**)(void, void))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), *v7);
    if (v12 != INFINITY && v12 < v9)
    {
      float v9 = v12;
      uint64_t v8 = v10;
    }
    uint64_t v7 = (unsigned int *)*((void *)v7 + 2);
  }
  while (v7);
LABEL_18:
  if (!v8) {
    return 0;
  }
  unint64_t v15 = 0;
  long long __p = 0;
  float v43 = 0;
  uint64_t v16 = v8;
  unint64_t v44 = 0;
  while (1)
  {
    unsigned int v17 = *(_DWORD *)(v16 + 16);
    double v18 = 0.0;
    if (v17 && *(_DWORD *)(a1 + 32) >= v17) {
      double v18 = *(float *)(*(void *)(a1 + 16) + 28 * v17 + 24);
    }
    float v19 = *(float *)(v16 + 24) - v18;
    float v20 = *(float *)(v16 + 8);
    unsigned int v21 = *(_DWORD *)(v16 + 12);
    *(void *)uint64_t v39 = *(void *)v16;
    *(float *)&uint64_t v40 = v20;
    *((float *)&v40 + 1) = v19 - v20;
    unsigned int v41 = v21;
    if (v15 >= v44)
    {
      unint64_t v15 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t *)&__p, (uint64_t)v39);
    }
    else
    {
      *(void *)unint64_t v15 = *(void *)v39;
      *(void *)(v15 + 8) = v40;
      *(_DWORD *)(v15 + 16) = v41;
      v15 += 20;
    }
    float v43 = (unsigned char *)v15;
    unsigned int v22 = *(_DWORD *)(v16 + 16);
    if (!v22 || *(_DWORD *)(a1 + 32) < v22) {
      break;
    }
    uint64_t v16 = *(void *)(a1 + 16) + 28 * v22;
  }
  (*(void (**)(void))(**(void **)(a1 + 128) + 24))(*(void *)(a1 + 128));
  v43 -= 20;
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v24);
  BOOL v34 = v6;
  unint64_t v25 = v43 - (unsigned char *)__p;
  if (v43 - (unsigned char *)__p >= 1)
  {
    int v26 = 0;
    unint64_t v27 = v25 / 0x14 + 1;
    int v28 = -(int)(v25 / 0x14);
    unint64_t v29 = 20 * ((v43 - (unsigned char *)__p) / 0x14uLL);
    do
    {
      *(void *)uint64_t v39 = *(void *)((char *)__p + v29 - 20);
      uint64_t v40 = *(void *)((char *)__p + v29 - 12);
      unsigned int v41 = *(_DWORD *)((char *)__p + v29 - 4);
      unsigned int v41 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 208))(a2, v24, v39);
      uint64_t v24 = v41;
      if (v39[0])
      {
        if (a3)
        {
          int v31 = (int)__p;
          int v30 = (int)v43;
          int v32 = kaldi::TransitionModel::TransitionIdToTransitionState(a4, v39[0]);
          int v33 = kaldi::TransitionModel::TransitionStateToForwardPdf(a4, v32);
          kaldi::LatticeScoreCache::CacheScore(a3, v28 + (v30 - v31) / 20 - v26, v33, *((float *)&v40 + 1));
        }
      }
      else
      {
        ++v26;
      }
      --v27;
      ++v28;
      v29 -= 20;
    }
    while (v27 > 1);
  }
  if (v34)
  {
    v38[0] = (*(float (**)(void, void))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), *(unsigned int *)(v8 + 12));
    v38[1] = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 184))(a2, v24, v38);
  }
  else
  {
    uint64_t v37 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v24, &v37);
  }
  fst::RemoveEpsLocal<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
  if (__p)
  {
    float v43 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_1B1E567AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ScoreCacheFasterDecoder::GetRawLattice(uint64_t a1, uint64_t a2, kaldi::LatticeScoreCache *a3, kaldi::TransitionModel *a4)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v7 = kaldi::ScoreCacheFasterDecoder::ReachedFinal((kaldi::ScoreCacheFasterDecoder *)a1);
  if (v7)
  {
    long long v49 = 0u;
    long long v50 = 0u;
    int v51 = 1065353216;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v8);
    unsigned int v35 = v7;
    float v9 = *(unsigned int **)(a1 + 48);
    if (v9)
    {
      char v36 = 0;
      int v37 = v8;
      do
      {
        uint64_t v10 = *(void *)(a1 + 16) + 28 * v9[2];
        float v11 = *(float *)(v10 + 24);
        if ((float)(v11
                   + (*(float (**)(void, void))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), *v9)) != INFINITY)
        {
          unint64_t v12 = 0;
          long long __p = 0;
          float v47 = 0;
          uint64_t v13 = v10;
          unint64_t v48 = 0;
          while (1)
          {
            unsigned int v14 = *(_DWORD *)(v13 + 16);
            double v15 = 0.0;
            if (v14 && *(_DWORD *)(a1 + 32) >= v14) {
              double v15 = *(float *)(*(void *)(a1 + 16) + 28 * v14 + 24);
            }
            float v16 = *(float *)(v13 + 24) - v15;
            float v17 = *(float *)(v13 + 8);
            unsigned int v18 = *(_DWORD *)(v13 + 12);
            *(void *)float v43 = *(void *)v13;
            *(float *)&uint64_t v44 = v17;
            *((float *)&v44 + 1) = v16 - v17;
            unsigned int v45 = v18;
            if (v12 >= v48)
            {
              unint64_t v12 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t *)&__p, (uint64_t)v43);
            }
            else
            {
              *(void *)unint64_t v12 = *(void *)v43;
              *(void *)(v12 + 8) = v44;
              *(_DWORD *)(v12 + 16) = v45;
              v12 += 20;
            }
            float v47 = (unsigned char *)v12;
            unsigned int v19 = *(_DWORD *)(v13 + 16);
            if (!v19 || *(_DWORD *)(a1 + 32) < v19) {
              break;
            }
            uint64_t v13 = *(void *)(a1 + 16) + 28 * v19;
          }
          uint64_t v38 = v10;
          (*(void (**)(void))(**(void **)(a1 + 128) + 24))(*(void *)(a1 + 128));
          v47 -= 20;
          unsigned int v42 = v8;
          unint64_t v20 = v47 - (unsigned char *)__p;
          if (v47 - (unsigned char *)__p >= 1)
          {
            int v21 = 0;
            unint64_t v22 = v20 / 0x14 + 1;
            int v23 = -(int)(v20 / 0x14);
            unint64_t v24 = 20 * ((v47 - (unsigned char *)__p) / 0x14uLL);
            do
            {
              *(void *)float v43 = *(void *)((char *)__p + v24 - 20);
              uint64_t v44 = *(void *)((char *)__p + v24 - 12);
              unsigned int v45 = *(_DWORD *)((char *)__p + v24 - 4);
              unsigned int v45 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
              (*(void (**)(uint64_t, void, int *))(*(void *)a2 + 208))(a2, v42, v43);
              unsigned int v42 = v45;
              if (v43[0])
              {
                if (a3)
                {
                  int v25 = (int)__p;
                  int v26 = (int)v47;
                  int v27 = kaldi::TransitionModel::TransitionIdToTransitionState(a4, v43[0]);
                  int v28 = kaldi::TransitionModel::TransitionStateToForwardPdf(a4, v27);
                  kaldi::LatticeScoreCache::CacheScore(a3, v23 + (v26 - v25) / 20 - v21, v28, *((float *)&v44 + 1));
                }
              }
              else
              {
                ++v21;
              }
              --v22;
              ++v23;
              v24 -= 20;
            }
            while (v22 > 1);
          }
          v43[0] = 0;
          v43[0] = (*(float (**)(void, void))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), *(unsigned int *)(v38 + 12));
          if (*(float *)v43 == INFINITY)
          {
            LODWORD(v8) = v37;
          }
          else
          {
            std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,int &,float &>((uint64_t)&v49, (int *)&v42, &v42, v43);
            LODWORD(v8) = v37;
            uint64_t v29 = *(void *)(a1 + 40);
            if (v29)
            {
              float v30 = (*(float (**)(uint64_t, void))(*(void *)v29 + 16))(v29, *(unsigned int *)(*(void *)(a1 + 192) + 32 * (int)v9[1] + 24));
              v36 |= v30 != INFINITY;
              *(float *)&int v31 = v30 + *(float *)v43;
              v43[0] = v31;
            }
            else
            {
              int v31 = v43[0];
            }
            v41[0] = v31;
            v41[1] = 0;
            (*(void (**)(uint64_t, void, _DWORD *))(*(void *)a2 + 184))(a2, v42, v41);
          }
          if (__p)
          {
            float v47 = __p;
            operator delete(__p);
          }
        }
        float v9 = (unsigned int *)*((void *)v9 + 2);
      }
      while (v9);
    }
    else
    {
      char v36 = 0;
    }
    uint64_t v7 = v35;
    if (*(void *)(a1 + 40))
    {
      if ((v36 & 1) == 0)
      {
        for (uint64_t i = (uint64_t *)v50; i; uint64_t i = (uint64_t *)*i)
        {
          uint64_t v33 = *((unsigned int *)i + 4);
          v40[0] = *((_DWORD *)i + 5);
          v40[1] = 0;
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 184))(a2, v33, v40);
        }
      }
    }
    fst::RemoveEpsLocal<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v49);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Try to get lattice before decoding finishes.", 44);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
  }
  return v7;
}

void sub_1B1E56D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
}

void kaldi::ScoreCacheFasterDecoder::GetLattice()
{
}

void sub_1B1E56EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((void *)(v5 - 64));
  _Unwind_Resume(a1);
}

void fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>()
{
}

void sub_1B1E56FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::GetCutoffHelper<kaldi::ScoreCacheFasterDecoder,kaldi::ScoreCacheFasterDecoderOptions,kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::Elem>(void *a1, uint64_t a2, uint64_t a3, void *a4, float *a5, void *a6, int a7, float a8)
{
  uint64_t v9 = a3;
  int v11 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 12)) {
    int v11 = *(_DWORD *)(a2 + 12);
  }
  if (a7) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  if (*(_DWORD *)(a2 + 4) == 0x7FFFFFFF && v12 == 0)
  {
    uint64_t v31 = 0;
    float v32 = INFINITY;
    if (a3)
    {
      do
      {
        float v33 = *(float *)(a1[2] + 28 * *(unsigned int *)(v9 + 8) + 24);
        if (v33 >= v32)
        {
          BOOL v34 = 1;
        }
        else
        {
          float v32 = *(float *)(a1[2] + 28 * *(unsigned int *)(v9 + 8) + 24);
          BOOL v34 = a6 == 0;
        }
        if (!v34)
        {
          *a6 = v9;
          float v32 = v33;
        }
        uint64_t v9 = *(void *)(v9 + 16);
        ++v31;
      }
      while (v9);
    }
    if (a4) {
      *a4 = v31;
    }
    if (a5) {
      *a5 = *(float *)a2;
    }
    return v32 + *(float *)a2;
  }
  else
  {
    int v47 = v12;
    unint64_t v48 = *(int *)(a2 + 4);
    unsigned int v14 = (void **)(a1 + 27);
    a1[28] = a1[27];
    uint64_t v15 = 0;
    if (a3)
    {
      float v16 = -INFINITY;
      float v17 = INFINITY;
      do
      {
        float v18 = *(float *)(a1[2] + 28 * *(unsigned int *)(v9 + 8) + 24);
        unint64_t v20 = (float *)a1[28];
        unint64_t v19 = a1[29];
        if ((unint64_t)v20 >= v19)
        {
          unint64_t v22 = (float *)*v14;
          uint64_t v23 = ((char *)v20 - (unsigned char *)*v14) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v19 - (void)v22;
          if (v25 >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 29), v26);
            unint64_t v22 = (float *)a1[27];
            unint64_t v20 = (float *)a1[28];
          }
          else
          {
            int v27 = 0;
          }
          int v28 = (float *)&v27[4 * v23];
          *int v28 = v18;
          int v21 = v28 + 1;
          while (v20 != v22)
          {
            float v29 = *--v20;
            a8 = v29;
            *--int v28 = v29;
          }
          a1[27] = v28;
          a1[28] = v21;
          a1[29] = &v27[4 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *unint64_t v20 = v18;
          int v21 = v20 + 1;
        }
        a1[28] = v21;
        if (v18 >= v17)
        {
          BOOL v30 = 1;
        }
        else
        {
          float v17 = v18;
          BOOL v30 = a6 == 0;
        }
        if (!v30)
        {
          *a6 = v9;
          float v17 = v18;
        }
        if (v18 > v16) {
          float v16 = v18;
        }
        uint64_t v9 = *(void *)(v9 + 16);
        ++v15;
      }
      while (v9);
    }
    else
    {
      float v17 = INFINITY;
      float v16 = -INFINITY;
    }
    if (a4) {
      *a4 = v15;
    }
    float v36 = *(float *)a2;
    float v35 = INFINITY;
    if (!*(_DWORD *)(a2 + 12)) {
      float v16 = INFINITY;
    }
    int v37 = (float *)a1[27];
    uint64_t v38 = (float *)a1[28];
    unint64_t v39 = v38 - v37;
    if (v39 <= v48)
    {
      int v41 = v47;
    }
    else
    {
      uint64_t v40 = &v37[v48];
      int v41 = v47;
      if (v40 != v38)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v37, v40, v38, a8);
        int v37 = (float *)a1[27];
        uint64_t v38 = (float *)a1[28];
        unint64_t v39 = v38 - v37;
      }
      float v35 = v37[v48];
    }
    float v42 = v17 + v36;
    if (v39 > v41) {
      float v43 = v17;
    }
    else {
      float v43 = v16;
    }
    if (v41 && v39 > v41)
    {
      uint64_t v44 = &v37[v41];
      if (v39 > v48) {
        uint64_t v38 = &v37[v48];
      }
      if (v44 != v38)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v37, v44, v38, v43);
        int v37 = (float *)*v14;
      }
      float v43 = v37[v41];
    }
    if (v35 >= v42)
    {
      if (v43 <= v42)
      {
        *a5 = *(float *)a2;
        return v42;
      }
      else
      {
        if (a5) {
          *a5 = (float)(v43 - v17) + *(float *)(a2 + 20);
        }
        return v43;
      }
    }
    else if (a5)
    {
      *a5 = (float)(v35 - v17) + *(float *)(a2 + 20);
    }
  }
  return v35;
}

uint64_t *kaldi::ScoreCacheFasterDecoder::DeleteTokenChain(uint64_t *this, unsigned int a2)
{
  if (a2 && *((_DWORD *)this + 8) >= a2) {
    uint64_t v2 = this[2] + 28 * a2;
  }
  else {
    uint64_t v2 = 0;
  }
  int v3 = *(_DWORD *)(v2 + 20) - 1;
  *(_DWORD *)(v2 + 20) = v3;
  if (!v3)
  {
    uint64_t v4 = *this;
    int v5 = *((_DWORD *)this + 2);
    do
    {
      unsigned int v6 = *(_DWORD *)(v2 + 16);
      *(_DWORD *)(v4 + 4 * v5) = a2;
      int v5 = *((_DWORD *)this + 2) + 1;
      *((_DWORD *)this + 2) = v5;
      if (!v6) {
        break;
      }
      uint64_t v2 = this[2] + 28 * v6;
      int v7 = *(_DWORD *)(v2 + 20);
      a2 = v6;
      *(_DWORD *)(v2 + 20) = v7 - 1;
    }
    while (v7 == 1);
  }
  return this;
}

uint64_t kaldi::ScoreCacheFasterDecoder::AddLmState(kaldi::ScoreCacheFasterDecoder *this, int a2, signed int a3, int a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *((void *)this + 24);
  unint64_t v9 = *((void *)this + 25);
  int v7 = (uint64_t *)((char *)this + 192);
  uint64_t v10 = v8 + 32 * a2;
  uint64_t v13 = *(void *)(v10 + 8);
  uint64_t v11 = v10 + 8;
  uint64_t v12 = v13;
  if (v13)
  {
    uint64_t v14 = v11;
    do
    {
      int v15 = *(_DWORD *)(v12 + 28);
      BOOL v16 = v15 < a3;
      if (v15 >= a3) {
        float v17 = (uint64_t *)v12;
      }
      else {
        float v17 = (uint64_t *)(v12 + 8);
      }
      if (!v16) {
        uint64_t v14 = v12;
      }
      uint64_t v12 = *v17;
    }
    while (*v17);
    if (v14 != v11 && *(_DWORD *)(v14 + 28) <= a3) {
      return *(unsigned int *)(v14 + 32);
    }
  }
  v24[0] = 0;
  v24[1] = 0;
  unint64_t v23 = (unint64_t)v24;
  int v25 = a4;
  if (v9 >= *((void *)this + 26))
  {
    uint64_t v18 = std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__emplace_back_slow_path<kaldi::ScoreCacheFasterDecoder::LmTrie>(v7, (uint64_t)&v23);
  }
  else
  {
    std::map<int,int>::map[abi:ne180100]((uint64_t *)v9, (uint64_t)&v23);
    *(_DWORD *)(v9 + 24) = v25;
    uint64_t v18 = v9 + 32;
    *((void *)this + 25) = v9 + 32;
  }
  *((void *)this + 25) = v18;
  std::__tree<int>::destroy((uint64_t)&v23, v24[0]);
  uint64_t v19 = *((void *)this + 24);
  unint64_t v20 = (uint64_t **)(v19 + 32 * v6);
  int v21 = (void *)(((*((void *)this + 25) - v19) >> 5) - 1);
  unint64_t v23 = a3;
  v24[0] = v21;
  std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned long>>(v20, (int *)&v23, (uint64_t)&v23);
  return ((*((void *)this + 25) - *((void *)this + 24)) >> 5) - 1;
}

void sub_1B1E574A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__emplace_back_slow_path<kaldi::ScoreCacheFasterDecoder::LmTrie>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (uint64_t *)&v10[32 * v4];
  int v15 = v14;
  BOOL v16 = &v10[32 * v9];
  *((_DWORD *)std::map<int,int>::map[abi:ne180100](v14, a2) + 6) = *(_DWORD *)(a2 + 24);
  v15 += 4;
  std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::~__split_buffer(&v13);
  return v11;
}

void sub_1B1E575A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,int>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<quasar::PronType,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::PronType,int>,std::__tree_node<std::__value_type<quasar::PronType,int>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1B1E575FC(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      std::map<int,int>::map[abi:ne180100]((uint64_t *)(v7 - 32), v9 - 32);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      uint64_t v7 = *((void *)&v15 + 1) - 32;
      *((void *)&v15 + 1) -= 32;
      v9 -= 32;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1B1E57740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
    v1 += 32;
  }
}

void **std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__tree<int>::destroy(i - 32, *(void **)(i - 24));
  }
}

uint64_t **std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned long>>(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    uint64_t v11 = *(void *)(a3 + 8);
    *((_DWORD *)v10 + 7) = *(_DWORD *)a3;
    *((_DWORD *)v10 + 8) = v11;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void *kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::~HashList(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      ++v3;
      uint64_t v2 = *(void *)(v2 + 16);
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)a1[7];
  uint64_t v5 = (unsigned char *)a1[8];
  if (v5 == (unsigned char *)v4)
  {
    uint64_t v7 = 0;
    uint64_t v4 = (void *)a1[8];
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (v4[v6])
      {
        MEMORY[0x1B3EA8630](v4[v6], 0x1020C806E52F545);
        uint64_t v4 = (void *)a1[7];
        uint64_t v5 = (unsigned char *)a1[8];
      }
      ++v6;
      v7 += 1024;
    }
    while (v6 < (v5 - (unsigned char *)v4) >> 3);
  }
  if (v3 != v7 && kaldi::g_kaldi_verbose_level > -2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Possible memory leak: ", 22);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" != ", 4);
    int v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": you might have forgotten to call Delete on ", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"some Elems", 10);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    uint64_t v4 = (void *)a1[7];
  }
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v11 = (void *)a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
  }
  return a1;
}

void std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)v4 - 32;
      do
      {
        std::__tree<int>::destroy(v6, *(void **)(v6 + 8));
        BOOL v7 = v6 == (void)v2;
        v6 -= 32;
      }
      while (!v7);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__push_back_slow_path<kaldi::ScoreCacheFasterDecoder::LmTrie>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  long long v14 = (uint64_t *)&v10[32 * v4];
  long long v15 = v14;
  BOOL v16 = &v10[32 * v9];
  *((_DWORD *)std::map<int,int>::map[abi:ne180100](v14, a2) + 6) = *(_DWORD *)(a2 + 24);
  v15 += 4;
  std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::~__split_buffer(&v13);
  return v11;
}

void sub_1B1E57BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::New(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result) {
    operator new[]();
  }
  *(void *)(a1 + 48) = *(void *)(result + 16);
  return result;
}

void *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,int &,float &>(uint64_t a1, int *a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  *((_DWORD *)v12 + 5) = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  int v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v12 = *v21;
LABEL_38:
    *int v21 = v12;
    goto LABEL_39;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1B1E57F44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::StateSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1] - *a2;
  if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) == v4 >> 2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) == -1) {
      return;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0xF3FFFFF0007, 0);
    unint64_t v6 = (uint64_t)(a2[1] - *a2) >> 2;
    LOBYTE(v29) = 0;
    std::vector<BOOL>::vector(&v51, v6, (unsigned __int8 *)&v29);
    memset(v50, 0, sizeof(v50));
    memset(v49, 0, sizeof(v49));
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    (*(void (**)(uint64_t, void))(*(void *)a1 + 176))(a1, *(unsigned int *)(*a2 + 4 * v7));
    uint64_t v27 = v5;
    unsigned int v48 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v46);
    unint64_t v8 = v50;
    unint64_t v9 = v49;
    int32x2_t v10 = vdup_n_s32(0x7F800000u);
LABEL_4:
    if (!v46)
    {
      if ((int)v48 >= v47) {
        goto LABEL_70;
      }
      goto LABEL_9;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v46 + 16))(v46))
    {
      if (v46)
      {
        unint64_t v11 = (*(uint64_t (**)(void))(*(void *)v46 + 24))();
LABEL_10:
        if ((*(void *)((char *)v51 + (((unint64_t)(int)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11))
        {
          uint64_t v12 = v9;
          goto LABEL_62;
        }
        (*(void (**)(void **__return_ptr, uint64_t, unint64_t))(*(void *)a1 + 32))(&v43, a1, v11);
        unint64_t v39 = (void *)v10;
        int v41 = 0;
        uint64_t v42 = 0;
        uint64_t v40 = 0;
        std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v8);
        unint64_t v33 = 0;
        (*(void (**)(uint64_t, unint64_t, void **))(*(void *)a1 + 136))(a1, v11, &v29);
        while (1)
        {
          if (v29)
          {
            if ((*(unsigned int (**)(void *))(*(void *)v29 + 24))(v29))
            {
              if (v29)
              {
                (*(void (**)(void))(*(void *)v29 + 8))();
                goto LABEL_29;
              }
LABEL_27:
              if (v32) {
                --*v32;
              }
LABEL_29:
              while (2)
              {
                uint64_t v12 = v9;
                unint64_t v16 = (unint64_t)(int)v11 >> 6;
                uint64_t v17 = 1 << v11;
                if (((1 << v11) & v51[v16]) == 0)
                {
                  unint64_t v11 = *(int *)(*a2 + 4 * (int)v11);
                  if ((*(void *)((char *)v51 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11)) {
                    goto LABEL_31;
                  }
                  (*(void (**)(void **__return_ptr, uint64_t, unint64_t))(*(void *)a1 + 32))(&v29, a1, v11);
                  unint64_t v39 = v29;
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v40, (char *)v30, (uint64_t)v31, ((unsigned char *)v31 - (unsigned char *)v30) >> 2);
                  if (v30)
                  {
                    uint64_t v31 = v30;
                    operator delete(v30);
                  }
                  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v9);
                  unint64_t v33 = 0;
                  (*(void (**)(uint64_t, unint64_t, void **))(*(void *)a1 + 136))(a1, v11, &v29);
LABEL_42:
                  if (v29)
                  {
                    if ((*(unsigned int (**)(void *))(*(void *)v29 + 24))(v29))
                    {
                      if (v29)
                      {
                        (*(void (**)(void))(*(void *)v29 + 8))();
                        goto LABEL_31;
                      }
LABEL_56:
                      if (v32) {
                        --*v32;
                      }
LABEL_31:
                      float v35 = v43;
                      int v37 = 0;
                      uint64_t v38 = 0;
                      long long __p = 0;
                      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v44, (uint64_t)v45, (v45 - (unsigned char *)v44) >> 2);
                      (*(void (**)(uint64_t, unint64_t, void **))(*(void *)a1 + 184))(a1, v11, &v35);
                      if (__p)
                      {
                        int v37 = __p;
                        operator delete(__p);
                      }
                      (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 240))(a1, v11);
                      uint64_t v28 = v17;
                      uint64_t v18 = *v8;
                      if (v8[1] != *v8)
                      {
                        uint64_t v19 = 0;
                        unint64_t v20 = 0;
                        do
                        {
                          uint64_t v21 = v18 + v19;
                          float v29 = *(void **)(v18 + v19);
                          BOOL v30 = *(void **)(v18 + v19 + 8);
                          float v32 = 0;
                          unint64_t v33 = 0;
                          uint64_t v31 = 0;
                          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, *(const void **)(v18 + v19 + 16), *(void *)(v18 + v19 + 24), (uint64_t)(*(void *)(v18 + v19 + 24) - *(void *)(v18 + v19 + 16)) >> 2);
                          int v34 = *(_DWORD *)(v21 + 40);
                          int v34 = *(_DWORD *)(*a2 + 4 * v34);
                          (*(void (**)(uint64_t, unint64_t, void **))(*(void *)a1 + 208))(a1, v11, &v29);
                          if (v31)
                          {
                            float v32 = v31;
                            operator delete(v31);
                          }
                          ++v20;
                          uint64_t v18 = *v8;
                          v19 += 48;
                        }
                        while (v20 < 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 4));
                      }
                      v51[v16] |= v28;
                      float v43 = v39;
                      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v44, (char *)v40, (uint64_t)v41, (v41 - (unsigned char *)v40) >> 2);
                      unint64_t v9 = v8;
                      unint64_t v8 = v12;
                      continue;
                    }
                    if (v29)
                    {
                      unint64_t v22 = (char *)(*(uint64_t (**)(void))(*(void *)v29 + 32))();
LABEL_48:
                      unint64_t v23 = v12[1];
                      if (v23 >= v12[2])
                      {
                        uint64_t v24 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(v12, (uint64_t)v22);
                      }
                      else
                      {
                        std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)v12, (uint64_t)v22);
                        uint64_t v24 = v23 + 48;
                      }
                      v12[1] = v24;
                      if (v29) {
                        (*(void (**)(void *))(*(void *)v29 + 40))(v29);
                      }
                      else {
                        ++v33;
                      }
                      goto LABEL_42;
                    }
                  }
                  else if (v33 >= (unint64_t)v31)
                  {
                    goto LABEL_56;
                  }
                  unint64_t v22 = (char *)v30 + 48 * v33;
                  goto LABEL_48;
                }
                break;
              }
              if (v40)
              {
                int v41 = v40;
                operator delete(v40);
              }
              if (v44)
              {
                unsigned int v45 = v44;
                operator delete(v44);
              }
LABEL_62:
              if (v46) {
                (*(void (**)(uint64_t))(*(void *)v46 + 32))(v46);
              }
              else {
                ++v48;
              }
              unint64_t v9 = v12;
              goto LABEL_4;
            }
            if (v29)
            {
              unint64_t v13 = (char *)(*(uint64_t (**)(void))(*(void *)v29 + 32))();
              goto LABEL_19;
            }
          }
          else if (v33 >= (unint64_t)v31)
          {
            goto LABEL_27;
          }
          unint64_t v13 = (char *)v30 + 48 * v33;
LABEL_19:
          unint64_t v14 = v8[1];
          if (v14 >= v8[2])
          {
            uint64_t v15 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(v8, (uint64_t)v13);
          }
          else
          {
            std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)v8, (uint64_t)v13);
            uint64_t v15 = v14 + 48;
          }
          v8[1] = v15;
          if (v29) {
            (*(void (**)(void *))(*(void *)v29 + 40))(v29);
          }
          else {
            ++v33;
          }
        }
      }
LABEL_9:
      unint64_t v11 = v48;
      goto LABEL_10;
    }
    if (v46) {
      (*(void (**)(void))(*(void *)v46 + 8))();
    }
LABEL_70:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v27, 0x3FFFFFFF0007);
    float v29 = v49;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    float v29 = v50;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    if (v51) {
      operator delete(v51);
    }
  }
  else
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&v29, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&v29, "ERROR");
    }
    int v25 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)&v29);
    unint64_t v26 = (void *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"StateSort: bad order vector size: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v43);
    if (SHIBYTE(v31) < 0) {
      operator delete(v29);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
  }
}

void sub_1B1E588DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, void *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *quasar::tennessee::Collation<long long,long long>::SortInPlace<std::vector<long long>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t *)a2[1];
  std::__function::__value_func<long long const& ()(long long const&)>::__value_func[abi:ne180100]((uint64_t)v7, a3);
  quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(a1, v4, v5, (uint64_t)v7);
  return std::__function::__value_func<long long const& ()(long long const&)>::~__value_func[abi:ne180100](v7);
}

void sub_1B1E58AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<long long const& ()(long long const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::tennessee::internal::ManagedImmutableSortedArrayStlVectorImpl<long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>,std::unique_ptr<std::vector<long long>>>()
{
}

void sub_1B1E58BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = a9;
  a9 = 0;
  if (v12) {
    std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  }
  std::make_unique[abi:ne180100]<quasar::tennessee::internal::ManagedImmutableSortedArrayStlVectorImpl<long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>,std::unique_ptr<std::vector<long long>>>(&a10);
  MEMORY[0x1B3EA8670](v10, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void quasar::tennessee::Deserialize<long long,true>(uint64_t a1, quasar::tennessee::memory_mapping::VirtualMemoryFile **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v4 = v2;
  quasar::tennessee::generic_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::memory_mapping::VirtualMemoryFile,std::unique_ptr<quasar::tennessee::memory_mapping::VirtualMemoryFile>>::generic_flatbuf_ptr((uint64_t)&v5, &v4, 0);
  uint64_t v3 = v4;
  uint64_t v4 = 0;
  uint64_t v5 = &unk_1F0A59FA0;
  if (v3) {
    (*(void (**)(quasar::tennessee::memory_mapping::VirtualMemoryFile *))(*(void *)v3 + 8))(v3);
  }
  std::make_unique[abi:ne180100]<quasar::tennessee::internal::VmemFileImmutableSortedArrayFlatbufferVectorImpl<long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>();
}

void sub_1B1E58CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<long long const& ()(long long const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char *std::vector<long long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  int v7 = v5;
  if (*a1 != __src)
  {
    unint64_t v8 = __src;
    int v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    int v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *a2;
    uint64_t v8 = *a3;
    for (uint64_t i = (void *)*((void *)v6 + 1); v8 != v7; ++v7)
      *i++ = v7;
    *((void *)v6 + 1) = i;
  }
  return result;
}

void sub_1B1E58F10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<std::vector<long long>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

uint64_t quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v7 = 126 - 2 * __clz(((uint64_t)a3 - a2) >> 3);
  if (a3 == (uint64_t *)a2) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  v10[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  v10[1] = a4;
  return std::__introsort<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *,false>(a2, a3, v10, v8, 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *,false>(uint64_t result, uint64_t *a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v27 = *(a2 - 1);
          uint64_t v33 = *v11;
          uint64_t v34 = v27;
          uint64_t v28 = *(void *)(a3[1] + 24);
          if (!v28) {
            goto LABEL_38;
          }
          uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v28 + 48))(v28, &v34);
          uint64_t v30 = *(void *)(a3[1] + 24);
          if (!v30) {
            goto LABEL_38;
          }
          uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v30 + 48))(v30, &v33);
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v29, v31);
          if ((result & 0x80000000) != 0)
          {
            uint64_t v32 = *v11;
            *uint64_t v11 = *(a2 - 1);
            *(a2 - 1) = v32;
          }
          break;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v11, v11 + 1, a2 - 1, a3);
        case 4uLL:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191)
    {
      if (a5) {
        return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>((uint64_t)v11, a2, a3);
      }
      else {
        return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>((uint64_t)v11, a2, a3);
      }
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v17 - 1, v17, &v11[v16 + 1], a3);
      uint64_t v18 = *v11;
      *uint64_t v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = *(v11 - 1);
    uint64_t v33 = *v11;
    uint64_t v34 = v19;
    uint64_t v20 = *(void *)(a3[1] + 24);
    if (!v20
      || (uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v20 + 48))(v20, &v34),
          (uint64_t v22 = *(void *)(a3[1] + 24)) == 0))
    {
LABEL_38:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v22 + 48))(v22, &v33);
    if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v21, v23) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,long long *,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &>(v11, a2, a3);
      uint64_t v11 = (uint64_t *)result;
      goto LABEL_21;
    }
LABEL_16:
    uint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,long long *,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &>(v11, a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v11, v24, a3);
    uint64_t v11 = v24 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v24 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_19:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *,false>(v10, v24, a3, -v13, a5 & 1);
      uint64_t v11 = v24 + 1;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (v11 != a2) {
    return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *,long long *>(v11, a2, a2, a3);
  }
  return result;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t result, uint64_t *a2, void *a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = (void *)result;
    char v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t v22 = v10;
        uint64_t v23 = v9;
        uint64_t v11 = *(void *)(a3[1] + 24);
        if (!v11
          || (uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 48))(v11, &v23),
              (uint64_t v13 = *(void *)(a3[1] + 24)) == 0))
        {
LABEL_17:
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, &v22);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v12, v14);
        if ((result & 0x80000000) != 0)
        {
          uint64_t v15 = *v8;
          uint64_t v16 = v7;
          while (1)
          {
            *(void *)((char *)v4 + v16 + 8) = *(void *)((char *)v4 + v16);
            if (!v16) {
              break;
            }
            uint64_t v22 = *(void *)((char *)v4 + v16 - 8);
            uint64_t v23 = v15;
            uint64_t v17 = *(void *)(a3[1] + 24);
            if (!v17) {
              goto LABEL_17;
            }
            uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v17 + 48))(v17, &v23);
            uint64_t v19 = *(void *)(a3[1] + 24);
            if (!v19) {
              goto LABEL_17;
            }
            uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v19 + 48))(v19, &v22);
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v18, v20);
            v16 -= 8;
            if ((result & 0x80000000) == 0)
            {
              uint64_t v21 = (void *)((char *)v4 + v16 + 8);
              goto LABEL_14;
            }
          }
          uint64_t v21 = v4;
LABEL_14:
          *uint64_t v21 = v15;
        }
        char v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t result, void *a2, void *a3)
{
  if ((void *)result != a2)
  {
    uint64_t v4 = (void *)result;
    for (uint64_t i = (void *)(result + 8); v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v4 = i;
      uint64_t v20 = v8;
      uint64_t v21 = v7;
      uint64_t v9 = *(void *)(a3[1] + 24);
      if (!v9
        || (uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v21),
            (uint64_t v11 = *(void *)(a3[1] + 24)) == 0))
      {
LABEL_13:
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 48))(v11, &v20);
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v10, v12);
      if ((result & 0x80000000) != 0)
      {
        uint64_t v13 = *v4;
        uint64_t v14 = v4;
        do
        {
          uint64_t v15 = *(v14 - 2);
          *uint64_t v14 = *(v14 - 1);
          uint64_t v20 = v15;
          uint64_t v21 = v13;
          uint64_t v16 = *(void *)(a3[1] + 24);
          if (!v16) {
            goto LABEL_13;
          }
          uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v16 + 48))(v16, &v21);
          uint64_t v18 = *(void *)(a3[1] + 24);
          if (!v18) {
            goto LABEL_13;
          }
          uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v18 + 48))(v18, &v20);
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v17, v19);
          --v14;
        }
        while ((result & 0x80000000) != 0);
        *uint64_t v14 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = *a2;
  uint64_t v39 = *a1;
  uint64_t v40 = v5;
  uint64_t v6 = *(void *)(a4[1] + 24);
  if (!v6) {
    goto LABEL_23;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v40);
  uint64_t v11 = *(void *)(a4[1] + 24);
  if (!v11) {
    goto LABEL_23;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 48))(v11, &v39);
  int v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a4 + 16))(*a4, v10, v12);
  uint64_t v14 = *a3;
  if ((v13 & 0x80000000) == 0)
  {
    uint64_t v39 = *a2;
    uint64_t v40 = v14;
    uint64_t v15 = *(void *)(a4[1] + 24);
    if (v15)
    {
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, &v40);
      uint64_t v17 = *(void *)(a4[1] + 24);
      if (v17)
      {
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v17 + 48))(v17, &v39);
        if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a4 + 16))(*a4, v16, v18) & 0x80000000) == 0) {
          return 0;
        }
        uint64_t v32 = *a2;
        *a2 = *a3;
        *a3 = v32;
        uint64_t v33 = *a2;
        uint64_t v39 = *a1;
        uint64_t v40 = v33;
        uint64_t v34 = *(void *)(a4[1] + 24);
        if (v34)
        {
          uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v34 + 48))(v34, &v40);
          uint64_t v36 = *(void *)(a4[1] + 24);
          if (v36)
          {
            uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v36 + 48))(v36, &v39);
            if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a4 + 16))(*a4, v35, v37) & 0x80000000) != 0)
            {
              uint64_t v38 = *a1;
              *a1 = *a2;
              *a2 = v38;
              return 2;
            }
            return 1;
          }
        }
      }
    }
LABEL_23:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v39 = *a2;
  uint64_t v40 = v14;
  uint64_t v20 = *(void *)(a4[1] + 24);
  if (!v20) {
    goto LABEL_23;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v20 + 48))(v20, &v40);
  uint64_t v22 = *(void *)(a4[1] + 24);
  if (!v22) {
    goto LABEL_23;
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v22 + 48))(v22, &v39);
  int v24 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a4 + 16))(*a4, v21, v23);
  uint64_t v25 = *a1;
  if (v24 < 0)
  {
    *a1 = *a3;
    *a3 = v25;
    return 1;
  }
  *a1 = *a2;
  *a2 = v25;
  uint64_t v26 = *a3;
  uint64_t v39 = v25;
  uint64_t v40 = v26;
  uint64_t v27 = *(void *)(a4[1] + 24);
  if (!v27) {
    goto LABEL_23;
  }
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v27 + 48))(v27, &v40);
  uint64_t v29 = *(void *)(a4[1] + 24);
  if (!v29) {
    goto LABEL_23;
  }
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v29 + 48))(v29, &v39);
  if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a4 + 16))(*a4, v28, v30) & 0x80000000) != 0)
  {
    uint64_t v31 = *a2;
    *a2 = *a3;
    *a3 = v31;
    return 2;
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,long long *,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &>(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v40 = *(a2 - 1);
  uint64_t v41 = v4;
  uint64_t v5 = *(void *)(a3[1] + 24);
  if (!v5) {
    goto LABEL_30;
  }
  uint64_t v7 = a2;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v41);
  uint64_t v9 = *(void *)(a3[1] + 24);
  if (!v9) {
    goto LABEL_30;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v40);
  if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v8, v10) & 0x80000000) != 0)
  {
    uint64_t v12 = a1;
    while (1)
    {
      uint64_t v18 = v12[1];
      ++v12;
      uint64_t v40 = v18;
      uint64_t v41 = v4;
      uint64_t v19 = *(void *)(a3[1] + 24);
      if (!v19) {
        break;
      }
      uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v19 + 48))(v19, &v41);
      uint64_t v21 = *(void *)(a3[1] + 24);
      if (!v21) {
        break;
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v21 + 48))(v21, &v40);
      if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v20, v22) & 0x80000000) != 0) {
        goto LABEL_14;
      }
    }
LABEL_30:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v11 = a1 + 1;
  do
  {
    uint64_t v12 = v11;
    if (v11 >= v7) {
      break;
    }
    uint64_t v40 = *v11;
    uint64_t v41 = v4;
    uint64_t v13 = *(void *)(a3[1] + 24);
    if (!v13) {
      goto LABEL_30;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, &v41);
    uint64_t v15 = *(void *)(a3[1] + 24);
    if (!v15) {
      goto LABEL_30;
    }
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, &v40);
    int v17 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v14, v16);
    uint64_t v11 = v12 + 1;
  }
  while ((v17 & 0x80000000) == 0);
LABEL_14:
  if (v12 < v7)
  {
    do
    {
      uint64_t v23 = *--v7;
      uint64_t v40 = v23;
      uint64_t v41 = v4;
      uint64_t v24 = *(void *)(a3[1] + 24);
      if (!v24) {
        goto LABEL_30;
      }
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v24 + 48))(v24, &v41);
      uint64_t v26 = *(void *)(a3[1] + 24);
      if (!v26) {
        goto LABEL_30;
      }
      uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v26 + 48))(v26, &v40);
    }
    while (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v25, v27) & 0x80000000) != 0);
  }
LABEL_26:
  if (v12 < v7)
  {
    uint64_t v28 = *v12;
    *uint64_t v12 = *v7;
    *uint64_t v7 = v28;
    do
    {
      uint64_t v29 = v12[1];
      ++v12;
      uint64_t v40 = v29;
      uint64_t v41 = v4;
      uint64_t v30 = *(void *)(a3[1] + 24);
      if (!v30) {
        goto LABEL_30;
      }
      uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v30 + 48))(v30, &v41);
      uint64_t v32 = *(void *)(a3[1] + 24);
      if (!v32) {
        goto LABEL_30;
      }
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v32 + 48))(v32, &v40);
    }
    while (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v31, v33) & 0x80000000) == 0);
    while (1)
    {
      uint64_t v34 = *--v7;
      uint64_t v40 = v34;
      uint64_t v41 = v4;
      uint64_t v35 = *(void *)(a3[1] + 24);
      if (!v35) {
        goto LABEL_30;
      }
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v35 + 48))(v35, &v41);
      uint64_t v37 = *(void *)(a3[1] + 24);
      if (!v37) {
        goto LABEL_30;
      }
      uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v37 + 48))(v37, &v40);
      if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v36, v38) & 0x80000000) == 0) {
        goto LABEL_26;
      }
    }
  }
  if (v12 - 1 != a1) {
    *a1 = *(v12 - 1);
  }
  *(v12 - 1) = v4;
  return v12;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,long long *,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &>(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
  {
    uint64_t v8 = a1[v6 + 1];
    uint64_t v38 = v7;
    uint64_t v39 = v8;
    uint64_t v9 = *(void *)(a3[1] + 24);
    if (!v9) {
      goto LABEL_29;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v39);
    uint64_t v11 = *(void *)(a3[1] + 24);
    if (!v11) {
      goto LABEL_29;
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 48))(v11, &v38);
    ++v6;
  }
  while (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v10, v12) & 0x80000000) != 0);
  uint64_t v13 = &a1[v6];
  if (v6 != 1)
  {
    while (1)
    {
      uint64_t v14 = *--a2;
      uint64_t v38 = v7;
      uint64_t v39 = v14;
      uint64_t v15 = *(void *)(a3[1] + 24);
      if (!v15) {
        break;
      }
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, &v39);
      uint64_t v17 = *(void *)(a3[1] + 24);
      if (!v17) {
        break;
      }
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v17 + 48))(v17, &v38);
      if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v16, v18) & 0x80000000) != 0) {
        goto LABEL_14;
      }
    }
LABEL_29:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  while (v13 < a2)
  {
    uint64_t v19 = *--a2;
    uint64_t v38 = v7;
    uint64_t v39 = v19;
    uint64_t v20 = *(void *)(a3[1] + 24);
    if (!v20) {
      goto LABEL_29;
    }
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v20 + 48))(v20, &v39);
    uint64_t v22 = *(void *)(a3[1] + 24);
    if (!v22) {
      goto LABEL_29;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v22 + 48))(v22, &v38);
    if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v21, v23) & 0x80000000) != 0) {
      break;
    }
  }
LABEL_14:
  if (v13 >= a2)
  {
    uint64_t result = v13 - 1;
  }
  else
  {
    uint64_t v24 = &a1[v6];
    uint64_t v25 = a2;
    do
    {
      uint64_t v26 = *v24;
      *uint64_t v24 = *v25;
      uint64_t *v25 = v26;
      do
      {
        uint64_t v27 = v24[1];
        ++v24;
        uint64_t v38 = v7;
        uint64_t v39 = v27;
        uint64_t v28 = *(void *)(a3[1] + 24);
        if (!v28) {
          goto LABEL_29;
        }
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v28 + 48))(v28, &v39);
        uint64_t v30 = *(void *)(a3[1] + 24);
        if (!v30) {
          goto LABEL_29;
        }
        uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v30 + 48))(v30, &v38);
      }
      while (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v29, v31) & 0x80000000) != 0);
      do
      {
        uint64_t v32 = *--v25;
        uint64_t v38 = v7;
        uint64_t v39 = v32;
        uint64_t v33 = *(void *)(a3[1] + 24);
        if (!v33) {
          goto LABEL_29;
        }
        uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v33 + 48))(v33, &v39);
        uint64_t v35 = *(void *)(a3[1] + 24);
        if (!v35) {
          goto LABEL_29;
        }
        uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v35 + 48))(v35, &v38);
      }
      while (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v34, v36) & 0x80000000) == 0);
    }
    while (v24 < v25);
    uint64_t result = v24 - 1;
  }
  if (result != a1) {
    *a1 = *result;
  }
  *uint64_t result = v7;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v30 = *a1;
      uint64_t v31 = v8;
      uint64_t v9 = *(void *)(a3[1] + 24);
      if (!v9) {
        goto LABEL_27;
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v31);
      uint64_t v11 = *(void *)(a3[1] + 24);
      if (!v11) {
        goto LABEL_27;
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 48))(v11, &v30);
      if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v10, v12) & 0x80000000) != 0)
      {
        uint64_t v13 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v13;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v14 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v15 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    uint64_t v18 = *v15;
    uint64_t v30 = *v14;
    uint64_t v31 = v18;
    uint64_t v19 = *(void *)(a3[1] + 24);
    if (!v19
      || (uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v19 + 48))(v19, &v31),
          (uint64_t v21 = *(void *)(a3[1] + 24)) == 0))
    {
LABEL_27:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v21 + 48))(v21, &v30);
    if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v20, v22) & 0x80000000) != 0)
    {
      uint64_t v23 = *v15;
      uint64_t v24 = v16;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v24 + 24) = *(uint64_t *)((char *)a1 + v24 + 16);
        if (v24 == -16) {
          break;
        }
        uint64_t v30 = *(uint64_t *)((char *)a1 + v24 + 8);
        uint64_t v31 = v23;
        uint64_t v25 = *(void *)(a3[1] + 24);
        if (!v25) {
          goto LABEL_27;
        }
        uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v25 + 48))(v25, &v31);
        uint64_t v27 = *(void *)(a3[1] + 24);
        if (!v27) {
          goto LABEL_27;
        }
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v27 + 48))(v27, &v30);
        v24 -= 8;
        if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v26, v28) & 0x80000000) == 0)
        {
          uint64_t v29 = (uint64_t *)((char *)a1 + v24 + 24);
          goto LABEL_18;
        }
      }
      uint64_t v29 = a1;
LABEL_18:
      uint64_t *v29 = v23;
      if (++v17 == 8) {
        return v15 + 1 == a2;
      }
    }
    uint64_t v14 = v15;
    v16 += 8;
    if (++v15 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v29 = *a3;
  uint64_t v30 = v10;
  uint64_t v11 = *(void *)(a5[1] + 24);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 48))(v11, &v30);
  uint64_t v13 = *(void *)(a5[1] + 24);
  if (!v13) {
    goto LABEL_12;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, &v29);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a5 + 16))(*a5, v12, v14);
  if ((result & 0x80000000) == 0) {
    return result;
  }
  uint64_t v16 = *a3;
  *a3 = *a4;
  *a4 = v16;
  uint64_t v17 = *a3;
  uint64_t v29 = *a2;
  uint64_t v30 = v17;
  uint64_t v18 = *(void *)(a5[1] + 24);
  if (!v18) {
    goto LABEL_12;
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v18 + 48))(v18, &v30);
  uint64_t v20 = *(void *)(a5[1] + 24);
  if (!v20) {
    goto LABEL_12;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v20 + 48))(v20, &v29);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a5 + 16))(*a5, v19, v21);
  if ((result & 0x80000000) == 0) {
    return result;
  }
  uint64_t v22 = *a2;
  *a2 = *a3;
  *a3 = v22;
  uint64_t v23 = *a2;
  uint64_t v29 = *a1;
  uint64_t v30 = v23;
  uint64_t v24 = *(void *)(a5[1] + 24);
  if (!v24
    || (uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v24 + 48))(v24, &v30),
        (uint64_t v26 = *(void *)(a5[1] + 24)) == 0))
  {
LABEL_12:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v26 + 48))(v26, &v29);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a5 + 16))(*a5, v25, v27);
  if ((result & 0x80000000) != 0)
  {
    uint64_t v28 = *a1;
    *a1 = *a2;
    *a2 = v28;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v37 = *a4;
  uint64_t v38 = v12;
  uint64_t v13 = *(void *)(a6[1] + 24);
  if (!v13) {
    goto LABEL_15;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, &v38);
  uint64_t v15 = *(void *)(a6[1] + 24);
  if (!v15) {
    goto LABEL_15;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, &v37);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a6 + 16))(*a6, v14, v16);
  if ((result & 0x80000000) == 0) {
    return result;
  }
  uint64_t v18 = *a4;
  *a4 = *a5;
  *a5 = v18;
  uint64_t v19 = *a4;
  uint64_t v37 = *a3;
  uint64_t v38 = v19;
  uint64_t v20 = *(void *)(a6[1] + 24);
  if (!v20) {
    goto LABEL_15;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v20 + 48))(v20, &v38);
  uint64_t v22 = *(void *)(a6[1] + 24);
  if (!v22) {
    goto LABEL_15;
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v22 + 48))(v22, &v37);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a6 + 16))(*a6, v21, v23);
  if ((result & 0x80000000) == 0) {
    return result;
  }
  uint64_t v24 = *a3;
  *a3 = *a4;
  *a4 = v24;
  uint64_t v25 = *a3;
  uint64_t v37 = *a2;
  uint64_t v38 = v25;
  uint64_t v26 = *(void *)(a6[1] + 24);
  if (!v26) {
    goto LABEL_15;
  }
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v26 + 48))(v26, &v38);
  uint64_t v28 = *(void *)(a6[1] + 24);
  if (!v28) {
    goto LABEL_15;
  }
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v28 + 48))(v28, &v37);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a6 + 16))(*a6, v27, v29);
  if ((result & 0x80000000) == 0) {
    return result;
  }
  uint64_t v30 = *a2;
  *a2 = *a3;
  *a3 = v30;
  uint64_t v31 = *a2;
  uint64_t v37 = *a1;
  uint64_t v38 = v31;
  uint64_t v32 = *(void *)(a6[1] + 24);
  if (!v32
    || (uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v32 + 48))(v32, &v38),
        (uint64_t v34 = *(void *)(a6[1] + 24)) == 0))
  {
LABEL_15:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v34 + 48))(v34, &v37);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a6 + 16))(*a6, v33, v35);
  if ((result & 0x80000000) != 0)
  {
    uint64_t v36 = *a1;
    *a1 = *a2;
    *a2 = v36;
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        uint64_t v27 = *a1;
        uint64_t v28 = v15;
        uint64_t v16 = *(void *)(a4[1] + 24);
        if (!v16
          || (uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v16 + 48))(v16, &v28),
              (uint64_t v18 = *(void *)(a4[1] + 24)) == 0))
        {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v18 + 48))(v18, &v27);
        if (((*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a4 + 16))(*a4, v17, v19) & 0x80000000) != 0)
        {
          uint64_t v20 = *v14;
          *uint64_t v14 = *a1;
          *a1 = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v21 = (unint64_t)v8 >> 3;
      uint64_t v22 = a2 - 1;
      do
      {
        uint64_t v23 = *a1;
        uint64_t v24 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a4, v21);
        if (v22 == v24)
        {
          *uint64_t v24 = v23;
        }
        else
        {
          *uint64_t v24 = *v22;
          *uint64_t v22 = v23;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>((uint64_t)a1, (uint64_t)(v24 + 1), a4, v24 + 1 - a1);
        }
        --v22;
      }
      while (v21-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t result, void *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v5 = a4;
  uint64_t v6 = result;
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - result) >> 3) {
    return result;
  }
  uint64_t v10 = ((uint64_t)a4 - result) >> 2;
  uint64_t v11 = v10 + 1;
  uint64_t v12 = (uint64_t *)(result + 8 * (v10 + 1));
  uint64_t v13 = v10 + 2;
  if (v10 + 2 < a3)
  {
    uint64_t v14 = *v12;
    uint64_t v38 = v12[1];
    uint64_t v39 = v14;
    uint64_t v15 = *(void *)(a2[1] + 24);
    if (!v15
      || (uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, &v39),
          (uint64_t v17 = *(void *)(a2[1] + 24)) == 0))
    {
LABEL_26:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v17 + 48))(v17, &v38);
    if ((*(int (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 16))(*a2, v16, v18) < 0)
    {
      ++v12;
      uint64_t v11 = v13;
    }
  }
  uint64_t v19 = *v12;
  uint64_t v38 = *v5;
  uint64_t v39 = v19;
  uint64_t v20 = *(void *)(a2[1] + 24);
  if (!v20) {
    goto LABEL_26;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v20 + 48))(v20, &v39);
  uint64_t v22 = *(void *)(a2[1] + 24);
  if (!v22) {
    goto LABEL_26;
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v22 + 48))(v22, &v38);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 16))(*a2, v21, v23);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v24 = *v5;
    uint64_t v37 = *v5;
    do
    {
      uint64_t v25 = v12;
      *uint64_t v5 = *v12;
      if (v7 < v11) {
        break;
      }
      uint64_t v26 = (2 * v11) | 1;
      uint64_t v12 = (uint64_t *)(v6 + 8 * v26);
      uint64_t v11 = 2 * v11 + 2;
      if (v11 >= a3)
      {
        uint64_t v11 = v26;
      }
      else
      {
        uint64_t v27 = *v12;
        uint64_t v38 = v12[1];
        uint64_t v39 = v27;
        uint64_t v28 = *(void *)(a2[1] + 24);
        if (!v28) {
          goto LABEL_26;
        }
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v28 + 48))(v28, &v39);
        uint64_t v30 = *(void *)(a2[1] + 24);
        if (!v30) {
          goto LABEL_26;
        }
        uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v30 + 48))(v30, &v38);
        if ((*(int (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 16))(*a2, v29, v31) >= 0) {
          uint64_t v11 = v26;
        }
        else {
          ++v12;
        }
        uint64_t v24 = v37;
      }
      uint64_t v32 = *v12;
      uint64_t v38 = v24;
      uint64_t v39 = v32;
      uint64_t v33 = *(void *)(a2[1] + 24);
      if (!v33) {
        goto LABEL_26;
      }
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v33 + 48))(v33, &v39);
      uint64_t v35 = *(void *)(a2[1] + 24);
      if (!v35) {
        goto LABEL_26;
      }
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v35 + 48))(v35, &v38);
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 16))(*a2, v34, v36);
      uint64_t v5 = v25;
    }
    while ((result & 0x80000000) == 0);
    uint64_t *v25 = v24;
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      uint64_t v12 = *v9;
      uint64_t v18 = v9[1];
      uint64_t v19 = v12;
      uint64_t v13 = *(void *)(a2[1] + 24);
      if (!v13
        || (uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, &v19),
            (uint64_t v15 = *(void *)(a2[1] + 24)) == 0))
      {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, &v18);
      if ((*(int (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 16))(*a2, v14, v16) < 0)
      {
        ++v9;
        uint64_t v10 = v11;
      }
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t result, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = *v8;
    uint64_t v10 = (uint64_t *)(a2 - 8);
    uint64_t v22 = *(void *)(a2 - 8);
    uint64_t v23 = v9;
    uint64_t v11 = *(void *)(a3[1] + 24);
    if (!v11
      || (uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 48))(v11, &v23),
          (uint64_t v13 = *(void *)(a3[1] + 24)) == 0))
    {
LABEL_12:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, &v22);
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v12, v14);
    if ((result & 0x80000000) != 0)
    {
      uint64_t v15 = *v10;
      do
      {
        uint64_t v16 = v8;
        *uint64_t v10 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        uint64_t v17 = *v8;
        uint64_t v22 = v15;
        uint64_t v23 = v17;
        uint64_t v18 = *(void *)(a3[1] + 24);
        if (!v18) {
          goto LABEL_12;
        }
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v18 + 48))(v18, &v23);
        uint64_t v20 = *(void *)(a3[1] + 24);
        if (!v20) {
          goto LABEL_12;
        }
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v20 + 48))(v20, &v22);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, v19, v21);
        uint64_t v10 = v16;
      }
      while ((result & 0x80000000) != 0);
      uint64_t *v16 = v15;
    }
  }
  return result;
}

uint64_t std::__function::__value_func<long long const& ()(long long const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::~__func(void *a1)
{
  *a1 = &unk_1F0A5A498;
  std::__function::__value_func<long long const& ()(long long const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::~__func(void *a1)
{
  *a1 = &unk_1F0A5A498;
  std::__function::__value_func<long long const& ()(long long const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x1B3EA8670);
}

void *std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F0A5A498;
  std::__function::__value_func<long long const& ()(long long const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B1E5B874(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5A498;
  return std::__function::__value_func<long long const& ()(long long const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<long long const& ()(long long const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<long long const& ()(long long const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

uint64_t std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::target_type()
{
}

void *quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::ImmutableSortedArrayStlVectorImpl(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  a1[1] = v4;
  *a1 = &unk_1F0A5A098;
  uint64_t v5 = *a3;
  *a3 = 0;
  a1[2] = v5;
  quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::CheckSorted(a1);
  return a1;
}

void sub_1B1E5BA54(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  uint64_t v7 = *v5;
  *uint64_t v5 = 0;
  if (v7) {
    std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)v5, v7);
  }
  quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::ImmutableSortedArrayStlVectorImpl(v2, v1, v3);
  _Unwind_Resume(a1);
}

void *quasar::tennessee::internal::ManagedImmutableSortedArrayStlVectorImpl<long long>::~ManagedImmutableSortedArrayStlVectorImpl(void *a1)
{
  *a1 = &unk_1F0A5A098;
  uint64_t v4 = a1[2];
  uint64_t v2 = a1 + 2;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = a1[1];
  *a1 = &unk_1F0A59EE8;
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void quasar::tennessee::internal::ManagedImmutableSortedArrayStlVectorImpl<long long>::~ManagedImmutableSortedArrayStlVectorImpl(void *a1)
{
  *a1 = &unk_1F0A5A098;
  uint64_t v4 = a1[2];
  uint64_t v2 = a1 + 2;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = a1[1];
  *a1 = &unk_1F0A59EE8;
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::at(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (a2 >= (uint64_t)(v2[1] - *v2) >> 3) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  return *v2 + 8 * a2;
}

uint64_t quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::data(uint64_t a1)
{
  return **(void **)(a1 + 16);
}

uint64_t quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::size(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16)) >> 3;
}

uint64_t quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::end(uint64_t a1)
{
  return a1;
}

uint64_t quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::cbegin(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::cend(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::CheckSorted(void *a1)
{
  uint64_t result = quasar::tennessee::ShouldCheckSorted(0);
  if (result)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    uint64_t v6 = v5;
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
    uint64_t result = quasar::tennessee::Collation<long long,long long>::IsSorted<quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::Iterator>(v3, v4, v6, v7, v8);
    if ((result & 1) == 0)
    {
      memset(v9, 0, sizeof(v9));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "Input container is not sorted.");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
    }
  }
  return result;
}

void *quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::~ImmutableSortedArrayStlVectorImpl(void *a1)
{
  *a1 = &unk_1F0A5A098;
  uint64_t v4 = a1[2];
  uint64_t v2 = a1 + 2;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = a1[1];
  *a1 = &unk_1F0A59EE8;
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::~ImmutableSortedArrayStlVectorImpl(void *a1)
{
  *a1 = &unk_1F0A5A098;
  uint64_t v4 = a1[2];
  uint64_t v2 = a1 + 2;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = a1[1];
  *a1 = &unk_1F0A59EE8;
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::tennessee::Collation<long long,long long>::IsSorted<quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::Iterator>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20[4] = *MEMORY[0x1E4F143B8];
  if (a2 == a4 && a3 == a5) {
    return 1;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  v20[0] = &unk_1F0A5D250;
  v20[1] = v10;
  v20[3] = v20;
  uint64_t v11 = std::__is_sorted_until[abi:ne180100]<std::function<BOOL ()(long long const&,long long const&)> &,quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::Iterator>(a2, a3, a4, a5, (uint64_t)v20);
  uint64_t v13 = v12;
  std::__function::__value_func<BOOL ()(long long const&,long long const&)>::~__value_func[abi:ne180100](v20);
  BOOL v15 = v11 != a4 || v13 != a5;
  if (v15 && quasar::gLogLevel >= 2)
  {
    memset(v19, 0, sizeof(v19));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Element at position ", 20);
    uint64_t v17 = (void *)std::ostream::operator<<();
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"is smaller than preceding element.", 34);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v19);
  }
  return !v15;
}

void sub_1B1E5C0B8(_Unwind_Exception *exception_object)
{
}

uint64_t std::__is_sorted_until[abi:ne180100]<std::function<BOOL ()(long long const&,long long const&)> &,quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::Iterator>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1;
  if (a1 == a3 && a2 == a4) {
    return a3;
  }
  for (uint64_t i = a2 + 1; v8 != a3 || a4 != i; ++i)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, i);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, i - 1);
    uint64_t v12 = *(void *)(a5 + 24);
    if (!v12) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 48))(v12, v10, v11)) {
      return v8;
    }
  }
  return a3;
}

void std::__function::__func<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1},std::allocator<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1}>,BOOL ()(long long const&,long long const&)>::~__func()
{
}

void *std::__function::__func<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1},std::allocator<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1}>,BOOL ()(long long const&,long long const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5D250;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1},std::allocator<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1}>,BOOL ()(long long const&,long long const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5D250;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1},std::allocator<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1}>,BOOL ()(long long const&,long long const&)>::operator()(uint64_t a1)
{
  return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) >> 31;
}

uint64_t std::__function::__func<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1},std::allocator<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1}>,BOOL ()(long long const&,long long const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1},std::allocator<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1}>,BOOL ()(long long const&,long long const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(long long const&,long long const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::make_unique[abi:ne180100]<quasar::tennessee::internal::VmemFileImmutableSortedArrayFlatbufferVectorImpl<long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>()
{
}

void sub_1B1E5C4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    std::make_unique[abi:ne180100]<quasar::tennessee::internal::VmemFileImmutableSortedArrayFlatbufferVectorImpl<long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>();
  }
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  MEMORY[0x1B3EA8670](v14, 0x10E1C4078ECEE6DLL);
  _Unwind_Resume(a1);
}

void *quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>::~unique_vmem_file_flatbuf_ptr(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F0A59DF0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t quasar::tennessee::generic_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::memory_mapping::VirtualMemoryFile,std::unique_ptr<quasar::tennessee::memory_mapping::VirtualMemoryFile>>::generic_flatbuf_ptr(uint64_t a1, quasar::tennessee::memory_mapping::VirtualMemoryFile **a2, int a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = &unk_1F0A59DF0;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = a3;
  if (!a3)
  {
    *(void *)(a1 + 24) = 0;
LABEL_9:
    uint64_t v10 = (unsigned int *)quasar::tennessee::memory_mapping::VirtualMemoryFile::Data(v4);
    goto LABEL_10;
  }
  uint64_t v5 = (unsigned int *)quasar::tennessee::memory_mapping::VirtualMemoryFile::Data(v4);
  uint64_t v6 = (int *)((char *)v5 + *v5);
  uint64_t v7 = *(unsigned __int16 *)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  if (!v7)
  {
    uint64_t v4 = *(quasar::tennessee::memory_mapping::VirtualMemoryFile **)(a1 + 8);
    goto LABEL_9;
  }
  uint64_t v8 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v8 > v7)
  {
    uint64_t v9 = *(unsigned __int16 *)((char *)v8 + v7);
    if (v9)
    {
      uint64_t v10 = (unsigned int *)((char *)v6 + v9);
LABEL_10:
      uint64_t v11 = (char *)v10 + *v10;
      goto LABEL_11;
    }
  }
  uint64_t v11 = 0;
LABEL_11:
  *(void *)(a1 + 32) = v11;
  return a1;
}

void sub_1B1E5C670(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    quasar::tennessee::generic_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::memory_mapping::VirtualMemoryFile,std::unique_ptr<quasar::tennessee::memory_mapping::VirtualMemoryFile>>::generic_flatbuf_ptr(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>::~unique_vmem_file_flatbuf_ptr(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F0A59DF0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void *quasar::tennessee::generic_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::memory_mapping::VirtualMemoryFile,std::unique_ptr<quasar::tennessee::memory_mapping::VirtualMemoryFile>>::~generic_flatbuf_ptr(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F0A59DF0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void quasar::tennessee::generic_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::memory_mapping::VirtualMemoryFile,std::unique_ptr<quasar::tennessee::memory_mapping::VirtualMemoryFile>>::~generic_flatbuf_ptr(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F0A59DF0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void *quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>::unique_vmem_file_flatbuf_ptr(void *a1, uint64_t a2)
{
  uint64_t v4 = *(quasar::tennessee::memory_mapping::VirtualMemoryFile **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = v4;
  quasar::tennessee::generic_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::memory_mapping::VirtualMemoryFile,std::unique_ptr<quasar::tennessee::memory_mapping::VirtualMemoryFile>>::generic_flatbuf_ptr((uint64_t)a1, &v7, *(unsigned __int16 *)(a2 + 16));
  *a1 = &unk_1F0A59FA0;
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(quasar::tennessee::memory_mapping::VirtualMemoryFile *))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  return a1;
}

void sub_1B1E5C8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    std::make_unique[abi:ne180100]<quasar::tennessee::internal::VmemFileImmutableSortedArrayFlatbufferVectorImpl<long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>();
  }
  _Unwind_Resume(exception_object);
}

void *quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::ImmutableSortedArrayFlatbufferVectorImpl(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *a1 = &unk_1F0A5A148;
  a1[1] = v4;
  quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>::unique_vmem_file_flatbuf_ptr(a1 + 2, a3);
  quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::CheckSorted(a1);
  return a1;
}

void sub_1B1E5C948(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v1[3];
  v1[2] = &unk_1F0A59DF0;
  v1[3] = 0;
  if (v4) {
    quasar::tennessee::generic_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::memory_mapping::VirtualMemoryFile,std::unique_ptr<quasar::tennessee::memory_mapping::VirtualMemoryFile>>::generic_flatbuf_ptr(v4);
  }
  uint64_t v5 = v1[1];
  *uint64_t v1 = v2;
  v1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::tennessee::internal::VmemFileImmutableSortedArrayFlatbufferVectorImpl<long long>::~VmemFileImmutableSortedArrayFlatbufferVectorImpl(void *a1)
{
  *a1 = &unk_1F0A5A148;
  uint64_t v2 = a1[3];
  a1[2] = &unk_1F0A59DF0;
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  *a1 = &unk_1F0A59EE8;
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void quasar::tennessee::internal::VmemFileImmutableSortedArrayFlatbufferVectorImpl<long long>::~VmemFileImmutableSortedArrayFlatbufferVectorImpl(void *a1)
{
  *a1 = &unk_1F0A5A148;
  uint64_t v2 = a1[3];
  a1[2] = &unk_1F0A59DF0;
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  *a1 = &unk_1F0A59EE8;
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::at(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 48) + 8 * a2 + 4;
}

uint64_t quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::data(uint64_t a1)
{
  return *(void *)(a1 + 48) + 4;
}

uint64_t quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::size(uint64_t a1)
{
  return **(unsigned int **)(a1 + 48);
}

void *quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::~ImmutableSortedArrayFlatbufferVectorImpl(void *a1)
{
  *a1 = &unk_1F0A5A148;
  uint64_t v2 = a1[3];
  a1[2] = &unk_1F0A59DF0;
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  *a1 = &unk_1F0A59EE8;
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::~ImmutableSortedArrayFlatbufferVectorImpl(void *a1)
{
  *a1 = &unk_1F0A5A148;
  uint64_t v2 = a1[3];
  a1[2] = &unk_1F0A59DF0;
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  *a1 = &unk_1F0A59EE8;
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::LanguageDetectorV2::languageIdV2Configuration(quasar::LanguageDetectorV2 *this, const quasar::SystemConfig *a2)
{
  memset(&v4, 0, sizeof(v4));
  std::string::basic_string[abi:ne180100]<0>(__p, "ld-inference");
  quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
}

void sub_1B1E5CFFC()
{
  if (*(char *)(v0 - 129) < 0) {
    operator delete(*(void **)(v0 - 152));
  }
  if (*(char *)(v0 - 73) < 0) {
    operator delete(*(void **)(v0 - 96));
  }
  JUMPOUT(0x1B1E5D06CLL);
}

void sub_1B1E5D088(_Unwind_Exception *a1)
{
  if ((*(char *)(v1 - 73) & 0x80000000) == 0)
  {
    uint64_t v3 = v1 - 64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B1E5D080);
}

void sub_1B1E5D0A0()
{
}

uint64_t SdapiAnnotatedText::SdapiAnnotatedText(uint64_t result, uint64_t a2)
{
  __dst[3] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(result + 48) = 0u;
  *(void *)(result + 64) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    memset(__str, 0, sizeof(__str));
    v5[0] = "\\"";
    v5[1] = "";
    boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)v5);
    boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>((uint64_t)__str, a2, __dst, 1);
  }
  return result;
}

void sub_1B1E5D230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  if (a17 >= 0x11 && a15) {
    MEMORY[0x1B3EA8630](a15, 0x1000C8077774924);
  }
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  if (*(char *)(v17 + 71) < 0) {
    operator delete(*v18);
  }
  if (*(char *)(v17 + 47) < 0) {
    operator delete(*v19);
  }
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(a1);
}

void boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>(uint64_t a1, uint64_t a2, void *__src, int a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  size_t v7 = __src[2];
  size_t __n = v7;
  __srca[0] = 0;
  if (v7 < 0x11)
  {
    memcpy(__srca, __src, v7);
    size_t v13 = __n;
    v12[0] = 0;
    if (__n < 0x11)
    {
      memcpy(v12, __srca, __n);
      __dst[2] = v13;
      __dst[0] = 0;
      if (v13 <= 0x10)
      {
        memcpy(__dst, v12, v13);
        int v11 = a4;
        boost::algorithm::iter_split<std::vector<std::string>,std::string const&,boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, a2, (uint64_t)__dst);
      }
      operator new[]();
    }
    operator new[]();
  }
  operator new[]();
}

void sub_1B1E5D488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    MEMORY[0x1B3EA8630](a17, 0x1000C8077774924);
  }
  if (v17 >= 0x11)
  {
    if (a10) {
      MEMORY[0x1B3EA8630](a10, 0x1000C8077774924);
    }
  }
  _Unwind_Resume(exception_object);
}

void *boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(void *__dst, uint64_t a2)
{
  *__dst = 0;
  std::vector<std::wstring> v4 = *(unsigned char **)a2;
  uint64_t v5 = *(unsigned char **)(a2 + 8);
  __dst[2] = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x11) {
    operator new[]();
  }
  if (v5 != v4) {
    memmove(__dst, v4, v5 - v4);
  }
  std::__sort<std::__less<char,char> &,char *>();
  return __dst;
}

void boost::algorithm::iter_split<std::vector<std::string>,std::string const&,boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v4 = *(char *)(a2 + 23);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if (v5) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  uint64_t v8 = v6 + v7;
  size_t v9 = *(void *)(a3 + 16);
  v11[2] = v9;
  v11[0] = 0;
  if (v9 < 0x11)
  {
    memcpy(v11, (const void *)a3, v9);
    int v12 = *(_DWORD *)(a3 + 24);
    boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(v10, v6, v8, (uint64_t)v11);
  }
  operator new[]();
}

void sub_1B1E5D764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(&a9);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(&a19);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(&a42);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)(v42 - 176));
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  uint64_t v4 = *a2;
  if (*a2)
  {
    *(void *)a1 = v4;
    if (v4)
    {
      long long v5 = *(_OWORD *)(a2 + 1);
      *(void *)(a1 + 24) = a2[3];
      *(_OWORD *)(a1 + 8) = v5;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, void))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 8, 0);
    }
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  return a1;
}

void boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  size_t v6 = *(void *)(a4 + 16);
  void v7[2] = v6;
  v7[0] = 0;
  if (v6 < 0x11)
  {
    memcpy(v7, (const void *)a4, v6);
    int v8 = *(_DWORD *)(a4 + 24);
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, (uint64_t)v7);
  }
  operator new[]();
}

void sub_1B1E5D98C(_Unwind_Exception *a1)
{
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v1);
  _Unwind_Resume(a1);
}

void boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  size_t v4 = *(void *)(a2 + 16);
  void v5[2] = v4;
  v5[0] = 0;
  if (v4 < 0x11)
  {
    memcpy(v5, (const void *)a2, v4);
    int v6 = *(_DWORD *)(a2 + 24);
    boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::function2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, (uint64_t)v5);
  }
  operator new[]();
}

void sub_1B1E5DABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(void *)a1)
  {
    uint64_t result = boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::operator()((void *)a1);
    uint64_t v2 = *(void *)(a1 + 56);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t result = v4;
  }
  BOOL v5 = result == v2 && v4 == v2;
  if (v5 && *(void *)(a1 + 40) == v2) {
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(void *)(a1 + 32) = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = result;
  *(void *)(a1 + 48) = v4;
  return result;
}

void boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::function2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  size_t v4 = *(void *)(a2 + 16);
  void v5[2] = v4;
  v5[0] = 0;
  if (v4 < 0x11)
  {
    memcpy(v5, (const void *)a2, v4);
    int v6 = *(_DWORD *)(a2 + 24);
    boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>((uint64_t)a1, (uint64_t)v5);
  }
  operator new[]();
}

void sub_1B1E5DC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

void boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  size_t v3 = *(void *)(a2 + 16);
  v4[2] = v3;
  v4[0] = 0;
  if (v3 < 0x11)
  {
    memcpy(v4, (const void *)a2, v3);
    int v5 = *(_DWORD *)(a2 + 24);
    boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>((uint64_t)boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>)::stored_vtable, (uint64_t)v4);
  }
  operator new[]();
}

void sub_1B1E5DD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

char *boost::detail::function::function_obj_invoker2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>,boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::invoke(uint64_t *a1, char *a2, char *a3)
{
  return boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>::operator()<std::__wrap_iter<char const*>>(*a1, a2, a3);
}

void boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  size_t v4 = *(void *)(a2 + 16);
  void v5[2] = v4;
  v5[0] = 0;
  if (v4 < 0x11)
  {
    memcpy(v5, (const void *)a2, v4);
    int v6 = *(_DWORD *)(a2 + 24);
    boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, (uint64_t)v5);
  }
  operator new[]();
}

{
  size_t v3;
  void v4[3];
  int v5;
  uint64_t v6;

  int v6 = *MEMORY[0x1E4F143B8];
  size_t v3 = *(void *)(a2 + 16);
  v4[2] = v3;
  v4[0] = 0;
  if (v3 < 0x11)
  {
    memcpy(v4, (const void *)a2, v3);
    int v5 = *(_DWORD *)(a2 + 24);
    boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_functor<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>();
  }
  operator new[]();
}

void sub_1B1E5DEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  size_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      int v5 = *(void **)a2;
      if (*(void *)a2)
      {
        if (v5[2] >= 0x11uLL)
        {
          if (*v5) {
            MEMORY[0x1B3EA8630](*v5, 0x1000C8077774924);
          }
        }
        uint64_t result = MEMORY[0x1B3EA8670](v5, 0x1012C405C87E9CELL);
      }
      goto LABEL_10;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001B257D6F0 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001B257D6F0 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
LABEL_10:
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1B1E5E058(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

char *boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>::operator()<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  size_t v6 = *(void *)(a1 + 16);
  unint64_t v10 = v6;
  v9[0] = 0;
  if (v6 >= 0x11) {
    operator new[]();
  }
  memcpy(v9, (const void *)a1, v6);
  while (a2 != a3)
  {
    if (boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v9, *a2)) {
      goto LABEL_8;
    }
    ++a2;
  }
  a2 = a3;
LABEL_8:
  if (v10 >= 0x11 && v9[0]) {
    MEMORY[0x1B3EA8630](v9[0], 0x1000C8077774924);
  }
  if (a2 == a3) {
    return a3;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    uint64_t v7 = a2;
    do
    {
      if (!boost::algorithm::detail::is_any_ofF<char>::operator()<char>((void *)a1, *v7)) {
        break;
      }
      ++v7;
    }
    while (v7 != a3);
  }
  return a2;
}

void sub_1B1E5E1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (a11 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a9);
  }
  _Unwind_Resume(exception_object);
}

BOOL boost::algorithm::detail::is_any_ofF<char>::operator()<char>(void *a1, int a2)
{
  unint64_t v2 = a1[2];
  if (v2 >= 0x11)
  {
    a1 = (void *)*a1;
    size_t v3 = (void *)((char *)a1 + v2);
  }
  else
  {
    size_t v3 = (void *)((char *)a1 + v2);
    if (!v2) {
      return a1 != v3 && *(char *)a1 <= a2;
    }
  }
  do
  {
    size_t v4 = (char *)a1 + (v2 >> 1);
    int v6 = *v4;
    int v5 = v4 + 1;
    unint64_t v7 = v2 >> 1;
    v2 += ~(v2 >> 1);
    if (v6 < a2) {
      a1 = v5;
    }
    else {
      unint64_t v2 = v7;
    }
  }
  while (v2);
  return a1 != v3 && *(char *)a1 <= a2;
}

void sub_1B1E5E350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

void boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_functor<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>()
{
}

void sub_1B1E5E414(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

uint64_t boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::operator()(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v4, "call to empty boost::function");
    v4.__vftable = (std::runtime_error_vtbl *)&unk_1F0A46E28;
    boost::throw_exception<boost::bad_function_call>(&v4);
  }
  uint64_t v1 = *(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8);
  unint64_t v2 = a1 + 1;
  return v1(v2);
}

void sub_1B1E5E4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B1E5E518(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1F0A469B8;
  *(void *)(a1 + 8) = &unk_1F0A469E8;
  *(void *)(a1 + 24) = &unk_1F0A46A10;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<boost::bad_function_call>::clone()
{
}

void sub_1B1E5E7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B1E5E8BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

{
  uint64_t vars8;

  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x1B3EA8670);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1F0A46E28;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F0A47040;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F0A469B8;
  *(void *)(a1 + 8) = &unk_1F0A469E8;
  *(void *)(a1 + 24) = &unk_1F0A46A10;
  return a1;
}

void sub_1B1E5EC44(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      size_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

std::vector<std::string> *std::vector<std::string>::vector<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char const*>>,boost::algorithm::split_iterator<std::__wrap_iter<char const*>>,boost::use_default,boost::use_default>,0>(std::vector<std::string> *a1, uint64_t *a2, uint64_t *a3)
{
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v7, a2);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v6, a3);
  std::vector<std::string>::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char const*>>,boost::algorithm::split_iterator<std::__wrap_iter<char const*>>,boost::use_default,boost::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char const*>>,boost::algorithm::split_iterator<std::__wrap_iter<char const*>>,boost::use_default,boost::use_default>>(a1, (uint64_t)v7, (uint64_t)v6);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v6);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v7);
  return a1;
}

void sub_1B1E5ED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

BOOL std::vector<std::string>::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char const*>>,boost::algorithm::split_iterator<std::__wrap_iter<char const*>>,boost::use_default,boost::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char const*>>,boost::algorithm::split_iterator<std::__wrap_iter<char const*>>,boost::use_default,boost::use_default>>(std::vector<std::string> *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a1;
  char v23 = 0;
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  while (1)
  {
    BOOL result = boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::equal(a2, a3);
    if (result) {
      break;
    }
    std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, *(char **)(a2 + 32), *(char **)(a2 + 40), *(void *)(a2 + 40) - *(void *)(a2 + 32));
    std::vector<std::string>::pointer end = a1->__end_;
    value = a1->__end_cap_.__value_;
    if (end >= value)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a1->__begin_) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a1->__begin_) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v14) {
        BOOL v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v14);
      }
      else {
        BOOL v15 = 0;
      }
      uint64_t v16 = v15 + v11;
      __v.__first_ = v15;
      __v.__begin_ = v16;
      __v.__end_cap_.__value_ = &v15[v14];
      long long v17 = *(_OWORD *)__p;
      v16->__r_.__value_.__r.__words[2] = v21;
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      __p[1] = 0;
      std::string::size_type v21 = 0;
      __p[0] = 0;
      __v.__end_ = v16 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
      uint64_t v18 = a1->__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      int v19 = SHIBYTE(v21);
      a1->__end_ = v18;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v10 = *(_OWORD *)__p;
      end->__r_.__value_.__r.__words[2] = v21;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
      a1->__end_ = end + 1;
    }
    boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment(a2);
  }
  return result;
}

void sub_1B1E5EEC0(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, char a7, uint64_t a8, std::__split_buffer<std::wstring> *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, void **a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(__p);
}

BOOL boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::equal(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    BOOL v4 = *(unsigned char *)(a1 + 64) != 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!*(void *)a2)
  {
    BOOL v5 = 1;
    return v4 ^ v5 ^ 1;
  }
  BOOL v5 = *(unsigned char *)(a2 + 64) != 0;
  if (*(unsigned char *)(a2 + 64)) {
    int v6 = 1;
  }
  else {
    int v6 = v4;
  }
  if (v6 == 1) {
    return v4 ^ v5 ^ 1;
  }
  unint64_t v7 = *(const void **)(a1 + 32);
  int v8 = *(const void **)(a2 + 32);
  size_t v9 = *(void *)(a1 + 40) - (void)v7;
  return v9 == *(void *)(a2 + 40) - (void)v8
      && !memcmp(v7, v8, v9)
      && *(void *)(a1 + 48) == *(void *)(a2 + 48)
      && *(void *)(a1 + 56) == *(void *)(a2 + 56);
}

void *LHash<unsigned int,unsigned int>::~LHash(void *a1)
{
  return a1;
}

void LMStats::LMStats(LMStats *this, Vocab *a2)
{
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 2) = MEMORY[0x1E4FBA240];
  *((void *)this + 3) = a2;
  *(void *)this = &unk_1F0A34AD0;
  *((unsigned char *)this + 32) = 1;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_WORD *)((char *)this + 33) = 257;
}

uint64_t LMStats::countString(LMStats *this, Vocab *a2, int a3)
{
  int v6 = (char **)countStringWords();
  int v8 = *v6;
  if (!*v6)
  {
    size_t v9 = v6;
    int v8 = (char *)malloc_type_calloc(0xC351uLL, 8uLL, 0x50040EE9192B6uLL);
    void *v9 = v8;
  }
  if (Vocab::parseWords(a2, v8, (const char **)0xC351, v7) == 50001) {
    return 0;
  }
  if (a3)
  {
    uint64_t v11 = *(void *)v8;
    unint64_t v12 = *(uint64_t (**)(LMStats *, char *, uint64_t))(*(void *)this + 48);
    return v12(this, v8 + 8, v11);
  }
  else
  {
    unint64_t v13 = *(uint64_t (**)(LMStats *, char *))(*(void *)this + 40);
    return v13(this, v8);
  }
}

void LMStats::freeThread(LMStats *this)
{
  uint64_t v1 = (void **)countStringWords();
  if (*v1)
  {
    free(*v1);
    *uint64_t v1 = 0;
  }
}

uint64_t LMStats::countFile(LMStats *this, File *a2, uint64_t a3)
{
  int v6 = File::getline(a2);
  if (v6)
  {
    unint64_t v7 = v6;
    uint64_t v8 = 0;
    if (a3) {
      size_t v9 = "illegal count weight or ";
    }
    else {
      size_t v9 = "";
    }
    if (a3) {
      uint64_t v10 = 24;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (void *)MEMORY[0x1E4FBA240];
    do
    {
      int v12 = (*(uint64_t (**)(LMStats *, char *, uint64_t))(*(void *)this + 64))(this, v7, a3);
      if (v12)
      {
        uint64_t v8 = (v12 + v8);
      }
      else
      {
        unint64_t v13 = File::position((const char **)a2, v11);
        unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v9, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"line too long?\n", 15);
      }
      unint64_t v7 = File::getline(a2);
    }
    while (v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (!*((unsigned char *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
  {
    BOOL v15 = (void *)(*(uint64_t (**)(LMStats *, char *))(*(void *)this + 24))(this, v7);
    uint64_t v16 = File::position((const char **)a2, v15);
    operator<<(v16, (double *)this + 5);
  }
  return v8;
}

void *quasar::lm::SymbolTableData::SymbolTableData(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  *((_OWORD *)a1 + 9) = 0u;
  a1[2] = v3;
  *(_OWORD *)(a1 + 3) = 0u;
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v5 = (uint64_t)(a1 + 6);
  a1[10] = -1;
  int v6 = a1 + 10;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  a1[9] = 0;
  a1[11] = -1;
  *((_DWORD *)a1 + 24) = -1;
  *(_OWORD *)(a1 + 13) = 0u;
  *((unsigned char *)a1 + 100) = 0;
  *(_OWORD *)(a1 + 15) = 0u;
  *((_DWORD *)a1 + 34) = 1065353216;
  *((_OWORD *)a1 + 10) = 0u;
  *((_DWORD *)a1 + 44) = 1065353216;
  if (!v3)
  {
    quasar::lm::LogMessage::LogMessage(__p, 5, "SymbolTableData", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 45);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Null symbol table passed to constructor", 39);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
    uint64_t v3 = a1[2];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "<s>");
  *int v6 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, __p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = a1[2];
  std::string::basic_string[abi:ne180100]<0>(__p, "</s>");
  *((_DWORD *)a1 + 21) = (*(uint64_t (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, __p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  int v9 = (*(uint64_t (**)(void, const char *))(*(void *)a1[2] + 104))(a1[2], "#0");
  *((_DWORD *)a1 + 23) = v9;
  if (v9 <= 0)
  {
    quasar::lm::LogMessage::LogMessage(__p, 5, "SymbolTableData", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 64);
    uint64_t v10 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Could not find symbol: ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"#0", 2);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
  }
  int v12 = (*(uint64_t (**)(void, const char *))(*(void *)a1[2] + 104))(a1[2], "/WORD-DIS-1/");
  *((_DWORD *)a1 + 22) = v12;
  if (v12 <= 0)
  {
    quasar::lm::LogMessage::LogMessage(__p, 5, "SymbolTableData", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 68);
    unint64_t v13 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Could not find symbol: ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/WORD-DIS-1/", 12);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
  }
  unint64_t v15 = (*(uint64_t (**)(void))(*(void *)a1[2] + 112))(a1[2]);
  std::vector<BOOL>::resize(v4, v15, 0);
  unint64_t v16 = (*(uint64_t (**)(void))(*(void *)a1[2] + 112))(a1[2]);
  std::vector<BOOL>::resize(v5, v16, 0);
  _ZNSt3__115allocate_sharedB8ne180100I5VocabNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  long long v17 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v17;
  if (v18)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  *(unsigned char *)(*(uint64_t (**)(void))(*(void *)*a1 + 152))(*a1) = 1;
  *(unsigned char *)(*(uint64_t (**)(void))(*(void *)*a1 + 160))(*a1) = 0;
  quasar::lm::SymbolTableData::observeSymbol((uint64_t)a1, 2, *((_DWORD *)a1 + 22));
  *((_DWORD *)a1 + 24) = (*(uint64_t (**)(void, const char *))(*(void *)*a1 + 16))(*a1, "/WORD-DIS-1/");
  return a1;
}

void sub_1B1E5F71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v18);
  if (*v16) {
    operator delete(*v16);
  }
  if (*v15) {
    operator delete(*v15);
  }
  uint64_t v20 = *(void *)(v14 + 16);
  *(void *)(v14 + 16) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  char v21 = *(std::__shared_weak_count **)(v14 + 8);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

void quasar::lm::SymbolTableData::observeSymbol(uint64_t a1, int a2, unsigned int a3)
{
  if (a2 == 2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 48);
    uint64_t v5 = (_DWORD *)(a1 + 76);
    if ((a3 & 0x80000000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (a2 == 1)
  {
    uint64_t v4 = (uint64_t *)(a1 + 24);
    uint64_t v5 = (_DWORD *)(a1 + 72);
    if ((a3 & 0x80000000) != 0) {
      goto LABEL_9;
    }
LABEL_8:
    unint64_t v8 = v4[1];
    if (v8 > a3) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  quasar::lm::LogMessage::LogMessage(v13, 5, "observeSymbol", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 271);
  Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Unknown symbol source ", 22);
  std::ostream::operator<<();
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v13);
  quasar::lm::LogMessage::LogMessage(v13, 5, "observeSymbol", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 275);
  unint64_t v7 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"symbolMask and numSymbols should be non-null", 44);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v13);
  uint64_t v5 = 0;
  uint64_t v4 = 0;
  if ((a3 & 0x80000000) == 0) {
    goto LABEL_8;
  }
LABEL_9:
  quasar::lm::LogMessage::LogMessage(v13, 5, "observeSymbol", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 279);
  int v9 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Label out of bounds: ", 21);
  std::ostream::operator<<();
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v13);
  unint64_t v8 = v4[1];
LABEL_10:
  if (v8 <= (int)a3) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v10 = *v4;
  unint64_t v11 = (unint64_t)(int)a3 >> 6;
  uint64_t v12 = *(void *)(*v4 + 8 * v11);
  if ((v12 & (1 << a3)) == 0)
  {
    ++*v5;
    *(void *)(v10 + 8 * v11) = v12 | (1 << a3);
  }
}

void sub_1B1E5F988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::lm::SymbolTableData::getAndCheckSymbolId(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 104;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 104), (unsigned __int8 *)a2);
  if (v5) {
    return *((unsigned int *)v5 + 10);
  }
  unsigned int v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16), a2);
  if (quasar::lm::SymbolTableData::symbolIdIsOov((quasar::lm::SymbolTableData *)a1, v7)) {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v6 = v7;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v10 = v6;
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(v4, (unsigned __int8 *)&__p, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1B1E5FAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::lm::SymbolTableData::symbolIdIsOov(quasar::lm::SymbolTableData *this, int a2)
{
  BOOL v3 = a2 < 1 || *((unsigned char *)this + 100) == 0;
  if (*((unsigned char *)this + 100)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = a2 < 1;
  }
  if (!v4)
  {
    if (*((void *)this + 4) <= (unint64_t)a2) {
      return 1;
    }
    else {
      return ((*(void *)(*((void *)this + 3) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0
    }
          && *((_DWORD *)this + 21) != a2
          && *((_DWORD *)this + 20) != a2
          && *((_DWORD *)this + 23) != a2
          && *((_DWORD *)this + 22) != a2;
  }
  return v3;
}

uint64_t quasar::lm::SymbolTableData::observeTrainingSymbol(void *a1, int *a2, uint64_t *a3)
{
  if (*a2 <= 0)
  {
    quasar::lm::LogMessage::LogMessage(v13, 5, "observeTrainingSymbol", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 192);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"unmapped FST symbol", 19);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v13);
  }
  if (!*a1)
  {
    quasar::lm::LogMessage::LogMessage(v13, 5, "observeTrainingSymbol", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 195);
    unsigned int v7 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"trainVocab not set", 18);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v13);
  }
  unint64_t v8 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 18, a2);
  if (v8) {
    return *((unsigned int *)v8 + 5);
  }
  unsigned int v10 = *a2;
  if (*a2 != *((_DWORD *)a1 + 21)
    && v10 != *((_DWORD *)a1 + 20)
    && v10 != *((_DWORD *)a1 + 23)
    && v10 != *((_DWORD *)a1 + 22))
  {
    quasar::lm::SymbolTableData::observeSymbol((uint64_t)a1, 2, v10);
  }
  if (*((char *)a3 + 23) >= 0) {
    unint64_t v11 = a3;
  }
  else {
    unint64_t v11 = (uint64_t *)*a3;
  }
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a1 + 16))(*a1, v11);
  LODWORD(v13[0]) = *a2;
  HIDWORD(v13[0]) = v9;
  std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned int>>((uint64_t)(a1 + 18), (int *)v13, v13);
  return v9;
}

void sub_1B1E5FCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::lm::SymbolTableData::lookupTrainId(quasar::lm::SymbolTableData *this, int *a2, int a3)
{
  if (quasar::lm::SymbolTableData::symbolIdIsOov(this, *a2))
  {
    quasar::lm::LogMessage::LogMessage(&__p, 5, "lookupTrainId", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 218);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"trying to look-up unmapped FST symbol: ", 39);
    std::ostream::operator<<();
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&__p);
  }
  unsigned int v7 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)this + 18, a2);
  if (v7) {
    return *((unsigned int *)v7 + 5);
  }
  (*(void (**)(void **__return_ptr))(**((void **)this + 2) + 88))(&__p);
  if (a3)
  {
    quasar::lm::LogMessage::LogMessage(v24, 5, "lookupTrainId", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 224);
    uint64_t v9 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
    unsigned int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"training token ", 15);
    if ((v27 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v27 & 0x80u) == 0) {
      uint64_t v12 = v27;
    }
    else {
      uint64_t v12 = v26;
    }
    unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" : ", 3);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" not present in training map", 28);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
  }
  if (((char)v27 & 0x80000000) == 0)
  {
    if (v27)
    {
      unint64_t v15 = &__p;
      goto LABEL_18;
    }
LABEL_20:
    quasar::lm::LogMessage::LogMessage(v24, 2, "lookupTrainId", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 235);
    uint64_t v17 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
    if ((v27 & 0x80u) == 0) {
      uint64_t v18 = &__p;
    }
    else {
      uint64_t v18 = __p;
    }
    if ((v27 & 0x80u) == 0) {
      uint64_t v19 = v27;
    }
    else {
      uint64_t v19 = v26;
    }
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" : ", 3);
    char v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" not present in training or ARPA vocabulary", 43);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
    int v22 = *((_DWORD *)this + 24);
    LODWORD(v24[0]) = *a2;
    HIDWORD(v24[0]) = v22;
    std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned int>>((uint64_t)this + 144, (int *)v24, v24);
    uint64_t v8 = *((unsigned int *)this + 24);
    goto LABEL_27;
  }
  if (!v26) {
    goto LABEL_20;
  }
  unint64_t v15 = __p;
LABEL_18:
  uint64_t v16 = (*(uint64_t (**)(void, void *, uint64_t))(**(void **)this + 40))(*(void *)this, v15, 0xFFFFFFFFLL);
  uint64_t v8 = v16;
  if (v16 == -1) {
    goto LABEL_20;
  }
  LODWORD(v24[0]) = *a2;
  HIDWORD(v24[0]) = v16;
  std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned int>>((uint64_t)this + 144, (int *)v24, v24);
LABEL_27:
  if ((char)v27 < 0) {
    operator delete(__p);
  }
  return v8;
}

void sub_1B1E5FF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::lm::SymbolTableData::tokenIsOov(quasar::lm::SymbolTableData *a1)
{
  int v2 = (*(uint64_t (**)(void *))(**((void **)a1 + 2) + 96))(*((void **)a1 + 2));
  return quasar::lm::SymbolTableData::symbolIdIsOov(a1, v2);
}

void quasar::lm::SymbolTableData::observeBigGSymbols(uint64_t a1, uint64_t *a2)
{
  uint64_t v18 = 0;
  uint64_t v4 = *a2;
  unsigned int v17 = 0;
  (*(void (**)(uint64_t, quasar::lm **))(*(void *)v4 + 128))(v4, &v15);
LABEL_2:
  uint64_t v5 = v15;
  if (v15)
  {
    int v6 = (*(uint64_t (**)(quasar::lm *))(*(void *)v15 + 16))(v15);
    uint64_t v5 = v15;
    if (!v6)
    {
      if (v15)
      {
        uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v15 + 24))();
LABEL_8:
        if (!v18) {
          operator new();
        }
        fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v18, *a2, v7);
        while (1)
        {
          uint64_t v8 = v18;
          if (*v18)
          {
            if ((*(uint64_t (**)(void))(*(void *)*v18 + 24))(*v18)) {
              goto LABEL_21;
            }
            uint64_t v8 = v18;
            if (*v18)
            {
              uint64_t v9 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)*v18 + 32))(*v18);
              goto LABEL_16;
            }
          }
          else if (v18[4] >= v18[2])
          {
LABEL_21:
            if (v15) {
              (*(void (**)(quasar::lm *))(*(void *)v15 + 32))(v15);
            }
            else {
              ++v17;
            }
            goto LABEL_2;
          }
          uint64_t v9 = (unsigned int *)(v8[1] + 16 * v8[4]);
LABEL_16:
          if (*v9) {
            quasar::lm::SymbolTableData::observeSymbol(a1, 1, *v9);
          }
          if (*v18) {
            (*(void (**)(void))(*(void *)*v18 + 40))(*v18);
          }
          else {
            ++v18[4];
          }
        }
      }
LABEL_7:
      uint64_t v7 = v17;
      goto LABEL_8;
    }
    if (v15) {
      uint64_t v5 = (quasar::lm *)(*(uint64_t (**)(void))(*(void *)v15 + 8))();
    }
  }
  else if ((int)v17 < v16)
  {
    goto LABEL_7;
  }
  if (**(unsigned char **)(a1 + 24))
  {
    quasar::lm::LogMessage::LogMessage(&v15, 5, "observeBigGSymbols", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 310);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v15);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v15);
  }
  else
  {
    unsigned int v10 = (quasar::lm *)quasar::lm::nullstream(v5);
  }
  if ((*(void *)(*(void *)(a1 + 24) + (((unint64_t)*(int *)(a1 + 92) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(a1 + 92)))
  {
    quasar::lm::LogMessage::LogMessage(&v15, 5, "observeBigGSymbols", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 311);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v15);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v15);
  }
  else
  {
    unint64_t v11 = (quasar::lm *)quasar::lm::nullstream(v10);
  }
  if ((*(void *)(*(void *)(a1 + 24) + (((unint64_t)*(int *)(a1 + 88) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(a1 + 88)))
  {
    quasar::lm::LogMessage::LogMessage(&v15, 5, "observeBigGSymbols", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 312);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v15);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v15);
  }
  else
  {
    uint64_t v12 = (quasar::lm *)quasar::lm::nullstream(v11);
  }
  if ((*(void *)(*(void *)(a1 + 24) + (((unint64_t)*(int *)(a1 + 80) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(a1 + 80)))
  {
    quasar::lm::LogMessage::LogMessage(&v15, 5, "observeBigGSymbols", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 313);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v15);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v15);
  }
  else
  {
    unint64_t v13 = (quasar::lm *)quasar::lm::nullstream(v12);
  }
  if ((*(void *)(*(void *)(a1 + 24) + (((unint64_t)*(int *)(a1 + 84) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(a1 + 84)))
  {
    quasar::lm::LogMessage::LogMessage(&v15, 5, "observeBigGSymbols", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 314);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v15);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v15);
  }
  else
  {
    quasar::lm::nullstream(v13);
  }
  uint64_t v14 = v18;
  uint64_t v18 = 0;
  if (v14) {
    std::default_delete<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator()[abi:ne180100]((uint64_t)&v18, v14);
  }
}

void sub_1B1E604A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  unint64_t v15 = a14;
  a14 = 0;
  if (v15) {
    std::default_delete<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::lm::SymbolTableData::observeAllSymbols(uint64_t this)
{
  *(unsigned char *)(this + 100) = 1;
  return this;
}

void quasar::lm::SymbolTableData::extractTrainVocabFromSymbolTable(quasar::lm::SymbolTableData *this)
{
  void v7[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(*(uint64_t (**)(void))(**(void **)this + 88))(*(void *)this);
  BOOL v3 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)this + 32))(*(void *)this, v2);
  strlen(v3);
  MEMORY[0x1F4188790]();
  uint64_t v5 = (char *)v7 - v4;
  int v6 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)this + 32))(*(void *)this, v2);
  strcpy(v5, v6);
  (*(void (**)(void, uint64_t))(**(void **)this + 64))(*(void *)this, v2);
  operator new();
}

void sub_1B1E60894(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405945F38DLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::SymbolTableData::observeSrilmVocabulary(quasar::lm::SymbolTableData *this, Vocab *a2)
{
  VocabIter::VocabIter((VocabIter *)v16, a2, 0);
  unsigned int v4 = 0;
  *(unsigned char *)(*(uint64_t (**)(Vocab *))(*(void *)a2 + 152))(a2) = 1;
  unsigned int v15 = 0;
  while (1)
  {
    uint64_t v5 = VocabIter::next((VocabIter *)v16, &v15);
    if (!v5) {
      break;
    }
    if (!(*(unsigned int (**)(Vocab *, void))(*(void *)a2 + 176))(a2, v15))
    {
      unsigned int v6 = (*(uint64_t (**)(void, unsigned int *))(**((void **)this + 2) + 104))(*((void *)this + 2), v5);
      if ((v6 & 0x80000000) != 0 || ((*(void *)(*((void *)this + 3) + 8 * (v6 >> 6)) >> v6) & 1) == 0)
      {
        unsigned int v7 = v4 + 1;
        if (v4++ <= 0x13)
        {
          unsigned int v4 = v7;
          if (*((_DWORD *)this + 21) != v6)
          {
            quasar::lm::LogMessage::LogMessage(v14, 2, "observeSrilmVocabulary", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 377);
            Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v14);
            unsigned int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"ARPA vocabulary contains data pack OOV: ", 40);
            size_t v11 = strlen((const char *)v5);
            uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v11);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" : ", 3);
            std::ostream::operator<<();
            quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v14);
            unsigned int v4 = v7;
          }
        }
      }
      else
      {
        quasar::lm::SymbolTableData::observeSymbol((uint64_t)this, 2, v6);
      }
    }
  }
  return LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)v16);
}

void sub_1B1E60AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::lm::SymbolTableData::generateTrainToBigGIdRemapping(quasar::lm::SymbolTableData *this@<X0>, void *a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unsigned int v4 = &unk_1F0A62828;
  *(_OWORD *)(v4 + 24) = 0u;
  uint64_t v5 = v4 + 24;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_DWORD *)v4 + 14) = 1065353216;
  *a2 = v4 + 24;
  a2[1] = v4;
  unsigned int v21 = 0;
  if (*((void *)this + 7))
  {
    unint64_t v6 = 0;
    do
    {
      if ((*(void *)(*((void *)this + 6) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6))
      {
        unsigned int v7 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)this + 18, (int *)&v21);
        if (!v7)
        {
          (*(void (**)(void **__return_ptr))(**((void **)this + 2) + 88))(&__p);
          if (((char)v24 & 0x80000000) == 0)
          {
            if (v24)
            {
              p_p = &__p;
              goto LABEL_11;
            }
            goto LABEL_13;
          }
          if (!v23) {
            goto LABEL_13;
          }
          p_p = __p;
LABEL_11:
          unsigned int v9 = (*(uint64_t (**)(void, void *, uint64_t))(**(void **)this + 40))(*(void *)this, p_p, 0xFFFFFFFFLL);
          if (v9 == -1)
          {
LABEL_13:
            quasar::lm::LogMessage::LogMessage(v20, 5, "generateTrainToBigGIdRemapping", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 403);
            Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v20);
            if ((v24 & 0x80u) == 0) {
              size_t v11 = &__p;
            }
            else {
              size_t v11 = __p;
            }
            if ((v24 & 0x80u) == 0) {
              uint64_t v12 = v24;
            }
            else {
              uint64_t v12 = (uint64_t)v23;
            }
            unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)v11, v12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" : ", 3);
            uint64_t v14 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" observed in ARPA but not present in SRILM Vocab", 48);
            quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v20);
          }
          else
          {
            v20[0] = __PAIR64__(v21, v9);
            std::__hash_table<std::__hash_value_type<unsigned int,int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,int> &>((uint64_t)v5, (unsigned int *)v20, v20);
          }
          if ((char)v24 < 0) {
            operator delete(__p);
          }
          goto LABEL_22;
        }
        LODWORD(__p) = *((_DWORD *)v7 + 5);
        HIDWORD(__p) = v21;
        std::__hash_table<std::__hash_value_type<unsigned int,int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,int> &>((uint64_t)v5, (unsigned int *)&__p, &__p);
      }
LABEL_22:
      unint64_t v6 = (int)v21++ + 1;
    }
    while (*((void *)this + 7) > v6);
  }
  uint64_t v15 = 0;
  std::string __p = "<s>";
  char v23 = "</s>";
  do
  {
    uint64_t v16 = *(uint64_t *)((char *)&__p + v15);
    LODWORD(v20[0]) = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)this + 40))(*(void *)this, v16, 0xFFFFFFFFLL);
    unsigned int v17 = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v5, (unsigned int *)v20);
    if (v17)
    {
      uint64_t v18 = (quasar::lm *)*((int *)v17 + 5);
      uint64_t v19 = (quasar::lm *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 104))(*((void *)this + 2), v16);
      if (v19 == v18)
      {
        quasar::lm::nullstream(v19);
      }
      else
      {
        quasar::lm::LogMessage::LogMessage(v20, 5, "generateTrainToBigGIdRemapping", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 412);
        quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v20);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v20);
      }
    }
    else
    {
      LODWORD(v20[0]) = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)this + 40))(*(void *)this, v16, 0xFFFFFFFFLL);
      unsigned int v21 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 104))(*((void *)this + 2), v16);
      quasar::lm::InsertOrDie<std::unordered_map<unsigned int,int>>((uint64_t)v5, v20, (int *)&v21);
    }
    v15 += 8;
  }
  while (v15 != 16);
}

void sub_1B1E60EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void quasar::lm::InsertOrDie<std::unordered_map<unsigned int,int>>(uint64_t a1, _DWORD *a2, int *a3)
{
  int v3 = *a3;
  LODWORD(v7[0]) = *a2;
  HIDWORD(v7[0]) = v3;
  unsigned int v4 = (quasar::lm *)std::__hash_table<std::__hash_value_type<char32_t,char32_t>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,char32_t>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,char32_t>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,char32_t>>>::__emplace_unique_key_args<char32_t,std::pair<char32_t const,char32_t> const&>(a1, (unsigned int *)v7, v7);
  if (v5)
  {
    quasar::lm::nullstream(v4);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v7, 5, "InsertOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 89);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"duplicate key ", 14);
    std::ostream::operator<<();
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v7);
  }
}

void sub_1B1E61008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::lm::IterateSRILMVocabTokens(Vocab *a1, uint64_t a2, char a3, char a4, char a5)
{
  VocabIter::VocabIter((VocabIter *)v19, a1, 0);
  unsigned int v18 = 0;
  while (1)
  {
    unsigned int v9 = VocabIter::next((VocabIter *)v19, &v18);
    unsigned int v10 = (const char *)v9;
    if (!v9) {
      return LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)v19);
    }
    if (!strcmp((const char *)v9, "<s>"))
    {
      if ((a4 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_9;
    }
    if (!strcmp(v10, "</s>"))
    {
      if ((a5 & 1) == 0) {
        goto LABEL_7;
      }
LABEL_9:
      std::function<void ()(char const*,unsigned int)>::operator()(a2, (uint64_t)v10, v18);
    }
    else
    {
      if (!(*(unsigned int (**)(Vocab *, void))(*(void *)a1 + 176))(a1, v18) || (a3 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_7:
      quasar::lm::LogMessage::LogMessage(v17, 2, "IterateSRILMVocabTokens", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 443);
      Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v17);
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Skipping ", 9);
      size_t v13 = strlen(v10);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v10, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)".", 1);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v17);
    }
  }
}

void sub_1B1E611A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(char const*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a2;
  int v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void *quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab *a1, uint64_t a2, void *a3, int a4)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a3);
  if (a4)
  {
    unint64_t v8 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 104))(a2, "<s>");
    if ((v8 & 0x8000000000000000) != 0)
    {
      quasar::lm::LogMessage::LogMessage(v14, 5, "ComputeSRILMVocabToOpenFSTSymbolTableRemapping", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 461);
      Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"FST SymbolTable should contain <s>.", 35);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v14);
    }
    else
    {
      quasar::lm::nullstream((quasar::lm *)v8);
    }
    unint64_t v10 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 104))(a2, "</s>");
    if ((v10 & 0x8000000000000000) != 0)
    {
      quasar::lm::LogMessage::LogMessage(v14, 5, "ComputeSRILMVocabToOpenFSTSymbolTableRemapping", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 465);
      size_t v11 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"FST SymbolTable should contain </s>.", 36);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v14);
    }
    else
    {
      quasar::lm::nullstream((quasar::lm *)v10);
    }
  }
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = &unk_1F0A5BB48;
  v12[1] = a1;
  void v12[2] = a2;
  void v12[3] = a3;
  void v14[3] = v12;
  quasar::lm::IterateSRILMVocabTokens(a1, (uint64_t)v14, 0, a4, a4);
  return std::__function::__value_func<void ()(char const*,unsigned int)>::~__value_func[abi:ne180100](v14);
}

void sub_1B1E613F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(quasar::lm *this, const Vocab *a2, const fst::SymbolTable *a3)
{
}

void sub_1B1E614BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::unordered_map<unsigned int,int>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void quasar::lm::InsertOrDie<std::set<std::string>>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a1, (const void **)a2, a2);
  if (v4)
  {
    quasar::lm::nullstream((quasar::lm *)v3);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v10, 5, "InsertOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 77);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v10);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"duplicate element ", 18);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v10);
  }
}

void sub_1B1E61584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::lm::ExtractVocabularyFromARPA(uint64_t a1, File *a2)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = (const char *)a1;
  }
  else {
    uint64_t v3 = *(const char **)a1;
  }
  File::File((File *)v5, v3, "r", 1);
  quasar::lm::ExtractVocabularyFromARPA((quasar::lm *)v5, a2, v4);
  File::~File((File *)v5);
}

void sub_1B1E615FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  File::~File((File *)va);
  _Unwind_Resume(a1);
}

void quasar::lm::ExtractVocabularyFromARPA(quasar::lm *this, File *a2, Vocab *a3)
{
  Ngram::Ngram((Ngram *)v4, a2, 1u);
  Ngram::read((Ngram *)v4, this, 0);
  v4[0] = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie(&v5);
  LM::~LM((LM *)v4);
}

void sub_1B1E61684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *_ZNSt3__115allocate_sharedB8ne180100I5VocabNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x78uLL);
  BOOL result = _ZNSt3__120__shared_ptr_emplaceI5VocabNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1E616D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceI5VocabNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5DE70;
  Vocab::Vocab((Vocab *)(a1 + 3), 0, 0xFFFFFFFE);
  return a1;
}

void sub_1B1E61734(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Vocab>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DE70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Vocab>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DE70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<Vocab>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    size_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((_DWORD *)i + 10) = *(_DWORD *)(a3 + 24);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unsigned __int8 v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    *unsigned __int8 v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v16;
  void *v16 = i;
  *(void *)(v23 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unsigned __int8 v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1B1E61A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned int>>(uint64_t a1, int *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x18uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  void v10[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  BOOL v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t v10 = *v19;
LABEL_38:
    *BOOL v19 = v10;
    goto LABEL_39;
  }
  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    BOOL v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B1E61C78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::default_delete<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    if (*a2)
    {
      (*(void (**)(void))(*(void *)*a2 + 8))(*a2);
    }
    else
    {
      uint64_t v2 = (_DWORD *)a2[3];
      if (v2) {
        --*v2;
      }
    }
    JUMPOUT(0x1B3EA8670);
  }
}

void std::__shared_ptr_emplace<std::unordered_map<unsigned int,int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<unsigned int,int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<unsigned int,int>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 24);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,int> &>(uint64_t a1, unsigned int *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x18uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  void v10[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  BOOL v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t v10 = *v19;
LABEL_38:
    *BOOL v19 = v10;
    goto LABEL_39;
  }
  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    BOOL v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B1E61FA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0,std::allocator<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0>,void ()(char const*,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0,std::allocator<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0>,void ()(char const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F0A5BB48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0,std::allocator<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0>,void ()(char const*,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5BB48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0,std::allocator<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0>,void ()(char const*,unsigned int)>::operator()(uint64_t a1, const char **a2, int *a3)
{
  char v4 = *a2;
  int v12 = *a3;
  int v11 = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16), v4);
  if (v11 < 0)
  {
    quasar::lm::LogMessage::LogMessage(v10, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 474);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v10);
    unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"FST SymbolTable does not contain token ", 39);
    size_t v7 = strlen(v4);
    uint8x8_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" (id ", 5);
    unint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)").", 2);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v10);
  }
  quasar::lm::InsertOrDie<std::unordered_map<unsigned int,int>>(*(void *)(a1 + 24), &v12, &v11);
}

void sub_1B1E62164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0,std::allocator<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0>,void ()(char const*,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0,std::allocator<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0>,void ()(char const*,unsigned int)>::target_type()
{
}

void *std::__function::__value_func<void ()(char const*,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::unordered_map<unsigned int,int>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void quasar::CalculateJoinedNBest<0ul>::operator()(uint64_t a1, uint64_t a2)
{
}

{
  void *v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *__p[2];
  unsigned __int8 v8;
  long long v9;
  void *v10[11];
  char v11;
  uint64_t v12;
  void v13[38];

  v13[35] = *MEMORY[0x1E4F143B8];
  if (quasar::gLogLevel >= 6)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v9);
    kaldi::WriteCompactLattice(v10, 0, a2);
    if (quasar::gLogLevel >= 6)
    {
      memset(v13, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Primary lattice: ", 17);
      std::stringbuf::str();
      if ((v8 & 0x80u) == 0) {
        char v4 = __p;
      }
      else {
        char v4 = (void **)__p[0];
      }
      if ((v8 & 0x80u) == 0) {
        uint64_t v5 = v8;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
      if ((char)v8 < 0) {
        operator delete(__p[0]);
      }
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v13);
    }
    *(void *)&unint64_t v9 = *MEMORY[0x1E4FBA408];
    unint64_t v6 = *(void **)(MEMORY[0x1E4FBA408] + 72);
    *(void **)((char *)&v10[-2] + *(void *)(v9 - 24)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
    v10[0] = v6;
    v10[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (v11 < 0) {
      operator delete(v10[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](&v12);
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst();
}

void sub_1B1E627B0(_Unwind_Exception *a1, uint64_t a2, void *__p, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va1, a14);
  va_start(va, a14);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va1);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst((uint64_t *)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<quasar::NBestToken<0ul>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<quasar::NBestToken<0ul>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B1E62930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetState(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 16) != a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
    if (*(_DWORD *)(a1 + 32) == 3)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
      uint64_t v5 = (void *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(a1 + 106) = 1;
    }
    uint64_t v6 = *(void **)(a1 + 24);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 64);
      uint64_t v8 = *(void *)(*(void *)(v7 + 8 * a2) + 48);
      if (*(void *)(*(void *)(v7 + 8 * a2) + 56) == v8) {
        uint64_t v8 = 0;
      }
      *uint64_t v6 = v8;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(*(void *)(*(void *)(v7 + 8 * a2) + 56) - *(void *)(*(void *)(v7 + 8 * a2) + 48)) >> 4);
      v6[1] = v9;
      v6[2] = 0;
    }
    else
    {
      unint64_t v10 = *(void **)(a1 + 168);
      if (v10)
      {
        *(void *)(a1 + 168) = v10[3];
      }
      else
      {
        unint64_t v10 = (void *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::Allocate((void *)(a1 + 120), 1);
        v10[3] = 0;
      }
      uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 64);
      uint64_t v12 = *(void *)(*(void *)(v11 + 8 * a2) + 48);
      if (*(void *)(*(void *)(v11 + 8 * a2) + 56) == v12) {
        uint64_t v12 = 0;
      }
      *unint64_t v10 = v12;
      v10[1] = 0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(*(void *)(*(void *)(v11 + 8 * a2) + 56)
                        - *(void *)(*(void *)(v11 + 8 * a2) + 48)) >> 4);
      void v10[2] = 0;
      *(void *)(a1 + 24) = v10;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(*(void *)(*(void *)(v11 + 8 * a2) + 56) - *(void *)(*(void *)(v11 + 8 * a2) + 48)) >> 4);
    }
    *(void *)(a1 + 48) = v9;
    *(_DWORD *)(a1 + 96) = a2;
  }
}

void sub_1B1E62AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::function<BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t quasar::IterLinearFst<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, a2, v17);
  uint64_t v7 = a2;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v14, a1, v7);
    float v22 = *((float *)&v14 + 1);
    LODWORD(v13[0]) = v14;
    int v21 = 2139095040;
    float v20 = INFINITY;
    v8.n128_u32[0] = v14;
    if (*(float *)&v14 != INFINITY || (v8.n128_f32[0] = v22, v22 != v20) || v16 != v15)
    {
      if (!(*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)a1 + 40))(a1, v7, v8))
      {
        uint64_t v3 = std::function<BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::operator()(a3, (uint64_t)&v14, 0);
        goto LABEL_10;
      }
      if (quasar::gLogLevel < 1)
      {
LABEL_8:
        uint64_t v3 = 0;
LABEL_10:
        int v9 = 1;
        goto LABEL_11;
      }
LABEL_7:
      memset(v13, 0, sizeof(v13));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"FST is not linear.", 18);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v13);
      goto LABEL_8;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v7, v22) != 1)
    {
      if (quasar::gLogLevel < 1) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (v7 != a2) {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Reinit(v17, a1, v7);
    }
    if (v17[0]) {
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v17[0] + 32))(v17[0]);
    }
    else {
      uint64_t v10 = v17[1] + 48 * v19;
    }
    int v11 = std::function<BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::operator()(a3, (uint64_t)&v14, v10);
    if (v11) {
      uint64_t v7 = *(unsigned int *)(v10 + 40);
    }
    else {
      uint64_t v7 = v7;
    }
    int v9 = v11 ^ 1;
    uint64_t v3 = v11 & v3;
LABEL_11:
    if (v15)
    {
      unint64_t v16 = v15;
      operator delete(v15);
    }
  }
  while (!v9);
  if (v17[0])
  {
    (*(void (**)(void))(*(void *)v17[0] + 8))(v17[0]);
  }
  else if (v18)
  {
    --*v18;
  }
  return v3;
}

void sub_1B1E62EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  int v11 = *(void **)(v9 - 168);
  if (v11)
  {
    *(void *)(v9 - 160) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void *)(v9 - 144);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  else
  {
    float v13 = *(_DWORD **)(v9 - 120);
    if (v13) {
      --*v13;
    }
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<quasar::NBestToken<0ul>>>::emplace_back<std::vector<quasar::NBestToken<0ul>>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    uint64_t v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    void v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<quasar::NBestToken<0ul>>>::__swap_out_circular_buffer(a1, v17);
    __n128 v8 = (void *)a1[1];
    std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::~__split_buffer(v17);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    void v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    __n128 v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1B1E63068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::CalculateJoinedNBest<1ul>::operator()(uint64_t a1, uint64_t a2)
{
}

{
  void *v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *__p[2];
  unsigned __int8 v8;
  void v9[2];
  void *v10[11];
  char v11;
  uint64_t v12;
  void v13[38];

  v13[35] = *MEMORY[0x1E4F143B8];
  if (quasar::gLogLevel >= 6)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
    kaldi::WriteCompactLattice(v10, 0, a2);
    if (quasar::gLogLevel >= 6)
    {
      memset(v13, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Primary lattice: ", 17);
      std::stringbuf::str();
      if ((v8 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v8 & 0x80u) == 0) {
        unint64_t v5 = v8;
      }
      else {
        unint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
      if ((char)v8 < 0) {
        operator delete(__p[0]);
      }
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v13);
    }
    v9[0] = *MEMORY[0x1E4FBA408];
    unint64_t v6 = *(void **)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v10[0] = v6;
    v10[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (v11 < 0) {
      operator delete(v10[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](&v12);
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst();
}

void sub_1B1E639A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a29);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&a24);
  uint64_t v30 = a26;
  a26 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&a27);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<quasar::NBestToken<1ul>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<quasar::NBestToken<1ul>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B1E63BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<quasar::NBestToken<1ul>>>::emplace_back<std::vector<quasar::NBestToken<1ul>>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    uint64_t v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    void v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<quasar::NBestToken<1ul>>>::__swap_out_circular_buffer(a1, v17);
    __n128 v8 = (void *)a1[1];
    std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::~__split_buffer(v17);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    void v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    __n128 v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1B1E63D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *quasar::NBestToken<1ul>::~NBestToken(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void quasar::ExtractFirstAndSecondPassAcousticCostLatticeFromWordHypLattice(quasar *this, const kaldi::WordHypLattice *a2)
{
}

void sub_1B1E64004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  unsigned __int8 v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(void *)(v22 - 96) = v24;
    operator delete(v24);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(v21);
  _Unwind_Resume(a1);
}

void fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_1F0A39408;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_DWORD *)(a1 + 92) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 72), 0, 0, 0);
  *(_DWORD *)(a1 + 96) = -1;
  *(unsigned char *)(a1 + 106) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::MemoryPool((void *)(a1 + 112), 1);
}

void sub_1B1E64218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::~MemoryPool(v20);
  uint64_t v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 80) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36C48;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36C48;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~SortedMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Copy()
{
}

void sub_1B1E64368(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C403BFD1AB0);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 106)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104)) {
    return a1 + 56;
  }
  else {
    return **(void **)(a1 + 24) + 48 * *(void *)(*(void *)(a1 + 24) + 16);
  }
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 104)) {
    *(unsigned char *)(result + 104) = 0;
  }
  else {
    ++*(void *)(*(void *)(result + 24) + 16);
  }
  return result;
}

void *fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Final_@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 64) + 8 * a2);
  *a3 = *(void *)v3;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 1, *(const void **)(v3 + 8), *(void *)(v3 + 16), (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 2);
}

unint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Priority_(uint64_t a1, int a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 64) + 8 * a2) + 56)
                  - *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 64) + 8 * a2) + 48)) >> 4);
}

void fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36C48;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1E64558(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Size()
{
  return 24;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37C00;
  a1[1] = 32 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1E6466C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37C00;
  int v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::Size()
{
  return 32;
}

void *fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~SortedMatcher(void *a1)
{
  *a1 = &unk_1F0A39408;
  uint64_t v2 = a1[3];
  uint64_t v3 = (quasar::Bitmap *)(a1 + 14);
  if (v2)
  {
    *(void *)(v2 + 24) = a1[21];
    a1[21] = v2;
  }
  uint64_t v4 = a1[1];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  a1[14] = &unk_1F0A36C48;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::~MemoryArena(a1 + 15);
  quasar::Bitmap::~Bitmap(v3);
  unint64_t v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  return a1;
}

void fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A39408;
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 88))(*(void *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::MemoryPool((void *)(a1 + 112), 1);
}

void sub_1B1E64904(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 105) = 1;
  if (*(unsigned char *)(a1 + 106))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    return result;
  }
  BOOL result = a2 == 0;
  *(unsigned char *)(a1 + 104) = result;
  if (a2 == -1) {
    int v4 = 0;
  }
  else {
    int v4 = a2;
  }
  *(_DWORD *)(a1 + 40) = v4;
  int v5 = *(_DWORD *)(a1 + 32);
  if (v4 < *(_DWORD *)(a1 + 36))
  {
    uint64_t v6 = *(int ***)(a1 + 24);
    uint64_t v7 = v6[1];
    if (v7)
    {
      unint64_t v8 = 0;
      uint64_t v9 = *v6;
      while (1)
      {
        uint64_t v10 = v9 + 1;
        if (!v5) {
          uint64_t v10 = v9;
        }
        int v11 = *v10;
        BOOL v12 = v11 == v4;
        int v13 = v11 <= v4 ? 0 : 7;
        if (v12) {
          int v13 = 1;
        }
        if (v13) {
          break;
        }
        ++v8;
        v9 += 12;
        if (v7 == (int *)v8)
        {
          unint64_t v8 = (unint64_t)v6[1];
          goto LABEL_34;
        }
      }
      if (v13 == 1)
      {
        v6[2] = (int *)v8;
        return 1;
      }
    }
    else
    {
      unint64_t v8 = 0;
    }
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(a1 + 48);
  uint64_t v6 = *(int ***)(a1 + 24);
  unint64_t v8 = 0;
  if (!v14)
  {
LABEL_34:
    v6[2] = (int *)v8;
    return result;
  }
  uint64_t v15 = *v6;
  while (1)
  {
    unint64_t v16 = (v8 + v14) >> 1;
    uint64_t v17 = &v15[12 * v16];
    if (v5) {
      ++v17;
    }
    int v18 = *v17;
    if (v18 <= v4) {
      break;
    }
    unint64_t v14 = (v8 + v14) >> 1;
LABEL_29:
    if (v8 >= v14) {
      goto LABEL_34;
    }
  }
  if (v18 < v4)
  {
    unint64_t v8 = v16 + 1;
    goto LABEL_29;
  }
  v6[2] = (int *)v16;
  uint64_t v19 = 48 * ((v14 + v8) >> 1) - 48;
  float v20 = v15;
  while (v16 > v8)
  {
    v6[2] = (int *)--v16;
    int v21 = (int *)((char *)v15 + v19);
    if (v5) {
      int v21 = (int *)((char *)v20 + v19 + 4);
    }
    else {
      float v20 = v15;
    }
    v19 -= 48;
    if (*v21 != v4)
    {
      v6[2] = (int *)(v16 + 1);
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104)) {
    return 0;
  }
  uint64_t v2 = *(void **)(a1 + 24);
  unint64_t v3 = v2[2];
  if (v3 >= v2[1]) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 105)) {
    return 0;
  }
  int v4 = (_DWORD *)(*v2 + 48 * v3);
  if (*(_DWORD *)(a1 + 32)) {
    ++v4;
  }
  return *v4 != *(_DWORD *)(a1 + 40);
}

uint64_t std::vector<std::vector<quasar::NBestToken<0ul>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::NBestToken<0ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::NBestToken<0ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<0ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<0ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<0ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<0ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = v1;
    std::vector<quasar::NBestToken<0ul>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    int v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::NBestToken<0ul>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 32 * a2;
  unint64_t v4 = a1[1];
  if (v4 < a2 << 7) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

uint64_t quasar::NBestToken<0ul>::NBestToken(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 8) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), 0, 0, 0);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return a1;
}

void sub_1B1E64E70(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::~__func()
{
}

__n128 std::__function::__func<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1F0A5B518;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5B518;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::operator()(uint64_t a1, float32x2_t *a2, float32x2_t **a3)
{
  return quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator()(a1 + 8, a2, *a3);
}

uint64_t std::__function::__func<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::target_type()
{
}

uint64_t quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator()(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  long long v4 = *(char **)a1;
  uint64_t v5 = **(void **)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 24);
  int v7 = *(unsigned __int8 *)(a1 + 40);
  long long v8 = *(uint64_t **)(a1 + 48);
  if (a3)
  {
    if (a3->i32[1])
    {
      int v10 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 != -1)
      {
        *((void *)v4 + 6) = v5;
        if (v10 == v6)
        {
          uint64_t v11 = v8[1];
          if (*v8 != v11) {
            *(void *)(v11 - 40) = v5;
          }
          *(_DWORD *)long long v4 = -1;
          if (!v7) {
            *((void *)v4 + 1) = 0;
          }
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4 + 16, 0, 0, 0);
          *((void *)v4 + 5) = 0;
          *((void *)v4 + 6) = 0;
        }
        else
        {
          unint64_t v15 = v8[1];
          if (v15 >= v8[2])
          {
            uint64_t v16 = std::vector<quasar::NBestToken<0ul>>::__emplace_back_slow_path<quasar::NBestToken<0ul>>(v8, (int *)v4);
          }
          else
          {
            quasar::NBestToken<0ul>::NBestToken(v8[1], (int *)v4);
            uint64_t v16 = v15 + 88;
            v8[1] = v15 + 88;
          }
          v8[1] = v16;
          *(_DWORD *)long long v4 = -1;
          *((void *)v4 + 1) = 0;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4 + 16, 0, 0, 0);
          *(_OWORD *)(v4 + 72) = 0u;
          *(_OWORD *)(v4 + 56) = 0u;
          *(_OWORD *)(v4 + 40) = 0u;
        }
      }
      long long v4 = *(char **)a1;
      *(_DWORD *)long long v4 = a3->i32[1];
      *((void *)v4 + 5) = **(void **)(a1 + 8);
    }
    fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)v4 + 1, a3 + 1, (int32x2_t *)__p);
    uint64_t v19 = *(char **)a1;
    float v20 = *(void ***)a1;
    v20[1] = __p[0];
    if (v20 + 1 != __p) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v19 + 16, (char *)__p[1], v35, (uint64_t)(v35 - (unint64_t)__p[1]) >> 2);
    }
    if (__p[1])
    {
      *(void **)&long long v35 = __p[1];
      operator delete(__p[1]);
    }
    uint64_t v21 = *(void *)(a1 + 32);
    if (!v21) {
      goto LABEL_43;
    }
    uint64_t v24 = *(void *)(v21 + 8);
    uint64_t v22 = v21 + 8;
    uint64_t v23 = v24;
    if (!v24) {
      goto LABEL_43;
    }
    __int32 v25 = a3->i32[1];
    uint64_t v26 = v22;
    do
    {
      __int32 v27 = *(_DWORD *)(v23 + 28);
      BOOL v28 = v27 < v25;
      if (v27 >= v25) {
        uint64_t v29 = (uint64_t *)v23;
      }
      else {
        uint64_t v29 = (uint64_t *)(v23 + 8);
      }
      if (!v28) {
        uint64_t v26 = v23;
      }
      uint64_t v23 = *v29;
    }
    while (*v29);
    if (v26 != v22 && v25 >= *(_DWORD *)(v26 + 28)) {
      uint64_t v30 = 0;
    }
    else {
LABEL_43:
    }
      uint64_t v30 = (uint64_t)(*(void *)&a3[3] - *(void *)&a3[2]) >> 2;
    **(void **)(a1 + 8) += v30;
    if (quasar::gLogLevel >= 6)
    {
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Primary lattice moving to state ", 32);
      uint64_t v31 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" with label ", 12);
      uint64_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)".", 1);
LABEL_51:
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
  }
  else
  {
    fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)v4 + 1, a2, (int32x2_t *)__p);
    char v12 = *(char **)a1;
    long long v13 = *(void ***)a1;
    v13[1] = __p[0];
    if (v13 + 1 != __p) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v12 + 16, (char *)__p[1], v35, (uint64_t)(v35 - (unint64_t)__p[1]) >> 2);
    }
    if (__p[1])
    {
      *(void **)&long long v35 = __p[1];
      operator delete(__p[1]);
    }
    if (**(_DWORD **)a1 != -1)
    {
      *((void *)v4 + 6) = v5;
      if (*(_DWORD *)v4 == v6)
      {
        uint64_t v14 = v8[1];
        if (*v8 != v14) {
          *(void *)(v14 - 40) = v5;
        }
        *(_DWORD *)long long v4 = -1;
        if (!v7) {
          *((void *)v4 + 1) = 0;
        }
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4 + 16, 0, 0, 0);
        *((void *)v4 + 5) = 0;
        *((void *)v4 + 6) = 0;
      }
      else
      {
        unint64_t v17 = v8[1];
        if (v17 >= v8[2])
        {
          uint64_t v18 = std::vector<quasar::NBestToken<0ul>>::__emplace_back_slow_path<quasar::NBestToken<0ul>>(v8, (int *)v4);
        }
        else
        {
          quasar::NBestToken<0ul>::NBestToken(v8[1], (int *)v4);
          uint64_t v18 = v17 + 88;
          v8[1] = v17 + 88;
        }
        v8[1] = v18;
        *(_DWORD *)long long v4 = -1;
        *((void *)v4 + 1) = 0;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4 + 16, 0, 0, 0);
        *(_OWORD *)(v4 + 72) = 0u;
        *(_OWORD *)(v4 + 56) = 0u;
        *(_OWORD *)(v4 + 40) = 0u;
      }
    }
    if (quasar::gLogLevel >= 6)
    {
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Primary lattice moving to final state.", 38);
      goto LABEL_51;
    }
  }
  return 1;
}

void sub_1B1E653A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  *(void *)(v12 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::NBestToken<0ul>>::__emplace_back_slow_path<quasar::NBestToken<0ul>>(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  long long v13 = v10;
  uint64_t v14 = &v10[88 * v4];
  uint64_t v16 = &v10[88 * v9];
  quasar::NBestToken<0ul>::NBestToken((uint64_t)v14, a2);
  unint64_t v15 = v14 + 88;
  std::vector<quasar::NBestToken<0ul>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::NBestToken<0ul>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B1E654F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::NBestToken<0ul>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::NBestToken<0ul>::NBestToken(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *a2 = -1;
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  unint64_t v5 = (char *)(a2 + 4);
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 16), *((const void **)a2 + 2), *((void *)a2 + 3), (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 2);
  *((void *)a2 + 1) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v5, 0, 0, 0);
  uint64_t v6 = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0;
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  *(void *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 14);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 18);
  *(_OWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1B1E655BC(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::NBestToken<0ul>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>,std::reverse_iterator<quasar::NBestToken<0ul>*>,std::reverse_iterator<quasar::NBestToken<0ul>*>>((uint64_t)(a1 + 2), a1[1], (int *)a1[1], *a1, (int *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>,std::reverse_iterator<quasar::NBestToken<0ul>*>,std::reverse_iterator<quasar::NBestToken<0ul>*>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      v9 -= 22;
      quasar::NBestToken<0ul>::NBestToken(v7 - 88, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 88;
      *((void *)&v15 + 1) -= 88;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1B1E656F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(void *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 88;
  }
}

uint64_t std::__split_buffer<quasar::NBestToken<0ul>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<quasar::NBestToken<0ul>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 88;
    uint64_t v5 = *(void **)(v2 - 72);
    if (v5)
    {
      *(void *)(v2 - 64) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 88;
    }
  }
}

void *std::__function::__value_func<BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::vector<std::vector<quasar::NBestToken<1ul>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::NBestToken<1ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::NBestToken<1ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<1ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<1ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<1ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<1ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<quasar::NBestToken<1ul>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    int v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::NBestToken<1ul>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void *quasar::NBestToken<1ul>::NBestToken(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  quasar::NBestToken<1ul>::clear((uint64_t)a1, 0, 0);
  return a1;
}

void sub_1B1E65B1C(_Unwind_Exception *exception_object)
{
  int v4 = v2;
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 72) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 24) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NBestToken<1ul>::clear(uint64_t a1, char a2, int a3)
{
  *(_DWORD *)a1 = -1;
  if ((a2 & 1) == 0) {
    *(void *)(a1 + 8) = 0;
  }
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), 0, 0, 0);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  if (a3)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 64), 0, 0, 0);
  }
  else
  {
    uint64_t v6 = *(const void **)(a1 + 64);
    uint64_t v5 = a1 + 64;
    long long v8 = 0;
    uint64_t v9 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v6, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - (void)v6) >> 2);
    *(void *)(v5 - 8) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v5, 0, 0, 0);
    if (__p)
    {
      long long v8 = __p;
      operator delete(__p);
    }
  }
}

void sub_1B1E65C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::~__func()
{
}

__n128 std::__function::__func<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1F0A5B570;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5B570;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::operator()(uint64_t a1, float32x2_t *a2, float32x2_t **a3)
{
  return quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator()(a1 + 8, a2, *a3);
}

uint64_t std::__function::__func<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::target_type()
{
}

uint64_t quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator()(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  v44[0] = a3 == 0;
  long long v4 = *(float32x2_t **)a1;
  float32x2_t v5 = **(float32x2_t **)(a1 + 8);
  float32x2_t v45 = v5;
  int v46 = *(_DWORD *)(a1 + 24);
  char v47 = *(unsigned char *)(a1 + 40);
  uint64_t v48 = *(void *)(a1 + 16);
  long long v49 = v4;
  uint64_t v50 = *(void *)(a1 + 48);
  if (a3)
  {
    __int32 v7 = a3->i32[1];
    if (!v7)
    {
LABEL_7:
      fst::Times<fst::LatticeWeightTpl<float>,int>(v4 + 1, a3 + 1, (int32x2_t *)__p);
      long long v8 = *(float32x2_t **)a1;
      uint64_t v9 = *(float32x2_t **)a1;
      v9[1] = (float32x2_t)__p[0];
      if (&v9[1] != (float32x2_t *)__p) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v8[2], (char *)__p[1], v28, (uint64_t)(v28 - (unint64_t)__p[1]) >> 2);
      }
      if (__p[1])
      {
        *(void **)&long long v28 = __p[1];
        operator delete(__p[1]);
      }
      uint64_t v10 = *(void *)(a1 + 32);
      if (!v10) {
        goto LABEL_22;
      }
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v11 = v10 + 8;
      uint64_t v12 = v13;
      if (!v13) {
        goto LABEL_22;
      }
      __int32 v14 = a3->i32[1];
      uint64_t v15 = v11;
      do
      {
        __int32 v16 = *(_DWORD *)(v12 + 28);
        BOOL v17 = v16 < v14;
        if (v16 >= v14) {
          uint64_t v18 = (uint64_t *)v12;
        }
        else {
          uint64_t v18 = (uint64_t *)(v12 + 8);
        }
        if (!v17) {
          uint64_t v15 = v12;
        }
        uint64_t v12 = *v18;
      }
      while (*v18);
      if (v15 != v11 && v14 >= *(_DWORD *)(v15 + 28)) {
        uint64_t v19 = 0;
      }
      else {
LABEL_22:
      }
        uint64_t v19 = (uint64_t)(*(void *)&a3[3] - *(void *)&a3[2]) >> 2;
      **(void **)(a1 + 8) += v19;
      if (quasar::gLogLevel < 6) {
        return 1;
      }
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Primary lattice moving to state ", 32);
      float v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" with label ", 12);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
      goto LABEL_33;
    }
    if (v4->i32[0] == -1)
    {
LABEL_6:
      v4->i32[0] = v7;
      v4[5] = v5;
      goto LABEL_7;
    }
    if (quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator() const(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)::{lambda(void)#1}::operator()((uint64_t)v44))
    {
      __int32 v7 = a3->i32[1];
      long long v4 = *(float32x2_t **)a1;
      float32x2_t v5 = **(float32x2_t **)(a1 + 8);
      goto LABEL_6;
    }
    if (quasar::gLogLevel >= 2) {
      goto LABEL_38;
    }
  }
  else
  {
    fst::Times<fst::LatticeWeightTpl<float>,int>(v4 + 1, a2, (int32x2_t *)__p);
    uint64_t v22 = *(float32x2_t **)a1;
    uint64_t v23 = *(float32x2_t **)a1;
    v23[1] = (float32x2_t)__p[0];
    if (&v23[1] != (float32x2_t *)__p) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v22[2], (char *)__p[1], v28, (uint64_t)(v28 - (unint64_t)__p[1]) >> 2);
    }
    if (__p[1])
    {
      *(void **)&long long v28 = __p[1];
      operator delete(__p[1]);
    }
    if (**(_DWORD **)a1 == -1
      || quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator() const(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)::{lambda(void)#1}::operator()((uint64_t)v44))
    {
      if (quasar::gLogLevel < 6) {
        return 1;
      }
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Primary lattice moving to final state.", 38);
LABEL_33:
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
      return 1;
    }
    if (quasar::gLogLevel >= 2)
    {
LABEL_38:
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      __int32 v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to process ", 18);
      uint64_t v26 = quasar::operator<<<1ul>(v25, *(void *)a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"; skipping hypothesis.",
        22);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
  }
  return 0;
}

void sub_1B1E6610C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

BOOL quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator() const(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(v2 + 48) = *(void *)(a1 + 8);
  uint64_t v3 = **(void **)(a1 + 24);
  BOOL v4 = fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Find(v3, *(_DWORD *)v2);
  if (v4)
  {
    if (*(unsigned char *)(v3 + 104)) {
      float32x2_t v5 = (float32x2_t *)(v3 + 56);
    }
    else {
      float32x2_t v5 = (float32x2_t *)(**(void **)(v3 + 24) + 48 * *(void *)(*(void *)(v3 + 24) + 16));
    }
    if (*(unsigned char *)a1)
    {
      if (quasar::gLogLevel >= 6)
      {
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        *(_OWORD *)long long v31 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Secondary FST ", 14);
        long long v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" moving to final state.", 23);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v31);
      }
      uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)(v3 + 8) + 8) + 64) + 8 * v5[5].i32[0]);
      v31[0] = *(void **)v9;
      long long v32 = 0uLL;
      v31[1] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31[1], *(const void **)(v9 + 8), *(void *)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 2);
      v25.i32[0] = HIDWORD(v31[0]);
      v28.i32[0] = (__int32)v31[0];
      int v49 = 2139095040;
      int v48 = 2139095040;
      uint64_t v10 = *(float32x2_t **)(a1 + 32);
      fst::Times<fst::LatticeWeightTpl<float>,int>(v5 + 1, (float32x2_t *)v31, (int32x2_t *)&v25);
      fst::Times<fst::LatticeWeightTpl<float>,int>(v10 + 7, &v25, &v28);
      uint64_t v11 = *(int32x2_t **)(a1 + 32);
      v11[7] = v28;
      if (&v11[7] != &v28) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v11[8], (char *)__p, (uint64_t)v30, (v30 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        long long v30 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        __int32 v27 = v26;
        operator delete(v26);
      }
      if (v31[1])
      {
        *(void **)&long long v32 = v31[1];
        operator delete(v31[1]);
      }
    }
    else
    {
      if (quasar::gLogLevel >= 6)
      {
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        *(_OWORD *)long long v31 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Secondary FST ", 14);
        uint64_t v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" moving to state ", 17);
        uint64_t v13 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v31);
      }
      fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)(*(void *)(a1 + 32) + 56), v5 + 1, (int32x2_t *)v31);
      uint64_t v14 = *(void *)(a1 + 32);
      *(void **)(v14 + 56) = v31[0];
      if ((void **)(v14 + 56) != v31) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v14 + 64), (char *)v31[1], v32, (uint64_t)(v32 - (unint64_t)v31[1]) >> 2);
      }
      if (v31[1])
      {
        *(void **)&long long v32 = v31[1];
        operator delete(v31[1]);
      }
      fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetState(v3, v5[5].i32[0]);
    }
    uint64_t v15 = *(float32x2_t **)(a1 + 32);
    __int32 v16 = *(void **)(a1 + 40);
    if (v15->i32[0] == *(_DWORD *)(a1 + 16))
    {
      uint64_t v17 = v16[1];
      if (*v16 != v17)
      {
        *(float32x2_t *)(v17 - 40) = v15[6];
        if (*(unsigned char *)a1)
        {
          fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)(v17 - 32), v15 + 7, (int32x2_t *)v31);
          uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
          *(void **)(v18 - 32) = v31[0];
          if ((void **)(v18 - 32) != v31) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v18 - 24), (char *)v31[1], v32, (uint64_t)(v32 - (unint64_t)v31[1]) >> 2);
          }
          if (v31[1])
          {
            *(void **)&long long v32 = v31[1];
            operator delete(v31[1]);
          }
          uint64_t v15 = *(float32x2_t **)(a1 + 32);
        }
      }
      uint64_t v19 = (uint64_t)v15;
      char v20 = *(unsigned char *)(a1 + 20);
      int v21 = 1;
    }
    else
    {
      unint64_t v22 = v16[1];
      if (v22 >= v16[2])
      {
        uint64_t v23 = std::vector<quasar::NBestToken<1ul>>::__emplace_back_slow_path<quasar::NBestToken<1ul>>(*(uint64_t **)(a1 + 40), (int *)v15);
      }
      else
      {
        quasar::NBestToken<1ul>::NBestToken(v16[1], (int *)v15);
        uint64_t v23 = v22 + 88;
        v16[1] = v22 + 88;
      }
      v16[1] = v23;
      uint64_t v19 = *(void *)(a1 + 32);
      char v20 = 0;
      int v21 = 0;
    }
    quasar::NBestToken<1ul>::clear(v19, v20, v21);
  }
  else if (quasar::gLogLevel >= 2)
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    *(_OWORD *)long long v31 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unable to find arc with label ", 30);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" in secondary FST ", 18);
    __int32 v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".", 1);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v31);
  }
  return v4;
}

void sub_1B1E665C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::operator<<<1ul>(void *a1, uint64_t a2)
{
  BOOL v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"NBestToken(", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"labelId=", 8);
  float32x2_t v5 = (void *)std::ostream::operator<<();
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  __int32 v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"weight=", 7);
  long long v8 = fst::operator<<<fst::LatticeWeightTpl<float>,int>(v7, a2 + 8);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"startFrame=", 11);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"endFrame=", 9);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"weights=[", 9);
  uint64_t v13 = fst::operator<<<fst::LatticeWeightTpl<float>,int>(a1, a2 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"])", 2);
  return a1;
}

uint64_t std::vector<quasar::NBestToken<1ul>>::__emplace_back_slow_path<quasar::NBestToken<1ul>>(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[88 * v4];
  __int32 v16 = &v10[88 * v9];
  quasar::NBestToken<1ul>::NBestToken((uint64_t)v14, a2);
  uint64_t v15 = v14 + 88;
  std::vector<quasar::NBestToken<1ul>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::NBestToken<1ul>>::~__split_buffer(&v13);
  return v11;
}

void sub_1B1E66870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::NBestToken<1ul>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::NBestToken<1ul>::NBestToken(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *a2 = -1;
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  unint64_t v5 = (char *)(a2 + 4);
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 16), *((const void **)a2 + 2), *((void *)a2 + 3), (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 2);
  *((void *)a2 + 1) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v5, 0, 0, 0);
  uint64_t v6 = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0;
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  uint64_t v8 = *((void *)a2 + 7);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 64), *((const void **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 2);
  return a1;
}

void sub_1B1E66948(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::NBestToken<1ul>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>,std::reverse_iterator<quasar::NBestToken<1ul>*>,std::reverse_iterator<quasar::NBestToken<1ul>*>>((uint64_t)(a1 + 2), a1[1], (int *)a1[1], *a1, (int *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>,std::reverse_iterator<quasar::NBestToken<1ul>*>,std::reverse_iterator<quasar::NBestToken<1ul>*>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      v9 -= 22;
      quasar::NBestToken<1ul>::NBestToken(v7 - 88, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 88;
      *((void *)&v15 + 1) -= 88;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1B1E66A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  uint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::NBestToken<1ul>>::destroy[abi:ne180100](v3, v1);
      v1 += 11;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::NBestToken<1ul>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::NBestToken<1ul>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<quasar::NBestToken<1ul>>::destroy[abi:ne180100](v4, (void *)(i - 88));
  }
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  if (__first.__i_ != __last.__i_)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v9, (long long *)__last.__i_, (long long *)this->__end_, (uint64_t)__first.__i_);
    uint64_t v6 = v5;
    std::vector<std::string>::pointer end = this->__end_;
    if (end != v5)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      while (end != v6);
    }
    this->__end_ = v6;
  }
  return (std::vector<std::string>::iterator)__first.__i_;
}

void **std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__equal_to &>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result = (void **)a2;
  if (a1 != a2)
  {
    do
    {
      uint64_t v7 = a1 + 24;
      if (a1 + 24 == a2) {
        return (void **)a2;
      }
      int v8 = std::equal_to<std::string>::operator()[abi:ne180100](a3, a1, a1 + 24);
      a1 = v7;
    }
    while (!v8);
    char v9 = v7 + 24;
    uint64_t v10 = v7 - 24;
    if (v9 == a2)
    {
      uint64_t v11 = (void **)v10;
    }
    else
    {
      do
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](a3, v10, v9))
        {
          uint64_t v11 = (void **)v10;
        }
        else
        {
          uint64_t v11 = (void **)(v10 + 24);
          if ((char)v10[47] < 0) {
            operator delete(*v11);
          }
          long long v12 = *(_OWORD *)v9;
          *((void *)v10 + 5) = *((void *)v9 + 2);
          *(_OWORD *)uint64_t v11 = v12;
          v9[23] = 0;
          unsigned __int8 *v9 = 0;
          v10 += 24;
        }
        v9 += 24;
      }
      while (v9 != a2);
    }
    return v11 + 3;
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,int &,void>(uint64_t a1, int *a2)
{
  uint64_t v3 = operator new(0x160uLL);
  std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<int &,std::allocator<quasar::RecogAudioBuffer>,0>(v3, a2);
}

void sub_1B1E66D58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<int &,std::allocator<quasar::RecogAudioBuffer>,0>(void *a1, int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60250;
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,int &>((uint64_t)&v2, (uint64_t)(a1 + 3), a2);
}

void sub_1B1E66DC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,int &>(uint64_t a1, uint64_t a2, int *a3)
{
  int v4 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  _ZNSt3__115allocate_sharedB8ne180100IKN5kaldi5TimerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v5);
  quasar::RecogAudioBuffer::RecogAudioBuffer(a2, v4, 120, 0, 1, &__p, &v5, 120, 0, 4000);
}

void sub_1B1E66E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::MultiAudioBuffer,std::allocator<quasar::MultiAudioBuffer>,std::shared_ptr<quasar::RecogAudioBuffer>,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::MultiAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RecogAudioBuffer>,std::allocator<quasar::MultiAudioBuffer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1E66EE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::MultiAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RecogAudioBuffer>,std::allocator<quasar::MultiAudioBuffer>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A601E0;
  std::allocator<quasar::MultiAudioBuffer>::construct[abi:ne180100]<quasar::MultiAudioBuffer,std::shared_ptr<quasar::RecogAudioBuffer>>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B1E66F58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::MultiAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A601E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::MultiAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A601E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::MultiAudioBuffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<quasar::MultiAudioBuffer>::construct[abi:ne180100]<quasar::MultiAudioBuffer,std::shared_ptr<quasar::RecogAudioBuffer>>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  quasar::MultiAudioBuffer::MultiAudioBuffer(a2, &v3);
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_1B1E67050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::GenericPhraseBook::GenericPhraseBook(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A53AE8;
  *(unsigned char *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = *(unsigned __int8 *)(a3 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a3 + 8);
  }
  if (v4) {
    quasar::RegularExpressionReplacer::read();
  }
  return a1;
}

void sub_1B1E670E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::GenericPhraseBook::lookup(void (***a1)(uint64_t *__return_ptr)@<X0>, int a2@<W2>, void *a3@<X8>)
{
  (**a1)(&v7);
  uint64_t v6 = v8;
  if (!a2 || (uint64_t v6 = v7, v7 == v8))
  {
    *a3 = v7;
    a3[1] = v6;
    a3[2] = v9;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    quasar::GenericPhraseBook::filterPhraseBookEntries((uint64_t)a1, &v7);
  }
  uint64_t v10 = (void **)&v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_1B1E671C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::GenericPhraseBook::filterPhraseBookEntries(uint64_t a1, uint64_t *a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = v9;
  memset(&v7, 0, sizeof(v7));
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = v6;
  uint64_t v2 = *a2;
  if (a2[1] != *a2)
  {
    v4[0] = "source";
    v4[1] = 6;
    quasar::GenericPhraseBook::getMetaForKey(a1, (uint64_t)v4, v2);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::destroy((uint64_t)&v5, v6[0]);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  std::__tree<int>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1B1E67848(_Unwind_Exception *a1, uint64_t a2, std::__split_buffer<std::wstring> *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__pa,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__pa);
  }
  if (*(char *)(v53 - 225) < 0) {
    operator delete(*(void **)(v53 - 248));
  }
  if (*(char *)(v53 - 201) < 0) {
    operator delete(*(void **)(v53 - 224));
  }
  if (*(char *)(v53 - 177) < 0) {
    operator delete(*(void **)(v53 - 200));
  }
  std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::destroy(v53 - 160, *(void **)(v53 - 152));
  *(void *)(v53 - 160) = v53 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 160));
  std::__tree<int>::destroy(v53 - 112, *(void **)(v53 - 104));
  _Unwind_Resume(a1);
}

double quasar::GenericPhraseBook::normalizeKey@<D0>(void *__src@<X1>, size_t __len@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v9 = __len | 7;
    }
    size_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a4 + 8) = __len;
    *(void *)(a4 + 16) = v10 | 0x8000000000000000;
    *(void *)a4 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a4 + 23) = __len;
  uint64_t v8 = (void *)a4;
  if (__len) {
LABEL_8:
  }
    memmove(v8, __src, __len);
  *((unsigned char *)v8 + __len) = 0;
  if (!*(unsigned char *)(a3 + 8))
  {
    quasar::utf8::convertToLowerCase((char *)__src, __len, (uint64_t)&__str);
    if (!v38)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Unable to convert key: '", 24);
      __int32 v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)__src, __len);
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"' to the lower case: ", 21);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_str, size);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v20);
    }
    std::string::operator=((std::string *)a4, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(a3 + 24);
  long long v14 = (void *)(a3 + 16);
  if (v12 != v13)
  {
    quasar::RegularExpressionReplacer::apply(v14, a4, (std::string *)&v20);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    double result = *(double *)&v20;
    *(_OWORD *)a4 = v20;
    *(void *)(a4 + 16) = v21;
  }
  return result;
}

void sub_1B1E67B0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 73) < 0) {
    operator delete(*(void **)(v2 - 96));
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double quasar::GenericPhraseBook::parseSynsetName(int a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  size_t v5 = a2[1];
  if (v5)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    size_t v10 = (unsigned char *)*a2;
    do
    {
      if (v10[v8] == 46) {
        ++v9;
      }
      ++v8;
    }
    while (v5 != v8);
    if (v9 == 2)
    {
      if (v5 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v5 >= 0x17)
        {
          uint64_t v27 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v5 | 7) != 0x17) {
            uint64_t v27 = v5 | 7;
          }
          uint64_t v28 = v27 + 1;
          uint64_t v19 = (long long *)operator new(v27 + 1);
          *((void *)&v31 + 1) = v5;
          *(void *)&long long v32 = v28 | 0x8000000000000000;
          *(void *)&long long v31 = v19;
        }
        else
        {
          BYTE7(v32) = a2[1];
          uint64_t v19 = &v31;
        }
        memmove(v19, v10, v5);
        *((unsigned char *)v19 + v5) = 0;
        if (*(char *)(a3 + 23) < 0) {
          operator delete(*(void **)a3);
        }
        *(_OWORD *)a3 = v31;
        *(void *)(a3 + 16) = v32;
        JUMPOUT(0x1B3EA7B20);
      }
      goto LABEL_47;
    }
    if (v9 == 3)
    {
      unint64_t v11 = std::string_view::find_last_of[abi:ne180100](a2, ".", 0xFFFFFFFFFFFFFFFFLL);
      if (a2[1] >= v11) {
        size_t v12 = v11;
      }
      else {
        size_t v12 = a2[1];
      }
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_47;
      }
      unint64_t v13 = v11;
      long long v14 = (const void *)*a2;
      if (v12 >= 0x17)
      {
        uint64_t v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v20 = v12 | 7;
        }
        uint64_t v21 = v20 + 1;
        long long v15 = (long long *)operator new(v20 + 1);
        *((void *)&v31 + 1) = v12;
        *(void *)&long long v32 = v21 | 0x8000000000000000;
        *(void *)&long long v31 = v15;
      }
      else
      {
        BYTE7(v32) = v12;
        long long v15 = &v31;
        if (!v12)
        {
LABEL_24:
          *((unsigned char *)v15 + v12) = 0;
          if (*(char *)(a3 + 23) < 0) {
            operator delete(*(void **)a3);
          }
          *(_OWORD *)a3 = v31;
          *(void *)(a3 + 16) = v32;
          unint64_t v22 = v13 + 1;
          unint64_t v23 = a2[1];
          size_t v24 = v23 - (v13 + 1);
          if (v23 < v13 + 1) {
            std::__throw_out_of_range[abi:ne180100]("string_view::substr");
          }
          if (v24 <= 0x7FFFFFFFFFFFFFF7)
          {
            uint64_t v25 = *a2;
            if (v24 >= 0x17)
            {
              uint64_t v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v24 | 7) != 0x17) {
                uint64_t v29 = v24 | 7;
              }
              uint64_t v30 = v29 + 1;
              long long v26 = (long long *)operator new(v29 + 1);
              *((void *)&v31 + 1) = v24;
              *(void *)&long long v32 = v30 | 0x8000000000000000;
              *(void *)&long long v31 = v26;
            }
            else
            {
              BYTE7(v32) = v23 - (v13 + 1);
              long long v26 = &v31;
              if (v23 == v22) {
                goto LABEL_43;
              }
            }
            memmove(v26, (const void *)(v25 + v22), v24);
LABEL_43:
            *((unsigned char *)v26 + v24) = 0;
            if (*(char *)(a4 + 23) < 0) {
              operator delete(*(void **)a4);
            }
            double result = *(double *)&v31;
            *(_OWORD *)a4 = v31;
            *(void *)(a4 + 16) = v32;
            return result;
          }
LABEL_47:
          std::string::__throw_length_error[abi:ne180100]();
        }
      }
      memmove(v15, v14, v12);
      goto LABEL_24;
    }
  }
  if (quasar::gLogLevel >= 2)
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    __int32 v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"found invalid synset name '", 27);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, *a2, a2[1]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"' in phrasebook", 15);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v31);
  }
  return result;
}

void sub_1B1E67E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t std::string_view::find_last_of[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v6 = *a1;
  size_t v7 = strlen(__s);
  if (v7)
  {
    size_t v8 = v7;
    if (a1[1] > a3) {
      unint64_t v9 = a3 + 1;
    }
    else {
      unint64_t v9 = a1[1];
    }
    while (v9)
    {
      if (memchr(__s, *(char *)(v6 - 1 + v9--), v8)) {
        return v9;
      }
    }
  }
  return -1;
}

void quasar::GenericPhraseBook::getMetaForKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  quasar::PTree::PTree((quasar::PTree *)v13);
  if (*(char *)(a3 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else {
    std::string v12 = *(std::string *)(a3 + 24);
  }
  quasar::json2Ptree((uint64_t)&v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  size_t v5 = *(void *)(a2 + 8);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = *(const void **)a2;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    size_t v7 = operator new(v8 + 1);
    __dst[1] = v5;
    unint64_t v11 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v11) = v5;
    size_t v7 = __dst;
    if (!v5)
    {
LABEL_14:
      *((unsigned char *)v7 + v5) = 0;
      quasar::PTree::getStringOptional((uint64_t)v13, (uint64_t)__dst);
    }
  }
  memmove(v7, v6, v5);
  goto LABEL_14;
}

void sub_1B1E68094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if (a22 && a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a24);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x1C71C71C71C71C7) {
      unint64_t v15 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v15 = v13;
    }
    void v21[4] = result;
    if (v15) {
      __int32 v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)result, v15);
    }
    else {
      __int32 v16 = 0;
    }
    uint64_t v17 = &v16[72 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[72 * v15];
    long long v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v17 = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v19 = *(long long *)((char *)a2 + 24);
    *((void *)v17 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v17 + 24) = v19;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v20 = a2[3];
    *((void *)v17 + 8) = *((void *)a2 + 8);
    *((_OWORD *)v17 + 3) = v20;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    _DWORD v21[2] = v17 + 72;
    std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__swap_out_circular_buffer(a1, v21);
    uint64_t v11 = a1[1];
    double result = std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer(v21);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v10 = a2[3];
    *(void *)(v7 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(v7 + 48) = v10;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    uint64_t v11 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v11;
  return result;
}

void sub_1B1E68298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::pair<std::string,std::string>,std::string>::pair[abi:ne180100]<std::pair<std::string,std::string> const&,std::string&,0>(std::string *a1, long long *a2, long long *a3)
{
  unint64_t v5 = std::pair<std::string,std::string>::pair[abi:ne180100](a1, a2) + 2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1B1E68300(_Unwind_Exception *a1)
{
  std::pair<std::string,std::string>::~pair(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t std::__tree<std::string_view>::__count_unique<std::string_view>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if ((std::less<std::string_view>::operator()[abi:ne180100](v4, a2, (uint64_t)(v2 + 4)) & 1) == 0)
      {
        if (!std::less<std::string_view>::operator()[abi:ne180100](v4, (uint64_t)(v2 + 4), a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view const&>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  long long v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    long long v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v7 = (std::string *)(v6 + 4);
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    int32x2_t v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1E685E8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 72);
      *(void *)(v9 - 56) = *(void *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 72) = 0;
      long long v11 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v11;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v12 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 72;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((void *)&v17 + 1) = v9;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

char *quasar::PronTypeToString(unsigned int a1)
{
  if (a1 >= 8)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "PronTypeToString unexpected type");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return off_1E5FFEB78[a1];
}

uint64_t quasar::StringToPronType(uint64_t *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v2 = a1;
    switch(*((unsigned char *)a1 + 23))
    {
      case 3:
        if (*(_WORD *)a1 != 12871 || *((unsigned char *)a1 + 2) != 80) {
          goto LABEL_57;
        }
        return 1;
      case 4:
        if (*(_DWORD *)a1 == 1701736270) {
          return 0;
        }
        goto LABEL_57;
      case 8:
        goto LABEL_55;
      case 9:
        if (*a1 == 0x5732505F50573247 && *((unsigned char *)a1 + 8) == 80) {
          return 2;
        }
        goto LABEL_54;
      case 0xA:
        if (*a1 == 0x68744F5F50573247 && *((_WORD *)a1 + 4) == 29285) {
          return 3;
        }
LABEL_54:
        if (*((unsigned char *)a1 + 23) != 8) {
          goto LABEL_57;
        }
LABEL_55:
        if (*a1 == 0x4D50535F50573247) {
          return 4;
        }
        goto LABEL_57;
      case 0xE:
        goto LABEL_35;
      default:
        goto LABEL_57;
    }
  }
  uint64_t v4 = a1[1];
  if (v4 == 3)
  {
    if (*(_WORD *)*a1 == 12871 && *(unsigned char *)(*a1 + 2) == 80) {
      return 1;
    }
    uint64_t v4 = a1[1];
  }
  else if (v4 == 4 && *(_DWORD *)*a1 == 1701736270)
  {
    return 0;
  }
  if (v4 == 9)
  {
    if (*(void *)*a1 == 0x5732505F50573247 && *(unsigned char *)(*a1 + 8) == 80) {
      return 2;
    }
    uint64_t v4 = a1[1];
  }
  if (v4 == 10)
  {
    if (*(void *)*a1 == 0x68744F5F50573247 && *(_WORD *)(*a1 + 8) == 29285) {
      return 3;
    }
    uint64_t v4 = a1[1];
  }
  if (v4 == 8)
  {
    if (*(void *)*a1 == 0x4D50535F50573247) {
      return 4;
    }
    uint64_t v4 = a1[1];
  }
  if (v4 != 14) {
    goto LABEL_57;
  }
  uint64_t v2 = (uint64_t *)*a1;
LABEL_35:
  uint64_t v8 = *v2;
  uint64_t v9 = *(uint64_t *)((char *)v2 + 6);
  if (v8 == 0x7478455F50573247 && v9 == 0x5057325061727478) {
    return 5;
  }
LABEL_57:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "G2EMB")) {
    return 6;
  }
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "G2EMB_INT8"))
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "StringToPronType unexpected string");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
  }
  return 7;
}

BOOL quasar::isPronTypePhoneme(int a1)
{
  if (!a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "type != PronType::kNone");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return a1 == 1;
}

BOOL quasar::isPronTypeWordpiece(int a1)
{
  if (!a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "type != PronType::kNone");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  BOOL v2 = !quasar::isPronTypePhoneme(a1);
  return (a1 & 0xFFFFFFFE) != 6 && v2;
}

BOOL quasar::isPronTypeEmbedding(int a1)
{
  return (a1 & 0xFFFFFFFE) == 6;
}

const char *quasar::PronTypeToSeparator(int a1)
{
  if (quasar::isPronTypePhoneme(a1)) {
    return ".";
  }
  if (quasar::isPronTypeWordpiece(a1)) {
    return " ";
  }
  if ((a1 & 0xFFFFFFFE) != 6)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "PronTypeToSeparator unexpected type");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  return "";
}

BOOL quasar::pronTypeMatchesPronRequest(int a1, int a2)
{
  uint64_t v2 = 1;
  switch(a2)
  {
    case 0:
      return quasar::isPronTypePhoneme(a1);
    case 1:
      return quasar::isPronTypeWordpiece(a1);
    case 2:
      return (a1 & 0xFFFFFFFE) == 6;
    case 3:
      return v2;
    default:
      memset(v4, 0, sizeof(v4));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Unexpected PronRequest");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  long long v10 = (int *)result;
LABEL_2:
  long long v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    long long v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 2;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8), *(void *)(*(void *)a3 + 8 + 16 * *v11 + 8));
          if ((result & 0x80000000) != 0)
          {
            int v22 = *v11;
            *long long v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11, v11 + 1, (int *)a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11, v11 + 1, v11 + 2, (int *)a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, (int *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (int *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *,unsigned int *>((unsigned int *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    long long v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11, &v11[v15 >> 1], (int *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11 + 1, v17 - 1, (int *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11 + 2, &v11[v16 + 1], (int *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      int v18 = *v11;
      *long long v11 = *v17;
      *long long v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(&v11[v15 >> 1], v11, (int *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * *(v11 - 1) + 8), *(void *)(*(void *)a3 + 8 + 16 * *v11 + 8)) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<char const*,unsigned int> &>((unsigned int *)v11, a2, a3);
      long long v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    long long v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<char const*,unsigned int> &>(v11, (int *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11, v19, a3);
    long long v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v19 + 1, (int *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (unsigned int *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *,false>(v10, v19, a3, -v13, a5 & 1);
      long long v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    uint64_t v4 = (_DWORD *)result;
    char v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (unsigned int *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v9 + 8), *(void *)(*(void *)a3 + 8 + 16 * v10 + 8));
        if ((result & 0x80000000) != 0)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v12 + 4) = *(_DWORD *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v11 + 8), *(void *)(*(void *)a3 + 8 + 16 * *(unsigned int *)((char *)v4 + v12 - 4) + 8));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              uint64_t v13 = (_DWORD *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    uint64_t v4 = (unsigned int *)result;
    for (uint64_t i = (unsigned int *)(result + 4); v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v4 = i;
      uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v7 + 8), *(void *)(*(void *)a3 + 8 + 16 * v8 + 8));
      if ((result & 0x80000000) != 0)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          int v12 = *--v10;
          *uint64_t v11 = v12;
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v9 + 8), *(void *)(*(void *)a3 + 8 + 16 * *(v11 - 2) + 8));
        }
        while ((result & 0x80000000) != 0);
        *uint64_t v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int v8 = (*(uint64_t (**)(void, void))(a4 + 16))(*(void *)(*(void *)a4 + 8 + 16 * *a2 + 8), *(void *)(*(void *)a4 + 8 + 16 * *a1 + 8));
  int v9 = (*(uint64_t (**)(void, void))(a4 + 16))(*(void *)(*(void *)a4 + 8 + 16 * *a3 + 8), *(void *)(*(void *)a4 + 8 + 16 * *a2 + 8));
  if (v8 < 0)
  {
    uint64_t v11 = *a1;
    if (v9 < 0)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      if (((*(uint64_t (**)(void, void))(a4 + 16))(*(void *)(*(void *)a4 + 8 + 16 * *a3 + 8), *(void *)(*(void *)a4 + 8 + 16 * v11 + 8)) & 0x80000000) != 0)
      {
        int v12 = *a2;
        *a2 = *a3;
        *a3 = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v9 & 0x80000000) == 0) {
      return 0;
    }
    int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((*(uint64_t (**)(void, void))(a4 + 16))(*(void *)(*(void *)a4 + 8 + 16 * *a2 + 8), *(void *)(*(void *)a4 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
    {
      int v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<char const*,unsigned int> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  if (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v6 + 8), *(void *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8)) & 0x80000000) != 0)
  {
    int v8 = a1;
    do
    {
      unsigned int v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v6 + 8), *(void *)(*(void *)a3 + 8 + 16 * v9 + 8)) & 0x80000000) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 1;
    do
    {
      int v8 = v7;
      if (v7 >= v4) {
        break;
      }
      ++v7;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v6 + 8), *(void *)(*(void *)a3 + 8 + 16 * *v8 + 8)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      unsigned int v10 = *--v4;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v6 + 8), *(void *)(*(void *)a3 + 8 + 16 * v10 + 8)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    unsigned int v11 = *v8;
    unsigned int *v8 = *v4;
    *uint64_t v4 = v11;
    do
    {
      unsigned int v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v6 + 8), *(void *)(*(void *)a3 + 8 + 16 * v12 + 8)) & 0x80000000) == 0);
    do
      unsigned int v13 = *--v4;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v6 + 8), *(void *)(*(void *)a3 + 8 + 16 * v13 + 8)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1) {
    *a1 = *(v8 - 1);
  }
  *(v8 - 1) = v6;
  return v8;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<char const*,unsigned int> &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    int v8 = (*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * a1[++v6] + 8), *(void *)(*(void *)a3 + 8 + 16 * v7 + 8));
  while (v8 < 0);
  unsigned int v9 = &a1[v6];
  unsigned int v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      unsigned int v12 = *--a2;
    }
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v12 + 8), *(void *)(*(void *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) == 0);
  }
  else
  {
    do
      unsigned int v11 = *--a2;
    while (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v11 + 8), *(void *)(*(void *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) == 0);
  }
  if (v9 < a2)
  {
    unsigned int v13 = &a1[v6];
    int v14 = a2;
    do
    {
      int v15 = *v13;
      *unsigned int v13 = *v14;
      *int v14 = v15;
      do
      {
        unsigned int v16 = v13[1];
        ++v13;
      }
      while (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v16 + 8), *(void *)(*(void *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) != 0);
      do
        unsigned int v17 = *--v14;
      while (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v17 + 8), *(void *)(*(void *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) == 0);
    }
    while (v13 < v14);
    unsigned int v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *unsigned int v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8), *(void *)(*(void *)a3 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
      {
        int v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * *v10 + 8), *(void *)(*(void *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) != 0)
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8) {
          break;
        }
        int v15 = (*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v13 + 8), *(void *)(*(void *)a3 + 8 + 16 * *(unsigned int *)((char *)a1 + v14 + 4) + 8));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          unsigned int v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      int *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == (unsigned int *)a2;
      }
    }
    unsigned int v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a2, a3, a5);
  uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(void *)(*(void *)a5 + 8 + 16 * *a4 + 8), *(void *)(*(void *)a5 + 8 + 16 * *a3 + 8));
  if ((result & 0x80000000) != 0)
  {
    int v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(void *)(*(void *)a5 + 8 + 16 * *a3 + 8), *(void *)(*(void *)a5 + 8 + 16 * *a2 + 8));
    if ((result & 0x80000000) != 0)
    {
      int v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = (*(uint64_t (**)(void, void))(a5 + 16))(*(void *)(*(void *)a5 + 8 + 16 * *a2 + 8), *(void *)(*(void *)a5 + 8 + 16 * *a1 + 8));
      if ((result & 0x80000000) != 0)
      {
        int v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a2, a3, a4, a6);
  uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(void *)(*(void *)a6 + 8 + 16 * *a5 + 8), *(void *)(*(void *)a6 + 8 + 16 * *a4 + 8));
  if ((result & 0x80000000) != 0)
  {
    int v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(void *)(*(void *)a6 + 8 + 16 * *a4 + 8), *(void *)(*(void *)a6 + 8 + 16 * *a3 + 8));
    if ((result & 0x80000000) != 0)
    {
      int v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(void *)(*(void *)a6 + 8 + 16 * *a3 + 8), *(void *)(*(void *)a6 + 8 + 16 * *a2 + 8));
      if ((result & 0x80000000) != 0)
      {
        int v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = (*(uint64_t (**)(void, void))(a6 + 16))(*(void *)(*(void *)a6 + 8 + 16 * *a2 + 8), *(void *)(*(void *)a6 + 8 + 16 * *a1 + 8));
        if ((result & 0x80000000) != 0)
        {
          int v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        if (((*(uint64_t (**)(void, void))(a4 + 16))(*(void *)(*(void *)a4 + 8 + 16 * *v14 + 8), *(void *)(*(void *)a4 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
        {
          unsigned int v15 = *v14;
          *int v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      unsigned int v17 = a2 - 1;
      do
      {
        unsigned int v18 = *a1;
        long long v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a4, v16);
        if (v17 == v19)
        {
          *long long v19 = v18;
        }
        else
        {
          *long long v19 = *v17;
          *unsigned int v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 1;
      uint64_t v11 = v10 + 1;
      int v12 = (unsigned int *)(result + 4 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3
        && (*(int (**)(void, void))(a2 + 16))(*(void *)(*(void *)a2 + 8 + 16 * *v12 + 8), *(void *)(*(void *)a2 + 8 + 16 * v12[1] + 8)) < 0)
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = (*(uint64_t (**)(void, void))(a2 + 16))(*(void *)(*(void *)a2 + 8 + 16 * *v12 + 8), *(void *)(*(void *)a2 + 8 + 16 * *v5 + 8));
      if ((result & 0x80000000) == 0)
      {
        uint64_t v14 = *v5;
        do
        {
          unsigned int v15 = v12;
          *char v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          int v12 = (unsigned int *)(v6 + 4 * v16);
          if (2 * v11 + 2 < a3
            && (*(int (**)(void, void))(a2 + 16))(*(void *)(*(void *)a2 + 8 + 16 * *v12 + 8), *(void *)(*(void *)a2 + 8 + 16 * v12[1] + 8)) < 0)
          {
            ++v12;
            uint64_t v16 = 2 * v11 + 2;
          }
          uint64_t result = (*(uint64_t (**)(void, void))(a2 + 16))(*(void *)(*(void *)a2 + 8 + 16 * *v12 + 8), *(void *)(*(void *)a2 + 8 + 16 * v14 + 8));
          char v5 = v15;
          uint64_t v11 = v16;
        }
        while ((result & 0x80000000) == 0);
        *unsigned int v15 = v14;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*(int (**)(void, void))(a2 + 16))(*(void *)(*(void *)a2 + 8 + 16 * *v9 + 8), *(void *)(*(void *)a2 + 8 + 16 * a1[v6 + 2] + 8)) < 0)
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (_DWORD *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (_DWORD *)(a2 - 4);
    uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * *v8 + 8), *(void *)(*(void *)a3 + 8 + 16 * *(unsigned int *)(a2 - 4) + 8));
    if ((result & 0x80000000) != 0)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        _DWORD *v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (_DWORD *)(v6 + 4 * v7);
        uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * *v8 + 8), *(void *)(*(void *)a3 + 8 + 16 * v10 + 8));
        uint64_t v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

void sub_1B1E6A1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E6A27C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E6A2EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E6A3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v19 = v18;
  MEMORY[0x1B3EA8670](v19, 0x20C40960023A9);
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B1E6A688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B1E6A788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E6A988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B1E6AABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E6ADA0(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *__pa, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__split_buffer<std::wstring> *a21,uint64_t a22)
{
  __pa = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

void **std::unique_ptr<quasar::Munger>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::Munger::~Munger(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t quasar::ExhaustiveEnumerator::ExhaustiveEnumerator(uint64_t a1, long long *a2, quasar::PTree *a3)
{
  char v5 = quasar::NameEnumerator::NameEnumerator((void *)a1, a2);
  *char v5 = &unk_1F0A54F18;
  void v5[4] = 0x138800000007;
  v5[5] = 0;
  v5[6] = 0;
  v5[7] = 0;
  uint64_t v6 = quasar::PTree::begin(a3);
  uint64_t v24 = quasar::PTree::end(a3);
  if (v6 != v24)
  {
    while (*(char *)(v6 + 23) < 0)
    {
      uint64_t v11 = *(void *)(v6 + 8);
      if (v11 == 19)
      {
        BOOL v12 = **(void **)v6 == 0x6C2D657361726870 && *(void *)(*(void *)v6 + 8) == 0x696C2D6874676E65;
        if (v12 && *(void *)(*(void *)v6 + 11) == 0x74696D696C2D6874) {
          goto LABEL_47;
        }
      }
      if (v11 == 20)
      {
        if (**(void **)v6 == 0x2D6D756E2D78616DLL
          && *(void *)(*(void *)v6 + 8) == 0x746172656D756E65
          && *(_DWORD *)(*(void *)v6 + 16) == 1936617321)
        {
          goto LABEL_48;
        }
        uint64_t v11 = *(void *)(v6 + 8);
      }
      if (v11 == 13)
      {
        uint64_t v8 = *(uint64_t **)v6;
LABEL_33:
        uint64_t v16 = *v8;
        uint64_t v17 = *(uint64_t *)((char *)v8 + 5);
        if (v16 == 0x757165732D676174 && v17 == 0x7365636E65757165)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "tag-sequences");
          quasar::PTree::getChild((uint64_t)a3, (uint64_t)&__p);
        }
      }
LABEL_49:
      v6 += 88;
      if (v6 == v24) {
        return a1;
      }
    }
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = (uint64_t *)v6;
    if (v7 == 13) {
      goto LABEL_33;
    }
    if (v7 != 19)
    {
      if (v7 != 20) {
        goto LABEL_49;
      }
      BOOL v9 = *(void *)v6 == 0x2D6D756E2D78616DLL && *(void *)(v6 + 8) == 0x746172656D756E65;
      if (!v9 || *(_DWORD *)(v6 + 16) != 1936617321) {
        goto LABEL_49;
      }
LABEL_48:
      uint64_t String = (const std::string *)quasar::PTree::getString((quasar::PTree *)(v6 + 24));
      *(_DWORD *)(a1 + 36) = std::stoi(String, 0, 10);
      goto LABEL_49;
    }
    if (*(void *)v6 != 0x6C2D657361726870
      || *(void *)(v6 + 8) != 0x696C2D6874676E65
      || *(void *)(v6 + 11) != 0x74696D696C2D6874)
    {
      goto LABEL_49;
    }
LABEL_47:
    BOOL v21 = (const std::string *)quasar::PTree::getString((quasar::PTree *)(v6 + 24));
    *(_DWORD *)(a1 + 32) = std::stoi(v21, 0, 10);
    goto LABEL_49;
  }
  return a1;
}

void sub_1B1E6B340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  quasar::NameEnumerator::~NameEnumerator(v25);
  _Unwind_Resume(a1);
}

void *quasar::NameEnumerator::NameEnumerator(void *a1, long long *a2)
{
  *a1 = &unk_1F0A52878;
  long long v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void quasar::ExhaustiveEnumerator::addExhaustiveEnumerations(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4 && *(void *)(a3 + 16) <= (unint64_t)*(int *)(a1 + 36))
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v3) >> 4) <= *(int *)(a1 + 32))
    {
      unint64_t v9 = 0;
      memset(v58, 0, sizeof(v58));
      do
      {
        memset(&__v, 0, 24);
        uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__v.__end_, 1uLL);
        std::__split_buffer<std::string>::pointer first = __v.__first_;
        std::__split_buffer<std::string>::pointer begin = __v.__begin_;
        *(_DWORD *)uint64_t v11 = v9;
        uint64_t v14 = (std::string *)(v11 + 4);
        unsigned int v15 = (std::string *)v11;
        while (begin != first)
        {
          int v16 = HIDWORD(begin[-1].__r_.__value_.__r.__words[2]);
          std::__split_buffer<std::string>::pointer begin = (std::__split_buffer<std::string>::pointer)((char *)begin - 4);
          HIDWORD(v15[-1].__r_.__value_.__r.__words[2]) = v16;
          unsigned int v15 = (std::string *)((char *)v15 - 4);
        }
        __v.__first_ = v15;
        __v.__begin_ = (std::__split_buffer<std::string>::pointer)(v11 + 4);
        __v.__end_ = (std::__split_buffer<std::string>::pointer)&v11[4 * v10];
        if (first) {
          operator delete(first);
        }
        __v.__begin_ = v14;
        std::deque<std::vector<int>>::push_back(v58, (uint64_t)&__v);
        if (__v.__first_)
        {
          __v.__begin_ = __v.__first_;
          operator delete(__v.__first_);
        }
        ++v9;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 4) > v9);
      if (*(void *)&v58[40])
      {
        uint64_t v55 = (uint64_t **)a3;
        do
        {
          unint64_t v17 = *(void *)(*(void *)&v58[8] + 8 * (*(void *)&v58[32] / 0xAAuLL))
              + 24 * (*(void *)&v58[32] % 0xAAuLL);
          memset(&v59, 0, sizeof(v59));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v59, *(const void **)v17, *(void *)(v17 + 8), (uint64_t)(*(void *)(v17 + 8) - *(void *)v17) >> 2);
          memset(&v57, 0, sizeof(v57));
          std::to_string(&v56, *(_DWORD *)(*a2 + 48));
          std::vector<std::string>::pointer end = v57.__end_;
          if (v57.__end_ >= v57.__end_cap_.__value_)
          {
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_ - (char *)v57.__begin_) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 3) > v21) {
              unint64_t v21 = 0x5555555555555556 * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v22 = v21;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v57.__end_cap_;
            if (v22) {
              unint64_t v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v57.__end_cap_, v22);
            }
            else {
              unint64_t v23 = 0;
            }
            uint64_t v24 = v23 + v20;
            __v.__first_ = v23;
            __v.__begin_ = v24;
            __v.__end_cap_.__value_ = &v23[v22];
            long long v25 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
            v24->__r_.__value_.__r.__words[2] = v56.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
            memset(&v56, 0, sizeof(v56));
            __v.__end_ = v24 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v57, &__v);
            long long v26 = v57.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
            v57.__end_ = v26;
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v56.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v19 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
            v57.__end_->__r_.__value_.__r.__words[2] = v56.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v19;
            v57.__end_ = end + 1;
          }
          std::string::size_type size = v59.__r_.__value_.__l.__size_;
          uint64_t v28 = (int *)v59.__r_.__value_.__r.__words[0];
          if (v59.__r_.__value_.__r.__words[0] != v59.__r_.__value_.__l.__size_)
          {
            uint64_t v29 = v57.__end_;
            do
            {
              uint64_t v30 = *a2 + 80 * *v28;
              if (v29 >= v57.__end_cap_.__value_)
              {
                uint64_t v29 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v57, (long long *)v30);
              }
              else
              {
                if (*(char *)(v30 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *(void *)(v30 + 8));
                }
                else
                {
                  long long v31 = *(_OWORD *)v30;
                  v29->__r_.__value_.__r.__words[2] = *(void *)(v30 + 16);
                  *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
                }
                ++v29;
              }
              v57.__end_ = v29;
              ++v28;
            }
            while (v28 != (int *)size);
          }
          std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(v55, &v57, (long long **)&v57);
          unint64_t v32 = *(int *)(v59.__r_.__value_.__l.__size_ - 4);
          while (-1 - 0x3333333333333333 * ((uint64_t)(a2[1] - *a2) >> 4) > v32)
          {
            memset(&__v, 0, 24);
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__v, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_, (uint64_t)(v59.__r_.__value_.__l.__size_ - v59.__r_.__value_.__r.__words[0]) >> 2);
            ++v32;
            std::__split_buffer<std::string>::pointer v33 = __v.__begin_;
            if (__v.__begin_ >= __v.__end_)
            {
              std::__split_buffer<std::string>::pointer v35 = __v.__first_;
              int64_t v36 = ((char *)__v.__begin_ - (char *)__v.__first_) >> 2;
              unint64_t v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              int64_t v38 = (char *)__v.__end_ - (char *)__v.__first_;
              if (((char *)__v.__end_ - (char *)__v.__first_) >> 1 > v37) {
                unint64_t v37 = v38 >> 1;
              }
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v39 = v37;
              }
              if (v39)
              {
                long long v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__v.__end_, v39);
                std::__split_buffer<std::string>::pointer v35 = __v.__first_;
                std::__split_buffer<std::string>::pointer v33 = __v.__begin_;
              }
              else
              {
                long long v40 = 0;
              }
              long long v41 = (std::string *)&v40[4 * v36];
              LODWORD(v41->__r_.__value_.__l.__data_) = v32;
              long long v34 = (std::string *)((char *)v41->__r_.__value_.__r.__words + 4);
              while (v33 != v35)
              {
                int v42 = HIDWORD(v33[-1].__r_.__value_.__r.__words[2]);
                std::__split_buffer<std::string>::pointer v33 = (std::__split_buffer<std::string>::pointer)((char *)v33 - 4);
                HIDWORD(v41[-1].__r_.__value_.__r.__words[2]) = v42;
                long long v41 = (std::string *)((char *)v41 - 4);
              }
              __v.__first_ = v41;
              __v.__begin_ = v34;
              __v.__end_ = (std::__split_buffer<std::string>::pointer)&v40[4 * v39];
              if (v35) {
                operator delete(v35);
              }
            }
            else
            {
              LODWORD(__v.__begin_->__r_.__value_.__l.__data_) = v32;
              long long v34 = (std::string *)((char *)v33->__r_.__value_.__r.__words + 4);
            }
            __v.__begin_ = v34;
            std::deque<std::vector<int>>::push_back(v58, (uint64_t)&__v);
            if (__v.__first_)
            {
              __v.__begin_ = __v.__first_;
              operator delete(__v.__first_);
            }
          }
          std::deque<std::vector<float>>::pop_front(v58);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)&v57;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          if (v59.__r_.__value_.__r.__words[0])
          {
            v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0];
            operator delete(v59.__r_.__value_.__l.__data_);
          }
        }
        while (*(void *)&v58[40]);
      }
      std::deque<std::vector<int>>::~deque[abi:ne180100](v58);
    }
    else
    {
      memset(&__v, 0, 24);
      std::to_string(&v59, *(_DWORD *)(v3 + 48));
      std::__split_buffer<std::string>::pointer v7 = __v.__begin_;
      if (__v.__begin_ >= __v.__end_)
      {
        unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)__v.__begin_ - (char *)__v.__first_) >> 3);
        unint64_t v44 = v43 + 1;
        if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)__v.__end_ - (char *)__v.__first_) >> 3) > v44) {
          unint64_t v44 = 0x5555555555555556 * (((char *)__v.__end_ - (char *)__v.__first_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)__v.__end_ - (char *)__v.__first_) >> 3) >= 0x555555555555555) {
          unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v45 = v44;
        }
        *(void *)&v58[32] = &__v.__end_;
        if (v45) {
          long long v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&__v.__end_, v45);
        }
        else {
          long long v46 = 0;
        }
        long long v47 = &v46[24 * v43];
        *(void *)unint64_t v58 = v46;
        *(void *)&v58[8] = v47;
        *(void *)&v58[24] = &v46[24 * v45];
        long long v48 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
        *((void *)v47 + 2) = *((void *)&v59.__r_.__value_.__l + 2);
        *(_OWORD *)long long v47 = v48;
        memset(&v59, 0, sizeof(v59));
        *(void *)&v58[16] = v47 + 24;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&__v, (std::__split_buffer<std::string> *)v58);
        int v49 = __v.__begin_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)v58);
        __v.__begin_ = v49;
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v8 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
        __v.__begin_->__r_.__value_.__r.__words[2] = v59.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
        __v.__begin_ = v7 + 1;
      }
      uint64_t v50 = *a2;
      uint64_t v51 = a2[1];
      if (*a2 != v51)
      {
        std::__split_buffer<std::string>::pointer v52 = __v.__begin_;
        do
        {
          if (v52 >= __v.__end_)
          {
            uint64_t v54 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (long long *)v50);
          }
          else
          {
            if (*(char *)(v50 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)v50, *(void *)(v50 + 8));
            }
            else
            {
              long long v53 = *(_OWORD *)v50;
              v52->__r_.__value_.__r.__words[2] = *(void *)(v50 + 16);
              *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
            }
            uint64_t v54 = v52 + 1;
          }
          __v.__begin_ = v54;
          std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>((uint64_t **)a3, &__v, (long long **)&__v);
          std::__split_buffer<std::string>::pointer v52 = __v.__begin_ - 1;
          if (SHIBYTE(__v.__begin_[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v52->__r_.__value_.__l.__data_);
          }
          __v.__begin_ = v52;
          v50 += 80;
        }
        while (v50 != v51);
      }
      *(void *)unint64_t v58 = &__v;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
    }
  }
}

void sub_1B1E6BA90(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, char a9, uint64_t a10, void *a11, std::__split_buffer<std::wstring> *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__pa,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a17);
  if (a32 < 0) {
    operator delete(__pa);
  }
  __pa = (void *)(v32 - 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void quasar::ExhaustiveEnumerator::addEnumerations(uint64_t a1, long long **a2, uint64_t a3)
{
  if (*(void *)(a1 + 40) == *(void *)(a1 + 48))
  {
    std::__split_buffer<std::string>::pointer v7 = *(void (**)(void))(*(void *)a1 + 40);
    v7();
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    quasar::NameEnumerator::addSpecEnumerations(a1, (int **)(a1 + 40), a2, 1, (uint64_t *)&v9);
    char v5 = v9;
    for (uint64_t i = v10; v5 != i; v5 += 3)
    {
      memset(&v8, 0, sizeof(v8));
      std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(&v8, *v5, v5[1], 0xCCCCCCCCCCCCCCCDLL * (v5[1] - *v5));
      (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)a1 + 40))(a1, &v8, a3);
      BOOL v12 = &v8;
      std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
    }
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
    std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  }
}

void sub_1B1E6BCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void quasar::ExhaustiveEnumerator::~ExhaustiveEnumerator(void **this)
{
  *this = &unk_1F0A54F18;
  uint64_t v2 = this + 5;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::NameEnumerator::~NameEnumerator(this);
}

{
  void **v2;

  *this = &unk_1F0A54F18;
  uint64_t v2 = this + 5;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::NameEnumerator::~NameEnumerator(this);
  MEMORY[0x1B3EA8670]();
}

uint64_t quasar::ExhaustiveEnumerator::isCalculatedInQuasar(quasar::ExhaustiveEnumerator *this)
{
  return 1;
}

uint64_t *std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(uint64_t **a1, void *a2, long long **a3)
{
  char v5 = (uint64_t **)std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__find_equal<std::vector<std::string>>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::vector<std::string>>::__construct_node<std::vector<std::string> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__find_equal<std::vector<std::string>>(uint64_t a1, void *a2, void *a3)
{
  char v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        unint64_t v9 = v4 + 4;
        if (!quasar::NameEnumerator::EnumComparator::operator()(v7, a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v8;
        char v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!quasar::NameEnumerator::EnumComparator::operator()(v7, v9, a3)) {
        break;
      }
      char v5 = v8 + 1;
      uint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t quasar::NameEnumerator::EnumComparator::operator()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (long long *)a2[1];
  char v5 = (long long *)(*a2 + 24);
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v11, v5, v4, 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)v5) >> 3));
  uint64_t v6 = (long long *)a3[1];
  uint64_t v7 = (long long *)(*a3 + 24);
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v10, v7, v6, 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3));
  uint64_t v8 = std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((const void **)v11.__r_.__value_.__l.__data_, (const void **)v11.__r_.__value_.__l.__size_, (const void **)v10.__r_.__value_.__l.__data_, (const void **)v10.__r_.__value_.__l.__size_, (uint64_t)&v12);
  uint64_t v13 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  return v8;
}

void sub_1B1E6BFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  *(void *)(v12 - 24) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 24));
  a9 = (void **)&a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,std::vector<std::string>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,std::vector<std::string>>>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,std::vector<std::string>>>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<std::string>>>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<std::string>>>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<std::string>>>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<std::string>>>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = (void **)(v1 + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 32;
  }
}

void **std::__split_buffer<std::pair<int,std::vector<std::string>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<int,std::vector<std::string>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    uint64_t v4 = (void **)(i - 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

uint64_t std::deque<std::vector<int>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        std::string v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + 8) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 85;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 170;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    unsigned int v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t TCollation::setCollation(TCollation *this)
{
  uint64_t v3 = (char *)this + 16;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 4) = *((void *)v3 + 1);
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  uint64_t result = *((void *)this + 1);
  if (result) {
    uint64_t result = MEMORY[0x1B3EA8630](result, 0x1000C8052888210);
  }
  *((void *)this + 1) = 0;
  return result;
}

void TCollation::TCollation(TCollation *this)
{
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  TCollation::setCollation(this);
}

void TCollation::setCollation(TCollation *this, TInputStream *a2)
{
  TCollation::setCollation(this);
  if (TInputStream::verifyHeader((uint64_t)a2, "Collation", (uint64_t)&pCollationVersion, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "");
    TException::TException(v24, (long long *)&v21);
    v24[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
    if (v25 >= 0) {
      unint64_t v7 = (std::exception_vtbl *)&v24[1];
    }
    else {
      unint64_t v7 = v24[1].__vftable;
    }
    conditionalAssert((const char *)v7, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 172);
    TException::~TException(v24);
    if (SHIBYTE(v22) < 0) {
      operator delete(v21);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    TException::TException(exception, (long long *)v24);
    void *exception = &unk_1F0A33B90;
  }
  TFileObjectParser::TFileObjectParser((TFileObjectParser *)v24, a2);
  uint64_t v4 = v24[0].__vftable;
  unint64_t v21 = dword_1B257E4F0;
  long long v22 = xmmword_1B2563B40;
  uint64_t v23 = -1;
  if (TFileObject::verify((uint64_t)v24[0].__vftable, (uint64_t)&v21, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "");
    TException::TException(&v18, (long long *)v15);
    v18.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
    if (v20 >= 0) {
      unint64_t v9 = (const char *)&v19;
    }
    else {
      unint64_t v9 = (const char *)v19;
    }
    conditionalAssert(v9, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 182);
    TException::~TException(&v18);
    if (v16 < 0) {
      operator delete(v15[0].__vftable);
    }
    std::string v10 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v18, "");
    TException::TException(v10, (long long *)&v18);
    *std::string v10 = &unk_1F0A340F0;
  }
  uint64_t Attribute = TFileObject::getAttribute((uint64_t)v4, dword_1B257E4F0);
  uint64_t v6 = (const TFileObject *)Attribute;
  if (Attribute)
  {
    v18.__vftable = (std::exception_vtbl *)&unk_1B257E4E8;
    long long v19 = xmmword_1B257E4D0;
    uint64_t v20 = -1;
    if (!TFileObject::verify(Attribute, (uint64_t)&v18, 1uLL, 1)) {
      TCollation::initSerializedTable(this, v6);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v15, (long long *)__p);
    v15[0].__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
    if (v17 >= 0) {
      unint64_t v11 = (std::exception_vtbl *)&v15[1];
    }
    else {
      unint64_t v11 = v15[1].__vftable;
    }
    conditionalAssert((const char *)v11, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 190);
    TException::~TException(v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    unint64_t v12 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "");
    TException::TException(v12, (long long *)v15);
    *unint64_t v12 = &unk_1F0A340F0;
  }
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v24);
}

void sub_1B1E6C954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::exception a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_6:
      TFileObjectParser::~TFileObjectParser((TFileObjectParser *)(v37 - 112));
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

void TCollation::~TCollation(TCollation *this)
{
  TCollation::setCollation(this);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

void TCollation::initSerializedTable(TCollation *this, const TFileObject *a2)
{
  long long v22 = (__int32 *)v24;
  long long v23 = xmmword_1B25607E0;
  v24[1024] = 1;
  for (uint64_t i = *((void *)a2 + 3); i; uint64_t i = *(void *)(i + 16))
  {
    long long v19 = &unk_1B257E4E8;
    int64x2_t v20 = vdupq_n_s64(1uLL);
    uint64_t v21 = -1;
    if (TFileObject::verify(i, (uint64_t)&v19, 1uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v17, (long long *)__p);
      v17[0].__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
      if (v18 >= 0) {
        unint64_t v11 = (std::exception_vtbl *)&v17[1];
      }
      else {
        unint64_t v11 = v17[1].__vftable;
      }
      conditionalAssert((const char *)v11, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 104);
      TException::~TException(v17);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v17, "");
      TException::TException(exception, (long long *)v17);
      void *exception = &unk_1F0A340F0;
    }
    if (*(void *)this >= 0xFFFFuLL)
    {
      tknPrintf("Error: Invalid collation table. Should have %llu classes of characters/strings max.\n", v4, 0xFFFFLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v17, (long long *)__p);
      v17[0].__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
      if (v18 >= 0) {
        unint64_t v13 = (std::exception_vtbl *)&v17[1];
      }
      else {
        unint64_t v13 = v17[1].__vftable;
      }
      conditionalAssert((const char *)v13, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 110);
      TException::~TException(v17);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      char v14 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v17, "");
      TException::TException(v14, (long long *)v17);
      *char v14 = &unk_1F0A340F0;
    }
    for (int j = *(TFileObject **)(i + 24); j; int j = (TFileObject *)*((void *)j + 2))
    {
      if (TFileObject::verify(j, 0, 0))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v17, (long long *)__p);
        v17[0].__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
        if (v18 >= 0) {
          unint64_t v9 = (std::exception_vtbl *)&v17[1];
        }
        else {
          unint64_t v9 = v17[1].__vftable;
        }
        conditionalAssert((const char *)v9, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 117);
        TException::~TException(v17);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        std::string v10 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v17, "");
        TException::TException(v10, (long long *)v17);
        *std::string v10 = &unk_1F0A340F0;
      }
      uint64_t v6 = 0;
      unint64_t v7 = (int *)*((void *)j + 3);
      while (v7[v6++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), v7, v6 - 1);
      LODWORD(v17[0].__vftable) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), (int *)v17, 1uLL);
    }
    LODWORD(v17[0].__vftable) = 0;
    TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), (int *)v17, 1uLL);
    ++*(void *)this;
  }
  operator new[]();
}

void sub_1B1E6CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (LOBYTE(STACK[0x478]))
      {
        if (a24 != v26 && a24 != 0) {
          MEMORY[0x1B3EA8630]();
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void TCollation::initCharacterClasses(TCollation *this)
{
}

uint64_t sortCollationPair(const __int32 **a1, const __int32 **a2)
{
  return wcscmp(*a1, *a2) >> 31;
}

uint64_t TCollation::collateCharSlow(uint64_t a1, unsigned int *a2, unint64_t *a3)
{
  *a3 = 1;
  uint64_t result = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (WORD1(result)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    uint64_t result = *(unsigned int *)(v5 + 4 * result);
  }
  uint64_t v9 = a1 + 24;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(v9 + 8);
  uint64_t v10 = v8 - v7;
  if (v8 != v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    unint64_t v13 = 1;
    do
    {
      char v14 = *(int **)(v7 + 16 * v11);
      int v15 = *v14;
      if (*v14)
      {
        char v16 = v14 + 1;
        char v17 = (int *)a2;
        do
        {
          int v18 = *v17;
          if (!*v17) {
            break;
          }
          if (v15 != v18)
          {
            if (v15 > v18) {
              return result;
            }
            goto LABEL_20;
          }
          ++v17;
          int v19 = *v16++;
          int v15 = v19;
        }
        while (v19);
      }
      else
      {
        char v17 = (int *)a2;
      }
      unint64_t v20 = ((char *)v17 - (char *)a2) >> 2;
      if (v20 > v13)
      {
        *a3 = v20;
        uint64_t result = *(unsigned int *)(v7 + 16 * v11 + 8);
        unint64_t v13 = v20;
      }
LABEL_20:
      ++v11;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t TCollation::collprefixcmp(void *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  while (1)
  {
    int v8 = *a2++;
    int v7 = v8;
    if (!v8) {
      break;
    }
    unint64_t v16 = 1;
    uint64_t v9 = (unsigned int *)(a3 + 4 * v6);
    uint64_t v10 = *v9;
    BOOL v11 = a1[3] == a1[4] || v10 == 0;
    if (v11 || !v9[1])
    {
      uint64_t v13 = a1[2];
      if (WORD1(v10)) {
        BOOL v14 = 1;
      }
      else {
        BOOL v14 = v13 == 0;
      }
      if (!v14) {
        LODWORD(v10) = *(_DWORD *)(v13 + 4 * v10);
      }
      unint64_t v12 = 1;
    }
    else
    {
      LODWORD(v10) = TCollation::collateCharSlow((uint64_t)a1, v9, &v16);
      unint64_t v12 = v16;
    }
    v6 += v12;
    uint64_t result = (v7 - v10);
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t TCollation::collate(void *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (result)
  {
    uint64_t v6 = a2;
    uint64_t v7 = 0;
    do
    {
      unint64_t v10 = 0;
      if (a1[3] == a1[4] || !a2[1])
      {
        if (!WORD1(result))
        {
          uint64_t v9 = a1[2];
          if (v9) {
            LODWORD(result) = *(_DWORD *)(v9 + 4 * result);
          }
        }
        unint64_t v8 = 1;
      }
      else
      {
        LODWORD(result) = TCollation::collateCharSlow((uint64_t)a1, a2, &v10);
        unint64_t v8 = v10;
      }
      int v11 = result;
      TBuffer<wchar_t>::insert(a3, *(void *)(a3 + 16), &v11, 1uLL);
      v7 += v8;
      a2 = &v6[v7];
      uint64_t result = *a2;
    }
    while (result);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)(a2 - 2, (uint64_t *)v11);
          if (result)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)uint64_t v11 = *(a2 - 2);
            *(a2 - 2) = v22;
            LODWORD(v22) = *(_DWORD *)(v11 + 8);
            *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 2);
            *((_DWORD *)a2 - 2) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)v11, (uint64_t *)(v11 + 16), a2 - 2, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v11, v11 + 16, v11 + 32, (uint64_t)(a2 - 2), a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v11, v11 + 16, v11 + 32, v11 + 48, (uint64_t)(a2 - 2), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if ((uint64_t *)v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,std::pair<wchar_t const*,wchar_t>*>(v11, (uint64_t)a2, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t))a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = v11 + 16 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)v11, (uint64_t *)(v11 + 16 * (v15 >> 1)), a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)(v11 + 16), (uint64_t *)(v17 - 16), a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)(v11 + 32), (uint64_t *)(v11 + 16 + 16 * v16), a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)(v17 - 16), (uint64_t *)v17, (uint64_t *)(v11 + 16 + 16 * v16), a3);
      uint64_t v18 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v17;
      *(void *)unint64_t v17 = v18;
      LODWORD(v18) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v17 + 8);
      *(_DWORD *)(v17 + 8) = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)(v11 + 16 * (v15 >> 1)), (uint64_t *)v11, a2 - 2, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)((uint64_t *)(v11 - 16), (uint64_t *)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&)>((uint64_t *)v11, (unint64_t)a2, (uint64_t (**)(long long *, uint64_t *))a3);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    int v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&)>((uint64_t *)v11, (unint64_t)a2, (uint64_t (**)(uint64_t *, long long *))a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v11, v19, a3);
    uint64_t v11 = (uint64_t)(v19 + 2);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t)(v19 + 2), a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v19 + 2);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v11, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v11, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v16 = v3;
    uint64_t v17 = v4;
    uint64_t v6 = result;
    uint64_t v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (_OWORD *)result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          long long v15 = *v10;
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = v6 + v12;
            *(void *)(v13 + 16) = *(void *)(v6 + v12);
            *(_DWORD *)(v13 + 24) = *(_DWORD *)(v6 + v12 + 8);
            if (!v12) {
              break;
            }
            v12 -= 16;
            uint64_t result = (*a3)(&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v14 = v6 + v12 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v6;
LABEL_10:
          *(void *)uint64_t v14 = v15;
          *(_DWORD *)(v14 + 8) = DWORD2(v15);
        }
        uint64_t v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v13 = v3;
    uint64_t v14 = v4;
    uint64_t v6 = (_OWORD *)result;
    uint64_t v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      uint64_t v9 = result - 16;
      do
      {
        uint64_t v10 = v6;
        uint64_t v6 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          long long v12 = *v6;
          uint64_t v11 = v9;
          do
          {
            *(void *)(v11 + 32) = *(void *)(v11 + 16);
            *(_DWORD *)(v11 + 40) = *(_DWORD *)(v11 + 24);
            uint64_t result = (*a3)(&v12, v11);
            v11 -= 16;
          }
          while ((result & 1) != 0);
          *(void *)(v11 + 32) = v12;
          *(_DWORD *)(v11 + 40) = DWORD2(v12);
        }
        uint64_t v7 = v6 + 1;
        v9 += 16;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      uint64_t v11 = (int *)(a3 + 1);
      uint64_t result = 1;
      long long v12 = (int *)(a1 + 1);
LABEL_9:
      uint64_t v14 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    int v16 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v16;
    if ((*a4)(a3, a2))
    {
      uint64_t v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      uint64_t v11 = (int *)(a3 + 1);
      uint64_t result = 2;
      long long v12 = (int *)(a2 + 1);
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    uint64_t v14 = (int *)(a2 + 1);
    LODWORD(v13) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = v13;
    if ((*a4)(a2, a1))
    {
      uint64_t v15 = *a1;
      *a1 = *a2;
      long long v12 = (int *)(a1 + 1);
      *a2 = v15;
      uint64_t result = 2;
LABEL_10:
      int v18 = *v12;
      *long long v12 = *v14;
      *uint64_t v14 = v18;
      return result;
    }
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&)>(uint64_t *a1, unint64_t a2, uint64_t (**a3)(long long *, uint64_t *))
{
  unint64_t v4 = a2;
  long long v11 = *(_OWORD *)a1;
  if ((*a3)(&v11, (uint64_t *)(a2 - 16)))
  {
    uint64_t v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v11, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 2;
    do
    {
      uint64_t v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v11, v7);
      uint64_t v7 = v6 + 2;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 16;
    while (((*a3)(&v11, (uint64_t *)v4) & 1) != 0);
  }
  while ((unint64_t)v6 < v4)
  {
    uint64_t v9 = *v6;
    *uint64_t v6 = *(void *)v4;
    *(void *)unint64_t v4 = v9;
    LODWORD(v9) = *((_DWORD *)v6 + 2);
    *((_DWORD *)v6 + 2) = *(_DWORD *)(v4 + 8);
    *(_DWORD *)(v4 + 8) = v9;
    do
      v6 += 2;
    while (!(*a3)(&v11, v6));
    do
      v4 -= 16;
    while (((*a3)(&v11, (uint64_t *)v4) & 1) != 0);
  }
  if (v6 - 2 != a1)
  {
    *a1 = *(v6 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v6 - 2);
  }
  *(v6 - 2) = v11;
  *((_DWORD *)v6 - 2) = DWORD2(v11);
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&)>(uint64_t *a1, unint64_t a2, uint64_t (**a3)(uint64_t *, long long *))
{
  uint64_t v6 = 0;
  long long v12 = *(_OWORD *)a1;
  do
    v6 += 2;
  while (((*a3)(&a1[v6], &v12) & 1) != 0);
  unint64_t v7 = (unint64_t)&a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      a2 -= 16;
    }
    while (((*a3)((uint64_t *)a2, &v12) & 1) == 0);
  }
  else
  {
    do
      a2 -= 16;
    while (!(*a3)((uint64_t *)a2, &v12));
  }
  int v8 = (long long *)&a1[v6];
  if (v7 < a2)
  {
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = *(void *)v8;
      *(void *)int v8 = *(void *)v9;
      *(void *)unint64_t v9 = v10;
      LODWORD(v10) = *((_DWORD *)v8 + 2);
      *((_DWORD *)v8 + 2) = *(_DWORD *)(v9 + 8);
      *(_DWORD *)(v9 + 8) = v10;
      do
        ++v8;
      while (((*a3)((uint64_t *)v8, &v12) & 1) != 0);
      do
        v9 -= 16;
      while (!(*a3)((uint64_t *)v9, &v12));
    }
    while ((unint64_t)v8 < v9);
  }
  uint64_t result = (uint64_t *)(v8 - 1);
  if (v8 - 1 != (long long *)a1)
  {
    *a1 = *((void *)v8 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v8 - 2);
  }
  *((void *)v8 - 2) = v12;
  *((_DWORD *)v8 - 2) = DWORD2(v12);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, (uint64_t *)a1))
      {
        uint64_t v8 = *(void *)a1;
        *(void *)a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        LODWORD(v8) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)a1, (uint64_t *)(a1 + 16), a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2), a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 2), a3);
      return 1;
    default:
      unint64_t v9 = (uint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), a3);
      uint64_t v10 = (uint64_t *)(a1 + 48);
      if ((uint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v10, v9))
    {
      long long v16 = *(_OWORD *)v10;
      uint64_t v13 = v11;
      while (1)
      {
        uint64_t v14 = a1 + v13;
        *(void *)(v14 + 48) = *(void *)(a1 + v13 + 32);
        *(_DWORD *)(v14 + 56) = *(_DWORD *)(a1 + v13 + 40);
        if (v13 == -32) {
          break;
        }
        v13 -= 16;
        if (((*a3)((uint64_t *)&v16, (uint64_t *)(v14 + 16)) & 1) == 0)
        {
          uint64_t v15 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v15 = a1;
LABEL_12:
      *(void *)uint64_t v15 = v16;
      *(_DWORD *)(v15 + 8) = DWORD2(v16);
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    unint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3, a5);
  uint64_t result = (*a5)((uint64_t *)a4, (uint64_t *)a3);
  if (result)
  {
    uint64_t v11 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v11;
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v11;
    uint64_t result = (*a5)((uint64_t *)a3, (uint64_t *)a2);
    if (result)
    {
      uint64_t v12 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v12;
      LODWORD(v12) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v12;
      uint64_t result = (*a5)((uint64_t *)a2, (uint64_t *)a1);
      if (result)
      {
        uint64_t v13 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)((uint64_t *)a5, (uint64_t *)a4);
  if (result)
  {
    uint64_t v13 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v13;
    LODWORD(v13) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v13;
    uint64_t result = (*a6)((uint64_t *)a4, (uint64_t *)a3);
    if (result)
    {
      uint64_t v14 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v14;
      LODWORD(v14) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v14;
      uint64_t result = (*a6)((uint64_t *)a3, (uint64_t *)a2);
      if (result)
      {
        uint64_t v15 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v15;
        uint64_t result = (*a6)((uint64_t *)a2, (uint64_t *)a1);
        if (result)
        {
          uint64_t v16 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v16;
          LODWORD(v16) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v16;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if ((*a4)(v14, a1))
        {
          uint64_t v15 = *(void *)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          LODWORD(v15) = *(_DWORD *)(v14 + 8);
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a4, v9, (long long *)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      uint64_t v17 = a2 - 16;
      do
      {
        uint64_t v18 = *(void *)a1;
        int v19 = *(_DWORD *)(a1 + 8);
        uint64_t v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a4, v16);
        if (v17 == v20)
        {
          *(void *)uint64_t v20 = v18;
          *(_DWORD *)(v20 + 8) = v19;
        }
        else
        {
          *(void *)uint64_t v20 = *(void *)v17;
          *(_DWORD *)(v20 + 8) = *(_DWORD *)(v17 + 8);
          *(void *)uint64_t v17 = v18;
          *(_DWORD *)(v17 + 8) = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, v20 + 16, (uint64_t (**)(uint64_t, uint64_t))a4, (v20 + 16 - a1) >> 4);
        }
        v17 -= 16;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t result, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, long long *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    unint64_t v7 = a4;
    uint64_t v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v12 = ((uint64_t)a4 - result) >> 3;
      uint64_t v13 = v12 + 1;
      uint64_t v14 = result + 16 * (v12 + 1);
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 16))
      {
        v14 += 16;
        uint64_t v13 = v15;
      }
      uint64_t result = ((uint64_t (*)(uint64_t, long long *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        long long v19 = *v7;
        do
        {
          uint64_t v16 = v14;
          *(void *)unint64_t v7 = *(void *)v14;
          *((_DWORD *)v7 + 2) = *(_DWORD *)(v14 + 8);
          if (v9 < v13) {
            break;
          }
          uint64_t v17 = (2 * v13) | 1;
          uint64_t v14 = v8 + 16 * v17;
          uint64_t v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 16))
            {
              v14 += 16;
              uint64_t v17 = v18;
            }
          }
          uint64_t result = ((uint64_t (*)(uint64_t, long long *))*a2)(v14, &v19);
          unint64_t v7 = (long long *)v16;
          uint64_t v13 = v17;
        }
        while (!result);
        *(void *)uint64_t v16 = v19;
        *(_DWORD *)(v16 + 8) = DWORD2(v19);
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 16 * v6 + 16;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 16 * v6 + 16, a1 + 16 * v6 + 32))
    {
      v9 += 16;
      uint64_t v10 = v11;
    }
    *(void *)a1 = *(void *)v9;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v9 + 8);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    uint64_t v8 = result;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = result + 16 * (v6 >> 1);
    uint64_t v11 = (long long *)(a2 - 16);
    uint64_t result = (*a3)(v10, a2 - 16);
    if (result)
    {
      long long v13 = *v11;
      do
      {
        uint64_t v12 = v10;
        *(void *)uint64_t v11 = *(void *)v10;
        *((_DWORD *)v11 + 2) = *(_DWORD *)(v10 + 8);
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = v8 + 16 * v9;
        uint64_t result = (*a3)(v10, (uint64_t)&v13);
        uint64_t v11 = (long long *)v12;
      }
      while ((result & 1) != 0);
      *(void *)uint64_t v12 = v13;
      *(_DWORD *)(v12 + 8) = DWORD2(v13);
    }
  }
  return result;
}

uint64_t **kaldi::nnet1::StdVectorRandomizer<std::vector<std::pair<int,float>>>::AddData(uint64_t a1, uint64_t ***a2)
{
  if (*(void *)(a1 + 8) == *(void *)a1) {
    std::vector<std::vector<std::pair<int,float>>>::resize((uint64_t *)a1, *(int *)(a1 + 56));
  }
  int v4 = *(_DWORD *)(a1 + 48);
  int v5 = *(_DWORD *)(a1 + 52);
  if (v4 >= 1)
  {
    v5 -= v4;
    if (v5 >= 1) {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *>((uint64_t)&v12, (uint64_t **)(*(void *)a1 + 24 * v4), (uint64_t **)(*(void *)a1 + 24 * v4 + 24 * v5), *(uint64_t ***)a1);
    }
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 52) = v5;
  }
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 - *a2) + v5;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) >= v9)
  {
    int v10 = v5;
  }
  else
  {
    std::vector<std::vector<std::pair<int,float>>>::resize((uint64_t *)a1, v9 + 1000);
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    uint64_t v6 = *(void *)a1;
    int v10 = *(_DWORD *)(a1 + 52);
  }
  uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *>((uint64_t)&v13, v7, v8, (uint64_t **)(v6 + 24 * v10));
  *(_DWORD *)(a1 + 52) -= 1431655765 * ((unint64_t)((char *)a2[1] - (char *)*a2) >> 3);
  return result;
}

uint64_t kaldi::nnet1::StdVectorRandomizer<std::vector<std::pair<int,float>>>::Next(uint64_t result)
{
  *(_DWORD *)(result + 48) += *(_DWORD *)(result + 72);
  return result;
}

uint64_t kaldi::nnet1::StdVectorRandomizer<std::vector<std::pair<int,float>>>::Value(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  std::vector<std::vector<std::pair<int,float>>>::resize((uint64_t *)(a1 + 24), *(int *)(a1 + 72));
  uint64_t v3 = (uint64_t **)(*(void *)a1 + 24 * *(int *)(a1 + 48));
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *>((uint64_t)&v5, v3, &v3[3 * *(int *)(a1 + 72)], *(uint64_t ***)(a1 + 24));
  return v2;
}

uint64_t kaldi::nnet1::MatrixRandomizer::Next(uint64_t this)
{
  *(_DWORD *)(this + 144) += *(_DWORD *)(this + 172);
  return this;
}

uint64_t kaldi::nnet1::MatrixRandomizer::Value(kaldi::nnet1::MatrixRandomizer *this, unsigned int a2, void *a3)
{
  uint64_t v6 = *((void *)this + 12) + 40 * a2;
  if (&v14 != (void **)v6)
  {
    int v7 = *((_DWORD *)this + 43);
    int v8 = *((_DWORD *)this + 4);
    int v9 = *((_DWORD *)this + 6);
    uint64_t v10 = *((void *)this + 4);
    int v11 = v9 * *((_DWORD *)this + 36);
    int v12 = *((_DWORD *)this + 7) - v11;
    *(void *)(v6 + 8) = *((void *)this + 1) + 4 * v11;
    *(_DWORD *)(v6 + 16) = v8;
    *(_DWORD *)(v6 + 20) = v7;
    *(_DWORD *)(v6 + 24) = v9;
    *(_DWORD *)(v6 + 28) = v12;
    *(void *)(v6 + 32) = v10;
  }
  uint64_t v14 = &unk_1F0A472A0;
  long long v15 = 0u;
  long long v16 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v14);
  uint64_t result = *((void *)this + 12) + 40 * a2;
  *(void *)(result + 32) = a3;
  return result;
}

void *kaldi::nnet1::VectorRandomizer::AddData(void **a1, uint64_t a2)
{
  uint64_t v4 = *((unsigned int *)a1 + 2);
  if (!v4)
  {
    kaldi::Vector<float>::Resize(a1, *((unsigned int *)a1 + 14), 0);
    uint64_t v4 = *((unsigned int *)a1 + 2);
  }
  uint64_t v5 = *((unsigned int *)a1 + 12);
  if ((int)v5 >= 1)
  {
    int v6 = *((_DWORD *)a1 + 13) - v5;
    if (v6 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      int v7 = (char *)*a1;
      uint64_t v13 = 0;
      uint64_t v14 = (uint64_t)v7;
      LODWORD(v15) = v6;
      int v11 = &v7[4 * v5];
      uint64_t v12 = v6;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, (const void **)&v11);
      LODWORD(v4) = *((_DWORD *)a1 + 2);
    }
    *((_DWORD *)a1 + 12) = 0;
    *((_DWORD *)a1 + 13) = v6;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = (uint64_t)*a1 + 4 * v6;
    uint64_t v15 = (v4 - v6);
    kaldi::VectorBase<float>::SetZero((uint64_t)&v14);
    uint64_t v4 = *((unsigned int *)a1 + 2);
  }
  int v8 = *((_DWORD *)a1 + 13);
  int v9 = *(_DWORD *)(a2 + 8);
  if ((int)v4 < v9 + v8)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    kaldi::Vector<float>::Resize((void **)&v14, v4, 1);
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, (const void **)a1);
    kaldi::Vector<float>::Resize(a1, (*((_DWORD *)a1 + 13) + *(_DWORD *)(a2 + 8) + 1000), 1);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v11 = (char *)*a1;
    LODWORD(v12) = v15;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v11, (const void **)&v14);
    kaldi::Vector<float>::Destroy((uint64_t)&v14);
    int v8 = *((_DWORD *)a1 + 13);
    int v9 = *(_DWORD *)(a2 + 8);
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = (uint64_t)*a1 + 4 * v8;
  LODWORD(v15) = v9;
  uint64_t result = kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, (const void **)a2);
  *((_DWORD *)a1 + 13) += *(_DWORD *)(a2 + 8);
  return result;
}

void sub_1B1E6E9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

char *kaldi::nnet1::VectorRandomizer::Value(void **this)
{
  uint64_t v2 = (char *)(this + 3);
  kaldi::Vector<float>::Resize(this + 3, *((unsigned int *)this + 18), 1);
  uint64_t v3 = *((int *)this + 12);
  int v4 = *((_DWORD *)this + 18);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = (uint64_t)*this + 4 * v3;
  LODWORD(v7) = v4;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v2, (const void **)&v6);
  return v2;
}

uint64_t **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *>(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4) {
        std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(a4, *v5, v5[1], v5[1] - *v5);
      }
      v5 += 3;
      a4 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *std::vector<std::vector<std::pair<int,float>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(void *result, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1E6EAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>((char *)v4, *v6, v6[1], v6[1] - *v6);
      uint64_t v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1E6EBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void fst::SplitToVector(char *__s1, char *__s2, void **a3, int a4)
{
  if (__s1)
  {
    uint64_t v7 = __s1;
    uint64_t v8 = (uint64_t)(a3 + 2);
    do
    {
      char v9 = strpbrk(v7, __s2);
      uint64_t v10 = v9;
      if (v9) {
        char *v9 = 0;
      }
      if (!a4 || *v7)
      {
        uint64_t v12 = (char **)a3[1];
        unint64_t v11 = (unint64_t)a3[2];
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v14 = ((char *)v12 - (unsigned char *)*a3) >> 3;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v11 - (void)*a3;
          uint64_t v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
            uint64_t v16 = v14 + 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v8, v17);
          }
          else {
            uint64_t v18 = 0;
          }
          long long v19 = (char **)&v18[8 * v14];
          *long long v19 = v7;
          uint64_t v13 = v19 + 1;
          uint64_t v21 = (char *)*a3;
          uint64_t v20 = (char *)a3[1];
          if (v20 != *a3)
          {
            do
            {
              uint64_t v22 = (char *)*((void *)v20 - 1);
              v20 -= 8;
              *--long long v19 = v22;
            }
            while (v20 != v21);
            uint64_t v20 = (char *)*a3;
          }
          *a3 = v19;
          a3[1] = v13;
          a3[2] = &v18[8 * v17];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *uint64_t v12 = v7;
          uint64_t v13 = v12 + 1;
        }
        a3[1] = v13;
      }
      uint64_t v7 = v10 + 1;
    }
    while (v10);
  }
}

unint64_t fst::ConvertToLegalCSymbol(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned __int8 *)(result + 23);
  uint64_t v3 = (unsigned char *)result;
  if (*(char *)(result + 23) < 0) {
    uint64_t v3 = *(unsigned char **)result;
  }
  uint64_t v4 = MEMORY[0x1E4F14390];
  while (1)
  {
    unint64_t v5 = v1;
    if ((v2 & 0x80) != 0)
    {
      unint64_t v5 = *(void *)v1;
      uint64_t v2 = *(void *)(v1 + 8);
    }
    if (v3 == (unsigned char *)(v5 + v2)) {
      return result;
    }
    unsigned int v6 = (char)*v3;
    if ((v6 & 0x80000000) == 0)
    {
      uint64_t result = *(_DWORD *)(v4 + 4 * v6 + 60) & 0x500;
      if (result) {
        goto LABEL_10;
      }
LABEL_9:
      unsigned char *v3 = 95;
      goto LABEL_10;
    }
    uint64_t result = __maskrune(v6, 0x500uLL);
    if (!result) {
      goto LABEL_9;
    }
LABEL_10:
    ++v3;
    uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  }
}

uint64_t fst::AlignInput()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v2[1] = 0;
  int v0 = 16;
  while (1)
  {
    std::istream::tellg();
    if (v5 < 0) {
      break;
    }
    if (v5 % 16)
    {
      std::istream::read();
      if (--v0) {
        continue;
      }
    }
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  fst::LogMessage::LogMessage((fst *)v2, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"AlignInput: can't determine stream position", 43);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1E6EEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL fst::AlignOutput(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v2 = 16;
  while (1)
  {
    uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
    if ((v3[32] & 5) != 0) {
      break;
    }
    (*(void (**)(void **__return_ptr))(**((void **)v3 + 5) + 32))(__p);
    if (v10 < 0) {
      break;
    }
    if (v10 % 16)
    {
      std::ostream::write();
      if (--v2) {
        continue;
      }
    }
    char v4 = (char *)a1 + *(void *)(*a1 - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(void **__return_ptr))(**((void **)v4 + 5) + 32))(__p);
      uint64_t v5 = v10;
    }
    return v5 % 16 == 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"AlignOutput: can't determine stream position", 44);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1E6F104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::FstHeader::Read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    std::istream::tellg();
    uint64_t v6 = v24;
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::istream::read();
  std::string::basic_string[abi:ne180100]<0>(v22, "ERROR");
  fst::LogMessage::LogMessage((fst *)&__c, (uint64_t)v22);
  char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"FstHeader::Read: Bad FST header: ", 33);
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = *(void *)a3;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&__c);
  if ((v23 & 0x80000000) == 0)
  {
    if (!a4) {
      return 0;
    }
    goto LABEL_14;
  }
  operator delete(v22[0]);
  if (a4)
  {
LABEL_14:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v21 = v6;
    std::istream::seekg();
  }
  return 0;
}

void sub_1B1E6F4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(char *)(v13 - 185) < 0) {
    operator delete(*(void **)(v13 - 208));
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstHeader::Write()
{
  return 1;
}

std::string *fst::FstReadOptions::FstReadOptions(std::string *this, long long *a2, std::string::size_type a3, std::string::size_type a4, std::string::size_type a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  this[1].__r_.__value_.__l.__size_ = a4;
  this[1].__r_.__value_.__r.__words[2] = a5;
  WORD2(this[2].__r_.__value_.__r.__words[0]) = 257;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)FLAGS_fst_read_mode);
  LODWORD(this[2].__r_.__value_.__l.__data_) = fst::FstReadOptions::ReadMode((uint64_t)__p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_1B1E6F6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstReadOptions::ReadMode(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4 != 3)
    {
      if (v4 == 4 && **(_DWORD **)a1 == 1684104562) {
        return 0;
      }
      goto LABEL_15;
    }
    uint64_t v3 = *(_DWORD **)a1;
  }
  else
  {
    int v2 = *(unsigned __int8 *)(a1 + 23);
    uint64_t v3 = (_DWORD *)a1;
    if (v2 != 3)
    {
      if (v2 == 4 && *(_DWORD *)a1 == 1684104562) {
        return 0;
      }
LABEL_15:
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
      int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Unknown file read mode ", 23);
      int v9 = *(char *)(a1 + 23);
      if (v9 >= 0) {
        uint64_t v10 = (_DWORD *)a1;
      }
      else {
        uint64_t v10 = *(_DWORD **)a1;
      }
      if (v9 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v11 = *(void *)(a1 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      return 0;
    }
  }
  int v5 = *(unsigned __int16 *)v3;
  int v6 = *((unsigned __int8 *)v3 + 2);
  if (v5 != 24941 || v6 != 112) {
    goto LABEL_15;
  }
  return 1;
}

void sub_1B1E6F854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::cout(fst *this)
{
  return MEMORY[0x1E4FBA250];
}

uint64_t fst::cerr(fst *this)
{
  return MEMORY[0x1E4FBA240];
}

uint64_t fst::cin(fst *this)
{
  return MEMORY[0x1E4FBA238];
}

UChar *quasar::UnicodeCharacterVectorFromUTF8@<X0>(quasar *this@<X0>, UChar **a2@<X8>)
{
  size_t v5 = strlen((const char *)this);
  int32_t v6 = v5 + 1;
  std::vector<unsigned short>::vector(a2, v5 + 1);
  UErrorCode pErrorCode = U_ZERO_ERROR;
  uint64_t result = u_strFromUTF8(*a2, v6, 0, (const char *)this, -1, &pErrorCode);
  if (pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Invalid UTF8 string:", 20);
    size_t v9 = strlen((const char *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)this, v9);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  return result;
}

void sub_1B1E6F998(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::UTF8StringFromUnicodeCharacterArray(UChar *src@<X0>, int32_t srcLength@<W1>, void *a3@<X8>)
{
  *(void *)UErrorCode pErrorCode = 0;
  u_strToUTF8(0, 0, (int32_t *)pErrorCode, src, srcLength, &pErrorCode[1]);
  if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR && pErrorCode[1] != U_BUFFER_OVERFLOW_ERROR)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Could not extract UTF8 length: ", 31);
    uint64_t v10 = (char *)u_errorName(pErrorCode[1]);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, v10);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v15);
  }
  pErrorCode[1] = U_ZERO_ERROR;
  memset(&v14, 0, sizeof(v14));
  if (pErrorCode[0] == -1)
  {
    int end = 0;
    std::__split_buffer<std::string>::pointer begin = 0;
  }
  else
  {
    std::vector<signed char>::__append(&v14, pErrorCode[0] + 1);
    std::__split_buffer<std::string>::pointer begin = v14.__begin_;
    int end = (int)v14.__end_;
  }
  u_strToUTF8(begin, end - begin, (int32_t *)pErrorCode, src, srcLength, &pErrorCode[1]);
  if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Could not extract UTF8 chars: ", 30);
    char v12 = u_errorName(pErrorCode[1]);
    size_t v13 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v15);
  }
  std::string::basic_string[abi:ne180100](a3, v14.__begin_, pErrorCode[0]);
  if (v14.__begin_)
  {
    v14.__end_ = v14.__begin_;
    operator delete(v14.__begin_);
  }
}

void quasar::URegularExpressionWrapper::initWrappee(quasar::URegularExpressionWrapper *this, const char *__s)
{
  UErrorCode pErrorCode = U_ZERO_ERROR;
  strlen(__s);
  operator new[]();
}

void sub_1B1E6FD98(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8630](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

void quasar::URegularExpressionWrapper::URegularExpressionWrapper(quasar::URegularExpressionWrapper *this, const char *a2, UErrorCode *a3)
{
}

void quasar::URegularExpressionWrapper::URegularExpressionWrapper(quasar::URegularExpressionWrapper *a1, const char *a2)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  quasar::URegularExpressionWrapper::initWrappee(a1, a2);
}

void quasar::URegularExpressionWrapper::~URegularExpressionWrapper(URegularExpression **this)
{
  uint64_t v1 = *this;
  if (v1) {
    uregex_close(v1);
  }
}

void quasar::URegularExpressionWrapper::replaceAllUTextWithSpace(URegularExpression **this@<X0>, UText **a2@<X1>, UErrorCode *a3@<X2>, UText **a4@<X8>)
{
  uregex_setUText(*this, *a2, a3);
  if (*(int *)a3 < 1)
  {
    uint64_t v10 = utext_openUTF8(0, " ", -1, a3);
    long long v15 = v10;
    if (*(int *)a3 < 1)
    {
      std::vector<char> v14 = uregex_replaceAllUText(*this, v10, 0, a3);
    }
    else
    {
      if (quasar::gLogLevel >= 1)
      {
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v24 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
        uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Could not create space text: ", 29);
        char v12 = u_errorName(*a3);
        size_t v13 = strlen(v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v16);
      }
      std::vector<char> v14 = 0;
    }
    *a4 = v14;
    quasar::UTextWrapper::~UTextWrapper(&v15);
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
      char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Could not set regext text: ", 27);
      int v8 = u_errorName(*a3);
      size_t v9 = strlen(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v16);
    }
    *a4 = 0;
  }
}

void sub_1B1E700C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::UTextWrapper::~UTextWrapper((UText **)va);
  _Unwind_Resume(a1);
}

quasar::UTextWrapper *quasar::UTextWrapper::UTextWrapper(quasar::UTextWrapper *this, const char *a2, UErrorCode *status)
{
  *(void *)this = utext_openUTF8(0, a2, -1, status);
  return this;
}

void quasar::URegularExpressionWrapper::split(URegularExpression **a1@<X0>, char *a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  if (a2[23] >= 0) {
    size_t v5 = (quasar *)a2;
  }
  else {
    size_t v5 = *(quasar **)a2;
  }
  quasar::UnicodeCharacterVectorFromUTF8(v5, &v53);
  UErrorCode status = U_ZERO_ERROR;
  uregex_setText(*a1, v53, -1, &status);
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Could not set regext text: ", 27);
    long long v23 = u_errorName(status);
    size_t v24 = strlen(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  long long v34 = 0;
  std::__split_buffer<std::string>::pointer v35 = 0;
  uint64_t v36 = 0;
  std::vector<unsigned short>::resize((uint64_t)&v34, v54 - v53 + 1);
  int32_t requiredCapacity = 0;
  long long v30 = 0;
  long long v31 = 0;
  uint64_t v32 = 0;
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)&v30, v54 - v53 + 1);
  int32_t v6 = uregex_split(*a1, (UChar *)v34, (unint64_t)(v35 - (unsigned char *)v34) >> 1, &requiredCapacity, (UChar **)v30, (unint64_t)(v31 - (unsigned char *)v30) >> 3, &status);
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Error getting capacity for splitting text: ", 43);
    long long v26 = u_errorName(status);
    size_t v27 = strlen(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  int v7 = v6;
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a3, v6);
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * v7;
    do
    {
      quasar::UTF8StringFromUnicodeCharacterArray(*(UChar **)((char *)v30 + v8), -1, __p);
      std::vector<std::string>::pointer end = a3->__end_;
      value = a3->__end_cap_.__value_;
      if (end >= value)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a3->__begin_) >> 3);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a3->__begin_) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        *(void *)&__v[32] = &a3->__end_cap_;
        if (v16) {
          long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&a3->__end_cap_, v16);
        }
        else {
          long long v17 = 0;
        }
        long long v18 = &v17[24 * v13];
        *(void *)std::__split_buffer<std::string> __v = v17;
        *(void *)&__v[8] = v18;
        *(void *)&__v[24] = &v17[24 * v16];
        long long v19 = *(_OWORD *)__p;
        *((void *)v18 + 2) = v29;
        *(_OWORD *)long long v18 = v19;
        __p[1] = 0;
        std::string::size_type v29 = 0;
        __p[0] = 0;
        *(void *)&__v[16] = v18 + 24;
        std::vector<std::string>::__swap_out_circular_buffer(a3, (std::__split_buffer<std::string> *)__v);
        long long v20 = a3->__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
        int v21 = SHIBYTE(v29);
        a3->__end_ = v20;
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v12 = *(_OWORD *)__p;
        end->__r_.__value_.__r.__words[2] = v29;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
        a3->__end_ = end + 1;
      }
      v8 += 8;
    }
    while (v9 != v8);
  }
  if (v30)
  {
    long long v31 = v30;
    operator delete(v30);
  }
  if (v34)
  {
    std::__split_buffer<std::string>::pointer v35 = v34;
    operator delete(v34);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
}

void sub_1B1E704B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,std::__split_buffer<std::wstring> *a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  size_t v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(void *)(v22 - 96) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void quasar::URegularExpressionWrapper::trim(URegularExpression **a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  if (a2[23] >= 0) {
    size_t v5 = (quasar *)a2;
  }
  else {
    size_t v5 = *(quasar **)a2;
  }
  quasar::UnicodeCharacterVectorFromUTF8(v5, &v48);
  unint64_t v6 = (unint64_t)((char *)v49 - (char *)v48) >> 1;
  do
    LODWORD(v6) = v6 - 1;
  while (!v48[(int)v6] && (v6 & 0x80000000) == 0);
  UErrorCode status = U_ZERO_ERROR;
  uregex_setText(*a1, v48, -1, &status);
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    *(_OWORD *)long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    size_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not set regex text: ", 26);
    long long v25 = u_errorName(status);
    size_t v26 = strlen(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  int32_t v7 = v6 + 1;
  uregex_setRegion(*a1, 0, v6 + 1, &status);
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    *(_OWORD *)long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    size_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not set region: ", 22);
    long long v28 = u_errorName(status);
    size_t v29 = strlen(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  UBool Next = uregex_findNext(*a1, &status);
  int32_t v9 = 0;
  while (Next == 1)
  {
    if (status >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      *(_OWORD *)long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not trim: ", 16);
      uint64_t v22 = u_errorName(status);
      size_t v23 = strlen(v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    int32_t v10 = uregex_start(*a1, 0, &status);
    if (status >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      *(_OWORD *)long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not trim: ", 16);
      long long v19 = u_errorName(status);
      size_t v20 = strlen(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    int32_t v11 = v10;
    int32_t v12 = uregex_end(*a1, 0, &status);
    if (status >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      *(_OWORD *)long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not trim: ", 16);
      unint64_t v16 = u_errorName(status);
      size_t v17 = strlen(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (v12 > v9 && v11 == 0) {
      int32_t v9 = v12;
    }
    if (v11 < v7 && v12 >= (int)v6) {
      int32_t v7 = v11;
    }
    UBool Next = uregex_findNext(*a1, &status);
  }
  if (v9 >= v7)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else
  {
    __p[1] = 0;
    *(void *)&long long v31 = 0;
    __p[0] = 0;
    std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(__p, &v48[v9], (uint64_t)&v48[v7], v7 - (unint64_t)v9);
    quasar::UTF8StringFromUnicodeCharacterArray((UChar *)__p[0], (unint64_t)((char *)__p[1] - (char *)__p[0]) >> 1, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if (v48)
  {
    long long v49 = v48;
    operator delete(v48);
  }
}

void sub_1B1E709AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(void *)(v1 - 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::URegularExpressionWrapper::replaceAll(URegularExpression **a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  UErrorCode status = U_ZERO_ERROR;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  long long v44 = utext_openUTF8(0, a2, -1, &status);
  if (status < U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (*(char *)(a3 + 23) >= 0) {
      int32_t v10 = (const char *)a3;
    }
    else {
      int32_t v10 = *(const char **)a3;
    }
    replacement = utext_openUTF8(0, v10, -1, &status);
    if (status < U_ILLEGAL_ARGUMENT_ERROR)
    {
      uregex_setUText(*a1, v44, &status);
      if (status < U_ILLEGAL_ARGUMENT_ERROR)
      {
        size_t v17 = uregex_replaceAllUText(*a1, replacement, 0, &status);
        if (status < U_ILLEGAL_ARGUMENT_ERROR)
        {
          *(void *)&long long v27 = v17;
          quasar::UTextWrapper::getUTF8String((UText **)&v27, &status, __p);
          quasar::UTextWrapper::~UTextWrapper((UText **)&v27);
          if (status < U_ILLEGAL_ARGUMENT_ERROR)
          {
            *(_OWORD *)a4 = *(_OWORD *)__p;
            a4[2] = v25;
          }
          else
          {
            if (quasar::gLogLevel >= 1)
            {
              long long v42 = 0u;
              long long v43 = 0u;
              long long v40 = 0u;
              long long v41 = 0u;
              long long v38 = 0u;
              long long v39 = 0u;
              long long v36 = 0u;
              long long v37 = 0u;
              long long v34 = 0u;
              long long v35 = 0u;
              long long v32 = 0u;
              long long v33 = 0u;
              long long v30 = 0u;
              long long v31 = 0u;
              long long v28 = 0u;
              long long v29 = 0u;
              long long v27 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
              int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not get utf-8 string: ", 28);
              uint64_t v22 = u_errorName(status);
              size_t v23 = strlen(v22);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
              quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v27);
            }
            std::string::basic_string[abi:ne180100]<0>(a4, "");
            if (SHIBYTE(v25) < 0) {
              operator delete(__p[0]);
            }
          }
          goto LABEL_17;
        }
        if (quasar::gLogLevel >= 1)
        {
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v27 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
          long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not replace text with regex: ", 35);
          long long v19 = u_errorName(status);
          size_t v20 = strlen(v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v27);
        }
      }
      else if (quasar::gLogLevel >= 1)
      {
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v27 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
        unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not set regex text: ", 26);
        unint64_t v15 = u_errorName(status);
        size_t v16 = strlen(v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v27);
      }
    }
    else if (quasar::gLogLevel >= 1)
    {
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      int32_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not create to text: ", 26);
      int32_t v12 = u_errorName(status);
      size_t v13 = strlen(v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v27);
    }
    std::string::basic_string[abi:ne180100]<0>(a4, "");
LABEL_17:
    quasar::UTextWrapper::~UTextWrapper(&replacement);
    goto LABEL_18;
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v27 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
    int32_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not create input text: ", 29);
    uint64_t v8 = u_errorName(status);
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v27);
  }
  std::string::basic_string[abi:ne180100]<0>(a4, "");
LABEL_18:
  quasar::UTextWrapper::~UTextWrapper(&v44);
}

void sub_1B1E70DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, UText *a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  quasar::UTextWrapper::~UTextWrapper(&a15);
  quasar::UTextWrapper::~UTextWrapper((UText **)(v18 - 48));
  _Unwind_Resume(a1);
}

void quasar::UTextWrapper::getUTF8String(UText **this@<X0>, UErrorCode *a2@<X1>, void *a3@<X8>)
{
  size_t v5 = *this;
  if (v5)
  {
    int64_t v7 = utext_nativeLength(v5);
    int32_t v8 = utext_extract(*this, 0, v7, 0, 0, a2);
    if (*(int *)a2 < 1 || *a2 == U_BUFFER_OVERFLOW_ERROR)
    {
      int32_t v10 = v8;
      *a2 = U_ZERO_ERROR;
      src = 0;
      long long v28 = 0;
      uint64_t v29 = 0;
      std::vector<unsigned short>::resize((uint64_t)&src, v8 + 2);
      utext_extract(*this, 0, v7, src, (unint64_t)((char *)v28 - (char *)src) >> 1, a2);
      if (*(int *)a2 >= 1 && quasar::gLogLevel >= 1)
      {
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        int32_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Could not extract UTF16 chars: ", 31);
        int32_t v12 = u_errorName(*a2);
        size_t v13 = strlen(v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v30);
      }
      int32_t pDestLength = 0;
      u_strToUTF8(0, 0, &pDestLength, src, v10, a2);
      if (*(int *)a2 >= 1 && *a2 != U_BUFFER_OVERFLOW_ERROR && quasar::gLogLevel >= 1)
      {
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Could not extract UTF8 length: ", 31);
        unint64_t v15 = u_errorName(*a2);
        size_t v16 = strlen(v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v30);
      }
      *a2 = U_ZERO_ERROR;
      memset(&v25, 0, sizeof(v25));
      if (pDestLength == -1)
      {
        int end = 0;
        std::__split_buffer<std::string>::pointer begin = 0;
      }
      else
      {
        std::vector<signed char>::__append(&v25, pDestLength + 1);
        std::__split_buffer<std::string>::pointer begin = v25.__begin_;
        int end = (int)v25.__end_;
      }
      u_strToUTF8(begin, end - begin, &pDestLength, src, v10, a2);
      if (*(int *)a2 >= 1 && quasar::gLogLevel >= 1)
      {
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Could not extract UTF8 chars: ", 30);
        size_t v23 = u_errorName(*a2);
        size_t v24 = strlen(v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v30);
      }
      std::string::basic_string[abi:ne180100](a3, v25.__begin_, pDestLength);
      if (v25.__begin_)
      {
        v25.__end_ = v25.__begin_;
        operator delete(v25.__begin_);
      }
      if (src)
      {
        long long v28 = src;
        operator delete(src);
      }
    }
    else
    {
      if (quasar::gLogLevel >= 1)
      {
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Could not extract UTF16 length: ", 32);
        size_t v20 = u_errorName(*a2);
        size_t v21 = strlen(v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v30);
      }
      std::string::basic_string[abi:ne180100]<0>(a3, "");
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

void sub_1B1E71278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::URegularExpressionWrapper::isMatch(URegularExpression **a1, uint64_t a2)
{
  uint64_t v2 = a2;
  UErrorCode status = U_ZERO_ERROR;
  if (*(char *)(a2 + 23) < 0) {
    a2 = *(void *)a2;
  }
  uint64_t v4 = utext_openUTF8(0, (const char *)a2, -1, &status);
  long long v43 = v4;
  if (status < U_ILLEGAL_ARGUMENT_ERROR)
  {
    uregex_setUText(*a1, v4, &status);
    if (status < U_ILLEGAL_ARGUMENT_ERROR)
    {
      int v18 = uregex_matches(*a1, -1, &status);
      if (status < U_ILLEGAL_ARGUMENT_ERROR)
      {
        BOOL v24 = v18 != 0;
        goto LABEL_29;
      }
      if (quasar::gLogLevel >= 1)
      {
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"(", 1);
        size_t v20 = u_errorName(status);
        size_t v21 = strlen(v20);
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
        size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") Failed to apply regex: ", 25);
        int v23 = *(char *)(v2 + 23);
        if (v23 >= 0) {
          uint64_t v11 = v2;
        }
        else {
          uint64_t v11 = *(void *)v2;
        }
        if (v23 >= 0) {
          uint64_t v12 = *(unsigned __int8 *)(v2 + 23);
        }
        else {
          uint64_t v12 = *(void *)(v2 + 8);
        }
        goto LABEL_27;
      }
    }
    else if (quasar::gLogLevel >= 1)
    {
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      size_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"(", 1);
      unint64_t v14 = u_errorName(status);
      size_t v15 = strlen(v14);
      size_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") Could not set regex input: ", 29);
      int v17 = *(char *)(v2 + 23);
      if (v17 >= 0) {
        uint64_t v11 = v2;
      }
      else {
        uint64_t v11 = *(void *)v2;
      }
      if (v17 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v12 = *(void *)(v2 + 8);
      }
      goto LABEL_27;
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"(", 1);
    unint64_t v6 = u_errorName(status);
    size_t v7 = strlen(v6);
    int32_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") Could not decode UTF8: ", 25);
    int v10 = *(char *)(v2 + 23);
    if (v10 >= 0) {
      uint64_t v11 = v2;
    }
    else {
      uint64_t v11 = *(void *)v2;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v12 = *(void *)(v2 + 8);
    }
LABEL_27:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v26);
  }
  BOOL v24 = 0;
LABEL_29:
  quasar::UTextWrapper::~UTextWrapper(&v43);
  return v24;
}

void sub_1B1E715D4(_Unwind_Exception *a1)
{
  quasar::UTextWrapper::~UTextWrapper((UText **)(v1 - 48));
  _Unwind_Resume(a1);
}

void quasar::UTextWrapper::~UTextWrapper(UText **this)
{
  uint64_t v1 = *this;
  if (v1) {
    utext_close(v1);
  }
}

UText **quasar::UTextWrapper::operator=(UText **a1, UText **a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    utext_close(v4);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

void quasar::getRegexCharSet(char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  quasar::UnicodeCharacterVectorFromUTF8((quasar *)a1, (UChar **)v46);
  long long __p = 0;
  long long v44 = 0;
  long long v45 = 0;
  *(_OWORD *)long long v47 = *(_OWORD *)asc_1B257E520;
  *(_OWORD *)&v47[10] = *(_OWORD *)&asc_1B257E520[5];
  std::unordered_set<unsigned short>::unordered_set((uint64_t)v42, (unsigned __int16 *)v47, 13);
  ubrk_open();
  long long v41 = a2;
  int v3 = ubrk_first();
  int v4 = 0;
  BOOL v5 = 0;
  while (!v5)
  {
    LODWORD(v6) = v4;
    int v4 = v3;
    if (v3 == -1) {
      break;
    }
    size_t v7 = (char *)__p;
    int32_t v8 = v44;
    uint64_t v9 = v44 - (unsigned char *)__p;
    if (v44 != __p)
    {
      if (v44 >= v45)
      {
        if (v9 <= -3) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v9 >> 1;
        if (v45 - (unsigned char *)__p <= (unint64_t)((v9 >> 1) + 1)) {
          uint64_t v12 = v11 + 1;
        }
        else {
          uint64_t v12 = v45 - (unsigned char *)__p;
        }
        if ((unint64_t)(v45 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v13 = v12;
        }
        if (v13)
        {
          unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)&v45, v13);
          size_t v7 = (char *)__p;
          int32_t v8 = v44;
        }
        else
        {
          unint64_t v14 = 0;
        }
        size_t v15 = &v14[2 * v11];
        *(_WORD *)size_t v15 = 124;
        int v10 = v15 + 2;
        while (v8 != v7)
        {
          __int16 v16 = *((_WORD *)v8 - 1);
          v8 -= 2;
          *((_WORD *)v15 - 1) = v16;
          v15 -= 2;
        }
        long long __p = v15;
        long long v44 = v10;
        long long v45 = &v14[2 * v13];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(_WORD *)long long v44 = 124;
        int v10 = v8 + 2;
      }
      long long v44 = v10;
    }
    if ((int)v6 >= v4)
    {
      BOOL v5 = 0;
    }
    else
    {
      uint64_t v6 = (int)v6;
      do
      {
        int v17 = (unsigned __int16 *)((char *)v46[0] + 2 * v6);
        BOOL v5 = *v17 == 0;
        if (!*v17) {
          break;
        }
        int v18 = std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::find<unsigned short>(v42, v17);
        size_t v20 = v44;
        long long v19 = v45;
        if (v18)
        {
          if (v44 >= v45)
          {
            uint64_t v22 = (char *)__p;
            uint64_t v23 = v44 - (unsigned char *)__p;
            if (v44 - (unsigned char *)__p <= -3) {
              goto LABEL_73;
            }
            uint64_t v24 = v23 >> 1;
            if (v45 - (unsigned char *)__p <= (unint64_t)((v23 >> 1) + 1)) {
              uint64_t v25 = v24 + 1;
            }
            else {
              uint64_t v25 = v45 - (unsigned char *)__p;
            }
            if ((unint64_t)(v45 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v26 = v25;
            }
            if (v26)
            {
              long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)&v45, v26);
              uint64_t v22 = (char *)__p;
              size_t v20 = v44;
            }
            else
            {
              long long v27 = 0;
            }
            long long v28 = &v27[2 * v24];
            *(_WORD *)long long v28 = 92;
            size_t v21 = v28 + 2;
            while (v20 != v22)
            {
              __int16 v29 = *((_WORD *)v20 - 1);
              v20 -= 2;
              *((_WORD *)v28 - 1) = v29;
              v28 -= 2;
            }
            long long v19 = &v27[2 * v26];
            long long __p = v28;
            long long v44 = v21;
            long long v45 = v19;
            if (v22)
            {
              operator delete(v22);
              long long v19 = v45;
            }
          }
          else
          {
            *(_WORD *)long long v44 = 92;
            size_t v21 = v20 + 2;
          }
          long long v44 = v21;
          size_t v20 = v21;
        }
        long long v30 = v46[0];
        if (v20 >= v19)
        {
          long long v32 = (char *)__p;
          uint64_t v33 = v20 - (unsigned char *)__p;
          if (v20 - (unsigned char *)__p < -2) {
LABEL_73:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v34 = v33 >> 1;
          unint64_t v35 = v19 - (unsigned char *)__p;
          uint64_t v36 = v35 <= (v33 >> 1) + 1 ? v34 + 1 : v35;
          uint64_t v37 = v35 >= 0x7FFFFFFFFFFFFFFELL ? 0x7FFFFFFFFFFFFFFFLL : v36;
          if (v37)
          {
            long long v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)&v45, v37);
            long long v32 = (char *)__p;
            size_t v20 = v44;
          }
          else
          {
            long long v38 = 0;
          }
          long long v39 = &v38[2 * v34];
          *(_WORD *)long long v39 = v30[v6];
          long long v31 = v39 + 2;
          while (v20 != v32)
          {
            __int16 v40 = *((_WORD *)v20 - 1);
            v20 -= 2;
            *((_WORD *)v39 - 1) = v40;
            v39 -= 2;
          }
          long long __p = v39;
          long long v44 = v31;
          long long v45 = &v38[2 * v37];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *(_WORD *)size_t v20 = *((_WORD *)v46[0] + v6);
          long long v31 = v20 + 2;
        }
        long long v44 = v31;
        ++v6;
      }
      while (v4 != v6);
    }
    int v3 = ubrk_next();
  }
  ubrk_close();
  *((_WORD *)v44 - 1) = 0;
  quasar::UTF8StringFromUnicodeCharacterArray((UChar *)__p, -1, v41);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v42);
  if (__p)
  {
    long long v44 = (char *)__p;
    operator delete(__p);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
}

void sub_1B1E71ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned short>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_1B1E71BA0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<unsigned short>::unordered_set(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 2 * a3;
    do
    {
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(a1, a2, a2);
      ++a2;
      v5 -= 2;
    }
    while (v5);
  }
  return a1;
}

void sub_1B1E71C20(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int16 *)v10 + 8) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x18uLL);
  *int v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  long long v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *int v10 = *v19;
LABEL_38:
    *long long v19 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B1E71E40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::find<unsigned short>(void *a1, unsigned __int16 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

quasar::Config *quasar::Config::Config(quasar::Config *this, quasar::SystemConfig *a2)
{
  uint8x8_t v4 = (char *)operator new(0xA8uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint8x8_t v4 = &unk_1F0A60678;
  *((void *)v4 + 19) = 0;
  *((void *)v4 + 20) = 0;
  *((void *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *((void *)this + 1) = v4;
  *(_OWORD *)(v4 + 24) = 0u;
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0x3F7D70A400000001;
  *(void *)this = v4 + 24;
  *((void *)this + 6) = 0xBF800000FFFFFFFFLL;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((unsigned char *)this + 80) = 1;
  *(void *)((char *)this + 84) = 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 27) = 0x6400000064;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 26) = 0;
  *((_DWORD *)this + 56) = 1102382323;
  std::string::basic_string[abi:ne180100]<0>(__p, "embedding-retranslation-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 272, 0, (uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  quasar::QsrTextSymbolTable::Register(*(quasar::QsrTextSymbolTable **)this, a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(v6, "pDec model filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 56, (uint64_t)v6, 1, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "phone-syms-file");
  std::string::basic_string[abi:ne180100]<0>(v6, "Phone symbol table (text format) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 16, (uint64_t)v6, 1, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shortlist-ctc-beam");
  std::string::basic_string[abi:ne180100]<0>(v6, "ctc shortlist beam");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 40, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shortlist-ctc-threshold");
  std::string::basic_string[abi:ne180100]<0>(v6, "shortlist posterior mass threshold [0.5-1.0)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 44, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "beam");
  std::string::basic_string[abi:ne180100]<0>(v6, "(default 1) how many paths to keep during search");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 48, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rs-beam");
  std::string::basic_string[abi:ne180100]<0>(v6, "(default -1.0 => off) relative-score beam pruning");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 52, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(v6, "(default true) enable-memory-map for model-file");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 80, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "max-seq-length");
  std::string::basic_string[abi:ne180100]<0>(v6, "(default 80) how many paths to keep during search");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 84, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "veto-factor");
  std::string::basic_string[abi:ne180100]<0>(v6, "(default 0.0) veto-factor to achieve min-decoding-length");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 88, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-prompt-list");
  std::string::basic_string[abi:ne180100]<0>(v6, "enforce a prompt in beam-decoding from the whitespace separated token list");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 144, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shortlist-lang-pair");
  std::string::basic_string[abi:ne180100]<0>(v6, "shortlist table specifier");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 192, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shortlist-cond-n");
  std::string::basic_string[abi:ne180100]<0>(v6, "shortlist table specifier");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 216, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shortlist-freq-n");
  std::string::basic_string[abi:ne180100]<0>(v6, "shortlist table specifier");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 220, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "retranslation-embed-scale");
  std::string::basic_string[abi:ne180100]<0>(v6, "pDec encoder embedding scale");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 224, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_1B1E72694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v24 + 215) < 0) {
    operator delete(*v26);
  }
  long long v28 = *(void **)(v24 + 168);
  if (v28)
  {
    *(void *)(v24 + 176) = v28;
    operator delete(v28);
  }
  if (*(char *)(v24 + 167) < 0) {
    operator delete(*v25);
  }
  __int16 v29 = *(void **)(v24 + 120);
  if (v29)
  {
    *(void *)(v24 + 128) = v29;
    operator delete(v29);
  }
  if (*(char *)(v24 + 119) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v24 + 79) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v24 + 39) < 0) {
    operator delete(*a11);
  }
  long long v30 = *(std::__shared_weak_count **)(v24 + 8);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

void *LHash<unsigned int,Trie<unsigned int,unsigned long>>::alloc(void *a1, unsigned int a2)
{
  char v3 = -1;
  do
    uint64_t v4 = (1 << ++v3);
  while (v4 < a2);
  uint64_t result = BM_malloc(24 * (v4 - 1) + 32);
  uint64_t v6 = 0;
  *a1 = result;
  *(_DWORD *)uint64_t result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  do
  {
    uint64_t v7 = *a1 + v6;
    *(_DWORD *)(v7 + 24) = -1;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
    v6 += 24;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<unsigned int,Trie<unsigned int,unsigned long>>::clear(void *a1, unsigned int a2)
{
  uint64_t v4 = (void *)*a1;
  if (v4)
  {
    BM_free(v4, 24 * ~(-1 << *(_DWORD *)v4) + 32);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8) {
      a2 = (float)((float)(a2 + 1) / 0.8);
    }
    LHash<unsigned int,Trie<unsigned int,unsigned long>>::alloc(a1, a2);
  }
}

void *LHash<unsigned int,Trie<unsigned int,unsigned long>>::~LHash(void *a1)
{
  return a1;
}

uint64_t LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(void *a1, unsigned int a2, unsigned char *a3)
{
  if (!*a1) {
    LHash<unsigned int,Trie<unsigned int,unsigned long>>::alloc(a1, 1u);
  }
  unsigned int v20 = 0;
  int v6 = LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate((_DWORD **)a1, a2, &v20);
  *a3 = v6;
  uint64_t v7 = (void *)*a1;
  if (!v6)
  {
    unint64_t v8 = *(unsigned int *)v7;
    uint64_t v9 = 1 << (v8 & 0x1F);
    unint64_t v10 = v8 >> 5;
    if (v8 >= 0xE0) {
      unsigned int v11 = (float)((float)(v10 + 2) / 0.8);
    }
    else {
      unsigned int v11 = v10 + 1;
    }
    if (v11 > v9)
    {
      LHash<unsigned int,Trie<unsigned int,unsigned long>>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        float v12 = (unsigned int *)(v7 + 3);
        uint64_t v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12 != -1)
          {
            LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate((_DWORD **)a1, *v12, &v20);
            uint64_t v14 = *a1 + 24 * v20;
            long long v15 = *((_OWORD *)v12 - 1);
            *(void *)(v14 + 24) = *(void *)v12;
            *(_OWORD *)(v14 + 8) = v15;
          }
          v12 += 6;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 8), v7 + 1, 24 * v10);
      }
      BM_free(v7, 24 * (v9 - 1) + 32);
      LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate((_DWORD **)a1, a2, &v20);
      uint64_t v7 = (void *)*a1;
    }
    LODWORD(v7[3 * v20 + 3]) = a2;
    uint64_t v16 = 3 * v20;
    size_t v17 = &v7[3 * v20 + 1];
    *size_t v17 = 0;
    v17[1] = 0;
    uint64_t v18 = *a1 + 8 * v16;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 0;
    *(_DWORD *)*a1 += 32;
    uint64_t v7 = (void *)*a1;
  }
  return (uint64_t)&v7[3 * v20 + 1];
}

uint64_t LHash<unsigned int,Trie<unsigned int,unsigned long>>::remove(unsigned int **a1, unsigned int a2, _OWORD *a3)
{
  unsigned int i = 0;
  uint64_t result = LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a1, a2, &i);
  if (result)
  {
    int v6 = *a1;
    (*a1)[6 * i + 6] = -1;
    if (a3)
    {
      *a3 = *(_OWORD *)&v6[6 * i + 2];
      int v6 = *a1;
    }
    unsigned int v7 = *v6;
    unsigned int v8 = *v6 & 0x1F;
    if (v8 >= 3)
    {
      unsigned int v10 = (i + 1) & ~(-1 << v8);
      int v18 = 0;
      for (unsigned int i = v10; ; unsigned int i = v10)
      {
        unsigned int v11 = v6[6 * v10 + 6];
        if (v11 == -1) {
          break;
        }
        int v12 = LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a1, v11, &v18);
        int v6 = *a1;
        if (!v12)
        {
          uint64_t v13 = v6 + 2;
          uint64_t v14 = &v13[6 * v18];
          uint64_t v15 = 3 * i;
          uint64_t v16 = &v13[6 * i];
          uint64_t v17 = *((void *)v16 + 2);
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v16;
          *((void *)v14 + 2) = v17;
          int v6 = *a1;
          (*a1)[2 * v15 + 6] = -1;
        }
        int v18 = 0;
        unsigned int v10 = (i + 1) & ~(-1 << *v6);
      }
    }
    else
    {
      unsigned int v9 = v7 >> 5;
      memmove(&v6[6 * i + 2], &v6[6 * i + 8], 24 * (~i + (v7 >> 5)));
      int v6 = *a1;
      (*a1)[6 * v9] = -1;
    }
    *v6 -= 32;
    return 1;
  }
  return result;
}

_DWORD **LHash<unsigned int,Trie<unsigned int,unsigned long>>::memStats(_DWORD **result, uint64_t *a2)
{
  uint64_t v2 = *a2 + 8;
  *a2 = v2;
  char v3 = *result;
  if (*result)
  {
    int v4 = 1 << *v3;
    unint64_t v5 = 24 * (v4 - 1) + 32;
    *a2 = v5 + v2;
    a2[1] += 24 * (v4 - (*v3 >> 5));
    uint64_t v6 = 256;
    if (v5 < 0x100) {
      uint64_t v6 = 24 * (v4 - 1) + 32;
    }
    ++*((_DWORD *)a2 + v6 + 4);
  }
  return result;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter(uint64_t result, _DWORD **a2, uint64_t a3)
{
  char v3 = *a2;
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  if (v3)
  {
    *(_DWORD *)(result + 12) = *v3 >> 5;
    *(void *)(result + 16) = a3;
    *(void *)(result + 24) = 0;
    LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::sortKeys();
  }
  *(_DWORD *)(result + 12) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = 0;
  return result;
}

void LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::sortKeys()
{
}

void sub_1B1E72EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x1B3EA8630](a12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::init(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    uint64_t result = MEMORY[0x1B3EA8630](result, 0x1000C8052888210);
  }
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if (*(void *)a1)
  {
    *(_DWORD *)(a1 + 12) = **(_DWORD **)a1 >> 5;
    LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::sortKeys();
  }
  *(_DWORD *)(a1 + 12) = 0;
  return result;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  unsigned int v10 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  unsigned int v9 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  uint64_t v8 = *(void *)a1 + 24 * v10;
  uint64_t result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 24);
  return result;
}

void sub_1B1E72FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD **Trie<unsigned int,unsigned long>::~Trie(_DWORD **a1)
{
  LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter((uint64_t)v4, a1, 0);
  int v3 = 0;
  while (LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next((uint64_t)v4, &v3))
    Trie<unsigned int,unsigned long>::~Trie();
  if (v5) {
    MEMORY[0x1B3EA8630](v5, 0x1000C8052888210);
  }
  LHash<unsigned int,Trie<unsigned int,unsigned long>>::clear(a1, 0);
  return a1;
}

void *Trie<unsigned int,unsigned long>::insertTrie(void *result, unsigned int *a2, unsigned char *a3)
{
  if (!a2 || (unsigned int v5 = *a2, v5 == -1))
  {
LABEL_6:
    *a3 = 1;
  }
  else
  {
    uint64_t v6 = a2 + 1;
    while (1)
    {
      uint64_t result = (void *)LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(result, v5, a3);
      if (!*a3) {
        break;
      }
      unsigned int v7 = *v6++;
      unsigned int v5 = v7;
      if (v7 == -1) {
        goto LABEL_6;
      }
    }
    char v8 = 0;
    return (void *)Trie<unsigned int,unsigned long>::insertTrie(result, v6, &v8);
  }
  return result;
}

uint64_t Trie<unsigned int,unsigned long>::remove(unsigned int **a1, unsigned int *a2, void *a3)
{
  long long v6 = 0uLL;
  uint64_t v4 = Trie<unsigned int,unsigned long>::removeTrie(a1, a2, &v6);
  if (a3) {
    *a3 = *((void *)&v6 + 1);
  }
  Trie<unsigned int,unsigned long>::~Trie((_DWORD **)&v6);
  return v4;
}

void sub_1B1E7314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
}

uint64_t Trie<unsigned int,unsigned long>::removeTrie(unsigned int **a1, unsigned int *a2, _OWORD *a3)
{
  if (!a2) {
    return 0;
  }
  unsigned int v4 = *a2;
  if (v4 == -1) {
    return 0;
  }
  unsigned int v8 = a2[1];
  unsigned int v7 = a2 + 1;
  if (v8 != -1)
  {
    LODWORD(v11) = 0;
    if (LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a1, v4, &v11)) {
      return Trie<unsigned int,unsigned long>::removeTrie(&(*a1)[6 * v11 + 2], v7, a3);
    }
    return 0;
  }
  if (!a3)
  {
    long long v11 = 0uLL;
    if (LHash<unsigned int,Trie<unsigned int,unsigned long>>::remove(a1, v4, &v11))
    {
      Trie<unsigned int,unsigned long>::~Trie((_DWORD **)&v11);
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = 0;
    }
    Trie<unsigned int,unsigned long>::~Trie((_DWORD **)&v11);
    return v9;
  }
  return LHash<unsigned int,Trie<unsigned int,unsigned long>>::remove(a1, v4, a3);
}

void sub_1B1E7325C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
}

uint64_t Trie<unsigned int,unsigned long>::memStats(_DWORD **a1, uint64_t *a2)
{
  *a2 += 8;
  LHash<unsigned int,Trie<unsigned int,unsigned long>>::memStats(a1, a2);
  LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter((uint64_t)v7, a1, 0);
  int v6 = 0;
  while (1)
  {
    uint64_t v4 = LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next((uint64_t)v7, &v6);
    if (!v4) {
      break;
    }
    *a2 -= 16;
    Trie<unsigned int,unsigned long>::memStats(v4, a2);
  }
  uint64_t result = v8;
  if (v8) {
    return MEMORY[0x1B3EA8630](v8, 0x1000C8052888210);
  }
  return result;
}

void sub_1B1E73304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    MEMORY[0x1B3EA8630](a14, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TrieIter2<unsigned int,unsigned long>::TrieIter2(uint64_t a1, _DWORD **a2, _DWORD *a3, int a4, uint64_t a5)
{
  int v6 = a3;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter(a1 + 32, a2, a5);
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (!a4) {
    goto LABEL_4;
  }
  if (a4 == 1)
  {
    ++v6;
LABEL_4:
    *int v6 = -1;
  }
  return a1;
}

uint64_t TrieIter2<unsigned int,unsigned long>::init(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = TrieIter2<unsigned int,unsigned int>::~TrieIter2(v2);
    MEMORY[0x1B3EA8670](v3, 0x10F0C40A7879D68);
  }
  *(void *)(a1 + 64) = 0;
  uint64_t result = LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::init(a1 + 32);
  *(unsigned char *)(a1 + 72) = 0;
  return result;
}

uint64_t TrieIter2<unsigned int,unsigned long>::next(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = a1 + 32;
      uint64_t v4 = *(_DWORD **)(a1 + 8);
      return LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next(v3, v4);
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 64);
      if (v6)
      {
        uint64_t result = TrieIter2<unsigned int,unsigned long>::next(v6);
        if (result) {
          return result;
        }
        uint64_t v7 = *(void *)(a1 + 64);
        if (v7)
        {
          uint64_t v8 = TrieIter2<unsigned int,unsigned int>::~TrieIter2(v7);
          MEMORY[0x1B3EA8670](v8, 0x10F0C40A7879D68);
        }
        *(void *)(a1 + 64) = 0;
      }
      uint64_t result = LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next(a1 + 32, *(_DWORD **)(a1 + 8));
      if (result) {
        operator new();
      }
    }
  }
  else if (*(unsigned char *)(a1 + 72))
  {
    return 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 1;
    return *(void *)a1;
  }
  return result;
}

void sub_1B1E73500(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F0C40A7879D68);
  _Unwind_Resume(a1);
}

void NgramCounts<unsigned long>::NgramCounts(LMStats *a1, Vocab *a2, int a3)
{
  LMStats::LMStats(a1, a2);
  *(void *)uint64_t v4 = &unk_1F0A32FE0;
  *(unsigned char *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 156) = a3;
  *(void *)(v4 + 160) = 0;
  *(void *)(v4 + 168) = 0;
}

void NgramCounts<unsigned long>::~NgramCounts(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A32FE0;
  Trie<unsigned int,unsigned long>::~Trie((_DWORD **)a1 + 20);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A32FE0;
  Trie<unsigned int,unsigned long>::~Trie((_DWORD **)a1 + 20);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

_DWORD **NgramCounts<unsigned long>::findCount(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  char v5 = 0;
  uint64_t result = (_DWORD **)Trie<unsigned int,unsigned int>::findTrie((_DWORD **)(a1 + 160), a2, &v5);
  if (result) {
    return (_DWORD **)Trie<unsigned int,unsigned int>::find(result, a3);
  }
  return result;
}

_DWORD *NgramCounts<unsigned long>::insertCount(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  char v7 = 0;
  inserted = Trie<unsigned int,unsigned long>::insertTrie((void *)(a1 + 160), a2, &v7);
  char v8 = 0;
  char v5 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(inserted, a3, &v8);
  if (!v8) {
    *char v5 = 0;
  }
  return v5 + 2;
}

uint64_t NgramCounts<unsigned long>::countSentence(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2, 1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2, 1);
}

uint64_t NgramCounts<unsigned long>::countSentence(uint64_t a1, uint64_t a2, char *a3)
{
  if (*a3 == 45) {
    return 0;
  }
  uint64_t v6 = 0;
  if (sscanf(a3, "%lu", &v6) != 1) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2, v6);
  }
}

uint64_t NgramCounts<unsigned long>::countSentence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)_ZTW20countSentenceWidsTLS();
  char v7 = (void *)*v6;
  if (!*v6)
  {
    char v8 = v6;
    char v7 = malloc_type_calloc(0xC353uLL, 4uLL, 0x100004052888210uLL);
    void *v8 = v7;
  }
  uint64_t v9 = *(uint64_t **)(a1 + 24);
  uint64_t v10 = *v9;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v10 + 256))(v9, a2, (uint64_t)v7 + 4, 50001);
  }
  else
  {
    int v12 = (unsigned int *)(*(uint64_t (**)(uint64_t *))(v10 + 88))(v9);
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, void))(*v9 + 272))(v9, a2, (uint64_t)v7 + 4, 50001, *v12);
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 128);
  return v13(a1, v7, v11, a3);
}

{
  void *v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t (*v13)(uint64_t, void *, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v6 = (void *)_ZTW20countSentenceWidsTLS();
  char v7 = (void *)*v6;
  if (!*v6)
  {
    char v8 = v6;
    char v7 = malloc_type_calloc(0xC353uLL, 4uLL, 0x100004052888210uLL);
    void *v8 = v7;
  }
  uint64_t v9 = *(uint64_t **)(a1 + 24);
  uint64_t v10 = *v9;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v10 + 264))(v9, a2, (uint64_t)v7 + 4, 50001);
  }
  else
  {
    int v12 = (unsigned int *)(*(uint64_t (**)(uint64_t *))(v10 + 88))(v9);
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, void))(*v9 + 280))(v9, a2, (uint64_t)v7 + 4, 50001, *v12);
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 128);
  return v13(a1, v7, v11, a3);
}

uint64_t NgramCounts<unsigned long>::countSentence(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void *)_ZTW20countSentenceWidsTLS();
  char v5 = (_DWORD *)*v4;
  if (!*v4)
  {
    uint64_t v6 = v4;
    char v5 = malloc_type_calloc(0xC353uLL, 4uLL, 0x100004052888210uLL);
    *uint64_t v6 = v5;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *a2;
  uint64_t v9 = (a2[1] - *a2) >> 2;
  while (v9 != v7)
  {
    v5[v7 + 1] = *(_DWORD *)(v8 + 4 * v7);
    if (++v7 == 50000) {
      goto LABEL_8;
    }
  }
  v5[(v9 + 1)] = -1;
LABEL_8:
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 128);
  return v10(a1);
}

uint64_t NgramCounts<unsigned long>::countSentenceHelper(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4)
{
  if (a3 == 50001) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = a3 == 0;
  }
  if (!v10)
  {
    unsigned int v11 = 1;
    do
    {
      int v12 = a2[v11];
      if (v12 == *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24))) {
        *(double *)(a1 + 72) = *(double *)(a1 + 72) + 1.0;
      }
      ++v11;
    }
    while (v11 <= a3);
  }
  if (*(unsigned char *)(a1 + 33)
    && (int v13 = a2[1],
        v13 != *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104))(*(void *)(a1 + 24))))
  {
    *a2 = *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104))(*(void *)(a1 + 24));
    uint64_t v14 = a2;
  }
  else
  {
    uint64_t v14 = a2 + 1;
  }
  if (*(unsigned char *)(a1 + 34))
  {
    int v15 = a2[a3];
    if (v15 != *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24)))
    {
      a2[a3 + 1] = *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24));
      a2[a3 + 2] = -1;
    }
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, _DWORD *, uint64_t))(*(void *)a1 + 136);
  return v16(a1, v14, a4);
}

uint64_t NgramCounts<unsigned long>::countSentence(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (*a2 == -1)
  {
    uint64_t v6 = 0;
    int v7 = -1;
  }
  else
  {
    LODWORD(v6) = 0;
    do
    {
      NgramCounts<unsigned long>::incrementCounts(a1, (uint64_t)a2, 1u, a3);
      uint64_t v6 = (v6 + 1);
      a2 = &v3[v6];
    }
    while (*a2 != -1);
    int v7 = *v3;
  }
  *(double *)(a1 + 64) = *(double *)(a1 + 64) + (double)v6;
  if (v7 == *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104))(*(void *)(a1 + 24))) {
    *(double *)(a1 + 64) = *(double *)(a1 + 64) + -1.0;
  }
  if (v6)
  {
    int v8 = v3[(v6 - 1)];
    if (v8 == *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24))) {
      *(double *)(a1 + 64) = *(double *)(a1 + 64) + -1.0;
    }
  }
  *(double *)(a1 + 56) = *(double *)(a1 + 56) + 1.0;
  return v6;
}

uint64_t NgramCounts<unsigned long>::incrementCounts(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (*(_DWORD *)(result + 156))
  {
    uint64_t v6 = result;
    unint64_t v7 = 0;
    result += 160;
    unint64_t v8 = a3;
    do
    {
      unsigned int v9 = *(_DWORD *)(a2 + 4 * v7);
      if (v9 == -1) {
        break;
      }
      char v10 = 0;
      uint64_t result = LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert((void *)result, v9, &v10);
      if (!v10) {
        *(_DWORD *)uint64_t result = 0;
      }
      if (++v7 >= v8) {
        *(void *)(result + 8) += a4;
      }
    }
    while (v7 < *(unsigned int *)(v6 + 156));
  }
  return result;
}

uint64_t NgramCounts<unsigned long>::read(uint64_t a1, File *a2)
{
  return NgramCounts<unsigned long>::read(a1, a2, *(_DWORD *)(a1 + 156), 0);
}

uint64_t NgramCounts<unsigned long>::read(uint64_t a1, File *this, unsigned int a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = File::getline(this);
  if (v8)
  {
    memset(v15, 0, 512);
    int v13 = 0;
    if (!strcmp(v8, "SRILM_BINARY_COUNTS_001\n"))
    {
      File::File((File *)v12, *(const char **)this, "rb", 1);
      uint64_t Binary = NgramCounts<unsigned long>::readBinary(a1, (File *)v12, a3, a4);
      File::~File((File *)v12);
      return Binary;
    }
    File::ungetline((uint64_t)this);
    for (unsigned int i = NgramCounts<unsigned long>::readNgram(this, v15, (const char **)0x65, &v13);
          i;
          unsigned int i = NgramCounts<unsigned long>::readNgram(this, v15, (const char **)0x65, &v13))
    {
      NgramCounts<unsigned long>::updateCounts(a1, i, a3, a4, (uint64_t)v13, (uint64_t)v15, v14);
    }
  }
  return 1;
}

void sub_1B1E74098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  File::~File((File *)va);
  _Unwind_Resume(a1);
}

uint64_t NgramCounts<unsigned long>::readBinary(uint64_t a1, File *this, int a3, uint64_t a4)
{
  unint64_t v8 = File::getline(this);
  if (!v8 || strcmp(v8, "SRILM_BINARY_COUNTS_001\n"))
  {
    unsigned int v9 = File::position((const char **)this, MEMORY[0x1E4FBA240]);
    char v10 = "bad binary format\n";
    uint64_t v11 = 18;
LABEL_4:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    return 0;
  }
  uint64_t v14 = File::getline(this);
  int v25 = 0;
  if (sscanf(v14, "maxorder %u", &v25) != 1)
  {
    unsigned int v9 = File::position((const char **)this, MEMORY[0x1E4FBA240]);
    char v10 = "could not read ngram order\n";
    uint64_t v11 = 27;
    goto LABEL_4;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  if ((*(unsigned int (**)(void, File *, uint64_t *, uint64_t))(**(void **)(a1 + 24) + 336))(*(void *)(a1 + 24), this, &v22, a4))
  {
    off_t v21 = File::ftell(this);
    if ((v21 & 0x8000000000000000) == 0)
    {
      uint64_t v12 = NgramCounts<unsigned long>::readBinaryNode(a1, (_DWORD **)(a1 + 160), a3, v25, this, &v21, a4, (int *)&v22);
      goto LABEL_13;
    }
    int v15 = File::position((const char **)this, MEMORY[0x1E4FBA240]);
    uint64_t v16 = __error();
    uint64_t v17 = srilm_ts_strerror(*v16);
    size_t v18 = strlen(v17);
    long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    unsigned int v20 = std::locale::use_facet(&v26, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v26);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v12 = 0;
LABEL_13:
  if (v23) {
    MEMORY[0x1B3EA8630](v23, 0x1000C8052888210);
  }
  return v12;
}

void sub_1B1E742D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::locale::~locale((std::locale *)(v13 - 40));
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

Vocab *NgramCounts<unsigned long>::readNgram(File *a1, char *a2, const char **a3, char **a4)
{
  uint64_t result = (Vocab *)File::getline(a1);
  if (result)
  {
    uint64_t result = (Vocab *)NgramCounts<unsigned long>::parseNgram(result, a2, a3, a4);
    if (!result)
    {
      unsigned int v9 = File::position((const char **)a1, MEMORY[0x1E4FBA240]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"malformed N-gram count or more than ", 36);
      char v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" words per line\n", 16);
      return 0;
    }
  }
  return result;
}

uint64_t NgramCounts<unsigned long>::updateCounts(uint64_t result, unsigned int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  if (a2 <= a3)
  {
    uint64_t v19 = v7;
    uint64_t v20 = v8;
    uint64_t v12 = result;
    if (a4)
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned int *, uint64_t))(**(void **)(result + 24) + 288))(*(void *)(result + 24), a6, a7, 100);
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t v13 = *(uint64_t **)(result + 24);
      uint64_t v14 = *v13;
      if (*(unsigned char *)(result + 32))
      {
        (*(void (**)(uint64_t *, uint64_t, unsigned int *, uint64_t))(v14 + 256))(v13, a6, a7, 100);
      }
      else
      {
        int v15 = (unsigned int *)(*(uint64_t (**)(uint64_t *))(v14 + 88))(v13);
        (*(void (**)(uint64_t *, uint64_t, unsigned int *, uint64_t, void))(*v13 + 272))(v13, a6, a7, 100, *v15);
      }
    }
    uint64_t v16 = (_DWORD **)(v12 + 160);
    if (*(unsigned char *)(v12 + 152))
    {
      char v17 = 0;
      uint64_t result = Trie<unsigned int,unsigned int>::findTrie(v16, a7, &v17);
      if (!result) {
        return result;
      }
    }
    else
    {
      char v18 = 0;
      uint64_t result = (uint64_t)Trie<unsigned int,unsigned long>::insertTrie(v16, a7, &v18);
    }
    *(void *)(result + 8) += a5;
  }
  return result;
}

uint64_t NgramCounts<unsigned long>::read(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  memset(v16, 0, 512);
  while ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2))
  {
    uint64_t v8 = *(uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    uint64_t v14 = v8;
    uint64_t v9 = *v8;
    if (v8[10] == v8[11])
    {
      unsigned int Ngram = NgramCounts<unsigned long>::readNgram(v8 + 4, (uint64_t ***)v16, 0x65u);
      if (!Ngram)
      {
        char v11 = 0;
        goto LABEL_8;
      }
      NgramCounts<unsigned long>::updateCounts(a1, Ngram, a3, a4, v9, (uint64_t)v16, v15);
    }
    else
    {
      NgramCounts<unsigned long>::updateCounts(a1, a3, a4, *v8, v8 + 10, v15);
    }
    char v11 = 1;
LABEL_8:
    uint64_t v12 = (uint64_t)v14;
    uint64_t v14 = 0;
    if (v12) {
      std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100]((uint64_t)&v14, v12);
    }
    if ((v11 & 1) == 0) {
      return 1;
    }
  }
  return 1;
}

void sub_1B1E746CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v10 = a9;
  a9 = 0;
  if (v10) {
    std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100]((uint64_t)&a9, v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<unsigned long>::updateCounts(uint64_t result, unsigned int a2, int a3, uint64_t a4, void *a5, unsigned int *a6)
{
  if (a2 >= (unint64_t)((uint64_t)(a5[1] - *a5) >> 2))
  {
    uint64_t v8 = result;
    uint64_t result = (*(uint64_t (**)(void, void *, unsigned int *, uint64_t, BOOL))(**(void **)(result + 24)
                                                                                        + 296))(*(void *)(result + 24), a5, a6, 100, a3 != 0);
    if (result)
    {
      uint64_t v9 = (_DWORD **)(v8 + 160);
      if (*(unsigned char *)(v8 + 152))
      {
        char v10 = 0;
        uint64_t result = Trie<unsigned int,unsigned int>::findTrie(v9, a6, &v10);
        if (!result) {
          return result;
        }
      }
      else
      {
        char v11 = 0;
        uint64_t result = (uint64_t)Trie<unsigned int,unsigned long>::insertTrie(v9, a6, &v11);
      }
      *(void *)(result + 8) += a4;
    }
  }
  return result;
}

int64_t NgramCounts<unsigned long>::readNgram(void *a1, uint64_t ***a2, unsigned int a3)
{
  if (!a1) {
    return 0;
  }
  int64_t v3 = a1[1] - *a1;
  if (v3)
  {
    int64_t v3 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
    if (v3 >= a3 || v3 == 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"malformed N-gram count or more than ", 36);
      char v5 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" words per line\n", 16);
      return 0;
    }
    else
    {
      uint64_t v6 = 0;
      a2[v3] = 0;
      do
      {
        uint64_t v7 = (uint64_t **)(*a1 + v6);
        if (*((char *)v7 + 23) < 0) {
          uint64_t v7 = (uint64_t **)*v7;
        }
        *a2++ = v7;
        v6 += 24;
      }
      while (24 * v3 != v6);
    }
  }
  return v3;
}

uint64_t NgramCounts<unsigned long>::readGoogle(uint64_t a1, char *__s, unsigned int a3, unsigned int a4)
{
  size_t v5 = strlen(__s);
  *(_DWORD *)&v27[8] = 0;
  int v28 = 0;
  size_t v6 = v5 + 20;
  int v26 = 0;
  *(void *)long long v27 = (v5 + 20);
  if (v5 != -20) {
    Array<char>::alloc();
  }
  snprintf(0, v6, "%s/1gms/vocab%s", __s, ".gz");
  File::File((File *)v25, (const char *)(*(void *)&v27[4] - v26), "r", 0);
  if (File::error((File *)v25))
  {
    snprintf((char *)(*(void *)&v27[4] - v26), v6, "%s/1gms/vocab", __s);
    File::reopen((File *)v25, (const char *)(*(void *)&v27[4] - v26), "r");
  }
  if (!File::error((File *)v25))
  {
    if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
    {
      uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"reading ", 8);
      size_t v9 = strlen((const char *)(*(void *)&v27[4] - v26));
      char v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)&v27[4] - v26, v9);
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
      char v11 = std::locale::use_facet(&v21, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
      std::locale::~locale(&v21);
      std::ostream::put();
      std::ostream::flush();
    }
    int v12 = NgramCounts<unsigned long>::read(a1, (File *)v25, 1u, a4);
    File::~File((File *)v25);
    if (!v12) {
      goto LABEL_28;
    }
    if (a3 < 2)
    {
      uint64_t v13 = 1;
      goto LABEL_29;
    }
    int v14 = 2;
    while (1)
    {
      snprintf((char *)(*(void *)&v27[4] - v26), v6, "%s/%dgms/%dgm.idx", __s, v14, v14);
      File::File((File *)v25, (const char *)(*(void *)&v27[4] - v26), "r", 0);
      if (File::error((File *)v25)) {
        break;
      }
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      int v24 = 0;
      int v15 = File::getline((File *)v25);
      if (v15)
      {
        strdup(v15);
        operator new[]();
      }
      if (File::error((File *)v25))
      {
        perror((const char *)(*(void *)&v27[4] - v26));
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = 1;
      }
      if (v23) {
        MEMORY[0x1B3EA8630](v23, 0x80C80B8603338);
      }
      File::~File((File *)v25);
      if (v14 + 1 <= a3) {
        char v16 = v13;
      }
      else {
        char v16 = 0;
      }
      ++v14;
      if ((v16 & 1) == 0) {
        goto LABEL_29;
      }
    }
  }
  perror((const char *)(*(void *)&v27[4] - v26));
  File::~File((File *)v25);
LABEL_28:
  uint64_t v13 = 0;
LABEL_29:
  if (*(void *)&v27[4]) {
    MEMORY[0x1B3EA8630](*(void *)&v27[4], 0x1000C8077774924);
  }
  return v13;
}

void sub_1B1E74F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::locale::~locale(&a15);
  File::~File((File *)&a31);
  uint64_t v33 = *(void *)(v31 - 112);
  if (v33) {
    MEMORY[0x1B3EA8630](v33, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t NgramCounts<unsigned long>::readMinCounts(int a1, File *this)
{
  int64_t v3 = File::getline(this);
  if (!v3) {
    return 1;
  }
  if (strcmp(v3, "SRILM_BINARY_COUNTS_001\n"))
  {
    File::ungetline((uint64_t)this);
    operator new[]();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"binary format not yet support in readMinCounts\n", 47);
  return 0;
}

void sub_1B1E75310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    MEMORY[0x1B3EA8630](a18, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void *NgramCounts<unsigned long>::updateCountsMinCounts(void *result, unsigned int a2, unsigned int a3, uint64_t a4, const unsigned int *a5, int a6, uint64_t a7, Vocab *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2 > a3) {
    return result;
  }
  uint64_t v16 = (uint64_t)result;
  if (*(void *)(a4 + 8 * (a2 - 1)) <= (unint64_t)a5)
  {
    unsigned int v17 = -1;
    if (a6)
    {
LABEL_7:
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, Vocab *, uint64_t))(**(void **)(v16 + 24) + 288))(*(void *)(v16 + 24), a7, a8, 100);
      if (!result) {
        return result;
      }
      goto LABEL_13;
    }
  }
  else
  {
    if (!a5) {
      return result;
    }
    uint64_t result = (void *)(*(uint64_t (**)(void, const unsigned int *))(*(void *)result[3] + 240))(result[3], a5);
    unsigned int v17 = result;
    if (result == -1) {
      return result;
    }
    if (a6) {
      goto LABEL_7;
    }
  }
  char v18 = *(uint64_t **)(v16 + 24);
  uint64_t v19 = *v18;
  if (*(unsigned char *)(v16 + 32))
  {
    (*(void (**)(uint64_t *, uint64_t, Vocab *, uint64_t))(v19 + 256))(v18, a7, a8, 100);
  }
  else
  {
    uint64_t v20 = (unsigned int *)(*(uint64_t (**)(uint64_t *))(v19 + 88))(v18);
    (*(void (**)(uint64_t *, uint64_t, Vocab *, uint64_t, void))(*v18 + 272))(v18, a7, a8, 100, *v20);
  }
LABEL_13:
  return NgramCounts<unsigned long>::updateMinCountsHelper(v16, a2, a5, v17, a8, a9, a10, a11);
}

uint64_t NgramCounts<unsigned long>::addCounts(uint64_t a1, unsigned int *a2, _DWORD **a3)
{
  int v4 = *(unsigned __int8 *)(a1 + 152);
  size_t v5 = (_DWORD **)(a1 + 160);
  v12[0] = 0;
  if (v4) {
    uint64_t result = Trie<unsigned int,unsigned int>::findTrie(v5, a2, v12);
  }
  else {
    uint64_t result = (uint64_t)Trie<unsigned int,unsigned long>::insertTrie(v5, a2, v12);
  }
  uint64_t v7 = (void *)result;
  if (result)
  {
    LHashIter<unsigned int,unsigned long>::LHashIter((uint64_t)v12, a3, 0);
    unsigned int v11 = 0;
    while (1)
    {
      uint64_t v8 = (uint64_t *)LHashIter<unsigned int,unsigned long>::next((uint64_t)v12, &v11);
      if (!v8) {
        break;
      }
      uint64_t v9 = *v8;
      char v14 = 0;
      uint64_t v10 = LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(v7, v11, &v14);
      if (!v14) {
        *(_DWORD *)uint64_t v10 = 0;
      }
      *(void *)(v10 + 8) += v9;
    }
    uint64_t result = v13;
    if (v13) {
      return MEMORY[0x1B3EA8630](v13, 0x1000C8052888210);
    }
  }
  return result;
}

void sub_1B1E75648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    MEMORY[0x1B3EA8630](a13, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void NgramCounts<unsigned long>::readMinCounts()
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  long long v2 = 0u;
  long long v3 = 0u;
  long long v0 = 0u;
  long long v1 = 0u;
  operator new[]();
}

void sub_1B1E75A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    MEMORY[0x1B3EA8630](a18, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void *NgramCounts<unsigned long>::updateCountsMinCounts(void *result, unsigned int a2, uint64_t a3, const unsigned int *a4, int a5, void *a6, Vocab *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v10 = (uint64_t)(a6[1] - *a6) >> 2;
  if (v10 <= a2)
  {
    uint64_t v16 = (uint64_t)result;
    if (*(void *)(a3 + 8 * (v10 - 1)) <= (unint64_t)a4)
    {
      unsigned int v17 = -1;
    }
    else
    {
      if (!a4) {
        return result;
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, const unsigned int *))(*(void *)result[3] + 240))(result[3], a4);
      unsigned int v17 = result;
      if (result == -1) {
        return result;
      }
    }
    uint64_t result = (void *)(*(uint64_t (**)(void, void *, Vocab *, uint64_t, BOOL))(**(void **)(v16 + 24)
                                                                                           + 296))(*(void *)(v16 + 24), a6, a7, 100, a5 != 0);
    if (result)
    {
      uint64_t v18 = (a6[1] - *a6) >> 2;
      return NgramCounts<unsigned long>::updateMinCountsHelper(v16, v18, a4, v17, a7, a8, a9, a10);
    }
  }
  return result;
}

uint64_t NgramCounts<unsigned long>::write(uint64_t a1, File *a2)
{
  return NgramCounts<unsigned long>::write(a1, a2, *(_DWORD *)(a1 + 156), 0);
}

uint64_t NgramCounts<unsigned long>::write(uint64_t a1, File *a2, unsigned int a3, unsigned int a4)
{
  long long v8 = (char **)_ZTW14writeBufferTLS();
  long long v9 = *v8;
  if (!*v8)
  {
    unint64_t v10 = v8;
    long long v9 = (char *)malloc_type_calloc(0x2710uLL, 1uLL, 0x100004077774924uLL);
    *unint64_t v10 = v9;
  }
  return NgramCounts<unsigned long>::writeNode(a1, (_DWORD **)(a1 + 160), a2, v9, v9, 1u, a3, a4);
}

uint64_t NgramCounts<unsigned long>::writeNode(uint64_t a1, _DWORD **a2, File *a3, const char *a4, char *a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  if (a8) {
    long long v14 = Vocab::compareIndex(*(Vocab **)(a1 + 24));
  }
  else {
    long long v14 = 0;
  }
  unsigned int v33 = 0;
  LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter((uint64_t)v31, a2, (uint64_t)v14);
  if (a7) {
    BOOL v15 = a6 == a7;
  }
  else {
    BOOL v15 = 1;
  }
  int v16 = v15;
  int v30 = v16;
  while (!File::error(a3))
  {
    uint64_t v17 = LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next((uint64_t)v31, &v33);
    if (!v17) {
      break;
    }
    uint64_t v18 = (const char *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v33);
    long long v19 = v18;
    if (v18)
    {
      long long v20 = &a5[strlen(v18)];
      if (v20 + 1 <= a4 + 10000)
      {
        strcpy(a5, v19);
        if (v30)
        {
          snprintf(ctsBuffer, 0x64uLL, "%lu", *(void *)(v17 + 8));
          File::fprintf(a3, "%s\t%s\n", a4, ctsBuffer);
        }
        if (a7 - 1 >= a6)
        {
          *long long v20 = 32;
          NgramCounts<unsigned long>::writeNode(a1, v17, a3, a4, v20 + 1, a6 + 1, a7, a8);
        }
      }
      else
      {
        *a5 = 48;
        long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"ngram [", 7);
        size_t v22 = strlen(a4);
        long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a4, v22);
        size_t v24 = strlen(v19);
        long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v19, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] exceeds write buffer\n", 23);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"undefined word index ", 21);
      long long v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
    }
  }
  uint64_t result = v32;
  if (v32) {
    return MEMORY[0x1B3EA8630](v32, 0x1000C8052888210);
  }
  return result;
}

void sub_1B1E75F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    MEMORY[0x1B3EA8630](a17, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<unsigned long>::writeBinary(uint64_t a1, File *this, uint64_t a3)
{
  File::fprintf(this, "%s", "SRILM_BINARY_COUNTS_001\n");
  int v6 = a3;
  if (!a3) {
    int v6 = *(_DWORD *)(a1 + 156);
  }
  File::fprintf(this, "maxorder %u\n", v6);
  (*(void (**)(void))(**(void **)(a1 + 24) + 344))();
  off_t v14 = File::ftell(this);
  if ((v14 & 0x8000000000000000) == 0) {
    return NgramCounts<unsigned long>::writeBinaryNode(a1, (_DWORD **)(a1 + 160), 1u, a3, this, &v14);
  }
  long long v8 = File::position((const char **)this, MEMORY[0x1E4FBA240]);
  long long v9 = __error();
  unint64_t v10 = srilm_ts_strerror(*v9);
  size_t v11 = strlen(v10);
  long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  long long v13 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_1B1E76118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

uint64_t NgramCounts<unsigned long>::writeBinaryNode(uint64_t a1, _DWORD **a2, unsigned int a3, uint64_t a4, File *a5, off_t *a6)
{
  unsigned int v11 = a4;
  if (!a4) {
    unsigned int v11 = *(_DWORD *)(a1 + 156);
  }
  if (v11 < a3) {
    return 1;
  }
  if (v11 - a3 >= 4) {
    int v13 = 8;
  }
  else {
    int v13 = 4;
  }
  if (v11 == a3) {
    unsigned int v14 = 2;
  }
  else {
    unsigned int v14 = v13;
  }
  off_t v15 = *a6;
  uint64_t result = writeBinaryCount(a5, 0, v14);
  if (result)
  {
    if (a4) {
      BOOL v16 = a3 > a4;
    }
    else {
      BOOL v16 = 0;
    }
    char v17 = v16;
    char v37 = v17;
    while (1)
    {
      off_t v18 = *a6 + result;
      *a6 = v18;
      if ((v37 & 1) == 0)
      {
        LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter((uint64_t)v39, a2, (uint64_t)SArray_compareKey<unsigned int>);
        unsigned int v38 = 0;
        do
        {
          uint64_t v19 = LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next((uint64_t)v39, &v38);
          if (!v19) {
            break;
          }
          unsigned int v20 = writeBinaryCount(a5, v38, 0);
          if (!v20) {
            break;
          }
          *a6 += v20;
          unint64_t v21 = a3 >= a4 ? *(void *)(v19 + 8) : 0;
          unsigned int v22 = writeBinaryCount(a5, v21, 0);
          if (!v22) {
            break;
          }
          *a6 += v22;
        }
        while (NgramCounts<unsigned long>::writeBinaryNode(a1, v19, a3 + 1, a4, a5, a6));
        if (v40) {
          MEMORY[0x1B3EA8630](v40, 0x1000C8052888210);
        }
        if (v19) {
          return 0;
        }
        off_t v18 = *a6;
      }
      if ((File::fseek(a5, v15, 0) & 0x80000000) != 0) {
        break;
      }
      uint64_t result = writeBinaryCount(a5, v18 - v15, v14);
      if (!result) {
        return result;
      }
      unsigned int v23 = result;
      if (result <= v14)
      {
        if ((File::fseek(a5, v18, 0) & 0x80000000) == 0) {
          return 1;
        }
        break;
      }
      size_t v24 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"increasing offset bytes from ", 29);
      long long v25 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" to ", 4);
      long long v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" (order ", 8);
      long long v27 = (void *)std::ostream::operator<<();
      long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" level ", 7);
      long long v29 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)")\n", 2);
      if ((File::fseek(a5, v15, 0) & 0x80000000) != 0) {
        break;
      }
      *a6 = v15;
      uint64_t result = writeBinaryCount(a5, 0, v23);
      unsigned int v14 = v23;
      if (!result) {
        return result;
      }
    }
    int v30 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
    long long v31 = __error();
    uint64_t v32 = srilm_ts_strerror(*v31);
    size_t v33 = strlen(v32);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
    unint64_t v35 = std::locale::use_facet(v39, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
    std::locale::~locale(v39);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  return result;
}

void sub_1B1E76488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

uint64_t NgramCounts<unsigned long>::parseNgram(Vocab *a1, char *a2, const char **a3, char **a4)
{
  int v5 = (int)a3;
  int v7 = Vocab::parseWords(a1, a2, a3, a4);
  if (v7 == v5) {
    return 0;
  }
  uint64_t v8 = (v7 - 1);
  long long v9 = *(const char **)&a2[8 * v8];
  if (*v9 == 45 || sscanf(v9, "%lu", a4) != 1) {
    return 0;
  }
  *(void *)&a2[8 * v8] = 0;
  return v8;
}

uint64_t NgramCounts<unsigned long>::sumCounts(uint64_t a1, uint64_t a2)
{
  return NgramCounts<unsigned long>::sumNode(a1, a1 + 160, 1u, a2);
}

uint64_t NgramCounts<unsigned long>::sumNode(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 > a4 || !*(void *)a2 || **(_DWORD **)a2 <= 0x1Fu) {
    return *(void *)(a2 + 8);
  }
  LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter((uint64_t)v13, (_DWORD **)a2, 0);
  uint64_t v5 = 0;
  int v12 = 0;
  for (uint64_t i = a3 + 1; ; v5 += NgramCounts<unsigned long>::sumNode(a1, v11, i, a4))
  {
    uint64_t v11 = LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next((uint64_t)v13, &v12);
    if (!v11) {
      break;
    }
  }
  *(void *)(a2 + 8) = v5;
  if (v14) {
    MEMORY[0x1B3EA8630](v14, 0x1000C8052888210);
  }
  return v5;
}

void sub_1B1E76624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    MEMORY[0x1B3EA8630](a14, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<unsigned long>::setCounts(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 156);
  *(_DWORD *)&v10[8] = 0;
  int v11 = 0;
  int v9 = 0;
  *(void *)unint64_t v10 = (v4 + 1);
  if (v4 != -1) {
    Array<unsigned int>::alloc();
  }
  unsigned int v5 = 1;
  do
  {
    TrieIter2<unsigned int,unsigned long>::TrieIter2((uint64_t)v8, (_DWORD **)(a1 + 160), (_DWORD *)(*(void *)&v10[4] - 4 * v9), v5, 0);
    while (1)
    {
      uint64_t v6 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v8);
      if (!v6) {
        break;
      }
      *(void *)(v6 + 8) = a2;
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v8);
    ++v5;
  }
  while (v5 <= *(_DWORD *)(a1 + 156));
  uint64_t result = *(void *)&v10[4];
  if (*(void *)&v10[4]) {
    return MEMORY[0x1B3EA8630](*(void *)&v10[4], 0x1000C8052888210);
  }
  return result;
}

void sub_1B1E7671C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = *(void *)(v10 - 48);
  if (v12) {
    MEMORY[0x1B3EA8630](v12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<unsigned long>::memStats(uint64_t a1, uint64_t *a2)
{
  *a2 += 64;
  (*(void (**)(void))(**(void **)(a1 + 24) + 352))(*(void *)(a1 + 24));
  return Trie<unsigned int,unsigned long>::memStats((_DWORD **)(a1 + 160), a2);
}

uint64_t LHashIter<unsigned int,unsigned long>::next(uint64_t a1, _DWORD *a2)
{
  long long v2 = *(_DWORD **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  unsigned int v10 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  int v9 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,double>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  uint64_t v8 = *(void *)a1 + 16 * v10;
  uint64_t result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 16);
  return result;
}

uint64_t NgramCounts<unsigned long>::readBinaryNode(uint64_t a1, _DWORD **a2, int a3, int a4, File *a5, off_t *a6, uint64_t a7, int *a8)
{
  if (!a4) {
    return 1;
  }
  unint64_t v38 = 0;
  uint64_t result = readBinaryCount(a5, &v38);
  if (!result) {
    return result;
  }
  off_t v17 = v38 + *a6;
  off_t v18 = *a6 + result;
  *a6 = v18;
  if (a3)
  {
    if (v18 < v17)
    {
      uint64_t v19 = (a3 - 1);
      uint64_t v20 = (a4 - 1);
      do
      {
        v39.__locale_ = 0;
        uint64_t result = readBinaryCount(a5, (unint64_t *)&v39);
        if (!result) {
          return result;
        }
        unsigned int locale = v39.__locale_;
        *a6 += result;
        if (a8[1] <= locale)
        {
          char v37 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"word index ", 11);
          long long v28 = (void *)std::ostream::operator<<();
          long long v29 = " out of range\n";
          uint64_t v30 = 14;
          goto LABEL_28;
        }
        unsigned int v22 = *(_DWORD *)Array<unsigned int>::operator[](a8, locale);
        if (v22 != -1)
        {
          if (*(unsigned char *)(a1 + 152))
          {
            LODWORD(v39.__locale_) = 0;
            if (LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a2, v22, &v39))
            {
              uint64_t v23 = (uint64_t)&(*a2)[6 * LODWORD(v39.__locale_) + 2];
LABEL_17:
              v39.__locale_ = 0;
              uint64_t result = readBinaryCount(a5, (unint64_t *)&v39);
              if (!result) {
                return result;
              }
              *(void *)(v23 + 8) += v39.__locale_;
              *a6 += result;
              uint64_t v25 = a1;
              long long v26 = (_DWORD **)v23;
              uint64_t v27 = v19;
              goto LABEL_19;
            }
          }
          else
          {
            LOBYTE(v39.__locale_) = 0;
            size_t v24 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(a2, v22, &v39);
            uint64_t v23 = (uint64_t)v24;
            if (!LOBYTE(v39.__locale_))
            {
              *size_t v24 = 0;
              goto LABEL_17;
            }
            if (v24) {
              goto LABEL_17;
            }
          }
        }
        v39.__locale_ = 0;
        uint64_t result = readBinaryCount(a5, (unint64_t *)&v39);
        if (!result) {
          return result;
        }
        *a6 += result;
        uint64_t v25 = a1;
        long long v26 = a2;
        uint64_t v27 = 0;
LABEL_19:
        uint64_t result = NgramCounts<unsigned long>::readBinaryNode(v25, v26, v27, v20, a5, a6, a7, a8);
        if (!result) {
          return result;
        }
        off_t v18 = *a6;
      }
      while (*a6 < v17);
    }
    if (v18 != v17)
    {
      long long v28 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
      long long v29 = "data misaligned\n";
      uint64_t v30 = 16;
LABEL_28:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      return 0;
    }
    return 1;
  }
  if ((File::fseek(a5, v17, 0) & 0x80000000) == 0)
  {
    *a6 = v17;
    return 1;
  }
  long long v31 = File::offset((uint64_t)a5, MEMORY[0x1E4FBA240]);
  uint64_t v32 = __error();
  size_t v33 = srilm_ts_strerror(*v32);
  size_t v34 = strlen(v33);
  unint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
  uint64_t v36 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale(&v39);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_1B1E76B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *NgramCounts<unsigned long>::updateMinCountsHelper(uint64_t a1, int a2, const unsigned int *a3, unsigned int a4, Vocab *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = (a2 - 1);
  unsigned int v16 = *((_DWORD *)this + v15);
  *((_DWORD *)this + v15) = -1;
  if (Vocab::compare(this, *(const unsigned int **)(a6 + 8 * v15), a3))
  {
    if (*(unsigned char *)(a7 + v15))
    {
      NgramCounts<unsigned long>::addCounts(a1, *(unsigned int **)(a6 + 8 * v15), (_DWORD **)(a8 + 8 * v15));
      *(unsigned char *)(a7 + v15) = 0;
    }
    LHash<unsigned int,double>::clear((void *)(a8 + 8 * v15), 0);
    Vocab::copy(*(void *)(a6 + 8 * v15), (unsigned int *)this, v17);
  }
  if (a4 != -1)
  {
    char v19 = 0;
    uint64_t result = (void *)LHash<unsigned int,double>::insert((void *)(a8 + 8 * v15), a4, &v19);
    ++*result;
    return result;
  }
  if (!*(unsigned char *)(a1 + 152))
  {
    uint64_t result = NgramCounts<unsigned long>::insertCount(a1, (unsigned int *)this, v16);
    if (!result) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t result = NgramCounts<unsigned long>::findCount(a1, (unsigned int *)this, v16);
  if (result) {
LABEL_9:
  }
    *result += a3;
LABEL_10:
  *(unsigned char *)(a7 + v15) = 1;
  return result;
}

uint64_t LHashIter<unsigned int,unsigned long>::LHashIter(uint64_t result, _DWORD **a2, uint64_t a3)
{
  long long v3 = *a2;
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  if (v3)
  {
    *(_DWORD *)(result + 12) = *v3 >> 5;
    *(void *)(result + 16) = a3;
    *(void *)(result + 24) = 0;
    LHashIter<unsigned int,unsigned long>::sortKeys();
  }
  *(_DWORD *)(result + 12) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = 0;
  return result;
}

void LHashIter<unsigned int,unsigned long>::sortKeys()
{
}

void sub_1B1E76E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x1B3EA8630](a12, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,unsigned long> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v10 = (int *)result;
LABEL_2:
  int v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unsigned int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 2;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v11 + 8));
          if ((result & 0x80000000) != 0)
          {
            int v22 = *v11;
            *int v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v11 + 1, (int *)a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v11 + 1, v11 + 2, (int *)a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, (int *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (int *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,unsigned int *>((unsigned int *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    off_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, &v11[v15 >> 1], (int *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11 + 1, v17 - 1, (int *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11 + 2, &v11[v16 + 1], (int *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      int v18 = *v11;
      *int v11 = *v17;
      *off_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(&v11[v15 >> 1], v11, (int *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *(v11 - 1) + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v11 + 8)) & 0x80000000) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>((unsigned int *)v11, a2, a3);
      int v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    char v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>(v11, (int *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,unsigned long> &,unsigned int *>(v11, v19, a3);
    int v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,unsigned long> &,unsigned int *>(v19 + 1, (int *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (unsigned int *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,unsigned long> &,unsigned int *,false>(v10, v19, a3, -v13, a5 & 1);
      int v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,unsigned long> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
      {
        int v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *v10 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) != 0)
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8) {
          break;
        }
        int v15 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v13 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *(unsigned int *)((char *)a1 + v14 + 4) + 8));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          unint64_t v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      int *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == (unsigned int *)a2;
      }
    }
    int v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2) {
      return 1;
    }
  }
}

void quasar::TranslationPhraseInternal::TranslationPhraseInternal(quasar::TranslationPhrase *a1, const quasar::TranslationPhrase *a2)
{
  long long v2 = quasar::TranslationPhrase::TranslationPhrase(a1, a2);
  *((void *)v2 + 17) = 0;
  *((void *)v2 + 18) = 0;
  *((void *)v2 + 19) = 0;
  *((void *)v2 + 21) = 0;
  *((void *)v2 + 22) = 0;
  *((void *)v2 + 23) = 0;
  quasar::MetaInfo::fromJson((quasar::TranslationPhrase *)((char *)v2 + 192));
}

void sub_1B1E776C0(_Unwind_Exception *a1, quasar::MetaInfo *a2, ...)
{
  va_start(va, a2);
  if (v2[191] < 0) {
    operator delete(*v3);
  }
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)v2);
  _Unwind_Resume(a1);
}

void quasar::TranslationPhraseInternal::convertToExternal(long long **this@<X0>, uint64_t a2@<X8>)
{
  quasar::TranslationPhrase::TranslationPhrase((quasar::TranslationPhrase *)a2, (const quasar::TranslationPhrase *)this);
  uint64_t v4 = *(std::string **)(a2 + 16);
  for (uint64_t i = *(void *)(a2 + 24);
        (std::string *)i != v4;
        std::allocator<quasar::TranslationToken>::destroy[abi:ne180100](a2 + 32, i))
  {
    i -= 72;
  }
  *(void *)(a2 + 24) = v4;
  uint64_t v6 = this[17];
  for (j = this[18]; v6 != j; uint64_t v6 = (long long *)((char *)v6 + 136))
  {
    if ((unint64_t)v4 >= *(void *)(a2 + 32))
    {
      uint64_t v4 = (std::string *)std::vector<quasar::TranslationToken>::__push_back_slow_path<quasar::TranslationToken const&>((uint64_t *)(a2 + 16), v6);
    }
    else
    {
      std::allocator<quasar::TranslationToken>::construct[abi:ne180100]<quasar::TranslationToken,quasar::TranslationToken const&>(a2 + 32, v4, v6);
      v4 += 3;
      *(void *)(a2 + 24) = v4;
    }
    *(void *)(a2 + 24) = v4;
  }
  int v8 = (quasar::MetaInfo::Impl **)(this + 24);
  quasar::MetaInfo::json(v8, __p);
  int v9 = (void **)(a2 + 40);
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)int v9 = *(_OWORD *)__p;
  *(void *)(a2 + 56) = v11;
  quasar::MetaInfo::romanization(v8);
}

void sub_1B1E7786C(_Unwind_Exception *a1)
{
  quasar::TranslationPhrase::~TranslationPhrase(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::TranslationPhraseInternal::convertTokensToString(quasar::TranslationPhraseInternal *this)
{
  return quasar::TranslationPhrase::convertTokensToString<quasar::TranslationTokenInternal>((uint64_t *)this + 17);
}

uint64_t quasar::TranslationPhrase::convertTokensToString<quasar::TranslationTokenInternal>(uint64_t *a1)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v2 + v3;
      int v6 = *(char *)(v5 + 23);
      if (v6 >= 0) {
        uint64_t v7 = v5;
      }
      else {
        uint64_t v7 = *(void *)v5;
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        uint64_t v8 = *(void *)(v5 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v7, v8);
      uint64_t v2 = *a1;
      if (*(unsigned char *)(*a1 + v3 + 24))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
        uint64_t v2 = *a1;
      }
      ++v4;
      v3 += 136;
    }
    while (v4 < 0xF0F0F0F0F0F0F0F1 * ((a1[1] - v2) >> 3));
  }
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v14);
}

void sub_1B1E77AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::TranslationPhraseInternal::extractAlignmentProjections(quasar::TranslationPhraseInternal *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (quasar::TranslationPhrase *)quasar::MetaInfo::get((quasar::TranslationPhraseInternal *)((char *)this + 192));
  quasar::TranslationPhrase::extractAlignmentProjections(v3, a2);
}

void quasar::TranslationPhraseInternal::isFromPhrasebook(quasar::TranslationPhraseInternal *this)
{
  uint64_t v1 = quasar::MetaInfo::get((quasar::TranslationPhraseInternal *)((char *)this + 192));
  std::string::basic_string[abi:ne180100]<0>(__p, "status");
  quasar::PTree::getStringOptional(v1, (uint64_t)__p);
}

void sub_1B1E77B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<std::string,char const*>(uint64_t a1, const char **a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = (void *)a1;
    uint64_t v3 = *a2;
    size_t v4 = strlen(*a2);
    if (*((char *)v2 + 23) < 0)
    {
      if (v4 == v2[1])
      {
        if (v4 == -1) {
          goto LABEL_11;
        }
        uint64_t v2 = (void *)*v2;
        return memcmp(v2, v3, v4) == 0;
      }
    }
    else if (v4 == *((unsigned __int8 *)v2 + 23))
    {
      if (v4 == -1) {
LABEL_11:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      return memcmp(v2, v3, v4) == 0;
    }
  }
  return 0;
}

void *quasar::formatNBestlist(void *result, uint64_t a2, uint64_t a3)
{
  if (result[1] != *result)
  {
    uint64_t v3 = (std::vector<std::string> *)a3;
    uint64_t v4 = 0;
    long long v50 = (std::allocator<std::string> *)(a3 + 16);
    std::__split_buffer<std::string>::pointer v52 = (void **)*MEMORY[0x1E4FBA408];
    long long v53 = *(void ***)(MEMORY[0x1E4FBA408] + 64);
    uint64_t v54 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    long long v51 = result;
    do
    {
      uint64_t v5 = result;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v77);
      uint64_t v57 = v4;
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v73, (const quasar::TranslationPhraseInternal *)(*v5 + 200 * v4));
      memset(&v72, 0, sizeof(v72));
      std::vector<quasar::TranslationTokenInternal>::__init_with_size[abi:ne180100]<quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(&v72, v74, v75, 0xF0F0F0F0F0F0F0F1 * ((v75 - v74) >> 3));
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v68);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v64);
      std::string::size_type v6 = v72.__r_.__value_.__r.__words[0];
      if (v72.__r_.__value_.__l.__size_ != v72.__r_.__value_.__r.__words[0])
      {
        unint64_t v7 = 0;
        do
        {
          if (*(void *)(v6 + 136 * v7 + 32) != *(void *)(v6 + 136 * v7 + 40))
          {
            uint64_t v8 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"-", 1);
            std::ostream::operator<<();
            if (*(void *)(v72.__r_.__value_.__r.__words[0] + 136 * v7 + 40)
               - *(void *)(v72.__r_.__value_.__r.__words[0] + 136 * v7 + 32) != 4)
            {
              uint64_t v9 = 1;
              do
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)",", 1);
                unsigned int v10 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"-", 1);
                std::ostream::operator<<();
                ++v9;
              }
              while (v9 != (uint64_t)(*(void *)(v72.__r_.__value_.__r.__words[0] + 136 * v7 + 40)
                                    - *(void *)(v72.__r_.__value_.__r.__words[0] + 136 * v7 + 32)) >> 2);
            }
          }
          uint64_t v11 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
          std::ostream::operator<<();
          std::string::size_type v6 = v72.__r_.__value_.__r.__words[0];
          unint64_t v12 = 0xF0F0F0F0F0F0F0F1
              * ((uint64_t)(v72.__r_.__value_.__l.__size_ - v72.__r_.__value_.__r.__words[0]) >> 3);
          if (v7 < v12 - 1)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" ", 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" ", 1);
            std::string::size_type v6 = v72.__r_.__value_.__r.__words[0];
            unint64_t v12 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v72.__r_.__value_.__l.__size_ - v72.__r_.__value_.__r.__words[0]) >> 3);
          }
          ++v7;
        }
        while (v7 != v12);
        uint64_t v3 = (std::vector<std::string> *)a3;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"_", 1);
      char v13 = (void *)std::ostream::operator<<();
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ||| ", 5);
      int v15 = *(char *)(a2 + 23);
      if (v15 >= 0) {
        uint64_t v16 = a2;
      }
      else {
        uint64_t v16 = *(void *)a2;
      }
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v17 = *(void *)(a2 + 8);
      }
      int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      char v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ||| ", 5);
      quasar::TranslationPhrase::convertTokensToString<quasar::TranslationTokenInternal>((uint64_t *)&v74);
      if (SHIBYTE(__v.__end_) >= 0) {
        p_v = &__v;
      }
      else {
        p_v = __v.__first_;
      }
      if (SHIBYTE(__v.__end_) >= 0) {
        uint64_t end_high = HIBYTE(__v.__end_);
      }
      else {
        uint64_t end_high = (uint64_t)__v.__begin_;
      }
      int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_v, end_high);
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" ||| ", 5);
      std::stringbuf::str();
      if (v63 >= 0) {
        size_t v24 = v62;
      }
      else {
        size_t v24 = (void **)v62[0];
      }
      if (v63 >= 0) {
        uint64_t v25 = HIBYTE(v63);
      }
      else {
        uint64_t v25 = (uint64_t)v62[1];
      }
      long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ||| ", 5);
      std::stringbuf::str();
      if ((v61 & 0x80u) == 0) {
        long long v28 = v60;
      }
      else {
        long long v28 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        uint64_t v29 = v61;
      }
      else {
        uint64_t v29 = (uint64_t)v60[1];
      }
      uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" ||| ", 5);
      long long v31 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" ", 1);
      uint64_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
      size_t v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" ", 1);
      size_t v34 = (void *)std::ostream::operator<<();
      unint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"|||", 3);
      quasar::MetaInfo::json(&v76, __p);
      if ((v59 & 0x80u) == 0) {
        uint64_t v36 = __p;
      }
      else {
        uint64_t v36 = (void **)__p[0];
      }
      if ((v59 & 0x80u) == 0) {
        uint64_t v37 = v59;
      }
      else {
        uint64_t v37 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
      if ((char)v59 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v63) < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(__v.__end_) < 0) {
        operator delete(__v.__first_);
      }
      std::stringbuf::str();
      std::vector<std::string>::pointer end = v3->__end_;
      value = v3->__end_cap_.__value_;
      if (end >= value)
      {
        unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v3->__begin_) >> 3);
        unint64_t v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v3->__begin_) >> 3);
        if (2 * v43 > v42) {
          unint64_t v42 = 2 * v43;
        }
        if (v43 >= 0x555555555555555) {
          unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v44 = v42;
        }
        __v.__end_cap_.__value_ = v50;
        if (v44) {
          long long v45 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v50, v44);
        }
        else {
          long long v45 = 0;
        }
        long long v46 = v45 + v41;
        __v.__first_ = v45;
        __v.__begin_ = v46;
        __v.__end_cap_.__value_ = &v45[v44];
        long long v47 = *(_OWORD *)v62;
        v46->__r_.__value_.__r.__words[2] = v63;
        *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
        v62[1] = 0;
        int64_t v63 = 0;
        v62[0] = 0;
        __v.__end_ = v46 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(v3, &__v);
        uint64_t v48 = v3->__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v49 = SHIBYTE(v63);
        v3->__end_ = v48;
        if (v49 < 0) {
          operator delete(v62[0]);
        }
      }
      else
      {
        long long v40 = *(_OWORD *)v62;
        end->__r_.__value_.__r.__words[2] = v63;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v40;
        v3->__end_ = end + 1;
      }
      v64[0] = v52;
      *(void *)((char *)v64 + (void)*(v52 - 3)) = v53;
      v65[0] = v54;
      v65[1] = MEMORY[0x1E4FBA470] + 16;
      if (v66 < 0) {
        operator delete((void *)v65[9]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1B3EA8520](&v67);
      v68[0] = v52;
      *(void ***)((char *)v68 + (void)*(v52 - 3)) = v53;
      v69[0] = v54;
      v69[1] = MEMORY[0x1E4FBA470] + 16;
      if (v70 < 0) {
        operator delete((void *)v69[9]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1B3EA8520](&v71);
      v68[0] = (void **)&v72;
      std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100](v68);
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v73);
      v77[0] = v52;
      *(void *)((char *)v77 + (void)*(v52 - 3)) = v53;
      v78[0] = v54;
      v78[1] = MEMORY[0x1E4FBA470] + 16;
      if (v79 < 0) {
        operator delete((void *)v78[9]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1B3EA8520](&v80);
      ++v4;
      BOOL result = v51;
      uint64_t v3 = (std::vector<std::string> *)a3;
    }
    while (0x8F5C28F5C28F5C29 * ((uint64_t)(v51[1] - *v51) >> 3) > v57 + 1);
  }
  return result;
}

void sub_1B1E784E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  a39 = a18;
  *(uint64_t *)((char *)&a39 + *(void *)(a18 - 24)) = a19;
  a41 = a20;
  a42 = MEMORY[0x1E4FBA470] + 16;
  if (a55 < 0) {
    operator delete(a50);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](a15);
  a72 = a18;
  *(uint64_t *)((char *)&a72 + *(void *)(a18 - 24)) = a19;
  STACK[0x200] = a20;
  STACK[0x208] = MEMORY[0x1E4FBA470] + 16;
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](a16);
  a72 = (uint64_t)&STACK[0x308];
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&STACK[0x320]);
  STACK[0x3E8] = a18;
  *(unint64_t *)((char *)&STACK[0x3E8] + *(void *)(a18 - 24)) = a19;
  STACK[0x3F8] = a20;
  STACK[0x400] = MEMORY[0x1E4FBA470] + 16;
  if (SLOBYTE(STACK[0x457]) < 0) {
    operator delete((void *)STACK[0x440]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](a17);
  _Unwind_Resume(a1);
}

uint64_t quasar::json2Ptree(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(result + 8);
  }
  if (v1)
  {
    std::istringstream::basic_istringstream[abi:ne180100](&v2, (const std::string *)result, 8);
    quasar::PTree::readJson();
  }
  return result;
}

void quasar::ptree2Json()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  quasar::PTree::writeJson();
}

void sub_1B1E78CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::backupMetaInfo(quasar::PTree *a1, uint64_t a2, const void **a3)
{
  uint64_t v6 = quasar::PTree::begin(a1);
  uint64_t v7 = quasar::PTree::end(a1);
  if (v6 != v7)
  {
    uint64_t v8 = v7;
    do
    {
      if (a2 + 8 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a2, (const void **)v6))
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (const void **)v6, (uint64_t)&v10);
        if (*(char *)(v6 + 23) < 0) {
          operator delete(*(void **)v6);
        }
        long long v9 = v10;
        *(void *)(v6 + 16) = v11;
        *(_OWORD *)uint64_t v6 = v9;
      }
      v6 += 88;
    }
    while (v6 != v8);
  }
}

void sub_1B1E78FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::join<std::vector<quasar::TranslationTokenInternal>>(uint64_t *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::TranslationTokenInternal>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B1E79144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v6 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  long long v10 = v7;
  uint64_t v11 = &v7[136 * v3];
  char v13 = &v7[136 * v6];
  std::allocator<quasar::TranslationTokenInternal>::construct[abi:ne180100]<quasar::TranslationTokenInternal,quasar::TranslationTokenInternal>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 136;
  std::vector<quasar::TranslationTokenInternal>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1E792F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TranslationToken>::__push_back_slow_path<quasar::TranslationToken const&>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  long long v10 = v7;
  uint64_t v11 = (std::string *)&v7[72 * v3];
  char v13 = &v7[72 * v6];
  std::allocator<quasar::TranslationToken>::construct[abi:ne180100]<quasar::TranslationToken,quasar::TranslationToken const&>(a1 + 16, v11, a2);
  unint64_t v12 = v11 + 3;
  std::vector<quasar::TranslationToken>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::TranslationToken>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1E79418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TranslationToken>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<quasar::TranslationToken>::construct[abi:ne180100]<quasar::TranslationToken,quasar::TranslationToken const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  __int16 v6 = *((_WORD *)a3 + 12);
  this[1].__r_.__value_.__l.__size_ = 0;
  LOWORD(this[1].__r_.__value_.__l.__data_) = v6;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  __n128 result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[1].__r_.__value_.__l.__size_, *((const void **)a3 + 4), *((void *)a3 + 5), (uint64_t)(*((void *)a3 + 5) - *((void *)a3 + 4)) >> 2);
  std::string::size_type v8 = *((void *)a3 + 7);
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = *((_DWORD *)a3 + 16);
  this[2].__r_.__value_.__l.__size_ = v8;
  return result;
}

void sub_1B1E794AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::TranslationToken>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationToken>,std::reverse_iterator<quasar::TranslationToken*>,std::reverse_iterator<quasar::TranslationToken*>,std::reverse_iterator<quasar::TranslationToken*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationToken>,std::reverse_iterator<quasar::TranslationToken*>,std::reverse_iterator<quasar::TranslationToken*>,std::reverse_iterator<quasar::TranslationToken*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 72);
      *(void *)(v7 - 56) = *(void *)(a3 - 56);
      *(_OWORD *)(v7 - 72) = v8;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 72) = 0;
      *(_WORD *)(v7 - 48) = *(_WORD *)(a3 - 48);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 40) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 72;
      *((void *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,std::reverse_iterator<quasar::TranslationToken*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,std::reverse_iterator<quasar::TranslationToken*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,std::reverse_iterator<quasar::TranslationToken*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,std::reverse_iterator<quasar::TranslationToken*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::TranslationToken>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::TranslationToken>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::TranslationToken>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::TranslationToken>::destroy[abi:ne180100](v4, i - 72);
  }
}

void *quasar::joinToStream<std::vector<quasar::TranslationTokenInternal>>(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v6 = result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      uint64_t result = quasar::operator<<(v6, v3);
      char v7 = 0;
      v3 += 136;
    }
    while (v3 != v4);
  }
  return result;
}

unsigned char *quasar::GeoMemoriesConfig::GeoMemoriesConfig(unsigned char *this)
{
  *this = 0;
  return this;
}

uint64_t quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::OnlineLASLmRescoringSpeculativeBeamSearchDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A58DC0;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_WORD *)(v3 + 496) = 257;
  *(void *)(v3 + 500) = 0x8000001F4;
  *(_DWORD *)(v3 + 508) = 0;
  *(void *)(v3 + 512) = 0x3C23D70A00000000;
  *(_OWORD *)(v3 + 520) = xmmword_1B257E560;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 536), "");
  *(void *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_DWORD *)(a1 + 616) = 1065353216;
  *(unsigned char *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(unsigned char *)(a1 + 712) = 1;
  *(_OWORD *)(a1 + 720) = xmmword_1B257E570;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 1065353216;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  uint64_t v4 = (char *)operator new(0xA8uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F0A60678;
  *((void *)v4 + 19) = 0;
  *((void *)v4 + 20) = 0;
  *((void *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(a1 + 856) = v4 + 24;
  *(void *)(a1 + 864) = v4;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(void *)(a1 + 1008) = 0x300000008;
  *(unsigned char *)(a1 + 1016) = 0;
  *(unsigned char *)(a1 + 57) = 0;
  return a1;
}

void sub_1B1E7993C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<kaldi::quasar::OnlineLASAttentionChecker>::reset[abi:ne180100]((kaldi::quasar::OnlineLASAttentionChecker **)(v2 + 848), 0);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)(v2 + 840), 0);
  std::unique_ptr<kaldi::quasar::CEStatelessDecoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessDecoderNet **)(v2 + 832), 0);
  std::unique_ptr<kaldi::quasar::CEStatelessEncoderNet>::reset[abi:ne180100](v5, 0);
  long long v8 = *(std::__shared_weak_count **)(v2 + 808);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 792);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 776);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v2 + 760);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  unint64_t v12 = *(std::__shared_weak_count **)(v2 + 744);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  char v13 = *(std::__shared_weak_count **)(v2 + 704);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  long long v14 = *(std::__shared_weak_count **)(v2 + 688);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (*(char *)(v2 + 679) < 0) {
    operator delete(*(void **)(v2 + 656));
  }
  if (*(char *)(v2 + 655) < 0) {
    operator delete(*v6);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 559) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 495) < 0) {
    operator delete(*(void **)(v2 + 472));
  }
  if (*(char *)(v2 + 471) < 0) {
    operator delete(*(void **)(v2 + 448));
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v2);
  _Unwind_Resume(a1);
}

void quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::~OnlineLASLmRescoringSpeculativeBeamSearchDecoder(quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder *this)
{
  *(void *)this = &unk_1F0A58DC0;
  if (*((char *)this + 983) < 0) {
    operator delete(*((void **)this + 120));
  }
  if (*((char *)this + 959) < 0) {
    operator delete(*((void **)this + 117));
  }
  if (*((char *)this + 935) < 0) {
    operator delete(*((void **)this + 114));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 113);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 895) < 0) {
    operator delete(*((void **)this + 109));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 108);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::unique_ptr<kaldi::quasar::OnlineLASAttentionChecker>::reset[abi:ne180100]((kaldi::quasar::OnlineLASAttentionChecker **)this + 106, 0);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)this + 105, 0);
  std::unique_ptr<kaldi::quasar::CEStatelessDecoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessDecoderNet **)this + 104, 0);
  std::unique_ptr<kaldi::quasar::CEStatelessEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessEncoderNet **)this + 103, 0);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 101);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 99);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  char v7 = (std::__shared_weak_count *)*((void *)this + 95);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 88);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 86);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*((char *)this + 679) < 0) {
    operator delete(*((void **)this + 82));
  }
  if (*((char *)this + 655) < 0) {
    operator delete(*((void **)this + 79));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 584);
  uint64_t v11 = (void **)((char *)this + 560);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::~OnlineLASLmRescoringSpeculativeBeamSearchDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "las-lm-rescoring-speculative-beam-search-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 211, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  kaldi::BeamSearchDecoderOptions::Register((uint64_t)(this + 62), (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[107], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS encoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS decoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "batch size");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 532, (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "substring-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Substring delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 67), (uint64_t)v4, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiters");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of token delimiters");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 70), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "split-tokens-by-character");
  std::string::basic_string[abi:ne180100]<0>(v4, "split tokens by character");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 78), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lexicon-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Lexicon FST (to be used for re-tokenization)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 79), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "subword-sym-table-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Subword symbol table");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 109), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LM FST (to be used for re-tokenization)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 82), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-scale");
  std::string::basic_string[abi:ne180100]<0>(v4, "Scaling factor to use for LM weights");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 102), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "subword-oov-symbol");
  std::string::basic_string[abi:ne180100]<0>(v4, "The subword OOV token symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 114), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "word-oov-symbol");
  std::string::basic_string[abi:ne180100]<0>(v4, "The word-level OOV token symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 117), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "word-boundary-symbol");
  std::string::basic_string[abi:ne180100]<0>(v4, "The word boundary subword token symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 120), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mapping-cache-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Cache size to use for lazy FST mapping operations");
  quasar::SystemConfig::Register<long long>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 91), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "speculative-steps");
  std::string::basic_string[abi:ne180100]<0>(v4, "steps to decode beyond attention checks");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 126), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rollback-steps");
  std::string::basic_string[abi:ne180100]<0>(v4, "steps to rollback before each speculative decoder");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1012, (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "speculative-catchup");
  std::string::basic_string[abi:ne180100]<0>(v4, "Catch up at the end of utterance by returning speculative predictions");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 127), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "unchecked-attention-heads");
  std::string::basic_string[abi:ne180100]<0>(v4, "Do not perform checks for attention heads at these indexes");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 73), (uint64_t)v4, 0, 238, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1E7A444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::finishInit(quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder *this)
{
}

void sub_1B1E7AC18()
{
  MEMORY[0x1B3EA8670](v0, 0x10A0C40453F11E2);
  JUMPOUT(0x1B1E7ACC0);
}

void sub_1B1E7AC38()
{
  MEMORY[0x1B3EA8670](v0, 0x10B0C40FD238674);
  JUMPOUT(0x1B1E7ACC8);
}

void sub_1B1E7AC9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1E7ACC0);
}

void sub_1B1E7ACBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

float quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::preProcessPath(uint64_t a1, void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a2 + 24))(a2);
  if (v4 != -1)
  {
    uint64_t v6 = v4;
    uint64_t v7 = 0xFFFFFFFFLL;
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a2 + 32))(&v50, a2, v6);
      LODWORD(__p[0]) = HIDWORD(v50);
      LODWORD(v33) = v50;
      LODWORD(v30) = 2139095040;
      LODWORD(v24) = 2139095040;
      float result = *(float *)&v50;
      if (*(float *)&v50 != INFINITY) {
        break;
      }
      float result = *(float *)__p;
      if (*(float *)__p != *(float *)&v24) {
        break;
      }
      if ((*(uint64_t (**)(void *, uint64_t, float))(*a2 + 40))(a2, v6, *(float *)__p) != 1
        && quasar::gLogLevel >= 1)
      {
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Invalid path FST. State ", 24);
        uint64_t v9 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" has ", 5);
        (*(void (**)(void *, uint64_t))(*a2 + 40))(a2, v6);
        uint64_t v10 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" arcs", 5);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v33);
      }
      *(void *)&long long v33 = &unk_1F0A3E8A0;
      *((void *)&v34 + 1) = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a2);
      uint64_t v11 = a2[1];
      *((void *)&v33 + 1) = *(void *)(*(void *)(v11 + 64) + 8 * (int)v6);
      *(void *)&long long v34 = v11 + 8;
      uint64_t v12 = *(void *)(*((void *)&v33 + 1) + 24) + 20 * *((void *)&v34 + 1);
      uint64_t v30 = *(void *)v12;
      float v13 = *(float *)(v12 + 8);
      float v14 = *(float *)(v12 + 12);
      unsigned int v32 = *(_DWORD *)(v12 + 16);
      LODWORD(v31) = 0;
      *((float *)&v31 + 1) = v13 + v14;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::SetValue((uint64_t)&v33, (uint64_t)&v30);
      LODWORD(__p[0]) = *(_DWORD *)(a1 + 1000);
      HIDWORD(__p[0]) = __p[0];
      __p[1] = 0;
      int v28 = v6;
      (*(void (**)(void *, uint64_t, void **))(*a2 + 208))(a2, v6, __p);
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 896) + 88))(__p);
      uint64_t v15 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 560), *(void *)(a1 + 568), (unsigned __int8 **)__p);
      uint64_t v16 = *(void *)(a1 + 568);
      (*(void (**)(unint64_t *__return_ptr, void *, void))(*a2 + 32))(&v24, a2, v32);
      float v53 = *((float *)&v24 + 1);
      int v54 = v24;
      int v52 = 2139095040;
      float v51 = INFINITY;
      BOOL v17 = *(float *)&v24 != INFINITY || v53 != v51;
      BOOL v18 = !quasar::isAscii((uint64_t *)__p);
      if (v15 != v16) {
        BOOL v18 = 1;
      }
      if (v18 || v17)
      {
        if (v7 != -1)
        {
          unint64_t v24 = __PAIR64__(*(void *)(a1 + 984), v30);
          uint64_t v25 = v31;
          int v26 = v32;
          (*(void (**)(void *, uint64_t, unint64_t *))(*a2 + 208))(a2, v7, &v24);
          uint64_t v7 = 0xFFFFFFFFLL;
        }
      }
      else
      {
        isAsciuint64_t i = quasar::isAscii((uint64_t *)__p);
        if (v30) {
          BOOL v20 = isAscii;
        }
        else {
          BOOL v20 = 0;
        }
        if (v20)
        {
          uint64_t v21 = (*(uint64_t (**)(void *))(*a2 + 200))(a2);
          uint64_t v22 = v21;
          if (v7 == -1) {
            uint64_t v23 = v6;
          }
          else {
            uint64_t v23 = v7;
          }
          unint64_t v24 = v30;
          uint64_t v25 = v31;
          int v26 = v21;
          (*(void (**)(void *, uint64_t, unint64_t *))(*a2 + 208))(a2, v23, &v24);
          uint64_t v7 = v22;
        }
      }
      uint64_t v6 = v32;
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return result;
}

void sub_1B1E7B174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::composeNbestLatticePathsWithFst(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a3 + 224))(a3);
  uint64_t v7 = 0;
  long long v8 = 0;
  uint64_t v9 = 0;
  fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2, (uint64_t *)&v7);
  char v5 = v7;
  if (v7 != v8)
  {
    quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::preProcessPath(a1, v7);
    fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)v5);
    fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase((uint64_t)v5, *(void *)(a1 + 768));
  }
  uint64_t v6 = (void **)&v7;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_1B1E7B3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  a18 = (void **)&a20;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::runImpl(uint64_t a1, uint64_t a2, std::vector<std::wstring> **a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  quasar::SymbolTableList::clear((quasar::SymbolTableList *)(*a3)[19].__end_cap_.__value_);
  value = (uint64_t *)(*v4)[19].__end_cap_.__value_;
  long long v8 = *(std::__shared_weak_count **)(a1 + 864);
  uint64_t v75 = *(void *)(a1 + 856);
  uint64_t v76 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SymbolTableList::addSymbolTable(value, &v75, 0, -1);
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  kaldi::quasar::OnlineLASSpeculativeDecodable::OnlineLASSpeculativeDecodable((kaldi::quasar::OnlineLASSpeculativeDecodable *)v74, *(kaldi::quasar::CEStatelessEncoderNet **)(a1 + 824), *(kaldi::quasar::CEStatelessDecoderNet **)(a1 + 832), *(kaldi::OnlineFeatureMatrix **)a2, *(const kaldi::quasar::OnlineLASAttentionChecker **)(a1 + 848), *(_DWORD *)(a1 + 532), *(_DWORD *)(a1 + 1008), *(_DWORD *)(a1 + 1012), *(unsigned char *)(a1 + 1016));
  uint64_t v72 = 0;
  __src = 0;
  uint64_t v73 = 0;
  uint64_t v69 = 0;
  uint64_t v68 = 0;
  uint64_t v70 = 0;
  memset(&v67, 0, sizeof(v67));
  kaldi::BeamSearchDecoder::InitDecoding(*(kaldi::BeamSearchDecoder **)(a1 + 840));
  std::string::size_type v9 = 0;
  long long v42 = (uint64_t *)(a1 + 560);
  __s2 = 0;
  uint64_t v41 = a1 + 536;
  long long v45 = v4;
  uint64_t v44 = a1;
  while (1)
  {
    BOOL v10 = kaldi::BeamSearchDecoder::Finished(*(kaldi::BeamSearchDecoder **)(a1 + 840));
    uint64_t v11 = *(kaldi::BeamSearchDecoder **)(a1 + 840);
    if (v10) {
      goto LABEL_57;
    }
    memset(&v77, 0, sizeof(v77));
    if ((int)kaldi::BeamSearchDecoder::AdvanceDecoding(v11, (uint64_t)v74, 1u) >= 1) {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
    }
    if (*(int *)(a1 + 1008) >= 1
      && *(unsigned char *)(a1 + 1016)
      && kaldi::quasar::OnlineLASSpeculativeDecodable::EncodingFinished((kaldi::quasar::OnlineLASSpeculativeDecodable *)v74))
    {
      int v12 = 3;
    }
    else
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v77, (char *)__src, v72, (v72 - (uint64_t)__src) >> 2);
      uint64_t v13 = *(void *)(a1 + 840);
      if (&v68 != (void **)(v13 + 232)) {
        std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(&v68, *(uint64_t **)(v13 + 232), *(uint64_t **)(v13 + 240), (uint64_t)(*(void *)(v13 + 240) - *(void *)(v13 + 232)) >> 3);
      }
      float v14 = v68;
      uint64_t v15 = v69;
      std::string::size_type size = (_DWORD *)v77.__r_.__value_.__l.__size_;
      while (v14 != v15)
      {
        if ((unint64_t)size >= v77.__r_.__value_.__r.__words[2])
        {
          BOOL v18 = (_DWORD *)v77.__r_.__value_.__r.__words[0];
          uint64_t v19 = (uint64_t)((uint64_t)size - v77.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          int64_t v21 = v77.__r_.__value_.__r.__words[2] - v77.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v77.__r_.__value_.__r.__words[2] - v77.__r_.__value_.__r.__words[0]) >> 1 > v20) {
            unint64_t v20 = v21 >> 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v77.__r_.__value_.__r.__words[2], v22);
            std::string::size_type size = (_DWORD *)v77.__r_.__value_.__l.__size_;
            BOOL v18 = (_DWORD *)v77.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v23 = 0;
          }
          unint64_t v24 = &v23[4 * v19];
          *(_DWORD *)unint64_t v24 = *v14;
          std::string::size_type v17 = (std::string::size_type)(v24 + 4);
          while (size != v18)
          {
            int v25 = *--size;
            *((_DWORD *)v24 - 1) = v25;
            v24 -= 4;
          }
          v77.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
          v77.__r_.__value_.__l.__size_ = v17;
          v77.__r_.__value_.__r.__words[2] = (std::string::size_type)&v23[4 * v22];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *std::string::size_type size = *v14;
          std::string::size_type v17 = (std::string::size_type)(size + 1);
        }
        v77.__r_.__value_.__l.__size_ = v17;
        v14 += 2;
        std::string::size_type size = (_DWORD *)v17;
      }
      if ((_DWORD *)((char *)size - v77.__r_.__value_.__r.__words[0]) != (_DWORD *)(v9 - (void)__s2)
        || memcmp(v77.__r_.__value_.__l.__data_, __s2, (size_t)size - v77.__r_.__value_.__r.__words[0]))
      {
        int v26 = kaldi::quasar::OnlineLASSpeculativeDecodable::FrameOffset((kaldi::quasar::OnlineLASSpeculativeDecodable *)v74);
        a1 = v44;
        uint64_t v4 = v45;
        uint64_t v27 = *v45;
        LODWORD(v27[24].__begin_) = v26;
        quasar::SymbolTableList::lookup((uint64_t *)v27[19].__end_cap_.__value_, (int **)&v77, (uint64_t *)&v27[2], (char **)&v27[3], 1);
        if (*(unsigned char *)(a2 + 561))
        {
          if (*(void *)(v44 + 568) != *(void *)(v44 + 560))
          {
            quasar::formatResults((uint64_t *)&(*v45)[2], v42, v41, *(unsigned __int8 *)(v44 + 624), &__p);
            int v28 = *v45;
            std::vector<std::string>::__vdeallocate(*v45 + 2);
            *(_OWORD *)&v28[2].__begin_ = __p;
            v28[2].__end_cap_.__value_ = (std::wstring *)v48;
            *(void *)&long long v48 = 0;
            long long __p = 0uLL;
            v66[0] = (void **)&__p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v66);
          }
          char v29 = *v45;
          std::vector<std::wstring>::pointer end = v67.__end_;
          std::__split_buffer<std::string>::pointer begin = (unsigned __int8 *)v67.__begin_;
          unsigned int v32 = (unsigned __int8 *)(*v45)[2].__begin_;
          if ((char *)v67.__end_ - (char *)v67.__begin_ == (char *)(*v45)[2].__end_ - (char *)v32)
          {
            while (begin != (unsigned __int8 *)end)
            {
              if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&__p, begin, v32))
              {
                char v29 = *v45;
                goto LABEL_48;
              }
              begin += 24;
              v32 += 24;
            }
            a1 = v44;
            uint64_t v4 = v45;
          }
          else
          {
LABEL_48:
            std::vector<std::wstring>::pointer v33 = v29[23].__end_;
            uint64_t v34 = *(unsigned int *)(*(void *)a4 + 12);
            memset(v66, 0, sizeof(v66));
            memset(v65, 0, sizeof(v65));
            memset(v64, 0, sizeof(v64));
            LOBYTE(__p) = 0;
            std::string::basic_string[abi:ne180100]<0>((void *)&__p + 1, "▁");
            LOWORD(v40) = 0;
            (*(void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring> *, uint64_t, uint64_t, void, void, void ***, void **, void **, int, long long *))(v33->__r_.__value_.__r.__words[0] + 24))(v33, v29 + 2, v34, 1, 0, 0, v66, v65, v64, v40, &__p);
            a1 = v44;
            uint64_t v4 = v45;
            if (SHIBYTE(v48) < 0) {
              operator delete(*((void **)&__p + 1));
            }
            *(void *)&long long __p = v64;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            *(void *)&long long __p = v65;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            *(void *)&long long __p = v66;
            std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            if (&v67 != &(*v45)[2]) {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v67, (std::string *)(*v45)[2].__begin_, (long long *)(*v45)[2].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)(*v45)[2].__end_ - (char *)(*v45)[2].__begin_) >> 3));
            }
          }
        }
        if (__s2) {
          operator delete(__s2);
        }
        int v12 = 0;
        std::string::size_type v9 = v77.__r_.__value_.__l.__size_;
        __s2 = (void *)v77.__r_.__value_.__r.__words[0];
        goto LABEL_55;
      }
      int v12 = 0;
      a1 = v44;
      uint64_t v4 = v45;
    }
    if (v77.__r_.__value_.__r.__words[0])
    {
      v77.__r_.__value_.__l.__size_ = v77.__r_.__value_.__r.__words[0];
      operator delete(v77.__r_.__value_.__l.__data_);
    }
LABEL_55:
    if (v12 == 3)
    {
      uint64_t v11 = *(kaldi::BeamSearchDecoder **)(a1 + 840);
LABEL_57:
      kaldi::BeamSearchDecoder::FinalizeDecoding(v11);
      signed int v35 = kaldi::quasar::OnlineLASSpeculativeDecodable::FrameOffset((kaldi::quasar::OnlineLASSpeculativeDecodable *)v74);
      for (i = *v4; ; signed int v35 = LODWORD(i[24].__begin_) + 1)
      {
        LODWORD(i[24].__begin_) = v35;
        BOOL IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)a2, v35, 1);
        uint64_t i = *v4;
        if (!IsValidFrame) {
          break;
        }
      }
      WORD2(i[24].__begin_) = 257;
      BOOL v38 = kaldi::BeamSearchDecoder::ReachedFinal(*(kaldi::BeamSearchDecoder **)(a1 + 840), -1);
      char v39 = quasar::gLogLevel < 4 || v38;
      if ((v39 & 1) == 0)
      {
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Decoder did not reach end-state, outputting partial traceback.", 62);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
      }
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
    }
  }
}

void sub_1B1E7C268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a47);
  STACK[0x270] = (unint64_t)&STACK[0x288];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  long long v49 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v49;
    operator delete(v49);
  }
  long long v50 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v50;
    operator delete(v50);
  }
  if (v47) {
    operator delete(v47);
  }
  kaldi::quasar::OnlineLASSpeculativeDecodable::~OnlineLASSpeculativeDecodable((kaldi::quasar::OnlineLASSpeculativeDecodable *)&STACK[0x2D0]);
  _Unwind_Resume(a1);
}

kaldi::quasar::CEStatelessEncoderNet *std::unique_ptr<kaldi::quasar::CEStatelessEncoderNet>::reset[abi:ne180100](kaldi::quasar::CEStatelessEncoderNet **a1, kaldi::quasar::CEStatelessEncoderNet *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::CEStatelessEncoderNet::~CEStatelessEncoderNet(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

kaldi::quasar::CEStatelessDecoderNet *std::unique_ptr<kaldi::quasar::CEStatelessDecoderNet>::reset[abi:ne180100](kaldi::quasar::CEStatelessDecoderNet **a1, kaldi::quasar::CEStatelessDecoderNet *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::CEStatelessDecoderNet::~CEStatelessDecoderNet(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

kaldi::quasar::OnlineLASAttentionChecker *std::unique_ptr<kaldi::quasar::OnlineLASAttentionChecker>::reset[abi:ne180100](kaldi::quasar::OnlineLASAttentionChecker **a1, kaldi::quasar::OnlineLASAttentionChecker *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::OnlineLASAttentionChecker::~OnlineLASAttentionChecker(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void kaldi::ComplexFft<float>(uint64_t a1, uint64_t a2, void **a3)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    uint64_t v7 = v3 >> 1;
    long long __p = 0;
    int v12 = 0;
    uint64_t v13 = 0;
    kaldi::Factorize<int>(v3 >> 1, (uint64_t)&__p);
    if (v12 == __p) {
      long long v8 = 0;
    }
    else {
      long long v8 = (unsigned int *)__p;
    }
    memset(v10, 0, sizeof(v10));
    if (a3) {
      std::string::size_type v9 = a3;
    }
    else {
      std::string::size_type v9 = v10;
    }
    kaldi::ComplexFftRecursive<float>(*(void *)a1, 1, v7, v8, (unsigned int *)((char *)v8 + v12 - (unsigned char *)__p), a2, (uint64_t)v9);
    kaldi::Vector<float>::Destroy((uint64_t)v10);
    if (__p)
    {
      int v12 = __p;
      operator delete(__p);
    }
  }
}

void sub_1B1E7C6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::Factorize<int>(int a1, uint64_t a2)
{
  uint64_t v4 = 0;
  char v5 = *(int **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v6 = (void *)(a2 + 16);
  while (a1 != 1)
  {
    int v7 = dword_1B257E878[v4];
    if (!(a1 % v7))
    {
      long long v8 = v5;
      do
      {
        if ((unint64_t)v8 >= *v6)
        {
          std::string::size_type v9 = *(int **)a2;
          uint64_t v10 = ((uint64_t)v8 - *(void *)a2) >> 2;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62) {
LABEL_46:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v12 = *v6 - (void)v9;
          if (v12 >> 1 > v11) {
            unint64_t v11 = v12 >> 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            float v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v13);
            std::string::size_type v9 = *(int **)a2;
            long long v8 = *(int **)(a2 + 8);
          }
          else
          {
            float v14 = 0;
          }
          uint64_t v15 = (int *)&v14[4 * v10];
          *uint64_t v15 = v7;
          char v5 = v15 + 1;
          while (v8 != v9)
          {
            int v16 = *--v8;
            *--uint64_t v15 = v16;
          }
          *(void *)a2 = v15;
          *(void *)(a2 + 8) = v5;
          *(void *)(a2 + 16) = &v14[4 * v13];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          int *v8 = v7;
          char v5 = v8 + 1;
        }
        a1 /= v7;
        *(void *)(a2 + 8) = v5;
        long long v8 = v5;
      }
      while (!(a1 % v7));
    }
    if (++v4 == 10)
    {
      if (a1 != 1)
      {
        int v17 = 31;
        do
        {
          if (a1 % v17)
          {
            BOOL v18 = v5;
          }
          else
          {
            do
            {
              if ((unint64_t)v5 >= *v6)
              {
                uint64_t v19 = *(int **)a2;
                uint64_t v20 = ((uint64_t)v5 - *(void *)a2) >> 2;
                unint64_t v21 = v20 + 1;
                if ((unint64_t)(v20 + 1) >> 62) {
                  goto LABEL_46;
                }
                uint64_t v22 = *v6 - (void)v19;
                if (v22 >> 1 > v21) {
                  unint64_t v21 = v22 >> 1;
                }
                if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v23 = v21;
                }
                if (v23)
                {
                  unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v23);
                  uint64_t v19 = *(int **)a2;
                  char v5 = *(int **)(a2 + 8);
                }
                else
                {
                  unint64_t v24 = 0;
                }
                int v25 = (int *)&v24[4 * v20];
                int *v25 = v17;
                BOOL v18 = v25 + 1;
                while (v5 != v19)
                {
                  int v26 = *--v5;
                  *--int v25 = v26;
                }
                *(void *)a2 = v25;
                *(void *)(a2 + 8) = v18;
                *(void *)(a2 + 16) = &v24[4 * v23];
                if (v19) {
                  operator delete(v19);
                }
              }
              else
              {
                *char v5 = v17;
                BOOL v18 = v5 + 1;
              }
              a1 /= v17;
              *(void *)(a2 + 8) = v18;
              char v5 = v18;
            }
            while (!(a1 % v17));
          }
          v17 += 2;
          char v5 = v18;
        }
        while (a1 != 1);
      }
      return;
    }
  }
}

void kaldi::ComplexFftRecursive<float>(uint64_t a1, int a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  if (a4 != a5)
  {
    int v12 = a2;
    uint64_t v14 = 2 * (int)a3;
    if (a2 < 2
      || 8 * (int)a3 * a2 <= 0x2000
      || ((0x2000 / (8 * (int)a3)) <= 1 ? (int v15 = 1) : (int v15 = 0x2000 / (8 * (int)a3)), v15 >= a2))
    {
      uint64_t v18 = *a4;
      uint64_t v19 = ((int)a3 / (int)v18);
      if ((int)v19 >= 2)
      {
        if (*(_DWORD *)(a7 + 8) < (int)a3) {
          kaldi::Vector<float>::Resize((void **)a7, a3, 0);
        }
        if (v12 >= 1)
        {
          int v20 = 0;
          unint64_t v21 = *(_DWORD **)a7;
          uint64_t v22 = a1;
          do
          {
            uint64_t v23 = 0;
            char v24 = 1;
            do
            {
              uint64_t v25 = 0;
              char v26 = v24;
              uint64_t v27 = v21;
              unsigned int v28 = v23;
              do
              {
                uint64_t v29 = ((int)a3 / (int)v18);
                uint64_t v30 = v27;
                unsigned int v31 = v28;
                do
                {
                  *v30++ = *(_DWORD *)(v22 + 4 * v31);
                  v31 += 2 * v18;
                  --v29;
                }
                while (v29);
                ++v25;
                v28 += 2;
                v27 += v19;
              }
              while (v25 != v18);
              if ((int)v19 * (int)v18 >= 1)
              {
                uint64_t v32 = 4 * v23;
                uint64_t v33 = (v19 * v18);
                uint64_t v34 = v21;
                do
                {
                  int v35 = *v34++;
                  *(_DWORD *)(v22 + v32) = v35;
                  v32 += 8;
                  --v33;
                }
                while (v33);
              }
              char v24 = 0;
              uint64_t v23 = 1;
            }
            while ((v26 & 1) != 0);
            ++v20;
            v22 += 4 * v14;
          }
          while (v20 != v12);
        }
      }
      kaldi::ComplexFftRecursive<float>(a1, (v18 * v12), ((int)a3 / (int)v18), a4 + 1, a5, a6, a7);
      if (a6) {
        double v36 = -6.28318531;
      }
      else {
        double v36 = 6.28318531;
      }
      float v37 = v36 / (double)(int)a3;
      __float2 v38 = __sincosf_stret(v37);
      float v39 = v36 / (double)(int)v18;
      __float2 v40 = __sincosf_stret(v39);
      if (*(_DWORD *)(a7 + 8) < 2 * (int)v18) {
        kaldi::Vector<float>::Resize((void **)a7, (2 * v18), 0);
      }
      if (v14 * v12)
      {
        uint64_t v41 = a1 + 4 * (int)v14 * v12;
        long long v42 = *(float **)a7;
        int v43 = 2 * v19;
        uint64_t v44 = *(void *)a7 + 4;
        do
        {
          if ((int)v19 >= 1)
          {
            uint64_t v45 = 0;
            float v46 = 1.0;
            float v47 = 0.0;
            int v48 = 1;
            int v49 = 4 * v19;
            do
            {
              uint64_t v50 = 0;
              uint64_t v51 = 2 * ((int)v19 + (int)v45);
              uint64_t v52 = (2 * ((int)v19 + (int)v45)) | 1;
              float v53 = v47;
              float v54 = v46;
              do
              {
                float v55 = *(float *)(a1 + 8 * v45);
                uint64_t v56 = 2 * v50;
                v42[v56] = v55;
                float v57 = *(float *)(a1 + 4 * ((2 * v45) | 1));
                uint64_t v58 = (2 * v50) | 1;
                v42[v58] = v57;
                float v59 = v55 + (float)((float)(*(float *)(a1 + 4 * v51) * v54) - (float)(*(float *)(a1 + 4 * v52) * v53));
                v42[v56] = v59;
                float v60 = v57 + (float)((float)(v54 * *(float *)(a1 + 4 * v52)) + (float)(*(float *)(a1 + 4 * v51) * v53));
                v42[v58] = v60;
                if (v18 >= 3)
                {
                  uint64_t v61 = v18 - 2;
                  int v62 = v49;
                  float v63 = v53;
                  float v64 = v54;
                  do
                  {
                    float v65 = -(float)(v63 * v53);
                    float v63 = (float)(v54 * v63) + (float)(v64 * v53);
                    float v64 = v65 + (float)(v64 * v54);
                    float v59 = v59
                        + (float)((float)(*(float *)(a1 + 4 * v62) * v64)
                                - (float)(*(float *)(a1 + 4 * (v62 + 1)) * v63));
                    v42[2 * v50] = v59;
                    float v60 = v60
                        + (float)((float)(v64 * *(float *)(a1 + 4 * (v62 + 1)))
                                + (float)(*(float *)(a1 + 4 * v62) * v63));
                    v42[v58] = v60;
                    v62 += v43;
                    --v61;
                  }
                  while (v61);
                }
                if (v50 != v18 - 1)
                {
                  float v66 = -(float)(v53 * v40.__sinval);
                  float v53 = (float)(v40.__cosval * v53) + (float)(v54 * v40.__sinval);
                  float v54 = v66 + (float)(v54 * v40.__cosval);
                }
                ++v50;
              }
              while (v50 != v18);
              uint64_t v67 = v18;
              uint64_t v68 = (int *)v44;
              int v69 = v48;
              do
              {
                *(_DWORD *)(a1 + 4 * (v69 - 1)) = *(v68 - 1);
                int v70 = *v68;
                v68 += 2;
                *(_DWORD *)(a1 + 4 * v69) = v70;
                v69 += v43;
                --v67;
              }
              while (v67);
              float v71 = -(float)(v47 * v38.__sinval);
              float v47 = (float)(v38.__cosval * v47) + (float)(v46 * v38.__sinval);
              ++v45;
              float v46 = v71 + (float)(v46 * v38.__cosval);
              v49 += 2;
              v48 += 2;
            }
            while (v45 != v19);
          }
          a1 += 4 * v14;
        }
        while (a1 != v41);
      }
    }
    else
    {
      do
      {
        if (v15 >= v12) {
          uint64_t v16 = v12;
        }
        else {
          uint64_t v16 = v15;
        }
        kaldi::ComplexFftRecursive<float>(a1, v16, a3, a4, a5, a6, a7);
        a1 += 4 * (int)v14 * (int)v16;
        BOOL v17 = __OFSUB__(v12, v16);
        v12 -= v16;
      }
      while (!((v12 < 0) ^ v17 | (v12 == 0)));
    }
  }
}

void kaldi::RealFft<float>(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    char v3 = a2;
    if (a2)
    {
      kaldi::ComplexFft<float>(a1, 1, 0);
      int v5 = -1;
    }
    else
    {
      int v5 = 1;
    }
    uint64_t v6 = *(float **)a1;
    float v7 = 6.28318531 / (double)(int)v2 * (double)v5;
    __float2 v8 = __sincosf_stret(v7);
    if ((int)v2 >= 4)
    {
      float v9 = (float)-v5;
      int v10 = ((int)v2 >> 1) - 1;
      int v11 = 2 * ((int)v2 >> 1) - 1;
      int v12 = v2 - 1;
      unint64_t v13 = &v6[v2 - 2];
      uint64_t v14 = v6 + 3;
      float v15 = 0.0;
      uint64_t v16 = 2;
      uint64_t v17 = 1;
      do
      {
        float v18 = -(float)(v15 * v8.__sinval);
        float v15 = (float)(v8.__cosval * v15) + (float)(v9 * v8.__sinval);
        float v9 = v18 + (float)(v9 * v8.__cosval);
        float v19 = *(v14 - 1);
        float v20 = (float)(v19 + *v13) * 0.5;
        float v21 = v6[v12];
        float v22 = (float)(*v14 - v21) * 0.5;
        float v23 = (float)(*v14 + v21) * 0.5;
        float v24 = (float)(v19 - *v13) * -0.5;
        float v25 = (float)(v15 * v23) + (float)(v9 * v24);
        *(v14 - 1) = v20 + (float)((float)(v9 * v23) - (float)(v15 * v24));
        *uint64_t v14 = v22 + v25;
        if (v17 != v10)
        {
          v6[v11 - 1] = v20 + (float)((float)(v15 * v24) - (float)(v9 * v23));
          v6[v11] = v25 - v22;
        }
        ++v17;
        v16 += 2;
        --v10;
        v11 -= 2;
        v12 -= 2;
        v13 -= 2;
        v14 += 2;
      }
      while (v16 <= (int)v2 >> 1);
    }
    float v26 = v6[1];
    float v27 = *v6 + v26;
    float v28 = *v6 - v26;
    *uint64_t v6 = v27;
    v6[1] = v28;
    if ((v3 & 1) == 0)
    {
      *uint64_t v6 = v27 * 0.5;
      v6[1] = v28 * 0.5;
      kaldi::ComplexFft<float>(a1, 0, 0);
      kaldi::VectorBase<float>::Scale(a1, 2.0);
    }
  }
}

void kaldi::ComputeDctMatrix<float>(uint64_t a1)
{
  unsigned int v2 = kaldi::MatrixBase<float>::NumRows(a1);
  int v3 = kaldi::MatrixBase<float>::NumCols(a1);
  uint64_t v4 = 0;
  double v5 = (float)v3;
  float v6 = sqrt(1.0 / v5);
  uint64_t v7 = *(void *)a1;
  do
    *(float *)(v7 + 4 * v4++) = v6;
  while (v3 != v4);
  if (v2 >= 2)
  {
    float v8 = sqrt(2.0 / v5);
    double v9 = v8;
    double v31 = 3.14159265 / (double)v3;
    uint64_t v10 = *(int *)(a1 + 16);
    uint64_t v11 = v2;
    uint64_t v12 = (v3 + 1) & 0xFFFFFFFE;
    uint64x2_t v30 = (uint64x2_t)vdupq_n_s64((unint64_t)v3 - 1);
    uint64_t v13 = 4 * v10;
    uint64_t v14 = v7 + 4 * v10 + 4;
    uint64_t v15 = 1;
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v29 = _Q0;
    int64x2_t v28 = vdupq_n_s64(2uLL);
    do
    {
      uint64_t v21 = 0;
      float v22 = (float *)v14;
      uint64x2_t v23 = (uint64x2_t)xmmword_1B255FA20;
      do
      {
        int32x2_t v34 = vmovn_s64((int64x2_t)vcgeq_u64(v30, v23));
        int64x2_t v35 = (int64x2_t)v23;
        v24.i64[0] = (int)v21;
        v24.i64[1] = (int)v21 + 1;
        float64x2_t __x = vmulq_n_f64(vmulq_n_f64(vaddq_f64(vcvtq_f64_s64(v24), v29), v31), (double)(int)v15);
        long double v33 = cos(__x.f64[1]);
        v25.f64[0] = cos(__x.f64[0]);
        v25.f64[1] = v33;
        if (v34.i8[0])
        {
          float v26 = v9 * v25.f64[0];
          *(v22 - 1) = v26;
        }
        if (v34.i8[4])
        {
          float v27 = vmuld_lane_f64(v9, v25, 1);
          *float v22 = v27;
        }
        v21 += 2;
        uint64x2_t v23 = (uint64x2_t)vaddq_s64(v35, v28);
        v22 += 2;
      }
      while (v12 != v21);
      ++v15;
      v14 += v13;
    }
    while (v15 != v11);
  }
}

uint64_t kaldi::CompressedMatrix::CopyFromMat<float>(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    if (*(unsigned char *)(a1 + 8)) {
      *(unsigned char *)(a1 + 8) = 0;
    }
    else {
      MEMORY[0x1B3EA8630]();
    }
    *(void *)a1 = 0;
  }
  uint64_t result = kaldi::MatrixBase<float>::NumRows(a2);
  if (result)
  {
    kaldi::MatrixBase<float>::Min(a2);
    kaldi::MatrixBase<float>::Max(a2);
    kaldi::MatrixBase<float>::NumRows(a2);
    kaldi::MatrixBase<float>::NumCols(a2);
    operator new[]();
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::Destroy(kaldi::CompressedMatrix *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    if (*((unsigned char *)this + 8)) {
      *((unsigned char *)this + 8) = 0;
    }
    else {
      uint64_t result = MEMORY[0x1B3EA8630]();
    }
    *(void *)this = 0;
  }
  return result;
}

void kaldi::CompressedMatrix::CompressColumn<float>(float *a1, float *a2, int a3, signed int a4, _WORD *a5, unsigned char *a6)
{
  uint64_t v10 = a2;
  kaldi::CompressedMatrix::ComputeColHeader<float>(a1, a2, a3, a4, a5);
  if (a4 >= 1)
  {
    double v14 = *a1;
    *(double *)&unint64_t v15 = a1[1];
    unint64_t v16 = 0x3EF000100010000ALL;
    double v17 = *(double *)&v15 * 0.0000152590219;
    LOWORD(v15) = *a5;
    float v18 = v14 + v17 * (double)v15;
    LOWORD(v16) = a5[1];
    float v19 = v14 + v17 * (double)v16;
    LOWORD(v12) = a5[2];
    *(float *)&unint64_t v12 = v14 + v17 * (double)v12;
    LOWORD(v13) = a5[3];
    *(float *)&double v14 = v14 + v17 * (double)v13;
    float v20 = *(float *)&v14 - *(float *)&v12;
    uint64_t v21 = a4;
    do
    {
      float v22 = *v10;
      if (*v10 >= v19)
      {
        double v25 = (float)((float)((float)(v22 - *(float *)&v12) / v20) * 63.0) + 0.5;
        unsigned int v24 = (int)v25 & ~((int)v25 >> 31);
        if (v24 >= 0x3F) {
          LOBYTE(v24) = 63;
        }
        LOBYTE(v24) = v24 | 0xC0;
        double v26 = (float)((float)((float)(v22 - v19) / (float)(*(float *)&v12 - v19)) * 128.0) + 0.5;
        unsigned int v27 = (int)v26 & ~((int)v26 >> 31);
        if (v27 >= 0x80) {
          LOBYTE(v27) = 0x80;
        }
        char v28 = v27 + 64;
        if (v22 < *(float *)&v12) {
          LOBYTE(v24) = v28;
        }
      }
      else
      {
        double v23 = (float)((float)((float)(v22 - v18) / (float)(v19 - v18)) * 64.0) + 0.5;
        unsigned int v24 = (int)v23 & ~((int)v23 >> 31);
        if (v24 >= 0x40) {
          LOBYTE(v24) = 64;
        }
      }
      *a6++ = v24;
      v10 += a3;
      --v21;
    }
    while (v21);
  }
}

uint64_t kaldi::CompressedMatrix::CopyToMat<float>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v5 = *(unsigned int *)(v3 + 8);
    uint64_t v4 = *(unsigned int *)(v3 + 12);
    kaldi::MatrixBase<float>::NumRows(a2);
    uint64_t result = kaldi::MatrixBase<float>::NumCols(a2);
    if ((int)v4 >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      unint64_t v12 = (_WORD *)(v3 + 16);
      uint64_t v13 = v3 + 16 + 8 * v4;
      do
      {
        if ((int)v5 >= 1)
        {
          uint64_t v14 = 0;
          double v15 = *(float *)(v3 + 4) * 0.0000152590219;
          LOWORD(v7) = v12[3];
          double v16 = *(float *)v3;
          float v17 = v16 + v15 * (double)*(unint64_t *)&v7;
          LOWORD(v8) = v12[2];
          double v8 = v16 + v15 * (double)*(unint64_t *)&v8;
          *(float *)&double v8 = v8;
          LOWORD(v9) = v12[1];
          *(double *)&unint64_t v18 = v16 + v15 * (double)*(unint64_t *)&v9;
          float v19 = *(double *)&v18;
          LOWORD(v18) = *v12;
          float v20 = v16 + v15 * (double)v18;
          double v21 = *(float *)&v8;
          float v22 = v17 - *(float *)&v8;
          double v7 = v19;
          *(float *)&double v8 = *(float *)&v8 - v19;
          double v9 = v20;
          float v23 = v19 - v20;
          unsigned int v24 = (float *)(*(void *)a2 + v10);
          uint64_t v25 = 4 * *(int *)(a2 + 16);
          do
          {
            uint64_t result = *(unsigned __int8 *)(v13 + v14);
            int v26 = result - 64;
            if (result > 0x40)
            {
              BOOL v28 = result >= 0xC0;
              uint64_t result = (result - 192);
              if (result != 0 && v28) {
                double v27 = v21 + (float)(v22 * (float)(int)result) * 0.0158730159;
              }
              else {
                double v27 = v7 + (float)(*(float *)&v8 * (float)v26) * 0.0078125;
              }
            }
            else
            {
              double v27 = v9 + (float)(v23 * (float)result) * 0.015625;
            }
            float v29 = v27;
            *unsigned int v24 = v29;
            ++v14;
            unsigned int v24 = (float *)((char *)v24 + v25);
          }
          while (v5 != v14);
          v13 += v14;
        }
        ++v11;
        v12 += 4;
        v10 += 4;
      }
      while (v11 != v4);
    }
  }
  else
  {
    kaldi::MatrixBase<float>::NumRows(a2);
    return kaldi::MatrixBase<float>::NumCols(a2);
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::CopyToMat<double>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v5 = *(unsigned int *)(v3 + 8);
    uint64_t v4 = *(unsigned int *)(v3 + 12);
    kaldi::MatrixBase<float>::NumRows(a2);
    uint64_t result = kaldi::MatrixBase<float>::NumCols(a2);
    if ((int)v4 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = (_WORD *)(v3 + 16);
      uint64_t v11 = v3 + 16 + 8 * v4;
      double v12 = *(float *)v3;
      double v13 = *(float *)(v3 + 4) * 0.0000152590219;
      do
      {
        if ((int)v5 >= 1)
        {
          uint64_t v14 = 0;
          LOWORD(v7) = v10[3];
          *(double *)&unint64_t v15 = v12 + v13 * (double)*(unint64_t *)&v7;
          float v16 = *(double *)&v15;
          LOWORD(v15) = v10[2];
          *(double *)&unint64_t v17 = v12 + v13 * (double)v15;
          float v18 = *(double *)&v17;
          LOWORD(v17) = v10[1];
          *(double *)&unint64_t v19 = v12 + v13 * (double)v17;
          float v20 = *(double *)&v19;
          LOWORD(v19) = *v10;
          float v21 = v12 + v13 * (double)v19;
          double v7 = v18;
          float v22 = v16 - v18;
          double v23 = v20;
          float v24 = v18 - v20;
          double v25 = v21;
          float v26 = v20 - v21;
          double v27 = (double *)(*(void *)a2 + v8);
          uint64_t v28 = 8 * *(int *)(a2 + 16);
          do
          {
            uint64_t result = *(unsigned __int8 *)(v11 + v14);
            int v29 = result - 64;
            if (result > 0x40)
            {
              BOOL v31 = result >= 0xC0;
              uint64_t result = (result - 192);
              if (result != 0 && v31) {
                double v30 = v7 + (float)(v22 * (float)(int)result) * 0.0158730159;
              }
              else {
                double v30 = v23 + (float)(v24 * (float)v29) * 0.0078125;
              }
            }
            else
            {
              double v30 = v25 + (float)(v26 * (float)result) * 0.015625;
            }
            float v32 = v30;
            *double v27 = v32;
            ++v14;
            double v27 = (double *)((char *)v27 + v28);
          }
          while (v5 != v14);
          v11 += v14;
        }
        ++v9;
        v10 += 4;
        v8 += 8;
      }
      while (v9 != v4);
    }
  }
  else
  {
    kaldi::MatrixBase<float>::NumRows(a2);
    return kaldi::MatrixBase<float>::NumCols(a2);
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::CopyRowsFromVec<float>(uint64_t *a1, char **a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = *(unsigned int *)(v4 + 8);
    uint64_t v6 = *(unsigned int *)(v4 + 12);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v8, v5, v6, 0, 0);
  kaldi::MatrixBase<float>::CopyRowsFromVec(v8, a2);
  kaldi::CompressedMatrix::CopyFromMat<float>((uint64_t)a1, (uint64_t)v8);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v8);
}

void sub_1B1E7D7A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::CompressedMatrix::CopyColToVec<float>(uint64_t *a1, unsigned int a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *(unsigned int *)(*a1 + 8);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(int *)(v8 + 12);
    float v14 = *(float *)v8;
    float v13 = *(float *)(v8 + 4);
    uint64_t v12 = v8 + 16;
    unint64_t v15 = 0x3EF000100010000ALL;
    double v16 = v13 * 0.0000152590219;
    unint64_t v17 = (_WORD *)(v12 + 8 * a2);
    LOWORD(v15) = v17[3];
    double v18 = v14;
    *(float *)&unint64_t v15 = v18 + v16 * (double)v15;
    LOWORD(a7) = v17[2];
    float v19 = v18 + v16 * (double)*(unint64_t *)&a7;
    LOWORD(a8) = v17[1];
    *(double *)&unint64_t v20 = v18 + v16 * (double)*(unint64_t *)&a8;
    float v21 = *(double *)&v20;
    LOWORD(v20) = *v17;
    float v22 = v18 + v16 * (double)v20;
    uint64_t v23 = v12 + 8 * v11 + (int)(v9 * a2);
    a4 = v19;
    float v24 = *(float *)&v15 - v19;
    double v25 = v21;
    *(float *)&a7 = v19 - v21;
    float v26 = v21 - v22;
    uint64_t v27 = *a3;
    do
    {
      unsigned int v28 = *(unsigned __int8 *)(v23 + v10);
      int v29 = v28 - 64;
      if (v28 > 0x40)
      {
        BOOL v31 = v28 >= 0xC0;
        int v32 = v28 - 192;
        if (v32 != 0 && v31) {
          double v30 = a4 + (float)(v24 * (float)v32) * 0.0158730159;
        }
        else {
          double v30 = v25 + (float)(*(float *)&a7 * (float)v29) * 0.0078125;
        }
      }
      else
      {
        double v30 = v22 + (float)(v26 * (float)v28) * 0.015625;
      }
      float v33 = v30;
      *(float *)(v27 + 4 * v10++) = v33;
    }
    while (v9 != v10);
  }
  return *(float *)&a4;
}

float kaldi::CompressedMatrix::CopyRowToVec<float>(uint64_t *a1, unsigned int a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(unsigned int *)(*a1 + 12);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(int *)(v9 + 8);
    uint64_t v13 = *a3;
    float v14 = (_WORD *)(v9 + 22);
    uint64_t v15 = 8 * v10 + a2 + 16;
    LODWORD(result) = 1048586;
    do
    {
      double v17 = *(float *)v9;
      double v18 = *(float *)(v9 + 4) * 0.0000152590219;
      LOWORD(a8) = *(v14 - 2);
      double v19 = v17 + v18 * (double)*(unint64_t *)&a8;
      *(float *)&double v19 = v19;
      unsigned int v20 = *(unsigned __int8 *)(v9 + v15);
      int v21 = v20 - 64;
      if (v20 > 0x40)
      {
        LOWORD(a9) = *(v14 - 1);
        a9 = v17 + v18 * (double)*(unint64_t *)&a9;
        *(float *)&a9 = a9;
        BOOL v26 = v20 >= 0xC0;
        int v27 = v20 - 192;
        if (v27 != 0 && v26)
        {
          LOWORD(v19) = *v14;
          a8 = (double)*(unint64_t *)&v19;
          float v30 = v17 + v18 * a8;
          *(float *)&a8 = (float)v27;
          double v25 = *(float *)&a9 + (float)((float)(v30 - *(float *)&a9) * (float)v27) * 0.0158730159;
        }
        else
        {
          double v28 = *(float *)&v19;
          double v29 = (float)((float)(*(float *)&a9 - *(float *)&v19) * (float)v21);
          a8 = 0.0078125;
          double v25 = v28 + v29 * 0.0078125;
        }
      }
      else
      {
        LOWORD(a9) = *(v14 - 3);
        a9 = (double)*(unint64_t *)&a9;
        float v22 = v17 + v18 * a9;
        double v23 = v22;
        double v24 = (float)((float)(*(float *)&v19 - v22) * (float)v20);
        a8 = 0.015625;
        double v25 = v23 + v24 * 0.015625;
      }
      float v31 = v25;
      *(float *)(v13 + 4 * v11++) = v31;
      v15 += v12;
      v14 += 4;
    }
    while (v10 != v11);
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::Write(uint64_t *a1, void *a2, int a3, int a4)
{
  if (a3)
  {
    if (a4) {
      double v7 = "CN";
    }
    else {
      double v7 = "CM";
    }
    kaldi::WriteToken(a2, 1, v7);
    if (a4 && !fst::AlignOutput(a2))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Could not align output");
LABEL_18:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    if (!*a1)
    {
      v12[0] = 0;
      v12[1] = 0;
    }
    uint64_t result = std::ostream::write();
  }
  else
  {
    uint64_t v8 = *a1;
    if (*a1)
    {
      uint64_t v9 = *(unsigned int *)(v8 + 8);
      uint64_t v10 = *(unsigned int *)(v8 + 12);
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    kaldi::Matrix<float>::Matrix((uint64_t)v12, v9, v10, 1, 0);
    kaldi::CompressedMatrix::CopyToMat<float>(a1, (uint64_t)v12);
    kaldi::MatrixBase<float>::Write(v12, a2, 0, 0);
    uint64_t result = kaldi::Matrix<float>::~Matrix((uint64_t)v12);
  }
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Error writing compressed matrix to stream.");
    goto LABEL_18;
  }
  return result;
}

void sub_1B1E7DB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::CompressedMatrix::Read(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  v38[34] = *MEMORY[0x1E4F143B8];
  if (*(void *)a1)
  {
    if (*(unsigned char *)(a1 + 8)) {
      *(unsigned char *)(a1 + 8) = 0;
    }
    else {
      MEMORY[0x1B3EA8630]();
    }
    *(void *)a1 = 0;
  }
  if (!a3)
  {
    double v17 = kaldi::Matrix<float>::Matrix((uint64_t)v38);
    kaldi::Matrix<float>::Read(v38, a2, 0, 0, 0, v17);
    kaldi::CompressedMatrix::CopyFromMat<float>(a1, (uint64_t)v38);
LABEL_28:
    kaldi::Matrix<float>::~Matrix((uint64_t)v38);
LABEL_29:
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v38, "Failed to read data.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
    }
    return;
  }
  if (kaldi::Peek(a2, 1) != 67)
  {
    double v18 = kaldi::Matrix<float>::Matrix((uint64_t)v38);
    kaldi::Matrix<float>::Read(v38, a2, 1, a4 != 0, 0, v18);
    kaldi::CompressedMatrix::CopyFromMat<float>(a1, (uint64_t)v38);
    goto LABEL_28;
  }
  if (a4) {
    uint64_t v8 = "CN";
  }
  else {
    uint64_t v8 = "CM";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v8);
  __s1 = 0;
  size_t __n = 0;
  uint64_t v34 = 0;
  kaldi::ReadToken(a2, 1, (uint64_t)&__s1);
  int v9 = SHIBYTE(v34);
  size_t v10 = __n;
  if (v34 >= 0) {
    size_t v11 = HIBYTE(v34);
  }
  else {
    size_t v11 = __n;
  }
  uint64_t v12 = v37;
  int v13 = (char)v37;
  if ((v37 & 0x80u) != 0) {
    uint64_t v12 = v36;
  }
  if (v11 != v12) {
    goto LABEL_31;
  }
  if ((v37 & 0x80u) == 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if (v34 < 0)
  {
    if (memcmp(__s1, p_p, __n)) {
      goto LABEL_35;
    }
LABEL_45:
    if (!a4) {
      goto LABEL_49;
    }
    goto LABEL_46;
  }
  if (!HIBYTE(v34)) {
    goto LABEL_45;
  }
  p_s1 = &__s1;
  uint64_t v16 = HIBYTE(v34);
  while (*(unsigned __int8 *)p_s1 == *p_p)
  {
    p_s1 = (void **)((char *)p_s1 + 1);
    ++p_p;
    if (!--v16) {
      goto LABEL_45;
    }
  }
LABEL_31:
  if ((v34 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v34) != 2) {
      goto LABEL_61;
    }
    double v19 = (unsigned __int8 *)&__s1;
    goto LABEL_37;
  }
LABEL_35:
  if (v10 != 2) {
    goto LABEL_61;
  }
  double v19 = (unsigned __int8 *)__s1;
LABEL_37:
  int v20 = *v19;
  int v21 = (unsigned __int8 *)__p;
  if (v13 >= 0) {
    int v21 = (unsigned __int8 *)&__p;
  }
  if (v20 != *v21) {
    goto LABEL_61;
  }
  float v22 = __s1;
  if (v9 >= 0) {
    float v22 = &__s1;
  }
  if (v22[1] != 78)
  {
LABEL_61:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
    double v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Expected token ", 15);
    if ((v37 & 0x80u) == 0) {
      double v24 = &__p;
    }
    else {
      double v24 = __p;
    }
    if ((v37 & 0x80u) == 0) {
      uint64_t v25 = v37;
    }
    else {
      uint64_t v25 = v36;
    }
    BOOL v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", got ", 6);
    if (v34 >= 0) {
      double v28 = &__s1;
    }
    else {
      double v28 = __s1;
    }
    if (v34 >= 0) {
      size_t v29 = HIBYTE(v34);
    }
    else {
      size_t v29 = __n;
    }
    float v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)". This could mean that you're trying to memory map an unaligned file.", 69);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Reading aligned matrix as a stream", 34);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v38);
  }
LABEL_46:
  fst::AlignInput();
  if (a4)
  {
    std::istream::tellg();
    *(void *)a1 = a4 + v38[16];
    *(unsigned char *)(a1 + 8) = 1;
    std::istream::seekg();
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Seeking for aligned data failed", 31);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(__s1);
    }
    if ((char)v37 < 0) {
      operator delete(__p);
    }
    goto LABEL_29;
  }
LABEL_49:
  std::istream::read();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Failed to read header", 21);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
  }
  if (v31) {
    operator new[]();
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__s1);
  }
  if ((char)v37 < 0) {
    operator delete(__p);
  }
}

void sub_1B1E7E0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::CompressedMatrix::Sum(kaldi::CompressedMatrix *this)
{
  if (*(void *)this) {
    uint64_t v2 = *(unsigned int *)(*(void *)this + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  memset(v12, 0, sizeof(v12));
  kaldi::Vector<float>::Resize(v12, v2, 0);
  signed int v8 = 0;
  float v9 = 0.0;
  while (1)
  {
    uint64_t v10 = *(void *)this;
    if (*(void *)this) {
      LODWORD(v10) = *(_DWORD *)(v10 + 12);
    }
    if (v8 >= (int)v10) {
      break;
    }
    kaldi::CompressedMatrix::CopyColToVec<float>((uint64_t *)this, v8, (uint64_t *)v12, v3, v4, v5, v6, v7);
    double v3 = kaldi::VectorBase<float>::Sum((uint64_t)v12);
    float v9 = v9 + *(float *)&v3;
    ++v8;
  }
  kaldi::Vector<float>::Destroy((uint64_t)v12);
  return v9;
}

void sub_1B1E7E1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CompressedMatrix::operator=(uint64_t a1, void *a2)
{
  if (*(void *)a1)
  {
    if (*(unsigned char *)(a1 + 8)) {
      *(unsigned char *)(a1 + 8) = 0;
    }
    else {
      MEMORY[0x1B3EA8630]();
    }
    *(void *)a1 = 0;
  }
  if (*a2) {
    operator new[]();
  }
  return a1;
}

uint64_t kaldi::CompressedMatrix::CompressedMatrix(uint64_t this, void *a2)
{
  *(void *)this = 0;
  *(unsigned char *)(this + 8) = 0;
  return kaldi::CompressedMatrix::operator=(this, a2);
}

void kaldi::CompressedMatrix::ComputeColHeader<float>(float *a1, float *a2, int a3, unsigned int a4, _WORD *a5)
{
  std::vector<float>::vector(&__p, a4);
  size_t v11 = (float *)__p;
  uint64_t v12 = v48;
  if (v48 != __p)
  {
    unint64_t v13 = ((char *)v48 - (unsigned char *)__p) >> 2;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    float v14 = __p;
    do
    {
      float v10 = *a2;
      *v14++ = *(_DWORD *)a2;
      a2 += a3;
      --v13;
    }
    while (v13);
  }
  if (a4 <= 4)
  {
    std::__sort<std::__less<float,float> &,float *>();
    int v21 = (float *)__p;
    float v37 = *a1;
    float v38 = a1[1];
    float v39 = 1.0;
    if ((float)((float)(*(float *)__p - *a1) / v38) <= 1.0) {
      float v40 = (float)(*(float *)__p - *a1) / v38;
    }
    else {
      float v40 = 1.0;
    }
    if (v40 >= 0.0) {
      float v41 = v40 * 65535.0;
    }
    else {
      float v41 = 0.0;
    }
    unsigned int v34 = (int)(v41 + 0.499);
    *a5 = v34;
    if (a4 <= 1)
    {
      LOWORD(v34) = v34 + 1;
      a5[1] = v34;
    }
    else
    {
      if ((float)((float)(v21[1] - v37) / v38) <= 1.0) {
        float v39 = (float)(v21[1] - v37) / v38;
      }
      if (v39 >= 0.0) {
        float v42 = v39 * 65535.0;
      }
      else {
        float v42 = 0.0;
      }
      unsigned int v34 = (unsigned __int16)(v34 + 1);
      if (v34 <= (unsigned __int16)(int)(v42 + 0.499)) {
        LOWORD(v34) = (int)(v42 + 0.499);
      }
      a5[1] = v34;
      if (a4 != 2)
      {
        float v43 = (float)(v21[2] - v37) / v38;
        if (v43 > 1.0) {
          float v43 = 1.0;
        }
        float v44 = v43 * 65535.0;
        if (v43 < 0.0) {
          float v44 = 0.0;
        }
        unsigned int v34 = (unsigned __int16)(v34 + 1);
        if (v34 <= (unsigned __int16)(int)(v44 + 0.499)) {
          LOWORD(v34) = (int)(v44 + 0.499);
        }
        a5[2] = v34;
        if (a4 >= 4)
        {
          float v45 = (float)(v21[3] - v37) / v38;
          if (v45 > 1.0) {
            float v45 = 1.0;
          }
          if (v45 >= 0.0) {
            float v46 = v45 * 65535.0;
          }
          else {
            float v46 = 0.0;
          }
          double v36 = v46 + 0.499;
          goto LABEL_34;
        }
LABEL_66:
        LOWORD(v34) = v34 + 1;
        goto LABEL_67;
      }
    }
    LOWORD(v34) = v34 + 1;
    a5[2] = v34;
    goto LABEL_66;
  }
  uint64_t v15 = a4 >> 2;
  uint64_t v16 = &v11[v15];
  if (v16 != v12)
  {
    float v10 = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v11, v16, v12, v10);
    size_t v11 = (float *)__p;
  }
  float v17 = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v11, v11, &v11[v15], v10);
  uint64_t v18 = (3 * v15);
  double v19 = (float *)__p;
  int v20 = (float *)((char *)__p + 4 * v18);
  if (v20 != v48)
  {
    float v17 = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((float *)__p + v15 + 1, (float *)__p + v18, v48, v17);
    double v19 = (float *)__p;
    int v20 = v48;
  }
  std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(&v19[v18 + 1], v20 - 1, v20, v17);
  int v21 = (float *)__p;
  float v22 = *a1;
  float v23 = a1[1];
  float v24 = (float)(*(float *)__p - *a1) / v23;
  if (v24 > 1.0) {
    float v24 = 1.0;
  }
  float v25 = v24 * 65535.0;
  BOOL v26 = v24 < 0.0;
  float v27 = 0.0;
  if (v26) {
    float v25 = 0.0;
  }
  int v28 = (int)(v25 + 0.499);
  *a5 = v28;
  float v29 = (float)(v21[v15] - v22) / v23;
  if (v29 > 1.0) {
    float v29 = 1.0;
  }
  if (v29 >= 0.0) {
    float v30 = v29 * 65535.0;
  }
  else {
    float v30 = 0.0;
  }
  unsigned int v31 = (unsigned __int16)(v28 + 1);
  if (v31 <= (unsigned __int16)(int)(v30 + 0.499)) {
    LOWORD(v31) = (int)(v30 + 0.499);
  }
  a5[1] = v31;
  float v32 = (float)(v21[v18] - v22) / v23;
  if (v32 > 1.0) {
    float v32 = 1.0;
  }
  if (v32 >= 0.0) {
    float v33 = v32 * 65535.0;
  }
  else {
    float v33 = 0.0;
  }
  unsigned int v34 = (unsigned __int16)(v31 + 1);
  if (v34 <= (unsigned __int16)(int)(v33 + 0.499)) {
    LOWORD(v34) = (int)(v33 + 0.499);
  }
  a5[2] = v34;
  float v35 = (float)(v21[a4 - 1] - v22) / v23;
  if (v35 > 1.0) {
    float v35 = 1.0;
  }
  if (v35 >= 0.0) {
    float v27 = v35 * 65535.0;
  }
  double v36 = v27 + 0.499;
LABEL_34:
  unsigned int v34 = (unsigned __int16)(v34 + 1);
  if (v34 <= (unsigned __int16)(int)v36) {
    LOWORD(v34) = (int)v36;
  }
LABEL_67:
  a5[3] = v34;
  int v48 = v21;
  operator delete(v21);
}

void sub_1B1E7E614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::ModelFileMap(kaldi::quasar::Encdec *this)
{
  {
    operator new();
  }
  return kaldi::quasar::Encdec::ModelFileMap(void)::model_file_map;
}

void sub_1B1E7E6C0(_Unwind_Exception *a1)
{
}

uint64_t kaldi::quasar::Encdec::ComputeEngineFileMap(kaldi::quasar::Encdec *this)
{
  if (*((void *)this + 67))
  {
    kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::ComputeEngineItf>();
  }
  {
    operator new();
  }
  return kaldi::quasar::Encdec::ComputeEngineFileMap(void)::compute_engine_file_map;
}

void sub_1B1E7E77C(_Unwind_Exception *a1)
{
}

void kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::ComputeEngineItf>()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)((unint64_t)off_1F0A29F68 & 0x7FFFFFFFFFFFFFFFLL));
  operator new();
}

void sub_1B1E7E890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a9) {
    kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::ComputeEngineItf>();
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::Encdec::Encdec(uint64_t a1, char *a2, char a3, char a4)
{
  double v7 = (std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v10, a2);
  signed int v8 = std::__fs::filesystem::path::remove_filename[abi:ne180100](v7);
  if (SHIBYTE(v8->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, v8->__pn_.__r_.__value_.__l.__data_, v8->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v9 = *(_OWORD *)&v8->__pn_.__r_.__value_.__l.__data_;
    *(void *)(a1 + 16) = *((void *)&v8->__pn_.__r_.__value_.__l + 2);
    *(_OWORD *)a1 = v9;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 24) = a3;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(unsigned char *)(a1 + 25) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = a1 + 304;
  *(void *)(a1 + 320) = a1 + 328;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = a1 + 400;
  *(void *)(a1 + 416) = a1 + 424;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = a1 + 448;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = a1 + 472;
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = a1 + 504;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v10, "UNK");
  kaldi::quasar::BPE::BPE(a1 + 568, 1, (long long *)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 808) = 953267991;
  *(void *)(a1 + 812) = -1;
  *(void *)(a1 + 820) = -1;
  *(void *)(a1 + 828) = -1;
  *(void *)(a1 + 836) = 0x100000004;
  *(unsigned char *)(a1 + 844) = 0;
  *(_DWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_DWORD *)(a1 + 904) = 1024;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 912), "main");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 936), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 960), "CPU");
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 1056), "CPU");
  *(_OWORD *)(a1 + 1080) = xmmword_1B257E8C0;
  *(void *)(a1 + 1096) = 0x100000002;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1112) = 0;
  *(void *)(a1 + 1104) = a1 + 1112;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 1128));
}

void sub_1B1E7EDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,uint64_t a28,void **a29)
{
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(v29 + 2248), 0);
  uint64_t v40 = *(void *)(v29 + 2240);
  *(void *)(v29 + 2240) = 0;
  if (v40) {
    std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100](v30, v40);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v35);
  float v41 = *v38;
  if (*v38)
  {
    *(void *)(v29 + 2176) = v41;
    operator delete(v41);
  }
  *(void *)(v39 - 112) = v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  *(void *)(v39 - 112) = v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  *(void *)(v39 - 112) = v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  if (*(char *)(v29 + 2031) < 0) {
    operator delete(*v34);
  }
  if (*(char *)(v29 + 2007) < 0) {
    operator delete(*v32);
  }
  if (*(char *)(v29 + 1983) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v29 + 1959) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v29 + 1935) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v29 + 1911) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v29 + 1887) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(v29 + 1863) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v29 + 1839) < 0) {
    operator delete(*a17);
  }
  if (*(char *)(v29 + 1815) < 0) {
    operator delete(*a18);
  }
  if (*(char *)(v29 + 1791) < 0) {
    operator delete(*a19);
  }
  if (*(char *)(v29 + 1767) < 0) {
    operator delete(*a20);
  }
  if (*(char *)(v29 + 1743) < 0) {
    operator delete(*a21);
  }
  *(void *)(v39 - 112) = v29 + 1696;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  if (*(char *)(v29 + 1695) < 0) {
    operator delete(*a22);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v29 + 1648, *a29);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v29 + 1624, **(void ***)(v39 - 152));
  *(void *)(v39 - 112) = v29 + 1600;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  *(void *)(v39 - 112) = v29 + 1576;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  *(void *)(v39 - 112) = v29 + 1552;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  *(void *)(v39 - 112) = a28;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  kaldi::nnet1::Nnet::~Nnet(*(kaldi::nnet1::Nnet **)(v39 - 144));
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(v29 + 1104, *(void **)(v29 + 1112));
  if (*(char *)(v29 + 1079) < 0) {
    operator delete(*a23);
  }
  if (*(char *)(v29 + 1055) < 0) {
    operator delete(*(void **)(v29 + 1032));
  }
  if (*(char *)(v29 + 1031) < 0) {
    operator delete(*(void **)(v29 + 1008));
  }
  if (*(char *)(v29 + 1007) < 0) {
    operator delete(*a24);
  }
  if (*(char *)(v29 + 983) < 0) {
    operator delete(*a25);
  }
  if (*(char *)(v29 + 959) < 0) {
    operator delete(*a26);
  }
  if (*(char *)(v29 + 935) < 0) {
    operator delete(*a27);
  }
  *(void *)(v39 - 112) = v29 + 880;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  float v42 = **(void ***)(v39 - 136);
  if (v42)
  {
    *(void *)(v29 + 864) = v42;
    operator delete(v42);
  }
  kaldi::quasar::BPE::~BPE(*(kaldi::quasar::BPE **)(v39 - 128));
  uint64_t v43 = *(void *)(v29 + 560);
  *(void *)(v29 + 560) = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = *(void *)(v29 + 552);
  *(void *)(v29 + 552) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  *(void *)(v39 - 136) = v36 + 33;
  *(void *)(v39 - 128) = v36 + 30;
  float v45 = *(std::__shared_weak_count **)(v29 + 544);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  float v46 = *(std::__shared_weak_count **)(v29 + 528);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy((uint64_t)(v36 + 58), *(void **)(v29 + 504));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v36 + 54), *(void **)(v29 + 472));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v36 + 51), *(void **)(v29 + 448));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v36 + 48), *(void **)(v29 + 424));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v36 + 45), *(void **)(v29 + 400));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v36 + 42), *(void **)(v29 + 376));
  *(void *)(v39 - 112) = v36 + 39;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy((uint64_t)(v36 + 36), *(void **)(v29 + 328));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(*(void *)(v39 - 136), *(void **)(v29 + 304));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(*(void *)(v39 - 128), *(void **)(v29 + 280));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(*(void *)(v39 - 120), *(void **)(v29 + 256));
  float v47 = *(std::__shared_weak_count **)(v29 + 240);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  int v48 = *(std::__shared_weak_count **)(v29 + 224);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  int v49 = *(std::__shared_weak_count **)(v29 + 208);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  uint64_t v50 = *(std::__shared_weak_count **)(v29 + 192);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  uint64_t v51 = *(std::__shared_weak_count **)(v29 + 176);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  uint64_t v52 = *(std::__shared_weak_count **)(v29 + 160);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (*(char *)(v29 + 151) < 0) {
    operator delete(*(void **)(v29 + 128));
  }
  if (*(char *)(v29 + 127) < 0) {
    operator delete(*(void **)(v29 + 104));
  }
  if (*(char *)(v29 + 103) < 0) {
    operator delete(*(void **)(v29 + 80));
  }
  if (*(char *)(v29 + 79) < 0) {
    operator delete(*(void **)(v29 + 56));
  }
  if (*(char *)(v29 + 55) < 0) {
    operator delete(*v36);
  }
  if (*(char *)(v29 + 23) < 0) {
    operator delete(*(void **)v29);
  }
  _Unwind_Resume(a1);
}

void sub_1B1E7F284()
{
}

void sub_1B1E7F28C()
{
}

void sub_1B1E7F294()
{
}

void sub_1B1E7F29C()
{
}

void sub_1B1E7F2A4()
{
}

void sub_1B1E7F2AC()
{
}

void sub_1B1E7F2B4()
{
}

void sub_1B1E7F2BC()
{
}

void sub_1B1E7F2C4()
{
}

void sub_1B1E7F2CC()
{
}

void sub_1B1E7F2D4()
{
}

void sub_1B1E7F2DC()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x1B1E7F0ACLL);
}

void sub_1B1E7F2F4()
{
}

void sub_1B1E7F2FC()
{
  if (*(char *)(v0 - 89) < 0) {
    JUMPOUT(0x1B1E7F278);
  }
  JUMPOUT(0x1B1E7F27CLL);
}

std::__fs::filesystem::path *std::__fs::filesystem::path::remove_filename[abi:ne180100](std::__fs::filesystem::path *a1)
{
  std::__fs::filesystem::path::__string_view v2 = std::__fs::filesystem::path::__filename(a1);
  if (v2.__size_)
  {
    std::string::size_type v3 = (std::string::size_type)a1;
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v3 = a1->__pn_.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&a1->__pn_, (std::string::size_type)&v2.__data_[-v3], 0xFFFFFFFFFFFFFFFFLL);
  }
  return a1;
}

uint64_t kaldi::quasar::Encdec::ModelCompilationSpec::Compile(kaldi::quasar::Encdec::ModelCompilationSpec *this)
{
  *(void *)&long long v10 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 2) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v4, "Pre-compilation only supported for E5 models!");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v4);
  }
  if (*((char *)this + 63) < 0) {
    std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)this + 5), *((void *)this + 6));
  }
  else {
    std::string v9 = *(std::string *)((char *)this + 40);
  }
  double v4 = 0;
  double v5 = 0;
  double v6 = 0;
  double v7 = &v4;
  char v8 = 0;
  double v4 = (std::string *)operator new(0x18uLL);
  double v5 = v4;
  double v6 = (unsigned __int16 *)&v4[1];
  double v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (long long *)&v9, &v10, v4);
  uint64_t v2 = kaldi::quasar::onDeviceCompile((uint64_t)this + 16, (unsigned __int16 **)&v4, (uint64_t *)this + 8);
  double v7 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return v2;
}

void sub_1B1E7F4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::ModelCompilationSpec::IsCompileRequired(kaldi::quasar::Encdec::ModelCompilationSpec *this)
{
  *(void *)&long long v36 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 2) != 1) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v32, "");
  uint64_t v2 = (const void **)*((void *)this + 8);
  for (uint64_t i = (const void **)*((void *)this + 9); v2 != i; v2 += 3)
  {
    if (*((char *)v2 + 23) >= 0) {
      size_t v4 = *((unsigned __int8 *)v2 + 23);
    }
    else {
      size_t v4 = (size_t)v2[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
    if (SHIBYTE(v31) >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (v4)
    {
      if (*((char *)v2 + 23) >= 0) {
        double v6 = v2;
      }
      else {
        double v6 = *v2;
      }
      memmove(p_p, v6, v4);
    }
    *(_WORD *)&p_p[v4] = 32;
    if (SHIBYTE(v31) >= 0) {
      double v7 = (const std::string::value_type *)&__p;
    }
    else {
      double v7 = (const std::string::value_type *)__p;
    }
    if (SHIBYTE(v31) >= 0) {
      std::string::size_type v8 = HIBYTE(v31);
    }
    else {
      std::string::size_type v8 = (std::string::size_type)v30;
    }
    std::string::append(&v32, v7, v8);
    if (SHIBYTE(v31) < 0) {
      operator delete(__p);
    }
  }
  if (*((char *)this + 63) < 0) {
    std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)this + 5), *((void *)this + 6));
  }
  else {
    std::string v35 = *(std::string *)((char *)this + 40);
  }
  long long __p = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = &__p;
  char v34 = 0;
  long long __p = operator new(0x18uLL);
  uint64_t v30 = __p;
  uint64_t v31 = (char *)__p + 24;
  uint64_t v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v31, (long long *)&v35, &v36, (std::string *)__p);
  int v10 = kaldi::quasar::checkCompiledCacheWithProgramLibrary((uint64_t)this + 16, (unsigned __int16 **)&__p, (uint64_t *)this + 8);
  uint64_t v33 = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v33);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
    size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Checking if need compile: ", 26);
    int v12 = *((char *)this + 39);
    if (v12 >= 0) {
      unint64_t v13 = (char *)this + 16;
    }
    else {
      unint64_t v13 = (char *)*((void *)this + 2);
    }
    if (v12 >= 0) {
      uint64_t v14 = *((unsigned __int8 *)this + 39);
    }
    else {
      uint64_t v14 = *((void *)this + 3);
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
    int v17 = *((char *)this + 63);
    if (v17 >= 0) {
      uint64_t v18 = (char *)this + 40;
    }
    else {
      uint64_t v18 = (char *)*((void *)this + 5);
    }
    if (v17 >= 0) {
      uint64_t v19 = *((unsigned __int8 *)this + 63);
    }
    else {
      uint64_t v19 = *((void *)this + 6);
    }
    int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
    int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v22 = &v32;
    }
    else {
      float v22 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v32.__r_.__value_.__l.__size_;
    }
    float v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, size);
    float v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
    if (v10) {
      BOOL v26 = "NO!";
    }
    else {
      BOOL v26 = "YES!";
    }
    if (v10) {
      uint64_t v27 = 3;
    }
    else {
      uint64_t v27 = 4;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  uint64_t v9 = v10 ^ 1u;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_1B1E7F7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 129) < 0) {
    operator delete(*(void **)(v14 - 152));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::ModelCompilationSpec::PurgeCompiledModel(kaldi::quasar::Encdec::ModelCompilationSpec *this)
{
  if (*((_DWORD *)this + 2) == 1) {
    return kaldi::quasar::purgeE5BundlesForMil((uint64_t)this + 16);
  }
  else {
    return 1;
  }
}

BOOL kaldi::quasar::Encdec::ModelCompilationSpec::Compare(uint64_t a1, void *lpsrc)
{
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v45, "Mismatched comparison!");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  size_t v4 = v3;
  int v5 = *((char *)v3 + 39);
  int v6 = *(char *)(a1 + 39);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    size_t v7 = *(void *)(a1 + 24);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = (const void *)(a1 + 16);
  }
  else {
    std::string::size_type v8 = *(const void **)(a1 + 16);
  }
  if (v5 >= 0) {
    size_t v9 = *((unsigned __int8 *)v3 + 39);
  }
  else {
    size_t v9 = v3[3];
  }
  if (v5 >= 0) {
    int v10 = v3 + 2;
  }
  else {
    int v10 = (const void *)v3[2];
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v15 = memcmp(v10, v8, v11);
  BOOL v16 = v9 < v7;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  if (v16) {
    return 0;
  }
  int v18 = *((char *)v4 + 63);
  int v19 = *(char *)(a1 + 63);
  if (v19 >= 0) {
    size_t v20 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v20 = *(void *)(a1 + 48);
  }
  if (v19 >= 0) {
    int v21 = (const void *)(a1 + 40);
  }
  else {
    int v21 = *(const void **)(a1 + 40);
  }
  if (v18 >= 0) {
    size_t v22 = *((unsigned __int8 *)v4 + 63);
  }
  else {
    size_t v22 = v4[6];
  }
  if (v18 >= 0) {
    float v23 = v4 + 5;
  }
  else {
    float v23 = (const void *)v4[5];
  }
  if (v22 >= v20) {
    size_t v24 = v20;
  }
  else {
    size_t v24 = v22;
  }
  int v25 = memcmp(v21, v23, v24);
  BOOL v26 = v20 < v22;
  if (v25) {
    BOOL v26 = v25 < 0;
  }
  if (v26) {
    return 1;
  }
  int v27 = memcmp(v23, v21, v24);
  BOOL v28 = v22 < v20;
  if (v27) {
    BOOL v28 = v27 < 0;
  }
  if (v28) {
    return 0;
  }
  uint64_t v29 = *(void *)(a1 + 64);
  uint64_t v30 = v4[8];
  uint64_t v31 = (v4[9] - v30) >> 3;
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * v31;
  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 72) - v29) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * v31 >= v44) {
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 72) - v29) >> 3);
  }
  else {
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * v31;
  }
  if (!v33) {
    return v44 < v32;
  }
  while (1)
  {
    int v34 = *(char *)(v30 + 23);
    int v35 = *(char *)(v29 + 23);
    unint64_t v36 = v35 >= 0 ? *(unsigned __int8 *)(v29 + 23) : *(void *)(v29 + 8);
    uint64_t v37 = v35 >= 0 ? (const void *)v29 : *(const void **)v29;
    unint64_t v38 = v34 >= 0 ? *(unsigned __int8 *)(v30 + 23) : *(void *)(v30 + 8);
    uint64_t v39 = v34 >= 0 ? (const void *)v30 : *(const void **)v30;
    size_t v40 = v38 >= v36 ? v36 : v38;
    int v41 = memcmp(v37, v39, v40);
    BOOL v14 = v41 ? v41 < 0 : v36 < v38;
    if (v14) {
      break;
    }
    int v42 = memcmp(v39, v37, v40);
    BOOL v43 = v38 < v36;
    if (v42) {
      BOOL v43 = v42 < 0;
    }
    if (v43) {
      break;
    }
    v30 += 24;
    v29 += 24;
    if (!--v33) {
      return v44 < v32;
    }
  }
  return v14;
}

void kaldi::quasar::Encdec::CreateEspressoModel(char *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, std::vector<std::wstring> *a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v96 = 0;
  uint64_t v97 = a3;
  int v94 = 0;
  int v95 = 0;
  long long v91 = 0;
  long long v92 = 0;
  unint64_t v93 = 0;
  kaldi::SplitStringToVector(a2, ",", 1, (uint64_t)&v94);
  BOOL v13 = v94;
  BOOL v14 = v95;
  while (v13 != v14)
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v82, a1);
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v90, v13);
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v90, (uint64_t)&v82, (std::__fs::filesystem::path *)__p);
    int v15 = v92;
    if ((unint64_t)v92 >= v93)
    {
      int v17 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v91, (long long *)__p);
    }
    else
    {
      if (SHIBYTE(__p[0].__end_) < 0)
      {
        std::string::__init_copy_ctor_external(v92, (const std::string::value_type *)__p[0].__first_, (std::string::size_type)__p[0].__begin_);
      }
      else
      {
        long long v16 = *(_OWORD *)&__p[0].__first_;
        v92->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[0].__end_;
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      int v17 = v15 + 1;
    }
    long long v92 = v17;
    if (SHIBYTE(__p[0].__end_) < 0) {
      operator delete(__p[0].__first_);
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    v13 += 24;
  }
  if ((char *)v92 - (char *)v91 == 24)
  {
    if (SHIBYTE(v91->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v90, v91->__r_.__value_.__l.__data_, v91->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v18 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v18;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v90, "");
  }
  kaldi::JoinVectorToString<std::string>((uint64_t *)&v91, ",");
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  int v19 = (uint64_t **)kaldi::quasar::Encdec::ComputeEngineFileMap((kaldi::quasar::Encdec *)a1);
  __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v87;
  size_t v20 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, (const void **)&v87, (uint64_t)&std::piecewise_construct, (long long **)__p);
  int v21 = (std::__shared_weak_count *)v20[8];
  if (!v21 || (size_t v22 = std::__shared_weak_count::lock(v21)) == 0)
  {
    *(void *)(a8 + 8) = 0;
    *(void *)a8 = 0;
LABEL_33:
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
      int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading: ", 9);
      if ((v89 & 0x80u) == 0) {
        BOOL v28 = &v87;
      }
      else {
        BOOL v28 = v87;
      }
      if ((v89 & 0x80u) == 0) {
        uint64_t v29 = v89;
      }
      else {
        uint64_t v29 = v88;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    if (v97 != 1)
    {
      kaldi::quasar::ESNetworkConfig::ESNetworkConfig(__p, &v87);
      std::string::operator=(v100, (const std::string *)a4);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    kaldi::quasar::EspressoV2NetworkConfig::EspressoV2NetworkConfig(&v82, __p);
    if (SHIBYTE(__p[0].__end_) < 0) {
      operator delete(__p[0].__first_);
    }
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)&__p[0].__first_ = *(_OWORD *)a4;
      __p[0].__end_ = *(std::__split_buffer<std::string>::pointer *)(a4 + 16);
    }
    uint64_t v78 = a1;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v84, (std::string *)__p, (long long *)&__p[0].__end_cap_, 1uLL);
    char v76 = a7;
    if (SHIBYTE(__p[0].__end_) < 0) {
      operator delete(__p[0].__first_);
    }
    uint64_t v30 = *a5;
    uint64_t v80 = a5[1];
    if (*a5 != v80)
    {
      std::string v77 = a1 + 912;
      do
      {
        std::vector<std::wstring>::pointer begin = a6->__begin_;
        std::vector<std::wstring>::pointer end = a6->__end_;
        if (a6->__begin_ == end)
        {
          if (v78[935] >= 0) {
            size_t v49 = v78[935];
          }
          else {
            size_t v49 = *((void *)v78 + 115);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v81, v49 + 1);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v50 = &v81;
          }
          else {
            uint64_t v50 = (std::string *)v81.__r_.__value_.__r.__words[0];
          }
          if (v49)
          {
            if (v78[935] >= 0) {
              uint64_t v51 = v77;
            }
            else {
              uint64_t v51 = (char *)*((void *)v78 + 114);
            }
            memmove(v50, v51, v49);
          }
          *(_WORD *)((char *)&v50->__r_.__value_.__l.__data_ + v49) = 95;
          int v52 = *(char *)(v30 + 23);
          if (v52 >= 0) {
            float v53 = (const std::string::value_type *)v30;
          }
          else {
            float v53 = *(const std::string::value_type **)v30;
          }
          if (v52 >= 0) {
            std::string::size_type v54 = *(unsigned __int8 *)(v30 + 23);
          }
          else {
            std::string::size_type v54 = *(void *)(v30 + 8);
          }
          float v55 = std::string::append(&v81, v53, v54);
          uint64_t v56 = (char *)v55->__r_.__value_.__r.__words[0];
          *(void *)&long long v98 = v55->__r_.__value_.__l.__size_;
          *(void *)((char *)&v98 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
          char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          std::vector<std::string>::pointer v58 = v85.__end_;
          if (v85.__end_ >= v85.__end_cap_.__value_)
          {
            unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
            unint64_t v61 = v60 + 1;
            if (v60 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v61) {
              unint64_t v61 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v62 = v61;
            }
            __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
            if (v62) {
              float v63 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v85.__end_cap_, v62);
            }
            else {
              float v63 = 0;
            }
            float v64 = v63 + v60;
            __p[0].__first_ = v63;
            __p[0].__begin_ = v64;
            __p[0].__end_cap_.__value_ = &v63[v62];
            v64->__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
            v64->__r_.__value_.__l.__size_ = v98;
            *(std::string::size_type *)((char *)&v64->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v98 + 7);
            *((unsigned char *)&v64->__r_.__value_.__s + 23) = v57;
            __p[0].__end_ = v64 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v85, __p);
            float v59 = v85.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
          }
          else
          {
            v85.__end_->__r_.__value_.__l.__data_ = v56;
            v58->__r_.__value_.__l.__size_ = v98;
            *(std::string::size_type *)((char *)&v58->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v98 + 7);
            *((unsigned char *)&v58->__r_.__value_.__s + 23) = v57;
            float v59 = v58 + 1;
          }
          v85.__end_ = v59;
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          do
          {
            if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
            }
            else {
              size_t size = begin->__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v81, size + 1);
            if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v34 = &v81;
            }
            else {
              int v34 = (std::string *)v81.__r_.__value_.__r.__words[0];
            }
            if (size)
            {
              if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::vector<std::wstring>::pointer v35 = begin;
              }
              else {
                std::vector<std::wstring>::pointer v35 = (std::vector<std::wstring>::pointer)begin->__r_.__value_.__r.__words[0];
              }
              memmove(v34, v35, size);
            }
            *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + size) = 95;
            int v36 = *(char *)(v30 + 23);
            if (v36 >= 0) {
              uint64_t v37 = (const std::string::value_type *)v30;
            }
            else {
              uint64_t v37 = *(const std::string::value_type **)v30;
            }
            if (v36 >= 0) {
              std::string::size_type v38 = *(unsigned __int8 *)(v30 + 23);
            }
            else {
              std::string::size_type v38 = *(void *)(v30 + 8);
            }
            uint64_t v39 = std::string::append(&v81, v37, v38);
            size_t v40 = (char *)v39->__r_.__value_.__r.__words[0];
            *(void *)&long long v98 = v39->__r_.__value_.__l.__size_;
            *(void *)((char *)&v98 + 7) = *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7);
            char v41 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
            v39->__r_.__value_.__l.__size_ = 0;
            v39->__r_.__value_.__r.__words[2] = 0;
            v39->__r_.__value_.__r.__words[0] = 0;
            std::vector<std::string>::pointer v42 = v85.__end_;
            if (v85.__end_ >= v85.__end_cap_.__value_)
            {
              unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
              unint64_t v45 = v44 + 1;
              if (v44 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v45) {
                unint64_t v45 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v46 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v46 = v45;
              }
              __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
              if (v46) {
                float v47 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v85.__end_cap_, v46);
              }
              else {
                float v47 = 0;
              }
              int v48 = v47 + v44;
              __p[0].__first_ = v47;
              __p[0].__begin_ = v48;
              __p[0].__end_cap_.__value_ = &v47[v46];
              v48->__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
              v48->__r_.__value_.__l.__size_ = v98;
              *(std::string::size_type *)((char *)&v48->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v98 + 7);
              *((unsigned char *)&v48->__r_.__value_.__s + 23) = v41;
              __p[0].__end_ = v48 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v85, __p);
              BOOL v43 = v85.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
            }
            else
            {
              v85.__end_->__r_.__value_.__l.__data_ = v40;
              v42->__r_.__value_.__l.__size_ = v98;
              *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v98 + 7);
              *((unsigned char *)&v42->__r_.__value_.__s + 23) = v41;
              BOOL v43 = v42 + 1;
            }
            v85.__end_ = v43;
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v81.__r_.__value_.__l.__data_);
            }
            ++begin;
          }
          while (begin != end);
        }
        v30 += 24;
      }
      while (v30 != v80);
    }
    if (v76)
    {
      float v65 = v85.__begin_;
      float v66 = (long long *)v85.__end_;
LABEL_122:
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v86, v65, v66, 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v65) >> 3));
      goto LABEL_123;
    }
    float v65 = (std::string *)a6->__begin_;
    float v66 = (long long *)a6->__end_;
    if ((long long *)a6->__begin_ != v66)
    {
      if (&v86 == a6) {
        goto LABEL_123;
      }
      goto LABEL_122;
    }
    uint64_t v72 = (const std::string::value_type **)(v78 + 912);
    int v73 = v78[935];
    if (v73 < 0)
    {
      std::string::size_type v74 = *((void *)v78 + 115);
      if (v74 == 4)
      {
        uint64_t v75 = *v72;
        if (*(_DWORD *)*v72 == 1852399981) {
          goto LABEL_123;
        }
      }
      else
      {
        uint64_t v75 = *v72;
      }
      std::string::__init_copy_ctor_external((std::string *)__p, v75, v74);
    }
    else
    {
      if (v73 == 4 && *(_DWORD *)v72 == 1852399981) {
        goto LABEL_123;
      }
      *(_OWORD *)&__p[0].__first_ = *(_OWORD *)v72;
      __p[0].__end_ = (std::__split_buffer<std::string>::pointer)*((void *)v78 + 116);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v86, (std::string *)__p, (long long *)&__p[0].__end_cap_, 1uLL);
    if (SHIBYTE(__p[0].__end_) < 0) {
      operator delete(__p[0].__first_);
    }
LABEL_123:
    memset(&v81, 0, sizeof(v81));
    if (v91 != v92)
    {
      std::string::operator=(v83, v91);
      operator new();
    }
    operator new();
  }
  uint64_t v23 = v20[7];
  *(void *)a8 = v23;
  *(void *)(a8 + 8) = v22;
  if (!v23) {
    goto LABEL_33;
  }
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
    size_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reusing already loaded: ", 24);
    if ((v89 & 0x80u) == 0) {
      int v25 = &v87;
    }
    else {
      int v25 = v87;
    }
    if ((v89 & 0x80u) == 0) {
      uint64_t v26 = v89;
    }
    else {
      uint64_t v26 = v88;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  if (!a1[24]) {
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::push_back[abi:ne180100]((uint64_t *)a1 + 43, (long long *)a8);
  }
  if (a1[25])
  {
    uint64_t v67 = (uint64_t **)kaldi::quasar::Encdec::ComputeEngineFileMap((kaldi::quasar::Encdec *)a1);
    __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v87;
    uint64_t v68 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v67, (const void **)&v87, (uint64_t)&std::piecewise_construct, (long long **)__p);
    uint64_t v70 = *(void *)a8;
    uint64_t v69 = *(void *)(a8 + 8);
    if (v69) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 16), 1uLL, memory_order_relaxed);
    }
    float v71 = (std::__shared_weak_count *)v68[8];
    v68[7] = v70;
    v68[8] = v69;
    if (v71) {
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if ((char)v89 < 0) {
    operator delete(v87);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v91;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v94;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1E807CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig((void **)&a22);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  a22 = &a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = &a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  size_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__swap_out_circular_buffer(a1, v18);
    size_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *size_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    size_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1E80B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::RegisterEspressoModelForCompilation(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t *a5, std::vector<std::string> *a6, int a7)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v59 = a3;
  if (a3 != 1) {
    return;
  }
  memset(&v58, 0, sizeof(v58));
  if (a7)
  {
    uint64_t v7 = *a5;
    uint64_t v54 = a5[1];
    if (*a5 != v54)
    {
      uint64_t v51 = (const void *)(a1 + 912);
      float v53 = a6;
      do
      {
        std::vector<std::wstring>::pointer begin = a6->__begin_;
        std::vector<std::wstring>::pointer end = a6->__end_;
        if (a6->__begin_ == end)
        {
          if (*(char *)(a1 + 935) >= 0) {
            size_t v26 = *(unsigned __int8 *)(a1 + 935);
          }
          else {
            size_t v26 = *(void *)(a1 + 920);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&pn, v26 + 1);
          if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v27 = &pn;
          }
          else {
            int v27 = (std::string *)pn.__r_.__value_.__r.__words[0];
          }
          if (v26)
          {
            if (*(char *)(a1 + 935) >= 0) {
              BOOL v28 = v51;
            }
            else {
              BOOL v28 = *(const void **)(a1 + 912);
            }
            memmove(v27, v28, v26);
          }
          *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v26) = 95;
          int v29 = *(char *)(v7 + 23);
          if (v29 >= 0) {
            uint64_t v30 = (const std::string::value_type *)v7;
          }
          else {
            uint64_t v30 = *(const std::string::value_type **)v7;
          }
          if (v29 >= 0) {
            std::string::size_type v31 = *(unsigned __int8 *)(v7 + 23);
          }
          else {
            std::string::size_type v31 = *(void *)(v7 + 8);
          }
          unint64_t v32 = std::string::append(&pn, v30, v31);
          unint64_t v33 = (char *)v32->__r_.__value_.__r.__words[0];
          __p.__pn_.__r_.__value_.__r.__words[0] = v32->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
          char v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          v32->__r_.__value_.__r.__words[0] = 0;
          std::vector<std::string>::pointer v35 = v58.__end_;
          if (v58.__end_ >= v58.__end_cap_.__value_)
          {
            unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v58.__end_ - (char *)v58.__begin_) >> 3);
            unint64_t v38 = v37 + 1;
            if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3) > v38) {
              unint64_t v38 = 0x5555555555555556 * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v39 = v38;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v58.__end_cap_;
            if (v39) {
              size_t v40 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v58.__end_cap_, v39);
            }
            else {
              size_t v40 = 0;
            }
            char v41 = v40 + v37;
            __v.__first_ = v40;
            __v.__begin_ = v41;
            __v.__end_cap_.__value_ = &v40[v39];
            v41->__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
            v41->__r_.__value_.__l.__size_ = __p.__pn_.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v41->__r_.__value_.__s + 23) = v34;
            __v.__end_ = v41 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v58, &__v);
            int v36 = v58.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          }
          else
          {
            v58.__end_->__r_.__value_.__l.__data_ = v33;
            v35->__r_.__value_.__l.__size_ = __p.__pn_.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v35->__r_.__value_.__s + 23) = v34;
            int v36 = v35 + 1;
          }
          v58.__end_ = v36;
          if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(pn.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          do
          {
            if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
            }
            else {
              size_t size = begin->__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&pn, size + 1);
            if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v11 = &pn;
            }
            else {
              unint64_t v11 = (std::string *)pn.__r_.__value_.__r.__words[0];
            }
            if (size)
            {
              if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v12 = begin;
              }
              else {
                uint64_t v12 = (std::string *)begin->__r_.__value_.__r.__words[0];
              }
              memmove(v11, v12, size);
            }
            *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + size) = 95;
            int v13 = *(char *)(v7 + 23);
            if (v13 >= 0) {
              BOOL v14 = (const std::string::value_type *)v7;
            }
            else {
              BOOL v14 = *(const std::string::value_type **)v7;
            }
            if (v13 >= 0) {
              std::string::size_type v15 = *(unsigned __int8 *)(v7 + 23);
            }
            else {
              std::string::size_type v15 = *(void *)(v7 + 8);
            }
            uint64_t v16 = std::string::append(&pn, v14, v15);
            long long v17 = (char *)v16->__r_.__value_.__r.__words[0];
            __p.__pn_.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
            char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
            v16->__r_.__value_.__l.__size_ = 0;
            v16->__r_.__value_.__r.__words[2] = 0;
            v16->__r_.__value_.__r.__words[0] = 0;
            std::vector<std::string>::pointer v19 = v58.__end_;
            if (v58.__end_ >= v58.__end_cap_.__value_)
            {
              unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v58.__end_ - (char *)v58.__begin_) >> 3);
              unint64_t v22 = v21 + 1;
              if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3) > v22) {
                unint64_t v22 = 0x5555555555555556 * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v23 = v22;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v58.__end_cap_;
              if (v23) {
                size_t v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v58.__end_cap_, v23);
              }
              else {
                size_t v24 = 0;
              }
              int v25 = v24 + v21;
              __v.__first_ = v24;
              __v.__begin_ = v25;
              __v.__end_cap_.__value_ = &v24[v23];
              v25->__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
              v25->__r_.__value_.__l.__size_ = __p.__pn_.__r_.__value_.__r.__words[0];
              *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 7);
              *((unsigned char *)&v25->__r_.__value_.__s + 23) = v18;
              __v.__end_ = v25 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v58, &__v);
              size_t v20 = v58.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
            }
            else
            {
              v58.__end_->__r_.__value_.__l.__data_ = v17;
              v19->__r_.__value_.__l.__size_ = __p.__pn_.__r_.__value_.__r.__words[0];
              *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 7);
              *((unsigned char *)&v19->__r_.__value_.__s + 23) = v18;
              size_t v20 = v19 + 1;
            }
            v58.__end_ = v20;
            if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(pn.__r_.__value_.__l.__data_);
            }
            ++begin;
          }
          while (begin != end);
        }
        v7 += 24;
        a6 = v53;
      }
      while (v7 != v54);
    }
    goto LABEL_86;
  }
  std::vector<std::string>::pointer v42 = (long long *)a6->__end_;
  if ((long long *)a6->__begin_ != v42)
  {
    if (&v58 != a6) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)&v58, a6->__begin_, v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)a6->__begin_) >> 3));
    }
    goto LABEL_86;
  }
  BOOL v43 = (const std::string::value_type **)(a1 + 912);
  int v44 = *(char *)(a1 + 935);
  if (v44 < 0)
  {
    std::string::size_type v45 = *(void *)(a1 + 920);
    if (v45 == 4)
    {
      unint64_t v46 = *v43;
      if (*(_DWORD *)*v43 == 1852399981) {
        goto LABEL_86;
      }
    }
    else
    {
      unint64_t v46 = *v43;
    }
    std::string::__init_copy_ctor_external((std::string *)&__v, v46, v45);
LABEL_84:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::wstring> *)&v58, (std::string *)&__v, (long long *)&__v.__end_cap_, 1uLL);
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    goto LABEL_86;
  }
  if (v44 != 4 || *(_DWORD *)v43 != 1852399981)
  {
    *(_OWORD *)&__v.__first_ = *(_OWORD *)v43;
    __v.__end_ = *(std::__split_buffer<std::string>::pointer *)(a1 + 928);
    goto LABEL_84;
  }
LABEL_86:
  kaldi::SplitStringToVector(a2, ",", &__v);
  std::__split_buffer<std::string>::pointer first = __v.__first_;
  for (std::__split_buffer<std::string>::pointer i = __v.__begin_; first != i; ++first)
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v56, (char *)a1);
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v55.__pn_, (char *)first);
    std::__fs::filesystem::operator/[abi:ne180100](&v55, (uint64_t)&v56, &__p);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string pn = __p.__pn_;
    }
    if (SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    std::allocate_shared[abi:ne180100]<kaldi::quasar::Encdec::ModelCompilationSpec,std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>,kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &,void>(&v59, (uint64_t)&pn, a4, (long long **)&v58, &v56);
    *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = 0uLL;
    std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__emplace_unique_key_args<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>((uint64_t **)(a1 + 1104), &__p, (uint64_t)&__p);
    if (__p.__pn_.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__pn_.__r_.__value_.__l.__size_);
    }
    if (v56.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v56.__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(pn.__r_.__value_.__l.__data_);
    }
  }
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&pn);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1B1E811D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  a29 = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ReadSymbolTable@<X0>(void *a1@<X0>, int a2@<W1>, const std::string *a3@<X2>, uint64_t *a4@<X8>)
{
  if (!a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v33);
    memset(&__s1, 0, sizeof(__s1));
    uint64_t v7 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v8 = std::locale::use_facet(v31, v7);
      unsigned __int8 v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
      std::locale::~locale(v31);
      uint64_t v10 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&__s1, v9);
      if ((*((unsigned char *)v10 + *(void *)(*v10 - 24) + 32) & 5) != 0)
      {
        char v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
LABEL_40:
        if (v25 < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&__s1);
        fst::SymbolTable::ReadText();
      }
      kaldi::Trim(&__s1);
      std::operator+<char>();
      unint64_t v11 = std::string::append(&v30, ">");
      int64_t v32 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31[0].__locale_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s1.__r_.__value_.__l.__size_;
      }
      unsigned int locale = (std::locale::__imp *)HIBYTE(v32);
      int v14 = SHIBYTE(v32);
      if (v32 < 0) {
        unsigned int locale = v31[1].__locale_;
      }
      if ((std::locale::__imp *)size != locale) {
        break;
      }
      if (v32 >= 0) {
        std::string::size_type v15 = (unsigned __int8 *)v31;
      }
      else {
        std::string::size_type v15 = (unsigned __int8 *)v31[0].__locale_;
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        BOOL v24 = memcmp(__s1.__r_.__value_.__l.__data_, v15, __s1.__r_.__value_.__l.__size_) == 0;
        if (v14 < 0) {
          goto LABEL_34;
        }
      }
      else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
      {
        uint64_t v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
        p_s1 = &__s1;
        do
        {
          int v19 = p_s1->__r_.__value_.__s.__data_[0];
          p_s1 = (std::string *)((char *)p_s1 + 1);
          int v18 = v19;
          int v21 = *v15++;
          int v20 = v21;
          BOOL v23 = v16-- != 0;
          BOOL v24 = v18 == v20;
        }
        while (v18 == v20 && v23);
        if (SHIBYTE(v32) < 0) {
          goto LABEL_34;
        }
      }
      else
      {
        BOOL v24 = 1;
        if (SHIBYTE(v32) < 0) {
          goto LABEL_34;
        }
      }
LABEL_23:
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      char v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if (v24) {
        goto LABEL_40;
      }
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v26 = &__s1;
      }
      else {
        size_t v26 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = __s1.__r_.__value_.__l.__size_;
      }
      BOOL v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)v26, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n", 1);
    }
    BOOL v24 = 0;
    if ((SHIBYTE(v32) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_34:
    operator delete(v31[0].__locale_);
    goto LABEL_23;
  }
  uint64_t result = fst::SymbolTable::Read(a1, a3);
  *a4 = result;
  return result;
}

void sub_1B1E816B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::locale a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::ReadMapped(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 520)) {
    kaldi::ReadMapped<kaldi::quasar::Encdec>(a2);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Nnet already mapped from a file");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void std::shared_ptr<fst::MappedFile>::reset[abi:ne180100]<fst::MappedFile,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(&v2, a2);
}

void kaldi::ReadMapped<kaldi::quasar::Encdec>(uint64_t a1)
{
  v18[34] = *MEMORY[0x1E4F143B8];
  char v8 = 0;
  kaldi::Input::Input(v7, a1, &v8);
  if (v8)
  {
    uint64_t v2 = kaldi::Input::Stream((kaldi::Input *)v7);
    std::istream::seekg();
    std::istream::tellg();
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    std::istream::seekg();
    fst::MappedFile::Map(v2, a1, (fst::MappedFile *)v18[16]);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
  std::string::size_type v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
}

void sub_1B1E819E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::Encdec::SetMappedFile(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 520))
  {
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v5, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nnet already mapped from a file - ignoring", 42);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v5);
    }
  }
  else
  {
    uint64_t v2 = *a2;
    uint64_t v3 = a2[1];
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 520) = v2;
    int v4 = *(std::__shared_weak_count **)(a1 + 528);
    *(void *)(a1 + 528) = v3;
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1B1E81AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Encdec::Read(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(__p, a2, 0, 0, 0);
    int v8 = 2;
    kaldi::quasar::Encdec::ReadMapped(a1, (uint64_t)__p);
  }
  unsigned __int8 v6 = 0;
  kaldi::Input::Input(__p, a2, &v6);
  int v4 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)__p);
  kaldi::quasar::Encdec::Read(a1, v4, v6, 0, 0);
  kaldi::Input::~Input((kaldi::Input *)__p);
  return 1;
}

void sub_1B1E81B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v251 = *MEMORY[0x1E4F143B8];
  memset(v248, 0, sizeof(v248));
  v246[1] = 0;
  v246[0] = 0;
  uint64_t v247 = 0;
  v244[1] = 0;
  v244[0] = 0;
  uint64_t v245 = 0;
  uint64_t v242 = 0;
  v241 = 0;
  uint64_t v243 = 0;
  *(_WORD *)(a1 + 1507) = 0;
  uint64_t v8 = *(void *)(a1 + 552);
  *(void *)(a1 + 552) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 560);
  *(void *)(a1 + 560) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  char v222 = 0;
  v211 = (uint64_t **)(a1 + 1128);
  v214 = (long long *)(a1 + 1912);
  v215 = (long long *)(a1 + 1720);
  uint64_t v213 = a1 + 568;
  v220 = (uint64_t **)(a1 + 440);
  v216 = (uint64_t **)(a1 + 392);
  v217 = (std::string *)(a1 + 1008);
  v218 = (std::string *)(a1 + 984);
  v221 = (std::string *)(a1 + 960);
  while ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)v248);
    if (SHIBYTE(v248[2]) < 0)
    {
      long long v11 = v248[1];
      switch((unint64_t)v248[1])
      {
        case 0xAuLL:
          if (*(void *)v248[0] == 0x636F567475706E49 && *((_WORD *)v248[0] + 4) == 25185)
          {
LABEL_21:
            kaldi::ReadToken(a2, a3, (uint64_t)v246);
            v232[0] = 0;
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__s, (char *)a1);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)v246);
            std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&exception_object, (uint64_t)&__s, (std::__fs::filesystem::path *)&__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&__p.__first_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              __p.__end_ = (std::__split_buffer<std::string>::pointer)__str.__r_.__value_.__r.__words[2];
            }
            kaldi::Input::Input(&v238, &__p, v232);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(exception_object.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            uint64_t v82 = kaldi::Input::Stream((kaldi::Input *)&v238);
            kaldi::quasar::Vocab::Vocab(&__str, v82, v232[0], 1);
            operator new();
          }
          goto LABEL_266;
        case 0xBuLL:
          if (*(void *)v248[0] == 0x6F5674757074754FLL && *(void *)((char *)v248[0] + 3) == 0x6261636F56747570)
          {
LABEL_161:
            kaldi::ReadToken(a2, a3, (uint64_t)v244);
            v232[0] = 0;
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__s, (char *)a1);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)v244);
            std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&exception_object, (uint64_t)&__s, (std::__fs::filesystem::path *)&__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&__p.__first_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              __p.__end_ = (std::__split_buffer<std::string>::pointer)__str.__r_.__value_.__r.__words[2];
            }
            kaldi::Input::Input(&v238, &__p, v232);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(exception_object.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            uint64_t v83 = kaldi::Input::Stream((kaldi::Input *)&v238);
            kaldi::quasar::Vocab::Vocab(&__str, v83, v232[0], 1);
            operator new();
          }
          goto LABEL_266;
        case 0xCuLL:
          if (*(void *)v248[0] == 0x4774756F64616552 && *((_DWORD *)v248[0] + 2) == 1752195442)
          {
LABEL_310:
            *(unsigned char *)(a1 + 1507) = 1;
            uint64_t v32 = a1 + 128;
            goto LABEL_317;
          }
          if (v248[1] != (void *)15) {
            goto LABEL_197;
          }
LABEL_192:
          BOOL v52 = *(void *)v248[0] == 0x5374756F64616552 && *(void *)((char *)v248[0] + 7) == 0x7864497472617453;
          uint64_t v20 = a1 + 2124;
          if (v52) {
            goto LABEL_313;
          }
          long long v11 = v248[1];
LABEL_197:
          if (v11 != (void *)18) {
            goto LABEL_206;
          }
LABEL_198:
          BOOL v54 = *(void *)v248[0] == 0x5774756F64616552
             && *((void *)v248[0] + 1) == 0x6D74666F53687469
             && *((_WORD *)v248[0] + 8) == 30817;
          int v29 = (char *)(a1 + 2128);
          if (v54) {
            goto LABEL_280;
          }
          long long v11 = v248[1];
LABEL_206:
          if (v11 != (void *)15) {
            goto LABEL_212;
          }
          BOOL v55 = *(void *)v248[0] == 0x4974756F64616552 && *(void *)((char *)v248[0] + 7) == 0x7274537475706E49;
          uint64_t v32 = a1 + 1984;
          if (v55) {
            goto LABEL_317;
          }
          long long v11 = v248[1];
LABEL_212:
          if (v11 != (void *)16) {
            goto LABEL_218;
          }
          BOOL v56 = *(void *)v248[0] == 0x4F74756F64616552 && *((void *)v248[0] + 1) == 0x7274537475707475;
          uint64_t v32 = a1 + 2008;
          if (v56) {
            goto LABEL_317;
          }
          long long v11 = v248[1];
LABEL_218:
          if (v11 != (void *)12) {
            goto LABEL_224;
          }
          BOOL v57 = *(void *)v248[0] == 0x477265646F636E45 && *((_DWORD *)v248[0] + 2) == 1752195442;
          uint64_t v32 = a1 + 80;
          if (v57) {
            goto LABEL_317;
          }
LABEL_223:
          long long v11 = v248[1];
LABEL_224:
          if (v11 != (void *)16) {
            goto LABEL_230;
          }
          if (*(void *)v248[0] == 0x4C7265646F636E45 && *((void *)v248[0] + 1) == 0x6870617247676E61) {
            goto LABEL_384;
          }
          long long v11 = v248[1];
LABEL_230:
          if (v11 != (void *)12) {
            goto LABEL_236;
          }
          BOOL v59 = *(void *)v248[0] == 0x477265646F636544 && *((_DWORD *)v248[0] + 2) == 1752195442;
          uint64_t v32 = a1 + 104;
          if (v59) {
            goto LABEL_317;
          }
          long long v11 = v248[1];
LABEL_236:
          if (v11 != (void *)16) {
            goto LABEL_242;
          }
          if (*(void *)v248[0] == 0x4C7265646F636544 && *((void *)v248[0] + 1) == 0x6870617247676E61) {
            goto LABEL_410;
          }
          long long v11 = v248[1];
LABEL_242:
          if (v11 != (void *)17) {
            goto LABEL_251;
          }
          if (*(void *)v248[0] == 0x7265766F646E6148
            && *((void *)v248[0] + 1) == 0x70617247676E614CLL
            && *((unsigned char *)v248[0] + 16) == 104)
          {
LABEL_311:
            memset(&__str, 0, sizeof(__str));
            memset(&__s, 0, sizeof(__s));
            kaldi::ReadToken(a2, a3, (uint64_t)&__str);
            kaldi::ReadToken(a2, a3, (uint64_t)&__s);
            std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)&__p, (long long *)&__str, (long long *)&__s);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)(a1 + 416), (const void **)&__p.__first_, (uint64_t)&__p);
            goto LABEL_411;
          }
          long long v11 = v248[1];
LABEL_251:
          if (v11 == (void *)14) {
            goto LABEL_261;
          }
          goto LABEL_266;
        case 0xEuLL:
          if (*(void *)v248[0] != 0x6F73736572707345 || *(void *)((char *)v248[0] + 6) != 0x656E69676E456F73)
          {
            if (*(void *)v248[0] == 0x6E69646465626D45 && *(void *)((char *)v248[0] + 6) == 0x6870617247676E69)
            {
LABEL_316:
              *(unsigned char *)(a1 + 1508) = 1;
              uint64_t v32 = a1 + 56;
              goto LABEL_317;
            }
LABEL_261:
            std::string v30 = (void **)v248[0];
LABEL_262:
            float v65 = *v30;
            uint64_t v66 = *(uint64_t *)((char *)v30 + 6);
            if (v65 == (void *)0x6E614C7475706E49 && v66 == 0x6870617247676E61)
            {
              memset(&__str, 0, sizeof(__str));
              memset(&__s, 0, sizeof(__s));
              kaldi::ReadToken(a2, a3, (uint64_t)&__str);
              kaldi::ReadToken(a2, a3, (uint64_t)&__s);
              std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)&__p, (long long *)&__str, (long long *)&__s);
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(v220, (const void **)&__p.__first_, (uint64_t)&__p);
              goto LABEL_268;
            }
            goto LABEL_266;
          }
LABEL_308:
          memset(&__str, 0, sizeof(__str));
          kaldi::ReadToken(a2, a3, (uint64_t)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v237, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else {
            std::string v237 = __str;
          }
          kaldi::quasar::Encdec::ParseEnginePlatform((uint64_t)&v237, (uint64_t *)&__p);
          *(void *)(a1 + 1080) = __p.__first_;
          if (*(char *)(a1 + 983) < 0) {
            operator delete(v221->__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&v221->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__begin_;
          *(void *)(a1 + 976) = __p.__end_cap_.__value_;
          HIBYTE(__p.__end_cap_.__value_) = 0;
          LOBYTE(__p.__begin_) = 0;
          if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v68 = (void *)v237.__r_.__value_.__r.__words[0];
            goto LABEL_271;
          }
          break;
        case 0xFuLL:
          goto LABEL_192;
        case 0x12uLL:
          if (*(void *)v248[0] != 0x79537475706E493CLL
            || *((void *)v248[0] + 1) != 0x6C6261546C6F626DLL
            || *((_WORD *)v248[0] + 8) != 15973)
          {
            goto LABEL_198;
          }
LABEL_150:
          std::string::basic_string[abi:ne180100]<0>(&__p, "InputSymbolTable");
          kaldi::quasar::ReadSymbolTable(a2, a3, (const std::string *)&__p, (uint64_t *)&__str);
          uint64_t v44 = *(void *)(a1 + 552);
          *(void *)(a1 + 552) = __str.__r_.__value_.__r.__words[0];
          if (v44) {
            (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
          }
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          *(_DWORD *)(a1 + 812) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 552) + 104))(*(void *)(a1 + 552), "<s>");
          *(_DWORD *)(a1 + 816) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 552) + 104))(*(void *)(a1 + 552), "</s>");
          *(_DWORD *)(a1 + 820) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 552) + 104))(*(void *)(a1 + 552), "<unk>");
          if (kaldi::g_kaldi_verbose_level < 1) {
            goto LABEL_378;
          }
LABEL_376:
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input symbol table size ", 24);
          (*(void (**)(void))(**(void **)(a1 + 552) + 120))(*(void *)(a1 + 552));
          std::ostream::operator<<();
          goto LABEL_377;
        case 0x13uLL:
          if (*(void *)v248[0] != 0x5374757074754F3CLL
            || *((void *)v248[0] + 1) != 0x6261546C6F626D79
            || *(void *)((char *)v248[0] + 11) != 0x3E656C6261546C6FLL)
          {
            goto LABEL_266;
          }
LABEL_171:
          std::string::basic_string[abi:ne180100]<0>(&__p, "OutputSymbolTable");
          kaldi::quasar::ReadSymbolTable(a2, a3, (const std::string *)&__p, (uint64_t *)&__str);
          uint64_t v48 = *(void *)(a1 + 560);
          *(void *)(a1 + 560) = __str.__r_.__value_.__r.__words[0];
          if (v48) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
          }
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          *(_DWORD *)(a1 + 824) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 560) + 104))(*(void *)(a1 + 560), "<s>");
          *(_DWORD *)(a1 + 828) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 560) + 104))(*(void *)(a1 + 560), "</s>");
          *(_DWORD *)(a1 + 832) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 560) + 104))(*(void *)(a1 + 560), "<unk>");
          if (kaldi::g_kaldi_verbose_level >= 1) {
            goto LABEL_176;
          }
          goto LABEL_378;
        case 0x14uLL:
          if (*(void *)v248[0] != 0x6D79537475706E49
            || *((void *)v248[0] + 1) != 0x656C6261546C6F62
            || *((_DWORD *)v248[0] + 4) != 1701603654)
          {
            goto LABEL_266;
          }
LABEL_185:
          kaldi::ReadToken(a2, a3, (uint64_t)v246);
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v238.__pn_, (char *)v246);
          std::__fs::filesystem::operator/[abi:ne180100](&v238, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__str, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            std::string __str = __s;
          }
          fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&__p);
          uint64_t Text = fst::SymbolTable::ReadText((uint64_t)&__str);
          uint64_t v85 = *(void *)(a1 + 552);
          *(void *)(a1 + 552) = Text;
          if (v85) {
            (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
          }
          if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
            operator delete(__p.__begin_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v238.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v238.__pn_.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(exception_object.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)(a1 + 812) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 552) + 104))(*(void *)(a1 + 552), "<s>");
          *(_DWORD *)(a1 + 816) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 552) + 104))(*(void *)(a1 + 552), "</s>");
          *(_DWORD *)(a1 + 820) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 552) + 104))(*(void *)(a1 + 552), "<unk>");
          if (kaldi::g_kaldi_verbose_level >= 1) {
            goto LABEL_376;
          }
          goto LABEL_378;
        case 0x15uLL:
          if (*(void *)v248[0] == 0x795374757074754FLL
            && *((void *)v248[0] + 1) == 0x6C6261546C6F626DLL
            && *(void *)((char *)v248[0] + 13) == 0x656C6946656C6261)
          {
LABEL_306:
            kaldi::ReadToken(a2, a3, (uint64_t)v244);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v238.__pn_, (char *)v244);
            std::__fs::filesystem::operator/[abi:ne180100](&v238, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__str, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              std::string __str = __s;
            }
            fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&__p);
            uint64_t v80 = fst::SymbolTable::ReadText((uint64_t)&__str);
            uint64_t v81 = *(void *)(a1 + 560);
            *(void *)(a1 + 560) = v80;
            if (v81) {
              (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
            }
            if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
              operator delete(__p.__begin_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v238.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v238.__pn_.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(exception_object.__r_.__value_.__l.__data_);
            }
            *(_DWORD *)(a1 + 824) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 560) + 104))(*(void *)(a1 + 560), "<s>");
            *(_DWORD *)(a1 + 828) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 560) + 104))(*(void *)(a1 + 560), "</s>");
            *(_DWORD *)(a1 + 832) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 560) + 104))(*(void *)(a1 + 560), "<unk>");
            if (kaldi::g_kaldi_verbose_level >= 1)
            {
LABEL_176:
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Output symbol table size ", 25);
              (*(void (**)(void))(**(void **)(a1 + 560) + 120))(*(void *)(a1 + 560));
              std::ostream::operator<<();
LABEL_377:
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            }
            goto LABEL_378;
          }
          if (*(void *)v248[0] == 0x457265646F636E45
            && *((void *)v248[0] + 1) == 0x456F737365727073
            && *(void *)((char *)v248[0] + 13) == 0x656E69676E456F73)
          {
LABEL_314:
            memset(&__str, 0, sizeof(__str));
            kaldi::ReadToken(a2, a3, (uint64_t)&__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v236, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else {
              std::string v236 = __str;
            }
            kaldi::quasar::Encdec::ParseEnginePlatform((uint64_t)&v236, (uint64_t *)&__p);
            *(void *)(a1 + 1088) = __p.__first_;
            if (*(char *)(a1 + 1007) < 0) {
              operator delete(v218->__r_.__value_.__l.__data_);
            }
            *(_OWORD *)&v218->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__begin_;
            *(void *)(a1 + 1000) = __p.__end_cap_.__value_;
            HIBYTE(__p.__end_cap_.__value_) = 0;
            LOBYTE(__p.__begin_) = 0;
            if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
            {
              uint64_t v68 = (void *)v236.__r_.__value_.__r.__words[0];
              goto LABEL_271;
            }
          }
          else
          {
            if (*(void *)v248[0] != 0x457265646F636544
              || *((void *)v248[0] + 1) != 0x456F737365727073
              || *(void *)((char *)v248[0] + 13) != 0x656E69676E456F73)
            {
              goto LABEL_266;
            }
LABEL_303:
            memset(&__str, 0, sizeof(__str));
            kaldi::ReadToken(a2, a3, (uint64_t)&__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v235, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else {
              std::string v235 = __str;
            }
            kaldi::quasar::Encdec::ParseEnginePlatform((uint64_t)&v235, (uint64_t *)&__p);
            *(void *)(a1 + 1096) = __p.__first_;
            if (*(char *)(a1 + 1031) < 0) {
              operator delete(v217->__r_.__value_.__l.__data_);
            }
            *(_OWORD *)&v217->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__begin_;
            *(void *)(a1 + 1024) = __p.__end_cap_.__value_;
            HIBYTE(__p.__end_cap_.__value_) = 0;
            LOBYTE(__p.__begin_) = 0;
            if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
            {
              uint64_t v68 = (void *)v235.__r_.__value_.__r.__words[0];
              goto LABEL_271;
            }
          }
          break;
        default:
          goto LABEL_197;
      }
LABEL_272:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)__str.__r_.__value_.__r.__words[0];
LABEL_274:
        operator delete(first);
      }
    }
    else
    {
      switch(HIBYTE(v248[2]))
      {
        case 0xA:
          BOOL v10 = v248[0] == (void *)0x636F567475706E49 && LOWORD(v248[1]) == 25185;
          if (!v10) {
            goto LABEL_266;
          }
          goto LABEL_21;
        case 0xB:
          if (v248[0] != (void *)0x6F5674757074754FLL || *(void **)((char *)v248 + 3) != (void *)0x6261636F56747570) {
            goto LABEL_266;
          }
          goto LABEL_161;
        case 0xC:
          if (v248[0] != (void *)0x4774756F64616552 || LODWORD(v248[1]) != 1752195442) {
            goto LABEL_104;
          }
          goto LABEL_310;
        case 0xE:
          if (v248[0] == (void *)0x6F73736572707345 && *(void **)((char *)v248 + 6) == (void *)0x656E69676E456F73) {
            goto LABEL_308;
          }
          if (v248[0] != (void *)0x6E69646465626D45 || *(void **)((char *)v248 + 6) != (void *)0x6870617247676E69) {
            goto LABEL_123;
          }
          goto LABEL_316;
        case 0xF:
          BOOL v19 = v248[0] == (void *)0x5374756F64616552 && *(void **)((char *)v248 + 7) == (void *)0x7864497472617453;
          uint64_t v20 = a1 + 2124;
          if (v19) {
            goto LABEL_313;
          }
          if (HIBYTE(v248[2]) == 12) {
            goto LABEL_104;
          }
          if (HIBYTE(v248[2]) == 14) {
            goto LABEL_123;
          }
          if (HIBYTE(v248[2]) != 15) {
            goto LABEL_266;
          }
LABEL_91:
          BOOL v31 = v248[0] == (void *)0x4974756F64616552 && *(void **)((char *)v248 + 7) == (void *)0x7274537475706E49;
          uint64_t v32 = a1 + 1984;
          if (v31) {
            goto LABEL_317;
          }
          if (HIBYTE(v248[2]) == 12) {
            goto LABEL_104;
          }
          goto LABEL_122;
        case 0x10:
LABEL_97:
          BOOL v33 = v248[0] == (void *)0x4F74756F64616552 && v248[1] == (void *)0x7274537475707475;
          uint64_t v32 = a1 + 2008;
          if (v33) {
            goto LABEL_317;
          }
          if (HIBYTE(v248[2]) == 16)
          {
            if (v248[0] == (void *)0x4C7265646F636E45 && v248[1] == (void *)0x6870617247676E61)
            {
LABEL_384:
              memset(&__str, 0, sizeof(__str));
              memset(&__s, 0, sizeof(__s));
              kaldi::ReadToken(a2, a3, (uint64_t)&__str);
              kaldi::ReadToken(a2, a3, (uint64_t)&__s);
              std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)&__p, (long long *)&__str, (long long *)&__s);
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)(a1 + 368), (const void **)&__p.__first_, (uint64_t)&__p);
            }
            else
            {
              if (v248[0] != (void *)0x4C7265646F636544 || v248[1] != (void *)0x6870617247676E61)
              {
LABEL_122:
                if (HIBYTE(v248[2]) != 14) {
                  goto LABEL_266;
                }
LABEL_123:
                std::string v30 = v248;
                goto LABEL_262;
              }
LABEL_410:
              memset(&__str, 0, sizeof(__str));
              memset(&__s, 0, sizeof(__s));
              kaldi::ReadToken(a2, a3, (uint64_t)&__str);
              kaldi::ReadToken(a2, a3, (uint64_t)&__s);
              std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)&__p, (long long *)&__str, (long long *)&__s);
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(v216, (const void **)&__p.__first_, (uint64_t)&__p);
            }
LABEL_411:
            if (v250 < 0) {
              operator delete(__p.__end_cap_.__value_);
            }
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            goto LABEL_269;
          }
          if (HIBYTE(v248[2]) == 14) {
            goto LABEL_123;
          }
          if (HIBYTE(v248[2]) != 12) {
            goto LABEL_266;
          }
LABEL_104:
          BOOL v34 = v248[0] == (void *)0x477265646F636E45 && LODWORD(v248[1]) == 1752195442;
          uint64_t v32 = a1 + 80;
          if (v34) {
            goto LABEL_317;
          }
          if ((HIBYTE(v248[2]) & 0x80) != 0) {
            goto LABEL_223;
          }
          if (HIBYTE(v248[2]) == 12)
          {
            BOOL v35 = v248[0] == (void *)0x477265646F636544 && LODWORD(v248[1]) == 1752195442;
            uint64_t v32 = a1 + 104;
            if (v35) {
              goto LABEL_317;
            }
          }
LABEL_266:
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "EncoderLangFunc"))
          {
            memset(&__str, 0, sizeof(__str));
            memset(&__s, 0, sizeof(__s));
            kaldi::ReadToken(a2, a3, (uint64_t)&__str);
            kaldi::ReadToken(a2, a3, (uint64_t)&__s);
            std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)&__p, (long long *)&__str, (long long *)&__s);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)(a1 + 464), (const void **)&__p.__first_, (uint64_t)&__p);
LABEL_268:
            std::pair<std::string,std::string>::~pair((uint64_t)&__p);
LABEL_269:
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            {
              uint64_t v68 = (void *)__s.__r_.__value_.__r.__words[0];
LABEL_271:
              operator delete(v68);
            }
            goto LABEL_272;
          }
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "Mmap"))
          {
            LOBYTE(__p.__first_) = 0;
            kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&__p);
            break;
          }
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "AddSrcBos"))
          {
            kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 1510));
            char v222 = 1;
            break;
          }
          BOOL v70 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "AddSrcEos");
          int v29 = (char *)(a1 + 1511);
          if (v70) {
            goto LABEL_280;
          }
          BOOL v77 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "PadSrc");
          uint64_t v20 = a1 + 848;
          if (v77)
          {
LABEL_313:
            kaldi::ReadBasicType<int>(a2, a3, v20);
            break;
          }
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "PadSrcConfigs"))
          {
            memset(&__p, 0, 24);
            memset(&__str, 0, sizeof(__str));
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            kaldi::SplitStringToVector((const std::string *)&__p, ",", 1, (uint64_t)&__str);
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
            for (std::__split_buffer<std::string>::pointer i = (const std::string *)__str.__r_.__value_.__r.__words[0]; i != (const std::string *)size; ++i)
            {
              LODWORD(__s.__r_.__value_.__l.__data_) = std::stoi(i, 0, 10);
              std::vector<int>::push_back[abi:ne180100](a1 + 856, &__s);
            }
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
            goto LABEL_393;
          }
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "ConfigNames"))
          {
            memset(&__p, 0, 24);
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            kaldi::SplitStringToVector((const std::string *)&__p, ",", 1, a1 + 880);
LABEL_393:
            if ((SHIBYTE(__p.__end_) & 0x80000000) == 0) {
              break;
            }
            std::__split_buffer<std::string>::pointer first = __p.__first_;
            goto LABEL_274;
          }
          BOOL v87 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "MaxSrcTokens");
          uint64_t v20 = a1 + 904;
          if (v87) {
            goto LABEL_313;
          }
          BOOL v88 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "Reverse");
          int v29 = (char *)(a1 + 1504);
          if (v88) {
            goto LABEL_280;
          }
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "IsRNN"))
          {
            __str.__r_.__value_.__s.__data_[0] = 0;
            kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&__str);
            if (__str.__r_.__value_.__s.__data_[0])
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unsupported MT Espresso model type.", 35);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
            }
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "UseAttention"))
          {
            __str.__r_.__value_.__s.__data_[0] = 0;
            kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&__str);
            if (__str.__r_.__value_.__s.__data_[0])
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unsupported MT Espresso model type.", 35);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
            }
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "UseTopK"))
          {
            __str.__r_.__value_.__s.__data_[0] = 0;
            kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&__str);
            if (__str.__r_.__value_.__s.__data_[0])
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unsupported MT Espresso model type.", 35);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
            }
          }
          else
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "ModelBatchSize"))
            {
              kaldi::ReadBasicType<int>(a2, a3, a1 + 840);
              *(unsigned char *)(a1 + 844) = 1;
              break;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "BPEEncoder"))
            {
              kaldi::ReadToken(a2, a3, (uint64_t)&v241);
              std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
              std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v238.__pn_, (char *)&v241);
              std::__fs::filesystem::operator/[abi:ne180100](&v238, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&__str, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else {
                std::string __str = __s;
              }
              std::ifstream::basic_ifstream((uint64_t *)&__p);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__s.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v238.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v238.__pn_.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(exception_object.__r_.__value_.__l.__data_);
              }
              if ((kaldi::quasar::BPE::Read(v213, (uint64_t *)&__p, 1) & 1) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
                v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Failed to read BPE model from : ", 32);
                if (v243 >= 0) {
                  v209 = &v241;
                }
                else {
                  v209 = v241;
                }
                if (v243 >= 0) {
                  uint64_t v210 = HIBYTE(v243);
                }
                else {
                  uint64_t v210 = v242;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)v209, v210);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__str);
              }
              *(unsigned char *)(a1 + 1505) = 1;
              std::ifstream::~ifstream(&__p);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "<BPE>"))
            {
              if ((kaldi::quasar::BPE::Read(v213, a2, a3) & 1) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to read embedded BPE model", 33);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
              }
              if (kaldi::g_kaldi_verbose_level >= 1)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"BPE read - entries: ", 20);
                std::ostream::operator<<();
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
              }
              *(unsigned char *)(a1 + 1505) = 1;
            }
            else
            {
              if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "AddTag"))
              {
                kaldi::ReadToken(a2, a3, a1 + 2384);
LABEL_446:
                *(unsigned char *)(a1 + 2376) = 1;
                break;
              }
              if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "TagFormat"))
              {
                kaldi::ReadToken(a2, a3, a1 + 2408);
                goto LABEL_446;
              }
              BOOL v90 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "IsEspresso");
              int v29 = (char *)(a1 + 1512);
              if (v90) {
                goto LABEL_280;
              }
              BOOL v91 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "SourceInputStr");
              uint64_t v32 = a1 + 1744;
              if (v91) {
                goto LABEL_317;
              }
              BOOL v92 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "TargetInputStr");
              uint64_t v32 = a1 + 1768;
              if (v92) {
                goto LABEL_317;
              }
              BOOL v93 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "EncoderValuesStr");
              uint64_t v32 = a1 + 1672;
              if (v93) {
                goto LABEL_317;
              }
              BOOL v94 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "InputNetValuesStr");
              uint64_t v32 = a1 + 1960;
              if (v94) {
                goto LABEL_317;
              }
              BOOL v95 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "ScoresStr");
              uint64_t v32 = a1 + 1720;
              if (v95) {
                goto LABEL_317;
              }
              BOOL v96 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "ShortlistStr");
              uint64_t v32 = a1 + 1888;
              if (v96) {
                goto LABEL_317;
              }
              if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "ShortlistFile"))
              {
                memset(&__str, 0, sizeof(__str));
                kaldi::ReadToken(a2, a3, (uint64_t)&__str);
                unsigned __int8 v233 = 0;
                std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
                std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v238.__pn_, (char *)&__str);
                std::__fs::filesystem::operator/[abi:ne180100](&v238, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
                if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
                }
                else
                {
                  *(_OWORD *)&__p.__first_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                  __p.__end_ = (std::__split_buffer<std::string>::pointer)__s.__r_.__value_.__r.__words[2];
                }
                kaldi::Input::Input(v232, &__p, &v233);
                if (SHIBYTE(__p.__end_) < 0) {
                  operator delete(__p.__first_);
                }
                if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__s.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v238.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v238.__pn_.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(exception_object.__r_.__value_.__l.__data_);
                }
                if (kaldi::g_kaldi_verbose_level >= 1)
                {
                  kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Loading Shortlist file...", 25);
                  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
                }
                uint64_t v97 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v232);
                kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataInOneFile(v97, v233, 0);
              }
              if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "<Shortlist>"))
              {
                if (kaldi::g_kaldi_verbose_level >= 1)
                {
                  kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading Shortlist...", 20);
                  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
                }
                std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v231, (char *)a1);
                kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataBasedOnTagInInput(a2, a3, a4, (uint64_t)&v231);
              }
              if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "ReadoutNnetFile"))
              {
                memset(&__str, 0, sizeof(__str));
                kaldi::ReadToken(a2, a3, (uint64_t)&__str);
                unsigned __int8 v233 = 0;
                std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
                std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v238.__pn_, (char *)&__str);
                std::__fs::filesystem::operator/[abi:ne180100](&v238, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
                if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
                }
                else
                {
                  *(_OWORD *)&__p.__first_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                  __p.__end_ = (std::__split_buffer<std::string>::pointer)__s.__r_.__value_.__r.__words[2];
                }
                kaldi::Input::Input(v232, &__p, &v233);
                if (SHIBYTE(__p.__end_) < 0) {
                  operator delete(__p.__first_);
                }
                if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__s.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v238.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v238.__pn_.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(exception_object.__r_.__value_.__l.__data_);
                }
                if (kaldi::g_kaldi_verbose_level >= 1)
                {
                  kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Loading readout Nnet file...", 28);
                  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
                }
                long long v98 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v232);
                kaldi::nnet1::Nnet::Read(v211, v98, v233, 0);
                *(unsigned char *)(a1 + 1506) = 1;
                kaldi::Input::~Input((kaldi::Input *)v232);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::__split_buffer<std::string>::pointer v99 = (std::__split_buffer<std::string>::pointer)__str.__r_.__value_.__r.__words[0];
LABEL_495:
                  operator delete(v99);
                  break;
                }
              }
              else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "<ReadoutNnet>"))
              {
                if (kaldi::g_kaldi_verbose_level >= 1)
                {
                  kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading readout Nnet...", 23);
                  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
                }
                kaldi::nnet1::Nnet::Read(v211, a2, a3, a4);
                *(unsigned char *)(a1 + 1506) = 1;
              }
              else
              {
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "AlignmentLayerStr"))
                {
                  kaldi::ReadToken(a2, a3, (uint64_t)v214);
                  *(unsigned char *)(a1 + 2164) = 1;
                  break;
                }
                BOOL v100 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "AlignmentHeads");
                uint64_t v20 = a1 + 2152;
                if (v100) {
                  goto LABEL_313;
                }
                BOOL v101 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "ShiftedAlignments");
                int v29 = (char *)(a1 + 2165);
                if (v101) {
                  goto LABEL_280;
                }
                BOOL v102 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "TransposeSourceInput");
                int v29 = (char *)(a1 + 1513);
                if (v102) {
                  goto LABEL_280;
                }
                BOOL v103 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "TwoDimSourceInput");
                int v29 = (char *)(a1 + 1514);
                if (v103) {
                  goto LABEL_280;
                }
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "HandoverStrings"))
                {
                  memset(&__p, 0, 24);
                  kaldi::ReadToken(a2, a3, (uint64_t)&__p);
                  kaldi::SplitStringToVector((const std::string *)&__p, ",", 1, a1 + 2056);
                }
                else
                {
                  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "StateStrings"))
                  {
                    BOOL v104 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "StateWidth");
                    uint64_t v20 = a1 + 2456;
                    if (v104) {
                      goto LABEL_313;
                    }
                    BOOL v105 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "StateLayoutND");
                    int v29 = (char *)(a1 + 2460);
                    if (v105) {
                      goto LABEL_280;
                    }
                    BOOL v106 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "NeedsPosition");
                    int v29 = (char *)(a1 + 1515);
                    if (v106) {
                      goto LABEL_280;
                    }
                    BOOL v107 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "NeedsEncoderPositions");
                    int v29 = (char *)(a1 + 1516);
                    if (v107) {
                      goto LABEL_280;
                    }
                    BOOL v108 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "NeedsEncoderOut");
                    int v29 = (char *)(a1 + 1517);
                    if (v108) {
                      goto LABEL_280;
                    }
                    BOOL v109 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "PositionZeroBased");
                    int v29 = (char *)(a1 + 1518);
                    if (v109) {
                      goto LABEL_280;
                    }
                    BOOL v110 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "ApplyLog");
                    int v29 = (char *)(a1 + 1519);
                    if (v110) {
                      goto LABEL_280;
                    }
                    BOOL v111 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "PositionScaleStr");
                    uint64_t v32 = a1 + 1864;
                    if (!v111)
                    {
                      BOOL v112 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "NoSymbolTables");
                      int v29 = (char *)(a1 + 2461);
                      if (!v112)
                      {
                        BOOL v113 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "EncoderExplicitConfigFunctions");
                        int v29 = (char *)(a1 + 1520);
                        if (!v113)
                        {
                          BOOL v114 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v248, "EncoderLangSrcOnly");
                          int v29 = (char *)(a1 + 1521);
                          if (!v114)
                          {
                            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                            unint64_t v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                            if (SHIBYTE(v248[2]) >= 0) {
                              unint64_t v116 = v248;
                            }
                            else {
                              unint64_t v116 = (void **)v248[0];
                            }
                            if (SHIBYTE(v248[2]) >= 0) {
                              uint64_t v117 = HIBYTE(v248[2]);
                            }
                            else {
                              uint64_t v117 = (uint64_t)v248[1];
                            }
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)v116, v117);
                            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
                          }
                        }
                      }
LABEL_280:
                      kaldi::ReadBasicType<BOOL>(a2, a3, v29);
                      break;
                    }
LABEL_317:
                    kaldi::ReadToken(a2, a3, v32);
                    break;
                  }
                  memset(&__p, 0, 24);
                  kaldi::ReadToken(a2, a3, (uint64_t)&__p);
                  kaldi::SplitStringToVector((const std::string *)&__p, ",", 1, a1 + 2080);
                }
                if (SHIBYTE(__p.__end_) < 0)
                {
                  std::__split_buffer<std::string>::pointer v99 = __p.__first_;
                  goto LABEL_495;
                }
              }
            }
          }
          return result;
        case 0x11:
LABEL_115:
          if (v248[0] != (void *)0x7265766F646E6148
            || v248[1] != (void *)0x70617247676E614CLL
            || LOBYTE(v248[2]) != 104)
          {
            goto LABEL_122;
          }
          goto LABEL_311;
        case 0x12:
          if (v248[0] == (void *)0x79537475706E493CLL
            && v248[1] == (void *)0x6C6261546C6F626DLL
            && LOWORD(v248[2]) == 15973)
          {
            goto LABEL_150;
          }
          BOOL v28 = v248[0] == (void *)0x5774756F64616552
             && v248[1] == (void *)0x6D74666F53687469
             && LOWORD(v248[2]) == 30817;
          int v29 = (char *)(a1 + 2128);
          if (!v28)
          {
            std::string v30 = v248;
            switch(HIBYTE(v248[2]))
            {
              case 0xC:
                goto LABEL_104;
              case 0xE:
                goto LABEL_262;
              case 0xF:
                goto LABEL_91;
              case 0x10:
                goto LABEL_97;
              case 0x11:
                goto LABEL_115;
              default:
                goto LABEL_266;
            }
          }
          goto LABEL_280;
        case 0x13:
          if (v248[0] != (void *)0x5374757074754F3CLL
            || v248[1] != (void *)0x6261546C6F626D79
            || *(void **)((char *)&v248[1] + 3) != (void *)0x3E656C6261546C6FLL)
          {
            goto LABEL_266;
          }
          goto LABEL_171;
        case 0x14:
          if (v248[0] != (void *)0x6D79537475706E49
            || v248[1] != (void *)0x656C6261546C6F62
            || LODWORD(v248[2]) != 1701603654)
          {
            goto LABEL_266;
          }
          goto LABEL_185;
        case 0x15:
          if (v248[0] == (void *)0x795374757074754FLL
            && v248[1] == (void *)0x6C6261546C6F626DLL
            && *(void **)((char *)&v248[1] + 5) == (void *)0x656C6946656C6261)
          {
            goto LABEL_306;
          }
          if (v248[0] == (void *)0x457265646F636E45
            && v248[1] == (void *)0x456F737365727073
            && *(void **)((char *)&v248[1] + 5) == (void *)0x656E69676E456F73)
          {
            goto LABEL_314;
          }
          if (v248[0] != (void *)0x457265646F636544
            || v248[1] != (void *)0x456F737365727073
            || *(void **)((char *)&v248[1] + 5) != (void *)0x656E69676E456F73)
          {
            goto LABEL_266;
          }
          goto LABEL_303;
        default:
          goto LABEL_266;
      }
    }
LABEL_378:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (a5) {
    goto LABEL_526;
  }
  if (*(char *)(a1 + 103) < 0)
  {
    if (*(void *)(a1 + 88)) {
      goto LABEL_541;
    }
  }
  else if (*(unsigned char *)(a1 + 103))
  {
    goto LABEL_541;
  }
  if (!*(void *)(a1 + 456))
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      goto LABEL_550;
    }
    goto LABEL_549;
  }
LABEL_541:
  if (*(char *)(a1 + 127) < 0)
  {
    if (*(void *)(a1 + 112)) {
      goto LABEL_550;
    }
  }
  else if (*(unsigned char *)(a1 + 127))
  {
    goto LABEL_550;
  }
  if (!*(void *)(a1 + 408) && kaldi::g_kaldi_verbose_level > -2)
  {
LABEL_549:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Both EncoderGraph (or at least one InputLangGraph) and DecoderGraph (or at least one DecoderLangGraph) must be specified in model file", 134);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  }
LABEL_550:
  if (!*(void *)(a1 + 552))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input symbol table must be specified", 36);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    goto LABEL_526;
  }
  if (!*(void *)(a1 + 560))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Output symbol table must be specified", 37);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    goto LABEL_526;
  }
  if ((v222 & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"AddSrcBos must be set in model config file", 42);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
LABEL_526:
    uint64_t v118 = 0;
    goto LABEL_527;
  }
  if (*(unsigned char *)(a1 + 1517) || (uint64_t v120 = *(void *)(a1 + 432)) != 0)
  {
    if (*(char *)(a1 + 1695) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)(a1 + 1672), *(void *)(a1 + 1680));
    }
    else
    {
      *(_OWORD *)&__p.__first_ = *(_OWORD *)(a1 + 1672);
      __p.__end_ = *(std::__split_buffer<std::string>::pointer *)(a1 + 1688);
    }
    if (*(_DWORD *)(a1 + 1088) == 1)
    {
      std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__p.__end_);
      std::__split_buffer<std::string>::pointer p_p = (std::__split_buffer<std::string>::pointer)&__p;
      if (SHIBYTE(__p.__end_) < 0)
      {
        std::__split_buffer<std::string>::pointer p_p = __p.__first_;
        std::__split_buffer<std::string>::pointer end_high = __p.__begin_;
      }
      for (; end_high; std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)((char *)end_high - 1))
      {
        if (p_p->__r_.__value_.__s.__data_[0] == 46) {
          p_p->__r_.__value_.__s.__data_[0] = 95;
        }
        std::__split_buffer<std::string>::pointer p_p = (std::__split_buffer<std::string>::pointer)((char *)p_p + 1);
      }
    }
    unint64_t v123 = *(void *)(a1 + 1704);
    if (v123 >= *(void *)(a1 + 1712))
    {
      uint64_t v125 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 1696), (long long *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__end_) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a1 + 1704), (const std::string::value_type *)__p.__first_, (std::string::size_type)__p.__begin_);
      }
      else
      {
        long long v124 = *(_OWORD *)&__p.__first_;
        *(void *)(v123 + 16) = __p.__end_;
        *(_OWORD *)unint64_t v123 = v124;
      }
      uint64_t v125 = v123 + 24;
      *(void *)(a1 + 1704) = v123 + 24;
    }
    *(void *)(a1 + 1704) = v125;
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
    uint64_t v120 = *(void *)(a1 + 432);
  }
  int v126 = *(std::string **)(a1 + 1704);
  *(_DWORD *)(a1 + 2104) = -1431655765 * (((unint64_t)v126 - *(void *)(a1 + 1696)) >> 3);
  if (!v120)
  {
    v127 = *(std::string **)(a1 + 2056);
    v128 = *(long long **)(a1 + 2064);
    if (v127 != (std::string *)v128) {
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)(a1 + 1696), v126, v127, v128, 0xAAAAAAAAAAAAAAABLL * (((char *)v128 - (char *)v127) >> 3));
    }
  }
  v129 = (void *)(a1 + 2032);
  unint64_t v130 = *(void *)(a1 + 2040);
  if (v130 >= *(void *)(a1 + 2048))
  {
    unint64_t v131 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 2032), v215);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 2032, v215);
    unint64_t v131 = v130 + 24;
  }
  *(void *)(a1 + 2040) = v131;
  *(_DWORD *)(a1 + 2156) = 0;
  if (*(unsigned char *)(a1 + 2164))
  {
    if (v131 >= *(void *)(a1 + 2048))
    {
      unint64_t v131 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 2032), v214);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 2032, v214);
      v131 += 24;
    }
    *(void *)(a1 + 2040) = v131;
    *(_DWORD *)(a1 + 2148) = 1;
  }
  v132 = *(long long **)(a1 + 2080);
  v133 = *(long long **)(a1 + 2088);
  if (v132 == v133)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unsupported MT Espresso model: Missing required StateStrings field!", 67);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  *(_DWORD *)(a1 + 2108) = -1431655765 * ((v131 - *(void *)(a1 + 2032)) >> 3);
  do
  {
    if (*((char *)v132 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v132, *((void *)v132 + 1));
    }
    else
    {
      long long v134 = *v132;
      __str.__r_.__value_.__r.__words[2] = *((void *)v132 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v134;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v135 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v135 = __str.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v135 + 5);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_s = &__s;
    }
    else {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if (v135)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(p_s, p_str, v135);
    }
    strcpy((char *)p_s + v135, ".next");
    unint64_t v138 = *(void *)(a1 + 2040);
    unint64_t v139 = *(void *)(a1 + 2048);
    if (v138 >= v139)
    {
      unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - *v129) >> 3);
      unint64_t v142 = v141 + 1;
      if (v141 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v139 - *v129) >> 3);
      if (2 * v143 > v142) {
        unint64_t v142 = 2 * v143;
      }
      if (v143 >= 0x555555555555555) {
        unint64_t v144 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v144 = v142;
      }
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2048);
      if (v144) {
        v145 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a1 + 2048, v144);
      }
      else {
        v145 = 0;
      }
      v146 = v145 + v141;
      __p.__first_ = v145;
      __p.__begin_ = v146;
      __p.__end_cap_.__value_ = &v145[v144];
      long long v147 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      v146->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v146->__r_.__value_.__l.__data_ = v147;
      memset(&__s, 0, sizeof(__s));
      __p.__end_ = v146 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 2032), &__p);
      uint64_t v148 = *(void *)(a1 + 2040);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__p);
      int v149 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
      *(void *)(a1 + 2040) = v148;
      if (v149 < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v140 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      *(void *)(v138 + 16) = *((void *)&__s.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v138 = v140;
      *(void *)(a1 + 2040) = v138 + 24;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    v132 = (long long *)((char *)v132 + 24);
  }
  while (v132 != v133);
  if (*(char *)(a1 + 1007) < 0)
  {
    if (*(void *)(a1 + 992)) {
      goto LABEL_629;
    }
  }
  else if (*(unsigned char *)(a1 + 1007))
  {
    goto LABEL_629;
  }
  if (*(_DWORD *)(a1 + 1088) == 2)
  {
    std::string::operator=(v218, v221);
    *(void *)(a1 + 1088) = *(void *)(a1 + 1080);
  }
LABEL_629:
  if (*(char *)(a1 + 1031) < 0)
  {
    if (*(void *)(a1 + 1016)) {
      goto LABEL_635;
    }
  }
  else if (*(unsigned char *)(a1 + 1031))
  {
    goto LABEL_635;
  }
  if (*(_DWORD *)(a1 + 1096) == 2)
  {
    std::string::operator=(v217, v221);
    *(void *)(a1 + 1096) = *(void *)(a1 + 1080);
  }
LABEL_635:
  if (*(unsigned char *)(a1 + 1506) && *(unsigned char *)(a1 + 1507))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Either Readout Espresso Graph or Readout Nnet is supported", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  if (!*(unsigned char *)(a1 + 1512))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"TensorFlow not supported", 24);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 103)) {
      goto LABEL_672;
    }
LABEL_642:
    if (!*(unsigned char *)(a1 + 24) || !*(void *)(a1 + 408))
    {
      if (kaldi::g_kaldi_verbose_level >= 1)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
        v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Loading ENCODER ", 16);
        char v151 = *(unsigned char *)(a1 + 103);
        if (v151 >= 0) {
          uint64_t v152 = a1 + 80;
        }
        else {
          uint64_t v152 = *(void *)(a1 + 80);
        }
        if (v151 >= 0) {
          uint64_t v153 = *(unsigned __int8 *)(a1 + 103);
        }
        else {
          uint64_t v153 = *(void *)(a1 + 88);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, v152, v153);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      }
      memset(&__p, 0, 24);
      v154 = *(void **)(a1 + 464);
      if (v154 != (void *)(a1 + 472))
      {
        v155 = 0;
        do
        {
          v156 = (long long *)(v154 + 7);
          if (v155 >= __p.__end_)
          {
            v155 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__p, v156);
          }
          else
          {
            if (*((char *)v154 + 79) < 0)
            {
              std::string::__init_copy_ctor_external(v155, (const std::string::value_type *)v154[7], v154[8]);
            }
            else
            {
              long long v157 = *v156;
              v155->__r_.__value_.__r.__words[2] = v154[9];
              *(_OWORD *)&v155->__r_.__value_.__l.__data_ = v157;
            }
            ++v155;
          }
          __p.__begin_ = v155;
          v158 = (void *)v154[1];
          if (v158)
          {
            do
            {
              v159 = v158;
              v158 = (void *)*v158;
            }
            while (v158);
          }
          else
          {
            do
            {
              v159 = (void *)v154[2];
              BOOL v10 = *v159 == (void)v154;
              v154 = v159;
            }
            while (!v10);
          }
          v154 = v159;
        }
        while (v159 != (void *)(a1 + 472));
      }
      uint64_t v160 = *(void *)(a1 + 1088);
      memset(&v230, 0, sizeof(v230));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v230, *(long long **)(a1 + 880), *(long long **)(a1 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 888) - *(void *)(a1 + 880)) >> 3));
      memset(&v229, 0, sizeof(v229));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v229, (long long *)__p.__first_, (long long *)__p.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__begin_ - (char *)__p.__first_) >> 3));
      kaldi::quasar::Encdec::CreateEspressoModel((char *)a1, (const std::string *)(a1 + 80), v160, (uint64_t)v218, (uint64_t *)&v230, (std::vector<std::wstring> *)&v229, *(unsigned char *)(a1 + 1520), (uint64_t)&__str);
      long long v161 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
      v162 = *(std::__shared_weak_count **)(a1 + 160);
      *(_OWORD *)(a1 + 152) = v161;
      if (v162)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v162);
        if (__str.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
      }
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v230;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
      v163 = *(void **)(a1 + 152);
      if (v163) {
      *(unsigned char *)(a1 + 488) = v163 != 0;
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    }
    goto LABEL_672;
  }
  if (*(void *)(a1 + 88)) {
    goto LABEL_642;
  }
LABEL_672:
  if (*(unsigned char *)(a1 + 1508))
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
      v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Loading EMBEDDING ", 18);
      char v165 = *(unsigned char *)(a1 + 79);
      if (v165 >= 0) {
        uint64_t v166 = a1 + 56;
      }
      else {
        uint64_t v166 = *(void *)(a1 + 56);
      }
      if (v165 >= 0) {
        uint64_t v167 = *(unsigned __int8 *)(a1 + 79);
      }
      else {
        uint64_t v167 = *(void *)(a1 + 64);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, v166, v167);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    uint64_t v168 = *(void *)(a1 + 1096);
    memset(v228, 0, sizeof(v228));
    memset(&v227, 0, sizeof(v227));
    kaldi::quasar::Encdec::CreateEspressoModel((char *)a1, (const std::string *)(a1 + 56), v168, (uint64_t)v217, v228, &v227, 0, (uint64_t)&__p);
    long long v169 = *(_OWORD *)&__p.__first_;
    __p.__begin_ = 0;
    __p.__first_ = 0;
    v170 = *(std::__shared_weak_count **)(a1 + 176);
    *(_OWORD *)(a1 + 168) = v169;
    if (v170)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v170);
      if (__p.__begin_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__begin_);
      }
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v227;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v228;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  }
  if (*(unsigned char *)(a1 + 1507))
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
      v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Loading READOUT ", 16);
      char v172 = *(unsigned char *)(a1 + 151);
      if (v172 >= 0) {
        uint64_t v173 = a1 + 128;
      }
      else {
        uint64_t v173 = *(void *)(a1 + 128);
      }
      if (v172 >= 0) {
        uint64_t v174 = *(unsigned __int8 *)(a1 + 151);
      }
      else {
        uint64_t v174 = *(void *)(a1 + 136);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, v173, v174);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    uint64_t v175 = *(void *)(a1 + 1096);
    memset(v226, 0, sizeof(v226));
    memset(&v225, 0, sizeof(v225));
    kaldi::quasar::Encdec::CreateEspressoModel((char *)a1, (const std::string *)(a1 + 128), v175, (uint64_t)v217, v226, &v225, 0, (uint64_t)&__p);
    long long v176 = *(_OWORD *)&__p.__first_;
    __p.__begin_ = 0;
    __p.__first_ = 0;
    v177 = *(std::__shared_weak_count **)(a1 + 208);
    *(_OWORD *)(a1 + 200) = v176;
    if (v177)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v177);
      if (__p.__begin_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__begin_);
      }
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v225;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v226;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  }
  if (*(void *)(a1 + 408))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      v178 = *(std::__shared_weak_count **)(a1 + 192);
      *(void *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0;
      if (v178) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v178);
      }
      v179 = *(std::__shared_weak_count **)(a1 + 224);
      *(void *)(a1 + 216) = 0;
      *(void *)(a1 + 224) = 0;
      if (v179) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v179);
      }
      v180 = *(std::__shared_weak_count **)(a1 + 240);
      *(void *)(a1 + 232) = 0;
      *(void *)(a1 + 240) = 0;
      if (v180) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v180);
      }
    }
    else
    {
      if (*(void *)(a1 + 456))
      {
        v188 = *v220;
        if (*((char *)*v220 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p, (const std::string::value_type *)v188[4], v188[5]);
        }
        else
        {
          *(_OWORD *)&__p.__first_ = *((_OWORD *)v188 + 2);
          __p.__end_ = (std::__split_buffer<std::string>::pointer)v188[6];
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
      }
      v189 = *(void **)(a1 + 392);
      if (v189 != (void *)(a1 + 400))
      {
        do
        {
          kaldi::quasar::Encdec::LoadSubmodels(a1, (std::string::size_type)&__p, (std::string::size_type)(v189 + 4));
          v190 = (void *)v189[1];
          if (v190)
          {
            do
            {
              v191 = v190;
              v190 = (void *)*v190;
            }
            while (v190);
          }
          else
          {
            do
            {
              v191 = (void *)v189[2];
              BOOL v10 = *v191 == (void)v189;
              v189 = v191;
            }
            while (!v10);
          }
          v189 = v191;
        }
        while (v191 != (void *)(a1 + 400));
      }
      uint64_t v192 = *(void *)(a1 + 272);
      v193 = *(std::__shared_weak_count **)(v192 + 64);
      if (v193 && (v193 = std::__shared_weak_count::lock(v193)) != 0) {
        uint64_t v194 = *(void *)(v192 + 56);
      }
      else {
        uint64_t v194 = 0;
      }
      v195 = *(std::__shared_weak_count **)(a1 + 192);
      *(void *)(a1 + 184) = v194;
      *(void *)(a1 + 192) = v193;
      if (v195) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v195);
      }
      if (*(void *)(a1 + 312))
      {
        uint64_t v196 = *(void *)(a1 + 296);
        v197 = *(std::__shared_weak_count **)(v196 + 64);
        if (v197 && (v197 = std::__shared_weak_count::lock(v197)) != 0) {
          uint64_t v198 = *(void *)(v196 + 56);
        }
        else {
          uint64_t v198 = 0;
        }
        v199 = *(std::__shared_weak_count **)(a1 + 224);
        *(void *)(a1 + 216) = v198;
        *(void *)(a1 + 224) = v197;
        if (v199) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v199);
        }
      }
      if (*(void *)(a1 + 456))
      {
        v200 = *v216;
        if (*((char *)*v216 + 55) < 0) {
          std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v200[4], v200[5]);
        }
        else {
          std::string __str = *(std::string *)(v200 + 4);
        }
        v201 = *(void **)(a1 + 440);
        if (v201 != (void *)(a1 + 448))
        {
          do
          {
            kaldi::quasar::Encdec::LoadSubmodels(a1, (std::string::size_type)(v201 + 4), (std::string::size_type)&__str);
            v202 = (void *)v201[1];
            if (v202)
            {
              do
              {
                v203 = v202;
                v202 = (void *)*v202;
              }
              while (v202);
            }
            else
            {
              do
              {
                v203 = (void *)v201[2];
                BOOL v10 = *v203 == (void)v201;
                v201 = v203;
              }
              while (!v10);
            }
            v201 = v203;
          }
          while (v203 != (void *)(a1 + 448));
        }
        uint64_t v204 = *(void *)(a1 + 320);
        v205 = *(std::__shared_weak_count **)(v204 + 64);
        if (v205 && (v205 = std::__shared_weak_count::lock(v205)) != 0) {
          uint64_t v206 = *(void *)(v204 + 56);
        }
        else {
          uint64_t v206 = 0;
        }
        v207 = *(std::__shared_weak_count **)(a1 + 240);
        *(void *)(a1 + 232) = v206;
        *(void *)(a1 + 240) = v205;
        if (v207) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v207);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
    }
    if (*(void *)(a1 + 432)) {
      *(_DWORD *)(a1 + 2104) = 0;
    }
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
      v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Loading DECODER ", 16);
      char v182 = *(unsigned char *)(a1 + 127);
      if (v182 >= 0) {
        uint64_t v183 = a1 + 104;
      }
      else {
        uint64_t v183 = *(void *)(a1 + 104);
      }
      if (v182 >= 0) {
        uint64_t v184 = *(unsigned __int8 *)(a1 + 127);
      }
      else {
        uint64_t v184 = *(void *)(a1 + 112);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, v183, v184);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    uint64_t v185 = *(void *)(a1 + 1096);
    memset(v224, 0, sizeof(v224));
    memset(&v223, 0, sizeof(v223));
    kaldi::quasar::Encdec::CreateEspressoModel((char *)a1, (const std::string *)(a1 + 104), v185, (uint64_t)v217, v224, &v223, 0, (uint64_t)&__p);
    long long v186 = *(_OWORD *)&__p.__first_;
    __p.__begin_ = 0;
    __p.__first_ = 0;
    v187 = *(std::__shared_weak_count **)(a1 + 192);
    *(_OWORD *)(a1 + 184) = v186;
    if (v187)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v187);
      if (__p.__begin_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__begin_);
      }
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v223;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v224;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  }
  uint64_t v118 = 1;
LABEL_527:
  if (SHIBYTE(v243) < 0) {
    operator delete(v241);
  }
  if (SHIBYTE(v245) < 0) {
    operator delete(v244[0]);
  }
  if (SHIBYTE(v247) < 0) {
    operator delete(v246[0]);
  }
  if (SHIBYTE(v248[2]) < 0) {
    operator delete(v248[0]);
  }
  return v118;
}

void sub_1B1E85810(_Unwind_Exception *a1)
{
  STACK[0x2C0] = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  STACK[0x2C0] = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  if (SLOBYTE(STACK[0x487]) < 0) {
    operator delete((void *)STACK[0x470]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  _Unwind_Resume(a1);
}

void sub_1B1E8593C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (SLOBYTE(STACK[0x457]) < 0) {
    operator delete((void *)STACK[0x440]);
  }
  if (SLOBYTE(STACK[0x46F]) < 0) {
    operator delete((void *)STACK[0x458]);
  }
  if (SLOBYTE(STACK[0x487]) < 0) {
    operator delete((void *)STACK[0x470]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  _Unwind_Resume(a1);
}

void sub_1B1E8595C()
{
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    JUMPOUT(0x1B1E85C24);
  }
  JUMPOUT(0x1B1E85C4CLL);
}

void sub_1B1E8598C()
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    JUMPOUT(0x1B1E85C24);
  }
  JUMPOUT(0x1B1E85C4CLL);
}

void sub_1B1E859C8()
{
}

void sub_1B1E85A34()
{
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    JUMPOUT(0x1B1E85C24);
  }
  JUMPOUT(0x1B1E85C4CLL);
}

void sub_1B1E85A60()
{
  if (SLOBYTE(STACK[0x4EF]) < 0) {
    operator delete((void *)STACK[0x4D8]);
  }
  JUMPOUT(0x1B1E85A88);
}

void sub_1B1E85AAC()
{
  if (SLOBYTE(STACK[0x4E7]) < 0) {
    operator delete((void *)STACK[0x4D0]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (SLOBYTE(STACK[0x457]) < 0) {
    operator delete((void *)STACK[0x440]);
  }
  if (SLOBYTE(STACK[0x46F]) < 0) {
    JUMPOUT(0x1B1E85C24);
  }
  JUMPOUT(0x1B1E85C4CLL);
}

void sub_1B1E85B1C()
{
  MEMORY[0x1B3EA8670](v0, 0xA1C40BD48D6D6);
  JUMPOUT(0x1B1E85C3CLL);
}

void sub_1B1E85B3C()
{
  if (SLOBYTE(STACK[0x4E7]) < 0) {
    operator delete((void *)STACK[0x4D0]);
  }
  JUMPOUT(0x1B1E85C3CLL);
}

void sub_1B1E85B54(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x4E7]) < 0) {
    operator delete((void *)STACK[0x4D0]);
  }
  if (SLOBYTE(STACK[0x487]) < 0) {
    operator delete((void *)STACK[0x470]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  _Unwind_Resume(a1);
}

void sub_1B1E85B68()
{
}

void sub_1B1E85B8C()
{
}

void sub_1B1E85BA0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x487]) < 0) {
    operator delete((void *)STACK[0x470]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  _Unwind_Resume(a1);
}

void sub_1B1E85BB0()
{
}

void sub_1B1E85BC0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    JUMPOUT(0x1B1E85C24);
  }
  if (SLOBYTE(STACK[0x487]) < 0) {
    operator delete((void *)STACK[0x470]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  _Unwind_Resume(a1);
}

void sub_1B1E85BCC()
{
}

void sub_1B1E85BE0()
{
  STACK[0x458] = (unint64_t)&STACK[0x2C0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x458]);
  JUMPOUT(0x1B1E85BF4);
}

void sub_1B1E85C04()
{
  if (SLOBYTE(STACK[0x46F]) < 0) {
    JUMPOUT(0x1B1E85C14);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    JUMPOUT(0x1B1E85C24);
  }
  JUMPOUT(0x1B1E85C4CLL);
}

void sub_1B1E85C2C(_Unwind_Exception *exception_object)
{
  if (SLOBYTE(STACK[0x487]) < 0) {
    operator delete((void *)STACK[0x470]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1E85C38()
{
}

void kaldi::quasar::Encdec::ParseEnginePlatform(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  kaldi::SplitStringToVector((const std::string *)a1, ":", 1, (uint64_t)&v38);
  uint64_t v4 = v38;
  switch(0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 3))
  {
    case 0uLL:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Invalid empty platform spec.", 28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
    case 1uLL:
      *a2 = 0x100000000;
      uint64_t v5 = (std::string *)(a2 + 1);
      if ((*(char *)(v4 + 23) & 0x80000000) == 0) {
        goto LABEL_49;
      }
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
      goto LABEL_50;
    case 2uLL:
      if (*(char *)(v38 + 23) < 0)
      {
        uint64_t v8 = *(void *)(v38 + 8);
        if (v8 != 2 || **(_WORD **)v38 != 13637)
        {
          if (v8 != 10) {
            goto LABEL_60;
          }
          unsigned __int8 v6 = *(_WORD **)v38;
          goto LABEL_16;
        }
      }
      else
      {
        if (*(unsigned char *)(v38 + 23) != 2)
        {
          unsigned __int8 v6 = (_WORD *)v38;
          if (*(unsigned char *)(v38 + 23) != 10) {
            goto LABEL_60;
          }
LABEL_16:
          uint64_t v9 = *(void *)v6;
          int v10 = (unsigned __int16)v6[4];
          if (v9 != 0x6F73736572707345 || v10 != 12630)
          {
LABEL_60:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
            char v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unsupported engine: ", 20);
            int v26 = *(char *)(v38 + 23);
            if (v26 >= 0) {
              uint64_t v27 = v38;
            }
            else {
              uint64_t v27 = *(void *)v38;
            }
            if (v26 >= 0) {
              uint64_t v28 = *(unsigned __int8 *)(v38 + 23);
            }
            else {
              uint64_t v28 = *(void *)(v38 + 8);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
          }
          *a2 = 0x100000000;
          uint64_t v5 = (std::string *)(a2 + 1);
          if (*(char *)(v4 + 47) < 0) {
            goto LABEL_22;
          }
          goto LABEL_35;
        }
        if (*(_WORD *)v38 != 13637) {
          goto LABEL_60;
        }
      }
      *a2 = 0x100000001;
      uint64_t v5 = (std::string *)(a2 + 1);
      if (*(char *)(v4 + 47) < 0)
      {
LABEL_22:
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v4 + 24), *(void *)(v4 + 32));
        goto LABEL_50;
      }
LABEL_35:
      v4 += 24;
      goto LABEL_49;
    case 3uLL:
      if ((*(char *)(v38 + 23) & 0x80000000) == 0)
      {
        if (*(unsigned char *)(v38 + 23) != 2)
        {
          uint64_t v7 = v38;
          if (*(unsigned char *)(v38 + 23) != 10) {
            goto LABEL_67;
          }
          goto LABEL_27;
        }
        if (*(_WORD *)v38 != 13637) {
          goto LABEL_67;
        }
LABEL_37:
        uint64_t v16 = 1;
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v38 + 8);
      if (v12 == 2 && **(_WORD **)v38 == 13637) {
        goto LABEL_37;
      }
      if (v12 != 10) {
        goto LABEL_67;
      }
      uint64_t v7 = *(void *)v38;
LABEL_27:
      uint64_t v13 = *(void *)v7;
      int v14 = *(unsigned __int16 *)(v7 + 8);
      if (v13 != 0x6F73736572707345 || v14 != 12630)
      {
LABEL_67:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
        int v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unsupported engine: ", 20);
        int v30 = *(char *)(v38 + 23);
        if (v30 >= 0) {
          uint64_t v31 = v38;
        }
        else {
          uint64_t v31 = *(void *)v38;
        }
        if (v30 >= 0) {
          uint64_t v32 = *(unsigned __int8 *)(v38 + 23);
        }
        else {
          uint64_t v32 = *(void *)(v38 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
      }
      uint64_t v16 = 0;
LABEL_38:
      uint64_t v17 = (void *)(v38 + 24);
      int v18 = *(char *)(v38 + 47);
      if (v18 < 0)
      {
        if (*(void *)(v38 + 32) != 4) {
          goto LABEL_53;
        }
        uint64_t v17 = (void *)*v17;
      }
      else if (v18 != 4)
      {
LABEL_53:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
        int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unsupported precision: ", 23);
        int v22 = *(char *)(v38 + 47);
        if (v22 >= 0) {
          uint64_t v23 = v38 + 24;
        }
        else {
          uint64_t v23 = *(void *)(v38 + 24);
        }
        if (v22 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(v38 + 47);
        }
        else {
          uint64_t v24 = *(void *)(v38 + 32);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
      }
      if (*(_DWORD *)v17 == 909201478)
      {
        uint64_t v19 = 0;
      }
      else
      {
        if (*(_DWORD *)v17 != 842223686) {
          goto LABEL_53;
        }
        uint64_t v19 = 0x100000000;
      }
      *a2 = v19 | v16;
      uint64_t v5 = (std::string *)(a2 + 1);
      if (*(char *)(v4 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v4 + 48), *(void *)(v4 + 56));
      }
      else
      {
        v4 += 48;
LABEL_49:
        long long v20 = *(_OWORD *)v4;
        v5->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v20;
      }
LABEL_50:
      v37[0] = (void **)&v38;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v37);
      return;
    default:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
      BOOL v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Invalid platform spec: ", 23);
      int v34 = *(char *)(a1 + 23);
      if (v34 >= 0) {
        uint64_t v35 = a1;
      }
      else {
        uint64_t v35 = *(void *)a1;
      }
      if (v34 >= 0) {
        uint64_t v36 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v36 = *(void *)(a1 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
}

void sub_1B1E8614C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Vocab::~Vocab(kaldi::quasar::Vocab *this)
{
  unint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t kaldi::quasar::BPE::Read(uint64_t a1, uint64_t *a2, int a3)
{
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a1 + 24);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 64));
  float v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&v53);
  int v6 = HIBYTE(v55);
  if (SHIBYTE(v55) < 0)
  {
    if (v54 != 9) {
      goto LABEL_16;
    }
    uint64_t v7 = v53;
  }
  else
  {
    if (HIBYTE(v55) != 9)
    {
LABEL_11:
      if (v6 != 10)
      {
LABEL_23:
        if (v6 != 9)
        {
LABEL_33:
          if (v6 != 8) {
            goto LABEL_79;
          }
          uint64_t v19 = (void **)&v53;
          goto LABEL_38;
        }
        long long v15 = (void **)&v53;
        goto LABEL_28;
      }
      long long v11 = (void **)&v53;
      goto LABEL_18;
    }
    uint64_t v7 = (void **)&v53;
  }
  uint64_t v8 = *v7;
  int v9 = *((unsigned __int8 *)v7 + 8);
  if (v8 == (void *)0x65646F4D6B6E553CLL && v9 == 62)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v52 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)__p);
    *(_DWORD *)(a1 + 184) = kaldi::quasar::BPE::StringToUnkMode((uint64_t)__p);
    kaldi::ReadToken(a2, a3, (uint64_t)&v53);
    if (SHIBYTE(v52) < 0) {
      operator delete(__p[0]);
    }
    int v6 = HIBYTE(v55);
    if ((v55 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
  }
  else if ((v55 & 0x8000000000000000) == 0)
  {
    goto LABEL_11;
  }
LABEL_16:
  if (v54 != 10) {
    goto LABEL_26;
  }
  long long v11 = v53;
LABEL_18:
  uint64_t v12 = *v11;
  int v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x656B6F546B6E553CLL && v13 == 15982)
  {
    kaldi::ReadToken(a2, a3, a1 + 192);
    kaldi::ReadToken(a2, a3, (uint64_t)&v53);
    int v6 = HIBYTE(v55);
    if ((v55 & 0x8000000000000000) == 0) {
      goto LABEL_23;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_23;
  }
LABEL_26:
  if (v54 != 9) {
    goto LABEL_36;
  }
  long long v15 = v53;
LABEL_28:
  uint64_t v16 = *v15;
  int v17 = *((unsigned __int8 *)v15 + 8);
  if (v16 == (void *)0x6E6F69737265563CLL && v17 == 62)
  {
    kaldi::ReadToken(a2, a3, a1 + 216);
    kaldi::ReadToken(a2, a3, (uint64_t)&v53);
    int v6 = HIBYTE(v55);
    if ((v55 & 0x8000000000000000) == 0) {
      goto LABEL_33;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_33;
  }
LABEL_36:
  if (v54 != 8) {
    goto LABEL_79;
  }
  uint64_t v19 = v53;
LABEL_38:
  if (*v19 != (void *)0x3E6570426D754E3CLL)
  {
LABEL_79:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Expected to read number of BPE units now, but got ", 50);
    if (v55 >= 0) {
      std::string::size_type v45 = (void **)&v53;
    }
    else {
      std::string::size_type v45 = v53;
    }
    if (v55 >= 0) {
      uint64_t v46 = HIBYTE(v55);
    }
    else {
      uint64_t v46 = v54;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  int v50 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v50);
  if ((a3 & 1) == 0) {
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (v50)
  {
    int v20 = 0;
    int v21 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v52 = 0;
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
      int v22 = std::locale::use_facet(&v47, v21);
      unsigned __int8 v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v47);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)__p, v23);
      unint64_t v24 = *(void *)(a1 + 72);
      if (v24 >= *(void *)(a1 + 80))
      {
        uint64_t v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 64), (long long *)__p);
      }
      else
      {
        if (SHIBYTE(v52) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 72), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v25 = *(_OWORD *)__p;
          *(void *)(v24 + 16) = v52;
          *(_OWORD *)unint64_t v24 = v25;
        }
        uint64_t v26 = v24 + 24;
        *(void *)(a1 + 72) = v24 + 24;
      }
      *(void *)(a1 + 72) = v26;
      kaldi::quasar::BPE::ProcessLine(a1, (uint64_t)__p, (float)v20);
      if (SHIBYTE(v52) < 0) {
        operator delete(__p[0]);
      }
      ++v20;
    }
    while (v20 != v50);
  }
  kaldi::quasar::BPE::GetUniqueChars((kaldi::quasar::BPE *)a1);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"BPE model version: ", 19);
    int v28 = *(char *)(a1 + 239);
    uint64_t v29 = v28 >= 0 ? a1 + 216 : *(void *)(a1 + 216);
    uint64_t v30 = v28 >= 0 ? *(unsigned __int8 *)(a1 + 239) : *(void *)(a1 + 224);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# of BPE model entries : ", 25);
      uint64_t v31 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" # of chars ", 12);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"BPE model unk mode = ", 21);
        kaldi::quasar::BPE::UnkModeToString(*(_DWORD *)(a1 + 184), &v47);
        if ((v49 & 0x80u) == 0) {
          unsigned int locale = &v47;
        }
        else {
          unsigned int locale = v47.__locale_;
        }
        if ((v49 & 0x80u) == 0) {
          uint64_t v34 = v49;
        }
        else {
          uint64_t v34 = v48;
        }
        uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)locale, v34);
        uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", unk token = ", 14);
        uint64_t v39 = *(void *)(a1 + 192);
        uint64_t v38 = a1 + 192;
        uint64_t v37 = v39;
        int v40 = *(char *)(v38 + 23);
        if (v40 >= 0) {
          uint64_t v41 = v38;
        }
        else {
          uint64_t v41 = v37;
        }
        if (v40 >= 0) {
          uint64_t v42 = *(unsigned __int8 *)(v38 + 23);
        }
        else {
          uint64_t v42 = *(void *)(v38 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v41, v42);
        if ((char)v49 < 0) {
          operator delete(v47.__locale_);
        }
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
    }
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(v53);
  }
  return 1;
}

void sub_1B1E86754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  if (*(char *)(v6 - 65) < 0) {
    operator delete(*(void **)(v6 - 88));
  }
  _Unwind_Resume(a1);
}

void sub_1B1E86768(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(a1);
}

void sub_1B1E86770()
{
  *(void *)(v0 + 72) = v1;
  JUMPOUT(0x1B1E86790);
}

void sub_1B1E8677C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void std::make_unique[abi:ne180100]<kaldi::quasar::Shortlist,std::unique_ptr<kaldi::quasar::ShortlistData>>()
{
}

void sub_1B1E86850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    kaldi::quasar::Encdec::Read();
  }
  MEMORY[0x1B3EA8670](v10, 0x1030C40AC6CB4BDLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Encdec::LoadSubmodels(uint64_t a1, std::string::size_type a2, std::string::size_type a3)
{
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 45, (uint64_t)&v149);
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a3;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a3 + 8);
  }
  int v9 = std::string::append(&v149, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v151 = v9->__r_.__value_.__r.__words[2];
  long long v150 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(void *)(a1 + 88)) {
      goto LABEL_42;
    }
  }
  else if (!*(unsigned char *)(a1 + 103))
  {
    goto LABEL_42;
  }
  if (!*(void *)(a1 + 152))
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149, 1);
      long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Loading ENCODER ", 16);
      int v12 = *(char *)(a1 + 103);
      if (v12 >= 0) {
        uint64_t v13 = a1 + 80;
      }
      else {
        uint64_t v13 = *(void *)(a1 + 80);
      }
      if (v12 >= 0) {
        uint64_t v14 = *(unsigned __int8 *)(a1 + 103);
      }
      else {
        uint64_t v14 = *(void *)(a1 + 88);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149);
    }
    memset(&v149, 0, sizeof(v149));
    long long v15 = *(void **)(a1 + 464);
    if (v15 != (void *)(a1 + 472))
    {
      uint64_t v16 = 0;
      do
      {
        int v17 = (long long *)(v15 + 7);
        if ((unint64_t)v16 >= v149.__r_.__value_.__r.__words[2])
        {
          uint64_t v16 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v149, v17);
        }
        else
        {
          if (*((char *)v15 + 79) < 0)
          {
            std::string::__init_copy_ctor_external(v16, (const std::string::value_type *)v15[7], v15[8]);
          }
          else
          {
            long long v18 = *v17;
            v16->__r_.__value_.__r.__words[2] = v15[9];
            *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
          }
          ++v16;
        }
        v149.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
        uint64_t v19 = (void *)v15[1];
        if (v19)
        {
          do
          {
            int v20 = v19;
            uint64_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            int v20 = (void *)v15[2];
            BOOL v21 = *v20 == (void)v15;
            long long v15 = v20;
          }
          while (!v21);
        }
        long long v15 = v20;
      }
      while (v20 != (void *)(a1 + 472));
    }
    uint64_t v22 = *(void *)(a1 + 1088);
    memset(&v147, 0, sizeof(v147));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v147, *(long long **)(a1 + 880), *(long long **)(a1 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 888) - *(void *)(a1 + 880)) >> 3));
    memset(&v146, 0, sizeof(v146));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v146, (long long *)v149.__r_.__value_.__l.__data_, (long long *)v149.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149.__r_.__value_.__l.__size_ - v149.__r_.__value_.__r.__words[0]) >> 3));
    kaldi::quasar::Encdec::CreateEspressoModel((char *)a1, (const std::string *)(a1 + 80), v22, a1 + 984, (uint64_t *)&v147, (std::vector<std::wstring> *)&v146, *(unsigned char *)(a1 + 1520), (uint64_t)&v148);
    long long v23 = v148;
    long long v148 = 0uLL;
    unint64_t v24 = *(std::__shared_weak_count **)(a1 + 160);
    *(_OWORD *)(a1 + 152) = v23;
    if (v24)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      if (*((void *)&v148 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v148 + 1));
      }
    }
    v152[0] = (long long *)&v146;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
    v152[0] = (long long *)&v147;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
    long long v25 = *(void **)(a1 + 152);
    if (v25) {
    *(unsigned char *)(a1 + 488) = v25 != 0;
    }
    v152[0] = &v150;
    uint64_t v26 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 496), (const void **)&v150, (uint64_t)&std::piecewise_construct, v152);
    uint64_t v27 = v26 + 8;
    std::__tree<std::string>::destroy((uint64_t)(v26 + 7), (char *)v26[8]);
    *(v27 - 1) = v27;
    *uint64_t v27 = 0;
    v27[1] = 0;
    *(void *)&long long v148 = &v149;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
  }
LABEL_42:
  if (*(void *)(a1 + 408))
  {
    uint64_t v28 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 392, (const void **)a3);
    if (a1 + 400 == v28)
    {
      uint64_t v40 = 0;
      goto LABEL_215;
    }
    v149.__r_.__value_.__r.__words[0] = a3;
    uint64_t v29 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 272), (const void **)a3, (uint64_t)&std::piecewise_construct, (long long **)&v149);
    uint64_t v30 = (std::__shared_weak_count *)v29[8];
    if (v30 && (uint64_t v30 = std::__shared_weak_count::lock(v30)) != 0) {
      uint64_t v31 = v29[7];
    }
    else {
      uint64_t v31 = 0;
    }
    uint64_t v32 = *(std::__shared_weak_count **)(a1 + 192);
    *(void *)(a1 + 184) = v31;
    *(void *)(a1 + 192) = v30;
    if (v32)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      uint64_t v31 = *(void *)(a1 + 184);
    }
    if (v31)
    {
      if (kaldi::g_kaldi_verbose_level >= 1)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149, 1);
        BOOL v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Using loaded decoder net for: ", 30);
        int v34 = *(char *)(a3 + 23);
        if (v34 >= 0) {
          uint64_t v35 = (const std::string::value_type *)a3;
        }
        else {
          uint64_t v35 = *(const std::string::value_type **)a3;
        }
        if (v34 >= 0) {
          uint64_t v36 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v36 = *(void *)(a3 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v35, v36);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149);
      }
      if (a1 + 424 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 416, (const void **)a3))
      {
        v149.__r_.__value_.__r.__words[0] = a3;
        uint64_t v37 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)a3, (uint64_t)&std::piecewise_construct, (long long **)&v149);
        uint64_t v38 = (std::__shared_weak_count *)v37[8];
        if (v38 && (uint64_t v38 = std::__shared_weak_count::lock(v38)) != 0) {
          uint64_t v39 = v37[7];
        }
        else {
          uint64_t v39 = 0;
        }
        uint64_t v41 = *(std::__shared_weak_count **)(a1 + 224);
        *(void *)(a1 + 216) = v39;
        *(void *)(a1 + 224) = v38;
        if (v41)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          uint64_t v39 = *(void *)(a1 + 216);
        }
        if (!v39)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v149);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Handover plan required but not loaded!", 38);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v149);
        }
      }
    }
    if (a1 + 448 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 440, (const void **)a2))
    {
      v149.__r_.__value_.__r.__words[0] = a2;
      uint64_t v42 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 320), (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&v149);
      BOOL v43 = (std::__shared_weak_count *)v42[8];
      if (v43 && (BOOL v43 = std::__shared_weak_count::lock(v43)) != 0) {
        uint64_t v44 = v42[7];
      }
      else {
        uint64_t v44 = 0;
      }
      std::string::size_type v45 = *(std::__shared_weak_count **)(a1 + 240);
      *(void *)(a1 + 232) = v44;
      *(void *)(a1 + 240) = v43;
      if (v45)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        uint64_t v44 = *(void *)(a1 + 232);
      }
      if (v44 && kaldi::g_kaldi_verbose_level >= 1)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149, 1);
        uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Using loaded input net for: ", 28);
        int v47 = *(char *)(a2 + 23);
        if (v47 >= 0) {
          uint64_t v48 = (const void *)a2;
        }
        else {
          uint64_t v48 = *(const void **)a2;
        }
        if (v47 >= 0) {
          uint64_t v49 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v49 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149);
      }
    }
    if (a1 + 376 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 368, (const void **)&v150))
    {
      v149.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
      int v50 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 248), (const void **)&v150, (uint64_t)&std::piecewise_construct, (long long **)&v149);
      uint64_t v51 = (std::__shared_weak_count *)v50[8];
      if (v51 && (uint64_t v51 = std::__shared_weak_count::lock(v51)) != 0) {
        uint64_t v52 = v50[7];
      }
      else {
        uint64_t v52 = 0;
      }
      float v53 = *(std::__shared_weak_count **)(a1 + 160);
      *(void *)(a1 + 152) = v52;
      *(void *)(a1 + 160) = v51;
      if (v53)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        uint64_t v52 = *(void *)(a1 + 152);
      }
      if (v52 && kaldi::g_kaldi_verbose_level >= 1)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149, 1);
        uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Using loaded encoder for: ", 26);
        int v55 = *(char *)(a2 + 23);
        if (v55 >= 0) {
          BOOL v56 = (const void *)a2;
        }
        else {
          BOOL v56 = *(const void **)a2;
        }
        if (v55 >= 0) {
          uint64_t v57 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v57 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v56, v57);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149);
      }
    }
    if (*(void *)(a1 + 456)) {
      BOOL v58 = *(void *)(a1 + 232) == 0;
    }
    else {
      BOOL v58 = 0;
    }
    uint64_t v59 = *(void *)(a1 + 184);
    uint64_t v60 = *(void *)(a1 + 152);
    if (v58 || !v59 || !v60)
    {
      if (!v59)
      {
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149, 1);
          BOOL v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Loading DECODER for '", 21);
          int v103 = *(char *)(a3 + 23);
          if (v103 >= 0) {
            BOOL v104 = (const std::string::value_type *)a3;
          }
          else {
            BOOL v104 = *(const std::string::value_type **)a3;
          }
          if (v103 >= 0) {
            uint64_t v105 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v105 = *(void *)(a3 + 8);
          }
          BOOL v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)v104, v105);
          BOOL v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)": ", 2);
          int v108 = *(char *)(v28 + 79);
          if (v108 >= 0) {
            uint64_t v109 = v28 + 56;
          }
          else {
            uint64_t v109 = *(void *)(v28 + 56);
          }
          if (v108 >= 0) {
            uint64_t v110 = *(unsigned __int8 *)(v28 + 79);
          }
          else {
            uint64_t v110 = *(void *)(v28 + 64);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, v109, v110);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149);
        }
        uint64_t v111 = *(void *)(a1 + 1096);
        memset(v145, 0, sizeof(v145));
        memset(&v144, 0, sizeof(v144));
        kaldi::quasar::Encdec::CreateEspressoModel((char *)a1, (const std::string *)(v28 + 56), v111, a1 + 1008, v145, &v144, 0, (uint64_t)&v149);
        long long v112 = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
        *(_OWORD *)&v149.__r_.__value_.__l.__data_ = 0uLL;
        BOOL v113 = *(std::__shared_weak_count **)(a1 + 192);
        *(_OWORD *)(a1 + 184) = v112;
        if (v113)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v113);
          if (v149.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v149.__r_.__value_.__l.__size_);
          }
        }
        *(void *)&long long v148 = &v144;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
        *(void *)&long long v148 = v145;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
        v149.__r_.__value_.__r.__words[0] = a3;
        BOOL v114 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 272), (const void **)a3, (uint64_t)&std::piecewise_construct, (long long **)&v149);
        uint64_t v116 = *(void *)(a1 + 184);
        uint64_t v115 = *(void *)(a1 + 192);
        if (v115) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v115 + 16), 1uLL, memory_order_relaxed);
        }
        uint64_t v117 = (std::__shared_weak_count *)v114[8];
        v114[7] = v116;
        v114[8] = v115;
        if (v117) {
          std::__shared_weak_count::__release_weak(v117);
        }
        uint64_t v118 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 416, (const void **)a3);
        if (a1 + 424 != v118)
        {
          if (kaldi::g_kaldi_verbose_level >= 1)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149, 1);
            unint64_t v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Loading HANDOVER for '", 22);
            int v120 = *(char *)(a3 + 23);
            if (v120 >= 0) {
              unint64_t v121 = (const std::string::value_type *)a3;
            }
            else {
              unint64_t v121 = *(const std::string::value_type **)a3;
            }
            if (v120 >= 0) {
              uint64_t v122 = *(unsigned __int8 *)(a3 + 23);
            }
            else {
              uint64_t v122 = *(void *)(a3 + 8);
            }
            unint64_t v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v121, v122);
            long long v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)": ", 2);
            int v125 = *(char *)(v118 + 79);
            if (v125 >= 0) {
              uint64_t v126 = v118 + 56;
            }
            else {
              uint64_t v126 = *(void *)(v118 + 56);
            }
            if (v125 >= 0) {
              uint64_t v127 = *(unsigned __int8 *)(v118 + 79);
            }
            else {
              uint64_t v127 = *(void *)(v118 + 64);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, v126, v127);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149);
          }
          uint64_t v128 = *(void *)(a1 + 1096);
          memset(v143, 0, sizeof(v143));
          memset(&v142, 0, sizeof(v142));
          kaldi::quasar::Encdec::CreateEspressoModel((char *)a1, (const std::string *)(v118 + 56), v128, a1 + 1008, v143, &v142, 0, (uint64_t)&v149);
          long long v129 = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = 0uLL;
          unint64_t v130 = *(std::__shared_weak_count **)(a1 + 224);
          *(_OWORD *)(a1 + 216) = v129;
          if (v130)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v130);
            if (v149.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v149.__r_.__value_.__l.__size_);
            }
          }
          *(void *)&long long v148 = &v142;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
          *(void *)&long long v148 = v143;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
          v149.__r_.__value_.__r.__words[0] = a3;
          unint64_t v131 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)a3, (uint64_t)&std::piecewise_construct, (long long **)&v149);
          uint64_t v133 = *(void *)(a1 + 216);
          uint64_t v132 = *(void *)(a1 + 224);
          if (v132) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v132 + 16), 1uLL, memory_order_relaxed);
          }
          long long v134 = (std::__shared_weak_count *)v131[8];
          v131[7] = v133;
          v131[8] = v132;
          if (v134) {
            std::__shared_weak_count::__release_weak(v134);
          }
        }
      }
      if (v58)
      {
        uint64_t v61 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 440, (const void **)a2);
        if (a1 + 448 != v61)
        {
          if (kaldi::g_kaldi_verbose_level >= 1)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149, 1);
            uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Loading INPUT NET for '", 23);
            int v63 = *(char *)(a2 + 23);
            if (v63 >= 0) {
              float v64 = (const void *)a2;
            }
            else {
              float v64 = *(const void **)a2;
            }
            if (v63 >= 0) {
              uint64_t v65 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              uint64_t v65 = *(void *)(a2 + 8);
            }
            uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v64, v65);
            uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"': ", 3);
            int v68 = *(char *)(v61 + 79);
            if (v68 >= 0) {
              uint64_t v69 = v61 + 56;
            }
            else {
              uint64_t v69 = *(void *)(v61 + 56);
            }
            if (v68 >= 0) {
              uint64_t v70 = *(unsigned __int8 *)(v61 + 79);
            }
            else {
              uint64_t v70 = *(void *)(v61 + 64);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149);
          }
          uint64_t v71 = *(void *)(a1 + 1096);
          memset(v141, 0, sizeof(v141));
          memset(&v140, 0, sizeof(v140));
          kaldi::quasar::Encdec::CreateEspressoModel((char *)a1, (const std::string *)(v61 + 56), v71, a1 + 1008, v141, &v140, 0, (uint64_t)&v149);
          long long v72 = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = 0uLL;
          int v73 = *(std::__shared_weak_count **)(a1 + 240);
          *(_OWORD *)(a1 + 232) = v72;
          if (v73)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v73);
            if (v149.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v149.__r_.__value_.__l.__size_);
            }
          }
          *(void *)&long long v148 = &v140;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
          *(void *)&long long v148 = v141;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
          v149.__r_.__value_.__r.__words[0] = a2;
          std::string::size_type v74 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 320), (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&v149);
          uint64_t v76 = *(void *)(a1 + 232);
          uint64_t v75 = *(void *)(a1 + 240);
          if (v75) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 16), 1uLL, memory_order_relaxed);
          }
          BOOL v77 = (std::__shared_weak_count *)v74[8];
          v74[7] = v76;
          v74[8] = v75;
          if (v77) {
            std::__shared_weak_count::__release_weak(v77);
          }
        }
      }
      if (!v60)
      {
        uint64_t v78 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 368, (const void **)&v150);
        if (a1 + 376 != v78)
        {
          if (kaldi::g_kaldi_verbose_level >= 1)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149, 1);
            char v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149, (uint64_t)"Loading ENCODER for '", 21);
            if (v151 >= 0) {
              uint64_t v80 = &v150;
            }
            else {
              uint64_t v80 = (long long *)v150;
            }
            if (v151 >= 0) {
              uint64_t v81 = HIBYTE(v151);
            }
            else {
              uint64_t v81 = *((void *)&v150 + 1);
            }
            uint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
            uint64_t v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"': ", 3);
            int v84 = *(char *)(v78 + 79);
            if (v84 >= 0) {
              uint64_t v85 = v78 + 56;
            }
            else {
              uint64_t v85 = *(void *)(v78 + 56);
            }
            if (v84 >= 0) {
              uint64_t v86 = *(unsigned __int8 *)(v78 + 79);
            }
            else {
              uint64_t v86 = *(void *)(v78 + 64);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, v85, v86);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v149);
          }
          memset(&v149, 0, sizeof(v149));
          BOOL v87 = *(void **)(a1 + 464);
          if (v87 != (void *)(a1 + 472))
          {
            BOOL v88 = 0;
            do
            {
              unsigned __int8 v89 = (long long *)(v87 + 7);
              if ((unint64_t)v88 >= v149.__r_.__value_.__r.__words[2])
              {
                BOOL v88 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v149, v89);
              }
              else
              {
                if (*((char *)v87 + 79) < 0)
                {
                  std::string::__init_copy_ctor_external(v88, (const std::string::value_type *)v87[7], v87[8]);
                }
                else
                {
                  long long v90 = *v89;
                  v88->__r_.__value_.__r.__words[2] = v87[9];
                  *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v90;
                }
                ++v88;
              }
              v149.__r_.__value_.__l.__size_ = (std::string::size_type)v88;
              BOOL v91 = (void *)v87[1];
              if (v91)
              {
                do
                {
                  BOOL v92 = v91;
                  BOOL v91 = (void *)*v91;
                }
                while (v91);
              }
              else
              {
                do
                {
                  BOOL v92 = (void *)v87[2];
                  BOOL v21 = *v92 == (void)v87;
                  BOOL v87 = v92;
                }
                while (!v21);
              }
              BOOL v87 = v92;
            }
            while (v92 != (void *)(a1 + 472));
          }
          uint64_t v93 = *(void *)(a1 + 1088);
          memset(&v139, 0, sizeof(v139));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v139, *(long long **)(a1 + 880), *(long long **)(a1 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 888) - *(void *)(a1 + 880)) >> 3));
          memset(&v138, 0, sizeof(v138));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v138, (long long *)v149.__r_.__value_.__l.__data_, (long long *)v149.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149.__r_.__value_.__l.__size_ - v149.__r_.__value_.__r.__words[0]) >> 3));
          kaldi::quasar::Encdec::CreateEspressoModel((char *)a1, (const std::string *)(v78 + 56), v93, a1 + 984, (uint64_t *)&v139, (std::vector<std::wstring> *)&v138, *(unsigned char *)(a1 + 1520), (uint64_t)&v148);
          long long v94 = v148;
          long long v148 = 0uLL;
          BOOL v95 = *(std::__shared_weak_count **)(a1 + 160);
          *(_OWORD *)(a1 + 152) = v94;
          if (v95)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v95);
            if (*((void *)&v148 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v148 + 1));
            }
          }
          v152[0] = (long long *)&v138;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
          v152[0] = (long long *)&v139;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
          v152[0] = &v150;
          BOOL v96 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 248), (const void **)&v150, (uint64_t)&std::piecewise_construct, v152);
          uint64_t v98 = *(void *)(a1 + 152);
          uint64_t v97 = *(void *)(a1 + 160);
          if (v97) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v97 + 16), 1uLL, memory_order_relaxed);
          }
          std::__split_buffer<std::string>::pointer v99 = (std::__shared_weak_count *)v96[8];
          v96[7] = v98;
          v96[8] = v97;
          if (v99) {
            std::__shared_weak_count::__release_weak(v99);
          }
          BOOL v100 = *(const void **)(a1 + 152);
          if (v100) {
          else
          }
            BOOL v101 = 0;
          *(unsigned char *)(a1 + 488) = v101;
          v152[0] = &v150;
          std::string::size_type v135 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 496), (const void **)&v150, (uint64_t)&std::piecewise_construct, v152);
          long long v136 = v135 + 8;
          std::__tree<std::string>::destroy((uint64_t)(v135 + 7), (char *)v135[8]);
          *(v136 - 1) = v136;
          *long long v136 = 0;
          v136[1] = 0;
          *(void *)&long long v148 = &v149;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
        }
      }
    }
  }
  uint64_t v40 = 1;
LABEL_215:
  if (SHIBYTE(v151) < 0) {
    operator delete((void *)v150);
  }
  return v40;
}

void sub_1B1E8766C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  *(void *)(v15 - 96) = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 96));
  *(void *)(v15 - 96) = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 96));
  JUMPOUT(0x1B1E877BCLL);
}

void sub_1B1E87770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a43);
  if (*(char *)(v43 - 105) < 0) {
    operator delete(*(void **)(v43 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_1B1E87790(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_1B1E87798()
{
}

void sub_1B1E877A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    JUMPOUT(0x1B1E877D8);
  }
  JUMPOUT(0x1B1E877DCLL);
}

void sub_1B1E877B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,uint64_t a42,char a43)
{
  a41 = (void **)&a43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a41);
  JUMPOUT(0x1B1E877CCLL);
}

BOOL kaldi::quasar::Encdec::SelectSubmodelsToCompile(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  int v6 = *(void **)(a1 + 464);
  uint64_t v7 = (void *)(a1 + 472);
  if (v6 != (void *)(a1 + 472))
  {
    std::string::size_type v8 = 0;
    do
    {
      int v9 = (long long *)(v6 + 7);
      if ((unint64_t)v8 >= v37)
      {
        std::string::size_type v8 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v35, v9);
      }
      else
      {
        if (*((char *)v6 + 79) < 0)
        {
          std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v6[7], v6[8]);
        }
        else
        {
          long long v10 = *v9;
          v8->__r_.__value_.__r.__words[2] = v6[9];
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
        }
        ++v8;
      }
      uint64_t v36 = (long long *)v8;
      long long v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          int v6 = v12;
        }
        while (!v13);
      }
      int v6 = v12;
    }
    while (v12 != v7);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    if (*(void *)(a1 + 88)) {
      goto LABEL_17;
    }
  }
  else if (*(unsigned char *)(a1 + 103))
  {
LABEL_17:
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Setting compilation spec for ENCODER ", 37);
      int v15 = *(char *)(a1 + 103);
      if (v15 >= 0) {
        uint64_t v16 = a1 + 80;
      }
      else {
        uint64_t v16 = *(void *)(a1 + 80);
      }
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(a1 + 103);
      }
      else {
        uint64_t v17 = *(void *)(a1 + 88);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    uint64_t v18 = *(void *)(a1 + 1088);
    memset(&v32, 0, sizeof(v32));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, *(long long **)(a1 + 880), *(long long **)(a1 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 888) - *(void *)(a1 + 880)) >> 3));
    memset(&v31, 0, sizeof(v31));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, v35, v36, 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3));
    kaldi::quasar::Encdec::RegisterEspressoModelForCompilation(a1, (const std::string *)(a1 + 80), v18, a1 + 984, (uint64_t *)&v32, (std::vector<std::string> *)&v31, *(unsigned __int8 *)(a1 + 1520));
    __p[0] = &v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = &v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    BOOL v19 = 1;
    goto LABEL_39;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, 45, (uint64_t)&v30);
  int v20 = *(char *)(a3 + 23);
  if (v20 >= 0) {
    BOOL v21 = (const std::string::value_type *)a3;
  }
  else {
    BOOL v21 = *(const std::string::value_type **)a3;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a3 + 8);
  }
  long long v23 = std::string::append(&v30, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  std::string::size_type v34 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::__split_buffer<std::string> __p = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  uint64_t v25 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 368, (const void **)__p);
  BOOL v19 = a1 + 376 != v25;
  if (a1 + 376 != v25)
  {
    uint64_t v26 = *(void *)(a1 + 1088);
    memset(&v29, 0, sizeof(v29));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, *(long long **)(a1 + 880), *(long long **)(a1 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 888) - *(void *)(a1 + 880)) >> 3));
    memset(&v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, v35, v36, 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3));
    kaldi::quasar::Encdec::RegisterEspressoModelForCompilation(a1, (const std::string *)(v25 + 56), v26, a1 + 984, (uint64_t *)&v29, (std::vector<std::string> *)&v28, *(unsigned __int8 *)(a1 + 1520));
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
LABEL_39:
  __p[0] = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v19;
}

void sub_1B1E87B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a33 < 0) {
    operator delete(__p);
  }
  std::__split_buffer<std::string> __p = (void *)(v33 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BPE::StringToUnkMode(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (v1 != 4)
    {
      if (v1 != 8) {
        goto LABEL_25;
      }
      if (*(void *)a1 != 0x6B6E753272616863)
      {
        if (*(void *)a1 != 0x6B6E753264726F77)
        {
          unint64_t v2 = (void *)a1;
          if (*(void *)a1 == 0x72616863706F7264) {
            return 3;
          }
LABEL_18:
          if (*v2 == 0x64726F77706F7264) {
            return 4;
          }
LABEL_25:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
          uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Unknown unk mode : ", 19);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, a1);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
        }
        return 2;
      }
      return 1;
    }
    if (*(_DWORD *)a1 != 1885693291) {
      goto LABEL_25;
    }
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == 4 && **(_DWORD **)a1 == 1885693291) {
    return 0;
  }
  if (v3 != 8) {
    goto LABEL_25;
  }
  if (**(void **)a1 == 0x6B6E753272616863) {
    return 1;
  }
  if (*(void *)(a1 + 8) != 8) {
    goto LABEL_25;
  }
  if (**(void **)a1 == 0x6B6E753264726F77) {
    return 2;
  }
  if (*(void *)(a1 + 8) != 8) {
    goto LABEL_25;
  }
  unint64_t v2 = *(void **)a1;
  if (**(void **)a1 != 0x72616863706F7264)
  {
    if ((v1 & 0x80) == 0)
    {
      unint64_t v2 = (void *)a1;
      if (v1 != 8) {
        goto LABEL_25;
      }
    }
    goto LABEL_18;
  }
  return 3;
}

uint64_t kaldi::quasar::Encdec::Symbolize(uint64_t a1, long long **a2, uint64_t a3, int a4, char a5)
{
  uint64_t v5 = 552;
  if (a4) {
    uint64_t v5 = 560;
  }
  uint64_t v6 = 820;
  if (a4) {
    uint64_t v6 = 832;
  }
  int v7 = *(_DWORD *)(a1 + v6);
  if (v7 == -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Unknown label not described in the model");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  std::string::size_type v8 = *a2;
  int v9 = a2[1];
  if (*a2 == v9) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)(a1 + v5);
  uint64_t v14 = a3 + 16;
  do
  {
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v15 = *v8;
      __p[0].__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v15;
    }
    int v16 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v13 + 96))(v13, __p);
    if (v16 == -1) {
      int v17 = v7;
    }
    else {
      int v17 = v16;
    }
    if (v17 != v7 || (uint64_t v12 = (v12 + 1), (a5 & 1) == 0))
    {
      BOOL v19 = *(_DWORD **)(a3 + 8);
      unint64_t v18 = *(void *)(a3 + 16);
      if ((unint64_t)v19 >= v18)
      {
        BOOL v21 = *(_DWORD **)a3;
        uint64_t v22 = ((uint64_t)v19 - *(void *)a3) >> 2;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v18 - (void)v21;
        if (v24 >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v14, v25);
          BOOL v21 = *(_DWORD **)a3;
          BOOL v19 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          uint64_t v26 = 0;
        }
        uint64_t v27 = &v26[4 * v22];
        *(_DWORD *)uint64_t v27 = v17;
        int v20 = v27 + 4;
        while (v19 != v21)
        {
          int v28 = *--v19;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        *(void *)a3 = v27;
        *(void *)(a3 + 8) = v20;
        *(void *)(a3 + 16) = &v26[4 * v25];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *BOOL v19 = v17;
        int v20 = v19 + 1;
      }
      *(void *)(a3 + 8) = v20;
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    std::string::size_type v8 = (long long *)((char *)v8 + 24);
  }
  while (v8 != v9);
  return v12;
}

void sub_1B1E87FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::Encdec::ResetHistoryState(kaldi::quasar::Encdec *this)
{
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)this + 191);
  uint64_t v2 = *((void *)this + 195);
  uint64_t v3 = *((void *)this + 194);
  while (v2 != v3)
  {
    v2 -= 32;
    std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)this + 1568, v2);
  }
  *((void *)this + 195) = v3;
  uint64_t v4 = *((void *)this + 198);
  uint64_t v5 = *((void *)this + 197);
  while (v4 != v5)
  {
    v4 -= 32;
    std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)this + 1592, v4);
  }
  *((void *)this + 198) = v5;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)this + 200);
  uint64_t v6 = (void **)*((void *)this + 305);
  int v7 = (void **)*((void *)this + 304);
  if (v6 != v7)
  {
    do
    {
      v6 -= 3;
      std::string::size_type v8 = v6;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    while (v6 != v7);
    uint64_t v6 = (void **)*((void *)this + 304);
  }
  *((void *)this + 305) = v7;
  while (v7 != v6)
  {
    v7 -= 3;
    std::string::size_type v8 = v7;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
  *((void *)this + 305) = v6;
}

void kaldi::quasar::Encdec::GetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (double *)(a1 + 2256);
  uint64_t v7 = a1 + 2336;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v14, v6, v7, (long long *)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 2432);
  long long v10 = (uint64_t **)(v9 + 24 * a3);
  if (v10 != (uint64_t **)a2)
  {
    long long v11 = *(uint64_t **)(v9 + 24 * a3 + 8);
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__assign_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(a2, *v10, v11, ((char *)v11 - (char *)*v10) >> 4);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v14, v8);
}

void sub_1B1E88184(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void kaldi::quasar::Encdec::SetHistoryState(uint64_t a1, uint64_t **a2, int a3, int a4)
{
  std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize((uint64_t *)(a1 + 2432), a4);
  uint64_t v7 = *(void *)(a1 + 2432) + 24 * a3;
  if ((uint64_t **)v7 != a2)
  {
    clockid_t v8 = *a2;
    uint64_t v9 = a2[1];
    unint64_t v10 = ((char *)v9 - (char *)*a2) >> 4;
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__assign_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(v7, v8, v9, v10);
  }
}

void std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      clockid_t v8 = v3;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void kaldi::quasar::Encdec::Start(uint64_t a1, int a2, const std::string *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 836) = a2;
  uint64_t v5 = *(void *)(a1 + 160);
  v22[0] = *(void ***)(a1 + 152);
  v22[1] = (void **)v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a1 + 176);
  v22[2] = *(void ***)(a1 + 168);
  v22[3] = (void **)v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 192);
  v22[4] = *(void ***)(a1 + 184);
  v22[5] = (void **)v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a1 + 208);
  v22[6] = *(void ***)(a1 + 200);
  v22[7] = (void **)v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 224);
  v22[8] = *(void ***)(a1 + 216);
  v22[9] = (void **)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a1 + 240);
  v22[10] = *(void ***)(a1 + 232);
  v22[11] = (void **)v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v18 = 0;
  BOOL v19 = 0;
  v20[0] = 0;
  v20[1] = &v18;
  char v21 = 0;
  unint64_t v18 = (const void **)operator new(0x60uLL);
  BOOL v19 = v18;
  v20[0] = v18 + 12;
  BOOL v19 = (const void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf> const*,std::shared_ptr<kaldi::quasar::ComputeEngineItf> const*,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>((uint64_t)v20, v22, &v23, v18);
  for (uint64_t i = 11; i != -1; i -= 2)
  {
    char v13 = (std::__shared_weak_count *)v22[i];
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  uint64_t v14 = v18;
  for (int j = v19; v14 != j; v14 += 2)
  {
    if (*v14)
    {
      if (v16)
      {
        int v17 = (std::__shared_weak_count *)v14[1];
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::operator=((std::string *)(v16 + 352), a3);
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
      }
    }
  }
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 2256), v11);
  v22[0] = (void **)&v18;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v22);
}

void sub_1B1E884E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::StartFeedforward(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v421 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Model does not support n-best inputs");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v7 = (double *)(a1 + 2256);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v417, (double *)(a1 + 2256), a1 + 2304, &__p);
  if (SHIBYTE(v393) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v8 = (void *)(a1 + 152);
  if (*(void *)(a1 + 152)) {
    uint64_t v9 = 152;
  }
  else {
    uint64_t v9 = 232;
  }
  if (*(void *)(a1 + 152)) {
    uint64_t v10 = (kaldi::quasar::ComputeEngineItf **)(a1 + 152);
  }
  else {
    uint64_t v10 = (kaldi::quasar::ComputeEngineItf **)(a1 + 232);
  }
  if (a4) {
    kaldi::quasar::Encdec::prepareInputsUsingCustomEmbedding(a1, (uint64_t)v10, a2, (uint64_t)&v406);
  }
  else {
    kaldi::quasar::Encdec::prepareInputsAndRunEmbeddingPlan(a1, v10, a2, (uint64_t)&v406);
  }
  if (v406)
  {
    uint64_t v11 = *(void *)(a1 + v9);
    char v13 = v407;
    uint64_t v12 = v408;
    uint64_t v14 = operator new(0x10uLL);
    v419.__r_.__value_.__l.__size_ = (std::string::size_type)(v14 + 2);
    v419.__r_.__value_.__r.__words[2] = (std::string::size_type)(v14 + 2);
    *uint64_t v14 = (int)((v12 - v13) >> 2);
    v14[1] = 1;
    v419.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v11 + 56))(&v403, v11, &v419);
    long long v15 = (_OWORD *)(a1 + 1816);
    if (*(char *)(a1 + 1839) < 0)
    {
      std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)(a1 + 1816), *(void *)(a1 + 1824));
    }
    else
    {
      *(_OWORD *)&v396.__r_.__value_.__l.__data_ = *v15;
      v396.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1832);
    }
    int v16 = (char *)v403;
    v403 = 0;
    v397 = v16;
    unint64_t v17 = v415;
    if (v415 >= v416)
    {
      uint64_t v21 = (uint64_t)(v415 - v414) >> 5;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v416 - v414;
      if ((uint64_t)(v416 - v414) >> 4 > v22) {
        unint64_t v22 = v23 >> 4;
      }
      unint64_t v24 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v22;
      v395 = &v416;
      unint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v416, v24);
      uint64_t v26 = &v25[32 * v21];
      *(void *)&long long __p = v25;
      *((void *)&__p + 1) = v26;
      v394 = &v25[32 * v27];
      long long v28 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
      *((void *)v26 + 2) = *((void *)&v396.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v26 = v28;
      memset(&v396, 0, sizeof(v396));
      std::string v29 = v397;
      v397 = 0;
      *((void *)v26 + 3) = v29;
      v393 = v26 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(&v414, &__p);
      unint64_t v20 = v415;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      long long v18 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
      *(void *)(v415 + 16) = *((void *)&v396.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v17 = v18;
      memset(&v396, 0, sizeof(v396));
      BOOL v19 = v397;
      v397 = 0;
      *(void *)(v17 + 24) = v19;
      unint64_t v20 = v17 + 32;
    }
    unint64_t v415 = v20;
    std::string v30 = v397;
    v397 = 0;
    if (v30) {
      (*(void (**)(char *))(*(void *)v30 + 8))(v30);
    }
    if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v396.__r_.__value_.__l.__data_);
    }
    std::string v31 = v403;
    v403 = 0;
    if (v31) {
      (*(void (**)(void *))(*(void *)v31 + 8))(v31);
    }
    if (v419.__r_.__value_.__r.__words[0])
    {
      v419.__r_.__value_.__l.__size_ = v419.__r_.__value_.__r.__words[0];
      operator delete(v419.__r_.__value_.__l.__data_);
    }
    (*(void (**)(void))(**(void **)(v415 - 8) + 88))(*(void *)(v415 - 8));
    if (!*(_DWORD *)(a1 + 1092))
    {
      if (*(unsigned char *)(a1 + 488))
      {
        if (!v412)
        {
          uint64_t v36 = *(void *)(a1 + 152);
          uint64_t v37 = *(void *)(v415 - 8);
          *(void *)&long long __p = v410;
          uint64_t v38 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1624), (const void **)v410, (uint64_t)&std::piecewise_construct, (long long **)&__p);
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v36 + 72))(v36, v37, *(void *)(*(void *)v38[7] + 56));
          goto LABEL_60;
        }
        *(void *)&long long __p = v410;
        std::string v32 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1624), (const void **)v410, (uint64_t)&std::piecewise_construct, (long long **)&__p)[7];
        (*(void (**)(std::string *__return_ptr))(*(void *)*v10 + 80))(&v419);
        if (*(char *)(a1 + 1839) < 0)
        {
          std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)(a1 + 1816), *(void *)(a1 + 1824));
        }
        else
        {
          *(_OWORD *)&v396.__r_.__value_.__l.__data_ = *v15;
          v396.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1832);
        }
        std::string::size_type v39 = v419.__r_.__value_.__r.__words[0];
        v419.__r_.__value_.__r.__words[0] = 0;
        v397 = (char *)v39;
        unint64_t v40 = v32[2];
        unint64_t v41 = v32[1];
        if (v41 >= v40)
        {
          uint64_t v45 = (uint64_t)(v41 - *v32) >> 5;
          unint64_t v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v47 = v40 - *v32;
          if (v47 >> 4 > v46) {
            unint64_t v46 = v47 >> 4;
          }
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v48 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v46;
          }
          v395 = (unint64_t *)(v32 + 2);
          uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(v32 + 2), v48);
          int v50 = &v49[32 * v45];
          *(void *)&long long __p = v49;
          *((void *)&__p + 1) = v50;
          v394 = &v49[32 * v51];
          long long v52 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
          *((void *)v50 + 2) = *((void *)&v396.__r_.__value_.__l + 2);
          *(_OWORD *)int v50 = v52;
          memset(&v396, 0, sizeof(v396));
          float v53 = v397;
          v397 = 0;
          *((void *)v50 + 3) = v53;
          v393 = v50 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v32, &__p);
          uint64_t v44 = v32[1];
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
        }
        else
        {
          long long v42 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
          *(void *)(v41 + 16) = *((void *)&v396.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v41 = v42;
          uint64_t v43 = v397;
          v397 = 0;
          memset(&v396, 0, sizeof(v396));
          *(void *)(v41 + 24) = v43;
          uint64_t v44 = v41 + 32;
          v32[1] = v41 + 32;
        }
        v32[1] = v44;
        uint64_t v54 = v397;
        v397 = 0;
        if (v54) {
          (*(void (**)(char *))(*(void *)v54 + 8))(v54);
        }
        if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v396.__r_.__value_.__l.__data_);
        }
        std::string::size_type v35 = v419.__r_.__value_.__r.__words[0];
        v419.__r_.__value_.__r.__words[0] = 0;
        if (v35) {
          goto LABEL_59;
        }
      }
      else
      {
        (*(void (**)(long long *__return_ptr))(*(void *)*v10 + 80))(&__p);
        uint64_t v33 = __p;
        *(void *)&long long __p = 0;
        uint64_t v34 = *(void *)(v415 - 8);
        *(void *)(v415 - 8) = v33;
        if (v34) {
          (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
        }
        std::string::size_type v35 = __p;
        *(void *)&long long __p = 0;
        if (v35) {
LABEL_59:
        }
          (*(void (**)(std::string::size_type))(*(void *)v35 + 8))(v35);
      }
    }
  }
LABEL_60:
  if (*(void *)(a1 + 336))
  {
    if (*(unsigned char *)(a1 + 488))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Cannot use ModelChain prepare run with input net", 48);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&v396, "");
    v390 = v10;
    uint64_t v55 = v9;
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, (double *)(a1 + 2256), a1 + 2320, (long long *)&v396);
    if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v396.__r_.__value_.__l.__data_);
    }
    uint64_t v56 = *(void *)(a1 + 232);
    uint64_t v57 = (_OWORD *)(a1 + 1960);
    if (*(char *)(a1 + 1983) < 0)
    {
      std::string::__init_copy_ctor_external(&v419, *(const std::string::value_type **)(a1 + 1960), *(void *)(a1 + 1968));
    }
    else
    {
      *(_OWORD *)&v419.__r_.__value_.__l.__data_ = *v57;
      v419.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1976);
    }
    memset(&v396, 0, sizeof(v396));
    v403 = &v396;
    LOBYTE(v404) = 0;
    v396.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v396.__r_.__value_.__l.__size_ = v396.__r_.__value_.__r.__words[0];
    v396.__r_.__value_.__r.__words[2] = v396.__r_.__value_.__r.__words[0] + 24;
    v396.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v396.__r_.__value_.__r.__words[2], (long long *)&v419, &v420, (std::string *)v396.__r_.__value_.__l.__data_);
    v403 = 0;
    v404 = 0;
    v405 = 0;
    (*(void (**)(uint64_t, uint64_t *, std::string *, void **, uint64_t))(*(void *)v56 + 120))(v56, &v414, &v396, &v403, a1 + 1528);
    v418 = &v403;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v418);
    v403 = &v396;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v403);
    if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v419.__r_.__value_.__l.__data_);
    }
    if (*v8)
    {
      uint64_t v60 = v414;
      for (uint64_t i = v415;
            i != v60;
            std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)&v416, i))
      {
        i -= 32;
      }
      unint64_t v415 = v60;
      uint64_t v61 = *(uint64_t **)(a1 + 1528);
      if (*(char *)(a1 + 1983) < 0)
      {
        std::string::__init_copy_ctor_external(&v419, *(const std::string::value_type **)(a1 + 1960), *(void *)(a1 + 1968));
      }
      else
      {
        *(_OWORD *)&v419.__r_.__value_.__l.__data_ = *v57;
        v419.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1976);
      }
      uint64_t v62 = *v61;
      uint64_t *v61 = 0;
      *(void *)&long long v420 = v62;
      unint64_t v63 = v415;
      if (v415 >= v416)
      {
        uint64_t v67 = (uint64_t)(v415 - v414) >> 5;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v69 = v416 - v414;
        if ((uint64_t)(v416 - v414) >> 4 > v68) {
          unint64_t v68 = v69 >> 4;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v70 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v68;
        }
        v398 = &v416;
        uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v416, v70);
        std::string::size_type v72 = (std::string::size_type)&v71[32 * v67];
        v396.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
        v396.__r_.__value_.__l.__size_ = v72;
        v397 = &v71[32 * v73];
        long long v74 = *(_OWORD *)&v419.__r_.__value_.__l.__data_;
        *(void *)(v72 + 16) = *((void *)&v419.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v72 = v74;
        memset(&v419, 0, sizeof(v419));
        uint64_t v75 = v420;
        *(void *)&long long v420 = 0;
        *(void *)(v72 + 24) = v75;
        v396.__r_.__value_.__r.__words[2] = v72 + 32;
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(&v414, &v396);
        unint64_t v66 = v415;
        std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v396.__r_.__value_.__l.__data_);
      }
      else
      {
        long long v64 = *(_OWORD *)&v419.__r_.__value_.__l.__data_;
        *(void *)(v415 + 16) = *((void *)&v419.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v63 = v64;
        memset(&v419, 0, sizeof(v419));
        uint64_t v65 = v420;
        *(void *)&long long v420 = 0;
        *(void *)(v63 + 24) = v65;
        unint64_t v66 = v63 + 32;
      }
      unint64_t v415 = v66;
      uint64_t v76 = v420;
      *(void *)&long long v420 = 0;
      if (v76) {
        (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
      }
      if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v419.__r_.__value_.__l.__data_);
      }
    }
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&__p, v58);
    uint64_t v9 = v55;
    uint64_t v10 = v390;
    uint64_t v7 = (double *)(a1 + 2256);
  }
  if (*v8)
  {
    if (*(void *)(a1 + 880) == *(void *)(a1 + 888))
    {
      std::string::basic_string[abi:ne180100]<0>(&v396, "");
      kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v7, a1 + 2312, (long long *)&v396);
      if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v396.__r_.__value_.__l.__data_);
      }
      uint64_t v86 = *(void *)(a1 + v9);
      memset(&v396, 0, sizeof(v396));
      (*(void (**)(uint64_t, uint64_t *, uint64_t, std::string *, uint64_t))(*(void *)v86 + 120))(v86, &v414, a1 + 1696, &v396, a1 + 1528);
    }
    else
    {
      if (*(unsigned char *)(a1 + 488))
      {
        if (v412)
        {
          BOOL v77 = operator new(0x30uLL);
          v77[1] = 0;
          void v77[2] = 0;
          void *v77 = &unk_1F0A62B38;
          v77[3] = 0;
          v77[4] = 0;
          v77[5] = 0;
          *(void *)&long long __p = v410;
          uint64_t v78 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1648), (const void **)v410, (uint64_t)&std::piecewise_construct, (long long **)&__p);
          char v79 = (std::__shared_weak_count *)v78[8];
          v78[7] = (uint64_t)(v77 + 3);
          v78[8] = (uint64_t)v77;
          if (v79) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v79);
          }
        }
        if (v413)
        {
          uint64_t v80 = *(void *)(a1 + v9);
          *(void *)&long long __p = v410;
          uint64_t v81 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1624), (const void **)v410, (uint64_t)&std::piecewise_construct, (long long **)&__p);
          uint64_t v82 = (std::__shared_weak_count *)v81[8];
          uint64_t v401 = v81[7];
          v402 = v82;
          if (v82) {
            atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long __p = 0uLL;
          v393 = 0;
          v419.__r_.__value_.__r.__words[0] = (std::string::size_type)v410;
          uint64_t v83 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1648), (const void **)v410, (uint64_t)&std::piecewise_construct, (long long **)&v419);
          int v84 = (std::__shared_weak_count *)v83[8];
          uint64_t v399 = v83[7];
          v400 = v84;
          if (v84) {
            atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, void **, uint64_t *, uint64_t, long long *, uint64_t *))(*(void *)v80 + 160))(v80, v410, &v401, a1 + 1696, &__p, &v399);
          if (v400) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v400);
          }
          v396.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v396);
          if (v402) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v402);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v396, "");
        kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v7, a1 + 2312, (long long *)&v396);
        if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v396.__r_.__value_.__l.__data_);
        }
        (*(void (**)(kaldi::quasar::ComputeEngineItf *, void **))(*(void *)*v10 + 168))(*v10, v410);
        goto LABEL_114;
      }
      std::string::basic_string[abi:ne180100]<0>(&v396, "");
      kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v7, a1 + 2312, (long long *)&v396);
      if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v396.__r_.__value_.__l.__data_);
      }
      uint64_t v87 = *(void *)(a1 + v9);
      memset(&v396, 0, sizeof(v396));
      (*(void (**)(uint64_t, void **, uint64_t *, uint64_t, std::string *, uint64_t))(*(void *)v87 + 144))(v87, v410, &v414, a1 + 1696, &v396, a1 + 1528);
    }
    v419.__r_.__value_.__r.__words[0] = (std::string::size_type)&v396;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v419);
LABEL_114:
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&__p, v85);
  }
  if (*(void *)(a1 + 312))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&v396, v7, a1 + 2328, &__p);
    if (SHIBYTE(v393) < 0) {
      operator delete((void *)__p);
    }
    std::string::size_type v88 = 0;
    v403 = 0;
    v404 = 0;
    v405 = 0;
    if (*(_DWORD *)(a1 + 1092)
      || ((uint64_t v89 = *(void *)(a1 + v9), !*(unsigned char *)(a1 + 488))
        ? (long long v90 = (void **)(a1 + 1528))
        : (*(void *)&long long __p = v410,
           long long v90 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1648), (const void **)v410, (uint64_t)&std::piecewise_construct, (long long **)&__p)[7]), (*(void (**)(std::string *__return_ptr, uint64_t, void))(*(void *)v89 + 88))(&v419, v89, **v90), v88 = v419.__r_.__value_.__r.__words[0], v91 = (kaldi::quasar::ComputeEngineBufferItf *)v419.__r_.__value_.__r.__words[0], *(_DWORD *)(a1 + 1092)))
    {
      BOOL v91 = **(kaldi::quasar::ComputeEngineBufferItf ***)(a1 + 1528);
    }
    if (kaldi::g_kaldi_verbose_level > 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      BOOL v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encoder Out: ", 13);
      kaldi::quasar::ComputeEngineBufferItf::GetShapeString(v91, &v419);
      if ((v419.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v93 = &v419;
      }
      else {
        uint64_t v93 = (std::string *)v419.__r_.__value_.__r.__words[0];
      }
      if ((v419.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v419.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v419.__r_.__value_.__l.__size_;
      }
      BOOL v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v93, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)" [ ", 3);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, void))(*(void *)v91 + 112))(v91, 0);
      BOOL v96 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)" ", 1);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)v91 + 112))(v91, 1);
      uint64_t v97 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" ", 1);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)v91 + 112))(v91, 2);
      uint64_t v98 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)" ...", 4);
      if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v419.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if ((*(unsigned int (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v91 + 176))(v91) != 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unexpected tensor rank ", 23);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v91 + 176))(v91);
      v388 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v388, (uint64_t)" for encoder output", 19);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    int v99 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, void))(*(void *)v91 + 184))(v91, 0);
    int v100 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)v91 + 184))(v91, 1);
    int v101 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)v91 + 184))(v91, 2);
    uint64_t v102 = *(void *)(a1 + 216);
    uint64_t v103 = v409;
    BOOL v104 = operator new(0x18uLL);
    *((void *)&__p + 1) = v104 + 3;
    v393 = v104 + 3;
    void *v104 = v99;
    v104[1] = v103;
    v104[2] = v101;
    *(void *)&long long __p = v104;
    (*(void (**)(void ***__return_ptr, uint64_t, long long *))(*(void *)v102 + 56))(&v418, v102, &__p);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (v99 >= 1)
    {
      uint64_t v105 = 0;
      int v106 = 0;
      int v107 = 0;
      do
      {
        (*((void (**)(void **, kaldi::quasar::ComputeEngineBufferItf *, uint64_t, void, void))*v418 + 9))(v418, v91, v105, ((v106 + v409) * v101), (v107 * v409));
        v107 += v101;
        v106 += v100;
        uint64_t v105 = (v105 + v100 * v101);
        --v99;
      }
      while (v99);
    }
    if (*(char *)(a1 + 1695) < 0) {
      std::string::__init_copy_ctor_external(&v419, *(const std::string::value_type **)(a1 + 1672), *(void *)(a1 + 1680));
    }
    else {
      std::string v419 = *(std::string *)(a1 + 1672);
    }
    int v108 = v418;
    v418 = 0;
    *(void *)&long long v420 = v108;
    uint64_t v109 = v404;
    if (v404 >= v405)
    {
      uint64_t v113 = ((char *)v404 - (unsigned char *)v403) >> 5;
      unint64_t v114 = v113 + 1;
      if ((unint64_t)(v113 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v115 = (char *)v405 - (unsigned char *)v403;
      if (((char *)v405 - (unsigned char *)v403) >> 4 > v114) {
        unint64_t v114 = v115 >> 4;
      }
      if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v116 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v116 = v114;
      }
      v395 = (unint64_t *)&v405;
      uint64_t v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v405, v116);
      uint64_t v118 = &v117[32 * v113];
      *(void *)&long long __p = v117;
      *((void *)&__p + 1) = v118;
      v394 = &v117[32 * v119];
      long long v120 = *(_OWORD *)&v419.__r_.__value_.__l.__data_;
      *((void *)v118 + 2) = *((void *)&v419.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v118 = v120;
      memset(&v419, 0, sizeof(v419));
      uint64_t v121 = v420;
      *(void *)&long long v420 = 0;
      *((void *)v118 + 3) = v121;
      v393 = v118 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v403, &__p);
      long long v112 = v404;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      int64x2_t v110 = *(int64x2_t *)&v419.__r_.__value_.__l.__data_;
      v404[1].i64[0] = v419.__r_.__value_.__r.__words[2];
      *uint64_t v109 = v110;
      memset(&v419, 0, sizeof(v419));
      uint64_t v111 = v420;
      *(void *)&long long v420 = 0;
      v109[1].i64[1] = v111;
      long long v112 = v109 + 2;
    }
    v404 = v112;
    uint64_t v122 = v420;
    *(void *)&long long v420 = 0;
    if (v122) {
      (*(void (**)(uint64_t))(*(void *)v122 + 8))(v122);
    }
    if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v419.__r_.__value_.__l.__data_);
    }
    uint64_t v123 = *(void *)(a1 + 216);
    long long __p = 0uLL;
    v393 = 0;
    (*(void (**)(uint64_t, void **, uint64_t, long long *, uint64_t))(*(void *)v123 + 120))(v123, &v403, a1 + 2056, &__p, a1 + 1528);
    v419.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v419);
    long long v124 = v418;
    v418 = 0;
    if (v124) {
      (*((void (**)(void **))*v124 + 1))(v124);
    }
    if (v88) {
      (*(void (**)(std::string::size_type))(*(void *)v88 + 8))(v88);
    }
    *(void *)&long long __p = &v403;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&v396, v125);
  }
  v391 = (uint64_t *)(a1 + 1552);
  *(_DWORD *)(a1 + 2132) = (*(void *)(a1 + 1560) - *(void *)(a1 + 1552)) >> 5;
  if (!*(unsigned char *)(a1 + 1508))
  {
    uint64_t v128 = *(void *)(a1 + 184);
    long long v129 = operator new(8uLL);
    v419.__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
    void *v129 = 1;
    v419.__r_.__value_.__l.__size_ = (std::string::size_type)(v129 + 1);
    v419.__r_.__value_.__r.__words[2] = (std::string::size_type)(v129 + 1);
    (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v128 + 56))(&v403, v128, &v419);
    if (*(char *)(a1 + 1791) < 0) {
      std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)(a1 + 1768), *(void *)(a1 + 1776));
    }
    else {
      std::string v396 = *(std::string *)(a1 + 1768);
    }
    v158 = (char *)v403;
    v403 = 0;
    v397 = v158;
    unint64_t v151 = *(void *)(a1 + 1560);
    unint64_t v159 = *(void *)(a1 + 1568);
    if (v151 >= v159)
    {
      uint64_t v153 = (uint64_t)(v151 - *v391) >> 5;
      unint64_t v163 = v153 + 1;
      if ((unint64_t)(v153 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v155 = a1 + 1568;
      uint64_t v164 = v159 - *v391;
      if (v164 >> 4 > v163) {
        unint64_t v163 = v164 >> 4;
      }
      if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v157 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v157 = v163;
      }
      goto LABEL_203;
    }
LABEL_196:
    long long v160 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
    *(void *)(v151 + 16) = *((void *)&v396.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v151 = v160;
    memset(&v396, 0, sizeof(v396));
    long long v161 = v397;
    v397 = 0;
    *(void *)(v151 + 24) = v161;
    unint64_t v162 = v151 + 32;
    *(void *)(a1 + 1560) = v151 + 32;
    goto LABEL_204;
  }
  uint64_t v126 = *(void *)(a1 + 184);
  uint64_t v127 = operator new(8uLL);
  v419.__r_.__value_.__r.__words[0] = (std::string::size_type)v127;
  void *v127 = 1;
  v419.__r_.__value_.__l.__size_ = (std::string::size_type)(v127 + 1);
  v419.__r_.__value_.__r.__words[2] = (std::string::size_type)(v127 + 1);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v126 + 56))(&v403, v126, &v419);
  if (*(char *)(a1 + 1767) < 0) {
    std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)(a1 + 1744), *(void *)(a1 + 1752));
  }
  else {
    std::string v396 = *(std::string *)(a1 + 1744);
  }
  unint64_t v130 = (char *)v403;
  v403 = 0;
  v397 = v130;
  unint64_t v131 = *(void *)(a1 + 1584);
  unint64_t v132 = *(void *)(a1 + 1592);
  if (v131 >= v132)
  {
    uint64_t v136 = *(void *)(a1 + 1576);
    uint64_t v137 = (uint64_t)(v131 - v136) >> 5;
    unint64_t v138 = v137 + 1;
    if ((unint64_t)(v137 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v139 = v132 - v136;
    if (v139 >> 4 > v138) {
      unint64_t v138 = v139 >> 4;
    }
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v140 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v140 = v138;
    }
    v395 = (unint64_t *)(a1 + 1592);
    unint64_t v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1592, v140);
    std::vector<std::wstring> v142 = &v141[32 * v137];
    *(void *)&long long __p = v141;
    *((void *)&__p + 1) = v142;
    v394 = &v141[32 * v143];
    long long v144 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
    *((void *)v142 + 2) = *((void *)&v396.__r_.__value_.__l + 2);
    *(_OWORD *)std::vector<std::wstring> v142 = v144;
    memset(&v396, 0, sizeof(v396));
    v145 = v397;
    v397 = 0;
    *((void *)v142 + 3) = v145;
    v393 = v142 + 32;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 1576), &__p);
    unint64_t v135 = *(void *)(a1 + 1584);
    std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
  }
  else
  {
    long long v133 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
    *(void *)(v131 + 16) = *((void *)&v396.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v131 = v133;
    memset(&v396, 0, sizeof(v396));
    long long v134 = v397;
    v397 = 0;
    *(void *)(v131 + 24) = v134;
    unint64_t v135 = v131 + 32;
    *(void *)(a1 + 1584) = v131 + 32;
  }
  *(void *)(a1 + 1584) = v135;
  std::string v146 = v397;
  v397 = 0;
  if (v146) {
    (*(void (**)(char *))(*(void *)v146 + 8))(v146);
  }
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v396.__r_.__value_.__l.__data_);
  }
  std::string v147 = v403;
  v403 = 0;
  if (v147) {
    (*(void (**)(void *))(*(void *)v147 + 8))(v147);
  }
  if (v419.__r_.__value_.__r.__words[0])
  {
    v419.__r_.__value_.__l.__size_ = v419.__r_.__value_.__r.__words[0];
    operator delete(v419.__r_.__value_.__l.__data_);
  }
  uint64_t v148 = *(void *)(a1 + 184);
  std::string v149 = operator new(8uLL);
  v419.__r_.__value_.__r.__words[0] = (std::string::size_type)v149;
  *std::string v149 = 1;
  v419.__r_.__value_.__l.__size_ = (std::string::size_type)(v149 + 1);
  v419.__r_.__value_.__r.__words[2] = (std::string::size_type)(v149 + 1);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v148 + 56))(&v403, v148, &v419);
  if (*(char *)(a1 + 1959) < 0) {
    std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)(a1 + 1936), *(void *)(a1 + 1944));
  }
  else {
    std::string v396 = *(std::string *)(a1 + 1936);
  }
  long long v150 = (char *)v403;
  v403 = 0;
  v397 = v150;
  unint64_t v151 = *(void *)(a1 + 1560);
  unint64_t v152 = *(void *)(a1 + 1568);
  if (v151 < v152) {
    goto LABEL_196;
  }
  uint64_t v153 = (uint64_t)(v151 - *v391) >> 5;
  unint64_t v154 = v153 + 1;
  if ((unint64_t)(v153 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v155 = a1 + 1568;
  uint64_t v156 = v152 - *v391;
  if (v156 >> 4 > v154) {
    unint64_t v154 = v156 >> 4;
  }
  if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v157 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v157 = v154;
  }
LABEL_203:
  v395 = (unint64_t *)(a1 + 1568);
  char v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v155, v157);
  uint64_t v166 = &v165[32 * v153];
  *(void *)&long long __p = v165;
  *((void *)&__p + 1) = v166;
  v394 = &v165[32 * v167];
  long long v168 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
  *((void *)v166 + 2) = *((void *)&v396.__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v166 = v168;
  memset(&v396, 0, sizeof(v396));
  long long v169 = v397;
  v397 = 0;
  *((void *)v166 + 3) = v169;
  v393 = v166 + 32;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v391, &__p);
  unint64_t v162 = *(void *)(a1 + 1560);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
LABEL_204:
  *(void *)(a1 + 1560) = v162;
  v170 = v397;
  v397 = 0;
  if (v170) {
    (*(void (**)(char *))(*(void *)v170 + 8))(v170);
  }
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v396.__r_.__value_.__l.__data_);
  }
  v171 = v403;
  v403 = 0;
  if (v171) {
    (*(void (**)(void *))(*(void *)v171 + 8))(v171);
  }
  if (v419.__r_.__value_.__r.__words[0])
  {
    v419.__r_.__value_.__l.__size_ = v419.__r_.__value_.__r.__words[0];
    operator delete(v419.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 2136) = (*(void *)(a1 + 1560) - *(void *)(a1 + 1552)) >> 5;
  if (*(unsigned char *)(a1 + 1515))
  {
    uint64_t v172 = *(void *)(a1 + 184);
    uint64_t v173 = operator new(8uLL);
    v419.__r_.__value_.__r.__words[0] = (std::string::size_type)v173;
    *uint64_t v173 = 1;
    v419.__r_.__value_.__l.__size_ = (std::string::size_type)(v173 + 1);
    v419.__r_.__value_.__r.__words[2] = (std::string::size_type)(v173 + 1);
    (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v172 + 56))(&v403, v172, &v419);
    if (*(char *)(a1 + 1863) < 0) {
      std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)(a1 + 1840), *(void *)(a1 + 1848));
    }
    else {
      std::string v396 = *(std::string *)(a1 + 1840);
    }
    uint64_t v174 = (char *)v403;
    v403 = 0;
    v397 = v174;
    unint64_t v175 = *(void *)(a1 + 1560);
    unint64_t v176 = *(void *)(a1 + 1568);
    if (v175 >= v176)
    {
      uint64_t v180 = (uint64_t)(v175 - *v391) >> 5;
      unint64_t v181 = v180 + 1;
      if ((unint64_t)(v180 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v182 = v176 - *v391;
      if (v182 >> 4 > v181) {
        unint64_t v181 = v182 >> 4;
      }
      if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v183 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v183 = v181;
      }
      v395 = (unint64_t *)(a1 + 1568);
      uint64_t v184 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1568, v183);
      uint64_t v185 = &v184[32 * v180];
      *(void *)&long long __p = v184;
      *((void *)&__p + 1) = v185;
      v394 = &v184[32 * v186];
      long long v187 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
      *((void *)v185 + 2) = *((void *)&v396.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v185 = v187;
      memset(&v396, 0, sizeof(v396));
      v188 = v397;
      v397 = 0;
      *((void *)v185 + 3) = v188;
      v393 = v185 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v391, &__p);
      unint64_t v179 = *(void *)(a1 + 1560);
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      long long v177 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
      *(void *)(v175 + 16) = *((void *)&v396.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v175 = v177;
      memset(&v396, 0, sizeof(v396));
      v178 = v397;
      v397 = 0;
      *(void *)(v175 + 24) = v178;
      unint64_t v179 = v175 + 32;
      *(void *)(a1 + 1560) = v175 + 32;
    }
    *(void *)(a1 + 1560) = v179;
    v189 = v397;
    v397 = 0;
    if (v189) {
      (*(void (**)(char *))(*(void *)v189 + 8))(v189);
    }
    if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v396.__r_.__value_.__l.__data_);
    }
    v190 = v403;
    v403 = 0;
    if (v190) {
      (*(void (**)(void *))(*(void *)v190 + 8))(v190);
    }
    if (v419.__r_.__value_.__r.__words[0])
    {
      v419.__r_.__value_.__l.__size_ = v419.__r_.__value_.__r.__words[0];
      operator delete(v419.__r_.__value_.__l.__data_);
    }
    if (*(unsigned char *)(a1 + 1508))
    {
      uint64_t v191 = *(void *)(a1 + 184);
      uint64_t v192 = operator new(8uLL);
      v419.__r_.__value_.__r.__words[0] = (std::string::size_type)v192;
      *uint64_t v192 = 1;
      v419.__r_.__value_.__l.__size_ = (std::string::size_type)(v192 + 1);
      v419.__r_.__value_.__r.__words[2] = (std::string::size_type)(v192 + 1);
      (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v191 + 56))(&v403, v191, &v419);
      if (*(char *)(a1 + 1815) < 0) {
        std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)(a1 + 1792), *(void *)(a1 + 1800));
      }
      else {
        std::string v396 = *(std::string *)(a1 + 1792);
      }
      v193 = (char *)v403;
      v403 = 0;
      v397 = v193;
      unint64_t v194 = *(void *)(a1 + 1584);
      unint64_t v195 = *(void *)(a1 + 1592);
      if (v194 >= v195)
      {
        uint64_t v199 = *(void *)(a1 + 1576);
        uint64_t v200 = (uint64_t)(v194 - v199) >> 5;
        unint64_t v201 = v200 + 1;
        if ((unint64_t)(v200 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v202 = v195 - v199;
        if (v202 >> 4 > v201) {
          unint64_t v201 = v202 >> 4;
        }
        if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v203 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v203 = v201;
        }
        v395 = (unint64_t *)(a1 + 1592);
        uint64_t v204 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1592, v203);
        v205 = &v204[32 * v200];
        *(void *)&long long __p = v204;
        *((void *)&__p + 1) = v205;
        v394 = &v204[32 * v206];
        long long v207 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
        *((void *)v205 + 2) = *((void *)&v396.__r_.__value_.__l + 2);
        *(_OWORD *)v205 = v207;
        memset(&v396, 0, sizeof(v396));
        v208 = v397;
        v397 = 0;
        *((void *)v205 + 3) = v208;
        v393 = v205 + 32;
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 1576), &__p);
        unint64_t v198 = *(void *)(a1 + 1584);
        std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
      }
      else
      {
        long long v196 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
        *(void *)(v194 + 16) = *((void *)&v396.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v194 = v196;
        memset(&v396, 0, sizeof(v396));
        v197 = v397;
        v397 = 0;
        *(void *)(v194 + 24) = v197;
        unint64_t v198 = v194 + 32;
        *(void *)(a1 + 1584) = v194 + 32;
      }
      *(void *)(a1 + 1584) = v198;
      v209 = v397;
      v397 = 0;
      if (v209) {
        (*(void (**)(char *))(*(void *)v209 + 8))(v209);
      }
      if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v396.__r_.__value_.__l.__data_);
      }
      uint64_t v210 = v403;
      v403 = 0;
      if (v210) {
        (*(void (**)(void *))(*(void *)v210 + 8))(v210);
      }
      if (v419.__r_.__value_.__r.__words[0])
      {
        v419.__r_.__value_.__l.__size_ = v419.__r_.__value_.__r.__words[0];
        operator delete(v419.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v211 = (*(void *)(a1 + 1560) - *(void *)(a1 + 1552)) >> 5;
  *(_DWORD *)(a1 + 2144) = v211;
  if (*(char *)(a1 + 1887) < 0)
  {
    if (!*(void *)(a1 + 1872)) {
      goto LABEL_279;
    }
  }
  else if (!*(unsigned char *)(a1 + 1887))
  {
    goto LABEL_279;
  }
  uint64_t v212 = *(void *)(a1 + 184);
  uint64_t v213 = operator new(8uLL);
  v419.__r_.__value_.__r.__words[0] = (std::string::size_type)v213;
  *uint64_t v213 = 1;
  v419.__r_.__value_.__l.__size_ = (std::string::size_type)(v213 + 1);
  v419.__r_.__value_.__r.__words[2] = (std::string::size_type)(v213 + 1);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v212 + 56))(&v403, v212, &v419);
  if (*(char *)(a1 + 1887) < 0) {
    std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)(a1 + 1864), *(void *)(a1 + 1872));
  }
  else {
    std::string v396 = *(std::string *)(a1 + 1864);
  }
  v214 = (char *)v403;
  v403 = 0;
  v397 = v214;
  unint64_t v215 = *(void *)(a1 + 1560);
  unint64_t v216 = *(void *)(a1 + 1568);
  if (v215 >= v216)
  {
    uint64_t v220 = (uint64_t)(v215 - *v391) >> 5;
    unint64_t v221 = v220 + 1;
    if ((unint64_t)(v220 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v222 = v216 - *v391;
    if (v222 >> 4 > v221) {
      unint64_t v221 = v222 >> 4;
    }
    if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v223 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v223 = v221;
    }
    v395 = (unint64_t *)(a1 + 1568);
    v224 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1568, v223);
    std::vector<std::wstring> v225 = &v224[32 * v220];
    *(void *)&long long __p = v224;
    *((void *)&__p + 1) = v225;
    v394 = &v224[32 * v226];
    long long v227 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
    *((void *)v225 + 2) = *((void *)&v396.__r_.__value_.__l + 2);
    *(_OWORD *)std::vector<std::wstring> v225 = v227;
    memset(&v396, 0, sizeof(v396));
    v228 = v397;
    v397 = 0;
    *((void *)v225 + 3) = v228;
    v393 = v225 + 32;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v391, &__p);
    unint64_t v219 = *(void *)(a1 + 1560);
    std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
  }
  else
  {
    long long v217 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
    *(void *)(v215 + 16) = *((void *)&v396.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v215 = v217;
    memset(&v396, 0, sizeof(v396));
    v218 = v397;
    v397 = 0;
    *(void *)(v215 + 24) = v218;
    unint64_t v219 = v215 + 32;
    *(void *)(a1 + 1560) = v215 + 32;
  }
  *(void *)(a1 + 1560) = v219;
  std::string v229 = v397;
  v397 = 0;
  if (v229) {
    (*(void (**)(char *))(*(void *)v229 + 8))(v229);
  }
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v396.__r_.__value_.__l.__data_);
  }
  std::string v230 = v403;
  v403 = 0;
  if (v230) {
    (*(void (**)(void *))(*(void *)v230 + 8))(v230);
  }
  if (v419.__r_.__value_.__r.__words[0])
  {
    v419.__r_.__value_.__l.__size_ = v419.__r_.__value_.__r.__words[0];
    operator delete(v419.__r_.__value_.__l.__data_);
  }
  uint64_t v211 = (*(void *)(a1 + 1560) - *(void *)(a1 + 1552)) >> 5;
LABEL_279:
  *(_DWORD *)(a1 + 2140) = v211;
  if (*(void *)(a1 + 2240) && !*(unsigned char *)(a1 + 1506) && !*(unsigned char *)(a1 + 1507))
  {
    if (!*(unsigned char *)(a1 + 1509))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Espresso shortlist models require active shortlist!", 51);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 184) + 16))(&v419);
    if (*(char *)(a1 + 1911) < 0) {
      std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)(a1 + 1888), *(void *)(a1 + 1896));
    }
    else {
      std::string v396 = *(std::string *)(a1 + 1888);
    }
    std::string::size_type v231 = v419.__r_.__value_.__r.__words[0];
    v419.__r_.__value_.__r.__words[0] = 0;
    v397 = (char *)v231;
    unint64_t v232 = *(void *)(a1 + 1560);
    unint64_t v233 = *(void *)(a1 + 1568);
    if (v232 >= v233)
    {
      uint64_t v237 = (uint64_t)(v232 - *v391) >> 5;
      unint64_t v238 = v237 + 1;
      if ((unint64_t)(v237 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v239 = v233 - *v391;
      if (v239 >> 4 > v238) {
        unint64_t v238 = v239 >> 4;
      }
      if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v240 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v240 = v238;
      }
      v395 = (unint64_t *)(a1 + 1568);
      v241 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1568, v240);
      uint64_t v242 = &v241[32 * v237];
      *(void *)&long long __p = v241;
      *((void *)&__p + 1) = v242;
      v394 = &v241[32 * v243];
      long long v244 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
      *((void *)v242 + 2) = *((void *)&v396.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v242 = v244;
      memset(&v396, 0, sizeof(v396));
      uint64_t v245 = v397;
      v397 = 0;
      *((void *)v242 + 3) = v245;
      v393 = v242 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v391, &__p);
      unint64_t v236 = *(void *)(a1 + 1560);
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      long long v234 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
      *(void *)(v232 + 16) = *((void *)&v396.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v232 = v234;
      memset(&v396, 0, sizeof(v396));
      std::string v235 = v397;
      v397 = 0;
      *(void *)(v232 + 24) = v235;
      unint64_t v236 = v232 + 32;
      *(void *)(a1 + 1560) = v232 + 32;
    }
    *(void *)(a1 + 1560) = v236;
    v246 = v397;
    v397 = 0;
    if (v246) {
      (*(void (**)(char *))(*(void *)v246 + 8))(v246);
    }
    if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v396.__r_.__value_.__l.__data_);
    }
    std::string::size_type v247 = v419.__r_.__value_.__r.__words[0];
    v419.__r_.__value_.__r.__words[0] = 0;
    if (v247) {
      (*(void (**)(std::string::size_type))(*(void *)v247 + 8))(v247);
    }
  }
  std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize((uint64_t *)(a1 + 2432), 1uLL);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100](*(uint64_t **)(a1 + 2432));
  *(_DWORD *)(a1 + 2112) = (*(void *)(a1 + 1560) - *(void *)(a1 + 1552)) >> 5;
  v248 = *(long long **)(a1 + 2080);
  v249 = *(long long **)(a1 + 2088);
  if (v248 != v249)
  {
    int64x2_t v389 = vdupq_n_s64(1uLL);
    do
    {
      if (*(unsigned char *)(a1 + 2460))
      {
        unint64_t v250 = *(int *)(a1 + 2456);
        LODWORD(__p) = 0;
        std::vector<float>::vector(&v419, v250, &__p);
        uint64_t v251 = *(void *)(a1 + 184);
        uint64_t v252 = *(int *)(a1 + 2456);
        v253 = (int64x2_t *)operator new(0x20uLL);
        v404 = v253 + 2;
        v405 = v253 + 2;
        v253->i64[0] = 1;
        v253->i64[1] = v252;
        v253[1] = v389;
        v403 = v253;
        (*(void (**)(void ***__return_ptr, uint64_t, void **))(*(void *)v251 + 56))(&v418, v251, &v403);
        if (*((char *)v248 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)v248, *((void *)v248 + 1));
        }
        else
        {
          long long v254 = *v248;
          v396.__r_.__value_.__r.__words[2] = *((void *)v248 + 2);
          *(_OWORD *)&v396.__r_.__value_.__l.__data_ = v254;
        }
        v258 = v418;
        v418 = 0;
        v397 = (char *)v258;
        unint64_t v259 = *(void *)(a1 + 1560);
        unint64_t v260 = *(void *)(a1 + 1568);
        if (v259 >= v260)
        {
          uint64_t v264 = (uint64_t)(v259 - *v391) >> 5;
          unint64_t v265 = v264 + 1;
          if ((unint64_t)(v264 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v266 = v260 - *v391;
          if (v266 >> 4 > v265) {
            unint64_t v265 = v266 >> 4;
          }
          if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v267 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v267 = v265;
          }
          v395 = (unint64_t *)(a1 + 1568);
          v268 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1568, v267);
          v269 = &v268[32 * v264];
          *(void *)&long long __p = v268;
          *((void *)&__p + 1) = v269;
          v394 = &v268[32 * v270];
          long long v271 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
          *((void *)v269 + 2) = *((void *)&v396.__r_.__value_.__l + 2);
          *(_OWORD *)v269 = v271;
          memset(&v396, 0, sizeof(v396));
          v272 = v397;
          v397 = 0;
          *((void *)v269 + 3) = v272;
          v393 = v269 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v391, &__p);
          unint64_t v263 = *(void *)(a1 + 1560);
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
        }
        else
        {
          long long v261 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
          *(void *)(v259 + 16) = *((void *)&v396.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v259 = v261;
          memset(&v396, 0, sizeof(v396));
          v262 = v397;
          v397 = 0;
          *(void *)(v259 + 24) = v262;
          unint64_t v263 = v259 + 32;
          *(void *)(a1 + 1560) = v259 + 32;
        }
        *(void *)(a1 + 1560) = v263;
        v273 = v397;
        v397 = 0;
        if (v273) {
          (*(void (**)(char *))(*(void *)v273 + 8))(v273);
        }
        if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v396.__r_.__value_.__l.__data_);
        }
        v274 = v418;
        v418 = 0;
        if (v274) {
          (*((void (**)(void **))*v274 + 1))(v274);
        }
        if (v403)
        {
          v404 = (int64x2_t *)v403;
          operator delete(v403);
        }
        (*(void (**)(void))(**(void **)(*(void *)(a1 + 1560) - 8) + 88))(*(void *)(*(void *)(a1 + 1560) - 8));
        v275 = *(uint64_t **)(a1 + 2432);
        uint64_t v276 = *(void *)(a1 + 184);
        uint64_t v277 = *(int *)(a1 + 2456);
        v278 = (int64x2_t *)operator new(0x20uLL);
        v396.__r_.__value_.__l.__size_ = (std::string::size_type)&v278[2];
        v396.__r_.__value_.__r.__words[2] = (std::string::size_type)&v278[2];
        v278->i64[0] = 1;
        v278->i64[1] = v277;
        v278[1] = vdupq_n_s64(1uLL);
        v396.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
        (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v276 + 56))(&v403, v276, &v396);
        if (v403) {
          operator new();
        }
        v403 = 0;
        unint64_t v279 = v275[2];
        v280 = (void *)v275[1];
        if ((unint64_t)v280 >= v279)
        {
          uint64_t v282 = ((uint64_t)v280 - *v275) >> 4;
          unint64_t v283 = v282 + 1;
          if ((unint64_t)(v282 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v284 = v279 - *v275;
          if (v284 >> 3 > v283) {
            unint64_t v283 = v284 >> 3;
          }
          if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v285 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v285 = v283;
          }
          v395 = (unint64_t *)(v275 + 2);
          v286 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v275 + 2), v285);
          v287 = &v286[16 * v282];
          *(void *)&long long __p = v286;
          *((void *)&__p + 1) = v287;
          v394 = &v286[16 * v288];
          *(void *)v287 = 0;
          *((void *)v287 + 1) = 0;
          v393 = v287 + 16;
          std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(v275, &__p);
          v281 = (void *)v275[1];
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&__p);
        }
        else
        {
          void *v280 = 0;
          v280[1] = 0;
          v281 = v280 + 2;
          v275[1] = (uint64_t)(v280 + 2);
        }
        v275[1] = (uint64_t)v281;
        v289 = v403;
        v403 = 0;
        if (v289) {
          (*(void (**)(void *))(*(void *)v289 + 8))(v289);
        }
        if (v396.__r_.__value_.__r.__words[0])
        {
          v396.__r_.__value_.__l.__size_ = v396.__r_.__value_.__r.__words[0];
          operator delete(v396.__r_.__value_.__l.__data_);
        }
        uint64_t v290 = *(void *)(*(void *)(*(void *)(a1 + 2432) + 8) - 16);
        (*(void (**)(uint64_t))(*(void *)v290 + 88))(v290);
        v291 = (void *)v419.__r_.__value_.__r.__words[0];
        if (!v419.__r_.__value_.__r.__words[0]) {
          goto LABEL_377;
        }
        v419.__r_.__value_.__l.__size_ = v419.__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v255 = *(void *)(a1 + 184);
        unint64_t v256 = *(int *)(a1 + 2456);
        LODWORD(v418) = 0;
        std::vector<float>::vector(&v419, v256, &v418);
        (*(void (**)(void **__return_ptr, uint64_t, std::string *, void))(*(void *)v255 + 24))(&v403, v255, &v419, 0);
        if (*((char *)v248 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)v248, *((void *)v248 + 1));
        }
        else
        {
          long long v257 = *v248;
          v396.__r_.__value_.__r.__words[2] = *((void *)v248 + 2);
          *(_OWORD *)&v396.__r_.__value_.__l.__data_ = v257;
        }
        v292 = (char *)v403;
        v403 = 0;
        v397 = v292;
        unint64_t v293 = *(void *)(a1 + 1560);
        unint64_t v294 = *(void *)(a1 + 1568);
        if (v293 >= v294)
        {
          uint64_t v298 = (uint64_t)(v293 - *v391) >> 5;
          unint64_t v299 = v298 + 1;
          if ((unint64_t)(v298 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v300 = v294 - *v391;
          if (v300 >> 4 > v299) {
            unint64_t v299 = v300 >> 4;
          }
          if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v301 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v301 = v299;
          }
          v395 = (unint64_t *)(a1 + 1568);
          v302 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1568, v301);
          v303 = &v302[32 * v298];
          *(void *)&long long __p = v302;
          *((void *)&__p + 1) = v303;
          v394 = &v302[32 * v304];
          long long v305 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
          *((void *)v303 + 2) = *((void *)&v396.__r_.__value_.__l + 2);
          *(_OWORD *)v303 = v305;
          memset(&v396, 0, sizeof(v396));
          v306 = v397;
          v397 = 0;
          *((void *)v303 + 3) = v306;
          v393 = v303 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v391, &__p);
          unint64_t v297 = *(void *)(a1 + 1560);
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
        }
        else
        {
          long long v295 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
          *(void *)(v293 + 16) = *((void *)&v396.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v293 = v295;
          memset(&v396, 0, sizeof(v396));
          v296 = v397;
          v397 = 0;
          *(void *)(v293 + 24) = v296;
          unint64_t v297 = v293 + 32;
          *(void *)(a1 + 1560) = v293 + 32;
        }
        *(void *)(a1 + 1560) = v297;
        v307 = v397;
        v397 = 0;
        if (v307) {
          (*(void (**)(char *))(*(void *)v307 + 8))(v307);
        }
        if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v396.__r_.__value_.__l.__data_);
        }
        v308 = v403;
        v403 = 0;
        if (v308) {
          (*(void (**)(void *))(*(void *)v308 + 8))(v308);
        }
        if (v419.__r_.__value_.__r.__words[0])
        {
          v419.__r_.__value_.__l.__size_ = v419.__r_.__value_.__r.__words[0];
          operator delete(v419.__r_.__value_.__l.__data_);
        }
        v309 = *(uint64_t **)(a1 + 2432);
        uint64_t v310 = *(void *)(a1 + 184);
        unint64_t v311 = *(int *)(a1 + 2456);
        LODWORD(v403) = 0;
        std::vector<float>::vector(&v396, v311, &v403);
        (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void))(*(void *)v310 + 24))(&v419, v310, &v396, 0);
        if (v419.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        v419.__r_.__value_.__r.__words[0] = 0;
        unint64_t v312 = v309[2];
        v313 = (void *)v309[1];
        if ((unint64_t)v313 >= v312)
        {
          uint64_t v315 = ((uint64_t)v313 - *v309) >> 4;
          unint64_t v316 = v315 + 1;
          if ((unint64_t)(v315 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v317 = v312 - *v309;
          if (v317 >> 3 > v316) {
            unint64_t v316 = v317 >> 3;
          }
          if ((unint64_t)v317 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v318 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v318 = v316;
          }
          v395 = (unint64_t *)(v309 + 2);
          v319 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v309 + 2), v318);
          v320 = &v319[16 * v315];
          *(void *)&long long __p = v319;
          *((void *)&__p + 1) = v320;
          v394 = &v319[16 * v321];
          *(void *)v320 = 0;
          *((void *)v320 + 1) = 0;
          v393 = v320 + 16;
          std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(v309, &__p);
          v314 = (void *)v309[1];
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&__p);
        }
        else
        {
          void *v313 = 0;
          v313[1] = 0;
          v314 = v313 + 2;
          v309[1] = (uint64_t)(v313 + 2);
        }
        v309[1] = (uint64_t)v314;
        std::string::size_type v322 = v419.__r_.__value_.__r.__words[0];
        v419.__r_.__value_.__r.__words[0] = 0;
        if (v322) {
          (*(void (**)(std::string::size_type))(*(void *)v322 + 8))(v322);
        }
        v291 = (void *)v396.__r_.__value_.__r.__words[0];
        if (!v396.__r_.__value_.__r.__words[0]) {
          goto LABEL_377;
        }
        v396.__r_.__value_.__l.__size_ = v396.__r_.__value_.__r.__words[0];
      }
      operator delete(v291);
LABEL_377:
      v248 = (long long *)((char *)v248 + 24);
    }
    while (v248 != v249);
  }
  if (*(unsigned char *)(a1 + 1515))
  {
    v323 = *(uint64_t **)(a1 + 2432);
    if (*(unsigned char *)(a1 + 1518))
    {
      uint64_t v324 = *(void *)(a1 + 184);
      v325 = operator new(4uLL);
      v396.__r_.__value_.__r.__words[0] = (std::string::size_type)v325;
      _DWORD *v325 = 0;
      v396.__r_.__value_.__l.__size_ = (std::string::size_type)(v325 + 1);
      v396.__r_.__value_.__r.__words[2] = (std::string::size_type)(v325 + 1);
      (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void))(*(void *)v324 + 16))(&v419, v324, &v396, 0);
      if (v419.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v419.__r_.__value_.__r.__words[0] = 0;
      uint64_t v328 = (uint64_t)(v323 + 2);
      unint64_t v329 = v323[2];
      v330 = (void *)v323[1];
      if ((unint64_t)v330 >= v329)
      {
        uint64_t v331 = ((uint64_t)v330 - *v323) >> 4;
        unint64_t v332 = v331 + 1;
        if ((unint64_t)(v331 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v333 = v329 - *v323;
        if (v333 >> 3 > v332) {
          unint64_t v332 = v333 >> 3;
        }
        if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v334 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v334 = v332;
        }
LABEL_399:
        v395 = (unint64_t *)(v323 + 2);
        v339 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v328, v334);
        v340 = &v339[16 * v331];
        *(void *)&long long __p = v339;
        *((void *)&__p + 1) = v340;
        v394 = &v339[16 * v341];
        *(void *)v340 = 0;
        *((void *)v340 + 1) = 0;
        v393 = v340 + 16;
        std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(v323, &__p);
        v336 = (void *)v323[1];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&__p);
        goto LABEL_400;
      }
    }
    else
    {
      uint64_t v326 = *(void *)(a1 + 184);
      v327 = operator new(4uLL);
      v396.__r_.__value_.__r.__words[0] = (std::string::size_type)v327;
      _DWORD *v327 = 1;
      v396.__r_.__value_.__l.__size_ = (std::string::size_type)(v327 + 1);
      v396.__r_.__value_.__r.__words[2] = (std::string::size_type)(v327 + 1);
      (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void))(*(void *)v326 + 16))(&v419, v326, &v396, 0);
      if (v419.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v419.__r_.__value_.__r.__words[0] = 0;
      uint64_t v328 = (uint64_t)(v323 + 2);
      unint64_t v335 = v323[2];
      v330 = (void *)v323[1];
      if ((unint64_t)v330 >= v335)
      {
        uint64_t v331 = ((uint64_t)v330 - *v323) >> 4;
        unint64_t v337 = v331 + 1;
        if ((unint64_t)(v331 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v338 = v335 - *v323;
        if (v338 >> 3 > v337) {
          unint64_t v337 = v338 >> 3;
        }
        if ((unint64_t)v338 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v334 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v334 = v337;
        }
        goto LABEL_399;
      }
    }
    void *v330 = 0;
    v330[1] = 0;
    v336 = v330 + 2;
    v323[1] = (uint64_t)(v330 + 2);
LABEL_400:
    v323[1] = (uint64_t)v336;
    std::string::size_type v342 = v419.__r_.__value_.__r.__words[0];
    v419.__r_.__value_.__r.__words[0] = 0;
    if (v342) {
      (*(void (**)(std::string::size_type))(*(void *)v342 + 8))(v342);
    }
    if (v396.__r_.__value_.__r.__words[0])
    {
      v396.__r_.__value_.__l.__size_ = v396.__r_.__value_.__r.__words[0];
      operator delete(v396.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v343 = *(void *)(a1 + 2056);
  if (v343 != *(void *)(a1 + 2064))
  {
    unint64_t v344 = 0;
    uint64_t v345 = a1 + 1568;
    do
    {
      if (v406 < 1 || *(void *)(a1 + 432))
      {
        (*(void (**)(std::string *__return_ptr))(**(void **)(*(void *)(a1 + 1528)
                                                                        + 8 * (*(_DWORD *)(a1 + 2104) + (int)v344))
                                                          + 16))(&v419);
        v346 = (long long *)(v343 + 24 * v344);
        if (*((char *)v346 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)v346, *((void *)v346 + 1));
        }
        else
        {
          long long v347 = *v346;
          v396.__r_.__value_.__r.__words[2] = *((void *)v346 + 2);
          *(_OWORD *)&v396.__r_.__value_.__l.__data_ = v347;
        }
        std::string::size_type v348 = v419.__r_.__value_.__r.__words[0];
        v419.__r_.__value_.__r.__words[0] = 0;
        v397 = (char *)v348;
        unint64_t v349 = *(void *)(a1 + 1560);
        unint64_t v350 = *(void *)(a1 + 1568);
        if (v349 >= v350)
        {
          uint64_t v351 = (uint64_t)(v349 - *v391) >> 5;
          unint64_t v352 = v351 + 1;
          if ((unint64_t)(v351 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v353 = v350 - *v391;
          if (v353 >> 4 > v352) {
            unint64_t v352 = v353 >> 4;
          }
          if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v354 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v354 = v352;
          }
LABEL_435:
          v395 = (unint64_t *)v345;
          v374 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v345, v354);
          v375 = &v374[32 * v351];
          *(void *)&long long __p = v374;
          *((void *)&__p + 1) = v375;
          v394 = &v374[32 * v376];
          long long v377 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
          *((void *)v375 + 2) = *((void *)&v396.__r_.__value_.__l + 2);
          *(_OWORD *)v375 = v377;
          memset(&v396, 0, sizeof(v396));
          v378 = v397;
          v397 = 0;
          *((void *)v375 + 3) = v378;
          v393 = v375 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v391, &__p);
          unint64_t v371 = *(void *)(a1 + 1560);
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
          goto LABEL_436;
        }
      }
      else
      {
        uint64_t v355 = *(void *)(*(void *)(a1 + 1528) + 8 * (*(_DWORD *)(a1 + 2104) + (int)v344));
        if ((*(unsigned int (**)(uint64_t))(*(void *)v355 + 176))(v355) != 3)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unexpected tensor rank ", 23);
          (*(void (**)(uint64_t))(*(void *)v355 + 176))(v355);
          v382 = (void *)std::ostream::operator<<();
          v383 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v382, (uint64_t)" for handover ", 14);
          uint64_t v384 = *(void *)(a1 + 2056) + 24 * v344;
          int v385 = *(char *)(v384 + 23);
          if (v385 >= 0) {
            uint64_t v386 = *(void *)(a1 + 2056) + 24 * v344;
          }
          else {
            uint64_t v386 = *(void *)v384;
          }
          if (v385 >= 0) {
            uint64_t v387 = *(unsigned __int8 *)(v384 + 23);
          }
          else {
            uint64_t v387 = *(void *)(v384 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v383, v386, v387);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        int v356 = (*(uint64_t (**)(uint64_t, void))(*(void *)v355 + 184))(v355, 0);
        int v357 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v355 + 184))(v355, 1);
        int v358 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v355 + 184))(v355, 2);
        uint64_t v359 = *(void *)(a1 + 184);
        uint64_t v360 = v409;
        v361 = operator new(0x18uLL);
        *((void *)&__p + 1) = v361 + 3;
        v393 = v361 + 3;
        void *v361 = v356;
        v361[1] = v360;
        v361[2] = v358;
        *(void *)&long long __p = v361;
        (*(void (**)(std::string *__return_ptr, uint64_t, long long *))(*(void *)v359 + 56))(&v419, v359, &__p);
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if (v356 >= 1)
        {
          uint64_t v362 = 0;
          int v363 = 0;
          int v364 = 0;
          do
          {
            (*(void (**)(std::string::size_type, uint64_t, uint64_t, void, void))(*(void *)v419.__r_.__value_.__l.__data_
                                                                                             + 72))(v419.__r_.__value_.__r.__words[0], v355, v362, ((v363 + v409) * v358), (v364 * v409));
            v364 += v358;
            v363 += v357;
            uint64_t v362 = (v362 + v357 * v358);
            --v356;
          }
          while (v356);
        }
        uint64_t v365 = *(void *)(a1 + 2056) + 24 * v344;
        if (*(char *)(v365 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v396, *(const std::string::value_type **)v365, *(void *)(v365 + 8));
        }
        else
        {
          long long v366 = *(_OWORD *)v365;
          v396.__r_.__value_.__r.__words[2] = *(void *)(v365 + 16);
          *(_OWORD *)&v396.__r_.__value_.__l.__data_ = v366;
        }
        uint64_t v345 = a1 + 1568;
        std::string::size_type v367 = v419.__r_.__value_.__r.__words[0];
        v419.__r_.__value_.__r.__words[0] = 0;
        v397 = (char *)v367;
        unint64_t v349 = *(void *)(a1 + 1560);
        unint64_t v368 = *(void *)(a1 + 1568);
        if (v349 >= v368)
        {
          uint64_t v351 = (uint64_t)(v349 - *v391) >> 5;
          unint64_t v372 = v351 + 1;
          if ((unint64_t)(v351 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v373 = v368 - *v391;
          if (v373 >> 4 > v372) {
            unint64_t v372 = v373 >> 4;
          }
          if ((unint64_t)v373 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v354 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v354 = v372;
          }
          goto LABEL_435;
        }
      }
      long long v369 = *(_OWORD *)&v396.__r_.__value_.__l.__data_;
      *(void *)(v349 + 16) = *((void *)&v396.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v349 = v369;
      memset(&v396, 0, sizeof(v396));
      v370 = v397;
      v397 = 0;
      *(void *)(v349 + 24) = v370;
      unint64_t v371 = v349 + 32;
      *(void *)(a1 + 1560) = v349 + 32;
LABEL_436:
      *(void *)(a1 + 1560) = v371;
      v379 = v397;
      v397 = 0;
      if (v379) {
        (*(void (**)(char *))(*(void *)v379 + 8))(v379);
      }
      if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v396.__r_.__value_.__l.__data_);
      }
      std::string::size_type v380 = v419.__r_.__value_.__r.__words[0];
      v419.__r_.__value_.__r.__words[0] = 0;
      if (v380) {
        (*(void (**)(std::string::size_type))(*(void *)v380 + 8))(v380);
      }
      ++v344;
      uint64_t v343 = *(void *)(a1 + 2056);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 2064) - v343) >> 3) > v344);
  }
  *(void *)&long long __p = &v414;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v411 < 0) {
    operator delete(v410[0]);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v417, v381);
}

void sub_1B1E8B8F0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1E8BC18);
}

void sub_1B1E8B900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (*(char *)(v58 - 121) < 0) {
    operator delete(*(void **)(v58 - 144));
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a12);
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  *(void *)(v58 - 144) = &a57;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 144));
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a47, v59);
  JUMPOUT(0x1B1E8BC08);
}

void sub_1B1E8B934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~pair((uint64_t)&a47);
  uint64_t v57 = a57;
  a57 = 0;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  JUMPOUT(0x1B1E8BBC0);
}

void sub_1B1E8B988()
{
  if (v0) {
    JUMPOUT(0x1B1E8B994);
  }
  JUMPOUT(0x1B1E8B9D0);
}

void sub_1B1E8B9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    JUMPOUT(0x1B1E8BBCCLL);
  }
  JUMPOUT(0x1B1E8BC08);
}

void sub_1B1E8B9C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58)
{
  uint64_t v59 = *(void *)(v58 - 152);
  *(void *)(v58 - 152) = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1E8BBC0);
}

void sub_1B1E8BA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if (a57) {
    (*(void (**)(uint64_t))(*(void *)a57 + 8))(a57);
  }
  if (a47) {
    JUMPOUT(0x1B1E8BB30);
  }
  JUMPOUT(0x1B1E8BBC0);
}

void sub_1B1E8BA3C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  JUMPOUT(0x1B1E8BA48);
}

void sub_1B1E8BAA4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  JUMPOUT(0x1B1E8BABCLL);
}

void sub_1B1E8BAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~pair((uint64_t)&a47);
  uint64_t v62 = *(void *)(v60 - 144);
  *(void *)(v60 - 144) = 0;
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  kaldi::quasar::Encdec::EmbeddingRunOutput::~EmbeddingRunOutput(&a60);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v60 - 200), v63);
  _Unwind_Resume(a1);
}

void sub_1B1E8BBB4()
{
}

void sub_1B1E8BBBC()
{
  int v1 = *(void **)(v0 - 144);
  if (v1)
  {
    *(void *)(v0 - 136) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1B1E8BC08);
}

void kaldi::quasar::Encdec::prepareInputsUsingCustomEmbedding(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(void ***__return_ptr))(**(void **)a2 + 32))(&v13);
  uint64_t v7 = std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v10, (long long *)(a1 + 1936), (uint64_t *)&v13);
  uint64_t v8 = v13;
  uint64_t v11 = v7;
  char v13 = 0;
  if (v8)
  {
    (*((void (**)(void **))*v8 + 1))(v8);
    uint64_t v7 = v11;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 32) = *(_DWORD *)(a3 + 20);
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 40) = 0;
  *(_WORD *)(a4 + 64) = 0;
  uint64_t v9 = v12;
  *(void *)(a4 + 72) = v10;
  *(void *)(a4 + 80) = v7;
  *(void *)(a4 + 88) = v9;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  char v13 = (void **)&v10;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v13);
}

void sub_1B1E8BD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  char v13 = a12;
  a12 = 0;
  if (v13) {
    (*((void (**)(void **))*v13 + 1))(v13);
  }
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::prepareInputsAndRunEmbeddingPlan(uint64_t a1@<X0>, kaldi::quasar::ComputeEngineItf **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *((void *)&v126 + 1) = *MEMORY[0x1E4F143B8];
  memset(&__p, 0, sizeof(__p));
  if (*(unsigned char *)(a1 + 1510))
  {
    int v7 = *(_DWORD *)(a1 + 812);
    uint64_t v8 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, 1uLL);
    int *v8 = v7 - 1;
    std::vector<int>::pointer end = v8 + 1;
    __p.__begin_ = v8;
    __p.__end_cap_.__value_ = &v8[v9];
    __p.__end_ = v8 + 1;
    int v11 = *(unsigned __int8 *)(a1 + 1510);
  }
  else
  {
    std::vector<int>::pointer end = 0;
    int v11 = 0;
  }
  int v12 = *(unsigned __int8 *)(a1 + 1511);
  int v13 = *(_DWORD *)(a1 + 904) - (v12 + v11);
  if (v13 >= *(_DWORD *)(a3 + 20)) {
    int v13 = *(_DWORD *)(a3 + 20);
  }
  if (v13 >= 1)
  {
    int v14 = 0;
    do
    {
      int v15 = (int)*(float *)(*(void *)(a3 + 8) + 4 * *(_DWORD *)(a3 + 24) * v14);
      if (end >= __p.__end_cap_.__value_)
      {
        std::vector<int>::pointer begin = __p.__begin_;
        uint64_t v17 = end - __p.__begin_;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        int64_t v19 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
        if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v20);
          std::vector<int>::pointer begin = __p.__begin_;
          std::vector<int>::pointer end = __p.__end_;
        }
        else
        {
          uint64_t v21 = 0;
        }
        unint64_t v22 = (int *)&v21[4 * v17];
        *unint64_t v22 = v15;
        uint64_t v23 = v22 + 1;
        while (end != begin)
        {
          int v24 = *--end;
          *--unint64_t v22 = v24;
        }
        __p.__begin_ = v22;
        __p.__end_ = v23;
        __p.__end_cap_.__value_ = (int *)&v21[4 * v20];
        if (begin) {
          operator delete(begin);
        }
        std::vector<int>::pointer end = v23;
      }
      else
      {
        *end++ = v15;
      }
      __p.__end_ = end;
      ++v14;
      int v25 = *(_DWORD *)(a3 + 20);
      int v12 = *(unsigned __int8 *)(a1 + 1511);
      if (*(_DWORD *)(a1 + 904) - (v12 + *(unsigned __int8 *)(a1 + 1510)) < v25) {
        int v25 = *(_DWORD *)(a1 + 904) - (v12 + *(unsigned __int8 *)(a1 + 1510));
      }
    }
    while (v14 < v25);
  }
  if (v12)
  {
    int v26 = *(_DWORD *)(a1 + 816) - 1;
    if (end >= __p.__end_cap_.__value_)
    {
      std::vector<int>::pointer v28 = __p.__begin_;
      uint64_t v29 = end - __p.__begin_;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v31 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
      if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v30) {
        unint64_t v30 = v31 >> 1;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32)
      {
        uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v32);
        std::vector<int>::pointer v28 = __p.__begin_;
        std::vector<int>::pointer end = __p.__end_;
      }
      else
      {
        uint64_t v33 = 0;
      }
      uint64_t v34 = (int *)&v33[4 * v29];
      std::string::size_type v35 = (int *)&v33[4 * v32];
      *uint64_t v34 = v26;
      uint64_t v27 = v34 + 1;
      while (end != v28)
      {
        int v36 = *--end;
        *--uint64_t v34 = v36;
      }
      __p.__begin_ = v34;
      __p.__end_ = v27;
      __p.__end_cap_.__value_ = v35;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      std::string *end = v26;
      uint64_t v27 = end + 1;
    }
    __p.__end_ = v27;
    std::vector<int>::pointer end = v27;
  }
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  uint64_t v37 = (char *)end - (char *)__p.__begin_;
  unint64_t v38 = (unint64_t)((char *)end - (char *)__p.__begin_) >> 2;
  std::string::size_type v39 = *(int **)(a1 + 856);
  unint64_t v40 = *(int **)(a1 + 864);
  if (v39 == v40)
  {
    int v41 = 0;
    int v43 = *(_DWORD *)(a1 + 848);
  }
  else
  {
    int v41 = 0;
    long long v42 = *(int **)(a1 + 856);
    do
    {
      int v43 = *v42;
      if (*v42 >= (int)v38) {
        break;
      }
      ++v41;
      ++v42;
    }
    while (v42 != v40);
  }
  BOOL v44 = v41 == v40 - v39;
  if (*(void *)(a1 + 880) == *(void *)(a1 + 888))
  {
    if (*(char *)(a1 + 935) < 0) {
      std::string::__init_copy_ctor_external(&v116, *(const std::string::value_type **)(a1 + 912), *(void *)(a1 + 920));
    }
    else {
      std::string v116 = *(std::string *)(a1 + 912);
    }
  }
  else
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 912), 95, (uint64_t)&v121);
    uint64_t v45 = *(void *)(a1 + 880) + 24 * (v41 - v44);
    int v46 = *(char *)(v45 + 23);
    if (v46 >= 0) {
      uint64_t v47 = (const std::string::value_type *)(*(void *)(a1 + 880) + 24 * (v41 - v44));
    }
    else {
      uint64_t v47 = *(const std::string::value_type **)v45;
    }
    if (v46 >= 0) {
      std::string::size_type v48 = *(unsigned __int8 *)(v45 + 23);
    }
    else {
      std::string::size_type v48 = *(void *)(v45 + 8);
    }
    uint64_t v49 = std::string::append(&v121, v47, v48);
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a1 + 488)) {
    BOOL v110 = std::__tree<std::string>::__count_unique<std::string>(a1 + 1624, (const void **)&v116.__r_.__value_.__l.__data_) == 0;
  }
  else {
    BOOL v110 = 0;
  }
  v121.__r_.__value_.__r.__words[0] = a1 + 936;
  uint64_t v51 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 496), (const void **)(a1 + 936), (uint64_t)&std::piecewise_construct, (long long **)&v121);
  uint64_t v52 = std::__tree<std::string>::__count_unique<std::string>((uint64_t)(v51 + 7), (const void **)&v116.__r_.__value_.__l.__data_);
  v121.__r_.__value_.__r.__words[0] = a1 + 936;
  float v53 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 496), (const void **)(a1 + 936), (uint64_t)&std::piecewise_construct, (long long **)&v121);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v53 + 7, (const void **)&v116.__r_.__value_.__l.__data_, (uint64_t)&v116);
  if (v43)
  {
    LODWORD(v121.__r_.__value_.__l.__data_) = 0;
    std::vector<float>::resize((uint64_t)&v117, (int)(v37 >> 2), &v121);
    if (v43 >= 1)
    {
      if (v43 < (int)v38) {
        LODWORD(v38) = v43;
      }
      std::vector<float>::resize((uint64_t)&v117, v43, &kaldi::quasar::kSmallLogProb);
      LODWORD(v121.__r_.__value_.__l.__data_) = 0;
      std::vector<int>::resize(&__p, v43, (std::vector<int>::const_reference)&v121);
    }
  }
  if (*(void *)(a1 + 168)) {
    uint64_t v54 = (kaldi::quasar::ComputeEngineItf **)(a1 + 168);
  }
  else {
    uint64_t v54 = a2;
  }
  long long v114 = 0uLL;
  unint64_t v115 = 0;
  if (*(unsigned char *)(a1 + 1513))
  {
    uint64_t v55 = *v54;
    std::vector<int>::pointer v57 = __p.__begin_;
    std::vector<int>::pointer v56 = __p.__end_;
    uint64_t v58 = operator new(0x10uLL);
    v121.__r_.__value_.__l.__size_ = (std::string::size_type)(v58 + 2);
    v121.__r_.__value_.__r.__words[2] = (std::string::size_type)(v58 + 2);
    *uint64_t v58 = (int)(v56 - v57);
    v58[1] = 1;
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    (*(void (**)(std::string *__return_ptr, kaldi::quasar::ComputeEngineItf *, std::string *))(*(void *)v55 + 48))(&v125, v55, &v121);
    uint64_t v59 = (long long *)(a1 + 1744);
    uint64_t v60 = *((void *)&v114 + 1);
    if (*((void *)&v114 + 1) >= v115)
    {
      uint64_t v65 = std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>((uint64_t *)&v114, v59, (uint64_t *)&v125);
      std::string::size_type v66 = v125.__r_.__value_.__r.__words[0];
      *((void *)&v114 + 1) = v65;
      v125.__r_.__value_.__r.__words[0] = 0;
      if (v66) {
        (*(void (**)(std::string::size_type))(*(void *)v66 + 8))(v66);
      }
    }
    else
    {
      if (*(char *)(a1 + 1767) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)&v114 + 1), *(const std::string::value_type **)(a1 + 1744), *(void *)(a1 + 1752));
      }
      else
      {
        long long v61 = *v59;
        *(void *)(*((void *)&v114 + 1) + 16) = *(void *)(a1 + 1760);
        *(_OWORD *)uint64_t v60 = v61;
      }
      *(void *)(v60 + 24) = v125.__r_.__value_.__r.__words[0];
      *((void *)&v114 + 1) = v60 + 32;
      v125.__r_.__value_.__r.__words[0] = 0;
    }
    if (v121.__r_.__value_.__r.__words[0])
    {
      v121.__r_.__value_.__l.__size_ = v121.__r_.__value_.__r.__words[0];
      operator delete(v121.__r_.__value_.__l.__data_);
    }
    (*(void (**)(void))(**(void **)(*((void *)&v114 + 1) - 8) + 80))(*(void *)(*((void *)&v114 + 1) - 8));
  }
  else
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)*v54 + 16))(&v121);
    uint64_t v62 = (long long *)(a1 + 1744);
    uint64_t v63 = *((void *)&v114 + 1);
    if (*((void *)&v114 + 1) >= v115)
    {
      uint64_t v67 = std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>((uint64_t *)&v114, v62, (uint64_t *)&v121);
      std::string::size_type v68 = v121.__r_.__value_.__r.__words[0];
      *((void *)&v114 + 1) = v67;
      v121.__r_.__value_.__r.__words[0] = 0;
      if (v68) {
        (*(void (**)(std::string::size_type))(*(void *)v68 + 8))(v68);
      }
    }
    else
    {
      if (*(char *)(a1 + 1767) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)&v114 + 1), *(const std::string::value_type **)(a1 + 1744), *(void *)(a1 + 1752));
      }
      else
      {
        long long v64 = *v62;
        *(void *)(*((void *)&v114 + 1) + 16) = *(void *)(a1 + 1760);
        *(_OWORD *)uint64_t v63 = v64;
      }
      *(void *)(v63 + 24) = v121.__r_.__value_.__r.__words[0];
      *((void *)&v114 + 1) = v63 + 32;
    }
  }
  if (*(unsigned char *)(a1 + 1516))
  {
    std::vector<int>::vector((std::vector<int> *)&v121, __p.__end_ - __p.__begin_);
    std::string::size_type size = v121.__r_.__value_.__l.__size_;
    uint64_t v69 = (_DWORD *)v121.__r_.__value_.__r.__words[0];
    if (v121.__r_.__value_.__r.__words[0] != v121.__r_.__value_.__l.__size_)
    {
      int v71 = 0;
      do
        *v69++ = v71++;
      while (v69 != (_DWORD *)size);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)*v54 + 16))(&v125);
    std::string::size_type v72 = (long long *)(a1 + 1792);
    uint64_t v73 = *((void *)&v114 + 1);
    if (*((void *)&v114 + 1) >= v115)
    {
      uint64_t v75 = std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>((uint64_t *)&v114, v72, (uint64_t *)&v125);
      std::string::size_type v76 = v125.__r_.__value_.__r.__words[0];
      *((void *)&v114 + 1) = v75;
      v125.__r_.__value_.__r.__words[0] = 0;
      if (v76) {
        (*(void (**)(std::string::size_type))(*(void *)v76 + 8))(v76);
      }
    }
    else
    {
      if (*(char *)(a1 + 1815) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)&v114 + 1), *(const std::string::value_type **)(a1 + 1792), *(void *)(a1 + 1800));
      }
      else
      {
        long long v74 = *v72;
        *(void *)(*((void *)&v114 + 1) + 16) = *(void *)(a1 + 1808);
        *(_OWORD *)uint64_t v73 = v74;
      }
      *(void *)(v73 + 24) = v125.__r_.__value_.__r.__words[0];
      *((void *)&v114 + 1) = v73 + 32;
    }
    if (v121.__r_.__value_.__r.__words[0])
    {
      v121.__r_.__value_.__l.__size_ = v121.__r_.__value_.__r.__words[0];
      operator delete(v121.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a1 + 1508))
  {
    memset(v113, 0, sizeof(v113));
    uint64_t v77 = *(void *)(a1 + 168);
    uint64_t v78 = (_OWORD *)(a1 + 1936);
    if (*(char *)(a1 + 1959) < 0)
    {
      std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)(a1 + 1936), *(void *)(a1 + 1944));
    }
    else
    {
      *(_OWORD *)&v125.__r_.__value_.__l.__data_ = *v78;
      v125.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1952);
    }
    memset(&v121, 0, sizeof(v121));
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v121.__r_.__value_.__l.__size_ = v121.__r_.__value_.__r.__words[0];
    v121.__r_.__value_.__r.__words[2] = v121.__r_.__value_.__r.__words[0] + 24;
    v121.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v121.__r_.__value_.__r.__words[2], (long long *)&v125, &v126, (std::string *)v121.__r_.__value_.__l.__data_);
    memset(v112, 0, sizeof(v112));
    (*(void (**)(uint64_t, long long *, std::string *, void ***, uint64_t **))(*(void *)v77 + 120))(v77, &v114, &v121, v112, v113);
    long long v124 = v112;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
    v112[0] = (void **)&v121;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v112);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v125.__r_.__value_.__l.__data_);
    }
    uint64_t v80 = *((void *)&v114 + 1);
    unint64_t v79 = v114;
    while (v80 != v79)
    {
      v80 -= 32;
      std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)&v115, v80);
    }
    *((void *)&v114 + 1) = v79;
    if (*(_DWORD *)(a1 + 1092))
    {
      if (*(_DWORD *)(a1 + 1088) == *(_DWORD *)(a1 + 1096))
      {
        if (v79 >= v115)
        {
          uint64_t v81 = std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>((uint64_t *)&v114, (long long *)(a1 + 1936), v113[0]);
        }
        else
        {
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__construct_one_at_end[abi:ne180100]<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>((uint64_t)&v114, (long long *)(a1 + 1936), v113[0]);
          uint64_t v81 = v79 + 32;
        }
        *((void *)&v114 + 1) = v81;
        goto LABEL_137;
      }
      kaldi::quasar::ComputeEngineItf::CreateCopyFloat(*a2, *(const kaldi::quasar::ComputeEngineBufferItf **)v113[0], &v121);
      uint64_t v86 = *((void *)&v114 + 1);
      if (*((void *)&v114 + 1) < v115)
      {
        if (*(char *)(a1 + 1959) < 0)
        {
LABEL_126:
          std::string::__init_copy_ctor_external(*((std::string **)&v114 + 1), *(const std::string::value_type **)(a1 + 1936), *(void *)(a1 + 1944));
LABEL_133:
          *(void *)(v86 + 24) = v121.__r_.__value_.__r.__words[0];
          *((void *)&v114 + 1) = v86 + 32;
LABEL_137:
          v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
          goto LABEL_138;
        }
LABEL_132:
        long long v87 = *v78;
        *(void *)(v86 + 16) = *(void *)(a1 + 1952);
        *(_OWORD *)uint64_t v86 = v87;
        goto LABEL_133;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 488))
      {
        if (!v110)
        {
          uint64_t v88 = *(void *)(a1 + 152);
          uint64_t v89 = *v113[0];
          v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
          long long v90 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1624), (const void **)&v116.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v121);
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v88 + 72))(v88, v89, *(void *)(*(void *)v90[7] + 24));
          goto LABEL_137;
        }
        uint64_t v82 = operator new(0x30uLL);
        v82[1] = 0;
        v82[2] = 0;
        v82[3] = 0;
        void *v82 = &unk_1F0A62BE0;
        v82[4] = 0;
        v82[5] = 0;
        v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
        uint64_t v83 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1624), (const void **)&v116.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v121);
        int v84 = (std::__shared_weak_count *)v83[8];
        v83[7] = (uint64_t)(v82 + 3);
        v83[8] = (uint64_t)v82;
        if (v84) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v84);
        }
        v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
        clockid_t v85 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1624), (const void **)&v116.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v121)[7];
        (*(void (**)(void ***__return_ptr))(*(void *)*a2 + 80))(v112);
        if (*(char *)(a1 + 1959) < 0)
        {
          std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)(a1 + 1936), *(void *)(a1 + 1944));
        }
        else
        {
          *(_OWORD *)&v125.__r_.__value_.__l.__data_ = *v78;
          v125.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1952);
        }
        long long v94 = v112[0];
        v112[0] = 0;
        *(void *)&long long v126 = v94;
        unint64_t v95 = v85[2];
        unint64_t v96 = v85[1];
        if (v96 >= v95)
        {
          uint64_t v100 = (uint64_t)(v96 - *v85) >> 5;
          unint64_t v101 = v100 + 1;
          if ((unint64_t)(v100 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v102 = v95 - *v85;
          if (v102 >> 4 > v101) {
            unint64_t v101 = v102 >> 4;
          }
          if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v103 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v103 = v101;
          }
          uint64_t v123 = v85 + 2;
          BOOL v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(v85 + 2), v103);
          std::string::size_type v105 = (std::string::size_type)&v104[32 * v100];
          v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
          v121.__r_.__value_.__l.__size_ = v105;
          uint64_t v122 = &v104[32 * v106];
          long long v107 = *(_OWORD *)&v125.__r_.__value_.__l.__data_;
          *(void *)(v105 + 16) = *((void *)&v125.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v105 = v107;
          memset(&v125, 0, sizeof(v125));
          uint64_t v108 = v126;
          *(void *)&long long v126 = 0;
          *(void *)(v105 + 24) = v108;
          v121.__r_.__value_.__r.__words[2] = v105 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v85, &v121);
          uint64_t v99 = v85[1];
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v121.__r_.__value_.__l.__data_);
        }
        else
        {
          long long v97 = *(_OWORD *)&v125.__r_.__value_.__l.__data_;
          *(void *)(v96 + 16) = *((void *)&v125.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v96 = v97;
          uint64_t v98 = v126;
          *(void *)&long long v126 = 0;
          memset(&v125, 0, sizeof(v125));
          *(void *)(v96 + 24) = v98;
          uint64_t v99 = v96 + 32;
          v85[1] = v96 + 32;
        }
        v85[1] = v99;
        uint64_t v109 = v126;
        *(void *)&long long v126 = 0;
        if (v109) {
          (*(void (**)(uint64_t))(*(void *)v109 + 8))(v109);
        }
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v125.__r_.__value_.__l.__data_);
        }
        BOOL v92 = v112[0];
        v112[0] = 0;
        if (!v92) {
          goto LABEL_137;
        }
LABEL_136:
        (*((void (**)(void **))*v92 + 1))(v92);
        goto LABEL_137;
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)*a2 + 80))(&v121);
      uint64_t v86 = *((void *)&v114 + 1);
      if (*((void *)&v114 + 1) < v115)
      {
        if (*(char *)(a1 + 1959) < 0) {
          goto LABEL_126;
        }
        goto LABEL_132;
      }
    }
    uint64_t v91 = std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>((uint64_t *)&v114, (long long *)(a1 + 1936), (uint64_t *)&v121);
    BOOL v92 = (void **)v121.__r_.__value_.__r.__words[0];
    *((void *)&v114 + 1) = v91;
    v121.__r_.__value_.__r.__words[0] = 0;
    if (!v92) {
      goto LABEL_137;
    }
    goto LABEL_136;
  }
LABEL_138:
  *(_DWORD *)a4 = v43;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a4 + 8), v117, (uint64_t)v118, (v118 - (unsigned char *)v117) >> 2);
  *(_DWORD *)(a4 + 32) = v38;
  uint64_t v93 = (std::string *)(a4 + 40);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v93, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v93->__r_.__value_.__l.__data_ = *(_OWORD *)&v116.__r_.__value_.__l.__data_;
    *(void *)(a4 + 56) = *((void *)&v116.__r_.__value_.__l + 2);
  }
  *(unsigned char *)(a4 + 64) = v110;
  *(unsigned char *)(a4 + 65) = v52 == 0;
  *(_OWORD *)(a4 + 72) = v114;
  *(void *)(a4 + 88) = v115;
  long long v114 = 0uLL;
  unint64_t v115 = 0;
  v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v116.__r_.__value_.__l.__data_);
  }
  if (v117)
  {
    uint64_t v118 = v117;
    operator delete(v117);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1B1E8CC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  int v41 = a34;
  a34 = 0;
  if (v41) {
    (*(void (**)(void *))(*(void *)v41 + 8))(v41);
  }
  *(void *)(v39 - 128) = &a14;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 128));
  *(void *)(v39 - 128) = &a17;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 128));
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void kaldi::quasar::Encdec::EmbeddingRunOutput::~EmbeddingRunOutput(void **this)
{
  uint64_t v3 = this + 9;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  uint64_t v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

void kaldi::quasar::Encdec::EncFeedforward()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Model does not support stream-decoding");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::Encdec::Feedforward(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v295 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v273 = (double *)(a1 + 2256);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v291, (double *)(a1 + 2256), a1 + 2352, (long long *)&__p);
  if (SHIBYTE(__src[1]) < 0) {
    operator delete(__p);
  }
  uint64_t v274 = *(int *)(a2 + 20);
  if (*(unsigned char *)(a1 + 1509)) {
    uint64_t v6 = (uint64_t)(*(void *)(*(void *)(a1 + 2240) + 8) - **(void **)(a1 + 2240)) >> 2;
  }
  else {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 560) + 120))(*(void *)(a1 + 560)) - 1;
  }
  kaldi::CuMatrix<float>::Resize(a3, v274, v6, 0, 0);
  uint64_t v8 = v274;
  if (*(_DWORD *)(a1 + 836) == -1)
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Beam batched, batch size: ", 26);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    v272 = a3;
    if (*(unsigned char *)(a1 + 1508))
    {
      uint64_t v55 = *(int *)(a1 + 2116);
      uint64_t v56 = *(void *)(a1 + 1576);
      uint64_t v57 = *(void *)(a1 + 168);
      uint64_t v58 = operator new(8uLL);
      std::vector<int> __p = v58;
      *uint64_t v58 = v274;
      __src[0] = v58 + 1;
      __src[1] = v58 + 1;
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v57 + 56))(&v284, v57, &__p);
      uint64_t v59 = (void *)(v56 + 32 * v55 + 24);
      uint64_t v60 = v284;
      uint64_t v284 = 0;
      uint64_t v61 = *v59;
      *uint64_t v59 = v60;
      if (v61) {
        (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
      }
      uint64_t v62 = v284;
      uint64_t v284 = 0;
      if (v62) {
        (*(void (**)(void *))(*(void *)v62 + 8))(v62);
      }
      if (__p)
      {
        __src[0] = __p;
        operator delete(__p);
      }
      if ((int)v274 >= 1)
      {
        uint64_t v63 = 0;
        do
        {
          (*(void (**)(void, uint64_t, float))(*(void *)*v59 + 104))(*v59, v63, *(float *)(*(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v63));
          uint64_t v63 = (v63 + 1);
        }
        while (v274 != v63);
      }
      uint64_t v64 = *(int *)(a1 + 2120);
      uint64_t v65 = *(void *)(a1 + 1576);
      uint64_t v66 = *(void *)(a1 + 168);
      uint64_t v67 = operator new(8uLL);
      std::vector<int> __p = v67;
      *uint64_t v67 = v274;
      __src[0] = v67 + 1;
      __src[1] = v67 + 1;
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v66 + 56))(&v284, v66, &__p);
      std::string::size_type v68 = (uint64_t *)(v65 + 32 * v64 + 24);
      uint64_t v69 = v284;
      uint64_t v284 = 0;
      uint64_t v70 = *v68;
      *std::string::size_type v68 = (uint64_t)v69;
      if (v70) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
      int v71 = v284;
      uint64_t v284 = 0;
      if (v71) {
        (*(void (**)(void *))(*(void *)v71 + 8))(v71);
      }
      if (__p)
      {
        __src[0] = __p;
        operator delete(__p);
      }
      if ((int)v274 >= 1)
      {
        uint64_t v72 = 0;
        uint64_t v73 = 8;
        do
        {
          uint64_t v74 = *v68;
          uint64_t v75 = *(void *)(*(void *)(*(void *)(a1 + 2432) + v73) - 16);
          (*(void (**)(uint64_t, void))(*(void *)v75 + 112))(v75, 0);
          if (*(unsigned char *)(a1 + 1518)) {
            float v77 = 0.0;
          }
          else {
            float v77 = 1.0;
          }
          (*(void (**)(uint64_t, uint64_t, float))(*(void *)v74 + 104))(v74, v72++, v76 - v77);
          v73 += 24;
        }
        while (v274 != v72);
      }
      uint64_t v284 = 0;
      long long v285 = 0uLL;
      if (kaldi::g_kaldi_verbose_level > 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Embedding Inputs:", 17);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
        uint64_t v78 = *(void *)(a1 + 1576);
        uint64_t v79 = *(void *)(a1 + 1584);
        while (v78 != v79)
        {
          if (*(char *)(v78 + 23) < 0)
          {
            uint64_t v81 = *(void *)(v78 + 8);
            if (v81 == 8)
            {
              uint64_t v80 = *(void **)v78;
              goto LABEL_115;
            }
            if (v81 != 18
              || (**(void **)v78 == 0x74756F5F76657270
                ? (BOOL v82 = *(void *)(*(void *)v78 + 8) == 0x656B6F745F747570)
                : (BOOL v82 = 0),
                  v82 ? (BOOL v83 = *(unsigned __int16 *)(*(void *)v78 + 16) == 29550) : (BOOL v83 = 0),
                  !v83))
            {
LABEL_116:
              if (kaldi::g_kaldi_verbose_level >= 3)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
                int v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
                int v85 = *(char *)(v78 + 23);
                if (v85 >= 0) {
                  uint64_t v86 = v78;
                }
                else {
                  uint64_t v86 = *(void *)v78;
                }
                if (v85 >= 0) {
                  uint64_t v87 = *(unsigned __int8 *)(v78 + 23);
                }
                else {
                  uint64_t v87 = *(void *)(v78 + 8);
                }
                uint64_t v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, v86, v87);
                uint64_t v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)": ", 2);
                kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v78 + 24), &v292);
                if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v90 = &v292;
                }
                else {
                  long long v90 = (std::string *)v292.__r_.__value_.__r.__words[0];
                }
                if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v292.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v292.__r_.__value_.__l.__size_;
                }
                BOOL v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, size);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)" [ ", 3);
                (*(void (**)(void, void))(**(void **)(v78 + 24) + 112))(*(void *)(v78 + 24), 0);
                uint64_t v93 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)" ", 1);
                (*(void (**)(void, uint64_t))(**(void **)(v78 + 24) + 112))(*(void *)(v78 + 24), 1);
                long long v94 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)" ", 1);
                (*(void (**)(void, uint64_t))(**(void **)(v78 + 24) + 112))(*(void *)(v78 + 24), 2);
                unint64_t v95 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)" ...", 4);
LABEL_152:
                if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v292.__r_.__value_.__l.__data_);
                }
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
                goto LABEL_155;
              }
              goto LABEL_155;
            }
          }
          else
          {
            if (*(unsigned char *)(v78 + 23) != 18)
            {
              uint64_t v80 = (void *)v78;
              if (*(unsigned char *)(v78 + 23) != 8) {
                goto LABEL_116;
              }
LABEL_115:
              if (*v80 != 0x6E6F697469736F70) {
                goto LABEL_116;
              }
              goto LABEL_138;
            }
            if (*(void *)v78 != 0x74756F5F76657270
              || *(void *)(v78 + 8) != 0x656B6F745F747570
              || *(_WORD *)(v78 + 16) != 29550)
            {
              goto LABEL_116;
            }
          }
LABEL_138:
          if (kaldi::g_kaldi_verbose_level >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
            uint64_t v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
            int v99 = *(char *)(v78 + 23);
            if (v99 >= 0) {
              uint64_t v100 = v78;
            }
            else {
              uint64_t v100 = *(void *)v78;
            }
            if (v99 >= 0) {
              uint64_t v101 = *(unsigned __int8 *)(v78 + 23);
            }
            else {
              uint64_t v101 = *(void *)(v78 + 8);
            }
            uint64_t v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, v100, v101);
            unint64_t v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)": ", 2);
            kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v78 + 24), &v292);
            if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v104 = &v292;
            }
            else {
              BOOL v104 = (std::string *)v292.__r_.__value_.__r.__words[0];
            }
            if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v105 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v105 = v292.__r_.__value_.__l.__size_;
            }
            uint64_t v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)v104, v105);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)" [ ", 3);
            (*(void (**)(void, void))(**(void **)(v78 + 24) + 112))(*(void *)(v78 + 24), 0);
            long long v107 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)" ...", 4);
            goto LABEL_152;
          }
LABEL_155:
          v78 += 32;
        }
      }
      uint64_t v108 = *(void *)(a1 + 168);
      if (*(char *)(a1 + 1959) < 0) {
        std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)(a1 + 1936), *(void *)(a1 + 1944));
      }
      else {
        std::string v292 = *(std::string *)(a1 + 1936);
      }
      std::vector<int> __p = 0;
      __src[0] = 0;
      __src[1] = 0;
      std::vector<int> __p = operator new(0x18uLL);
      __src[0] = __p;
      __src[1] = (char *)__p + 24;
      __src[0] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__src[1], (long long *)&v292, &v293, (std::string *)__p);
      std::__split_buffer<std::string>::pointer p_p = 0;
      v278 = 0;
      uint64_t v279 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, void ***, void **))(*(void *)v108 + 120))(v108, a1 + 1576, &__p, &p_p, &v284);
      v281[0] = (void **)&p_p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v281);
      std::__split_buffer<std::string>::pointer p_p = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
      if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v292.__r_.__value_.__l.__data_);
      }
      if (kaldi::g_kaldi_verbose_level <= 2)
      {
        uint64_t v118 = (uint64_t *)v284;
      }
      else
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Embedding Outputs:", 18);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
        uint64_t v118 = (uint64_t *)v284;
        uint64_t v119 = v285;
        if ((void *)v285 == v284)
        {
          uint64_t v118 = (uint64_t *)v285;
        }
        else
        {
          unint64_t v120 = 0;
          int v121 = kaldi::g_kaldi_verbose_level;
          do
          {
            if (v121 >= 3)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
              uint64_t v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
              int v123 = *(char *)(a1 + 1959);
              if (v123 >= 0) {
                uint64_t v124 = a1 + 1936;
              }
              else {
                uint64_t v124 = *(void *)(a1 + 1936);
              }
              if (v123 >= 0) {
                uint64_t v125 = *(unsigned __int8 *)(a1 + 1959);
              }
              else {
                uint64_t v125 = *(void *)(a1 + 1944);
              }
              long long v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, v124, v125);
              uint64_t v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)": ", 2);
              kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*((kaldi::quasar::ComputeEngineBufferItf **)v284 + v120), &v292);
              if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v128 = &v292;
              }
              else {
                uint64_t v128 = (std::string *)v292.__r_.__value_.__r.__words[0];
              }
              if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v129 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v129 = v292.__r_.__value_.__l.__size_;
              }
              unint64_t v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)v128, v129);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)" [ ", 3);
              (*(void (**)(void, void))(**((void **)v284 + v120) + 112))(*((void *)v284 + v120), 0);
              unint64_t v131 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)" ", 1);
              (*(void (**)(void, uint64_t))(**((void **)v284 + v120) + 112))(*((void *)v284 + v120), 1);
              unint64_t v132 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)" ", 1);
              (*(void (**)(void, uint64_t))(**((void **)v284 + v120) + 112))(*((void *)v284 + v120), 2);
              long long v133 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)" ...", 4);
              if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v292.__r_.__value_.__l.__data_);
              }
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
              int v121 = kaldi::g_kaldi_verbose_level;
              uint64_t v118 = (uint64_t *)v284;
              uint64_t v119 = v285;
            }
            ++v120;
          }
          while (v120 < (v119 - (uint64_t)v118) >> 3);
        }
      }
      uint64_t v134 = *(void *)(a1 + 1552);
      uint64_t v135 = *v118;
      *uint64_t v118 = 0;
      uint64_t v136 = *(void *)(v134 + 24);
      *(void *)(v134 + 24) = v135;
      if (v136) {
        (*(void (**)(uint64_t))(*(void *)v136 + 8))(v136);
      }
      std::vector<int> __p = &v284;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    else
    {
      uint64_t v109 = *(int *)(a1 + 2132);
      uint64_t v110 = *(void *)(a1 + 1552);
      uint64_t v111 = *(void *)(a1 + 184);
      long long v112 = operator new(8uLL);
      std::vector<int> __p = v112;
      void *v112 = v274;
      __src[0] = v112 + 1;
      __src[1] = v112 + 1;
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v111 + 56))(&v284, v111, &__p);
      uint64_t v113 = (void *)(v110 + 32 * v109 + 24);
      long long v114 = v284;
      uint64_t v284 = 0;
      uint64_t v115 = *v113;
      *uint64_t v113 = v114;
      if (v115) {
        (*(void (**)(uint64_t))(*(void *)v115 + 8))(v115);
      }
      std::string v116 = v284;
      uint64_t v284 = 0;
      if (v116) {
        (*(void (**)(void *))(*(void *)v116 + 8))(v116);
      }
      if (__p)
      {
        __src[0] = __p;
        operator delete(__p);
      }
      if ((int)v274 >= 1)
      {
        uint64_t v117 = 0;
        do
        {
          (*(void (**)(void, uint64_t, float))(*(void *)*v113 + 104))(*v113, v117, *(float *)(*(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v117));
          uint64_t v117 = (v117 + 1);
        }
        while (v274 != v117);
      }
    }
    if (*(void *)(a1 + 2088) != *(void *)(a1 + 2080))
    {
      unint64_t v137 = 0;
      do
      {
        uint64_t v138 = *(int *)(a1 + 2112);
        uint64_t v139 = *(void *)(a1 + 1552);
        uint64_t v140 = *(void *)(a1 + 184);
        uint64_t v141 = *(int *)(a1 + 2456);
        std::vector<std::wstring> v142 = operator new(0x18uLL);
        __src[0] = v142 + 3;
        __src[1] = v142 + 3;
        *std::vector<std::wstring> v142 = 1;
        v142[1] = v274;
        v142[2] = v141;
        std::vector<int> __p = v142;
        (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v140 + 56))(&v284, v140, &__p);
        uint64_t v143 = (void *)(v139 + 32 * (v138 + (int)v137) + 24);
        long long v144 = v284;
        uint64_t v284 = 0;
        uint64_t v145 = *v143;
        *uint64_t v143 = v144;
        if (v145) {
          (*(void (**)(uint64_t))(*(void *)v145 + 8))(v145);
        }
        std::string v146 = v284;
        uint64_t v284 = 0;
        if (v146) {
          (*(void (**)(void *))(*(void *)v146 + 8))(v146);
        }
        if (__p)
        {
          __src[0] = __p;
          operator delete(__p);
        }
        if ((int)v274 >= 1)
        {
          uint64_t v147 = 0;
          int v148 = 0;
          do
          {
            (*(void (**)(void, void, void, void, void))(*(void *)*v143 + 72))(*v143, *(void *)(*(void *)(*(void *)(a1 + 2432) + v147) + 16 * v137), 0, *(unsigned int *)(a1 + 2456), (*(_DWORD *)(a1 + 2456) * v148++));
            v147 += 24;
          }
          while (24 * v274 != v147);
        }
        ++v137;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 2088) - *(void *)(a1 + 2080)) >> 3) > v137);
    }
    if (!*(unsigned char *)(a1 + 1515)) {
      goto LABEL_234;
    }
    uint64_t v149 = *(int *)(a1 + 2136);
    uint64_t v150 = *(void *)(a1 + 1552);
    uint64_t v151 = *(void *)(a1 + 184);
    unint64_t v152 = operator new(8uLL);
    std::vector<int> __p = v152;
    *unint64_t v152 = v274;
    __src[0] = v152 + 1;
    __src[1] = v152 + 1;
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v151 + 56))(&v284, v151, &__p);
    uint64_t v153 = (uint64_t *)(v150 + 32 * v149 + 24);
    unint64_t v154 = v284;
    uint64_t v284 = 0;
    uint64_t v155 = *v153;
    *uint64_t v153 = (uint64_t)v154;
    if (v155) {
      (*(void (**)(uint64_t))(*(void *)v155 + 8))(v155);
    }
    uint64_t v156 = v284;
    uint64_t v284 = 0;
    if (v156) {
      (*(void (**)(void *))(*(void *)v156 + 8))(v156);
    }
    if (__p)
    {
      __src[0] = __p;
      operator delete(__p);
    }
    if (*(char *)(a1 + 1887) < 0)
    {
      if (!*(void *)(a1 + 1872)) {
        goto LABEL_226;
      }
    }
    else if (!*(unsigned char *)(a1 + 1887))
    {
      goto LABEL_226;
    }
    uint64_t v157 = *(void *)(a1 + 184);
    v158 = operator new(8uLL);
    std::vector<int> __p = v158;
    void *v158 = v274;
    __src[0] = v158 + 1;
    __src[1] = v158 + 1;
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v157 + 56))(&v284, v157, &__p);
    uint64_t v159 = *(void *)(a1 + 1552) + 32 * *(int *)(a1 + 2144);
    long long v160 = v284;
    uint64_t v284 = 0;
    uint64_t v161 = *(void *)(v159 + 24);
    *(void *)(v159 + 24) = v160;
    if (v161) {
      (*(void (**)(uint64_t))(*(void *)v161 + 8))(v161);
    }
    unint64_t v162 = v284;
    uint64_t v284 = 0;
    if (v162) {
      (*(void (**)(void *))(*(void *)v162 + 8))(v162);
    }
    if (__p)
    {
      __src[0] = __p;
      operator delete(__p);
    }
LABEL_226:
    if ((int)v274 >= 1)
    {
      uint64_t v163 = 0;
      uint64_t v164 = 8;
      while (1)
      {
        uint64_t v165 = *v153;
        uint64_t v166 = *(void *)(*(void *)(*(void *)(a1 + 2432) + v164) - 16);
        (*(void (**)(uint64_t, void))(*(void *)v166 + 112))(v166, 0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v165 + 104))(v165, v163);
        if ((*(char *)(a1 + 1887) & 0x80000000) == 0) {
          break;
        }
        if (*(void *)(a1 + 1872)) {
          goto LABEL_232;
        }
LABEL_233:
        ++v163;
        v164 += 24;
        if (v274 == v163) {
          goto LABEL_234;
        }
      }
      if (!*(unsigned char *)(a1 + 1887)) {
        goto LABEL_233;
      }
LABEL_232:
      uint64_t v167 = *(void *)(*(void *)(a1 + 1552) + 32 * *(int *)(a1 + 2136) + 24);
      float v168 = 1.0 / ((*(float (**)(uint64_t, uint64_t))(*(void *)v167 + 112))(v167, v163) + 1.0);
      uint64_t v169 = *(void *)(*(void *)(a1 + 1552) + 32 * *(int *)(a1 + 2144) + 24);
      (*(void (**)(uint64_t, uint64_t, float))(*(void *)v169 + 104))(v169, v163, v168);
      goto LABEL_233;
    }
LABEL_234:
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&v284, v273, a1 + 2360, (long long *)&__p);
    if (SHIBYTE(__src[1]) < 0) {
      operator delete(__p);
    }
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Inputs:", 7);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      uint64_t v170 = *(void *)(a1 + 1552);
      uint64_t v171 = *(void *)(a1 + 1560);
      while (v170 != v171)
      {
        if (*(char *)(v170 + 23) < 0)
        {
          uint64_t v173 = *(void *)(v170 + 8);
          if (v173 == 8)
          {
            uint64_t v172 = *(void **)v170;
            goto LABEL_253;
          }
          if (v173 != 18
            || (**(void **)v170 == 0x74756F5F76657270
              ? (BOOL v174 = *(void *)(*(void *)v170 + 8) == 0x656B6F745F747570)
              : (BOOL v174 = 0),
                v174 ? (BOOL v175 = *(unsigned __int16 *)(*(void *)v170 + 16) == 29550) : (BOOL v175 = 0),
                !v175))
          {
LABEL_254:
            if (kaldi::g_kaldi_verbose_level >= 3)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
              unint64_t v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
              int v177 = *(char *)(v170 + 23);
              if (v177 >= 0) {
                uint64_t v178 = v170;
              }
              else {
                uint64_t v178 = *(void *)v170;
              }
              if (v177 >= 0) {
                uint64_t v179 = *(unsigned __int8 *)(v170 + 23);
              }
              else {
                uint64_t v179 = *(void *)(v170 + 8);
              }
              uint64_t v180 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, v178, v179);
              unint64_t v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)": ", 2);
              kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v170 + 24), &v292);
              if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v182 = &v292;
              }
              else {
                uint64_t v182 = (std::string *)v292.__r_.__value_.__r.__words[0];
              }
              if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v183 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v183 = v292.__r_.__value_.__l.__size_;
              }
              uint64_t v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)v182, v183);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)" [ ", 3);
              (*(void (**)(void, void))(**(void **)(v170 + 24) + 112))(*(void *)(v170 + 24), 0);
              uint64_t v185 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)" ", 1);
              (*(void (**)(void, uint64_t))(**(void **)(v170 + 24) + 112))(*(void *)(v170 + 24), 1);
              uint64_t v186 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)" ", 1);
              (*(void (**)(void, uint64_t))(**(void **)(v170 + 24) + 112))(*(void *)(v170 + 24), 2);
              long long v187 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)" ...", 4);
LABEL_290:
              if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v292.__r_.__value_.__l.__data_);
              }
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
              goto LABEL_293;
            }
            goto LABEL_293;
          }
        }
        else
        {
          if (*(unsigned char *)(v170 + 23) != 18)
          {
            uint64_t v172 = (void *)v170;
            if (*(unsigned char *)(v170 + 23) != 8) {
              goto LABEL_254;
            }
LABEL_253:
            if (*v172 != 0x6E6F697469736F70) {
              goto LABEL_254;
            }
            goto LABEL_276;
          }
          if (*(void *)v170 != 0x74756F5F76657270
            || *(void *)(v170 + 8) != 0x656B6F745F747570
            || *(_WORD *)(v170 + 16) != 29550)
          {
            goto LABEL_254;
          }
        }
LABEL_276:
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
          v190 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
          int v191 = *(char *)(v170 + 23);
          if (v191 >= 0) {
            uint64_t v192 = v170;
          }
          else {
            uint64_t v192 = *(void *)v170;
          }
          if (v191 >= 0) {
            uint64_t v193 = *(unsigned __int8 *)(v170 + 23);
          }
          else {
            uint64_t v193 = *(void *)(v170 + 8);
          }
          unint64_t v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, v192, v193);
          unint64_t v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)": ", 2);
          kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v170 + 24), &v292);
          if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v196 = &v292;
          }
          else {
            long long v196 = (std::string *)v292.__r_.__value_.__r.__words[0];
          }
          if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v197 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v197 = v292.__r_.__value_.__l.__size_;
          }
          unint64_t v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)v196, v197);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)" [ ", 3);
          (*(void (**)(void, void))(**(void **)(v170 + 24) + 112))(*(void *)(v170 + 24), 0);
          uint64_t v199 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)" ...", 4);
          goto LABEL_290;
        }
LABEL_293:
        v170 += 32;
      }
    }
    uint64_t v200 = *(void *)(a1 + 184);
    std::vector<int> __p = 0;
    __src[0] = 0;
    __src[1] = 0;
    unint64_t v201 = (void *)(a1 + 1600);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(void *)v200 + 120))(v200, a1 + 1552, a1 + 2032, &__p, a1 + 1600);
    v292.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v292);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Outputs:", 8);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      uint64_t v203 = *(void *)(a1 + 1608);
      uint64_t v204 = *(void *)(a1 + 1600);
      if (v203 != v204)
      {
        uint64_t v205 = 0;
        unint64_t v206 = 0;
        int v207 = kaldi::g_kaldi_verbose_level;
        do
        {
          if (v207 >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
            v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
            uint64_t v209 = *(void *)(a1 + 2032) + v205;
            int v210 = *(char *)(v209 + 23);
            if (v210 >= 0) {
              uint64_t v211 = *(void *)(a1 + 2032) + v205;
            }
            else {
              uint64_t v211 = *(void *)v209;
            }
            if (v210 >= 0) {
              uint64_t v212 = *(unsigned __int8 *)(v209 + 23);
            }
            else {
              uint64_t v212 = *(void *)(v209 + 8);
            }
            uint64_t v213 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, v211, v212);
            v214 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v213, (uint64_t)": ", 2);
            kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(*v201 + 8 * v206), &v292);
            if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v215 = &v292;
            }
            else {
              unint64_t v215 = (std::string *)v292.__r_.__value_.__r.__words[0];
            }
            if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v216 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v216 = v292.__r_.__value_.__l.__size_;
            }
            long long v217 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)v215, v216);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, (uint64_t)" [ ", 3);
            (*(void (**)(void, void))(**(void **)(*v201 + 8 * v206) + 112))(*(void *)(*v201 + 8 * v206), 0);
            v218 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218, (uint64_t)" ", 1);
            (*(void (**)(void, uint64_t))(**(void **)(*v201 + 8 * v206) + 112))(*(void *)(*v201 + 8 * v206), 1);
            unint64_t v219 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)" ", 1);
            (*(void (**)(void, uint64_t))(**(void **)(*v201 + 8 * v206) + 112))(*(void *)(*v201 + 8 * v206), 2);
            uint64_t v220 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)" ...", 4);
            if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v292.__r_.__value_.__l.__data_);
            }
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            int v207 = kaldi::g_kaldi_verbose_level;
            uint64_t v203 = *(void *)(a1 + 1608);
            uint64_t v204 = *(void *)(a1 + 1600);
          }
          ++v206;
          v205 += 24;
        }
        while (v206 < (v203 - v204) >> 3);
      }
    }
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&v284, v202);
    uint64_t v8 = v274;
    if (*(void *)(a1 + 2088) != *(void *)(a1 + 2080))
    {
      unint64_t v221 = 0;
      int64x2_t v276 = vdupq_n_s64(1uLL);
      do
      {
        int v222 = 0;
        uint64_t v223 = *(void *)(a1 + 1600);
        uint64_t v224 = *(int *)(a1 + 2108) + (uint64_t)(int)v221;
        uint64_t v284 = 0;
        long long v285 = 0uLL;
        while ((v274 & ~((int)v274 >> 31)) != v222)
        {
          uint64_t v225 = *(void *)(a1 + 184);
          uint64_t v226 = *(int *)(a1 + 2456);
          long long v227 = (int64x2_t *)operator new(0x18uLL);
          v292.__r_.__value_.__l.__size_ = (std::string::size_type)&v227[1].u64[1];
          v292.__r_.__value_.__r.__words[2] = (std::string::size_type)&v227[1].u64[1];
          *long long v227 = v276;
          v227[1].i64[0] = v226;
          v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v227;
          (*(void (**)(void ***__return_ptr, uint64_t, std::string *))(*(void *)v225 + 56))(&p_p, v225, &v292);
          uint64_t v228 = v285;
          if ((unint64_t)v285 >= *((void *)&v285 + 1))
          {
            uint64_t v231 = (uint64_t)(v285 - (void)v284) >> 3;
            if ((unint64_t)(v231 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v232 = (uint64_t)(*((void *)&v285 + 1) - (void)v284) >> 2;
            if (v232 <= v231 + 1) {
              unint64_t v232 = v231 + 1;
            }
            if (*((void *)&v285 + 1) - (void)v284 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v233 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v233 = v232;
            }
            __src[3] = (char *)&v285 + 8;
            if (v233) {
              long long v234 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v285 + 8, v233);
            }
            else {
              long long v234 = 0;
            }
            std::string v235 = (void ***)&v234[8 * v231];
            std::vector<int> __p = v234;
            __src[0] = v235;
            __src[2] = &v234[8 * v233];
            unint64_t v236 = p_p;
            std::__split_buffer<std::string>::pointer p_p = 0;
            *std::string v235 = v236;
            __src[1] = v235 + 1;
            std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer((uint64_t *)&v284, &__p);
            uint64_t v230 = v285;
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&__p);
          }
          else
          {
            std::string v229 = p_p;
            std::__split_buffer<std::string>::pointer p_p = 0;
            *(void *)long long v285 = v229;
            uint64_t v230 = v228 + 8;
          }
          *(void *)&long long v285 = v230;
          uint64_t v237 = p_p;
          std::__split_buffer<std::string>::pointer p_p = 0;
          if (v237) {
            (*((void (**)(void **))*v237 + 1))(v237);
          }
          if (v292.__r_.__value_.__r.__words[0])
          {
            v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
            operator delete(v292.__r_.__value_.__l.__data_);
          }
          int v238 = *(_DWORD *)(a1 + 2456);
          uint64_t v239 = (v238 * v222++);
          (*(void (**)(void, void, uint64_t, void, void))(**(void **)(v285 - 8) + 72))(*(void *)(v285 - 8), *(void *)(v223 + 8 * v224), v239, (v238 * v222), 0);
        }
        uint64_t v8 = v274;
        if ((int)v274 >= 1)
        {
          uint64_t v240 = 0;
          do
          {
            std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>((void *)(*(void *)(*(void *)(a1 + 2432) + 24 * v240) + 16 * v221), (uint64_t *)v284 + v240);
            ++v240;
          }
          while (v240 != v274);
        }
        std::vector<int> __p = &v284;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        ++v221;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 2088) - *(void *)(a1 + 2080)) >> 3) > v221);
    }
    if (!*(unsigned char *)(a1 + 1506) && !*(unsigned char *)(a1 + 1507))
    {
      uint64_t v269 = *(void *)(*(void *)(a1 + 1600) + 8 * *(int *)(a1 + 2156));
      (*(void (**)(uint64_t, int32x2_t *))(*(void *)v269 + 32))(v269, v272);
LABEL_348:
      if (!*(unsigned char *)(a1 + 2164))
      {
LABEL_358:
        if (*(unsigned char *)(a1 + 1515) && (int)v8 >= 1)
        {
          uint64_t v257 = 0;
          do
          {
            uint64_t v258 = *(void *)(*(void *)(a1 + 2432) + v257 + 8);
            uint64_t v260 = *(void *)(v258 - 16);
            unint64_t v259 = (uint64_t *)(v258 - 16);
            (*(void (**)(void **__return_ptr))(*(void *)v260 + 16))(&__p);
            std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>(v259, (uint64_t *)&__p);
            long long v261 = __p;
            std::vector<int> __p = 0;
            if (v261) {
              (*(void (**)(void *))(*(void *)v261 + 8))(v261);
            }
            uint64_t v262 = *v259;
            float v263 = (*(float (**)(uint64_t, void))(*(void *)v262 + 112))(v262, 0);
            (*(void (**)(uint64_t, void, float))(*(void *)v262 + 104))(v262, 0, v263 + 1.0);
            v257 += 24;
          }
          while (24 * v274 != v257);
        }
        goto LABEL_364;
      }
      long long v285 = 0uLL;
      *(void *)&long long v286 = 0;
      uint64_t v284 = &unk_1F0A517C0;
      uint64_t v244 = *(int *)(a1 + 2148);
      uint64_t v245 = *(void *)(a1 + 1600);
      (*(void (**)(void, void **))(**(void **)(v245 + 8 * v244) + 40))(*(void *)(v245 + 8 * v244), &v284);
      uint64_t v246 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v245 + 8 * v244) + 184))(*(void *)(v245 + 8 * v244), 2);
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 2192), v8, v246, 1, 0);
      unsigned int v247 = v246 * v8;
      std::vector<int> __p = &unk_1F0A472D0;
      __src[0] = (void *)v285;
      __src[1] = (void *)(v246 * v8);
      __src[2] = (void *)v286;
      kaldi::CuMatrixBase<float>::CopyRowsFromVec(a1 + 2192, (uint64_t)&__p);
      if (*(int *)(a1 + 2152) >= 2)
      {
        uint64_t v248 = 1;
        uint64_t v249 = (int)v247;
        uint64_t v250 = 4 * (int)v247;
        do
        {
          kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)&__p, v274, v246, 1, 0, 0);
          v292.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A472D0;
          v292.__r_.__value_.__l.__size_ = v285 + v250;
          v292.__r_.__value_.__r.__words[2] = v247;
          *(void *)&long long v293 = v286;
          kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)&__p, (uint64_t)&v292);
          kaldi::CuMatrixBase<float>::AddMat(a1 + 2192, (uint64_t)&__p, 111, 1.0, 1.0);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
          ++v248;
          v250 += 4 * (int)v247;
          v249 += (int)v247;
        }
        while (v248 < *(int *)(a1 + 2152));
      }
      uint64_t v251 = *(unsigned __int8 *)(a1 + 1510);
      int v252 = *(unsigned __int8 *)(a1 + 1511);
      if (*(unsigned char *)(a1 + 1510))
      {
        LODWORD(v8) = v274;
      }
      else
      {
        LODWORD(v8) = v274;
        if (!*(unsigned char *)(a1 + 1511))
        {
LABEL_357:
          kaldi::CuVector<float>::~CuVector(&v284);
          goto LABEL_358;
        }
        int v252 = 1;
      }
      int v253 = v246 - v252 - v251;
      long long v254 = (void *)(*(void *)(a1 + 2200) + 4 * v251);
      int v255 = *(_DWORD *)(a1 + 2220) - v251;
      unint64_t v256 = *(void **)(a1 + 2224);
      LODWORD(__src[1]) = v253;
      *(void **)((char *)&__src[1] + 4) = *(void **)(a1 + 2212);
      HIDWORD(__src[2]) = v255;
      __src[3] = v256;
      std::vector<int> __p = &unk_1F0A472A0;
      __src[0] = v254;
      kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 2192), (int32x2_t *)&__p);
      std::vector<int> __p = &unk_1F0A472A0;
      memset(__src, 0, sizeof(__src));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
      goto LABEL_357;
    }
    long long v286 = 0u;
    long long v285 = 0u;
    uint64_t v284 = &unk_1F0A51768;
    char v287 = 0;
    uint64_t v241 = *(void *)(*(void *)(a1 + 1600) + 8 * *(int *)(a1 + 2156));
    (*(void (**)(uint64_t, void **))(*(void *)v241 + 32))(v241, &v284);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&v292, v273, a1 + 2368, (long long *)&__p);
    if (SHIBYTE(__src[1]) < 0) {
      operator delete(__p);
    }
    uint64_t v243 = *(uint64_t **)(a1 + 2248);
    if (!v243)
    {
      if (!*(unsigned char *)(a1 + 1506))
      {
        if (*(unsigned char *)(a1 + 1507))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Not implemented yet", 19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        goto LABEL_347;
      }
      uint64_t v243 = (uint64_t *)(a1 + 1128);
    }
    kaldi::nnet1::Nnet::Feedforward(v243, (uint64_t)&v284, v272, -1, 0);
LABEL_347:
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&v292, v242);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v284);
    goto LABEL_348;
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Iterating over batch, batch size: ", 34);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  if (v274)
  {
    uint64_t v9 = 0;
    v275 = (uint64_t *)(a1 + 1552);
    long long v271 = a3;
    uint64_t v270 = a2;
    while (1)
    {
      if (*(unsigned char *)(a1 + 1508))
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 1576) + 32 * *(int *)(a1 + 2116) + 24);
        (*(void (**)(uint64_t, void, float))(*(void *)v10 + 104))(v10, 0, *(float *)(*(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v9));
        uint64_t v11 = *(void *)(*(void *)(a1 + 1576) + 32 * *(int *)(a1 + 2120) + 24);
        uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 2432) + 24 * v9 + 8) - 16);
        (*(void (**)(uint64_t, void))(*(void *)v12 + 112))(v12, 0);
        if (*(unsigned char *)(a1 + 1518)) {
          float v14 = 0.0;
        }
        else {
          float v14 = 1.0;
        }
        (*(void (**)(uint64_t, void, float))(*(void *)v11 + 104))(v11, 0, v13 - v14);
        std::vector<int> __p = 0;
        __src[0] = 0;
        __src[1] = 0;
        uint64_t v15 = *(void *)(a1 + 168);
        if (*(char *)(a1 + 1959) < 0) {
          std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)(a1 + 1936), *(void *)(a1 + 1944));
        }
        else {
          std::string v292 = *(std::string *)(a1 + 1936);
        }
        uint64_t v284 = 0;
        long long v285 = 0uLL;
        std::__split_buffer<std::string>::pointer p_p = &v284;
        LOBYTE(v278) = 0;
        uint64_t v284 = operator new(0x18uLL);
        *(void *)&long long v285 = v284;
        *((void *)&v285 + 1) = (char *)v284 + 24;
        *(void *)&long long v285 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v285 + 8, (long long *)&v292, &v293, (std::string *)v284);
        std::__split_buffer<std::string>::pointer p_p = 0;
        v278 = 0;
        uint64_t v279 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, void ***, void **))(*(void *)v15 + 120))(v15, a1 + 1576, &v284, &p_p, &__p);
        v281[0] = (void **)&p_p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v281);
        std::__split_buffer<std::string>::pointer p_p = &v284;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
        if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v292.__r_.__value_.__l.__data_);
        }
        uint64_t v17 = *v275;
        uint64_t v18 = *(void *)__p;
        *(void *)std::vector<int> __p = 0;
        uint64_t v19 = *(void *)(v17 + 24);
        *(void *)(v17 + 24) = v18;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
        uint64_t v284 = &__p;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v284);
      }
      else
      {
        uint64_t v16 = *(void *)(*(void *)(a1 + 1552) + 32 * *(int *)(a1 + 2132) + 24);
        (*(void (**)(uint64_t, void, float))(*(void *)v16 + 104))(v16, 0, *(float *)(*(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v9));
      }
      if (*(void *)(a1 + 2088) != *(void *)(a1 + 2080))
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        do
        {
          (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(*(void *)(a1 + 2432) + 24 * v9) + v20)
                                                      + 16))(&__p);
          uint64_t v22 = *(void *)(a1 + 1552) + 32 * ((int)v21 + *(_DWORD *)(a1 + 2112));
          uint64_t v23 = __p;
          std::vector<int> __p = 0;
          uint64_t v24 = *(void *)(v22 + 24);
          *(void *)(v22 + 24) = v23;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
          int v25 = __p;
          std::vector<int> __p = 0;
          if (v25) {
            (*(void (**)(void *))(*(void *)v25 + 8))(v25);
          }
          ++v21;
          v20 += 16;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 2088) - *(void *)(a1 + 2080)) >> 3) > v21);
      }
      if (!*(unsigned char *)(a1 + 1515)) {
        goto LABEL_43;
      }
      (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(*(void *)(a1 + 2432) + 24 * v9 + 8)
                                                                - 16)
                                                  + 16))(&__p);
      uint64_t v26 = *(void *)(a1 + 1552) + 32 * *(int *)(a1 + 2136);
      uint64_t v27 = __p;
      std::vector<int> __p = 0;
      uint64_t v28 = *(void *)(v26 + 24);
      *(void *)(v26 + 24) = v27;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
      uint64_t v29 = __p;
      std::vector<int> __p = 0;
      if (v29) {
        (*(void (**)(void *))(*(void *)v29 + 8))(v29);
      }
      if (*(char *)(a1 + 1887) < 0) {
        break;
      }
      if (*(unsigned char *)(a1 + 1887)) {
        goto LABEL_40;
      }
LABEL_41:
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Position input: ", 16);
        uint64_t v33 = *(void *)(*(void *)(a1 + 1552) + 32 * *(int *)(a1 + 2136) + 24);
        (*(void (**)(uint64_t, void))(*(void *)v33 + 112))(v33, 0);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      }
LABEL_43:
      std::string::basic_string[abi:ne180100]<0>(&v284, "");
      kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v273, a1 + 2360, (long long *)&v284);
      if (SHIBYTE(v285) < 0) {
        operator delete(v284);
      }
      uint64_t v34 = *(void *)(a1 + 184);
      uint64_t v284 = 0;
      long long v285 = 0uLL;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void **, uint64_t))(*(void *)v34 + 120))(v34, v275, a1 + 2032, &v284, a1 + 1600);
      v292.__r_.__value_.__r.__words[0] = (std::string::size_type)&v284;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v292);
      kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&__p, v35);
      if (*(void *)(a1 + 2088) != *(void *)(a1 + 2080))
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        do
        {
          (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(a1 + 1600)
                                                                    + 8 * ((int)v37 + *(_DWORD *)(a1 + 2108)))
                                                      + 16))(&__p);
          std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>((void *)(*(void *)(*(void *)(a1 + 2432) + 24 * v9) + v36), (uint64_t *)&__p);
          unint64_t v38 = __p;
          std::vector<int> __p = 0;
          if (v38) {
            (*(void (**)(void *))(*(void *)v38 + 8))(v38);
          }
          ++v37;
          v36 += 16;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 2088) - *(void *)(a1 + 2080)) >> 3) > v37);
      }
      v281[1] = 0;
      uint64_t v282 = 0;
      uint64_t v283 = 0;
      v281[0] = (void **)&unk_1F0A517C0;
      if (*(unsigned char *)(a1 + 1506) || *(unsigned char *)(a1 + 1507))
      {
        long long v285 = 0u;
        long long v286 = 0u;
        uint64_t v284 = &unk_1F0A51768;
        char v287 = 0;
        *(_OWORD *)&v292.__r_.__value_.__r.__words[1] = 0u;
        long long v293 = 0u;
        v292.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A51768;
        char v294 = 0;
        uint64_t v39 = *(void *)(*(void *)(a1 + 1600) + 8 * *(int *)(a1 + 2156));
        (*(void (**)(uint64_t, void **))(*(void *)v39 + 32))(v39, &v284);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&p_p, v273, a1 + 2368, (long long *)&__p);
        if (SHIBYTE(__src[1]) < 0) {
          operator delete(__p);
        }
        unint64_t v40 = *(uint64_t **)(a1 + 2248);
        if (v40 || (unint64_t v40 = (uint64_t *)(a1 + 1128), *(unsigned char *)(a1 + 1506)))
        {
          kaldi::nnet1::Nnet::Feedforward(v40, (uint64_t)&v284, (int32x2_t *)&v292, -1, 0);
        }
        else if (*(unsigned char *)(a1 + 1507))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Not implemented yet", 19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        __src[0] = (void *)v292.__r_.__value_.__l.__size_;
        std::vector<int> __p = &unk_1F0A472D0;
        __src[1] = (void *)LODWORD(v292.__r_.__value_.__r.__words[2]);
        __src[2] = *((void **)&v293 + 1);
        kaldi::CuVector<float>::operator=((uint64_t)v281, (uint64_t)&__p);
        kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&p_p, v41);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v292);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v284);
      }
      else
      {
        uint64_t v54 = *(void *)(*(void *)(a1 + 1600) + 8 * *(int *)(a1 + 2156));
        (*(void (**)(uint64_t, void ***))(*(void *)v54 + 40))(v54, v281);
      }
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"readout layer size: ", 20);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      }
      int v42 = a3[2].i32[0];
      if (v42 < (int)v282)
      {
        kaldi::CuMatrix<float>::Resize(a3, v274, v282, 2, 0);
        int v42 = a3[2].i32[0];
      }
      int v43 = (void *)a3[4];
      __src[0] = (void *)(*(void *)&a3[1] + 4 * a3[3].i32[0] * (int)v9);
      std::vector<int> __p = &unk_1F0A472D0;
      __src[1] = (void *)v42;
      __src[2] = v43;
      kaldi::CuVectorBase<float>::CopyFromVec(&__p, (uint64_t)v281);
      if (*(unsigned char *)(a1 + 2164))
      {
        memset(__src, 0, sizeof(__src));
        std::vector<int> __p = &unk_1F0A51768;
        char v290 = 0;
        uint64_t v44 = *(void *)(*(void *)(a1 + 1600) + 8 * *(int *)(a1 + 2148));
        (*(void (**)(uint64_t, void **))(*(void *)v44 + 32))(v44, &__p);
        uint64_t v45 = *(unsigned __int8 *)(a1 + 1510);
        unsigned int v46 = __src[1];
        unsigned int v47 = LODWORD(__src[1]) - *(unsigned __int8 *)(a1 + 1511);
        uint64_t v48 = v47 - v45;
        if (*(void *)(a1 + 2208) != __PAIR64__(v274, v48))
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 2192), v8, v48, 2, 0);
          LODWORD(v48) = *(_DWORD *)(a1 + 2208);
          unsigned int v46 = __src[1];
        }
        uint64_t v49 = *(void *)(a1 + 2224);
        *(void *)&long long v285 = *(void *)(a1 + 2200) + 4 * *(_DWORD *)(a1 + 2216) * (int)v9;
        uint64_t v284 = &unk_1F0A472D0;
        *((void *)&v285 + 1) = v48;
        *(void *)&long long v286 = v49;
        v278 = (char *)__src[0];
        std::__split_buffer<std::string>::pointer p_p = (void **)&unk_1F0A472D0;
        uint64_t v279 = v46;
        v280 = __src[3];
        v292.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A472D0;
        v292.__r_.__value_.__l.__size_ = (std::string::size_type)__src[0] + 4 * v45;
        v292.__r_.__value_.__r.__words[2] = v47;
        *(void **)&long long v293 = __src[3];
        kaldi::CuVectorBase<float>::CopyFromVec(&v284, (uint64_t)&v292);
        if (*(int *)(a1 + 2152) >= 2)
        {
          int v50 = 1;
          do
          {
            uint64_t v51 = *(void *)(a1 + 2200) + 4 * *(_DWORD *)(a1 + 2216) * (int)v9;
            unsigned int v52 = *(_DWORD *)(a1 + 2208);
            uint64_t v53 = *(void *)(a1 + 2224);
            uint64_t v284 = &unk_1F0A472D0;
            *(void *)&long long v285 = v51;
            *(void *)&long long v286 = v53;
            *((void *)&v285 + 1) = v52;
            std::__split_buffer<std::string>::pointer p_p = (void **)&unk_1F0A472D0;
            v278 = (char *)__src[0] + 4 * LODWORD(__src[2]) * v50;
            v280 = __src[3];
            uint64_t v279 = LODWORD(__src[1]);
            v292.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A472D0;
            v292.__r_.__value_.__l.__size_ = (std::string::size_type)&v278[4 * v45];
            *(void **)&long long v293 = __src[3];
            v292.__r_.__value_.__r.__words[2] = v47;
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v284, (uint64_t)&v292, 1.0, 1.0);
            ++v50;
          }
          while (v50 < *(_DWORD *)(a1 + 2152));
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
        uint64_t v8 = v274;
        a3 = v271;
        a2 = v270;
      }
      kaldi::CuVector<float>::~CuVector(v281);
      if (++v9 == v8) {
        goto LABEL_358;
      }
    }
    if (!*(void *)(a1 + 1872)) {
      goto LABEL_41;
    }
LABEL_40:
    uint64_t v30 = *(void *)(*(void *)(a1 + 1552) + 32 * *(int *)(a1 + 2136) + 24);
    float v31 = 1.0 / ((*(float (**)(uint64_t, void))(*(void *)v30 + 112))(v30, 0) + 1.0);
    uint64_t v32 = *(void *)(*(void *)(a1 + 1552) + 32 * *(int *)(a1 + 2144) + 24);
    (*(void (**)(uint64_t, void, float))(*(void *)v32 + 104))(v32, 0, v31);
    goto LABEL_41;
  }
LABEL_364:
  if (*(unsigned char *)(a1 + 2164))
  {
    int v264 = *(_DWORD *)(a1 + 2152);
    if (v264 >= 2)
    {
      float v265 = 1.0 / (double)v264;
      kaldi::CuMatrixBase<float>::Scale(a1 + 2192, v265);
    }
    std::vector<int> __p = 0;
    __src[0] = 0;
    __src[1] = 0;
    kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 2192, (int *)&__p);
    std::vector<unsigned int>::pointer begin = *(std::vector<unsigned int>::pointer *)(a1 + 2168);
    uint64_t v267 = (*(void *)(a1 + 2176) - (void)begin) >> 2;
    if (__p != v267)
    {
      v268 = (std::vector<unsigned int> *)(a1 + 2168);
      std::vector<int>::resize(v268, (int)__p);
      std::vector<unsigned int>::pointer begin = v268->__begin_;
      LODWORD(v267) = __p;
    }
    memcpy(begin, __src[0], 4 * (int)v267);
    if (__src[0]) {
      free(__src[0]);
    }
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v291, v7);
}

void sub_1B1E8FC38(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1E8FFA4);
}

void sub_1B1E8FC64(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  if (a49) {
    free(a49);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v49 - 240), a2);
  _Unwind_Resume(a1);
}

void sub_1B1E8FC78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1E8FFA4);
}

void sub_1B1E8FC94()
{
}

void sub_1B1E8FCB4()
{
}

void sub_1B1E8FCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  a42 = &a48;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a42);
  JUMPOUT(0x1B1E8FF9CLL);
}

void sub_1B1E8FCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  a48 = (void **)&a42;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240), v50);
  _Unwind_Resume(a1);
}

void sub_1B1E8FCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
}

void sub_1B1E8FCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

void sub_1B1E8FD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a42, v50);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240), v51);
  _Unwind_Resume(a1);
}

void sub_1B1E8FD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void ***a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  a38 = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  a32 = (void **)&a42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a32);
  if (*(char *)(v48 - 169) < 0) {
    operator delete(*(void **)(v48 - 192));
  }
  a42 = &a48;
  JUMPOUT(0x1B1E8FF6CLL);
}

void sub_1B1E8FDB8()
{
}

void sub_1B1E8FDC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1E8FDE8);
}

void sub_1B1E8FDDC(uint64_t a1, clockid_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a32, a2);
  kaldi::CuMatrix<float>::~CuMatrix(v42 - 192);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a42);
  JUMPOUT(0x1B1E8FF30);
}

void sub_1B1E8FDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240), v50);
  _Unwind_Resume(a1);
}

void sub_1B1E8FE0C(_Unwind_Exception *a1, clockid_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (a48) {
    kaldi::quasar::CEInferenceNet::Feedforward();
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240), a2);
  _Unwind_Resume(a1);
}

void sub_1B1E8FE24()
{
}

void sub_1B1E8FE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

void sub_1B1E8FE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    JUMPOUT(0x1B1E8FE50);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v47 - 240));
  _Unwind_Resume(a1);
}

void sub_1B1E8FE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  *(void *)(v42 - 192) = &a42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 192));
  JUMPOUT(0x1B1E8FEC8);
}

void sub_1B1E8FE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t *a48)
{
  if (*(char *)(v48 - 169) < 0) {
    operator delete(*(void **)(v48 - 192));
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  a48 = &a42;
  JUMPOUT(0x1B1E8FF6CLL);
}

void sub_1B1E8FEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (*(char *)(v48 - 169) < 0) {
    operator delete(*(void **)(v48 - 192));
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a42, v49);
  JUMPOUT(0x1B1E8FF9CLL);
}

void sub_1B1E8FED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a32) {
    (*(void (**)(uint64_t))(*(void *)a32 + 8))(a32);
  }
  int v43 = *(void **)(v42 - 192);
  if (v43)
  {
    *(void *)(v42 - 184) = v43;
    operator delete(v43);
  }
  *(void *)(v42 - 192) = &a42;
  JUMPOUT(0x1B1E8FF6CLL);
}

void sub_1B1E8FF20()
{
}

void sub_1B1E8FF38()
{
}

void sub_1B1E8FF78(_Unwind_Exception *a1, clockid_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (a48) {
    kaldi::quasar::CEInferenceNet::Feedforward();
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240), a2);
  _Unwind_Resume(a1);
}

void sub_1B1E8FF90()
{
}

void *std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::shared_ptr[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

double kaldi::quasar::Encdec::Finish(kaldi::quasar::Encdec *this, clockid_t a2)
{
  double result = *((double *)this + 287) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2) - *((double *)this + 282);
  *((double *)this + 287) = result;
  return result;
}

void kaldi::quasar::Encdec::ConstrainSoftmax(uint64_t a1, uint64_t a2, int a3, int a4, long long **a5, long long **a6)
{
  if (*(void *)(a1 + 2240))
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    kaldi::quasar::Encdec::Symbolize(a1, a5, (uint64_t)&v20, 0, 0);
    std::vector<int> __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    kaldi::quasar::Encdec::Symbolize(a1, a6, (uint64_t)&__p, 1, 0);
    uint64_t v11 = v20;
    uint64_t v12 = v21;
    while (v11 != v12)
      --*v11++;
    float v13 = __p;
    float v14 = v18;
    while (v13 != v14)
      --*v13++;
    v16[0] = 0;
    v16[1] = 0;
    uint64_t v15 = v16;
    kaldi::quasar::Encdec::ConstrainSoftmax(a1, a2, a3, a4, (int **)&v20, (int **)&__p, &v15);
    std::__tree<int>::destroy((uint64_t)&v15, v16[0]);
    if (__p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }
    if (v20)
    {
      unint64_t v21 = v20;
      operator delete(v20);
    }
  }
}

void sub_1B1E90154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

std::vector<int> *kaldi::quasar::Encdec::ConstrainSoftmax(uint64_t a1, uint64_t a2, int a3, int a4, int **a5, int **a6, void *a7)
{
  *(void *)&long long v54 = *MEMORY[0x1E4F143B8];
  double result = *(std::vector<int> **)(a1 + 2240);
  if (result)
  {
    if (*(unsigned char *)(a1 + 1506))
    {
      int v13 = kaldi::quasar::Shortlist::MapShortlist(result, a2, *(_DWORD *)(a1 + 828) - 1, *(_DWORD *)(a1 + 832) - 1, a3, a4, a5, a6, a7, 0);
      *(unsigned char *)(a1 + 1509) = v13;
      if (v13) {
        kaldi::quasar::ShortlistNnetBuilder::ConstrainSoftmax((kaldi::nnet1::Nnet *)(a1 + 1128));
      }
      std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 2248), 0);
      double result = 0;
      uint64_t v47 = 0;
    }
    else
    {
      int v14 = *(_DWORD *)(a1 + 828) - 1;
      int v15 = *(_DWORD *)(a1 + 832) - 1;
      if (*(unsigned char *)(a1 + 1507))
      {
        if (kaldi::quasar::Shortlist::MapShortlist(result, a2, v14, v15, a3, a4, a5, a6, a7, 1))
        {
          uint64_t v16 = *(void *)(a1 + 2240);
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          std::vector<int> __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v16, *(void *)(v16 + 8), (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 2);
          v17.n128_f64[0] = kaldi::Matrix<float>::Matrix((uint64_t)v43);
          uint64_t v18 = *(void *)(a1 + 200);
          uint64_t v40 = 0;
          unint64_t v41 = 0;
          unint64_t v42 = 0;
          if (*(_DWORD *)(a1 + 2124))
          {
            uint64_t v19 = __p;
            if (v45 != __p)
            {
              unint64_t v20 = (v45 - (unsigned char *)__p) >> 2;
              if (v20 <= 1) {
                unint64_t v20 = 1;
              }
              do
              {
                *v19++ += *(_DWORD *)(a1 + 2124);
                --v20;
              }
              while (v20);
            }
          }
          (*(void (**)(std::string *__return_ptr, uint64_t, void **, void, __n128))(*(void *)v18 + 16))(&v53, v18, &__p, 0, v17);
          if (*(char *)(a1 + 2007) < 0) {
            std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(a1 + 1984), *(void *)(a1 + 1992));
          }
          else {
            std::string v38 = *(std::string *)(a1 + 1984);
          }
          std::string::size_type v21 = v53.__r_.__value_.__r.__words[0];
          v53.__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v39 = v21;
          unint64_t v22 = v41;
          if (v41 >= v42)
          {
            uint64_t v26 = (uint64_t)(v41 - v40) >> 5;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 59) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v28 = v42 - v40;
            if ((uint64_t)(v42 - v40) >> 4 > v27) {
              unint64_t v27 = v28 >> 4;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v29 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            clockid_t v51 = &v42;
            uint64_t v30 = (kaldi::nnet1::Nnet *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v42, v29);
            float v31 = (char *)v30 + 32 * v26;
            uint64_t v47 = v30;
            uint64_t v48 = v31;
            clockid_t v50 = (char *)v30 + 32 * v32;
            long long v33 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
            *((void *)v31 + 2) = *((void *)&v38.__r_.__value_.__l + 2);
            *(_OWORD *)float v31 = v33;
            memset(&v38, 0, sizeof(v38));
            std::string::size_type v34 = v39;
            std::string::size_type v39 = 0;
            *((void *)v31 + 3) = v34;
            clockid_t v49 = v31 + 32;
            std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(&v40, &v47);
            unint64_t v25 = v41;
            std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v47);
          }
          else
          {
            long long v23 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
            *(void *)(v41 + 16) = *((void *)&v38.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v22 = v23;
            memset(&v38, 0, sizeof(v38));
            std::string::size_type v24 = v39;
            std::string::size_type v39 = 0;
            *(void *)(v22 + 24) = v24;
            unint64_t v25 = v22 + 32;
          }
          unint64_t v41 = v25;
          std::string::size_type v35 = v39;
          std::string::size_type v39 = 0;
          if (v35) {
            (*(void (**)(std::string::size_type))(*(void *)v35 + 8))(v35);
          }
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
          std::string::size_type v36 = v53.__r_.__value_.__r.__words[0];
          v53.__r_.__value_.__r.__words[0] = 0;
          if (v36) {
            (*(void (**)(std::string::size_type))(*(void *)v36 + 8))(v36);
          }
          (*(void (**)(void))(**(void **)(v41 - 8) + 80))(*(void *)(v41 - 8));
          uint64_t v47 = 0;
          uint64_t v48 = 0;
          clockid_t v49 = 0;
          if (*(char *)(a1 + 2031) < 0) {
            std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(a1 + 2008), *(void *)(a1 + 2016));
          }
          else {
            std::string v53 = *(std::string *)(a1 + 2008);
          }
          memset(&v38, 0, sizeof(v38));
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v38.__r_.__value_.__l.__size_ = v38.__r_.__value_.__r.__words[0];
          v38.__r_.__value_.__r.__words[2] = v38.__r_.__value_.__r.__words[0] + 24;
          v38.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v38.__r_.__value_.__r.__words[2], (long long *)&v53, &v54, (std::string *)v38.__r_.__value_.__l.__data_);
          memset(v37, 0, sizeof(v37));
          (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, kaldi::nnet1::Nnet **))(*(void *)v18 + 120))(v18, &v40, &v38, v37, &v47);
          unsigned int v52 = v37;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
          v37[0] = (void **)&v38;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v37);
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v53.__r_.__value_.__l.__data_);
          }
          (*(void (**)(void, unsigned char *))(**(void **)v47 + 24))(*(void *)v47, v43);
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
          uint64_t v47 = (kaldi::nnet1::Nnet *)&v40;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
          kaldi::quasar::ShortlistNnetBuilder::ConstructNnet((uint64_t)v43);
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v47, "Map shortlist error!");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
      }
      double result = (std::vector<int> *)kaldi::quasar::Shortlist::MapShortlist(result, a2, v14, v15, a3, a4, a5, a6, a7, 0);
      *(unsigned char *)(a1 + 1509) = (_BYTE)result;
    }
  }
  return result;
}

void sub_1B1E9071C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::GetSoftmaxEosId(kaldi::quasar::Encdec *this)
{
  if (*((unsigned char *)this + 1509)) {
    return *(unsigned int *)(*((void *)this + 280) + 24);
  }
  else {
    return (*((_DWORD *)this + 207) - 1);
  }
}

uint64_t kaldi::quasar::Encdec::GetVocabWordIdx(kaldi::quasar::Encdec *this, uint64_t a2)
{
  if (*((unsigned char *)this + 1509)) {
    return *(unsigned int *)(**((void **)this + 280) + 4 * (int)a2);
  }
  return a2;
}

unint64_t kaldi::quasar::Encdec::GetSoftmaxIdx(kaldi::quasar::Shortlist **this, uint64_t a2)
{
  if (*((unsigned char *)this + 1509)) {
    return kaldi::quasar::Shortlist::GetSoftmaxIdx(this[280], a2);
  }
  else {
    return a2;
  }
}

void kaldi::quasar::ComputeEngineItf::CreateCopyFloat(kaldi::quasar::ComputeEngineItf *this@<X0>, const kaldi::quasar::ComputeEngineBufferItf *a2@<X1>, void *a3@<X8>)
{
  int v6 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(void *)a2 + 176))(a2);
  std::vector<long long>::vector(__p, v6);
  if (v6 < 1)
  {
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = v6;
    LODWORD(v9) = 1;
    do
    {
      int v10 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)a2 + 184))(a2, v7);
      *((void *)__p[0] + v7) = v10;
      uint64_t v9 = (v10 * v9);
      ++v7;
    }
    while (v8 != v7);
  }
  (*(void (**)(kaldi::quasar::ComputeEngineItf *, void **))(*(void *)this + 56))(this, __p);
  (*(void (**)(void, const kaldi::quasar::ComputeEngineBufferItf *, void, uint64_t, void))(*(void *)*a3 + 72))(*a3, a2, 0, v9, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1E909DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *v11;
  *uint64_t v11 = 0;
  if (v13) {
    kaldi::quasar::CEInferenceNet::Feedforward();
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::Encdec::ModelCompilationSpec::~ModelCompilationSpec(void **this)
{
  *this = &unk_1F0A51680;
  uint64_t v2 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  void **v2;

  *this = &unk_1F0A51680;
  uint64_t v2 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  MEMORY[0x1B3EA8670](this, 0x10B3C4071281136);
}

uint64_t kaldi::quasar::BPE::BPE(uint64_t a1, int a2, long long *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_DWORD *)(a1 + 128) = 2139095039;
  *(void *)(a1 + 112) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 136), "@@");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 160), "</w>");
  *(_DWORD *)(a1 + 184) = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 192), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(a1 + 208) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 192) = v6;
  }
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 216), "0.1");
  return a1;
}

void sub_1B1E90C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 183) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 159) < 0) {
    operator delete(*v4);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
  std::__tree<std::string>::destroy(v2, *(char **)(v2 + 8));
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig(void **this)
{
  *this = &unk_1F0A51258;
  uint64_t v2 = this + 23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  uint64_t v2 = this + 14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 11), this[12]);
  uint64_t v2 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)this);
}

{
  uint64_t vars8;

  kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::MTESNetworkPlan::~MTESNetworkPlan(void **this)
{
  *this = &unk_1F0A507B0;
  if (*((char *)this + 375) < 0) {
    operator delete(this[44]);
  }
  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan((kaldi::quasar::ESNetworkPlan *)this);
}

{
  uint64_t vars8;

  *this = &unk_1F0A507B0;
  if (*((char *)this + 375) < 0) {
    operator delete(this[44]);
  }
  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan((kaldi::quasar::ESNetworkPlan *)this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::ComputeEngineItf::CreateZeroedDataFloat16()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::ComputeEngineItf::CopyFloat16(kaldi::quasar::ComputeEngineItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2, kaldi::quasar::ComputeEngineBufferItf *a3)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
}

void kaldi::quasar::ComputeEngineItf::CreateCopyFloat16(kaldi::quasar::ComputeEngineItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::ComputeEngineItf::CreateCopyFloat32(kaldi::quasar::ComputeEngineItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::MTESNetworkPlan::Run(uint64_t a1, long long **a2, long long **a3, uint64_t a4, uint64_t *a5)
{
  kaldi::quasar::MTESNetworkPlan::prepare_network(a1);
  kaldi::quasar::ESNetworkPlan::Run(a1, a2, a3, a4, a5);
}

{
  uint64_t vars8;

  kaldi::quasar::MTESNetworkPlan::prepare_network(a1);
  kaldi::quasar::ESNetworkPlan::Run(a1, a2, a3, a4, a5);
}

void kaldi::quasar::ComputeEngineItf::RunFunction()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::ComputeEngineItf::PrepareRun()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::ComputeEngineItf::GetSharedInputOutputNames(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t kaldi::quasar::MTESNetworkPlan::prepare_network(uint64_t this)
{
  if ((*(char *)(this + 375) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(this + 375)) {
      return this;
    }
LABEL_5:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Dynamic switch is not support in this platform");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
  }
  if (*(void *)(this + 360)) {
    goto LABEL_5;
  }
  return this;
}

void kaldi::quasar::ESNetworkConfig::~ESNetworkConfig(void **this)
{
  *this = &unk_1F0A50660;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 8), this[9]);
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)this);
}

{
  uint64_t vars8;

  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig(this);
  JUMPOUT(0x1B3EA8670);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1B1E91284(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::BPE::ProcessLine(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  kaldi::SplitStringToVector((const std::string *)a2, " ", 1, (uint64_t)&v12);
  if (v13 - (void)v12 == 48)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, v12 + 3, (uint64_t)__p);
    int v15 = __p;
    *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v15)+ 10) = a3;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Wrong number of fields, ignoring : ", 35);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  }
  __p[0] = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1E913BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::vector<int> __p = (void *)(v15 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BPE::GetUniqueChars(kaldi::quasar::BPE *this)
{
  uint64_t v1 = (const std::string *)*((void *)this + 8);
  for (uint64_t i = (const std::string *)*((void *)this + 9); v1 != i; ++v1)
  {
    kaldi::quasar::BPE::StripSeparator((uint64_t)this, v1, &__p);
    long long v6 = 0;
    int v7 = 0;
    uint64_t v8 = 0;
    kaldi::quasar::BPE::SplitUtfString((int)this, &__p, (uint64_t)&v6);
    long long v4 = v6;
    long long v5 = v7;
    while (v4 != v5)
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this, v4, (uint64_t)v4);
      v4 += 3;
    }
    int v10 = &v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B1E914C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  a19 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *kaldi::quasar::BPE::UnkModeToString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 >= 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Unknown BPE unknown mode");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  uint64_t v2 = off_1E5FFEBE0[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void kaldi::quasar::BPE::StripSeparator(uint64_t a1@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) == 0) {
    std::string::size_type v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
  }
  int v8 = *(char *)(a1 + 159);
  if (v8 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a1 + 159);
  }
  else {
    std::string::size_type v9 = *(void *)(a1 + 144);
  }
  std::string::size_type v10 = v7 - v9;
  if (v7 < v9) {
    goto LABEL_34;
  }
  if ((v5 & 0x80) != 0)
  {
    if (v9 == -1 || size < v10) {
LABEL_41:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    size_t v12 = size - v10 >= v9 ? v9 : size - v10;
    uint64_t v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v9 == -1 || v5 < v10) {
      goto LABEL_41;
    }
    size_t v12 = v5 - v10 >= v9 ? v9 : v5 - v10;
    uint64_t v13 = a2;
  }
  uint64_t v15 = v8 >= 0 ? (const void *)(a1 + 136) : *(const void **)(a1 + 136);
  int v16 = memcmp((char *)v13 + v10, v15, v12);
  if (v12 == v9 && v16 == 0)
  {
    std::string::basic_string(a3, a2, 0, v10, (std::allocator<char> *)&v19);
  }
  else
  {
LABEL_34:
    if ((v5 & 0x80) != 0)
    {
      uint64_t v18 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
      std::string::__init_copy_ctor_external(a3, v18, size);
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    }
  }
}

unint64_t kaldi::quasar::BPE::SplitUtfString(int a1, std::string *__str, uint64_t a3)
{
  std::string::size_type v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  BOOL v5 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __str->__r_.__value_.__l.__size_;
  }
  if (v7)
  {
    std::string::size_type v9 = 0;
    do
    {
      std::string::size_type v10 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if (!v5) {
        std::string::size_type v10 = __str;
      }
      std::string::value_type v11 = v10->__r_.__value_.__s.__data_[v9];
      if ((v11 & 0xF8) == 0xF0)
      {
        uint64_t v12 = 4;
      }
      else if ((v11 & 0xF0) == 0xE0)
      {
        uint64_t v12 = 3;
      }
      else
      {
        BOOL v13 = (v11 & 0xE0) == 192;
        uint64_t v12 = 1;
        if (v13) {
          uint64_t v12 = 2;
        }
      }
      if (v5) {
        std::string::size_type v4 = size;
      }
      if (v9 + v12 > v4) {
        std::string::size_type v14 = 1;
      }
      else {
        std::string::size_type v14 = v12;
      }
      std::string::basic_string(&__p, __str, v9, v14, (std::allocator<char> *)&__v);
      unint64_t v16 = *(void *)(a3 + 8);
      unint64_t v15 = *(void *)(a3 + 16);
      if (v16 >= v15)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a3) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a3) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x555555555555555) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v19;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v21) {
          unint64_t v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v21);
        }
        else {
          unint64_t v22 = 0;
        }
        long long v23 = v22 + v18;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        long long v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        uint64_t v25 = *(void *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a3 + 8) = v25;
        if (v26 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v16 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v16 = v17;
        *(void *)(a3 + 8) = v16 + 24;
      }
      v9 += v14;
      std::string::size_type v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      BOOL v5 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = __str->__r_.__value_.__l.__size_;
      }
    }
    while (v9 < v27);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
}

void sub_1B1E918E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::wstring> *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TimeBlock::TimeBlock(uint64_t a1, double *a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v6 = *a4;
    *(void *)(a1 + 40) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v6;
  }
  *(double *)(a1 + 16) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a2) - *a2;
  return a1;
}

void sub_1B1E91984(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TimeBlock::~TimeBlock(kaldi::quasar::TimeBlock *this, clockid_t a2)
{
  uint64_t v3 = *(double **)this;
  **((double **)this + 1) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2)
                          - *v3
                          - *((double *)this + 2)
                          + **((double **)this + 1);
  int v4 = *((char *)this + 47);
  if (v4 < 0) {
    uint64_t v5 = *((void *)this + 4);
  }
  else {
    uint64_t v5 = *((unsigned __int8 *)this + 47);
  }
  if (v5 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    int v6 = *((char *)this + 47);
    if (v6 >= 0) {
      std::string::size_type v7 = (char *)this + 24;
    }
    else {
      std::string::size_type v7 = (char *)*((void *)this + 3);
    }
    if (v6 >= 0) {
      uint64_t v8 = *((unsigned __int8 *)this + 47);
    }
    else {
      uint64_t v8 = *((void *)this + 4);
    }
    std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v10);
    std::string::value_type v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" diff ", 6);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v13);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v14);
    LOBYTE(v4) = *((unsigned char *)this + 47);
  }
  if ((v4 & 0x80) != 0) {
    operator delete(*((void **)this + 3));
  }
}

uint64_t kaldi::quasar::TMTools::ModelCache<kaldi::quasar::ComputeEngineItf>::~ModelCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A1C7A0;
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void kaldi::quasar::TMTools::ModelCache<kaldi::quasar::ComputeEngineItf>::~ModelCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A1C7A0;
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  JUMPOUT(0x1B3EA8670);
}

void std::shared_ptr<kaldi::quasar::EspressoV2Plan>::shared_ptr[abi:ne180100]<kaldi::quasar::EspressoV2Plan,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1E91C10(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<kaldi::quasar::EspressoV2Plan>::shared_ptr[abi:ne180100]<kaldi::quasar::EspressoV2Plan,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::quasar::EspressoV2Plan *,std::shared_ptr<kaldi::quasar::EspressoV2Plan>::__shared_ptr_default_delete<kaldi::quasar::EspressoV2Plan,kaldi::quasar::EspressoV2Plan>,std::allocator<kaldi::quasar::EspressoV2Plan>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::EspressoV2Plan *,std::shared_ptr<kaldi::quasar::EspressoV2Plan>::__shared_ptr_default_delete<kaldi::quasar::EspressoV2Plan,kaldi::quasar::EspressoV2Plan>,std::allocator<kaldi::quasar::EspressoV2Plan>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::EspressoV2Plan *,std::shared_ptr<kaldi::quasar::EspressoV2Plan>::__shared_ptr_default_delete<kaldi::quasar::EspressoV2Plan,kaldi::quasar::EspressoV2Plan>,std::allocator<kaldi::quasar::EspressoV2Plan>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::Encdec::ModelCompilationSpec,std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>,kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, long long **a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x70uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::Encdec::ModelCompilationSpec>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &,std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B1E91E84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::Encdec::ModelCompilationSpec>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &,std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>,0>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, long long **a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F4F8;
  std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>::construct[abi:ne180100]<kaldi::quasar::Encdec::ModelCompilationSpec,kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1B1E91F00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::Encdec::ModelCompilationSpec>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F4F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::Encdec::ModelCompilationSpec>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F4F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::Encdec::ModelCompilationSpec>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>::construct[abi:ne180100]<kaldi::quasar::Encdec::ModelCompilationSpec,kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, long long **a6)
{
  uint64_t v9 = *a3;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v12 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v11 = *(std::string *)a5;
  }
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  *(void *)a2 = &unk_1F0A51680;
  *(void *)(a2 + 8) = v9;
  *(std::string *)(a2 + 16) = v12;
  memset(&v12, 0, sizeof(v12));
  *(std::string *)(a2 + 40) = v11;
  memset(&v11, 0, sizeof(v11));
  *(std::string *)(a2 + 64) = v10;
  memset(&v10, 0, sizeof(v10));
  char v13 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_1B1E920F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__emplace_unique_key_args<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__find_equal<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>((uint64_t)a1, &v9, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    char v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__find_equal<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  int v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        char v7 = v4;
        if (!(*(unsigned int (**)(void, uint64_t))(*(void *)*a3 + 40))(*a3, v4[4])) {
          break;
        }
        int v4 = (uint64_t *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!(*(unsigned int (**)(uint64_t, void))(*(void *)v7[4] + 40))(v7[4], *a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      int v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    char v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::shared_ptr<kaldi::quasar::EspressoV2Chain>::shared_ptr[abi:ne180100]<kaldi::quasar::EspressoV2Chain,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1E922E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<kaldi::quasar::EspressoV2Plan>::shared_ptr[abi:ne180100]<kaldi::quasar::EspressoV2Plan,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::quasar::EspressoV2Chain *,std::shared_ptr<kaldi::quasar::EspressoV2Chain>::__shared_ptr_default_delete<kaldi::quasar::EspressoV2Chain,kaldi::quasar::EspressoV2Chain>,std::allocator<kaldi::quasar::EspressoV2Chain>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::EspressoV2Chain *,std::shared_ptr<kaldi::quasar::EspressoV2Chain>::__shared_ptr_default_delete<kaldi::quasar::EspressoV2Chain,kaldi::quasar::EspressoV2Chain>,std::allocator<kaldi::quasar::EspressoV2Chain>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::EspressoV2Chain *,std::shared_ptr<kaldi::quasar::EspressoV2Chain>::__shared_ptr_default_delete<kaldi::quasar::EspressoV2Chain,kaldi::quasar::EspressoV2Chain>,std::allocator<kaldi::quasar::EspressoV2Chain>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<kaldi::quasar::MTESNetworkPlan>::shared_ptr[abi:ne180100]<kaldi::quasar::MTESNetworkPlan,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1E92414(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<kaldi::quasar::EspressoV2Plan>::shared_ptr[abi:ne180100]<kaldi::quasar::EspressoV2Plan,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::quasar::MTESNetworkPlan *,std::shared_ptr<kaldi::quasar::MTESNetworkPlan>::__shared_ptr_default_delete<kaldi::quasar::MTESNetworkPlan,kaldi::quasar::MTESNetworkPlan>,std::allocator<kaldi::quasar::MTESNetworkPlan>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::MTESNetworkPlan *,std::shared_ptr<kaldi::quasar::MTESNetworkPlan>::__shared_ptr_default_delete<kaldi::quasar::MTESNetworkPlan,kaldi::quasar::MTESNetworkPlan>,std::allocator<kaldi::quasar::MTESNetworkPlan>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::MTESNetworkPlan *,std::shared_ptr<kaldi::quasar::MTESNetworkPlan>::__shared_ptr_default_delete<kaldi::quasar::MTESNetworkPlan,kaldi::quasar::MTESNetworkPlan>,std::allocator<kaldi::quasar::MTESNetworkPlan>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

__n128 std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *((void *)v6 + 9) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1E92740(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__assign_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100]((void *)a1, v12);
    char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)&v20, a2, v15, v9);
    char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      unint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B1E9289C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1E928A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v4 = a4;
  uint64_t v10 = a4;
  long long v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *int v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    long long v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(&v15);
  }
}

void sub_1B1E92AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::__shared_ptr_emplace<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62B38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::shared_ptr[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<kaldi::quasar::ComputeEngineBufferItf  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::ComputeEngineBufferItf  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::ComputeEngineBufferItf  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__construct_one_at_end[abi:ne180100]<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(v5 + 24) = v7;
  *(void *)(a1 + 8) = v5 + 32;
}

void sub_1B1E9308C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t kaldi::EndPointer::EndPointer(uint64_t result, _OWORD *a2)
{
  *(_OWORD *)uint64_t result = *a2;
  float v2 = *(float *)(result + 12);
  if (v2 < 0.0 || v2 > 1.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "opts_.eos_probability_threshold >= 0.0 && opts_.eos_probability_threshold <= 1.0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::EndPointer::Enabled(kaldi::EndPointer *this)
{
  return *(unsigned __int8 *)this;
}

BOOL kaldi::EndPointer::IsEndPoint(kaldi::EndPointer *this, float a2, float a3, int a4, int a5, int a6)
{
  if (!*(unsigned char *)this) {
    return 0;
  }
  if (*((_DWORD *)this + 1) <= a4) {
    return 1;
  }
  if (a5 < 1) {
    return 0;
  }
  if (*((_DWORD *)this + 2) <= a6) {
    return 1;
  }
  float v6 = *((float *)this + 3);
  if (v6 < a2) {
    return 1;
  }
  return v6 < a3;
}

void sub_1B1E932E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E93C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
  STACK[0x228] = (unint64_t)&a51;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x228]);

  STACK[0x228] = (unint64_t)&a54;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x228]);
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  STACK[0x228] = (unint64_t)&a63;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x228]);

  _Unwind_Resume(a1);
}

id EARHelpers::MultiArrayFromJaggedVec(void *a1)
{
  float v2 = [MEMORY[0x1E4F1CA48] array];
  if (*a1 != a1[1]) {
    operator new();
  }
  return v2;
}

void sub_1B1E94144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

kaldi::nnet1::GradientNormalizationParams *kaldi::nnet1::GradientNormalizationParams::GradientNormalizationParams(kaldi::nnet1::GradientNormalizationParams *this)
{
  *(_DWORD *)this = -1082130432;
  std::string::basic_string[abi:ne180100]<0>(__p, "NoGradNorm");
  int v2 = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  *((_DWORD *)this + 1) = v2;
  *((_WORD *)this + 4) = 0;
  return this;
}

void sub_1B1E941F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10EARHelpers23MultiArrayFromJaggedVecERNSt3__16vectorINS1_IfNS0_9allocatorIfEEEENS2_IS4_EEEE_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    int v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void **std::vector<std::vector<std::vector<std::pair<int,float>>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    long long v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)long long v14 = 0;
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<std::pair<int,float>>>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    void v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1E9439C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<std::pair<int,float>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::vector<std::pair<int,float>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    long long v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)long long v14 = 0;
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    std::vector<std::vector<std::pair<int,float>>>::__swap_out_circular_buffer(a1, v16);
    long long v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    void v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1E94630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1E946AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1E9476C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::vector<std::vector<std::pair<int,float>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::pair<int,float>>>*,std::vector<std::vector<std::pair<int,float>>>*>(void *result, uint64_t ***a2, uint64_t ***a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*,std::vector<std::vector<std::pair<int,float>>>*,std::vector<std::vector<std::pair<int,float>>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1E94820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*,std::vector<std::vector<std::pair<int,float>>>*,std::vector<std::vector<std::pair<int,float>>>*>(uint64_t a1, uint64_t ***a2, uint64_t ***a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      std::vector<std::vector<std::pair<int,float>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1E948EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  int v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void Array<unsigned int *>::alloc()
{
}

void RefList_freeThread(void)
{
  uint64_t v0 = (void **)idFromFilenameResult();
  uint64_t v1 = *v0;
  if (!*v0)
  {
    uint64_t v1 = malloc_type_calloc(1uLL, 8uLL, 0x10040436913F5uLL);
    *uint64_t v0 = v1;
  }
  if (!*v1 || (free((void *)*v1), (uint64_t v1 = *v0) != 0))
  {
    free(v1);
    *uint64_t v0 = 0;
  }
}

void quasar::tennessee::operator<<()
{
}

void sub_1B1E94B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::ConvertWideCharacterToMultibyteString()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]();
}

void sub_1B1E94BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::tennessee::ConvertMultibyteStringToWideCharacter(quasar::tennessee *this, const char *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]();
}

void sub_1B1E94C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]()
{
}

void sub_1B1E94D34(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 184) = 0;
  if (!*(void *)(a1 + 48)) {
    goto LABEL_62;
  }
  uint64_t v7 = a2;
  std::string::basic_string[abi:ne180100](a4, (a3 - a2) >> 1, 0);
  if (a3 == v7)
  {
    long long v23 = *(_OWORD *)(a1 + 136);
    long long v52 = *(_OWORD *)(a1 + 120);
    long long v53 = v23;
    long long v24 = *(_OWORD *)(a1 + 168);
    long long v54 = *(_OWORD *)(a1 + 152);
    long long v55 = v24;
    long long v25 = *(_OWORD *)(a1 + 72);
    long long v48 = *(_OWORD *)(a1 + 56);
    long long v49 = v25;
    long long v26 = *(_OWORD *)(a1 + 104);
    long long v50 = *(_OWORD *)(a1 + 88);
    long long v51 = v26;
  }
  else
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v8 = 22;
    }
    else {
      std::string::size_type v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::string::resize(a4, v8, 0);
    long long v9 = *(_OWORD *)(a1 + 136);
    long long v52 = *(_OWORD *)(a1 + 120);
    long long v53 = v9;
    long long v10 = *(_OWORD *)(a1 + 168);
    long long v54 = *(_OWORD *)(a1 + 152);
    long long v55 = v10;
    long long v11 = *(_OWORD *)(a1 + 72);
    long long v48 = *(_OWORD *)(a1 + 56);
    long long v49 = v11;
    __n128 v12 = *(__n128 *)(a1 + 88);
    long long v13 = *(_OWORD *)(a1 + 104);
    std::string::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      uint64_t v15 = (char *)a4;
    }
    else {
      uint64_t v15 = (char *)a4->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a4->__r_.__value_.__l.__size_;
    }
    uint64_t v16 = &v15[size];
    long long v50 = *(_OWORD *)(a1 + 88);
    long long v51 = v13;
    while (1)
    {
      int v17 = (*(uint64_t (**)(void, long long *, char *, char *, char **, char *, char *, uint64_t *, __n128))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), &v48, v7, a3, &v47, v15, v16, &v46, v12);
      BOOL v18 = v47 == v7;
      *(void *)(a1 + 184) += (v47 - v7) >> 2;
      if (v18) {
        goto LABEL_60;
      }
      if (v17 != 1) {
        break;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = a4;
      }
      else {
        uint64_t v19 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      uint64_t v20 = v46 - (void)v19;
      std::string::resize(a4, 2 * (v46 - (void)v19), 0);
      std::string::size_type v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0) {
        unint64_t v22 = a4;
      }
      else {
        unint64_t v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      uint64_t v15 = (char *)v22 + v20;
      if ((v21 & 0x80u) != 0) {
        std::string::size_type v21 = a4->__r_.__value_.__l.__size_;
      }
      uint64_t v16 = (char *)v22 + v21;
      uint64_t v7 = v47;
      if (v47 >= a3) {
        goto LABEL_60;
      }
    }
    if (v17)
    {
      if (v17 != 3) {
        goto LABEL_60;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = (char *)a4;
      }
      else {
        std::string::size_type v27 = (char *)a4->__r_.__value_.__r.__words[0];
      }
      std::string::resize(a4, v15 - v27, 0);
      std::string::append[abi:ne180100]<char const*,0>(a4, v7, a3);
    }
    else
    {
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = a4;
      }
      else {
        uint64_t v28 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      std::string::resize(a4, v46 - (void)v28, 0);
    }
  }
  std::string::size_type v29 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  std::string::size_type v30 = a4->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v31 = 22;
  }
  else {
    std::string::size_type v31 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  std::string::resize(a4, v31, 0);
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v32 = v29;
  }
  else {
    std::string::size_type v32 = v30;
  }
  int v33 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
  BOOL v34 = v33 < 0;
  if (v33 >= 0) {
    std::string::size_type v35 = a4;
  }
  else {
    std::string::size_type v35 = (std::string *)a4->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v36 = (char *)v35 + v32;
  if (v34) {
    std::string::size_type v37 = a4->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v37 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  }
  for (uint64_t i = &v36[v37]; ; uint64_t i = (char *)(v43 + v42))
  {
    int v39 = (*(uint64_t (**)(void, long long *, char *, char *, char **))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), &v48, v36, i, &v47);
    if (v39 != 1) {
      break;
    }
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v40 = a4->__r_.__value_.__r.__words[0];
    }
    unint64_t v41 = &v47[-v40];
    std::string::resize(a4, 2 * (void)&v47[-v40], 0);
    std::string::size_type v42 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) == 0) {
      std::string::size_type v43 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v43 = a4->__r_.__value_.__r.__words[0];
    }
    std::string::size_type v36 = &v41[v43];
    if ((v42 & 0x80u) != 0) {
      std::string::size_type v42 = a4->__r_.__value_.__l.__size_;
    }
  }
  if (!v39)
  {
    std::string::size_type v36 = v47;
    goto LABEL_68;
  }
  if (v39 == 3)
  {
LABEL_68:
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v45 = (std::string::size_type)a4;
    }
    else {
      std::string::size_type v45 = a4->__r_.__value_.__r.__words[0];
    }
    std::string::resize(a4, (std::string::size_type)&v36[-v45], 0);
    return;
  }
LABEL_60:
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(a4->__r_.__value_.__l.__data_);
  }
LABEL_62:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      return;
    }
LABEL_73:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  std::string::size_type v44 = *(void *)(a1 + 8);
  if (!v44) {
    goto LABEL_73;
  }
  std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, v44);
}

void sub_1B1E9511C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::tennessee::DecodeBytesToString<char>@<X0>(char *__s@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, __s);
}

void std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8[abi:ne180100](std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, std::wstring *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 184) = 0;
  if (!*(void *)(a1 + 48)) {
    goto LABEL_23;
  }
  uint64_t v7 = a2;
  std::basic_string<char32_t>::basic_string[abi:ne180100](a4, 2 * ((char *)a3 - (char *)a2), 0);
  if (a3 != v7)
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::wstring::size_type v8 = 4;
    }
    else {
      std::wstring::size_type v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::wstring::resize(a4, v8, 0);
    long long v9 = *(_OWORD *)(a1 + 136);
    v30[4] = *(_OWORD *)(a1 + 120);
    v30[5] = v9;
    long long v10 = *(_OWORD *)(a1 + 168);
    v30[6] = *(_OWORD *)(a1 + 152);
    v30[7] = v10;
    long long v11 = *(_OWORD *)(a1 + 72);
    v30[0] = *(_OWORD *)(a1 + 56);
    v30[1] = v11;
    __n128 v12 = *(__n128 *)(a1 + 88);
    long long v13 = *(_OWORD *)(a1 + 104);
    std::wstring::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      uint64_t v15 = (char *)a4;
    }
    else {
      uint64_t v15 = (char *)a4->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::wstring::size_type size = a4->__r_.__value_.__l.__size_;
    }
    uint64_t v16 = &v15[4 * size];
    v30[2] = *(_OWORD *)(a1 + 88);
    v30[3] = v13;
    do
    {
      int v17 = (*(uint64_t (**)(void, _OWORD *, int *, int *, int **, char *, char *, uint64_t *, __n128))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v30, v7, a3, &v29, v15, v16, &v28, v12);
      BOOL v18 = v29 == v7;
      *(void *)(a1 + 184) += (char *)v29 - (char *)v7;
      if (v18) {
        goto LABEL_34;
      }
      if (v17 != 1)
      {
        if (v17)
        {
          if (v17 != 3)
          {
LABEL_34:
            if ((*((unsigned char *)&a4->__r_.__value_.__s + 23) & 0x80) != 0) {
              goto LABEL_35;
            }
            goto LABEL_23;
          }
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v25 = (char *)a4;
          }
          else {
            long long v25 = (char *)a4->__r_.__value_.__r.__words[0];
          }
          std::wstring::resize(a4, (v15 - v25) >> 2, 0);
          std::wstring::append[abi:ne180100]<wchar_t const*,0>(a4, v7, a3);
        }
        else
        {
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v27 = a4;
          }
          else {
            std::string::size_type v27 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
          }
          std::wstring::resize(a4, (v28 - (uint64_t)v27) >> 2, 0);
        }
        return;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = a4;
      }
      else {
        uint64_t v19 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
      }
      uint64_t v20 = v28 - (void)v19;
      std::wstring::resize(a4, (v28 - (uint64_t)v19) >> 1, 0);
      std::wstring::size_type v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      char v22 = v21;
      long long v23 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
      if ((v21 & 0x80u) == 0) {
        long long v23 = a4;
      }
      uint64_t v15 = (char *)v23 + v20;
      if ((v21 & 0x80u) != 0) {
        std::wstring::size_type v21 = a4->__r_.__value_.__l.__size_;
      }
      uint64_t v16 = (char *)v23 + 4 * v21;
      uint64_t v7 = v29;
    }
    while (v29 < a3);
    if ((v22 & 0x80) == 0) {
      goto LABEL_23;
    }
LABEL_35:
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_23:
    long long v24 = (const std::wstring::value_type **)(a1 + 24);
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
      if (*(unsigned char *)(a1 + 47))
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v24;
        a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
        return;
      }
LABEL_41:
      std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
    }
    std::wstring::size_type v26 = *(void *)(a1 + 32);
    if (!v26) {
      goto LABEL_41;
    }
    std::basic_string<char32_t>::__init_copy_ctor_external(a4, *v24, v26);
  }
}

void sub_1B1E95434(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::rescoring::Rescorer::Rescorer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const void **)quasar::rescoring::RescorerConfig::RescorerConfig(a1, a2);
  quasar::rescoring::RescorerConfig::loadAdapterModelMultiplexer(v2);
}

void sub_1B1E955A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13) {
    -[_EARPhoneticMatchBuilder initWithModelRoot:jsonConfigFile:dataFeeds:](a13);
  }
  uint64_t v23 = *v21;
  *std::wstring::size_type v21 = 0;
  if (v23) {
    std::default_delete<quasar::SimpleFstLmRescorer>::operator()[abi:ne180100]((uint64_t)v21, v23);
  }
  quasar::rescoring::AdapterModelMultiplexer::~AdapterModelMultiplexer(v20);
  quasar::rescoring::RescorerConfig::~RescorerConfig(v19);
  _Unwind_Resume(a1);
}

void sub_1B1E95638()
{
}

void std::make_unique[abi:ne180100]<quasar::SimpleFstLmRescorer,quasar::SimpleFstLmRescorerOptions,std::shared_ptr<quasar::QsrTextSymbolTable const> const&,std::shared_ptr<quasar::OnlineLmRescoringDecoder const> const&>()
{
}

void sub_1B1E95704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x1B3EA8670](v12, 0x1072C40140BB7A5);
  _Unwind_Resume(a1);
}

void quasar::rescoring::AdapterModelMultiplexer::~AdapterModelMultiplexer(quasar::rescoring::AdapterModelMultiplexer *this)
{
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy((uint64_t)this, *((void **)this + 1));
}

BOOL quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(uint64_t a1, int *a2, int a3, int32x2_t *a4, int32x2_t *a5, int32x2_t *a6, int32x2_t *a7, int32x2_t *a8, void *a9)
{
  BOOL v14 = a3 != 7 || *(unsigned char *)(a1 + 139) != 0;
  BOOL v190 = v14;
  uint64_t v15 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4));
  std::string::basic_string[abi:ne180100](__dst, (char *)v15 + *v15 + 4, *(unsigned int *)((char *)v15 + *v15));
  uint64_t v16 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 6));
  unint64_t v17 = *(unsigned int *)((char *)v16 + *v16);
  if (v17)
  {
    unint64_t v18 = *(int *)(a1 + 1744);
    if (quasar::gLogLevel >= 4)
    {
      long long v233 = 0u;
      long long v234 = 0u;
      long long v231 = 0u;
      long long v232 = 0u;
      long long v229 = 0u;
      long long v230 = 0u;
      long long v227 = 0u;
      long long v228 = 0u;
      long long v225 = 0u;
      long long v226 = 0u;
      long long v223 = 0u;
      long long v224 = 0u;
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Rescoring n-best list with ", 27);
      uint64_t v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" entries.", 9);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    std::vector<std::vector<float>>::vector(&v214, v18);
    LODWORD(v195) = 0;
    std::vector<float>::vector(&__p, v17, &v195);
    std::vector<std::vector<float>>::vector(v213, v18, (uint64_t)&__p);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    uint64_t v180 = a7;
    v212[0] = v213;
    v212[1] = v17;
    v212[2] = v18;
    float v20 = *(float *)(a1 + 80);
    kaldi::Matrix<float>::Resize(a4, v17, 1, 0, 0);
    if (a5) {
      kaldi::Matrix<float>::Resize(a5, v17, 1, 0, 0);
    }
    if (a6) {
      kaldi::Matrix<float>::Resize(a6, v17, 1, 0, 0);
    }
    if (a8) {
      kaldi::Matrix<float>::Resize(a8, 1, v18, 0, 0);
    }
    uint64_t v209 = 0;
    uint64_t v210 = 0;
    uint64_t v211 = 0;
    unint64_t v206 = 0;
    int v207 = 0;
    v208 = 0;
    uint64_t v203 = 0;
    uint64_t v204 = 0;
    uint64_t v205 = 0;
    uint64_t v21 = *(void *)(a1 + 1688);
    uint64_t v188 = *(void *)(v21 + 120);
    uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(v21 + 96) + 112))(*(void *)(v21 + 96));
    int v186 = a3;
    uint64_t v184 = a5;
    uint64_t v178 = a4;
    if ((v22 & 0x8000000000000000) == 0) {
      v22 += *(void *)(v21 + 120);
    }
    uint64_t v191 = v22;
    uint64_t v23 = 0;
    uint64_t v182 = a1 + 1816;
    long long v187 = (void *)(a1 + 1728);
    uint64_t v193 = (float *)(a1 + 84);
    uint64_t v194 = a1;
    unint64_t v179 = v17;
    if (v17 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = v17;
    }
    uint64_t v185 = v24;
    while (1)
    {
      long long v25 = (unsigned __int16 *)((char *)a2 - *a2);
      if (*v25 < 7u)
      {
        uint64_t v26 = 0;
        int v27 = v186;
      }
      else
      {
        uint64_t v26 = v25[3];
        int v27 = v186;
        if (v26) {
          v26 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v26);
        }
      }
      uint64_t v28 = v26 + 4 * v23;
      unsigned int v31 = *(_DWORD *)(v28 + 4);
      uint64_t v29 = v28 + 4;
      uint64_t v30 = v31;
      v202[0] = v18;
      v202[1] = v23;
      v202[2] = (uint64_t)v212;
      if (v190)
      {
        uint64_t v32 = v209;
        for (uint64_t i = v210; i != v32; i -= 24)
        {
          if (*(char *)(i - 1) < 0) {
            operator delete(*(void **)(i - 24));
          }
        }
        uint64_t v210 = v32;
        uint64_t v24 = v185;
      }
      else
      {
        int v207 = (char *)v206;
      }
      BOOL v34 = (int *)(v29 + v30);
      if (v27 == 5)
      {
        quasar::rescoring::extractPostItnFromNBestListEntry(v34, &v195);
        if (SHIBYTE(v197) >= 0) {
          unint64_t v35 = HIBYTE(v197);
        }
        else {
          unint64_t v35 = (unint64_t)v196;
        }
        if (v35)
        {
          std::string::size_type v36 = v203;
          std::string::size_type v37 = (const std::string **)v204;
          while (v37 != v36)
          {
            v37 -= 4;
            *(void *)&long long __p = v37;
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          }
          uint64_t v204 = (char *)v36;
          if (((*(uint64_t (**)(void, void **, const std::string ***))(**(void **)(v194 + 1800) + 16))(*(void *)(v194 + 1800), &v195, &v203) & 1) == 0)
          {
            long long v233 = 0u;
            long long v234 = 0u;
            long long v231 = 0u;
            long long v232 = 0u;
            long long v229 = 0u;
            long long v230 = 0u;
            long long v227 = 0u;
            long long v228 = 0u;
            long long v225 = 0u;
            long long v226 = 0u;
            long long v223 = 0u;
            long long v224 = 0u;
            long long v221 = 0u;
            long long v222 = 0u;
            long long v219 = 0u;
            long long v220 = 0u;
            long long __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            uint64_t v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Tokenizer failed to tokenize '", 30);
            if (SHIBYTE(v197) >= 0) {
              uint64_t v166 = &v195;
            }
            else {
              uint64_t v166 = v195;
            }
            if (SHIBYTE(v197) >= 0) {
              uint64_t v167 = HIBYTE(v197);
            }
            else {
              uint64_t v167 = (uint64_t)v196;
            }
            float v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)v166, v167);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"'.", 2);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
          }
          if (v204 - (char *)v203 != 32)
          {
            long long v233 = 0u;
            long long v234 = 0u;
            long long v231 = 0u;
            long long v232 = 0u;
            long long v229 = 0u;
            long long v230 = 0u;
            long long v227 = 0u;
            long long v228 = 0u;
            long long v225 = 0u;
            long long v226 = 0u;
            long long v223 = 0u;
            long long v224 = 0u;
            long long v221 = 0u;
            long long v222 = 0u;
            long long v219 = 0u;
            long long v220 = 0u;
            long long __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Tokenizer returned ", 19);
            uint64_t v169 = (void *)std::ostream::operator<<();
            uint64_t v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)" hypotheses, ", 13);
            uint64_t v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)"instead of expected singleton for '", 35);
            if (SHIBYTE(v197) >= 0) {
              uint64_t v172 = &v195;
            }
            else {
              uint64_t v172 = v195;
            }
            if (SHIBYTE(v197) >= 0) {
              uint64_t v173 = HIBYTE(v197);
            }
            else {
              uint64_t v173 = (uint64_t)v196;
            }
            BOOL v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)v172, v173);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)"'.", 2);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
          }
          std::string::size_type v40 = *v203;
          int v39 = v203[1];
          while (v40 != v39)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, " ");
            quasar::splitAndTrimNoEmpty(v40, (char *)&__p, (uint64_t)&v209);
            if (SBYTE7(v219) < 0) {
              operator delete((void *)__p);
            }
            std::string::size_type v40 = (const std::string *)((char *)v40 + 32);
          }
          if (quasar::gLogLevel > 5)
          {
            long long v233 = 0u;
            long long v234 = 0u;
            long long v231 = 0u;
            long long v232 = 0u;
            long long v229 = 0u;
            long long v230 = 0u;
            long long v227 = 0u;
            long long v228 = 0u;
            long long v225 = 0u;
            long long v226 = 0u;
            long long v223 = 0u;
            long long v224 = 0u;
            long long v221 = 0u;
            long long v222 = 0u;
            long long v219 = 0u;
            long long v220 = 0u;
            long long __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Hypothesis ", 11);
            unint64_t v41 = (void *)std::ostream::operator<<();
            std::string::size_type v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" has post-ITN text \"", 20);
            if (SHIBYTE(v197) >= 0) {
              std::string::size_type v43 = &v195;
            }
            else {
              std::string::size_type v43 = v195;
            }
            if (SHIBYTE(v197) >= 0) {
              uint64_t v44 = HIBYTE(v197);
            }
            else {
              uint64_t v44 = (uint64_t)v196;
            }
            std::string::size_type v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
            uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"\" ", 2);
            uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"and tokenized post-ITN tokens ", 30);
            long long v48 = quasar::lm::operator<<<std::string>(v47, &v209);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
          }
        }
        else
        {
          quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(quasar::rescoring::NBestList const&,quasar::rescoring::FeatureType,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>> *)const::$_2::operator()(v202);
        }
        if (SHIBYTE(v197) < 0)
        {
          operator delete(v195);
          if (v35) {
            goto LABEL_123;
          }
        }
        else if (v35)
        {
          goto LABEL_123;
        }
        goto LABEL_143;
      }
      if (v27 != 7)
      {
        long long v233 = 0u;
        long long v234 = 0u;
        long long v231 = 0u;
        long long v232 = 0u;
        long long v229 = 0u;
        long long v230 = 0u;
        long long v227 = 0u;
        long long v228 = 0u;
        long long v225 = 0u;
        long long v226 = 0u;
        long long v223 = 0u;
        long long v224 = 0u;
        long long v221 = 0u;
        long long v222 = 0u;
        long long v219 = 0u;
        long long v220 = 0u;
        long long __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown language model feature.", 31);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
      }
      if (*(unsigned char *)(v194 + 139))
      {
        quasar::rescoring::extractPreItnFromNBestListEntry(v34, &__p);
        if ((SBYTE7(v219) & 0x80u) == 0) {
          uint64_t v38 = BYTE7(v219);
        }
        else {
          uint64_t v38 = *((void *)&__p + 1);
        }
        if (v38) {
          quasar::rescoring::PreItnTokenExtractor::operator()(v182, (uint64_t)&__p, (uint64_t)&v209);
        }
        else {
          quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(quasar::rescoring::NBestList const&,quasar::rescoring::FeatureType,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>> *)const::$_2::operator()(v202);
        }
        if (SBYTE7(v219) < 0)
        {
          operator delete((void *)__p);
          if (v38) {
            goto LABEL_123;
          }
        }
        else if (v38)
        {
          goto LABEL_123;
        }
        goto LABEL_143;
      }
      long long v49 = (unsigned int *)((char *)v34 + *(unsigned __int16 *)((char *)v34 - *v34 + 8));
      uint64_t v50 = *v49;
      long long v52 = (unsigned int *)((char *)v49 + v50 + 4);
      uint64_t v51 = *(unsigned int *)((char *)v49 + v50);
      if (!v51) {
        goto LABEL_123;
      }
      long long v53 = &v52[v51];
      while (1)
      {
        long long v54 = (int *)((char *)v52 + *v52);
        long long v55 = (unsigned __int16 *)((char *)v54 - *v54);
        if (*v55 >= 9u && (uint64_t v56 = v55[4]) != 0)
        {
          int v57 = *(int *)((char *)v54 + v56);
          if (v57 == -1)
          {
            if (quasar::gLogLevel >= 2)
            {
              long long v233 = 0u;
              long long v234 = 0u;
              long long v231 = 0u;
              long long v232 = 0u;
              long long v229 = 0u;
              long long v230 = 0u;
              long long v227 = 0u;
              long long v228 = 0u;
              long long v225 = 0u;
              long long v226 = 0u;
              long long v223 = 0u;
              long long v224 = 0u;
              long long v221 = 0u;
              long long v222 = 0u;
              long long v219 = 0u;
              long long v220 = 0u;
              long long __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encountered OOV in pre-ITN input tokens. This is unexpected and may indicate a problem.", 87);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
            }
            goto LABEL_92;
          }
          uint64_t v58 = v57;
        }
        else
        {
          uint64_t v58 = 0;
          int v57 = 0;
        }
        if (v191 <= v58)
        {
          if (quasar::gLogLevel >= 4)
          {
            long long v233 = 0u;
            long long v234 = 0u;
            long long v231 = 0u;
            long long v232 = 0u;
            long long v229 = 0u;
            long long v230 = 0u;
            long long v227 = 0u;
            long long v228 = 0u;
            long long v225 = 0u;
            long long v226 = 0u;
            long long v223 = 0u;
            long long v224 = 0u;
            long long v221 = 0u;
            long long v222 = 0u;
            long long v219 = 0u;
            long long v220 = 0u;
            long long __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encountered pre-ITN input token with identifier that exceeds the symbol table. ", 79);
            uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"If the system which generated the pre-ITN uses the same symbol table as the rescoring system, ", 94);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"then this indicates that we're dealing with a personalized tokens. Substituing by OOV.", 86);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
          }
LABEL_92:
          uint64_t v58 = -1;
LABEL_93:
          uint64_t v66 = v207;
          if (v207 >= v208)
          {
            std::string::size_type v68 = (char *)v206;
            uint64_t v69 = (v207 - (unsigned char *)v206) >> 3;
            unint64_t v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v71 = v208 - (unsigned char *)v206;
            if ((v208 - (unsigned char *)v206) >> 2 > v70) {
              unint64_t v70 = v71 >> 2;
            }
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v72 = v70;
            }
            if (v72)
            {
              uint64_t v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v208, v72);
              std::string::size_type v68 = (char *)v206;
              uint64_t v66 = v207;
            }
            else
            {
              uint64_t v73 = 0;
            }
            uint64_t v74 = (uint64_t *)&v73[8 * v69];
            *uint64_t v74 = v58;
            uint64_t v67 = (char *)(v74 + 1);
            while (v66 != v68)
            {
              uint64_t v75 = *((void *)v66 - 1);
              v66 -= 8;
              *--uint64_t v74 = v75;
            }
            unint64_t v206 = v74;
            int v207 = v67;
            v208 = &v73[8 * v72];
            if (v68) {
              operator delete(v68);
            }
          }
          else
          {
            *(void *)int v207 = v58;
            uint64_t v67 = v66 + 8;
          }
          int v207 = v67;
          goto LABEL_110;
        }
        if (v188 > v58) {
          break;
        }
        if (!*(void *)(v194 + 1736)) {
          goto LABEL_93;
        }
        uint64_t v59 = v187;
        uint64_t v60 = *v187;
        if (!*v187) {
          goto LABEL_93;
        }
        do
        {
          int v61 = *(_DWORD *)(v60 + 28);
          BOOL v62 = v61 < v57;
          if (v61 >= v57) {
            uint64_t v63 = (uint64_t *)v60;
          }
          else {
            uint64_t v63 = (uint64_t *)(v60 + 8);
          }
          if (!v62) {
            uint64_t v59 = (void *)v60;
          }
          uint64_t v60 = *v63;
        }
        while (*v63);
        if (v59 == v187 || v57 < *((_DWORD *)v59 + 7)) {
          goto LABEL_93;
        }
        if (quasar::gLogLevel >= 6)
        {
          long long v233 = 0u;
          long long v234 = 0u;
          long long v231 = 0u;
          long long v232 = 0u;
          long long v229 = 0u;
          long long v230 = 0u;
          long long v227 = 0u;
          long long v228 = 0u;
          long long v225 = 0u;
          long long v226 = 0u;
          long long v223 = 0u;
          long long v224 = 0u;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Found unpronounced token in hypothesis; filtering token for LM scoring.",
            71);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
        }
LABEL_110:
        if (++v52 == v53) {
          goto LABEL_123;
        }
      }
      if (quasar::gLogLevel >= 1)
      {
        long long v233 = 0u;
        long long v234 = 0u;
        long long v231 = 0u;
        long long v232 = 0u;
        long long v229 = 0u;
        long long v230 = 0u;
        long long v227 = 0u;
        long long v228 = 0u;
        long long v225 = 0u;
        long long v226 = 0u;
        long long v223 = 0u;
        long long v224 = 0u;
        long long v221 = 0u;
        long long v222 = 0u;
        long long v219 = 0u;
        long long v220 = 0u;
        long long __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        float v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encountered a pre-ITN token out of bounds for the symbol table. This may indicate a serious error. ", 99);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Skipping utterance.", 19);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
      }
      int v207 = (char *)v206;
LABEL_123:
      if (v190)
      {
        uint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((v210 - v209) >> 3);
        if (v77) {
          goto LABEL_125;
        }
LABEL_132:
        if (quasar::gLogLevel >= 2)
        {
          long long v233 = 0u;
          long long v234 = 0u;
          long long v231 = 0u;
          long long v232 = 0u;
          long long v229 = 0u;
          long long v230 = 0u;
          long long v227 = 0u;
          long long v228 = 0u;
          long long v225 = 0u;
          long long v226 = 0u;
          long long v223 = 0u;
          long long v224 = 0u;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encountered empty hypothesis. Is there another error above that may explain it? If not, then this is an odd edge-case.", 118);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
        }
        quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(quasar::rescoring::NBestList const&,quasar::rescoring::FeatureType,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>> *)const::$_2::operator()(v202);
      }
      else
      {
        uint64_t v77 = (v207 - (unsigned char *)v206) >> 3;
        if (!v77) {
          goto LABEL_132;
        }
LABEL_125:
        unint64_t v78 = v77 + 1;
        if (v184) {
          *(float *)(*(void *)v184 + 4 * v184[2].i32[0] * (int)v23) = (float)v78;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        quasar::LmInfo::LmInfo((uint64_t)&v195, 1, &__p);
        if (SBYTE7(v219) < 0) {
          operator delete((void *)__p);
        }
        uint64_t v79 = *(void *)(v194 + 1792);
        if (v190) {
          int v80 = quasar::SimpleFstLmRescorer::computeLmScore(v79, &v209, (uint64_t)&v195);
        }
        else {
          int v80 = quasar::SimpleFstLmRescorer::computeLmScore(v79, (uint64_t *)&v206, (uint64_t)&v195, 0);
        }
        if (v80)
        {
          quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(quasar::rescoring::NBestList const&,quasar::rescoring::FeatureType,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>> *)const::$_2::operator()(v202);
        }
        else
        {
          uint64_t v81 = v196;
          if (v78 != 0x2E8BA2E8BA2E8BA3 * ((v197 - (unsigned char *)v196) >> 3))
          {
            long long v233 = 0u;
            long long v234 = 0u;
            long long v231 = 0u;
            long long v232 = 0u;
            long long v229 = 0u;
            long long v230 = 0u;
            long long v227 = 0u;
            long long v228 = 0u;
            long long v225 = 0u;
            long long v226 = 0u;
            long long v223 = 0u;
            long long v224 = 0u;
            long long v221 = 0u;
            long long v222 = 0u;
            long long v219 = 0u;
            long long v220 = 0u;
            long long __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Number of token infos (", 23);
            BOOL v175 = (void *)std::ostream::operator<<();
            unint64_t v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)") ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)"exceeds expected number of tokens (", 35);
            int v177 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)").", 2);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
          }
          if (v196 != (void *)v197)
          {
            uint64_t v192 = v197;
            unint64_t v82 = 0;
            do
            {
              uint64_t v83 = v81[5];
              uint64_t v84 = v81[6];
              unint64_t v85 = v18;
              if (v18 != (v84 - v83) >> 2)
              {
                long long v233 = 0u;
                long long v234 = 0u;
                long long v231 = 0u;
                long long v232 = 0u;
                long long v229 = 0u;
                long long v230 = 0u;
                long long v227 = 0u;
                long long v228 = 0u;
                long long v225 = 0u;
                long long v226 = 0u;
                long long v223 = 0u;
                long long v224 = 0u;
                long long v221 = 0u;
                long long v222 = 0u;
                long long v219 = 0u;
                long long v220 = 0u;
                long long __p = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"FstLmScorer returned scores for ", 32);
                unint64_t v162 = (void *)std::ostream::operator<<();
                uint64_t v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)" models, ", 9);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"whereas ", 8);
                uint64_t v164 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)" were expected.", 15);
                quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
              }
              if (v84 != v83)
              {
                unint64_t v86 = 0;
                do
                {
                  if (!*((unsigned char *)v81 + 36) || (uint64_t v87 = v193, !*(unsigned char *)(v194 + 88))) {
                    uint64_t v87 = (float *)(v83 + 4 * v86);
                  }
                  float v88 = *v87;
                  uint64_t v89 = (float **)&v214[3 * v86];
                  uint64_t v91 = v89 + 1;
                  long long v90 = v89[1];
                  uint64_t v93 = v89 + 2;
                  unint64_t v92 = (unint64_t)v89[2];
                  if ((unint64_t)v90 >= v92)
                  {
                    unint64_t v95 = *v89;
                    uint64_t v96 = v90 - *v89;
                    unint64_t v97 = v96 + 1;
                    if ((unint64_t)(v96 + 1) >> 62) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v98 = v92 - (void)v95;
                    if (v98 >> 1 > v97) {
                      unint64_t v97 = v98 >> 1;
                    }
                    if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v99 = v97;
                    }
                    if (v99)
                    {
                      uint64_t v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v93, v99);
                      long long v90 = *v91;
                      unint64_t v95 = *v89;
                    }
                    else
                    {
                      uint64_t v100 = 0;
                    }
                    uint64_t v101 = (float *)&v100[4 * v96];
                    *uint64_t v101 = v88;
                    long long v94 = v101 + 1;
                    while (v90 != v95)
                    {
                      int v102 = *((_DWORD *)v90-- - 1);
                      *((_DWORD *)v101-- - 1) = v102;
                    }
                    void *v89 = v101;
                    *uint64_t v91 = v94;
                    *uint64_t v93 = &v100[4 * v99];
                    if (v95) {
                      operator delete(v95);
                    }
                  }
                  else
                  {
                    *long long v90 = v88;
                    long long v94 = v90 + 1;
                  }
                  *uint64_t v91 = v94;
                  *(float *)(*(void *)(*(void *)v212[0] + 24 * v86) + 4 * v23) = v88
                                                                                   + *(float *)(*(void *)(*(void *)v212[0] + 24 * v86)
                                                                                              + 4 * v23);
                  ++v86;
                  uint64_t v83 = v81[5];
                }
                while (v86 < (v81[6] - v83) >> 2);
              }
              v82 += *((unsigned __int8 *)v81 + 36);
              v81 += 11;
              unint64_t v18 = v85;
            }
            while (v81 != v192);
            uint64_t v24 = v185;
            if (a6 && v82) {
              *(float *)(*(void *)a6 + 4 * a6[2].i32[0] * (int)v23) = (float)v82;
            }
          }
        }
        if (v200)
        {
          unint64_t v201 = v200;
          operator delete(v200);
        }
        if (v199 < 0) {
          operator delete(v198);
        }
        *(void *)&long long __p = &v196;
        std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      }
LABEL_143:
      if (++v23 == v24)
      {
        unint64_t v103 = v214;
        LODWORD(v17) = v179;
        if (*v214 == v214[1])
        {
          if (quasar::gLogLevel >= 2)
          {
            long long v233 = 0u;
            long long v234 = 0u;
            long long v231 = 0u;
            long long v232 = 0u;
            long long v229 = 0u;
            long long v230 = 0u;
            long long v227 = 0u;
            long long v228 = 0u;
            long long v225 = 0u;
            long long v226 = 0u;
            long long v223 = 0u;
            long long v224 = 0u;
            long long v221 = 0u;
            long long v222 = 0u;
            long long v219 = 0u;
            long long v220 = 0u;
            long long __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            BOOL v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unable to rescore any hypotheses for utterance ", 47);
            if ((v217 & 0x80u) == 0) {
              std::string::size_type v105 = __dst;
            }
            else {
              std::string::size_type v105 = (void **)__dst[0];
            }
            if ((v217 & 0x80u) == 0) {
              uint64_t v106 = v217;
            }
            else {
              uint64_t v106 = (uint64_t)__dst[1];
            }
            long long v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)v105, v106);
            uint64_t v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)" ", 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"due to missing token scores.", 28);
            quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
            unint64_t v103 = v214;
          }
          for (int j = v215; v103 != j; v103 += 3)
          {
            unint64_t v110 = (unint64_t)v103[2];
            uint64_t v111 = v103[1];
            if ((unint64_t)v111 >= v110)
            {
              uint64_t v113 = *v103;
              uint64_t v114 = (v111 - *v103) >> 2;
              unint64_t v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v116 = v110 - (void)v113;
              if (v116 >> 1 > v115) {
                unint64_t v115 = v116 >> 1;
              }
              if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v117 = v115;
              }
              if (v117)
              {
                uint64_t v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v103 + 2), v117);
                uint64_t v113 = *v103;
                uint64_t v111 = v103[1];
              }
              else
              {
                uint64_t v118 = 0;
              }
              uint64_t v119 = &v118[4 * v114];
              *(_DWORD *)uint64_t v119 = *(_DWORD *)(v194 + 80);
              long long v112 = v119 + 4;
              while (v111 != v113)
              {
                int v120 = *((_DWORD *)v111 - 1);
                v111 -= 4;
                *((_DWORD *)v119 - 1) = v120;
                v119 -= 4;
              }
              *unint64_t v103 = v119;
              v103[1] = v112;
              v103[2] = &v118[4 * v117];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v111 = *(_DWORD *)(v194 + 80);
              long long v112 = v111 + 4;
            }
            v103[1] = v112;
          }
        }
        if (a9)
        {
          uint64_t v122 = *v214;
          int v121 = v214[1];
          unint64_t v123 = (v121 - *v214) >> 2;
          kaldi::Matrix<double>::Matrix((uint64_t)&v195, v18, v123, 0, 0);
          if (v18)
          {
            uint64_t v124 = 0;
            uint64_t v125 = v214;
            long long v126 = (char *)v195;
            int v127 = (int)v197;
            if (v123 <= 1) {
              uint64_t v128 = 1;
            }
            else {
              uint64_t v128 = v123;
            }
            do
            {
              if (v121 != v122)
              {
                uint64_t v129 = 0;
                uint64_t v130 = 0;
                unint64_t v131 = v125[3 * v124];
                do
                {
                  *(double *)&v126[8 * v127 * (int)v124 + (v129 >> 29)] = *(float *)&v131[4 * v130++];
                  v129 += 0x100000000;
                }
                while (v128 != v130);
              }
              ++v124;
            }
            while (v124 != v18);
          }
          kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>>::CheckImpl(a9);
          if (((*(uint64_t (**)(void, void **, void **))(*(void *)*a9 + 8))(*a9, __dst, &v195) & 1) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error in TableWriter::Write", 27);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          kaldi::Matrix<float>::~Matrix((uint64_t)&v195);
        }
        if (v18 <= 1)
        {
          int v145 = 0;
          uint64_t v146 = 0;
          uint64_t v147 = *(void *)v213[0];
          int32x2_t v148 = *v178;
          __int32 v149 = v178[2].i32[0];
          do
          {
            float v150 = *(float *)(v147 + 4 * v146);
            if ((LODWORD(v150) & 0x7FFFFFFFu) >= 0x7F800000) {
              float v150 = v20;
            }
            *(float *)(*(void *)&v148 + 4 * v145) = v150;
            if (a8) {
              *(_DWORD *)a8->i32[0] = 1065353216;
            }
            ++v146;
            v145 += v149;
          }
          while (v185 != v146);
        }
        else
        {
          float v132 = 1.0 / (double)v18;
          *(float *)&long long __p = v132;
          std::vector<float>::vector(&v195, v18, &__p);
          kaldi::quasar::EstimateLinearWeights((uint64_t)&v214, (float **)&v195, 20, 0.00097656);
          if (quasar::gLogLevel >= 6)
          {
            long long v233 = 0u;
            long long v234 = 0u;
            long long v231 = 0u;
            long long v232 = 0u;
            long long v229 = 0u;
            long long v230 = 0u;
            long long v227 = 0u;
            long long v228 = 0u;
            long long v225 = 0u;
            long long v226 = 0u;
            long long v223 = 0u;
            long long v224 = 0u;
            long long v221 = 0u;
            long long v222 = 0u;
            long long v219 = 0u;
            long long v220 = 0u;
            long long __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            long long v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Rescoring estimated weights ", 28);
            uint64_t v134 = quasar::lm::operator<<<float>(v133, (uint64_t *)&v195);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
          }
          LODWORD(v202[0]) = 0;
          std::vector<float>::vector(&__p, v179, v202);
          kaldi::quasar::InterpolateLogScoresLinearly((uint64_t)v213, (uint64_t)&v195, (uint64_t *)&__p);
          int v135 = 0;
          uint64_t v136 = 0;
          unint64_t v137 = (float *)__p;
          int32x2_t v138 = *v178;
          __int32 v139 = v178[2].i32[0];
          do
          {
            float v140 = v137[v136];
            if ((LODWORD(v140) & 0x7FFFFFFFu) >= 0x7F800000) {
              float v140 = v20;
            }
            *(float *)(*(void *)&v138 + 4 * v135) = v140;
            ++v136;
            v135 += v139;
          }
          while (v185 != v136);
          if (!a8) {
            goto LABEL_224;
          }
          uint64_t v141 = 0;
          uint64_t v142 = 0;
          uint64_t v143 = v195;
          int32x2_t v144 = *a8;
          do
          {
            *(_DWORD *)(*(void *)&v144 + (v141 >> 30)) = v143[v142++];
            v141 += 0x100000000;
          }
          while (v18 != v142);
          if (v137)
          {
LABEL_224:
            *((void *)&__p + 1) = v137;
            operator delete(v137);
          }
          if (v195)
          {
            long long v196 = v195;
            operator delete(v195);
          }
        }
        if (v180)
        {
          kaldi::Matrix<float>::Resize(v180, v179, v18, 0, 0);
          uint64_t v151 = 0;
          unint64_t v152 = (uint64_t *)v213[0];
          if (v18 <= 1) {
            uint64_t v153 = 1;
          }
          else {
            uint64_t v153 = v18;
          }
          do
          {
            if (v18)
            {
              uint64_t v154 = 0;
              uint64_t v155 = 0;
              uint64_t v156 = *(void *)v180 + 4 * v180[2].i32[0] * (int)v151;
              uint64_t v157 = v152;
              do
              {
                uint64_t v158 = *v157;
                v157 += 3;
                float v159 = *(float *)(v158 + 4 * v151);
                if ((LODWORD(v159) & 0x7FFFFFFFu) >= 0x7F800000) {
                  float v159 = v20;
                }
                *(float *)(v156 + (v154 >> 30)) = v159;
                ++v155;
                v154 += 0x100000000;
              }
              while (v153 != v155);
            }
            ++v151;
          }
          while (v151 != v185);
        }
        if (quasar::gLogLevel >= 6)
        {
          long long v233 = 0u;
          long long v234 = 0u;
          long long v231 = 0u;
          long long v232 = 0u;
          long long v229 = 0u;
          long long v230 = 0u;
          long long v227 = 0u;
          long long v228 = 0u;
          long long v225 = 0u;
          long long v226 = 0u;
          long long v223 = 0u;
          long long v224 = 0u;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          long long __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          long long v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Rescored hypothesis log-probabilities: ", 39);
          kaldi::MatrixBase<float>::Write(v178, v160, 0, 0);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
        }
        *(void *)&long long __p = &v203;
        std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (v206)
        {
          int v207 = (char *)v206;
          operator delete(v206);
        }
        *(void *)&long long __p = &v209;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        *(void *)&long long __p = v213;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        *(void *)&long long __p = &v214;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_250;
      }
    }
  }
  if (quasar::gLogLevel >= 2)
  {
    long long v233 = 0u;
    long long v234 = 0u;
    long long v231 = 0u;
    long long v232 = 0u;
    long long v229 = 0u;
    long long v230 = 0u;
    long long v227 = 0u;
    long long v228 = 0u;
    long long v225 = 0u;
    long long v226 = 0u;
    long long v223 = 0u;
    long long v224 = 0u;
    long long v221 = 0u;
    long long v222 = 0u;
    long long v219 = 0u;
    long long v220 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unable to rescore n-best list due to lack of hypotheses.", 56);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  }
LABEL_250:
  if ((char)v217 < 0) {
    operator delete(__dst[0]);
  }
  return v17 != 0;
}

void sub_1B1E96FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a67);
  JUMPOUT(0x1B1E97000);
}

void sub_1B1E96FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (v73 < 0) {
    operator delete(v72);
  }
  JUMPOUT(0x1B1E97000);
}

void sub_1B1E96FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  quasar::LmInfo::~LmInfo((quasar::LmInfo *)&a30);
  a30 = (uint64_t)&a46;
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (__p)
  {
    a50 = (uint64_t)__p;
    operator delete(__p);
  }
  a30 = (uint64_t)&a52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = (uint64_t)&a58;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = (uint64_t)&a61;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (a69 < 0) {
    operator delete(a64);
  }
  _Unwind_Resume(a1);
}

float quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(quasar::rescoring::NBestList const&,quasar::rescoring::FeatureType,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>> *)const::$_2::operator()(uint64_t *a1)
{
  if (quasar::gLogLevel >= 2)
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Unable to compute LM scores for hypothesis ", 43);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)".", 1);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v8);
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = **(uint64_t ***)a1[2];
    do
    {
      uint64_t v7 = *v6;
      v6 += 3;
      float result = *(float *)(v7 + 4 * v5) + -INFINITY;
      *(float *)(v7 + 4 * v5) = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_1B1E9713C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::LmInfo::~LmInfo(quasar::LmInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  uint64_t v3 = (void **)((char *)this + 8);
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void *quasar::lm::operator<<<float>(void *a1, uint64_t *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v4 += 4;
      uint64_t v6 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  return a1;
}

BOOL quasar::rescoring::Rescorer::rescoreHypotheses(uint64_t a1, int *a2, void *a3)
{
  uint64_t v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (!*(int *)((char *)a2 + v3[3] + *(unsigned int *)((char *)a2 + v3[3]))) {
    return 0;
  }
  uint64_t v7 = a1 + 1760;
  if (*v3 >= 9u && (uint64_t v8 = v3[4]) != 0) {
    long long v9 = (int *)((char *)a2 + v8 + *(unsigned int *)((char *)a2 + v8));
  }
  else {
    long long v9 = 0;
  }
  Model = (quasar::rescoring::AdapterModel *)quasar::rescoring::AdapterModelMultiplexer::getModel(v7, v9);
  if (!Model) {
    return 0;
  }
  long long v11 = Model;
  uint64_t Featurizer = quasar::rescoring::AdapterModel::getFeaturizer(Model);
  long long v13 = (unsigned __int8 ***)(*(uint64_t (**)(quasar::rescoring::AdapterModel *))(*(void *)v11 + 24))(v11);
  quasar::rescoring::Rescorer::computeFeatureValues(a1, Featurizer, v13, a2, 0, (uint64_t)&v20);
  BOOL v14 = v20 == 1;
  if (v20 == 1)
  {
    uint64_t v15 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 6));
    unint64_t v16 = *(unsigned int *)((char *)v15 + *v15);
    std::vector<float>::resize((uint64_t)a3, v16);
    if (v16)
    {
      for (unint64_t i = 0; i != v16; ++i)
      {
        (*(void (**)(quasar::rescoring::AdapterModel *, int *, void **, unint64_t))(*(void *)v11 + 16))(v11, a2, v21, i);
        if (i >= (uint64_t)(a3[1] - *a3) >> 2) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        *(_DWORD *)(*a3 + 4 * i) = v18;
      }
    }
  }
  std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::destroy((uint64_t)v21, v21[1]);
  return v14;
}

void sub_1B1E973DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void quasar::rescoring::Rescorer::computeFeatureValues(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 ***a3@<X2>, int *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (unsigned int *)((char *)a4 + *(unsigned __int16 *)((char *)a4 - *a4 + 6));
  uint64_t v45 = *(unsigned int *)((char *)v8 + *v8);
  if (v45)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 1744);
    v54[0] = 0;
    v54[1] = 0;
    long long v53 = v54;
    if (*(unsigned char *)(a1 + 138))
    {
      kaldi::Matrix<float>::Matrix((uint64_t)__dst);
      kaldi::Matrix<float>::Matrix((uint64_t)v49);
      kaldi::Matrix<float>::Matrix((uint64_t)v48);
      kaldi::Matrix<float>::Matrix((uint64_t)v47);
      kaldi::Matrix<float>::Matrix((uint64_t)v46);
      if (!quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(a1, a4, 5, (int32x2_t *)__dst, v49, v48, v47, v46, 0))
      {
        if (quasar::gLogLevel >= 2)
        {
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          memset(v57, 0, sizeof(v57));
          long long v56 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Unable to score hypotheses by re-tokenizing post-ITN.", 53);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v56);
        }
        kaldi::Matrix<float>::Resize((int32x2_t *)__dst, v45, 1, 0, 0);
        kaldi::Matrix<float>::Resize(v49, v45, 1, 0, 0);
        kaldi::Matrix<float>::Resize(v48, v45, 1, 0, 0);
        kaldi::Matrix<float>::Resize(v47, v45, v13, 0, 0);
        kaldi::Matrix<float>::Resize(v46, 1, v13, 0, 0);
      }
      BOOL v14 = operator new(1uLL);
      *BOOL v14 = 5;
      v57[0] = 0;
      long long v56 = 0uLL;
      std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(&v56, v14, (uint64_t)(v14 + 1), 1uLL);
      memset(&v57[1], 0, 48);
      operator delete(v14);
      quasar::lm::InsertOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(&v53, (uint64_t)&v56, (uint64_t)__dst);
      long long v55 = (void **)&v57[4];
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&v55);
      if (v57[1])
      {
        void v57[2] = v57[1];
        operator delete((void *)v57[1]);
      }
      if ((void)v56)
      {
        *((void *)&v56 + 1) = v56;
        operator delete((void *)v56);
      }
      uint64_t v15 = operator new(1uLL);
      *uint64_t v15 = 4;
      v57[0] = 0;
      long long v56 = 0uLL;
      std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(&v56, v15, (uint64_t)(v15 + 1), 1uLL);
      memset(&v57[1], 0, 48);
      operator delete(v15);
      quasar::lm::InsertOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(&v53, (uint64_t)&v56, (uint64_t)v49);
      long long v55 = (void **)&v57[4];
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&v55);
      if (v57[1])
      {
        void v57[2] = v57[1];
        operator delete((void *)v57[1]);
      }
      if ((void)v56)
      {
        *((void *)&v56 + 1) = v56;
        operator delete((void *)v56);
      }
      unint64_t v16 = operator new(1uLL);
      unsigned char *v16 = 19;
      v57[0] = 0;
      long long v56 = 0uLL;
      std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(&v56, v16, (uint64_t)(v16 + 1), 1uLL);
      memset(&v57[1], 0, 48);
      operator delete(v16);
      quasar::lm::InsertOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(&v53, (uint64_t)&v56, (uint64_t)v48);
      long long v55 = (void **)&v57[4];
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&v55);
      if (v57[1])
      {
        void v57[2] = v57[1];
        operator delete((void *)v57[1]);
      }
      if ((void)v56)
      {
        *((void *)&v56 + 1) = v56;
        operator delete((void *)v56);
      }
      unint64_t v17 = operator new(1uLL);
      *unint64_t v17 = 13;
      v57[0] = 0;
      long long v56 = 0uLL;
      std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(&v56, v17, (uint64_t)(v17 + 1), 1uLL);
      memset(&v57[1], 0, 48);
      operator delete(v17);
      quasar::lm::InsertOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(&v53, (uint64_t)&v56, (uint64_t)v47);
      long long v55 = (void **)&v57[4];
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&v55);
      if (v57[1])
      {
        void v57[2] = v57[1];
        operator delete((void *)v57[1]);
      }
      if ((void)v56)
      {
        *((void *)&v56 + 1) = v56;
        operator delete((void *)v56);
      }
      int v18 = operator new(1uLL);
      *int v18 = 14;
      v57[0] = 0;
      long long v56 = 0uLL;
      std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(&v56, v18, (uint64_t)(v18 + 1), 1uLL);
      memset(&v57[1], 0, 48);
      operator delete(v18);
      quasar::lm::InsertOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(&v53, (uint64_t)&v56, (uint64_t)v46);
      long long v55 = (void **)&v57[4];
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&v55);
      if (v57[1])
      {
        void v57[2] = v57[1];
        operator delete((void *)v57[1]);
      }
      if ((void)v56)
      {
        *((void *)&v56 + 1) = v56;
        operator delete((void *)v56);
      }
      kaldi::Matrix<float>::~Matrix((uint64_t)v46);
      kaldi::Matrix<float>::~Matrix((uint64_t)v47);
      kaldi::Matrix<float>::~Matrix((uint64_t)v48);
      kaldi::Matrix<float>::~Matrix((uint64_t)v49);
      kaldi::Matrix<float>::~Matrix((uint64_t)__dst);
    }
    if (*(unsigned char *)(a1 + 137))
    {
      kaldi::Matrix<float>::Matrix((uint64_t)__dst);
      kaldi::Matrix<float>::Matrix((uint64_t)v49);
      kaldi::Matrix<float>::Matrix((uint64_t)v48);
      kaldi::Matrix<float>::Matrix((uint64_t)v47);
      if (!quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(a1, a4, 7, (int32x2_t *)__dst, 0, v49, v48, v47, 0))
      {
        if (quasar::gLogLevel >= 2)
        {
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          memset(v57, 0, sizeof(v57));
          long long v56 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Unable to score hypotheses by using device-generated pre-ITN.", 61);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v56);
        }
        kaldi::Matrix<float>::Resize((int32x2_t *)__dst, v45, 1, 0, 0);
        kaldi::Matrix<float>::Resize(v49, v45, 1, 0, 0);
        kaldi::Matrix<float>::Resize(v48, v45, v13, 0, 0);
        kaldi::Matrix<float>::Resize(v47, 1, v13, 0, 0);
      }
      uint64_t v19 = operator new(1uLL);
      *uint64_t v19 = 7;
      v57[0] = 0;
      long long v56 = 0uLL;
      std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(&v56, v19, (uint64_t)(v19 + 1), 1uLL);
      memset(&v57[1], 0, 48);
      operator delete(v19);
      quasar::lm::InsertOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(&v53, (uint64_t)&v56, (uint64_t)__dst);
      v46[0] = (int32x2_t)&v57[4];
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
      if (v57[1])
      {
        void v57[2] = v57[1];
        operator delete((void *)v57[1]);
      }
      if ((void)v56)
      {
        *((void *)&v56 + 1) = v56;
        operator delete((void *)v56);
      }
      int v20 = operator new(1uLL);
      *int v20 = 18;
      v57[0] = 0;
      long long v56 = 0uLL;
      std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(&v56, v20, (uint64_t)(v20 + 1), 1uLL);
      memset(&v57[1], 0, 48);
      operator delete(v20);
      quasar::lm::InsertOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(&v53, (uint64_t)&v56, (uint64_t)v49);
      v46[0] = (int32x2_t)&v57[4];
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
      if (v57[1])
      {
        void v57[2] = v57[1];
        operator delete((void *)v57[1]);
      }
      if ((void)v56)
      {
        *((void *)&v56 + 1) = v56;
        operator delete((void *)v56);
      }
      uint64_t v21 = operator new(1uLL);
      *uint64_t v21 = 11;
      v57[0] = 0;
      long long v56 = 0uLL;
      std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(&v56, v21, (uint64_t)(v21 + 1), 1uLL);
      memset(&v57[1], 0, 48);
      operator delete(v21);
      quasar::lm::InsertOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(&v53, (uint64_t)&v56, (uint64_t)v48);
      v46[0] = (int32x2_t)&v57[4];
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
      if (v57[1])
      {
        void v57[2] = v57[1];
        operator delete((void *)v57[1]);
      }
      if ((void)v56)
      {
        *((void *)&v56 + 1) = v56;
        operator delete((void *)v56);
      }
      uint64_t v22 = operator new(1uLL);
      *uint64_t v22 = 12;
      v57[0] = 0;
      long long v56 = 0uLL;
      std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(&v56, v22, (uint64_t)(v22 + 1), 1uLL);
      memset(&v57[1], 0, 48);
      operator delete(v22);
      quasar::lm::InsertOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(&v53, (uint64_t)&v56, (uint64_t)v47);
      v46[0] = (int32x2_t)&v57[4];
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
      if (v57[1])
      {
        void v57[2] = v57[1];
        operator delete((void *)v57[1]);
      }
      if ((void)v56)
      {
        *((void *)&v56 + 1) = v56;
        operator delete((void *)v56);
      }
      kaldi::Matrix<float>::~Matrix((uint64_t)v47);
      kaldi::Matrix<float>::~Matrix((uint64_t)v48);
      kaldi::Matrix<float>::~Matrix((uint64_t)v49);
      kaldi::Matrix<float>::~Matrix((uint64_t)__dst);
    }
    if (quasar::rescoring::GenerateTransformedFeatureValues(a4, a2, a3, &v53))
    {
      uint64_t v44 = a6;
      if (a5)
      {
        uint64_t v23 = 0;
        while (1)
        {
          uint64_t v24 = quasar::rescoring::EnumValuesFeatureType(void)::values[v23];
          {
            operator new();
          }
          long long v25 = (char **)*((void *)quasar::rescoring::GetLmFeatureTypes(void)::featureTypes + 1);
          if (v25)
          {
            uint64_t v26 = (char **)((char *)quasar::rescoring::GetLmFeatureTypes(void)::featureTypes + 8);
            do
            {
              int v27 = *((char *)v25 + 25);
              BOOL v28 = v27 < (char)v24;
              if (v27 >= (char)v24) {
                uint64_t v29 = v25;
              }
              else {
                uint64_t v29 = v25 + 1;
              }
              if (!v28) {
                uint64_t v26 = v25;
              }
              long long v25 = (char **)*v29;
            }
            while (*v29);
            if (v26 != (char **)((char *)quasar::rescoring::GetLmFeatureTypes(void)::featureTypes + 8)
              && (char)v24 >= *((char *)v26 + 25))
            {
              goto LABEL_83;
            }
          }
          uint64_t v30 = operator new(1uLL);
          unsigned char *v30 = v24;
          v57[0] = 0;
          long long v56 = 0uLL;
          std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(&v56, v30, (uint64_t)(v30 + 1), 1uLL);
          memset(&v57[1], 0, 48);
          operator delete(v30);
          if (v23 == 20) {
            break;
          }
          if (((char)v24 - 11) < 4 || (char)v24 == 20)
          {
            uint64_t v31 = *(int *)(a2 + 20);
            if (v23) {
              goto LABEL_72;
            }
          }
          else
          {
            uint64_t v31 = 1;
            if (v23) {
              goto LABEL_72;
            }
          }
LABEL_79:
          __dst[0] = &v57[4];
          std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
          if (v57[1])
          {
            void v57[2] = v57[1];
            operator delete((void *)v57[1]);
          }
          if ((void)v56)
          {
            *((void *)&v56 + 1) = v56;
            operator delete((void *)v56);
          }
LABEL_83:
          if (++v23 == 22) {
            goto LABEL_101;
          }
        }
        uint64_t v31 = *(int *)(a2 + 16);
LABEL_72:
        if (v54 == (void *)std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::find<quasar::rescoring::TransformedFeatureDesc>((uint64_t)&v53, (unsigned __int8 **)&v56))
        {
          kaldi::Matrix<float>::Matrix((uint64_t)__dst, v45, v31, 0, 0);
          for (unint64_t i = 0; i != v45; ++i)
          {
            if (v31)
            {
              uint64_t v34 = 0;
              for (uint64_t j = 0; j != v31; ++j)
              {
                float AtomicFeatureValue = quasar::rescoring::Featurizer::GetAtomicFeatureValue(a2, a4, (uint64_t)&v53, i, v24 + v34);
                *(float *)((char *)__dst[0] + 4 * v51 * (int)i + (v34 >> 30)) = AtomicFeatureValue;
                v34 += 0x100000000;
              }
            }
          }
          quasar::lm::InsertOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(&v53, (uint64_t)&v56, (uint64_t)__dst);
          kaldi::Matrix<float>::~Matrix((uint64_t)__dst);
        }
        goto LABEL_79;
      }
LABEL_101:
      *(_DWORD *)uint64_t v44 = 1;
      std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>::map[abi:ne180100]((uint64_t *)(v44 + 8), (uint64_t)&v53);
    }
    else
    {
      *((void *)&v56 + 1) = 0;
      v57[0] = 0;
      *(void *)&long long v56 = (char *)&v56 + 8;
      *(_DWORD *)a6 = 4;
      std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>::map[abi:ne180100]((uint64_t *)(a6 + 8), (uint64_t)&v56);
      std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::destroy((uint64_t)&v56, *((void **)&v56 + 1));
    }
    std::string::size_type v42 = (void *)v54[0];
    std::string::size_type v43 = &v53;
  }
  else
  {
    if (quasar::gLogLevel >= 2)
    {
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      memset(v57, 0, sizeof(v57));
      long long v56 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
      std::string::size_type v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Utterance ", 10);
      uint64_t v38 = (unsigned int *)((char *)a4 + *(unsigned __int16 *)((char *)a4 - *a4 + 4));
      std::string::basic_string[abi:ne180100](__dst, (char *)v38 + *v38 + 4, *(unsigned int *)((char *)v38 + *v38));
      if ((v52 & 0x80u) == 0) {
        int v39 = __dst;
      }
      else {
        int v39 = (void **)__dst[0];
      }
      if ((v52 & 0x80u) == 0) {
        uint64_t v40 = v52;
      }
      else {
        uint64_t v40 = (uint64_t)__dst[1];
      }
      unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v39, v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" has no hypotheses.", 19);
      if ((char)v52 < 0) {
        operator delete(__dst[0]);
      }
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v56);
    }
    *((void *)&v56 + 1) = 0;
    v57[0] = 0;
    *(void *)&long long v56 = (char *)&v56 + 8;
    *(_DWORD *)a6 = 2;
    std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>::map[abi:ne180100]((uint64_t *)(a6 + 8), (uint64_t)&v56);
    std::string::size_type v42 = (void *)*((void *)&v56 + 1);
    std::string::size_type v43 = (uint64_t **)&v56;
  }
  std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::destroy((uint64_t)v43, v42);
}

void sub_1B1E97FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,void *a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47)
{
  MEMORY[0x1B3EA8670](v47, 0x1020C4062D53EE8);
  std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::destroy((uint64_t)&a42, a43);
  _Unwind_Resume(a1);
}

void quasar::lm::InsertOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (quasar::lm *)quasar::lm::InsertIfNotPresent<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(a1, a2, a3);
  if (v4)
  {
    quasar::lm::nullstream(v4);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v7, 5, "InsertOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 89);
    uint64_t Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v7);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"duplicate key ", 14);
    quasar::rescoring::operator<<(v6, a2);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v7);
  }
}

void sub_1B1E982B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float quasar::rescoring::Featurizer::GetAtomicFeatureValue(uint64_t a1, int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = a5;
  long long v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 < 7u)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = v10[3];
    if (v11) {
      v11 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v11);
    }
  }
  uint64_t v12 = (unsigned int *)(v11 + 4 * a4 + 4);
  uint64_t v13 = *v12;
  BOOL v14 = operator new(1uLL);
  *BOOL v14 = v9;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  uint64_t v108 = 0;
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(&v108, v14, (uint64_t)(v14 + 1), 1uLL);
  memset(v112, 0, sizeof(v112));
  long long v111 = 0u;
  operator delete(v14);
  if (a3 + 8 != std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::find<quasar::rescoring::TransformedFeatureDesc>(a3, &v108))
  {
    uint64_t v15 = quasar::lm::FindOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(a3, &v108);
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v15) == 1) {
      uint64_t v16 = *(void *)v15;
    }
    else {
      uint64_t v16 = *(void *)v15 + 4 * *((_DWORD *)v15 + 4) * (int)a4;
    }
    float v21 = *(float *)(v16 + 4 * (a5 >> 32));
    goto LABEL_14;
  }
  unint64_t v17 = (int *)((char *)v12 + v13);
  switch(v9)
  {
    case 1u:
      int v18 = (unsigned __int16 *)((char *)v17 - *v17);
      unsigned int v19 = *v18;
      if (v19 < 0xF)
      {
        float v20 = 0.0;
        float v84 = 0.0;
        if (v19 < 0xD) {
          goto LABEL_134;
        }
      }
      else if (v18[7])
      {
        float v20 = *(float *)((char *)v17 + v18[7]);
      }
      else
      {
        float v20 = 0.0;
      }
      uint64_t v86 = v18[6];
      if (v86) {
        float v84 = *(float *)((char *)v17 + v86);
      }
      else {
        float v84 = 0.0;
      }
LABEL_134:
      float v21 = v20 + v84;
      goto LABEL_14;
    case 2u:
      uint64_t v40 = (unsigned __int16 *)((char *)v17 - *v17);
      float v21 = 0.0;
      if (*v40 < 0xFu) {
        goto LABEL_14;
      }
      uint64_t v24 = v40[7];
      if (!v24) {
        goto LABEL_14;
      }
      goto LABEL_93;
    case 3u:
      long long v56 = (unsigned int *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 8));
      uint64_t v57 = *v56;
      v113[0] = &unk_1F0A5A3E8;
      v113[1] = quasar::rescoring::NBestListToken::text;
      v113[2] = 0;
      uint64_t v114 = v113;
      long long v59 = (char *)v56 + v57 + 4;
      uint64_t v58 = *(unsigned int *)((char *)v56 + v57);
      if (v58)
      {
        uint64_t v60 = 0;
        long long v61 = (unsigned int *)&v59[4 * v58];
        while (1)
        {
          if (!v114) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          long long v62 = (unsigned int *)(*(uint64_t (**)(void *, char *))(*v114 + 48))(v114, &v59[*(unsigned int *)v59]);
          if (!v62) {
            goto LABEL_88;
          }
          std::string::basic_string[abi:ne180100](__p, v62 + 1, *v62);
          if (SBYTE7(v92) < 0) {
            break;
          }
          if (BYTE7(v92))
          {
            long long v63 = __p;
            long long v64 = (char *)BYTE7(v92);
LABEL_81:
            uint64_t v65 = 0;
            do
            {
              int v66 = *(unsigned __int8 *)v63;
              long long v63 = (void **)((char *)v63 + 1);
              if (v66 == 32) {
                ++v65;
              }
              --v64;
            }
            while (v64);
            v60 += v65 + 1;
            if ((BYTE7(v92) & 0x80) == 0) {
              goto LABEL_88;
            }
            long long v63 = (void **)__p[0];
LABEL_87:
            operator delete(v63);
          }
LABEL_88:
          v59 += 4;
          if (v59 == (char *)v61) {
            goto LABEL_128;
          }
        }
        long long v63 = (void **)__p[0];
        long long v64 = (char *)__p[1];
        if (__p[1]) {
          goto LABEL_81;
        }
        goto LABEL_87;
      }
      uint64_t v60 = 0;
LABEL_128:
      float v21 = (float)(unint64_t)(v60 + 1);
      unint64_t v85 = v113;
      goto LABEL_129;
    case 6u:
      long long v68 = (unsigned __int16 *)((char *)v17 - *v17);
      float v21 = 0.0;
      if (*v68 >= 0xDu)
      {
        uint64_t v24 = v68[6];
        if (v24) {
          goto LABEL_93;
        }
      }
      goto LABEL_14;
    case 8u:
      uint64_t v29 = (unsigned int *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 8));
      uint64_t v30 = *v29;
      v115[0] = &unk_1F0A5A3E8;
      v115[1] = quasar::rescoring::NBestListToken::phones;
      v115[2] = 0;
      uint64_t v116 = v115;
      uint64_t v32 = (char *)v29 + v30 + 4;
      uint64_t v31 = *(unsigned int *)((char *)v29 + v30);
      if (!v31)
      {
        unint64_t v33 = 0;
LABEL_126:
        float v21 = (float)v33;
        unint64_t v85 = v115;
LABEL_129:
        std::__function::__value_func<flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::~__value_func[abi:ne180100](v85);
        goto LABEL_14;
      }
      unint64_t v33 = 0;
      uint64_t v34 = (unsigned int *)&v32[4 * v31];
      while (1)
      {
        if (!v116) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        unint64_t v35 = (unsigned int *)(*(uint64_t (**)(void *, char *))(*v116 + 48))(v116, &v32[*(unsigned int *)v32]);
        if (!v35) {
          goto LABEL_44;
        }
        std::string::basic_string[abi:ne180100](__p, v35 + 1, *v35);
        if (SBYTE7(v92) < 0) {
          break;
        }
        if (BYTE7(v92))
        {
          std::string::size_type v36 = __p;
          std::string::size_type v37 = (char *)BYTE7(v92);
LABEL_37:
          uint64_t v38 = 0;
          do
          {
            int v39 = *(unsigned __int8 *)v36;
            std::string::size_type v36 = (void **)((char *)v36 + 1);
            if (v39 == 32) {
              ++v38;
            }
            --v37;
          }
          while (v37);
          v33 += v38 + 1;
          if ((BYTE7(v92) & 0x80) == 0) {
            goto LABEL_44;
          }
          std::string::size_type v36 = (void **)__p[0];
LABEL_43:
          operator delete(v36);
        }
LABEL_44:
        v32 += 4;
        if (v32 == (char *)v34) {
          goto LABEL_126;
        }
      }
      std::string::size_type v36 = (void **)__p[0];
      std::string::size_type v37 = (char *)__p[1];
      if (__p[1]) {
        goto LABEL_37;
      }
      goto LABEL_43;
    case 9u:
      unint64_t v41 = (unsigned int *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 8));
      uint64_t v42 = *v41;
      uint64_t v44 = (unsigned int *)((char *)v41 + v42 + 4);
      uint64_t v43 = *(unsigned int *)((char *)v41 + v42);
      float v21 = 0.0;
      if (!v43) {
        goto LABEL_14;
      }
      uint64_t v45 = &v44[v43];
      while (1)
      {
        uint64_t v46 = (unsigned int *)((char *)v44
                             + *v44
                             + *(unsigned __int16 *)((char *)v44 + *v44 - *(unsigned int *)((char *)v44 + *v44) + 4));
        std::string::basic_string[abi:ne180100](__p, (char *)v46 + *v46 + 4, *(unsigned int *)((char *)v46 + *v46));
        uint64_t v47 = (SBYTE7(v92) & 0x80u) == 0 ? __p : (void **)__p[0];
        long long v48 = (SBYTE7(v92) & 0x80u) == 0 ? (char *)BYTE7(v92) : (char *)__p[1];
        size_t v49 = strlen("\\CS-");
        BOOL v50 = !v48 || v49 == 0;
        int v51 = "\\CS-";
        if (!v50) {
          break;
        }
LABEL_62:
        BOOL v52 = v51 == &aCs[v49];
        if (SBYTE7(v92) < 0) {
          goto LABEL_63;
        }
LABEL_64:
        if (v52) {
          goto LABEL_122;
        }
        if (++v44 == v45) {
          goto LABEL_14;
        }
      }
      size_t v53 = v49 - 1;
      long long v54 = v48 - 1;
      int v51 = "\\CS-";
      while (*(unsigned __int8 *)v47 == *v51)
      {
        ++v51;
        if (v54)
        {
          uint64_t v47 = (void **)((char *)v47 + 1);
          size_t v55 = v53--;
          --v54;
          if (v55) {
            continue;
          }
        }
        goto LABEL_62;
      }
      BOOL v52 = 0;
      if ((SBYTE7(v92) & 0x80000000) == 0) {
        goto LABEL_64;
      }
LABEL_63:
      operator delete(__p[0]);
      goto LABEL_64;
    case 0xAu:
      long long v69 = (unsigned int *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 8));
      uint64_t v70 = *v69;
      unint64_t v72 = (unsigned int *)((char *)v69 + v70 + 4);
      uint64_t v71 = *(unsigned int *)((char *)v69 + v70);
      float v21 = 0.0;
      if (!v71) {
        goto LABEL_14;
      }
      char v73 = &v72[v71];
      while (2)
      {
        uint64_t v74 = (unsigned int *)((char *)v72
                             + *v72
                             + *(unsigned __int16 *)((char *)v72 + *v72 - *(unsigned int *)((char *)v72 + *v72) + 4));
        std::string::basic_string[abi:ne180100](__p, (char *)v74 + *v74 + 4, *(unsigned int *)((char *)v74 + *v74));
        if ((SBYTE7(v92) & 0x80u) == 0) {
          uint64_t v75 = __p;
        }
        else {
          uint64_t v75 = (void **)__p[0];
        }
        if ((SBYTE7(v92) & 0x80u) == 0) {
          float v76 = (char *)BYTE7(v92);
        }
        else {
          float v76 = (char *)__p[1];
        }
        size_t v77 = strlen("\\PM-");
        if (v76) {
          BOOL v78 = v77 == 0;
        }
        else {
          BOOL v78 = 1;
        }
        uint64_t v79 = "\\PM-";
        if (v78)
        {
LABEL_107:
          BOOL v80 = v79 == &aPm[v77];
          if ((SBYTE7(v92) & 0x80000000) == 0) {
            goto LABEL_109;
          }
          goto LABEL_108;
        }
        size_t v81 = v77 - 1;
        unint64_t v82 = v76 - 1;
        uint64_t v79 = "\\PM-";
        while (*(unsigned __int8 *)v75 == *v79)
        {
          ++v79;
          if (v82)
          {
            uint64_t v75 = (void **)((char *)v75 + 1);
            size_t v83 = v81--;
            --v82;
            if (v83) {
              continue;
            }
          }
          goto LABEL_107;
        }
        BOOL v80 = 0;
        if (SBYTE7(v92) < 0) {
LABEL_108:
        }
          operator delete(__p[0]);
LABEL_109:
        if (!v80)
        {
          if (++v72 == v73) {
            goto LABEL_14;
          }
          continue;
        }
        break;
      }
LABEL_122:
      float v21 = 1.0;
LABEL_14:
      __p[0] = &v112[8];
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if ((void)v111)
      {
        *((void *)&v111 + 1) = v111;
        operator delete((void *)v111);
      }
      if (v108)
      {
        uint64_t v109 = v108;
        operator delete(v108);
      }
      return v21;
    case 0xFu:
      long long v67 = (unsigned int *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 8));
      float v21 = (float)quasar::rescoring::Featurizer::NbestListEntryContainsLMEToken(a1, (unsigned int *)((char *)v67 + *v67));
      goto LABEL_14;
    case 0x10u:
      BOOL v28 = (unsigned __int16 *)((char *)v17 - *v17);
      float v21 = 0.0;
      if (*v28 < 0x11u) {
        goto LABEL_14;
      }
      uint64_t v24 = v28[8];
      if (!v24) {
        goto LABEL_14;
      }
      goto LABEL_93;
    case 0x11u:
      uint64_t v23 = (unsigned __int16 *)((char *)v17 - *v17);
      float v21 = 0.0;
      if (*v23 < 0x13u) {
        goto LABEL_14;
      }
      uint64_t v24 = v23[9];
      if (!v24) {
        goto LABEL_14;
      }
LABEL_93:
      float v21 = *(float *)((char *)v17 + v24);
      goto LABEL_14;
    case 0x14u:
      long long v25 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v25 >= 5u && (uint64_t v26 = v25[2]) != 0) {
        int v27 = *(int *)((char *)v17 + v26);
      }
      else {
        int v27 = 0;
      }
      if (v27 == HIDWORD(a5)) {
        float v21 = 1.0;
      }
      else {
        float v21 = 0.0;
      }
      goto LABEL_14;
    case 0x15u:
      float v21 = (float)a4;
      goto LABEL_14;
    default:
      long long v106 = 0u;
      long long v107 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      *(_OWORD *)long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to compute value for feature ", 36);
      if (v9 <= 0x15) {
        float v88 = quasar::rescoring::EnumNamesFeatureType(void)::names[a5];
      }
      else {
        float v88 = "";
      }
      size_t v89 = strlen(v88);
      long long v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v88, v89);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)".", 1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
}

void sub_1B1E98B00(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmInfo::LmInfo(uint64_t a1, int a2, long long *a3)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = a2;
  uint64_t v4 = (std::string *)(a1 + 40);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 29) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(void *)(a1 + 64) = -1;
  *(unsigned char *)(a1 + 72) = 1;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  return a1;
}

void sub_1B1E98C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__tree_node<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,void *> *,long>>>(a1, *(unsigned __int8 ***)a2, (unsigned __int8 **)(a2 + 8));
  return a1;
}

void sub_1B1E98C8C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__tree_node<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,void *> *,long>>>(uint64_t *result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      float result = std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::__emplace_hint_unique_key_args<quasar::rescoring::TransformedFeatureDesc,std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (unsigned __int8 **)v7;
          uint64_t v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int8 **)v4[2];
          BOOL v9 = *v8 == (unsigned __int8 *)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::__emplace_hint_unique_key_args<quasar::rescoring::TransformedFeatureDesc,std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>> const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::__find_equal<quasar::rescoring::TransformedFeatureDesc>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::__construct_node<std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

unsigned __int8 **std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::__find_equal<quasar::rescoring::TransformedFeatureDesc>(void *a1, uint64_t *a2, unsigned __int8 ***a3, uint64_t *a4, unsigned __int8 **a5)
{
  BOOL v9 = (unsigned __int8 **)(a1 + 1);
  if (a1 + 1 != a2
    && !std::less<quasar::rescoring::TransformedFeatureDesc>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (unsigned __int8 **)a2 + 4))
  {
    if (!std::less<quasar::rescoring::TransformedFeatureDesc>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (unsigned __int8 **)a2 + 4, a5))
    {
      *a3 = (unsigned __int8 **)a2;
      *a4 = (uint64_t)a2;
      return (unsigned __int8 **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      BOOL v14 = (unsigned __int8 *)a2[1];
      do
      {
        uint64_t v15 = (unsigned __int8 **)v14;
        BOOL v14 = *(unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      int v18 = (unsigned __int8 **)a2;
      do
      {
        uint64_t v15 = (unsigned __int8 **)v18[2];
        BOOL v17 = *v15 == (unsigned __int8 *)v18;
        int v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<quasar::rescoring::TransformedFeatureDesc>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))goto LABEL_28; {
      uint64_t v13 = *a4;
      }
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (unsigned __int8 **)a2;
    }
    return (unsigned __int8 **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    uint64_t v12 = (unsigned __int8 **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (unsigned __int8 **)a2;
      return (unsigned __int8 **)a2;
    }
  }
  uint64_t v11 = (unsigned __int8 **)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (unsigned __int8 **)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = (unsigned __int8 *)a2;
    do
    {
      uint64_t v12 = (unsigned __int8 **)*((void *)v16 + 2);
      BOOL v17 = *v12 == v16;
      uint64_t v16 = (unsigned __int8 *)v12;
    }
    while (v17);
  }
  if (std::less<quasar::rescoring::TransformedFeatureDesc>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))goto LABEL_16; {
LABEL_28:
  }
  return (unsigned __int8 **)std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::__find_equal<quasar::rescoring::TransformedFeatureDesc>((uint64_t)a1, a3, a5);
}

void *std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::__construct_node<std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x90uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  float result = std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>>::pair[abi:ne180100](v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1E98FC8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::__find_equal<quasar::rescoring::TransformedFeatureDesc>(uint64_t a1, void *a2, unsigned __int8 **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        BOOL v9 = (unsigned __int8 **)(v4 + 32);
        if (!std::less<quasar::rescoring::TransformedFeatureDesc>::operator()[abi:ne180100](v7, a3, (unsigned __int8 **)(v4 + 32)))break; {
        uint64_t v4 = *v8;
        }
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<quasar::rescoring::TransformedFeatureDesc>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<quasar::rescoring::TransformedFeatureDesc>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (*a3 == v4)
  {
LABEL_10:
    if (v5 - v6 != v4 - v3) {
      return 0;
    }
    while (v6 != v5)
    {
      if (*v6 != *v3) {
        return 0;
      }
      ++v6;
      ++v3;
    }
    uint64_t v13 = a3[3];
    uint64_t v12 = a3[4];
    if (v13 == v12) {
      return 0;
    }
    BOOL v14 = (char *)a2[3];
    uint64_t v15 = v13 + 1;
    while (v14 != (char *)a2[4])
    {
      int v16 = *v14;
      int v17 = (char)*(v15 - 1);
      if (v16 < v17) {
        break;
      }
      ++v14;
      if (v17 < v16 || v15++ == v12) {
        return 0;
      }
    }
  }
  else
  {
    uint64_t v7 = v3 + 1;
    uint64_t v8 = (char *)*a2;
    while (v8 != (char *)v5)
    {
      int v9 = *v8;
      int v10 = (char)*(v7 - 1);
      if (v9 < v10) {
        break;
      }
      ++v8;
      if (v10 < v9 || v7++ == v4) {
        goto LABEL_10;
      }
    }
  }
  return 1;
}

void *std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>>::pair[abi:ne180100](void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(a1, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(a1 + 3, *(const void **)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 32) - *(void *)(a2 + 24));
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformationArgumentT*,quasar::rescoring::FeatureTransformationArgumentT*>(a1 + 6, *(void **)(a2 + 48), *(void **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  kaldi::Matrix<float>::Matrix(a1 + 9, a2 + 72);
  return a1;
}

void sub_1B1E991D4(_Unwind_Exception *a1)
{
  quasar::rescoring::TransformedFeatureDesc::~TransformedFeatureDesc(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>>,0>(uint64_t a1)
{
  kaldi::Matrix<float>::~Matrix(a1 + 72);
  uint64_t v4 = (void **)(a1 + 48);
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>>::~pair(uint64_t a1)
{
  kaldi::Matrix<float>::~Matrix(a1 + 72);
  uint64_t v5 = (void **)(a1 + 48);
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::set<quasar::rescoring::FeatureType>::set[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      std::__tree<quasar::rescoring::FeatureType>::__emplace_hint_unique_key_args<quasar::rescoring::FeatureType,quasar::rescoring::FeatureType const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1B1E993F8(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<quasar::rescoring::FeatureType>::__emplace_hint_unique_key_args<quasar::rescoring::FeatureType,quasar::rescoring::FeatureType const&>(uint64_t **a1, uint64_t *a2, char *a3, unsigned char *a4)
{
  uint64_t v6 = std::__tree<quasar::rescoring::FeatureType>::__find_equal<quasar::rescoring::FeatureType>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((unsigned char *)v7 + 25) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<quasar::rescoring::FeatureType>::__find_equal<quasar::rescoring::FeatureType>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, char *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((char *)a2 + 25), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      int v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        int v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((char *)v10 + 25) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          int v18 = *(char *)(v16 + 25);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    unsigned int v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unsigned int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((char *)a4 + 25))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          float v21 = (uint64_t *)v20;
          int v22 = *(char *)(v20 + 25);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      float v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t quasar::rescoring::NBestListToken::phones(quasar::rescoring::NBestListToken *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 >= 7u && (uint64_t v2 = v1[3]) != 0) {
    return (uint64_t)this + v2 + *(unsigned int *)((char *)this + v2);
  }
  else {
    return 0;
  }
}

uint64_t quasar::rescoring::NBestListToken::text(quasar::rescoring::NBestListToken *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 >= 5u && (uint64_t v2 = v1[2]) != 0) {
    return (uint64_t)this + v2 + *(unsigned int *)((char *)this + v2);
  }
  else {
    return 0;
  }
}

char *quasar::lm::FindOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4 = (quasar::lm *)std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::find<quasar::rescoring::TransformedFeatureDesc>(a1, a2);
  uint64_t v5 = v4;
  if ((quasar::lm *)(a1 + 8) == v4)
  {
    quasar::lm::LogMessage::LogMessage(v9, 5, "FindOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 104);
    uint64_t Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v9);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"missing key ", 12);
    quasar::rescoring::operator<<(v7, (uint64_t)a2);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v9);
  }
  else
  {
    quasar::lm::nullstream(v4);
  }
  return (char *)v5 + 104;
}

void sub_1B1E99744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::find<quasar::rescoring::TransformedFeatureDesc>(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    int v7 = std::less<quasar::rescoring::TransformedFeatureDesc>::operator()[abi:ne180100](v5, (unsigned __int8 **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<quasar::rescoring::TransformedFeatureDesc>::operator()[abi:ne180100](v5, a2, (unsigned __int8 **)(v6 + 32)))
  {
    return v2;
  }
  return v6;
}

void std::__function::__func<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const,std::allocator<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const>,flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::~__func()
{
}

__n128 std::__function::__func<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const,std::allocator<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const>,flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5A3E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const,std::allocator<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const>,flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5A3E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const,std::allocator<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const>,flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void *))(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)(a2 + (v3 >> 1));
  if (v3) {
    return (*(uint64_t (**)(void))(*v4 + v2))();
  }
  else {
    return v2(v4);
  }
}

uint64_t std::__function::__func<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const,std::allocator<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const>,flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const,std::allocator<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const>,flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::target_type()
{
}

void *std::__function::__value_func<flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>>::CheckImpl(void *result)
{
  if (!*result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Trying to use empty TableWriter (perhaps you ", 45);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "passed the empty string as an argument to a program?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t quasar::lm::InsertIfNotPresent<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>>::pair[abi:ne180100]<true,0>(v7, a2, a3);
  std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::__emplace_unique_key_args<quasar::rescoring::TransformedFeatureDesc,std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>> const&>(a1, (unsigned __int8 **)v7, (uint64_t)v7);
  char v5 = v4;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v11);
  uint64_t v12 = (void **)&v10;
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&v12);
  if (__p)
  {
    int v9 = __p;
    operator delete(__p);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  return v5 & 1;
}

void sub_1B1E99A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::__emplace_unique_key_args<quasar::rescoring::TransformedFeatureDesc,std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>> const&>(uint64_t **a1, unsigned __int8 **a2, uint64_t a3)
{
  char v5 = (uint64_t **)std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::__find_equal<quasar::rescoring::TransformedFeatureDesc>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    int v7 = v5;
    std::__tree<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::__map_value_compare<quasar::rescoring::TransformedFeatureDesc,std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,std::less<quasar::rescoring::TransformedFeatureDesc>,true>,std::allocator<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>>::__construct_node<std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void *std::pair<quasar::rescoring::TransformedFeatureDesc const,kaldi::Matrix<float>>::pair[abi:ne180100]<true,0>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(a1, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(a1 + 3, *(const void **)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 32) - *(void *)(a2 + 24));
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformationArgumentT*,quasar::rescoring::FeatureTransformationArgumentT*>(a1 + 6, *(void **)(a2 + 48), *(void **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  kaldi::Matrix<float>::Matrix(a1 + 9, a3);
  return a1;
}

void sub_1B1E99B9C(_Unwind_Exception *a1)
{
  quasar::rescoring::TransformedFeatureDesc::~TransformedFeatureDesc(v1);
  _Unwind_Resume(a1);
}

void sub_1B1E99C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E99F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char *a47)
{
  a47 = &a22;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  _Unwind_Resume(a1);
}

void sub_1B1E9A0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E9A188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B1E9A2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1B3EA8670](v18, 0x10B2C40E0D2C62ELL);

  _Unwind_Resume(a1);
}

void sub_1B1E9A9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  _Unwind_Resume(a1);
}

void EARHelpers::ArrayToVector2<std::vector<quasar::Token>,std::vector<quasar::Token> (*)(NSArray<_EARSpeechRecognitionToken *> *)>(void *a1@<X0>, void (*a2)(void *__return_ptr)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v6 = v5;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(id *)(*((void *)&v12 + 1) + 8 * v9);
        EARHelpers::ArrayToVector<std::vector<quasar::Token>,std::vector<quasar::Token> (*)(NSArray<_EARSpeechRecognitionToken *> *)>(v10, a2, v11);
        std::vector<std::vector<std::vector<quasar::Token>>>::push_back[abi:ne180100](a3, (uint64_t)v11);
        uint64_t v16 = (void **)v11;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v16);

        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v17 count:16];
    }
    while (v7);
  }
}

void sub_1B1E9AC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::KeywordFinder::KeywordFinderRetValue::~KeywordFinderRetValue(void **this)
{
  uint64_t v2 = this + 6;
  uint64_t v3 = this + 9;
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<quasar::KeywordFinder::KeywordLoggingStats>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 3;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t quasar::G2P::TokenProns::TokenProns(uint64_t a1, const std::string *a2, uint64_t *a3, uint64_t *a4)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v7 = a1 + 48;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v8 = a1 + 24;
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  if ((uint64_t *)v8 != a3) {
    std::vector<quasar::PronChoice>::__assign_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(v8, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  }
  if ((uint64_t *)v7 != a4) {
    std::vector<quasar::PronChoice>::__assign_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(v7, *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3));
  }
  return a1;
}

void sub_1B1E9AE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 25) < 0) {
      operator delete(*(void **)(i - 48));
    }
  }
  a1[1] = v2;
}

void std::vector<quasar::KeywordFinder::KeywordLoggingStats>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    id v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<quasar::KeywordFinder::KeywordLoggingStats>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::KeywordFinder::KeywordLoggingStats>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void **std::unique_ptr<quasar::KeywordFinder>::reset[abi:ne180100](void ***a1, void **a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::KeywordFinder::~KeywordFinder(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void quasar::KeywordFinder::~KeywordFinder(void **this)
{
  quasar::Sanitizer::~Sanitizer((quasar::Sanitizer *)(this + 212));
  if (*((char *)this + 1695) < 0) {
    operator delete(this[209]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[207];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[205];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 1623) < 0) {
    operator delete(this[200]);
  }
  if (*((char *)this + 1599) < 0) {
    operator delete(this[197]);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)(this + 4));
  std::__tree<int>::destroy((uint64_t)(this + 1), this[2]);
}

void quasar::G2P::TokenProns::~TokenProns(void **this)
{
  uint64_t v2 = this + 6;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 3;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::vector<quasar::G2P::TokenProns>::__push_back_slow_path<quasar::G2P::TokenProns>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v7, v9);
  uint64_t v11 = &v10[72 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[72 * v12];
  uint64_t v13 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = v13;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 6) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((void *)v11 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  void v16[2] = v11 + 72;
  std::vector<quasar::G2P::TokenProns>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::G2P::TokenProns>::~__split_buffer(v16);
  return v14;
}

void sub_1B1E9B250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::G2P::TokenProns>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::G2P::TokenProns>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::G2P::TokenProns>,std::reverse_iterator<quasar::G2P::TokenProns*>,std::reverse_iterator<quasar::G2P::TokenProns*>,std::reverse_iterator<quasar::G2P::TokenProns*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::G2P::TokenProns>,std::reverse_iterator<quasar::G2P::TokenProns*>,std::reverse_iterator<quasar::G2P::TokenProns*>,std::reverse_iterator<quasar::G2P::TokenProns*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 72);
      *(void *)(v7 - 56) = *(void *)(a3 - 56);
      *(_OWORD *)(v7 - 72) = v8;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 72) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 72;
      *((void *)&v14 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::G2P::TokenProns>,std::reverse_iterator<quasar::G2P::TokenProns*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::G2P::TokenProns>,std::reverse_iterator<quasar::G2P::TokenProns*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::G2P::TokenProns>,std::reverse_iterator<quasar::G2P::TokenProns*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::G2P::TokenProns>,std::reverse_iterator<quasar::G2P::TokenProns*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::G2P::TokenProns>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void std::allocator<quasar::G2P::TokenProns>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 48);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a2 + 24);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void **std::__split_buffer<quasar::G2P::TokenProns>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::G2P::TokenProns>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::G2P::TokenProns>::destroy[abi:ne180100](v4, i - 72);
  }
}

void std::vector<quasar::G2P::TokenProns>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<quasar::G2P::TokenProns>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void EARHelpers::ArrayToVector<std::vector<quasar::Token>,std::vector<quasar::Token> (*)(NSArray<_EARSpeechRecognitionToken *> *)>(void *a1@<X0>, void (*a2)(void *__return_ptr)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v6 = v5;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(id *)(*((void *)&v12 + 1) + 8 * v9);
        a2(v11);
        std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](a3, (uint64_t)v11);
        uint64_t v16 = (void **)v11;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v16);

        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v17 count:16];
    }
    while (v7);
  }
}

void sub_1B1E9B6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TensorFstCreator::Build(uint64_t a1)
{
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  uint64_t v2 = (void **)(a1 + 128);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 152);
  BOOL v174 = (void **)(a1 + 152);
  uint64_t v175 = 0;
  *(void *)(a1 + 160) = v3;
  uint64_t v165 = (void **)(a1 + 104);
  unint64_t v4 = (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3;
  uint64_t v176 = 0;
  uint64_t v177 = 0;
  std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::reserve(&v175, v4);
  id v5 = *(void **)(a1 + 56);
  if (v5 != *(void **)(a1 + 64))
  {
    id v6 = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 88))(*v5, 0);
    kaldi::quasar::TensorFstCreator::PreprocessFst((uint64_t)v6, v6);
  }
  unint64_t v7 = *(void *)(a1 + 144);
  uint64_t v166 = (void *)(a1 + 144);
  uint64_t v8 = *(char **)(a1 + 136);
  if ((unint64_t)v8 >= v7)
  {
    id v10 = (char *)*v2;
    uint64_t v11 = (v8 - (unsigned char *)*v2) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v166, v14);
      id v10 = *(char **)(a1 + 128);
      uint64_t v8 = *(char **)(a1 + 136);
    }
    else
    {
      long long v15 = 0;
    }
    uint64_t v16 = &v15[4 * v11];
    int v17 = &v15[4 * v14];
    *(_DWORD *)uint64_t v16 = 0;
    uint64_t v9 = v16 + 4;
    while (v8 != v10)
    {
      int v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(void *)(a1 + 128) = v16;
    *(void *)(a1 + 136) = v9;
    *(void *)(a1 + 144) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v8 = 0;
    uint64_t v9 = v8 + 4;
  }
  *(void *)(a1 + 136) = v9;
  uint64_t v19 = v175;
  uint64_t v163 = v176;
  if (v175 == v176)
  {
    int v20 = 0;
    int v173 = 1;
  }
  else
  {
    uint64_t v167 = v2;
    uint64_t v168 = 0;
    int v162 = 0;
    int v20 = 0;
    float v21 = (char **)(a1 + 168);
    int v173 = 1;
    uint64_t v161 = (char **)(a1 + 120);
    do
    {
      unint64_t v22 = *(void *)(*(void *)(*(void *)v19 + 8) + 72)
          - *(void *)(*(void *)(*(void *)v19 + 8) + 64);
      if ((int)(v22 >> 3) < 1)
      {
        ++v162;
      }
      else
      {
        unint64_t v164 = v22 >> 3;
        uint64_t v23 = 0;
        char v24 = 0;
        uint64_t v169 = (v22 >> 3);
        uint64_t v170 = (uint64_t *)v19;
        do
        {
          uint64_t v25 = *(void *)v19;
          uint64_t v26 = *(void *)(*(void *)(*(void *)(*(void *)v19 + 8) + 64) + 8 * v23);
          uint64_t v28 = *(void *)(v26 + 24);
          uint64_t v27 = *(void *)(v26 + 32);
          if (v27 == v28) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = *(void *)(v26 + 24);
          }
          if (v27 == v28)
          {
            LODWORD(v31) = 0;
            uint64_t v19 = (uint64_t)v170;
          }
          else
          {
            uint64_t v171 = v23;
            int v172 = v20;
            uint64_t v30 = 0;
            if ((unint64_t)((v27 - v28) >> 4) <= 1) {
              uint64_t v31 = 1;
            }
            else {
              uint64_t v31 = (v27 - v28) >> 4;
            }
            uint64_t v32 = *(float **)(a1 + 160);
            do
            {
              unint64_t v33 = (_DWORD *)(v29 + 16 * v30);
              BOOL v34 = *v33 == 0;
              float v35 = (float)(v33[3] + v173);
              std::string::size_type v36 = *v21;
              if (v32 >= (float *)*v21)
              {
                uint64_t v38 = (float *)*v174;
                uint64_t v39 = ((char *)v32 - (unsigned char *)*v174) >> 2;
                unint64_t v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v41 = v36 - (char *)v38;
                if (v41 >> 1 > v40) {
                  unint64_t v40 = v41 >> 1;
                }
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v42 = v40;
                }
                if (v42)
                {
                  uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v42);
                  uint64_t v38 = *(float **)(a1 + 152);
                  uint64_t v32 = *(float **)(a1 + 160);
                }
                else
                {
                  uint64_t v43 = 0;
                }
                uint64_t v44 = (float *)&v43[4 * v39];
                float *v44 = v35;
                std::string::size_type v37 = v44 + 1;
                while (v32 != v38)
                {
                  int v45 = *((_DWORD *)v32-- - 1);
                  *((_DWORD *)v44-- - 1) = v45;
                }
                std::string::size_type v36 = &v43[4 * v42];
                *(void *)(a1 + 152) = v44;
                *(void *)(a1 + 160) = v37;
                *(void *)(a1 + 168) = v36;
                if (v38)
                {
                  operator delete(v38);
                  std::string::size_type v36 = *v21;
                }
              }
              else
              {
                float *v32 = v35;
                std::string::size_type v37 = v32 + 1;
              }
              *(void *)(a1 + 160) = v37;
              float v46 = (float)(*v33 - 1);
              if (v37 >= (float *)v36)
              {
                long long v48 = (float *)*v174;
                uint64_t v49 = ((char *)v37 - (unsigned char *)*v174) >> 2;
                unint64_t v50 = v49 + 1;
                if ((unint64_t)(v49 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v51 = v36 - (char *)v48;
                if (v51 >> 1 > v50) {
                  unint64_t v50 = v51 >> 1;
                }
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v52 = v50;
                }
                if (v52)
                {
                  size_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v52);
                  long long v48 = *(float **)(a1 + 152);
                  std::string::size_type v37 = *(float **)(a1 + 160);
                }
                else
                {
                  size_t v53 = 0;
                }
                long long v54 = (float *)&v53[4 * v49];
                float *v54 = v46;
                uint64_t v47 = v54 + 1;
                while (v37 != v48)
                {
                  int v55 = *((_DWORD *)v37-- - 1);
                  *((_DWORD *)v54-- - 1) = v55;
                }
                std::string::size_type v36 = &v53[4 * v52];
                *(void *)(a1 + 152) = v54;
                *(void *)(a1 + 160) = v47;
                *(void *)(a1 + 168) = v36;
                if (v48)
                {
                  operator delete(v48);
                  std::string::size_type v36 = *v21;
                }
              }
              else
              {
                *std::string::size_type v37 = v46;
                uint64_t v47 = v37 + 1;
              }
              *(void *)(a1 + 160) = v47;
              float v56 = -*(float *)(v29 + 16 * v30 + 8);
              if (v47 >= (float *)v36)
              {
                uint64_t v57 = (float *)*v174;
                uint64_t v58 = ((char *)v47 - (unsigned char *)*v174) >> 2;
                unint64_t v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v60 = v36 - (char *)v57;
                if (v60 >> 1 > v59) {
                  unint64_t v59 = v60 >> 1;
                }
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v61 = v59;
                }
                if (v61)
                {
                  long long v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v61);
                  uint64_t v57 = *(float **)(a1 + 152);
                  uint64_t v47 = *(float **)(a1 + 160);
                }
                else
                {
                  long long v62 = 0;
                }
                long long v63 = (float *)&v62[4 * v58];
                float *v63 = v56;
                uint64_t v32 = v63 + 1;
                while (v47 != v57)
                {
                  int v64 = *((_DWORD *)v47-- - 1);
                  *((_DWORD *)v63-- - 1) = v64;
                }
                *(void *)(a1 + 152) = v63;
                *(void *)(a1 + 160) = v32;
                *(void *)(a1 + 168) = &v62[4 * v61];
                if (v57) {
                  operator delete(v57);
                }
              }
              else
              {
                *uint64_t v47 = v56;
                uint64_t v32 = v47 + 1;
              }
              v24 |= v34;
              *(void *)(a1 + 160) = v32;
              ++v30;
            }
            while (v30 != v31);
            uint64_t v19 = (uint64_t)v170;
            uint64_t v23 = v171;
            uint64_t v25 = *v170;
            int v20 = v172;
          }
          float v65 = (*(float (**)(uint64_t, uint64_t))(*(void *)v25 + 32))(v25, v23);
          *(float *)&long long __p = v65;
          int v179 = 2139095040;
          if (v65 != INFINITY)
          {
            long long v67 = *(char **)(a1 + 160);
            int v66 = *(char **)(a1 + 168);
            if (v67 >= v66)
            {
              long long v69 = (char *)*v174;
              uint64_t v70 = (v67 - (unsigned char *)*v174) >> 2;
              unint64_t v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v72 = v66 - v69;
              if (v72 >> 1 > v71) {
                unint64_t v71 = v72 >> 1;
              }
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73)
              {
                uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v73);
                long long v69 = *(char **)(a1 + 152);
                long long v67 = *(char **)(a1 + 160);
              }
              else
              {
                uint64_t v74 = 0;
              }
              uint64_t v75 = &v74[4 * v70];
              *(_DWORD *)uint64_t v75 = 0;
              long long v68 = (float *)(v75 + 4);
              while (v67 != v69)
              {
                int v76 = *((_DWORD *)v67 - 1);
                v67 -= 4;
                *((_DWORD *)v75 - 1) = v76;
                v75 -= 4;
              }
              int v66 = &v74[4 * v73];
              *(void *)(a1 + 152) = v75;
              *(void *)(a1 + 160) = v68;
              *(void *)(a1 + 168) = v66;
              if (v69)
              {
                operator delete(v69);
                int v66 = *v21;
              }
            }
            else
            {
              *(_DWORD *)long long v67 = 0;
              long long v68 = (float *)(v67 + 4);
            }
            uint64_t v77 = v23;
            *(void *)(a1 + 160) = v68;
            float v78 = (float)(*(_DWORD *)(*(void *)a1 + 8 * v168 + 4) - 1);
            if (v68 >= (float *)v66)
            {
              BOOL v80 = (float *)*v174;
              uint64_t v81 = ((char *)v68 - (unsigned char *)*v174) >> 2;
              unint64_t v82 = v81 + 1;
              if ((unint64_t)(v81 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v83 = v66 - (char *)v80;
              if (v83 >> 1 > v82) {
                unint64_t v82 = v83 >> 1;
              }
              if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v84 = v82;
              }
              if (v84)
              {
                unint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v84);
                BOOL v80 = *(float **)(a1 + 152);
                long long v68 = *(float **)(a1 + 160);
              }
              else
              {
                unint64_t v85 = 0;
              }
              uint64_t v86 = (float *)&v85[4 * v81];
              *uint64_t v86 = v78;
              uint64_t v79 = v86 + 1;
              while (v68 != v80)
              {
                int v87 = *((_DWORD *)v68-- - 1);
                *((_DWORD *)v86-- - 1) = v87;
              }
              int v66 = &v85[4 * v84];
              *(void *)(a1 + 152) = v86;
              *(void *)(a1 + 160) = v79;
              *(void *)(a1 + 168) = v66;
              if (v80)
              {
                operator delete(v80);
                int v66 = *v21;
              }
            }
            else
            {
              *long long v68 = v78;
              uint64_t v79 = v68 + 1;
            }
            *(void *)(a1 + 160) = v79;
            float v88 = -v65;
            if (v79 >= (float *)v66)
            {
              long long v90 = (float *)*v174;
              uint64_t v91 = ((char *)v79 - (unsigned char *)*v174) >> 2;
              unint64_t v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v93 = v66 - (char *)v90;
              if (v93 >> 1 > v92) {
                unint64_t v92 = v93 >> 1;
              }
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v92;
              }
              if (v94)
              {
                long long v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v94);
                long long v90 = *(float **)(a1 + 152);
                uint64_t v79 = *(float **)(a1 + 160);
              }
              else
              {
                long long v95 = 0;
              }
              long long v96 = (float *)&v95[4 * v91];
              *long long v96 = v88;
              size_t v89 = v96 + 1;
              while (v79 != v90)
              {
                int v97 = *((_DWORD *)v79-- - 1);
                *((_DWORD *)v96-- - 1) = v97;
              }
              *(void *)(a1 + 152) = v96;
              *(void *)(a1 + 160) = v89;
              *(void *)(a1 + 168) = &v95[4 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              float *v79 = v88;
              size_t v89 = v79 + 1;
            }
            uint64_t v23 = v77;
            *(void *)(a1 + 160) = v89;
            LODWORD(v31) = v31 + 1;
          }
          long long v99 = *(char **)(a1 + 136);
          unint64_t v98 = *(void *)(a1 + 144);
          if ((unint64_t)v99 >= v98)
          {
            long long v101 = (char *)*v167;
            uint64_t v102 = (v99 - (unsigned char *)*v167) >> 2;
            unint64_t v103 = v102 + 1;
            if ((unint64_t)(v102 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v104 = v98 - (void)v101;
            if (v104 >> 1 > v103) {
              unint64_t v103 = v104 >> 1;
            }
            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v105 = v103;
            }
            if (v105)
            {
              long long v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v166, v105);
              long long v101 = *(char **)(a1 + 128);
              long long v99 = *(char **)(a1 + 136);
            }
            else
            {
              long long v106 = 0;
            }
            long long v107 = &v106[4 * v102];
            *(_DWORD *)long long v107 = v20;
            long long v100 = v107 + 4;
            while (v99 != v101)
            {
              int v108 = *((_DWORD *)v99 - 1);
              v99 -= 4;
              *((_DWORD *)v107 - 1) = v108;
              v107 -= 4;
            }
            *(void *)(a1 + 128) = v107;
            *(void *)(a1 + 136) = v100;
            *(void *)(a1 + 144) = &v106[4 * v105];
            if (v101) {
              operator delete(v101);
            }
          }
          else
          {
            *(_DWORD *)long long v99 = v20;
            long long v100 = v99 + 4;
          }
          *(void *)(a1 + 136) = v100;
          v20 += v31;
          ++v23;
        }
        while (v23 != v169);
        int v109 = *(_DWORD *)(*(void *)a1 + 8 * v168) - 1;
        long long v111 = *(int **)(a1 + 112);
        uint64_t v110 = *(char **)(a1 + 120);
        if (v111 >= (int *)v110)
        {
          uint64_t v114 = (int *)*v165;
          uint64_t v115 = ((char *)v111 - (unsigned char *)*v165) >> 2;
          unint64_t v116 = v115 + 1;
          uint64_t v113 = (char **)(a1 + 120);
          if ((unint64_t)(v115 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v117 = v110 - (char *)v114;
          if (v117 >> 1 > v116) {
            unint64_t v116 = v117 >> 1;
          }
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v118 = v116;
          }
          if (v118)
          {
            uint64_t v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v161, v118);
            uint64_t v114 = *(int **)(a1 + 104);
            long long v111 = *(int **)(a1 + 112);
          }
          else
          {
            uint64_t v119 = 0;
          }
          int v120 = (int *)&v119[4 * v115];
          *int v120 = v109;
          long long v112 = v120 + 1;
          while (v111 != v114)
          {
            int v121 = *--v111;
            *--int v120 = v121;
          }
          uint64_t v110 = &v119[4 * v118];
          *(void *)(a1 + 104) = v120;
          *(void *)(a1 + 112) = v112;
          *(void *)(a1 + 120) = v110;
          if (v114)
          {
            operator delete(v114);
            uint64_t v110 = *v161;
          }
        }
        else
        {
          int *v111 = v109;
          long long v112 = v111 + 1;
          uint64_t v113 = (char **)(a1 + 120);
        }
        *(void *)(a1 + 112) = v112;
        int v122 = *(_DWORD *)(*(void *)a1 + 8 * v168 + 4) - 1;
        if (v112 >= (int *)v110)
        {
          uint64_t v124 = (int *)*v165;
          uint64_t v125 = ((char *)v112 - (unsigned char *)*v165) >> 2;
          unint64_t v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v127 = v110 - (char *)v124;
          if (v127 >> 1 > v126) {
            unint64_t v126 = v127 >> 1;
          }
          if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v128 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v128 = v126;
          }
          if (v128)
          {
            uint64_t v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v113, v128);
            uint64_t v124 = *(int **)(a1 + 104);
            long long v112 = *(int **)(a1 + 112);
          }
          else
          {
            uint64_t v129 = 0;
          }
          uint64_t v130 = (int *)&v129[4 * v125];
          *uint64_t v130 = v122;
          unint64_t v123 = v130 + 1;
          while (v112 != v124)
          {
            int v131 = *--v112;
            *--uint64_t v130 = v131;
          }
          uint64_t v110 = &v129[4 * v128];
          *(void *)(a1 + 104) = v130;
          *(void *)(a1 + 112) = v123;
          *(void *)(a1 + 120) = v110;
          if (v124)
          {
            operator delete(v124);
            uint64_t v110 = *v113;
          }
        }
        else
        {
          int *v112 = v122;
          unint64_t v123 = v112 + 1;
        }
        *(void *)(a1 + 112) = v123;
        if (v123 >= (int *)v110)
        {
          long long v133 = (int *)*v165;
          uint64_t v134 = ((char *)v123 - (unsigned char *)*v165) >> 2;
          unint64_t v135 = v134 + 1;
          if ((unint64_t)(v134 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v136 = v110 - (char *)v133;
          if (v136 >> 1 > v135) {
            unint64_t v135 = v136 >> 1;
          }
          if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v137 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v137 = v135;
          }
          if (v137)
          {
            int32x2_t v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v113, v137);
            long long v133 = *(int **)(a1 + 104);
            unint64_t v123 = *(int **)(a1 + 112);
          }
          else
          {
            int32x2_t v138 = 0;
          }
          __int32 v139 = (int *)&v138[4 * v134];
          *__int32 v139 = v173;
          float v132 = v139 + 1;
          while (v123 != v133)
          {
            int v140 = *--v123;
            *--__int32 v139 = v140;
          }
          uint64_t v110 = &v138[4 * v137];
          *(void *)(a1 + 104) = v139;
          *(void *)(a1 + 112) = v132;
          *(void *)(a1 + 120) = v110;
          if (v133)
          {
            operator delete(v133);
            uint64_t v110 = *v113;
          }
        }
        else
        {
          int *v123 = v173;
          float v132 = v123 + 1;
        }
        *(void *)(a1 + 112) = v132;
        int v141 = v24 & 1;
        if (v132 >= (int *)v110)
        {
          uint64_t v143 = (int *)*v165;
          uint64_t v144 = ((char *)v132 - (unsigned char *)*v165) >> 2;
          unint64_t v145 = v144 + 1;
          if ((unint64_t)(v144 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v146 = v110 - (char *)v143;
          if (v146 >> 1 > v145) {
            unint64_t v145 = v146 >> 1;
          }
          if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v147 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v147 = v145;
          }
          if (v147)
          {
            int32x2_t v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v113, v147);
            uint64_t v143 = *(int **)(a1 + 104);
            float v132 = *(int **)(a1 + 112);
          }
          else
          {
            int32x2_t v148 = 0;
          }
          __int32 v149 = (int *)&v148[4 * v144];
          *__int32 v149 = v141;
          uint64_t v142 = v149 + 1;
          while (v132 != v143)
          {
            int v150 = *--v132;
            *--__int32 v149 = v150;
          }
          *(void *)(a1 + 104) = v149;
          *(void *)(a1 + 112) = v142;
          *(void *)(a1 + 120) = &v148[4 * v147];
          if (v143) {
            operator delete(v143);
          }
        }
        else
        {
          int *v132 = v141;
          uint64_t v142 = v132 + 1;
        }
        v173 += v164;
        *(void *)(a1 + 112) = v142;
      }
      ++v168;
      v19 += 8;
    }
    while (v19 != v163);
    uint64_t v9 = *(char **)(a1 + 136);
    uint64_t v2 = v167;
  }
  if ((unint64_t)v9 >= *v166)
  {
    unint64_t v152 = (char *)*v2;
    uint64_t v153 = (v9 - (unsigned char *)*v2) >> 2;
    unint64_t v154 = v153 + 1;
    if ((unint64_t)(v153 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v155 = *v166 - (void)v152;
    if (v155 >> 1 > v154) {
      unint64_t v154 = v155 >> 1;
    }
    if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v156 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v156 = v154;
    }
    if (v156)
    {
      uint64_t v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v166, v156);
      unint64_t v152 = *(char **)(a1 + 128);
      uint64_t v9 = *(char **)(a1 + 136);
    }
    else
    {
      uint64_t v157 = 0;
    }
    uint64_t v158 = &v157[4 * v153];
    float v159 = &v157[4 * v156];
    *(_DWORD *)uint64_t v158 = v20;
    uint64_t v151 = v158 + 4;
    while (v9 != v152)
    {
      int v160 = *((_DWORD *)v9 - 1);
      v9 -= 4;
      *((_DWORD *)v158 - 1) = v160;
      v158 -= 4;
    }
    *(void *)(a1 + 128) = v158;
    *(void *)(a1 + 136) = v151;
    *(void *)(a1 + 144) = v159;
    if (v152) {
      operator delete(v152);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v9 = v20;
    uint64_t v151 = v9 + 4;
  }
  *(void *)(a1 + 136) = v151;
  *(_DWORD *)(a1 + 48) = v173 - 1;
  *(_DWORD *)(a1 + 52) = v20;
  long long __p = &v175;
  std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}